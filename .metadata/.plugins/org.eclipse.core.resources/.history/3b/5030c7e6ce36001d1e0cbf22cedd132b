/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
#include <sim7070g.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

RTC_HandleTypeDef hrtc;

SPI_HandleTypeDef hspi1;

TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

// External variables begin
extern char ATcommand[80];
extern simStateType simState;
extern uint8_t serialRX_Data;
// External variables end

uint8_t ATisOK = 0;
uint8_t slot = 0;
uint8_t rx_buffer[100] = {0};
uint8_t rx_index = 0;
uint8_t rx_data;
uint8_t data_received[100] = {0};
uint8_t data_index = 0;

volatile uint8_t isLD3_Flicker = 1;

uint8_t collectDataPeriod = 0x2; // Time in minutes between data collections

char timeAfterAlarm[20] = {0};

// -- Collecting Data Flags and Variables -- //
uint32_t post_time = 0; //time between posts
uint32_t collect_time = 0; //time between data collections
volatile uint8_t collect_data_flag = 0; //should data be collected?
uint8_t time_synced_flag = 0; //has time been sync?
volatile uint8_t sim_flag = 0; //should SIM operations commence?

// -- Posting Data To RiverSense Flags and Variables -- //
volatile uint8_t make_post_flag = 0; //POST needs to be made
char formsToPost_0[TOTAL_FORMS][FORMS_LENGTH] = {0};
char formsToPost_1[TOTAL_FORMS][FORMS_LENGTH] = {0};
uint16_t formsToPost_0_Index = 0;
uint16_t formsToPost_1_Index = 0;
uint8_t currentFormArr = 0;


// -- Date and Time variables -- //
uint8_t currentDateTime[6] = {0}; // year, month, day, hour, minute, second
uint32_t alarmA_SecondsOffset = 10; // alarm to collect data
uint32_t alarmB_SecondsOffset = 60; // alarm to POST data

char currentTime[20] = {0};


// -- ADC Variables --- //
volatile uint16_t adcResultsDMA[4];
const int adcChannelCount = sizeof(adcResultsDMA) / sizeof(adcResultsDMA[0]);
float TDS_value = 0.0;



/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM2_Init(void);
static void MX_SPI1_Init(void);
static void MX_RTC_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
void power_on_blocking(void);
void power_off_blocking(void);
void set_time(void);
void get_time(char* currentTime);
void set_alarm_A(uint32_t secondsOffset);
void set_alarm_B(uint32_t secondsOffset);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



// ADC Callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
	// TODO: unpack ADC data
	TDS_value = adcResultsDMA[0];

}


// UART Transmit Callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
}

// UART Receive Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if(huart->Instance==USART1) {
		SIM_serialRX_Handler(serialRX_Data);
		// Enabling interrupt receive again
		HAL_UART_Receive_IT(&huart1, &serialRX_Data, 1); // receive data (one character only)
  }

}

// TIM Callback (100ms)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {

	// Toggle LED; Just for fun
	if (isLD3_Flicker) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	}
	else {
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
	}

	// Call SIM Module handler
	if (sim_flag) {
		if (simState == SIM_STANDBY) {
			simState = SIM_INIT;
		}
		SIM_Handler();
	}
}


// Alarm A callback function (for reading data from sensors)
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
	get_time(currentTime);
	// TODO: write ADC data to forms
	if (currentFormArr==0) {
		sprintf(formsToPost_0[formsToPost_0_Index], "\"batt_%d\",\"%s,%.2f\"",formsToPost_0_Index,currentTime,TDS_value);
		++formsToPost_0_Index;
	}
	else if (currentFormArr==1) {
		sprintf(formsToPost_1[formsToPost_1_Index], "\"batt_%d\",\"%s,%.2f\"",formsToPost_1_Index,currentTime,TDS_value);
		++formsToPost_1_Index;
	}
	// TODO: write ADC data to SD card


	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, 4); // Start DMA for ADC
	set_alarm_A(alarmA_SecondsOffset);
	return;
}

// Alarm B callback function (for posting data to RiverSense)
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
	make_post_flag = 1;
	sim_flag = 1;
	currentFormArr = !currentFormArr; // Switch between forms
	set_alarm_B(alarmB_SecondsOffset);
	return;
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */



  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART1_UART_Init();
  MX_TIM2_Init();
  MX_SPI1_Init();
  MX_FATFS_Init();
  MX_RTC_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */


//  set_time();
//
//
//
//
//  uint32_t offsetTest = 4*60 + 70;
//  set_alarm_A(offsetTest);
//
//
//	RTC_DateTypeDef cDate;
//	RTC_TimeTypeDef cTime;
//	RTC_AlarmTypeDef sAlarm;
//
//	HAL_RTC_GetAlarm(&hrtc, &sAlarm, RTC_ALARM_A, RTC_FORMAT_BIN);
//	HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BIN);
//	HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BIN);


  // Baud rate synchronization
  // SIM7000 Series_UART_ApplicationNote_V1.01 p11
  // TODO: incorporate this in a state
  HAL_UART_Transmit_IT(&huart1, (uint8_t *) "AT\r\n", strlen("AT\r\n"));
  HAL_Delay(1000);
  HAL_UART_Transmit_IT(&huart1, (uint8_t *) "AT\r\n", strlen("AT\r\n"));
  HAL_Delay(1000);


  // Enable Timer(s)
  HAL_TIM_Base_Start_IT(&htim2);

  // Start ADC from DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, 4);


//  /// -------------------- SD CARD -------------------- ///
//  // Variables for FatFs
//  FATFS FatFs; // FatFs handle
//  FIL fil; // file handle
//  FRESULT fres; // result after operations
//
//  // Open the file system
//  fres = f_mount(&FatFs, "", 1); // 1: mount now
//  if (fres != FR_OK) {
//	  isLD3_Flicker = 0; // mount error
//  }
//
//  // Get statistics for the SD card
//  DWORD free_clusters, free_sectors, total_sectors;
//
//  FATFS* getFreeFs;
//
//  fres = f_getfree("", &free_clusters, &getFreeFs);
//  if (fres != FR_OK) {
//	  isLD3_Flicker = 0; // error
//  }
//
//  // Formula from ChaN's documentation
//  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
//  free_sectors = free_clusters * getFreeFs->csize;
////  myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
//
//  // Open file "test.txt"
//  fres = f_open(&fil, "test.txt", FA_READ | FA_WRITE);
//  if (fres != FR_OK) {
//	  isLD3_Flicker = 0; // error opening
//  }
//
//  // Read 30 bytes from "test.txt" on the SD card
//  BYTE readBuf[100];
//
//  // Can either use f_read OR f_gets to get data out of files
//  // f_gets is a wrapper on f_read that does some string formatting :)
//  TCHAR* rres = f_gets((TCHAR*)readBuf, sizeof(readBuf), &fil);
//  if(rres != 0) {
//	  // String has been read
//	  isLD3_Flicker = 1;
//  } else {
//	  // Error
//	  isLD3_Flicker = 0;
//  }
//
//  uint8_t dataToWrite[] = "When you poop in your dreams you poop for real\n";
//  uint nWritten = 0;
//  fres = f_write(&fil, dataToWrite, sizeof(dataToWrite)-1, &nWritten);
//  if (fres != FR_OK) {
//	  isLD3_Flicker = 0; // error writing
//  }
//
//  fres = f_write(&fil, dataToWrite, sizeof(dataToWrite)-1, &nWritten);
//  if (fres != FR_OK) {
//	  isLD3_Flicker = 0; // error writing
//  }
//
//  fres = f_write(&fil, dataToWrite, sizeof(dataToWrite)-1, &nWritten);
//  if (fres != FR_OK) {
//	  isLD3_Flicker = 0; // error writing
//  }
//
//  // Close the file
//  f_close(&fil);
//  /// ------------------------------------------------- ///

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  if (!time_synced_flag) { // Time should be sync from web server
		  sim_flag = 1; // SIM operations should commence
		  make_post_flag = 0; // No POST should be made
	  }

//	  snprintf(txBuf, TXBUFLEN, "CH1 = %d\tCH2 = %d\tCH3 = %d\tCH4 = %d\r\n", adcResultsDMA[0], adcResultsDMA[1], adcResultsDMA[2], adcResultsDMA[3], adcResultsDMA[4]);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 4;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
  sConfig.Rank = ADC_REGULAR_RANK_4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
  RTC_AlarmTypeDef sAlarm = {0};

  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
  {
    Error_Handler();
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x13;
  sTime.Minutes = 0x15;
  sTime.Seconds = 0x30;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
  sDate.Month = RTC_MONTH_AUGUST;
  sDate.Date = 0x12;
  sDate.Year = 0x97;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
  {
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x10;
  sAlarm.AlarmTime.Minutes = 0x10;
  sAlarm.AlarmTime.Seconds = 0x10;
  sAlarm.AlarmTime.SubSeconds = 0x10;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 0x1;
  sAlarm.Alarm = RTC_ALARM_A;
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
  {
    Error_Handler();
  }

  /** Enable the Alarm B
  */
  sAlarm.AlarmTime.Hours = 0x0;
  sAlarm.AlarmTime.Minutes = 0x0;
  sAlarm.AlarmTime.Seconds = 0x0;
  sAlarm.AlarmTime.SubSeconds = 0x0;
  sAlarm.Alarm = RTC_ALARM_B;
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 319;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 9999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

// Set time of RTC
void set_time(void) {
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	sDate.Year = currentDateTime[0]; // For some reason the date is off by 8 years (TODO: Fix)
	sDate.Month = currentDateTime[1];
	sDate.Date = currentDateTime[2];
	sTime.Hours = currentDateTime[3];
	sTime.Minutes = currentDateTime[4];
	sTime.Seconds = currentDateTime[5];
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
//	sDate.WeekDay = RTC_WEEKDAY_THURSDAY; // day
//	sDate.Month = RTC_MONTH_AUGUST; // month

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register (random value being written now)
	return;
}

// Get time of RTC
void get_time(char* currentTime) {

	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;
	// Get the RTC current Time
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
	//  Get the RTC current Date
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);

	sprintf(currentTime, "%2d-%02d-%02d %02d:%02d:%02d", 2000+gDate.Year, gDate.Month, gDate.Date, gTime.Hours, gTime.Minutes, gTime.Seconds);

	return;
}


// Set Alarm A
void set_alarm_A(uint32_t secondsOffset) {
	RTC_DateTypeDef cDate;
	RTC_TimeTypeDef cTime;
	RTC_AlarmTypeDef sAlarm;

	// Get RTC current date and time
	HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BIN);
	HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BIN);

	// Convert secondsOffset to hours, minutes, seconds according to current time
	secondsOffset += cTime.Hours*3600 + cTime.Minutes*60 + cTime.Seconds;
	uint8_t hr_offset = (uint8_t) (secondsOffset/3600);
	uint8_t min_offset = (uint8_t) ((secondsOffset-3600.0*hr_offset)/60.0);
	uint8_t sec_offset = (uint8_t) (secondsOffset-3600*hr_offset-60*min_offset);
	// TODO: adjust time for going into next date as well

	// Set alarm A to current date and time + offset provided
	sAlarm.AlarmTime.Hours = hr_offset;
	sAlarm.AlarmTime.Minutes = min_offset;
	sAlarm.AlarmTime.Seconds = sec_offset;
	sAlarm.AlarmTime.SubSeconds = 0;
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
	sAlarm.AlarmDateWeekDay = cDate.Date;
	sAlarm.Alarm = RTC_ALARM_A;
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);

	return;
}

// Set Alarm B
void set_alarm_B(uint32_t secondsOffset) {
	RTC_DateTypeDef cDate;
	RTC_TimeTypeDef cTime;
	RTC_AlarmTypeDef sAlarm;

	// Get RTC current date and time
	HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BIN);
	HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BIN);

	// Convert secondsOffset to hours, minutes, seconds according to current time
	secondsOffset += cTime.Hours*3600 + cTime.Minutes*60 + cTime.Seconds;
	uint8_t hr_offset = (uint8_t) (secondsOffset/3600);
	uint8_t min_offset = (uint8_t) ((secondsOffset-3600.0*hr_offset)/60.0);
	uint8_t sec_offset = (uint8_t) (secondsOffset-3600*hr_offset-60*min_offset);
	// TODO: adjust time for going into next date as well

	// Set alarm B to current date and time + offset provided
	sAlarm.AlarmTime.Hours = hr_offset;
	sAlarm.AlarmTime.Minutes = min_offset;
	sAlarm.AlarmTime.Seconds = sec_offset;
	sAlarm.AlarmTime.SubSeconds = 0;
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
	sAlarm.AlarmDateWeekDay = cDate.Date;
	sAlarm.Alarm = RTC_ALARM_B;
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);

	return;
}



/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
