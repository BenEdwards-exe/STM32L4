
river_sense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  08006bbc  08006bbc  00016bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007214  08007214  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  08007214  08007214  00017214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800721c  0800721c  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800721c  0800721c  0001721c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007220  08007220  00017220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08007224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000075c  2000013c  08007360  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000898  08007360  00020898  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132b1  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002818  00000000  00000000  0003341d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  00035c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb0  00000000  00000000  00036cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022391  00000000  00000000  00037ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013710  00000000  00000000  0005a031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd356  00000000  00000000  0006d741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013aa97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000529c  00000000  00000000  0013aae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000013c 	.word	0x2000013c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ba4 	.word	0x08006ba4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000140 	.word	0x20000140
 80001cc:	08006ba4 	.word	0x08006ba4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HAL_UART_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// UART Transmit Callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <HAL_UART_RxCpltCallback>:

// UART Receive Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1) {
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <HAL_UART_RxCpltCallback+0x30>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d109      	bne.n	80005be <HAL_UART_RxCpltCallback+0x26>
		SIM_serialRX_Handler(serialRX_Data);
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <HAL_UART_RxCpltCallback+0x34>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f9c0 	bl	8000934 <SIM_serialRX_Handler>
		// Enabling interrupt receive again
		HAL_UART_Receive_IT(&huart1, &serialRX_Data, 1); // receive data (one character only)
 80005b4:	2201      	movs	r2, #1
 80005b6:	4905      	ldr	r1, [pc, #20]	; (80005cc <HAL_UART_RxCpltCallback+0x34>)
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <HAL_UART_RxCpltCallback+0x38>)
 80005ba:	f003 fcad 	bl	8003f18 <HAL_UART_Receive_IT>
  }

}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40013800 	.word	0x40013800
 80005cc:	2000038b 	.word	0x2000038b
 80005d0:	200001a4 	.word	0x200001a4

080005d4 <HAL_TIM_PeriodElapsedCallback>:

// TIM Callback (100ms)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

	// Toggle LED; Just for fun
	if (isLD3_Flicker) {
 80005dc:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d004      	beq.n	80005f0 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80005e6:	2108      	movs	r1, #8
 80005e8:	4808      	ldr	r0, [pc, #32]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80005ea:	f001 fddd 	bl	80021a8 <HAL_GPIO_TogglePin>
 80005ee:	e004      	b.n	80005fa <HAL_TIM_PeriodElapsedCallback+0x26>
	}
	else {
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2108      	movs	r1, #8
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80005f6:	f001 fdbf 	bl	8002178 <HAL_GPIO_WritePin>
	}


	// Call SIM Module handler
	SIM_Handler();
 80005fa:	f000 f973 	bl	80008e4 <SIM_Handler>

}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000000 	.word	0x20000000
 800060c:	48000400 	.word	0x48000400

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f001 fa1d 	bl	8001a52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f822 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 f900 	bl	8000820 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000620:	f000 f8ce 	bl	80007c0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000624:	f000 f87e 	bl	8000724 <MX_TIM2_Init>


  // Baud rate synchronization
  // SIM7000 Series_UART_ApplicationNote_V1.01 p11
  // TODO: incorporate this in a state
  HAL_UART_Transmit_IT(&huart1, (uint8_t *) "AT\r\n", strlen("AT\r\n"));
 8000628:	2204      	movs	r2, #4
 800062a:	490a      	ldr	r1, [pc, #40]	; (8000654 <main+0x44>)
 800062c:	480a      	ldr	r0, [pc, #40]	; (8000658 <main+0x48>)
 800062e:	f003 fc05 	bl	8003e3c <HAL_UART_Transmit_IT>
  HAL_Delay(1000);
 8000632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000636:	f001 fa81 	bl	8001b3c <HAL_Delay>
  HAL_UART_Transmit_IT(&huart1, (uint8_t *) "AT\r\n", strlen("AT\r\n"));
 800063a:	2204      	movs	r2, #4
 800063c:	4905      	ldr	r1, [pc, #20]	; (8000654 <main+0x44>)
 800063e:	4806      	ldr	r0, [pc, #24]	; (8000658 <main+0x48>)
 8000640:	f003 fbfc 	bl	8003e3c <HAL_UART_Transmit_IT>
  HAL_Delay(1000);
 8000644:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000648:	f001 fa78 	bl	8001b3c <HAL_Delay>




  // Enable Timer(s)
  HAL_TIM_Base_Start_IT(&htim2);
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <main+0x4c>)
 800064e:	f002 ffc1 	bl	80035d4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000652:	e7fe      	b.n	8000652 <main+0x42>
 8000654:	08006bbc 	.word	0x08006bbc
 8000658:	200001a4 	.word	0x200001a4
 800065c:	20000158 	.word	0x20000158

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b096      	sub	sp, #88	; 0x58
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	2244      	movs	r2, #68	; 0x44
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f004 ff58 	bl	8005524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	463b      	mov	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000682:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000686:	f001 fdc7 	bl	8002218 <HAL_PWREx_ControlVoltageScaling>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000690:	f000 f922 	bl	80008d8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000694:	f001 fda2 	bl	80021dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <SystemClock_Config+0xc0>)
 800069a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800069e:	4a20      	ldr	r2, [pc, #128]	; (8000720 <SystemClock_Config+0xc0>)
 80006a0:	f023 0318 	bic.w	r3, r3, #24
 80006a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006a8:	2314      	movs	r3, #20
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006b8:	2360      	movs	r3, #96	; 0x60
 80006ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c0:	2301      	movs	r3, #1
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006c8:	2310      	movs	r3, #16
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fdf1 	bl	80022c4 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006e8:	f000 f8f6 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2303      	movs	r3, #3
 80006f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	2101      	movs	r1, #1
 8000704:	4618      	mov	r0, r3
 8000706:	f002 f9f1 	bl	8002aec <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000710:	f000 f8e2 	bl	80008d8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000714:	f002 fe04 	bl	8003320 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000718:	bf00      	nop
 800071a:	3758      	adds	r7, #88	; 0x58
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000

08000724 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	f107 0310 	add.w	r3, r7, #16
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000742:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_TIM2_Init+0x98>)
 8000744:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000748:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 319;
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_TIM2_Init+0x98>)
 800074c:	f240 123f 	movw	r2, #319	; 0x13f
 8000750:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_TIM2_Init+0x98>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_TIM2_Init+0x98>)
 800075a:	f242 720f 	movw	r2, #9999	; 0x270f
 800075e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_TIM2_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_TIM2_Init+0x98>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800076c:	4813      	ldr	r0, [pc, #76]	; (80007bc <MX_TIM2_Init+0x98>)
 800076e:	f002 fed9 	bl	8003524 <HAL_TIM_Base_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000778:	f000 f8ae 	bl	80008d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000780:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000782:	f107 0310 	add.w	r3, r7, #16
 8000786:	4619      	mov	r1, r3
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <MX_TIM2_Init+0x98>)
 800078a:	f003 f896 	bl	80038ba <HAL_TIM_ConfigClockSource>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000794:	f000 f8a0 	bl	80008d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_TIM2_Init+0x98>)
 80007a6:	f003 fa77 	bl	8003c98 <HAL_TIMEx_MasterConfigSynchronization>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80007b0:	f000 f892 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000158 	.word	0x20000158

080007c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_USART1_UART_Init+0x58>)
 80007c6:	4a15      	ldr	r2, [pc, #84]	; (800081c <MX_USART1_UART_Init+0x5c>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_USART1_UART_Init+0x58>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_USART1_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_USART1_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_USART1_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_USART1_UART_Init+0x58>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_USART1_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_USART1_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_USART1_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_USART1_UART_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_USART1_UART_Init+0x58>)
 8000804:	f003 facc 	bl	8003da0 <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800080e:	f000 f863 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200001a4 	.word	0x200001a4
 800081c:	40013800 	.word	0x40013800

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b088      	sub	sp, #32
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <MX_GPIO_Init+0xb0>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a25      	ldr	r2, [pc, #148]	; (80008d0 <MX_GPIO_Init+0xb0>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <MX_GPIO_Init+0xb0>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <MX_GPIO_Init+0xb0>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a1f      	ldr	r2, [pc, #124]	; (80008d0 <MX_GPIO_Init+0xb0>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_GPIO_Init+0xb0>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_GPIO_Init+0xb0>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a19      	ldr	r2, [pc, #100]	; (80008d0 <MX_GPIO_Init+0xb0>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_GPIO_Init+0xb0>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2108      	movs	r1, #8
 8000882:	4814      	ldr	r0, [pc, #80]	; (80008d4 <MX_GPIO_Init+0xb4>)
 8000884:	f001 fc78 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000888:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800088c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000896:	2303      	movs	r3, #3
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800089a:	2303      	movs	r3, #3
 800089c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	4619      	mov	r1, r3
 80008a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a8:	f001 fafc 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80008ac:	2308      	movs	r3, #8
 80008ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	4619      	mov	r1, r3
 80008c2:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_GPIO_Init+0xb4>)
 80008c4:	f001 faee 	bl	8001ea4 <HAL_GPIO_Init>

}
 80008c8:	bf00      	nop
 80008ca:	3720      	adds	r7, #32
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40021000 	.word	0x40021000
 80008d4:	48000400 	.word	0x48000400

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <SIM_Handler>:
// Buffer to store all data. TODO: remove later
uint8_t allRX_Data[1000] = {0};
uint8_t allRX_Data_Index = 0;


void SIM_Handler(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

	switch (simState) {
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <SIM_Handler+0x4c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	d81b      	bhi.n	800092a <SIM_Handler+0x46>
 80008f2:	a201      	add	r2, pc, #4	; (adr r2, 80008f8 <SIM_Handler+0x14>)
 80008f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f8:	0800090d 	.word	0x0800090d
 80008fc:	08000913 	.word	0x08000913
 8000900:	08000919 	.word	0x08000919
 8000904:	0800091f 	.word	0x0800091f
 8000908:	08000925 	.word	0x08000925
		case SIM_INIT:
			SIM_Init();
 800090c:	f000 f84e 	bl	80009ac <SIM_Init>
			break;
 8000910:	e00c      	b.n	800092c <SIM_Handler+0x48>
		case SIM_UE_CHECK:
			SIM_UE_Check();
 8000912:	f000 f8f3 	bl	8000afc <SIM_UE_Check>
			break;
 8000916:	e009      	b.n	800092c <SIM_Handler+0x48>
		case SIM_PDN_ACTIVATION:
			SIM_PDN_Activation();
 8000918:	f000 f978 	bl	8000c0c <SIM_PDN_Activation>
			break;
 800091c:	e006      	b.n	800092c <SIM_Handler+0x48>
		case SIM_HTTP_POST_BUILD:
			SIM_HTTP_Post_Build();
 800091e:	f000 fab9 	bl	8000e94 <SIM_HTTP_Post_Build>
			break;
 8000922:	e003      	b.n	800092c <SIM_Handler+0x48>
		case SIM_HTTP_MAKE_POST:
			SIM_HTTP_Make_Post();
 8000924:	f000 fc20 	bl	8001168 <SIM_HTTP_Make_Post>
			break;
 8000928:	e000      	b.n	800092c <SIM_Handler+0x48>
		default:
			break;
 800092a:	bf00      	nop
	}


	return;
 800092c:	bf00      	nop
}
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000001 	.word	0x20000001

08000934 <SIM_serialRX_Handler>:


void SIM_serialRX_Handler(uint8_t charReceived) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]

	serialRX_Buffer[serialRX_BufferIndex++] = charReceived;
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <SIM_serialRX_Handler+0x64>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	b2d1      	uxtb	r1, r2
 8000946:	4a14      	ldr	r2, [pc, #80]	; (8000998 <SIM_serialRX_Handler+0x64>)
 8000948:	7011      	strb	r1, [r2, #0]
 800094a:	4619      	mov	r1, r3
 800094c:	4a13      	ldr	r2, [pc, #76]	; (800099c <SIM_serialRX_Handler+0x68>)
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	5453      	strb	r3, [r2, r1]

	// Remove later; Just for tracking
	allRX_Data[allRX_Data_Index++] = charReceived;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <SIM_serialRX_Handler+0x6c>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	b2d1      	uxtb	r1, r2
 800095a:	4a11      	ldr	r2, [pc, #68]	; (80009a0 <SIM_serialRX_Handler+0x6c>)
 800095c:	7011      	strb	r1, [r2, #0]
 800095e:	4619      	mov	r1, r3
 8000960:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <SIM_serialRX_Handler+0x70>)
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	5453      	strb	r3, [r2, r1]



	if ((charReceived == (uint8_t)'\n')) {
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b0a      	cmp	r3, #10
 800096a:	d101      	bne.n	8000970 <SIM_serialRX_Handler+0x3c>
		SIM_Handler();
 800096c:	f7ff ffba 	bl	80008e4 <SIM_Handler>
	}


	if (clearBuffer) { // reset index and clear buffer
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <SIM_serialRX_Handler+0x74>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d00b      	beq.n	8000990 <SIM_serialRX_Handler+0x5c>
		serialRX_BufferIndex = 0;
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <SIM_serialRX_Handler+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
		memset(serialRX_Buffer, 0, sizeof(serialRX_Buffer));
 800097e:	22fa      	movs	r2, #250	; 0xfa
 8000980:	2100      	movs	r1, #0
 8000982:	4806      	ldr	r0, [pc, #24]	; (800099c <SIM_serialRX_Handler+0x68>)
 8000984:	f004 fdce 	bl	8005524 <memset>
		clearBuffer = 0;
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <SIM_serialRX_Handler+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
	}


	return;
 800098e:	bf00      	nop
 8000990:	bf00      	nop
}
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000038a 	.word	0x2000038a
 800099c:	20000290 	.word	0x20000290
 80009a0:	2000087c 	.word	0x2000087c
 80009a4:	20000494 	.word	0x20000494
 80009a8:	2000038c 	.word	0x2000038c

080009ac <SIM_Init>:


void SIM_Init(void) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
	// ---------------------------- TX ------------------------------- //
	// 0: AT
	// 1: AT+CPIN?
	// All good state change: SIM_INIT to SIM_UE_CHECK

	uint8_t maxCommand = 1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	71bb      	strb	r3, [r7, #6]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 80009b6:	4b44      	ldr	r3, [pc, #272]	; (8000ac8 <SIM_Init+0x11c>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d034      	beq.n	8000a28 <SIM_Init+0x7c>
 80009be:	79bb      	ldrb	r3, [r7, #6]
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	4b42      	ldr	r3, [pc, #264]	; (8000acc <SIM_Init+0x120>)
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d32d      	bcc.n	8000a28 <SIM_Init+0x7c>
		// Next command should be transmitted

		switch (commandIndex) {
 80009cc:	4b3f      	ldr	r3, [pc, #252]	; (8000acc <SIM_Init+0x120>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d002      	beq.n	80009dc <SIM_Init+0x30>
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d014      	beq.n	8000a04 <SIM_Init+0x58>
				// Check SIM card status
				sprintf(ATcommand, "AT+CPIN?\r\n");
				HAL_UART_Transmit_IT(&huart1, (uint8_t*) ATcommand, strlen(ATcommand));
				break;
			default:
				break;
 80009da:	e022      	b.n	8000a22 <SIM_Init+0x76>
				sprintf(ATcommand, "AT\r\n");
 80009dc:	493c      	ldr	r1, [pc, #240]	; (8000ad0 <SIM_Init+0x124>)
 80009de:	483d      	ldr	r0, [pc, #244]	; (8000ad4 <SIM_Init+0x128>)
 80009e0:	f004 fda8 	bl	8005534 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 80009e4:	483b      	ldr	r0, [pc, #236]	; (8000ad4 <SIM_Init+0x128>)
 80009e6:	f7ff fbf3 	bl	80001d0 <strlen>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	461a      	mov	r2, r3
 80009f0:	4938      	ldr	r1, [pc, #224]	; (8000ad4 <SIM_Init+0x128>)
 80009f2:	4839      	ldr	r0, [pc, #228]	; (8000ad8 <SIM_Init+0x12c>)
 80009f4:	f003 fa22 	bl	8003e3c <HAL_UART_Transmit_IT>
				HAL_UART_Receive_IT(&huart1, &serialRX_Data, 1);
 80009f8:	2201      	movs	r2, #1
 80009fa:	4938      	ldr	r1, [pc, #224]	; (8000adc <SIM_Init+0x130>)
 80009fc:	4836      	ldr	r0, [pc, #216]	; (8000ad8 <SIM_Init+0x12c>)
 80009fe:	f003 fa8b 	bl	8003f18 <HAL_UART_Receive_IT>
				break;
 8000a02:	e00e      	b.n	8000a22 <SIM_Init+0x76>
				sprintf(ATcommand, "AT+CPIN?\r\n");
 8000a04:	4936      	ldr	r1, [pc, #216]	; (8000ae0 <SIM_Init+0x134>)
 8000a06:	4833      	ldr	r0, [pc, #204]	; (8000ad4 <SIM_Init+0x128>)
 8000a08:	f004 fd94 	bl	8005534 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t*) ATcommand, strlen(ATcommand));
 8000a0c:	4831      	ldr	r0, [pc, #196]	; (8000ad4 <SIM_Init+0x128>)
 8000a0e:	f7ff fbdf 	bl	80001d0 <strlen>
 8000a12:	4603      	mov	r3, r0
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	461a      	mov	r2, r3
 8000a18:	492e      	ldr	r1, [pc, #184]	; (8000ad4 <SIM_Init+0x128>)
 8000a1a:	482f      	ldr	r0, [pc, #188]	; (8000ad8 <SIM_Init+0x12c>)
 8000a1c:	f003 fa0e 	bl	8003e3c <HAL_UART_Transmit_IT>
				break;
 8000a20:	bf00      	nop
		}

		shouldTransmit = 0; // no transmission until response has been read
 8000a22:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <SIM_Init+0x11c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]

	} // if shouldTransmit
	// --------------------------------------------------------------- //

	// ---------------------------- RX ------------------------------- //
	uint8_t isIncrementCommand = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	71fb      	strb	r3, [r7, #7]

	switch (commandIndex) {
 8000a2c:	4b27      	ldr	r3, [pc, #156]	; (8000acc <SIM_Init+0x120>)
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d002      	beq.n	8000a3c <SIM_Init+0x90>
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d00a      	beq.n	8000a50 <SIM_Init+0xa4>
				isStateChanged = 1;
			}

			break;
		default:
			break;
 8000a3a:	e01c      	b.n	8000a76 <SIM_Init+0xca>
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8000a3c:	4929      	ldr	r1, [pc, #164]	; (8000ae4 <SIM_Init+0x138>)
 8000a3e:	482a      	ldr	r0, [pc, #168]	; (8000ae8 <SIM_Init+0x13c>)
 8000a40:	f004 fdba 	bl	80055b8 <strstr>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d012      	beq.n	8000a70 <SIM_Init+0xc4>
				isIncrementCommand = 1; // Increment to go to next command
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	71fb      	strb	r3, [r7, #7]
			break;
 8000a4e:	e00f      	b.n	8000a70 <SIM_Init+0xc4>
			if (strstr((char*) serialRX_Buffer, "+CPIN: READY\r\n\r\nOK\r\n")) {
 8000a50:	4926      	ldr	r1, [pc, #152]	; (8000aec <SIM_Init+0x140>)
 8000a52:	4825      	ldr	r0, [pc, #148]	; (8000ae8 <SIM_Init+0x13c>)
 8000a54:	f004 fdb0 	bl	80055b8 <strstr>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d00a      	beq.n	8000a74 <SIM_Init+0xc8>
				isIncrementCommand = 1; // Increment to go to next command
 8000a5e:	2301      	movs	r3, #1
 8000a60:	71fb      	strb	r3, [r7, #7]
				simState = SIM_UE_CHECK;
 8000a62:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <SIM_Init+0x144>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	701a      	strb	r2, [r3, #0]
				isStateChanged = 1;
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <SIM_Init+0x148>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	701a      	strb	r2, [r3, #0]
			break;
 8000a6e:	e001      	b.n	8000a74 <SIM_Init+0xc8>
			break;
 8000a70:	bf00      	nop
 8000a72:	e000      	b.n	8000a76 <SIM_Init+0xca>
			break;
 8000a74:	bf00      	nop
	}

	if (isIncrementCommand) {
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00e      	beq.n	8000a9a <SIM_Init+0xee>
		++commandIndex; // Next command
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <SIM_Init+0x120>)
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	3301      	adds	r3, #1
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <SIM_Init+0x120>)
 8000a88:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <SIM_Init+0x14c>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <SIM_Init+0x11c>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	71fb      	strb	r3, [r7, #7]
	}

	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 8000a9a:	79bb      	ldrb	r3, [r7, #6]
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <SIM_Init+0x120>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d304      	bcc.n	8000ab2 <SIM_Init+0x106>
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <SIM_Init+0x148>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d006      	beq.n	8000ac0 <SIM_Init+0x114>
		commandIndex = 0;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <SIM_Init+0x120>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <SIM_Init+0x148>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
	}


	return;
 8000abe:	bf00      	nop
 8000ac0:	bf00      	nop
}
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000002 	.word	0x20000002
 8000acc:	2000028c 	.word	0x2000028c
 8000ad0:	08006bc4 	.word	0x08006bc4
 8000ad4:	20000228 	.word	0x20000228
 8000ad8:	200001a4 	.word	0x200001a4
 8000adc:	2000038b 	.word	0x2000038b
 8000ae0:	08006bcc 	.word	0x08006bcc
 8000ae4:	08006bd8 	.word	0x08006bd8
 8000ae8:	20000290 	.word	0x20000290
 8000aec:	08006be0 	.word	0x08006be0
 8000af0:	20000001 	.word	0x20000001
 8000af4:	2000028e 	.word	0x2000028e
 8000af8:	2000038c 	.word	0x2000038c

08000afc <SIM_UE_Check>:


void SIM_UE_Check(void) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0

	// ---------------------------- TX ------------------------------- //
	// 0: AT+CPSI?

	uint8_t maxCommand = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	71bb      	strb	r3, [r7, #6]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 8000b06:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <SIM_UE_Check+0xe4>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01e      	beq.n	8000b4c <SIM_UE_Check+0x50>
 8000b0e:	79bb      	ldrb	r3, [r7, #6]
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	4b34      	ldr	r3, [pc, #208]	; (8000be4 <SIM_UE_Check+0xe8>)
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d317      	bcc.n	8000b4c <SIM_UE_Check+0x50>
		// Next command should be transmitted
		switch (commandIndex) {
 8000b1c:	4b31      	ldr	r3, [pc, #196]	; (8000be4 <SIM_UE_Check+0xe8>)
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d10e      	bne.n	8000b44 <SIM_UE_Check+0x48>
			case 0:
				// Inquire UE system information
				sprintf(ATcommand, "AT+CPSI?\r\n");
 8000b26:	4930      	ldr	r1, [pc, #192]	; (8000be8 <SIM_UE_Check+0xec>)
 8000b28:	4830      	ldr	r0, [pc, #192]	; (8000bec <SIM_UE_Check+0xf0>)
 8000b2a:	f004 fd03 	bl	8005534 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8000b2e:	482f      	ldr	r0, [pc, #188]	; (8000bec <SIM_UE_Check+0xf0>)
 8000b30:	f7ff fb4e 	bl	80001d0 <strlen>
 8000b34:	4603      	mov	r3, r0
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	461a      	mov	r2, r3
 8000b3a:	492c      	ldr	r1, [pc, #176]	; (8000bec <SIM_UE_Check+0xf0>)
 8000b3c:	482c      	ldr	r0, [pc, #176]	; (8000bf0 <SIM_UE_Check+0xf4>)
 8000b3e:	f003 f97d 	bl	8003e3c <HAL_UART_Transmit_IT>
				break;
 8000b42:	e000      	b.n	8000b46 <SIM_UE_Check+0x4a>
			default:
				break;
 8000b44:	bf00      	nop
		}
		shouldTransmit = 0;
 8000b46:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <SIM_UE_Check+0xe4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]


	// ---------------------------- RX ------------------------------- //
	// If NB-IoT is online, change from SIM_UE_CHECK to SIM_PDN_ACTIVATION
	// If NB-IoT is NOT online, change from SIM_UE_CHECK to SIM_CONNECT_NBIOT
	uint8_t isIncrementCommand = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	71fb      	strb	r3, [r7, #7]

	switch (commandIndex) {
 8000b50:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <SIM_UE_Check+0xe8>)
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d116      	bne.n	8000b88 <SIM_UE_Check+0x8c>
			case 0:
				// OK should be received
				// +CPSI: LTE NB-IOT,Online should be received
				if ((strstr((char*) serialRX_Buffer, "\nOK\r\n")) && (strstr((char*) serialRX_Buffer, "+CPSI: LTE NB-IOT,Online"))) {
 8000b5a:	4926      	ldr	r1, [pc, #152]	; (8000bf4 <SIM_UE_Check+0xf8>)
 8000b5c:	4826      	ldr	r0, [pc, #152]	; (8000bf8 <SIM_UE_Check+0xfc>)
 8000b5e:	f004 fd2b 	bl	80055b8 <strstr>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d011      	beq.n	8000b8c <SIM_UE_Check+0x90>
 8000b68:	4924      	ldr	r1, [pc, #144]	; (8000bfc <SIM_UE_Check+0x100>)
 8000b6a:	4823      	ldr	r0, [pc, #140]	; (8000bf8 <SIM_UE_Check+0xfc>)
 8000b6c:	f004 fd24 	bl	80055b8 <strstr>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d00a      	beq.n	8000b8c <SIM_UE_Check+0x90>
					isIncrementCommand = 1; // Increment to go to next command
 8000b76:	2301      	movs	r3, #1
 8000b78:	71fb      	strb	r3, [r7, #7]
					simState = SIM_PDN_ACTIVATION;
 8000b7a:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <SIM_UE_Check+0x104>)
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	701a      	strb	r2, [r3, #0]
					isStateChanged = 1;
 8000b80:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <SIM_UE_Check+0x108>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
				// TODO: If NB-IoT is not online
//				[16:37:45.613] +CPSI: NO SERVICE,Online
//				[16:37:45.613]
//				[16:37:45.613] OK

				break;
 8000b86:	e001      	b.n	8000b8c <SIM_UE_Check+0x90>
			default:
				break;
 8000b88:	bf00      	nop
 8000b8a:	e000      	b.n	8000b8e <SIM_UE_Check+0x92>
				break;
 8000b8c:	bf00      	nop
		}

	if (isIncrementCommand) {
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d00e      	beq.n	8000bb2 <SIM_UE_Check+0xb6>
		++commandIndex; // Next command
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <SIM_UE_Check+0xe8>)
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <SIM_UE_Check+0xe8>)
 8000ba0:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <SIM_UE_Check+0x10c>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <SIM_UE_Check+0xe4>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	71fb      	strb	r3, [r7, #7]
	}
	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 8000bb2:	79bb      	ldrb	r3, [r7, #6]
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <SIM_UE_Check+0xe8>)
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d304      	bcc.n	8000bca <SIM_UE_Check+0xce>
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <SIM_UE_Check+0x108>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d006      	beq.n	8000bd8 <SIM_UE_Check+0xdc>
		commandIndex = 0;
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <SIM_UE_Check+0xe8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <SIM_UE_Check+0x108>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
	}


	return;
 8000bd6:	bf00      	nop
 8000bd8:	bf00      	nop
}
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000002 	.word	0x20000002
 8000be4:	2000028c 	.word	0x2000028c
 8000be8:	08006bf8 	.word	0x08006bf8
 8000bec:	20000228 	.word	0x20000228
 8000bf0:	200001a4 	.word	0x200001a4
 8000bf4:	08006bd8 	.word	0x08006bd8
 8000bf8:	20000290 	.word	0x20000290
 8000bfc:	08006c04 	.word	0x08006c04
 8000c00:	20000001 	.word	0x20000001
 8000c04:	2000028e 	.word	0x2000028e
 8000c08:	2000038c 	.word	0x2000038c

08000c0c <SIM_PDN_Activation>:



void SIM_PDN_Activation(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
	// 1: AT+COPS? - Network information, operator and network
	// 2: AT+CGNAPN - Query APN delivered by the network
	// 3: AT+CNACT? - Get local IP
	// 4: AT+CNACT=0,1 - Activate 0th PDP

	uint8_t maxCommand = 4;
 8000c12:	2304      	movs	r3, #4
 8000c14:	71bb      	strb	r3, [r7, #6]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 8000c16:	4b8b      	ldr	r3, [pc, #556]	; (8000e44 <SIM_PDN_Activation+0x238>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d067      	beq.n	8000cee <SIM_PDN_Activation+0xe2>
 8000c1e:	79bb      	ldrb	r3, [r7, #6]
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	4b89      	ldr	r3, [pc, #548]	; (8000e48 <SIM_PDN_Activation+0x23c>)
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d360      	bcc.n	8000cee <SIM_PDN_Activation+0xe2>
		// Next command should be transmitted
		switch (commandIndex) {
 8000c2c:	4b86      	ldr	r3, [pc, #536]	; (8000e48 <SIM_PDN_Activation+0x23c>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	d857      	bhi.n	8000ce6 <SIM_PDN_Activation+0xda>
 8000c36:	a201      	add	r2, pc, #4	; (adr r2, 8000c3c <SIM_PDN_Activation+0x30>)
 8000c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3c:	08000c51 	.word	0x08000c51
 8000c40:	08000c6f 	.word	0x08000c6f
 8000c44:	08000c8d 	.word	0x08000c8d
 8000c48:	08000cab 	.word	0x08000cab
 8000c4c:	08000cc9 	.word	0x08000cc9
			case 0:
				// Check PS service
				sprintf(ATcommand, "AT+CGATT?\r\n");
 8000c50:	497e      	ldr	r1, [pc, #504]	; (8000e4c <SIM_PDN_Activation+0x240>)
 8000c52:	487f      	ldr	r0, [pc, #508]	; (8000e50 <SIM_PDN_Activation+0x244>)
 8000c54:	f004 fc6e 	bl	8005534 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8000c58:	487d      	ldr	r0, [pc, #500]	; (8000e50 <SIM_PDN_Activation+0x244>)
 8000c5a:	f7ff fab9 	bl	80001d0 <strlen>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	461a      	mov	r2, r3
 8000c64:	497a      	ldr	r1, [pc, #488]	; (8000e50 <SIM_PDN_Activation+0x244>)
 8000c66:	487b      	ldr	r0, [pc, #492]	; (8000e54 <SIM_PDN_Activation+0x248>)
 8000c68:	f003 f8e8 	bl	8003e3c <HAL_UART_Transmit_IT>
				break;
 8000c6c:	e03c      	b.n	8000ce8 <SIM_PDN_Activation+0xdc>

			case 1:
				// Network information
				sprintf(ATcommand, "AT+COPS?\r\n");
 8000c6e:	497a      	ldr	r1, [pc, #488]	; (8000e58 <SIM_PDN_Activation+0x24c>)
 8000c70:	4877      	ldr	r0, [pc, #476]	; (8000e50 <SIM_PDN_Activation+0x244>)
 8000c72:	f004 fc5f 	bl	8005534 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8000c76:	4876      	ldr	r0, [pc, #472]	; (8000e50 <SIM_PDN_Activation+0x244>)
 8000c78:	f7ff faaa 	bl	80001d0 <strlen>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	461a      	mov	r2, r3
 8000c82:	4973      	ldr	r1, [pc, #460]	; (8000e50 <SIM_PDN_Activation+0x244>)
 8000c84:	4873      	ldr	r0, [pc, #460]	; (8000e54 <SIM_PDN_Activation+0x248>)
 8000c86:	f003 f8d9 	bl	8003e3c <HAL_UART_Transmit_IT>
				break;
 8000c8a:	e02d      	b.n	8000ce8 <SIM_PDN_Activation+0xdc>

			case 2:
				// Network APN
				sprintf(ATcommand, "AT+CGNAPN\r\n");
 8000c8c:	4973      	ldr	r1, [pc, #460]	; (8000e5c <SIM_PDN_Activation+0x250>)
 8000c8e:	4870      	ldr	r0, [pc, #448]	; (8000e50 <SIM_PDN_Activation+0x244>)
 8000c90:	f004 fc50 	bl	8005534 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8000c94:	486e      	ldr	r0, [pc, #440]	; (8000e50 <SIM_PDN_Activation+0x244>)
 8000c96:	f7ff fa9b 	bl	80001d0 <strlen>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	496b      	ldr	r1, [pc, #428]	; (8000e50 <SIM_PDN_Activation+0x244>)
 8000ca2:	486c      	ldr	r0, [pc, #432]	; (8000e54 <SIM_PDN_Activation+0x248>)
 8000ca4:	f003 f8ca 	bl	8003e3c <HAL_UART_Transmit_IT>
				break;
 8000ca8:	e01e      	b.n	8000ce8 <SIM_PDN_Activation+0xdc>

			case 3:
				// Local IP (to check if need to activate network)
				sprintf(ATcommand, "AT+CNACT?\r\n");
 8000caa:	496d      	ldr	r1, [pc, #436]	; (8000e60 <SIM_PDN_Activation+0x254>)
 8000cac:	4868      	ldr	r0, [pc, #416]	; (8000e50 <SIM_PDN_Activation+0x244>)
 8000cae:	f004 fc41 	bl	8005534 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8000cb2:	4867      	ldr	r0, [pc, #412]	; (8000e50 <SIM_PDN_Activation+0x244>)
 8000cb4:	f7ff fa8c 	bl	80001d0 <strlen>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4964      	ldr	r1, [pc, #400]	; (8000e50 <SIM_PDN_Activation+0x244>)
 8000cc0:	4864      	ldr	r0, [pc, #400]	; (8000e54 <SIM_PDN_Activation+0x248>)
 8000cc2:	f003 f8bb 	bl	8003e3c <HAL_UART_Transmit_IT>
				break;
 8000cc6:	e00f      	b.n	8000ce8 <SIM_PDN_Activation+0xdc>

			case 4:
				// Activate network, Activate 0th PDP.
				sprintf(ATcommand, "AT+CNACT=0,1\r\n");
 8000cc8:	4966      	ldr	r1, [pc, #408]	; (8000e64 <SIM_PDN_Activation+0x258>)
 8000cca:	4861      	ldr	r0, [pc, #388]	; (8000e50 <SIM_PDN_Activation+0x244>)
 8000ccc:	f004 fc32 	bl	8005534 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8000cd0:	485f      	ldr	r0, [pc, #380]	; (8000e50 <SIM_PDN_Activation+0x244>)
 8000cd2:	f7ff fa7d 	bl	80001d0 <strlen>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	461a      	mov	r2, r3
 8000cdc:	495c      	ldr	r1, [pc, #368]	; (8000e50 <SIM_PDN_Activation+0x244>)
 8000cde:	485d      	ldr	r0, [pc, #372]	; (8000e54 <SIM_PDN_Activation+0x248>)
 8000ce0:	f003 f8ac 	bl	8003e3c <HAL_UART_Transmit_IT>
				break;
 8000ce4:	e000      	b.n	8000ce8 <SIM_PDN_Activation+0xdc>


			default:
				break;
 8000ce6:	bf00      	nop
		}
		shouldTransmit = 0;
 8000ce8:	4b56      	ldr	r3, [pc, #344]	; (8000e44 <SIM_PDN_Activation+0x238>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]



	// ---------------------------- RX ------------------------------- //

	uint8_t isIncrementCommand = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	71fb      	strb	r3, [r7, #7]

	switch (commandIndex) {
 8000cf2:	4b55      	ldr	r3, [pc, #340]	; (8000e48 <SIM_PDN_Activation+0x23c>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	2b04      	cmp	r3, #4
 8000cfa:	d871      	bhi.n	8000de0 <SIM_PDN_Activation+0x1d4>
 8000cfc:	a201      	add	r2, pc, #4	; (adr r2, 8000d04 <SIM_PDN_Activation+0xf8>)
 8000cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d02:	bf00      	nop
 8000d04:	08000d19 	.word	0x08000d19
 8000d08:	08000d2d 	.word	0x08000d2d
 8000d0c:	08000d41 	.word	0x08000d41
 8000d10:	08000d53 	.word	0x08000d53
 8000d14:	08000db9 	.word	0x08000db9
			case 0:
				// CGATT: 1\r\n\r\nOK\r\n - Has attached
				if ( strstr((char*) serialRX_Buffer, "CGATT: 1\r\n\r\nOK\r\n") ) {
 8000d18:	4953      	ldr	r1, [pc, #332]	; (8000e68 <SIM_PDN_Activation+0x25c>)
 8000d1a:	4854      	ldr	r0, [pc, #336]	; (8000e6c <SIM_PDN_Activation+0x260>)
 8000d1c:	f004 fc4c 	bl	80055b8 <strstr>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d05e      	beq.n	8000de4 <SIM_PDN_Activation+0x1d8>
					isIncrementCommand = 1; // Increment to go to next command
 8000d26:	2301      	movs	r3, #1
 8000d28:	71fb      	strb	r3, [r7, #7]
				}

				// TODO: If not attached to PS service
				break;
 8000d2a:	e05b      	b.n	8000de4 <SIM_PDN_Activation+0x1d8>

			case 1:
				// +COPS?\r\r\n+COPS: 1,0,\"VodaCom-SA\",9\r\n\r\nOK\r\n - 9: NB-IoT Network
				if (strstr((char*) serialRX_Buffer, "+COPS?\r\r\n+COPS: 1,0,\"VodaCom-SA\",9\r\n\r\nOK\r\n") ) {
 8000d2c:	4950      	ldr	r1, [pc, #320]	; (8000e70 <SIM_PDN_Activation+0x264>)
 8000d2e:	484f      	ldr	r0, [pc, #316]	; (8000e6c <SIM_PDN_Activation+0x260>)
 8000d30:	f004 fc42 	bl	80055b8 <strstr>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d056      	beq.n	8000de8 <SIM_PDN_Activation+0x1dc>
					isIncrementCommand = 1;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	71fb      	strb	r3, [r7, #7]
				}

				// TODO: If network information is wrong
				break;
 8000d3e:	e053      	b.n	8000de8 <SIM_PDN_Activation+0x1dc>

			case 2:
				// +CGNAPN: 1,\"internet\"\r\n\r\nOK\r\n
				if ( strstr((char*) serialRX_Buffer, "+CGNAPN: 1,\"internet\"\r\n\r\nOK\r\n") ) {
 8000d40:	494c      	ldr	r1, [pc, #304]	; (8000e74 <SIM_PDN_Activation+0x268>)
 8000d42:	484a      	ldr	r0, [pc, #296]	; (8000e6c <SIM_PDN_Activation+0x260>)
 8000d44:	f004 fc38 	bl	80055b8 <strstr>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SIM_PDN_Activation+0x146>
					isIncrementCommand = 1;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	71fb      	strb	r3, [r7, #7]
				}

			case 3:
				// +CNACT: 0,0,\"0.0.0.0\" - Not activated
				// \r\nOK\r\n - End of response
				if ( (strstr((char*) serialRX_Buffer, "+CNACT: 0,0,\"0.0.0.0\"")) && (strstr((char*) serialRX_Buffer, "\r\nOK\r\n")) ) {
 8000d52:	4949      	ldr	r1, [pc, #292]	; (8000e78 <SIM_PDN_Activation+0x26c>)
 8000d54:	4845      	ldr	r0, [pc, #276]	; (8000e6c <SIM_PDN_Activation+0x260>)
 8000d56:	f004 fc2f 	bl	80055b8 <strstr>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d010      	beq.n	8000d82 <SIM_PDN_Activation+0x176>
 8000d60:	4946      	ldr	r1, [pc, #280]	; (8000e7c <SIM_PDN_Activation+0x270>)
 8000d62:	4842      	ldr	r0, [pc, #264]	; (8000e6c <SIM_PDN_Activation+0x260>)
 8000d64:	f004 fc28 	bl	80055b8 <strstr>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d009      	beq.n	8000d82 <SIM_PDN_Activation+0x176>
					// Set to correct command for activation; Clear buffer; Enable transmit next command
					commandIndex = 4;
 8000d6e:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <SIM_PDN_Activation+0x23c>)
 8000d70:	2204      	movs	r2, #4
 8000d72:	801a      	strh	r2, [r3, #0]
					clearBuffer = 1;
 8000d74:	4b42      	ldr	r3, [pc, #264]	; (8000e80 <SIM_PDN_Activation+0x274>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
					shouldTransmit = 1;
 8000d7a:	4b32      	ldr	r3, [pc, #200]	; (8000e44 <SIM_PDN_Activation+0x238>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	701a      	strb	r2, [r3, #0]
					simState = SIM_HTTP_POST_BUILD;
					isStateChanged = 1;
					clearBuffer = 1;
					shouldTransmit = 1;
				}
				break;
 8000d80:	e034      	b.n	8000dec <SIM_PDN_Activation+0x1e0>
				else if ( (strstr((char*) serialRX_Buffer, "\r\n+CNACT: 0,1,")) && (strstr((char*) serialRX_Buffer, "\r\nOK\r\n"))) {
 8000d82:	4940      	ldr	r1, [pc, #256]	; (8000e84 <SIM_PDN_Activation+0x278>)
 8000d84:	4839      	ldr	r0, [pc, #228]	; (8000e6c <SIM_PDN_Activation+0x260>)
 8000d86:	f004 fc17 	bl	80055b8 <strstr>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d02d      	beq.n	8000dec <SIM_PDN_Activation+0x1e0>
 8000d90:	493a      	ldr	r1, [pc, #232]	; (8000e7c <SIM_PDN_Activation+0x270>)
 8000d92:	4836      	ldr	r0, [pc, #216]	; (8000e6c <SIM_PDN_Activation+0x260>)
 8000d94:	f004 fc10 	bl	80055b8 <strstr>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d026      	beq.n	8000dec <SIM_PDN_Activation+0x1e0>
					simState = SIM_HTTP_POST_BUILD;
 8000d9e:	4b3a      	ldr	r3, [pc, #232]	; (8000e88 <SIM_PDN_Activation+0x27c>)
 8000da0:	2203      	movs	r2, #3
 8000da2:	701a      	strb	r2, [r3, #0]
					isStateChanged = 1;
 8000da4:	4b39      	ldr	r3, [pc, #228]	; (8000e8c <SIM_PDN_Activation+0x280>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]
					clearBuffer = 1;
 8000daa:	4b35      	ldr	r3, [pc, #212]	; (8000e80 <SIM_PDN_Activation+0x274>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
					shouldTransmit = 1;
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <SIM_PDN_Activation+0x238>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
				break;
 8000db6:	e019      	b.n	8000dec <SIM_PDN_Activation+0x1e0>

			case 4:
				// +APP PDP: 0,ACTIVE\r\n - Activated
				if ( strstr((char*) serialRX_Buffer, "+APP PDP: 0,ACTIVE\r\n") ) {
 8000db8:	4935      	ldr	r1, [pc, #212]	; (8000e90 <SIM_PDN_Activation+0x284>)
 8000dba:	482c      	ldr	r0, [pc, #176]	; (8000e6c <SIM_PDN_Activation+0x260>)
 8000dbc:	f004 fbfc 	bl	80055b8 <strstr>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d014      	beq.n	8000df0 <SIM_PDN_Activation+0x1e4>
					// Successful network activation
					// Change state; Clear buffer; Enable transmit
					simState = SIM_HTTP_POST_BUILD;
 8000dc6:	4b30      	ldr	r3, [pc, #192]	; (8000e88 <SIM_PDN_Activation+0x27c>)
 8000dc8:	2203      	movs	r2, #3
 8000dca:	701a      	strb	r2, [r3, #0]
					isStateChanged = 1;
 8000dcc:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <SIM_PDN_Activation+0x280>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	701a      	strb	r2, [r3, #0]
					clearBuffer = 1;
 8000dd2:	4b2b      	ldr	r3, [pc, #172]	; (8000e80 <SIM_PDN_Activation+0x274>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	701a      	strb	r2, [r3, #0]
					shouldTransmit = 1;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <SIM_PDN_Activation+0x238>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000dde:	e007      	b.n	8000df0 <SIM_PDN_Activation+0x1e4>

			default:
				break;
 8000de0:	bf00      	nop
 8000de2:	e006      	b.n	8000df2 <SIM_PDN_Activation+0x1e6>
				break;
 8000de4:	bf00      	nop
 8000de6:	e004      	b.n	8000df2 <SIM_PDN_Activation+0x1e6>
				break;
 8000de8:	bf00      	nop
 8000dea:	e002      	b.n	8000df2 <SIM_PDN_Activation+0x1e6>
				break;
 8000dec:	bf00      	nop
 8000dee:	e000      	b.n	8000df2 <SIM_PDN_Activation+0x1e6>
				break;
 8000df0:	bf00      	nop
		}

	if (isIncrementCommand) {
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d00e      	beq.n	8000e16 <SIM_PDN_Activation+0x20a>
		++commandIndex; // Next command
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <SIM_PDN_Activation+0x23c>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	3301      	adds	r3, #1
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <SIM_PDN_Activation+0x23c>)
 8000e04:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 8000e06:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <SIM_PDN_Activation+0x274>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 8000e0c:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <SIM_PDN_Activation+0x238>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	71fb      	strb	r3, [r7, #7]
	}
	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 8000e16:	79bb      	ldrb	r3, [r7, #6]
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <SIM_PDN_Activation+0x23c>)
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d304      	bcc.n	8000e2e <SIM_PDN_Activation+0x222>
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <SIM_PDN_Activation+0x280>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d006      	beq.n	8000e3c <SIM_PDN_Activation+0x230>
		commandIndex = 0;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <SIM_PDN_Activation+0x23c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <SIM_PDN_Activation+0x280>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
	}


	return;
 8000e3a:	bf00      	nop
 8000e3c:	bf00      	nop
}
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000002 	.word	0x20000002
 8000e48:	2000028c 	.word	0x2000028c
 8000e4c:	08006c20 	.word	0x08006c20
 8000e50:	20000228 	.word	0x20000228
 8000e54:	200001a4 	.word	0x200001a4
 8000e58:	08006c2c 	.word	0x08006c2c
 8000e5c:	08006c38 	.word	0x08006c38
 8000e60:	08006c44 	.word	0x08006c44
 8000e64:	08006c50 	.word	0x08006c50
 8000e68:	08006c60 	.word	0x08006c60
 8000e6c:	20000290 	.word	0x20000290
 8000e70:	08006c74 	.word	0x08006c74
 8000e74:	08006ca0 	.word	0x08006ca0
 8000e78:	08006cc0 	.word	0x08006cc0
 8000e7c:	08006cd8 	.word	0x08006cd8
 8000e80:	2000038c 	.word	0x2000038c
 8000e84:	08006ce0 	.word	0x08006ce0
 8000e88:	20000001 	.word	0x20000001
 8000e8c:	2000028e 	.word	0x2000028e
 8000e90:	08006cf0 	.word	0x08006cf0

08000e94 <SIM_HTTP_Post_Build>:


void SIM_HTTP_Post_Build(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
	// 4: AT+SHCONF="HEADERLEN",350 - Set HTTP head length
	// 5: AT+SHCONN - HTTP build (retry if unsuccessful)
	// Change from SIM_HTTP_POST_BUILD to HTTP_MAKE_POST


	uint8_t maxCommand = 5;
 8000e9a:	2305      	movs	r3, #5
 8000e9c:	71bb      	strb	r3, [r7, #6]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 8000e9e:	4b9e      	ldr	r3, [pc, #632]	; (8001118 <SIM_HTTP_Post_Build+0x284>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d07b      	beq.n	8000f9e <SIM_HTTP_Post_Build+0x10a>
 8000ea6:	79bb      	ldrb	r3, [r7, #6]
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	4b9c      	ldr	r3, [pc, #624]	; (800111c <SIM_HTTP_Post_Build+0x288>)
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d374      	bcc.n	8000f9e <SIM_HTTP_Post_Build+0x10a>
		// Next command should be transmitted

		switch (commandIndex) {
 8000eb4:	4b99      	ldr	r3, [pc, #612]	; (800111c <SIM_HTTP_Post_Build+0x288>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	2b05      	cmp	r3, #5
 8000ebc:	d86b      	bhi.n	8000f96 <SIM_HTTP_Post_Build+0x102>
 8000ebe:	a201      	add	r2, pc, #4	; (adr r2, 8000ec4 <SIM_HTTP_Post_Build+0x30>)
 8000ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec4:	08000edd 	.word	0x08000edd
 8000ec8:	08000efb 	.word	0x08000efb
 8000ecc:	08000f19 	.word	0x08000f19
 8000ed0:	08000f37 	.word	0x08000f37
 8000ed4:	08000f55 	.word	0x08000f55
 8000ed8:	08000f73 	.word	0x08000f73
			case 0:
				// Check if HTTP is connected
				sprintf(ATcommand, "AT+SHSTATE?\r\n");
 8000edc:	4990      	ldr	r1, [pc, #576]	; (8001120 <SIM_HTTP_Post_Build+0x28c>)
 8000ede:	4891      	ldr	r0, [pc, #580]	; (8001124 <SIM_HTTP_Post_Build+0x290>)
 8000ee0:	f004 fb28 	bl	8005534 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8000ee4:	488f      	ldr	r0, [pc, #572]	; (8001124 <SIM_HTTP_Post_Build+0x290>)
 8000ee6:	f7ff f973 	bl	80001d0 <strlen>
 8000eea:	4603      	mov	r3, r0
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	461a      	mov	r2, r3
 8000ef0:	498c      	ldr	r1, [pc, #560]	; (8001124 <SIM_HTTP_Post_Build+0x290>)
 8000ef2:	488d      	ldr	r0, [pc, #564]	; (8001128 <SIM_HTTP_Post_Build+0x294>)
 8000ef4:	f002 ffa2 	bl	8003e3c <HAL_UART_Transmit_IT>
				break;
 8000ef8:	e04e      	b.n	8000f98 <SIM_HTTP_Post_Build+0x104>

			case 1:
				// Disconnect HTTP
				sprintf(ATcommand, "AT+SHDISC\r\n");
 8000efa:	498c      	ldr	r1, [pc, #560]	; (800112c <SIM_HTTP_Post_Build+0x298>)
 8000efc:	4889      	ldr	r0, [pc, #548]	; (8001124 <SIM_HTTP_Post_Build+0x290>)
 8000efe:	f004 fb19 	bl	8005534 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8000f02:	4888      	ldr	r0, [pc, #544]	; (8001124 <SIM_HTTP_Post_Build+0x290>)
 8000f04:	f7ff f964 	bl	80001d0 <strlen>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4985      	ldr	r1, [pc, #532]	; (8001124 <SIM_HTTP_Post_Build+0x290>)
 8000f10:	4885      	ldr	r0, [pc, #532]	; (8001128 <SIM_HTTP_Post_Build+0x294>)
 8000f12:	f002 ff93 	bl	8003e3c <HAL_UART_Transmit_IT>
				break;
 8000f16:	e03f      	b.n	8000f98 <SIM_HTTP_Post_Build+0x104>

			case 2:
				// Set up server URL
				sprintf(ATcommand, "AT+SHCONF=\"URL\",\"http://riversense.herokuapp.com\"\r\n");
 8000f18:	4985      	ldr	r1, [pc, #532]	; (8001130 <SIM_HTTP_Post_Build+0x29c>)
 8000f1a:	4882      	ldr	r0, [pc, #520]	; (8001124 <SIM_HTTP_Post_Build+0x290>)
 8000f1c:	f004 fb0a 	bl	8005534 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8000f20:	4880      	ldr	r0, [pc, #512]	; (8001124 <SIM_HTTP_Post_Build+0x290>)
 8000f22:	f7ff f955 	bl	80001d0 <strlen>
 8000f26:	4603      	mov	r3, r0
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	497d      	ldr	r1, [pc, #500]	; (8001124 <SIM_HTTP_Post_Build+0x290>)
 8000f2e:	487e      	ldr	r0, [pc, #504]	; (8001128 <SIM_HTTP_Post_Build+0x294>)
 8000f30:	f002 ff84 	bl	8003e3c <HAL_UART_Transmit_IT>
				break;
 8000f34:	e030      	b.n	8000f98 <SIM_HTTP_Post_Build+0x104>

			case 3:
				// Set HTTP body length
				sprintf(ATcommand, "AT+SHCONF=\"BODYLEN\",1024\r\n");
 8000f36:	497f      	ldr	r1, [pc, #508]	; (8001134 <SIM_HTTP_Post_Build+0x2a0>)
 8000f38:	487a      	ldr	r0, [pc, #488]	; (8001124 <SIM_HTTP_Post_Build+0x290>)
 8000f3a:	f004 fafb 	bl	8005534 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8000f3e:	4879      	ldr	r0, [pc, #484]	; (8001124 <SIM_HTTP_Post_Build+0x290>)
 8000f40:	f7ff f946 	bl	80001d0 <strlen>
 8000f44:	4603      	mov	r3, r0
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4976      	ldr	r1, [pc, #472]	; (8001124 <SIM_HTTP_Post_Build+0x290>)
 8000f4c:	4876      	ldr	r0, [pc, #472]	; (8001128 <SIM_HTTP_Post_Build+0x294>)
 8000f4e:	f002 ff75 	bl	8003e3c <HAL_UART_Transmit_IT>
				break;
 8000f52:	e021      	b.n	8000f98 <SIM_HTTP_Post_Build+0x104>

			case 4:
				// Set HTTP head length
				sprintf(ATcommand, "AT+SHCONF=\"HEADERLEN\",350\r\n");
 8000f54:	4978      	ldr	r1, [pc, #480]	; (8001138 <SIM_HTTP_Post_Build+0x2a4>)
 8000f56:	4873      	ldr	r0, [pc, #460]	; (8001124 <SIM_HTTP_Post_Build+0x290>)
 8000f58:	f004 faec 	bl	8005534 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8000f5c:	4871      	ldr	r0, [pc, #452]	; (8001124 <SIM_HTTP_Post_Build+0x290>)
 8000f5e:	f7ff f937 	bl	80001d0 <strlen>
 8000f62:	4603      	mov	r3, r0
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	496e      	ldr	r1, [pc, #440]	; (8001124 <SIM_HTTP_Post_Build+0x290>)
 8000f6a:	486f      	ldr	r0, [pc, #444]	; (8001128 <SIM_HTTP_Post_Build+0x294>)
 8000f6c:	f002 ff66 	bl	8003e3c <HAL_UART_Transmit_IT>
				break;
 8000f70:	e012      	b.n	8000f98 <SIM_HTTP_Post_Build+0x104>

			case 5:
				// HTTP connect (retry if unsuccessful)
				sprintf(ATcommand, "AT+SHCONN\r\n");
 8000f72:	4972      	ldr	r1, [pc, #456]	; (800113c <SIM_HTTP_Post_Build+0x2a8>)
 8000f74:	486b      	ldr	r0, [pc, #428]	; (8001124 <SIM_HTTP_Post_Build+0x290>)
 8000f76:	f004 fadd 	bl	8005534 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8000f7a:	486a      	ldr	r0, [pc, #424]	; (8001124 <SIM_HTTP_Post_Build+0x290>)
 8000f7c:	f7ff f928 	bl	80001d0 <strlen>
 8000f80:	4603      	mov	r3, r0
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	461a      	mov	r2, r3
 8000f86:	4967      	ldr	r1, [pc, #412]	; (8001124 <SIM_HTTP_Post_Build+0x290>)
 8000f88:	4867      	ldr	r0, [pc, #412]	; (8001128 <SIM_HTTP_Post_Build+0x294>)
 8000f8a:	f002 ff57 	bl	8003e3c <HAL_UART_Transmit_IT>
				isLD3_Flicker = 0; // TODO: remove later
 8000f8e:	4b6c      	ldr	r3, [pc, #432]	; (8001140 <SIM_HTTP_Post_Build+0x2ac>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
				break;
 8000f94:	e000      	b.n	8000f98 <SIM_HTTP_Post_Build+0x104>

			default:
				break;
 8000f96:	bf00      	nop
		}

		shouldTransmit = 0; // no transmission until response has been read
 8000f98:	4b5f      	ldr	r3, [pc, #380]	; (8001118 <SIM_HTTP_Post_Build+0x284>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]

	} // if shouldTransmit
	// --------------------------------------------------------------- //

	// ---------------------------- RX ------------------------------- //
	uint8_t isIncrementCommand = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	71fb      	strb	r3, [r7, #7]

	switch (commandIndex) {
 8000fa2:	4b5e      	ldr	r3, [pc, #376]	; (800111c <SIM_HTTP_Post_Build+0x288>)
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	2b05      	cmp	r3, #5
 8000faa:	d87e      	bhi.n	80010aa <SIM_HTTP_Post_Build+0x216>
 8000fac:	a201      	add	r2, pc, #4	; (adr r2, 8000fb4 <SIM_HTTP_Post_Build+0x120>)
 8000fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb2:	bf00      	nop
 8000fb4:	08000fcd 	.word	0x08000fcd
 8000fb8:	08001011 	.word	0x08001011
 8000fbc:	08001025 	.word	0x08001025
 8000fc0:	08001039 	.word	0x08001039
 8000fc4:	0800104d 	.word	0x0800104d
 8000fc8:	08001061 	.word	0x08001061
		case 0:
			// +SHSTATE: 0\r\n\r\nOK\r\n - HTTP disconnect state
			if (strstr((char*) serialRX_Buffer, "+SHSTATE: 0\r\n\r\nOK\r\n")) {
 8000fcc:	495d      	ldr	r1, [pc, #372]	; (8001144 <SIM_HTTP_Post_Build+0x2b0>)
 8000fce:	485e      	ldr	r0, [pc, #376]	; (8001148 <SIM_HTTP_Post_Build+0x2b4>)
 8000fd0:	f004 faf2 	bl	80055b8 <strstr>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d009      	beq.n	8000fee <SIM_HTTP_Post_Build+0x15a>
				commandIndex = 2; // AT+SHCONF=... next command
 8000fda:	4b50      	ldr	r3, [pc, #320]	; (800111c <SIM_HTTP_Post_Build+0x288>)
 8000fdc:	2202      	movs	r2, #2
 8000fde:	801a      	strh	r2, [r3, #0]
				clearBuffer = 1; // Clear buffer to receive next response
 8000fe0:	4b5a      	ldr	r3, [pc, #360]	; (800114c <SIM_HTTP_Post_Build+0x2b8>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1; // Can transmit next command
 8000fe6:	4b4c      	ldr	r3, [pc, #304]	; (8001118 <SIM_HTTP_Post_Build+0x284>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
			else if (strstr((char*) serialRX_Buffer, "+SHSTATE: 1\r\n\r\nOK\r\n")) {
				commandIndex = 1; // AT+SHDISC next command
				clearBuffer = 1; // Clear buffer to receive next response
				shouldTransmit = 1; // Can transmit next command
			}
			break;
 8000fec:	e05f      	b.n	80010ae <SIM_HTTP_Post_Build+0x21a>
			else if (strstr((char*) serialRX_Buffer, "+SHSTATE: 1\r\n\r\nOK\r\n")) {
 8000fee:	4958      	ldr	r1, [pc, #352]	; (8001150 <SIM_HTTP_Post_Build+0x2bc>)
 8000ff0:	4855      	ldr	r0, [pc, #340]	; (8001148 <SIM_HTTP_Post_Build+0x2b4>)
 8000ff2:	f004 fae1 	bl	80055b8 <strstr>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d058      	beq.n	80010ae <SIM_HTTP_Post_Build+0x21a>
				commandIndex = 1; // AT+SHDISC next command
 8000ffc:	4b47      	ldr	r3, [pc, #284]	; (800111c <SIM_HTTP_Post_Build+0x288>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	801a      	strh	r2, [r3, #0]
				clearBuffer = 1; // Clear buffer to receive next response
 8001002:	4b52      	ldr	r3, [pc, #328]	; (800114c <SIM_HTTP_Post_Build+0x2b8>)
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1; // Can transmit next command
 8001008:	4b43      	ldr	r3, [pc, #268]	; (8001118 <SIM_HTTP_Post_Build+0x284>)
 800100a:	2201      	movs	r2, #1
 800100c:	701a      	strb	r2, [r3, #0]
			break;
 800100e:	e04e      	b.n	80010ae <SIM_HTTP_Post_Build+0x21a>

		case 1:
			// OK should be received for successful disconnect
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8001010:	4950      	ldr	r1, [pc, #320]	; (8001154 <SIM_HTTP_Post_Build+0x2c0>)
 8001012:	484d      	ldr	r0, [pc, #308]	; (8001148 <SIM_HTTP_Post_Build+0x2b4>)
 8001014:	f004 fad0 	bl	80055b8 <strstr>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d049      	beq.n	80010b2 <SIM_HTTP_Post_Build+0x21e>
				isIncrementCommand = 1;
 800101e:	2301      	movs	r3, #1
 8001020:	71fb      	strb	r3, [r7, #7]
			}
			break;
 8001022:	e046      	b.n	80010b2 <SIM_HTTP_Post_Build+0x21e>

		case 2:
			// OK should be received. URL setup
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8001024:	494b      	ldr	r1, [pc, #300]	; (8001154 <SIM_HTTP_Post_Build+0x2c0>)
 8001026:	4848      	ldr	r0, [pc, #288]	; (8001148 <SIM_HTTP_Post_Build+0x2b4>)
 8001028:	f004 fac6 	bl	80055b8 <strstr>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d041      	beq.n	80010b6 <SIM_HTTP_Post_Build+0x222>
				isIncrementCommand = 1;
 8001032:	2301      	movs	r3, #1
 8001034:	71fb      	strb	r3, [r7, #7]
			}
			break;
 8001036:	e03e      	b.n	80010b6 <SIM_HTTP_Post_Build+0x222>

		case 3:
			// OK should be received. HTTP body length
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8001038:	4946      	ldr	r1, [pc, #280]	; (8001154 <SIM_HTTP_Post_Build+0x2c0>)
 800103a:	4843      	ldr	r0, [pc, #268]	; (8001148 <SIM_HTTP_Post_Build+0x2b4>)
 800103c:	f004 fabc 	bl	80055b8 <strstr>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d039      	beq.n	80010ba <SIM_HTTP_Post_Build+0x226>
				isIncrementCommand = 1;
 8001046:	2301      	movs	r3, #1
 8001048:	71fb      	strb	r3, [r7, #7]
			}
			break;
 800104a:	e036      	b.n	80010ba <SIM_HTTP_Post_Build+0x226>

		case 4:
			// OK should be received. HTTP head length
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 800104c:	4941      	ldr	r1, [pc, #260]	; (8001154 <SIM_HTTP_Post_Build+0x2c0>)
 800104e:	483e      	ldr	r0, [pc, #248]	; (8001148 <SIM_HTTP_Post_Build+0x2b4>)
 8001050:	f004 fab2 	bl	80055b8 <strstr>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d031      	beq.n	80010be <SIM_HTTP_Post_Build+0x22a>
				isIncrementCommand = 1; // Increment to go to next command
 800105a:	2301      	movs	r3, #1
 800105c:	71fb      	strb	r3, [r7, #7]
			}
			break;
 800105e:	e02e      	b.n	80010be <SIM_HTTP_Post_Build+0x22a>

		case 5:
			// Connection successful
			if (strstr((char*) serialRX_Buffer, "AT+SHCONN\r\r\nOK\r\n")) {
 8001060:	493d      	ldr	r1, [pc, #244]	; (8001158 <SIM_HTTP_Post_Build+0x2c4>)
 8001062:	4839      	ldr	r0, [pc, #228]	; (8001148 <SIM_HTTP_Post_Build+0x2b4>)
 8001064:	f004 faa8 	bl	80055b8 <strstr>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00f      	beq.n	800108e <SIM_HTTP_Post_Build+0x1fa>
				simState = SIM_HTTP_MAKE_POST;
 800106e:	4b3b      	ldr	r3, [pc, #236]	; (800115c <SIM_HTTP_Post_Build+0x2c8>)
 8001070:	2204      	movs	r2, #4
 8001072:	701a      	strb	r2, [r3, #0]
				isStateChanged = 1;
 8001074:	4b3a      	ldr	r3, [pc, #232]	; (8001160 <SIM_HTTP_Post_Build+0x2cc>)
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1;
 800107a:	4b27      	ldr	r3, [pc, #156]	; (8001118 <SIM_HTTP_Post_Build+0x284>)
 800107c:	2201      	movs	r2, #1
 800107e:	701a      	strb	r2, [r3, #0]
				clearBuffer = 1;
 8001080:	4b32      	ldr	r3, [pc, #200]	; (800114c <SIM_HTTP_Post_Build+0x2b8>)
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]

				isLD3_Flicker = 1; // TODO: remove later
 8001086:	4b2e      	ldr	r3, [pc, #184]	; (8001140 <SIM_HTTP_Post_Build+0x2ac>)
 8001088:	2201      	movs	r2, #1
 800108a:	701a      	strb	r2, [r3, #0]
			else if (strstr((char*) serialRX_Buffer, "AT+SHCONN\r\r\nERROR\r\n")) {
				// Resends HTTP build command
				clearBuffer = 1;
				shouldTransmit = 1;
			}
			break;
 800108c:	e019      	b.n	80010c2 <SIM_HTTP_Post_Build+0x22e>
			else if (strstr((char*) serialRX_Buffer, "AT+SHCONN\r\r\nERROR\r\n")) {
 800108e:	4935      	ldr	r1, [pc, #212]	; (8001164 <SIM_HTTP_Post_Build+0x2d0>)
 8001090:	482d      	ldr	r0, [pc, #180]	; (8001148 <SIM_HTTP_Post_Build+0x2b4>)
 8001092:	f004 fa91 	bl	80055b8 <strstr>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d012      	beq.n	80010c2 <SIM_HTTP_Post_Build+0x22e>
				clearBuffer = 1;
 800109c:	4b2b      	ldr	r3, [pc, #172]	; (800114c <SIM_HTTP_Post_Build+0x2b8>)
 800109e:	2201      	movs	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1;
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <SIM_HTTP_Post_Build+0x284>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
			break;
 80010a8:	e00b      	b.n	80010c2 <SIM_HTTP_Post_Build+0x22e>

		default:
			break;
 80010aa:	bf00      	nop
 80010ac:	e00a      	b.n	80010c4 <SIM_HTTP_Post_Build+0x230>
			break;
 80010ae:	bf00      	nop
 80010b0:	e008      	b.n	80010c4 <SIM_HTTP_Post_Build+0x230>
			break;
 80010b2:	bf00      	nop
 80010b4:	e006      	b.n	80010c4 <SIM_HTTP_Post_Build+0x230>
			break;
 80010b6:	bf00      	nop
 80010b8:	e004      	b.n	80010c4 <SIM_HTTP_Post_Build+0x230>
			break;
 80010ba:	bf00      	nop
 80010bc:	e002      	b.n	80010c4 <SIM_HTTP_Post_Build+0x230>
			break;
 80010be:	bf00      	nop
 80010c0:	e000      	b.n	80010c4 <SIM_HTTP_Post_Build+0x230>
			break;
 80010c2:	bf00      	nop
	}

	if (isIncrementCommand) {
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00e      	beq.n	80010e8 <SIM_HTTP_Post_Build+0x254>
		++commandIndex; // Next command
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <SIM_HTTP_Post_Build+0x288>)
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	3301      	adds	r3, #1
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <SIM_HTTP_Post_Build+0x288>)
 80010d6:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 80010d8:	4b1c      	ldr	r3, [pc, #112]	; (800114c <SIM_HTTP_Post_Build+0x2b8>)
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <SIM_HTTP_Post_Build+0x284>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	71fb      	strb	r3, [r7, #7]
	}

	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 80010e8:	79bb      	ldrb	r3, [r7, #6]
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <SIM_HTTP_Post_Build+0x288>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d304      	bcc.n	8001100 <SIM_HTTP_Post_Build+0x26c>
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <SIM_HTTP_Post_Build+0x2cc>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d006      	beq.n	800110e <SIM_HTTP_Post_Build+0x27a>
		commandIndex = 0;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <SIM_HTTP_Post_Build+0x288>)
 8001102:	2200      	movs	r2, #0
 8001104:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <SIM_HTTP_Post_Build+0x2cc>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
	}


	return;
 800110c:	bf00      	nop
 800110e:	bf00      	nop
}
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000002 	.word	0x20000002
 800111c:	2000028c 	.word	0x2000028c
 8001120:	08006d08 	.word	0x08006d08
 8001124:	20000228 	.word	0x20000228
 8001128:	200001a4 	.word	0x200001a4
 800112c:	08006d18 	.word	0x08006d18
 8001130:	08006d24 	.word	0x08006d24
 8001134:	08006d58 	.word	0x08006d58
 8001138:	08006d74 	.word	0x08006d74
 800113c:	08006d90 	.word	0x08006d90
 8001140:	20000000 	.word	0x20000000
 8001144:	08006d9c 	.word	0x08006d9c
 8001148:	20000290 	.word	0x20000290
 800114c:	2000038c 	.word	0x2000038c
 8001150:	08006db0 	.word	0x08006db0
 8001154:	08006bd8 	.word	0x08006bd8
 8001158:	08006dc4 	.word	0x08006dc4
 800115c:	20000001 	.word	0x20000001
 8001160:	2000028e 	.word	0x2000028e
 8001164:	08006dd8 	.word	0x08006dd8

08001168 <SIM_HTTP_Make_Post>:

void SIM_HTTP_Make_Post(void) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
	// 8: AT+SHREQ="/api/update?API_KEY=9349da48-62ef-496b-831a-4720015ff72a",3 - Set request type is POST and send

	// 9: AT+SHREAD=0,2 // read http result (second variable dependant on result from SHREQ)
	// 10: AT+SHDISC - Disconnect HTTP connect

	uint8_t maxCommand = 10;
 800116e:	230a      	movs	r3, #10
 8001170:	73fb      	strb	r3, [r7, #15]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 8001172:	4baf      	ldr	r3, [pc, #700]	; (8001430 <SIM_HTTP_Make_Post+0x2c8>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 80b6 	beq.w	80012e8 <SIM_HTTP_Make_Post+0x180>
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	b29a      	uxth	r2, r3
 8001180:	4bac      	ldr	r3, [pc, #688]	; (8001434 <SIM_HTTP_Make_Post+0x2cc>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	b29b      	uxth	r3, r3
 8001186:	429a      	cmp	r2, r3
 8001188:	f0c0 80ae 	bcc.w	80012e8 <SIM_HTTP_Make_Post+0x180>
		// Next command should be transmitted

		switch (commandIndex) {
 800118c:	4ba9      	ldr	r3, [pc, #676]	; (8001434 <SIM_HTTP_Make_Post+0x2cc>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	b29b      	uxth	r3, r3
 8001192:	2b0a      	cmp	r3, #10
 8001194:	f200 809a 	bhi.w	80012cc <SIM_HTTP_Make_Post+0x164>
 8001198:	a201      	add	r2, pc, #4	; (adr r2, 80011a0 <SIM_HTTP_Make_Post+0x38>)
 800119a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119e:	bf00      	nop
 80011a0:	080011cd 	.word	0x080011cd
 80011a4:	080011d7 	.word	0x080011d7
 80011a8:	080011e1 	.word	0x080011e1
 80011ac:	080011eb 	.word	0x080011eb
 80011b0:	080011f5 	.word	0x080011f5
 80011b4:	080011ff 	.word	0x080011ff
 80011b8:	08001209 	.word	0x08001209
 80011bc:	08001213 	.word	0x08001213
 80011c0:	08001297 	.word	0x08001297
 80011c4:	080012a1 	.word	0x080012a1
 80011c8:	080012c3 	.word	0x080012c3
			case 0:
				// Get HTTP header
				sprintf(ATcommand, "AT+SHSTATE?\r\n");
 80011cc:	499a      	ldr	r1, [pc, #616]	; (8001438 <SIM_HTTP_Make_Post+0x2d0>)
 80011ce:	489b      	ldr	r0, [pc, #620]	; (800143c <SIM_HTTP_Make_Post+0x2d4>)
 80011d0:	f004 f9b0 	bl	8005534 <siprintf>
				break;
 80011d4:	e07b      	b.n	80012ce <SIM_HTTP_Make_Post+0x166>

			case 1:
				// Clear HTTP header
				sprintf(ATcommand, "AT+SHCHEAD\r\n");
 80011d6:	499a      	ldr	r1, [pc, #616]	; (8001440 <SIM_HTTP_Make_Post+0x2d8>)
 80011d8:	4898      	ldr	r0, [pc, #608]	; (800143c <SIM_HTTP_Make_Post+0x2d4>)
 80011da:	f004 f9ab 	bl	8005534 <siprintf>
				break;
 80011de:	e076      	b.n	80012ce <SIM_HTTP_Make_Post+0x166>

			case 2:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Content-Type\",\"application/x-www-form-urlencoded\"\r\n");
 80011e0:	4998      	ldr	r1, [pc, #608]	; (8001444 <SIM_HTTP_Make_Post+0x2dc>)
 80011e2:	4896      	ldr	r0, [pc, #600]	; (800143c <SIM_HTTP_Make_Post+0x2d4>)
 80011e4:	f004 f9a6 	bl	8005534 <siprintf>
				break;
 80011e8:	e071      	b.n	80012ce <SIM_HTTP_Make_Post+0x166>

			case 3:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Cache-control\",\"no-cache\"\r\n");
 80011ea:	4997      	ldr	r1, [pc, #604]	; (8001448 <SIM_HTTP_Make_Post+0x2e0>)
 80011ec:	4893      	ldr	r0, [pc, #588]	; (800143c <SIM_HTTP_Make_Post+0x2d4>)
 80011ee:	f004 f9a1 	bl	8005534 <siprintf>
				break;
 80011f2:	e06c      	b.n	80012ce <SIM_HTTP_Make_Post+0x166>

			case 4:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Connection\",\"keep-alive\"\r\n");
 80011f4:	4995      	ldr	r1, [pc, #596]	; (800144c <SIM_HTTP_Make_Post+0x2e4>)
 80011f6:	4891      	ldr	r0, [pc, #580]	; (800143c <SIM_HTTP_Make_Post+0x2d4>)
 80011f8:	f004 f99c 	bl	8005534 <siprintf>
				break;
 80011fc:	e067      	b.n	80012ce <SIM_HTTP_Make_Post+0x166>

			case 5:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Accept\",\"*/*\"\r\n");
 80011fe:	4994      	ldr	r1, [pc, #592]	; (8001450 <SIM_HTTP_Make_Post+0x2e8>)
 8001200:	488e      	ldr	r0, [pc, #568]	; (800143c <SIM_HTTP_Make_Post+0x2d4>)
 8001202:	f004 f997 	bl	8005534 <siprintf>
				break;
 8001206:	e062      	b.n	80012ce <SIM_HTTP_Make_Post+0x166>

			case 6:
				// Clear body content parameter
				sprintf(ATcommand, "AT+SHCPARA\r\n");
 8001208:	4992      	ldr	r1, [pc, #584]	; (8001454 <SIM_HTTP_Make_Post+0x2ec>)
 800120a:	488c      	ldr	r0, [pc, #560]	; (800143c <SIM_HTTP_Make_Post+0x2d4>)
 800120c:	f004 f992 	bl	8005534 <siprintf>
				break;
 8001210:	e05d      	b.n	80012ce <SIM_HTTP_Make_Post+0x166>

			case 7:
				// Add body content parameter(s)
				memset(commandToSend, 0, sizeof(commandToSend)); // clear previous data
 8001212:	2264      	movs	r2, #100	; 0x64
 8001214:	2100      	movs	r1, #0
 8001216:	4890      	ldr	r0, [pc, #576]	; (8001458 <SIM_HTTP_Make_Post+0x2f0>)
 8001218:	f004 f984 	bl	8005524 <memset>
				strcat(commandToSend, "AT+SHPARA=");
 800121c:	488e      	ldr	r0, [pc, #568]	; (8001458 <SIM_HTTP_Make_Post+0x2f0>)
 800121e:	f7fe ffd7 	bl	80001d0 <strlen>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	4b8c      	ldr	r3, [pc, #560]	; (8001458 <SIM_HTTP_Make_Post+0x2f0>)
 8001228:	4413      	add	r3, r2
 800122a:	498c      	ldr	r1, [pc, #560]	; (800145c <SIM_HTTP_Make_Post+0x2f4>)
 800122c:	461a      	mov	r2, r3
 800122e:	460b      	mov	r3, r1
 8001230:	cb03      	ldmia	r3!, {r0, r1}
 8001232:	6010      	str	r0, [r2, #0]
 8001234:	6051      	str	r1, [r2, #4]
 8001236:	8819      	ldrh	r1, [r3, #0]
 8001238:	789b      	ldrb	r3, [r3, #2]
 800123a:	8111      	strh	r1, [r2, #8]
 800123c:	7293      	strb	r3, [r2, #10]
				strcat(commandToSend, (char*)(testForms+testFormsIndex));
 800123e:	4b88      	ldr	r3, [pc, #544]	; (8001460 <SIM_HTTP_Make_Post+0x2f8>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	4613      	mov	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	461a      	mov	r2, r3
 800124e:	4b85      	ldr	r3, [pc, #532]	; (8001464 <SIM_HTTP_Make_Post+0x2fc>)
 8001250:	4413      	add	r3, r2
 8001252:	4619      	mov	r1, r3
 8001254:	4880      	ldr	r0, [pc, #512]	; (8001458 <SIM_HTTP_Make_Post+0x2f0>)
 8001256:	f004 f98d 	bl	8005574 <strcat>
				strcat(commandToSend, "\r\n");
 800125a:	487f      	ldr	r0, [pc, #508]	; (8001458 <SIM_HTTP_Make_Post+0x2f0>)
 800125c:	f7fe ffb8 	bl	80001d0 <strlen>
 8001260:	4603      	mov	r3, r0
 8001262:	461a      	mov	r2, r3
 8001264:	4b7c      	ldr	r3, [pc, #496]	; (8001458 <SIM_HTTP_Make_Post+0x2f0>)
 8001266:	4413      	add	r3, r2
 8001268:	4a7f      	ldr	r2, [pc, #508]	; (8001468 <SIM_HTTP_Make_Post+0x300>)
 800126a:	8811      	ldrh	r1, [r2, #0]
 800126c:	7892      	ldrb	r2, [r2, #2]
 800126e:	8019      	strh	r1, [r3, #0]
 8001270:	709a      	strb	r2, [r3, #2]
				++testFormsIndex;
 8001272:	4b7b      	ldr	r3, [pc, #492]	; (8001460 <SIM_HTTP_Make_Post+0x2f8>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	3301      	adds	r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b79      	ldr	r3, [pc, #484]	; (8001460 <SIM_HTTP_Make_Post+0x2f8>)
 800127c:	701a      	strb	r2, [r3, #0]
				if (testFormsIndex == TEST_FORM_LENGTH) {
 800127e:	4b78      	ldr	r3, [pc, #480]	; (8001460 <SIM_HTTP_Make_Post+0x2f8>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b05      	cmp	r3, #5
 8001284:	d102      	bne.n	800128c <SIM_HTTP_Make_Post+0x124>
					testFormsSentFlag = 1;
 8001286:	4b79      	ldr	r3, [pc, #484]	; (800146c <SIM_HTTP_Make_Post+0x304>)
 8001288:	2201      	movs	r2, #1
 800128a:	701a      	strb	r2, [r3, #0]
				}
//				sprintf(ATcommand, "AT+SHPARA=\"batt_1\",\"2022-09-07 18:47:06,7.89\"\r\n");
				sprintf(ATcommand, commandToSend);
 800128c:	4972      	ldr	r1, [pc, #456]	; (8001458 <SIM_HTTP_Make_Post+0x2f0>)
 800128e:	486b      	ldr	r0, [pc, #428]	; (800143c <SIM_HTTP_Make_Post+0x2d4>)
 8001290:	f004 f950 	bl	8005534 <siprintf>
				break;
 8001294:	e01b      	b.n	80012ce <SIM_HTTP_Make_Post+0x166>

			case 8:
				// Add header content
//				sprintf(ATcommand, "AT+SHREQ=\"/update?api_key=1EC4ZVYTHEJUAAIO&field1=60\",3\r\nAT\r\n");
				sprintf(ATcommand, "AT+SHREQ=\"/api/update?API_KEY=9349da48-62ef-496b-831a-4720015ff72a\",3\r\n");
 8001296:	4976      	ldr	r1, [pc, #472]	; (8001470 <SIM_HTTP_Make_Post+0x308>)
 8001298:	4868      	ldr	r0, [pc, #416]	; (800143c <SIM_HTTP_Make_Post+0x2d4>)
 800129a:	f004 f94b 	bl	8005534 <siprintf>
				break;
 800129e:	e016      	b.n	80012ce <SIM_HTTP_Make_Post+0x166>

			case 9: ;
				// Read data after request
				char d[4];
				itoa(dataLengthVal, d, 10);
 80012a0:	4b74      	ldr	r3, [pc, #464]	; (8001474 <SIM_HTTP_Make_Post+0x30c>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	220a      	movs	r2, #10
 80012ac:	4619      	mov	r1, r3
 80012ae:	f004 f937 	bl	8005520 <itoa>
				sprintf(ATcommand, "AT+SHREAD=0,%s\r\n", d);
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	461a      	mov	r2, r3
 80012b8:	496f      	ldr	r1, [pc, #444]	; (8001478 <SIM_HTTP_Make_Post+0x310>)
 80012ba:	4860      	ldr	r0, [pc, #384]	; (800143c <SIM_HTTP_Make_Post+0x2d4>)
 80012bc:	f004 f93a 	bl	8005534 <siprintf>
				break;
 80012c0:	e005      	b.n	80012ce <SIM_HTTP_Make_Post+0x166>

			case 10:
				// Disconnect HTTP
				sprintf(ATcommand, "AT+SHDISC\r\n");
 80012c2:	496e      	ldr	r1, [pc, #440]	; (800147c <SIM_HTTP_Make_Post+0x314>)
 80012c4:	485d      	ldr	r0, [pc, #372]	; (800143c <SIM_HTTP_Make_Post+0x2d4>)
 80012c6:	f004 f935 	bl	8005534 <siprintf>
				break;
 80012ca:	e000      	b.n	80012ce <SIM_HTTP_Make_Post+0x166>

			default:
				break;
 80012cc:	bf00      	nop
		}

		HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand)); // Transmit AT command
 80012ce:	485b      	ldr	r0, [pc, #364]	; (800143c <SIM_HTTP_Make_Post+0x2d4>)
 80012d0:	f7fe ff7e 	bl	80001d0 <strlen>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	461a      	mov	r2, r3
 80012da:	4958      	ldr	r1, [pc, #352]	; (800143c <SIM_HTTP_Make_Post+0x2d4>)
 80012dc:	4868      	ldr	r0, [pc, #416]	; (8001480 <SIM_HTTP_Make_Post+0x318>)
 80012de:	f002 fdad 	bl	8003e3c <HAL_UART_Transmit_IT>
		shouldTransmit = 0; // no transmission until response has been read
 80012e2:	4b53      	ldr	r3, [pc, #332]	; (8001430 <SIM_HTTP_Make_Post+0x2c8>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]

	} // if shouldTransmit
	// --------------------------------------------------------------- //

	// ---------------------------- RX ------------------------------- //
	uint8_t isIncrementCommand = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	75fb      	strb	r3, [r7, #23]

	switch (commandIndex) {
 80012ec:	4b51      	ldr	r3, [pc, #324]	; (8001434 <SIM_HTTP_Make_Post+0x2cc>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	2b0a      	cmp	r3, #10
 80012f4:	f200 813a 	bhi.w	800156c <SIM_HTTP_Make_Post+0x404>
 80012f8:	a201      	add	r2, pc, #4	; (adr r2, 8001300 <SIM_HTTP_Make_Post+0x198>)
 80012fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fe:	bf00      	nop
 8001300:	0800132d 	.word	0x0800132d
 8001304:	08001379 	.word	0x08001379
 8001308:	0800138f 	.word	0x0800138f
 800130c:	080013a5 	.word	0x080013a5
 8001310:	080013bb 	.word	0x080013bb
 8001314:	080013d1 	.word	0x080013d1
 8001318:	080013e7 	.word	0x080013e7
 800131c:	080013fd 	.word	0x080013fd
 8001320:	080014a1 	.word	0x080014a1
 8001324:	08001529 	.word	0x08001529
 8001328:	08001547 	.word	0x08001547
		case 0:
			// +SHSTATE: 0\r\n\r\nOK\r\n - HTTP disconnect state
			if (strstr((char*) serialRX_Buffer, "+SHSTATE: 0\r\n\r\nOK\r\n")) {
 800132c:	4955      	ldr	r1, [pc, #340]	; (8001484 <SIM_HTTP_Make_Post+0x31c>)
 800132e:	4856      	ldr	r0, [pc, #344]	; (8001488 <SIM_HTTP_Make_Post+0x320>)
 8001330:	f004 f942 	bl	80055b8 <strstr>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00c      	beq.n	8001354 <SIM_HTTP_Make_Post+0x1ec>
				// If disconnected, build HTTP post
				simState = SIM_HTTP_POST_BUILD;
 800133a:	4b54      	ldr	r3, [pc, #336]	; (800148c <SIM_HTTP_Make_Post+0x324>)
 800133c:	2203      	movs	r2, #3
 800133e:	701a      	strb	r2, [r3, #0]
				isStateChanged = 1;
 8001340:	4b53      	ldr	r3, [pc, #332]	; (8001490 <SIM_HTTP_Make_Post+0x328>)
 8001342:	2201      	movs	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]
				clearBuffer = 1; // Clear buffer to receive next response
 8001346:	4b53      	ldr	r3, [pc, #332]	; (8001494 <SIM_HTTP_Make_Post+0x32c>)
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1; // Can transmit next command
 800134c:	4b38      	ldr	r3, [pc, #224]	; (8001430 <SIM_HTTP_Make_Post+0x2c8>)
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
			else if (strstr((char*) serialRX_Buffer, "+SHSTATE: 1\r\n\r\nOK\r\n")) {
				commandIndex = 1; // AT+SHDISC next command
				clearBuffer = 1; // Clear buffer to receive next response
				shouldTransmit = 1; // Can transmit next command
			}
			break;
 8001352:	e10d      	b.n	8001570 <SIM_HTTP_Make_Post+0x408>
			else if (strstr((char*) serialRX_Buffer, "+SHSTATE: 1\r\n\r\nOK\r\n")) {
 8001354:	4950      	ldr	r1, [pc, #320]	; (8001498 <SIM_HTTP_Make_Post+0x330>)
 8001356:	484c      	ldr	r0, [pc, #304]	; (8001488 <SIM_HTTP_Make_Post+0x320>)
 8001358:	f004 f92e 	bl	80055b8 <strstr>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 8106 	beq.w	8001570 <SIM_HTTP_Make_Post+0x408>
				commandIndex = 1; // AT+SHDISC next command
 8001364:	4b33      	ldr	r3, [pc, #204]	; (8001434 <SIM_HTTP_Make_Post+0x2cc>)
 8001366:	2201      	movs	r2, #1
 8001368:	801a      	strh	r2, [r3, #0]
				clearBuffer = 1; // Clear buffer to receive next response
 800136a:	4b4a      	ldr	r3, [pc, #296]	; (8001494 <SIM_HTTP_Make_Post+0x32c>)
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1; // Can transmit next command
 8001370:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <SIM_HTTP_Make_Post+0x2c8>)
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
			break;
 8001376:	e0fb      	b.n	8001570 <SIM_HTTP_Make_Post+0x408>

		case 1:
			// OK received if header cleared
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8001378:	4948      	ldr	r1, [pc, #288]	; (800149c <SIM_HTTP_Make_Post+0x334>)
 800137a:	4843      	ldr	r0, [pc, #268]	; (8001488 <SIM_HTTP_Make_Post+0x320>)
 800137c:	f004 f91c 	bl	80055b8 <strstr>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 80f6 	beq.w	8001574 <SIM_HTTP_Make_Post+0x40c>
				isIncrementCommand = 1;
 8001388:	2301      	movs	r3, #1
 800138a:	75fb      	strb	r3, [r7, #23]
			}
			break;
 800138c:	e0f2      	b.n	8001574 <SIM_HTTP_Make_Post+0x40c>

		case 2:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 800138e:	4943      	ldr	r1, [pc, #268]	; (800149c <SIM_HTTP_Make_Post+0x334>)
 8001390:	483d      	ldr	r0, [pc, #244]	; (8001488 <SIM_HTTP_Make_Post+0x320>)
 8001392:	f004 f911 	bl	80055b8 <strstr>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 80ed 	beq.w	8001578 <SIM_HTTP_Make_Post+0x410>
				isIncrementCommand = 1;
 800139e:	2301      	movs	r3, #1
 80013a0:	75fb      	strb	r3, [r7, #23]
			}
			break;
 80013a2:	e0e9      	b.n	8001578 <SIM_HTTP_Make_Post+0x410>

		case 3:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 80013a4:	493d      	ldr	r1, [pc, #244]	; (800149c <SIM_HTTP_Make_Post+0x334>)
 80013a6:	4838      	ldr	r0, [pc, #224]	; (8001488 <SIM_HTTP_Make_Post+0x320>)
 80013a8:	f004 f906 	bl	80055b8 <strstr>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 80e4 	beq.w	800157c <SIM_HTTP_Make_Post+0x414>
				isIncrementCommand = 1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	75fb      	strb	r3, [r7, #23]
			}
			break;
 80013b8:	e0e0      	b.n	800157c <SIM_HTTP_Make_Post+0x414>

		case 4:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 80013ba:	4938      	ldr	r1, [pc, #224]	; (800149c <SIM_HTTP_Make_Post+0x334>)
 80013bc:	4832      	ldr	r0, [pc, #200]	; (8001488 <SIM_HTTP_Make_Post+0x320>)
 80013be:	f004 f8fb 	bl	80055b8 <strstr>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 80db 	beq.w	8001580 <SIM_HTTP_Make_Post+0x418>
				isIncrementCommand = 1;
 80013ca:	2301      	movs	r3, #1
 80013cc:	75fb      	strb	r3, [r7, #23]
			}
			break;
 80013ce:	e0d7      	b.n	8001580 <SIM_HTTP_Make_Post+0x418>

		case 5:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 80013d0:	4932      	ldr	r1, [pc, #200]	; (800149c <SIM_HTTP_Make_Post+0x334>)
 80013d2:	482d      	ldr	r0, [pc, #180]	; (8001488 <SIM_HTTP_Make_Post+0x320>)
 80013d4:	f004 f8f0 	bl	80055b8 <strstr>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 80d2 	beq.w	8001584 <SIM_HTTP_Make_Post+0x41c>
				isIncrementCommand = 1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	75fb      	strb	r3, [r7, #23]
			}
			break;
 80013e4:	e0ce      	b.n	8001584 <SIM_HTTP_Make_Post+0x41c>

		case 6:
			// OK received if body content parameter has been cleared
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 80013e6:	492d      	ldr	r1, [pc, #180]	; (800149c <SIM_HTTP_Make_Post+0x334>)
 80013e8:	4827      	ldr	r0, [pc, #156]	; (8001488 <SIM_HTTP_Make_Post+0x320>)
 80013ea:	f004 f8e5 	bl	80055b8 <strstr>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80c9 	beq.w	8001588 <SIM_HTTP_Make_Post+0x420>
				isIncrementCommand = 1;
 80013f6:	2301      	movs	r3, #1
 80013f8:	75fb      	strb	r3, [r7, #23]
			}
			break;
 80013fa:	e0c5      	b.n	8001588 <SIM_HTTP_Make_Post+0x420>

		case 7:
			// OK received if body content parameter is added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 80013fc:	4927      	ldr	r1, [pc, #156]	; (800149c <SIM_HTTP_Make_Post+0x334>)
 80013fe:	4822      	ldr	r0, [pc, #136]	; (8001488 <SIM_HTTP_Make_Post+0x320>)
 8001400:	f004 f8da 	bl	80055b8 <strstr>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 80c0 	beq.w	800158c <SIM_HTTP_Make_Post+0x424>
				if (!testFormsSentFlag) {
 800140c:	4b17      	ldr	r3, [pc, #92]	; (800146c <SIM_HTTP_Make_Post+0x304>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d109      	bne.n	8001428 <SIM_HTTP_Make_Post+0x2c0>
					clearBuffer = 1;
 8001414:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <SIM_HTTP_Make_Post+0x32c>)
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]
					shouldTransmit = 1;
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <SIM_HTTP_Make_Post+0x2c8>)
 800141c:	2201      	movs	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
					commandIndex = 7;
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SIM_HTTP_Make_Post+0x2cc>)
 8001422:	2207      	movs	r2, #7
 8001424:	801a      	strh	r2, [r3, #0]
				} else {
					isIncrementCommand = 1;
				}
			}
			break;
 8001426:	e0b1      	b.n	800158c <SIM_HTTP_Make_Post+0x424>
					isIncrementCommand = 1;
 8001428:	2301      	movs	r3, #1
 800142a:	75fb      	strb	r3, [r7, #23]
			break;
 800142c:	e0ae      	b.n	800158c <SIM_HTTP_Make_Post+0x424>
 800142e:	bf00      	nop
 8001430:	20000002 	.word	0x20000002
 8001434:	2000028c 	.word	0x2000028c
 8001438:	08006d08 	.word	0x08006d08
 800143c:	20000228 	.word	0x20000228
 8001440:	08006dec 	.word	0x08006dec
 8001444:	08006dfc 	.word	0x08006dfc
 8001448:	08006e3c 	.word	0x08006e3c
 800144c:	08006e64 	.word	0x08006e64
 8001450:	08006e8c 	.word	0x08006e8c
 8001454:	08006ea8 	.word	0x08006ea8
 8001458:	20000390 	.word	0x20000390
 800145c:	08006eb8 	.word	0x08006eb8
 8001460:	20000490 	.word	0x20000490
 8001464:	20000004 	.word	0x20000004
 8001468:	08006ec4 	.word	0x08006ec4
 800146c:	20000491 	.word	0x20000491
 8001470:	08006ec8 	.word	0x08006ec8
 8001474:	20000428 	.word	0x20000428
 8001478:	08006f10 	.word	0x08006f10
 800147c:	08006d18 	.word	0x08006d18
 8001480:	200001a4 	.word	0x200001a4
 8001484:	08006d9c 	.word	0x08006d9c
 8001488:	20000290 	.word	0x20000290
 800148c:	20000001 	.word	0x20000001
 8001490:	2000028e 	.word	0x2000028e
 8001494:	2000038c 	.word	0x2000038c
 8001498:	08006db0 	.word	0x08006db0
 800149c:	08006bd8 	.word	0x08006bd8

		case 8:
			if (strstr((char*) serialRX_Buffer, "+SHREQ: \"POST\"")) {
 80014a0:	4952      	ldr	r1, [pc, #328]	; (80015ec <SIM_HTTP_Make_Post+0x484>)
 80014a2:	4853      	ldr	r0, [pc, #332]	; (80015f0 <SIM_HTTP_Make_Post+0x488>)
 80014a4:	f004 f888 	bl	80055b8 <strstr>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d070      	beq.n	8001590 <SIM_HTTP_Make_Post+0x428>
				copySubstringFromMatch(responseSubstring, (char*)serialRX_Buffer, "+SHREQ: \"POST\"");
 80014ae:	4a4f      	ldr	r2, [pc, #316]	; (80015ec <SIM_HTTP_Make_Post+0x484>)
 80014b0:	494f      	ldr	r1, [pc, #316]	; (80015f0 <SIM_HTTP_Make_Post+0x488>)
 80014b2:	4850      	ldr	r0, [pc, #320]	; (80015f4 <SIM_HTTP_Make_Post+0x48c>)
 80014b4:	f000 f8bc 	bl	8001630 <copySubstringFromMatch>
				// +SHREQ: \"POST\",200,2\r\n
				uint8_t splittedValIndex = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	75bb      	strb	r3, [r7, #22]
				uint16_t splittedVal[4] = {0};
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
				char* token;
				if (strstr(responseSubstring, "\r\n")) { // response has finished transmitting
 80014c4:	494c      	ldr	r1, [pc, #304]	; (80015f8 <SIM_HTTP_Make_Post+0x490>)
 80014c6:	484b      	ldr	r0, [pc, #300]	; (80015f4 <SIM_HTTP_Make_Post+0x48c>)
 80014c8:	f004 f876 	bl	80055b8 <strstr>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d05e      	beq.n	8001590 <SIM_HTTP_Make_Post+0x428>
					token = strtok(responseSubstring, ",");
 80014d2:	494a      	ldr	r1, [pc, #296]	; (80015fc <SIM_HTTP_Make_Post+0x494>)
 80014d4:	4847      	ldr	r0, [pc, #284]	; (80015f4 <SIM_HTTP_Make_Post+0x48c>)
 80014d6:	f004 f885 	bl	80055e4 <strtok>
 80014da:	6138      	str	r0, [r7, #16]
					while (token != NULL  && splittedValIndex<4) {
 80014dc:	e012      	b.n	8001504 <SIM_HTTP_Make_Post+0x39c>
						splittedVal[++splittedValIndex] = atoi(token);
 80014de:	6938      	ldr	r0, [r7, #16]
 80014e0:	f003 ffd7 	bl	8005492 <atoi>
 80014e4:	4602      	mov	r2, r0
 80014e6:	7dbb      	ldrb	r3, [r7, #22]
 80014e8:	3301      	adds	r3, #1
 80014ea:	75bb      	strb	r3, [r7, #22]
 80014ec:	7dbb      	ldrb	r3, [r7, #22]
 80014ee:	b292      	uxth	r2, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	3318      	adds	r3, #24
 80014f4:	443b      	add	r3, r7
 80014f6:	f823 2c18 	strh.w	r2, [r3, #-24]
						token = strtok(NULL, ",");
 80014fa:	4940      	ldr	r1, [pc, #256]	; (80015fc <SIM_HTTP_Make_Post+0x494>)
 80014fc:	2000      	movs	r0, #0
 80014fe:	f004 f871 	bl	80055e4 <strtok>
 8001502:	6138      	str	r0, [r7, #16]
					while (token != NULL  && splittedValIndex<4) {
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <SIM_HTTP_Make_Post+0x3a8>
 800150a:	7dbb      	ldrb	r3, [r7, #22]
 800150c:	2b03      	cmp	r3, #3
 800150e:	d9e6      	bls.n	80014de <SIM_HTTP_Make_Post+0x376>
					}
					statusCodeVal = splittedVal[2];
 8001510:	88ba      	ldrh	r2, [r7, #4]
 8001512:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <SIM_HTTP_Make_Post+0x498>)
 8001514:	801a      	strh	r2, [r3, #0]
					dataLengthVal = splittedVal[3];
 8001516:	88fa      	ldrh	r2, [r7, #6]
 8001518:	4b3a      	ldr	r3, [pc, #232]	; (8001604 <SIM_HTTP_Make_Post+0x49c>)
 800151a:	801a      	strh	r2, [r3, #0]
					isIncrementCommand = 1;
 800151c:	2301      	movs	r3, #1
 800151e:	75fb      	strb	r3, [r7, #23]
					isLD3_Flicker = 0; // TODO: remove later
 8001520:	4b39      	ldr	r3, [pc, #228]	; (8001608 <SIM_HTTP_Make_Post+0x4a0>)
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
				}

			}
			break;
 8001526:	e033      	b.n	8001590 <SIM_HTTP_Make_Post+0x428>

		case 9:
			// should only move on to next command after second time that +SHREAD: is matched
			// done to ensure that the full request data has been sent back
			if (strstr((char*) serialRX_Buffer, "}\n\r\n")) {
 8001528:	4938      	ldr	r1, [pc, #224]	; (800160c <SIM_HTTP_Make_Post+0x4a4>)
 800152a:	4831      	ldr	r0, [pc, #196]	; (80015f0 <SIM_HTTP_Make_Post+0x488>)
 800152c:	f004 f844 	bl	80055b8 <strstr>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d02e      	beq.n	8001594 <SIM_HTTP_Make_Post+0x42c>
				// Set flag
				copySubstringFromMatch(SHREAD_Data, (char*)serialRX_Buffer, "+SHREAD:");
 8001536:	4a36      	ldr	r2, [pc, #216]	; (8001610 <SIM_HTTP_Make_Post+0x4a8>)
 8001538:	492d      	ldr	r1, [pc, #180]	; (80015f0 <SIM_HTTP_Make_Post+0x488>)
 800153a:	4836      	ldr	r0, [pc, #216]	; (8001614 <SIM_HTTP_Make_Post+0x4ac>)
 800153c:	f000 f878 	bl	8001630 <copySubstringFromMatch>
				isIncrementCommand = 1;
 8001540:	2301      	movs	r3, #1
 8001542:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8001544:	e026      	b.n	8001594 <SIM_HTTP_Make_Post+0x42c>

		case 10:
			// OK received. Successful disconnect.
			if (strstr((char*) serialRX_Buffer, "+SHDISC\r\r\nOK\r\n")) {
 8001546:	4934      	ldr	r1, [pc, #208]	; (8001618 <SIM_HTTP_Make_Post+0x4b0>)
 8001548:	4829      	ldr	r0, [pc, #164]	; (80015f0 <SIM_HTTP_Make_Post+0x488>)
 800154a:	f004 f835 	bl	80055b8 <strstr>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d021      	beq.n	8001598 <SIM_HTTP_Make_Post+0x430>
				isIncrementCommand = 1;
 8001554:	2301      	movs	r3, #1
 8001556:	75fb      	strb	r3, [r7, #23]
				simState = SIM_STANDBY;
 8001558:	4b30      	ldr	r3, [pc, #192]	; (800161c <SIM_HTTP_Make_Post+0x4b4>)
 800155a:	2206      	movs	r2, #6
 800155c:	701a      	strb	r2, [r3, #0]
				isStateChanged = 1;
 800155e:	4b30      	ldr	r3, [pc, #192]	; (8001620 <SIM_HTTP_Make_Post+0x4b8>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
				isLD3_Flicker = 1; // TODO: remove later
 8001564:	4b28      	ldr	r3, [pc, #160]	; (8001608 <SIM_HTTP_Make_Post+0x4a0>)
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
			}
			break;
 800156a:	e015      	b.n	8001598 <SIM_HTTP_Make_Post+0x430>

		default:
			break;
 800156c:	bf00      	nop
 800156e:	e014      	b.n	800159a <SIM_HTTP_Make_Post+0x432>
			break;
 8001570:	bf00      	nop
 8001572:	e012      	b.n	800159a <SIM_HTTP_Make_Post+0x432>
			break;
 8001574:	bf00      	nop
 8001576:	e010      	b.n	800159a <SIM_HTTP_Make_Post+0x432>
			break;
 8001578:	bf00      	nop
 800157a:	e00e      	b.n	800159a <SIM_HTTP_Make_Post+0x432>
			break;
 800157c:	bf00      	nop
 800157e:	e00c      	b.n	800159a <SIM_HTTP_Make_Post+0x432>
			break;
 8001580:	bf00      	nop
 8001582:	e00a      	b.n	800159a <SIM_HTTP_Make_Post+0x432>
			break;
 8001584:	bf00      	nop
 8001586:	e008      	b.n	800159a <SIM_HTTP_Make_Post+0x432>
			break;
 8001588:	bf00      	nop
 800158a:	e006      	b.n	800159a <SIM_HTTP_Make_Post+0x432>
			break;
 800158c:	bf00      	nop
 800158e:	e004      	b.n	800159a <SIM_HTTP_Make_Post+0x432>
			break;
 8001590:	bf00      	nop
 8001592:	e002      	b.n	800159a <SIM_HTTP_Make_Post+0x432>
			break;
 8001594:	bf00      	nop
 8001596:	e000      	b.n	800159a <SIM_HTTP_Make_Post+0x432>
			break;
 8001598:	bf00      	nop
	}

	if (isIncrementCommand) {
 800159a:	7dfb      	ldrb	r3, [r7, #23]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00e      	beq.n	80015be <SIM_HTTP_Make_Post+0x456>
		++commandIndex; // Next command
 80015a0:	4b20      	ldr	r3, [pc, #128]	; (8001624 <SIM_HTTP_Make_Post+0x4bc>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	3301      	adds	r3, #1
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <SIM_HTTP_Make_Post+0x4bc>)
 80015ac:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 80015ae:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <SIM_HTTP_Make_Post+0x4c0>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <SIM_HTTP_Make_Post+0x4c4>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	75fb      	strb	r3, [r7, #23]
	}

	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <SIM_HTTP_Make_Post+0x4bc>)
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d304      	bcc.n	80015d6 <SIM_HTTP_Make_Post+0x46e>
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <SIM_HTTP_Make_Post+0x4b8>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d006      	beq.n	80015e4 <SIM_HTTP_Make_Post+0x47c>
		commandIndex = 0;
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <SIM_HTTP_Make_Post+0x4bc>)
 80015d8:	2200      	movs	r2, #0
 80015da:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <SIM_HTTP_Make_Post+0x4b8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
	}


	return;
 80015e2:	bf00      	nop
 80015e4:	bf00      	nop
}
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	08006f24 	.word	0x08006f24
 80015f0:	20000290 	.word	0x20000290
 80015f4:	200003f4 	.word	0x200003f4
 80015f8:	08006ec4 	.word	0x08006ec4
 80015fc:	08006f34 	.word	0x08006f34
 8001600:	20000426 	.word	0x20000426
 8001604:	20000428 	.word	0x20000428
 8001608:	20000000 	.word	0x20000000
 800160c:	08006f38 	.word	0x08006f38
 8001610:	08006f40 	.word	0x08006f40
 8001614:	2000042c 	.word	0x2000042c
 8001618:	08006f4c 	.word	0x08006f4c
 800161c:	20000001 	.word	0x20000001
 8001620:	2000028e 	.word	0x2000028e
 8001624:	2000028c 	.word	0x2000028c
 8001628:	2000038c 	.word	0x2000038c
 800162c:	20000002 	.word	0x20000002

08001630 <copySubstringFromMatch>:

// No check is implemented for destination that is smaller than the substring
void copySubstringFromMatch(char* destination, char* source, char* strToMatch) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
	char* firstOccurence = strstr(source, strToMatch);
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	68b8      	ldr	r0, [r7, #8]
 8001640:	f003 ffba 	bl	80055b8 <strstr>
 8001644:	6178      	str	r0, [r7, #20]
	if (!firstOccurence) { // string to match not found
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d016      	beq.n	800167a <copySubstringFromMatch+0x4a>
		return;
	}

	uint16_t startPos = firstOccurence - source;
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	827b      	strh	r3, [r7, #18]
	uint16_t substringLength = strlen(source) - startPos;
 8001654:	68b8      	ldr	r0, [r7, #8]
 8001656:	f7fe fdbb 	bl	80001d0 <strlen>
 800165a:	4603      	mov	r3, r0
 800165c:	b29a      	uxth	r2, r3
 800165e:	8a7b      	ldrh	r3, [r7, #18]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	823b      	strh	r3, [r7, #16]

	strncpy(destination, source+startPos, startPos+substringLength);
 8001664:	8a7b      	ldrh	r3, [r7, #18]
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	18d1      	adds	r1, r2, r3
 800166a:	8a7a      	ldrh	r2, [r7, #18]
 800166c:	8a3b      	ldrh	r3, [r7, #16]
 800166e:	4413      	add	r3, r2
 8001670:	461a      	mov	r2, r3
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f003 ff8d 	bl	8005592 <strncpy>

	return;
 8001678:	e000      	b.n	800167c <copySubstringFromMatch+0x4c>
		return;
 800167a:	bf00      	nop
}
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <HAL_MspInit+0x44>)
 800168c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800168e:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <HAL_MspInit+0x44>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6613      	str	r3, [r2, #96]	; 0x60
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <HAL_MspInit+0x44>)
 8001698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <HAL_MspInit+0x44>)
 80016a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a6:	4a08      	ldr	r2, [pc, #32]	; (80016c8 <HAL_MspInit+0x44>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ac:	6593      	str	r3, [r2, #88]	; 0x58
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_MspInit+0x44>)
 80016b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000

080016cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016dc:	d113      	bne.n	8001706 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_TIM_Base_MspInit+0x44>)
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <HAL_TIM_Base_MspInit+0x44>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6593      	str	r3, [r2, #88]	; 0x58
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_TIM_Base_MspInit+0x44>)
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	201c      	movs	r0, #28
 80016fc:	f000 fb1d 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001700:	201c      	movs	r0, #28
 8001702:	f000 fb36 	bl	8001d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000

08001714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b09e      	sub	sp, #120	; 0x78
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	2254      	movs	r2, #84	; 0x54
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f003 fef5 	bl	8005524 <memset>
  if(huart->Instance==USART1)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a23      	ldr	r2, [pc, #140]	; (80017cc <HAL_UART_MspInit+0xb8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d13f      	bne.n	80017c4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001744:	2301      	movs	r3, #1
 8001746:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001748:	2300      	movs	r3, #0
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	4618      	mov	r0, r3
 8001752:	f001 fbef 	bl	8002f34 <HAL_RCCEx_PeriphCLKConfig>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800175c:	f7ff f8bc 	bl	80008d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <HAL_UART_MspInit+0xbc>)
 8001762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001764:	4a1a      	ldr	r2, [pc, #104]	; (80017d0 <HAL_UART_MspInit+0xbc>)
 8001766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176a:	6613      	str	r3, [r2, #96]	; 0x60
 800176c:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_UART_MspInit+0xbc>)
 800176e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_UART_MspInit+0xbc>)
 800177a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177c:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <HAL_UART_MspInit+0xbc>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_UART_MspInit+0xbc>)
 8001786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_SIM_Pin|UART_RX_SIM_Pin;
 8001790:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001794:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017a2:	2307      	movs	r3, #7
 80017a4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017aa:	4619      	mov	r1, r3
 80017ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b0:	f000 fb78 	bl	8001ea4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2100      	movs	r1, #0
 80017b8:	2025      	movs	r0, #37	; 0x25
 80017ba:	f000 fabe 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017be:	2025      	movs	r0, #37	; 0x25
 80017c0:	f000 fad7 	bl	8001d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017c4:	bf00      	nop
 80017c6:	3778      	adds	r7, #120	; 0x78
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40013800 	.word	0x40013800
 80017d0:	40021000 	.word	0x40021000

080017d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <NMI_Handler+0x4>

080017da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <HardFault_Handler+0x4>

080017e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <MemManage_Handler+0x4>

080017e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <BusFault_Handler+0x4>

080017ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <UsageFault_Handler+0x4>

080017f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001820:	f000 f96c 	bl	8001afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <TIM2_IRQHandler+0x10>)
 800182e:	f001 ff25 	bl	800367c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000158 	.word	0x20000158

0800183c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <USART1_IRQHandler+0x10>)
 8001842:	f002 fbbf 	bl	8003fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200001a4 	.word	0x200001a4

08001850 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
	return 1;
 8001854:	2301      	movs	r3, #1
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <_kill>:

int _kill(int pid, int sig)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800186a:	f003 fe17 	bl	800549c <__errno>
 800186e:	4603      	mov	r3, r0
 8001870:	2216      	movs	r2, #22
 8001872:	601a      	str	r2, [r3, #0]
	return -1;
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <_exit>:

void _exit (int status)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001888:	f04f 31ff 	mov.w	r1, #4294967295
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ffe7 	bl	8001860 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001892:	e7fe      	b.n	8001892 <_exit+0x12>

08001894 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	e00a      	b.n	80018bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018a6:	f3af 8000 	nop.w
 80018aa:	4601      	mov	r1, r0
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	60ba      	str	r2, [r7, #8]
 80018b2:	b2ca      	uxtb	r2, r1
 80018b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3301      	adds	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	dbf0      	blt.n	80018a6 <_read+0x12>
	}

return len;
 80018c4:	687b      	ldr	r3, [r7, #4]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	e009      	b.n	80018f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	60ba      	str	r2, [r7, #8]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	dbf1      	blt.n	80018e0 <_write+0x12>
	}
	return len;
 80018fc:	687b      	ldr	r3, [r7, #4]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <_close>:

int _close(int file)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
	return -1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800192e:	605a      	str	r2, [r3, #4]
	return 0;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <_isatty>:

int _isatty(int file)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
	return 1;
 8001946:	2301      	movs	r3, #1
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
	return 0;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001978:	4a14      	ldr	r2, [pc, #80]	; (80019cc <_sbrk+0x5c>)
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <_sbrk+0x60>)
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <_sbrk+0x64>)
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <_sbrk+0x68>)
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	429a      	cmp	r2, r3
 800199e:	d207      	bcs.n	80019b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a0:	f003 fd7c 	bl	800549c <__errno>
 80019a4:	4603      	mov	r3, r0
 80019a6:	220c      	movs	r2, #12
 80019a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	e009      	b.n	80019c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <_sbrk+0x64>)
 80019c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20010000 	.word	0x20010000
 80019d0:	00000400 	.word	0x00000400
 80019d4:	20000880 	.word	0x20000880
 80019d8:	20000898 	.word	0x20000898

080019dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <SystemInit+0x20>)
 80019e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <SystemInit+0x20>)
 80019e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a04:	f7ff ffea 	bl	80019dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a08:	480c      	ldr	r0, [pc, #48]	; (8001a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a0a:	490d      	ldr	r1, [pc, #52]	; (8001a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <LoopForever+0xe>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a20:	4c0a      	ldr	r4, [pc, #40]	; (8001a4c <LoopForever+0x16>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f003 fd3b 	bl	80054a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a32:	f7fe fded 	bl	8000610 <main>

08001a36 <LoopForever>:

LoopForever:
    b LoopForever
 8001a36:	e7fe      	b.n	8001a36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a38:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a40:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8001a44:	08007224 	.word	0x08007224
  ldr r2, =_sbss
 8001a48:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 8001a4c:	20000898 	.word	0x20000898

08001a50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC1_IRQHandler>

08001a52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a5c:	2003      	movs	r0, #3
 8001a5e:	f000 f961 	bl	8001d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a62:	2000      	movs	r0, #0
 8001a64:	f000 f80e 	bl	8001a84 <HAL_InitTick>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	71fb      	strb	r3, [r7, #7]
 8001a72:	e001      	b.n	8001a78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a74:	f7ff fe06 	bl	8001684 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a78:	79fb      	ldrb	r3, [r7, #7]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a90:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <HAL_InitTick+0x6c>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d023      	beq.n	8001ae0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <HAL_InitTick+0x70>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <HAL_InitTick+0x6c>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f96d 	bl	8001d8e <HAL_SYSTICK_Config>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10f      	bne.n	8001ada <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b0f      	cmp	r3, #15
 8001abe:	d809      	bhi.n	8001ad4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f000 f937 	bl	8001d3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001acc:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <HAL_InitTick+0x74>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e007      	b.n	8001ae4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	e004      	b.n	8001ae4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	73fb      	strb	r3, [r7, #15]
 8001ade:	e001      	b.n	8001ae4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200000d4 	.word	0x200000d4
 8001af4:	200000cc 	.word	0x200000cc
 8001af8:	200000d0 	.word	0x200000d0

08001afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_IncTick+0x20>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_IncTick+0x24>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <HAL_IncTick+0x24>)
 8001b0e:	6013      	str	r3, [r2, #0]
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	200000d4 	.word	0x200000d4
 8001b20:	20000884 	.word	0x20000884

08001b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return uwTick;
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_GetTick+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000884 	.word	0x20000884

08001b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b44:	f7ff ffee 	bl	8001b24 <HAL_GetTick>
 8001b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b54:	d005      	beq.n	8001b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_Delay+0x44>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b62:	bf00      	nop
 8001b64:	f7ff ffde 	bl	8001b24 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d8f7      	bhi.n	8001b64 <HAL_Delay+0x28>
  {
  }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200000d4 	.word	0x200000d4

08001b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb6:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	60d3      	str	r3, [r2, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	f003 0307 	and.w	r3, r3, #7
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db0b      	blt.n	8001c12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	4907      	ldr	r1, [pc, #28]	; (8001c20 <__NVIC_EnableIRQ+0x38>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	2001      	movs	r0, #1
 8001c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000e100 	.word	0xe000e100

08001c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0a      	blt.n	8001c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	490c      	ldr	r1, [pc, #48]	; (8001c70 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c4c:	e00a      	b.n	8001c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4908      	ldr	r1, [pc, #32]	; (8001c74 <__NVIC_SetPriority+0x50>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	761a      	strb	r2, [r3, #24]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f1c3 0307 	rsb	r3, r3, #7
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	bf28      	it	cs
 8001c96:	2304      	movcs	r3, #4
 8001c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d902      	bls.n	8001ca8 <NVIC_EncodePriority+0x30>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	e000      	b.n	8001caa <NVIC_EncodePriority+0x32>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	401a      	ands	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	4313      	orrs	r3, r2
         );
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf0:	d301      	bcc.n	8001cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00f      	b.n	8001d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <SysTick_Config+0x40>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfe:	210f      	movs	r1, #15
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f7ff ff8e 	bl	8001c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <SysTick_Config+0x40>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <SysTick_Config+0x40>)
 8001d10:	2207      	movs	r2, #7
 8001d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	e000e010 	.word	0xe000e010

08001d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ff29 	bl	8001b84 <__NVIC_SetPriorityGrouping>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d4c:	f7ff ff3e 	bl	8001bcc <__NVIC_GetPriorityGrouping>
 8001d50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	6978      	ldr	r0, [r7, #20]
 8001d58:	f7ff ff8e 	bl	8001c78 <NVIC_EncodePriority>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff5d 	bl	8001c24 <__NVIC_SetPriority>
}
 8001d6a:	bf00      	nop
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff31 	bl	8001be8 <__NVIC_EnableIRQ>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ffa2 	bl	8001ce0 <SysTick_Config>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b085      	sub	sp, #20
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d008      	beq.n	8001dd0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e022      	b.n	8001e16 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 020e 	bic.w	r2, r2, #14
 8001dde:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0201 	bic.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df4:	f003 021c 	and.w	r2, r3, #28
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001e02:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b084      	sub	sp, #16
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d005      	beq.n	8001e46 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	73fb      	strb	r3, [r7, #15]
 8001e44:	e029      	b.n	8001e9a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 020e 	bic.w	r2, r2, #14
 8001e54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0201 	bic.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f003 021c 	and.w	r2, r3, #28
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	2101      	movs	r1, #1
 8001e74:	fa01 f202 	lsl.w	r2, r1, r2
 8001e78:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	4798      	blx	r3
    }
  }
  return status;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb2:	e148      	b.n	8002146 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 813a 	beq.w	8002140 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d005      	beq.n	8001ee4 <HAL_GPIO_Init+0x40>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d130      	bne.n	8001f46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	2203      	movs	r2, #3
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	091b      	lsrs	r3, r3, #4
 8001f30:	f003 0201 	and.w	r2, r3, #1
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d017      	beq.n	8001f82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d123      	bne.n	8001fd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	08da      	lsrs	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3208      	adds	r2, #8
 8001f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	691a      	ldr	r2, [r3, #16]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	08da      	lsrs	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	6939      	ldr	r1, [r7, #16]
 8001fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 0203 	and.w	r2, r3, #3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 8094 	beq.w	8002140 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002018:	4b52      	ldr	r3, [pc, #328]	; (8002164 <HAL_GPIO_Init+0x2c0>)
 800201a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800201c:	4a51      	ldr	r2, [pc, #324]	; (8002164 <HAL_GPIO_Init+0x2c0>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6613      	str	r3, [r2, #96]	; 0x60
 8002024:	4b4f      	ldr	r3, [pc, #316]	; (8002164 <HAL_GPIO_Init+0x2c0>)
 8002026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002030:	4a4d      	ldr	r2, [pc, #308]	; (8002168 <HAL_GPIO_Init+0x2c4>)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	089b      	lsrs	r3, r3, #2
 8002036:	3302      	adds	r3, #2
 8002038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	220f      	movs	r2, #15
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800205a:	d00d      	beq.n	8002078 <HAL_GPIO_Init+0x1d4>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a43      	ldr	r2, [pc, #268]	; (800216c <HAL_GPIO_Init+0x2c8>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d007      	beq.n	8002074 <HAL_GPIO_Init+0x1d0>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a42      	ldr	r2, [pc, #264]	; (8002170 <HAL_GPIO_Init+0x2cc>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d101      	bne.n	8002070 <HAL_GPIO_Init+0x1cc>
 800206c:	2302      	movs	r3, #2
 800206e:	e004      	b.n	800207a <HAL_GPIO_Init+0x1d6>
 8002070:	2307      	movs	r3, #7
 8002072:	e002      	b.n	800207a <HAL_GPIO_Init+0x1d6>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <HAL_GPIO_Init+0x1d6>
 8002078:	2300      	movs	r3, #0
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	f002 0203 	and.w	r2, r2, #3
 8002080:	0092      	lsls	r2, r2, #2
 8002082:	4093      	lsls	r3, r2
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800208a:	4937      	ldr	r1, [pc, #220]	; (8002168 <HAL_GPIO_Init+0x2c4>)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	3302      	adds	r3, #2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002098:	4b36      	ldr	r3, [pc, #216]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020bc:	4a2d      	ldr	r2, [pc, #180]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020c2:	4b2c      	ldr	r3, [pc, #176]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020e6:	4a23      	ldr	r2, [pc, #140]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020ec:	4b21      	ldr	r3, [pc, #132]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002110:	4a18      	ldr	r2, [pc, #96]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002116:	4b17      	ldr	r3, [pc, #92]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	43db      	mvns	r3, r3
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4013      	ands	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800213a:	4a0e      	ldr	r2, [pc, #56]	; (8002174 <HAL_GPIO_Init+0x2d0>)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	3301      	adds	r3, #1
 8002144:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	fa22 f303 	lsr.w	r3, r2, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	f47f aeaf 	bne.w	8001eb4 <HAL_GPIO_Init+0x10>
  }
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	40021000 	.word	0x40021000
 8002168:	40010000 	.word	0x40010000
 800216c:	48000400 	.word	0x48000400
 8002170:	48000800 	.word	0x48000800
 8002174:	40010400 	.word	0x40010400

08002178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
 8002184:	4613      	mov	r3, r2
 8002186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002188:	787b      	ldrb	r3, [r7, #1]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002194:	e002      	b.n	800219c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002196:	887a      	ldrh	r2, [r7, #2]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4013      	ands	r3, r2
 80021c0:	041a      	lsls	r2, r3, #16
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	43d9      	mvns	r1, r3
 80021c6:	887b      	ldrh	r3, [r7, #2]
 80021c8:	400b      	ands	r3, r1
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	619a      	str	r2, [r3, #24]
}
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ea:	6013      	str	r3, [r2, #0]
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40007000 	.word	0x40007000

080021fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <HAL_PWREx_GetVoltageRange+0x18>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40007000 	.word	0x40007000

08002218 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002226:	d130      	bne.n	800228a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002228:	4b23      	ldr	r3, [pc, #140]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002234:	d038      	beq.n	80022a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002236:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800223e:	4a1e      	ldr	r2, [pc, #120]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002244:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2232      	movs	r2, #50	; 0x32
 800224c:	fb02 f303 	mul.w	r3, r2, r3
 8002250:	4a1b      	ldr	r2, [pc, #108]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	0c9b      	lsrs	r3, r3, #18
 8002258:	3301      	adds	r3, #1
 800225a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800225c:	e002      	b.n	8002264 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	3b01      	subs	r3, #1
 8002262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002264:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002270:	d102      	bne.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f2      	bne.n	800225e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002278:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002284:	d110      	bne.n	80022a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e00f      	b.n	80022aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002296:	d007      	beq.n	80022a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002298:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022a0:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40007000 	.word	0x40007000
 80022bc:	200000cc 	.word	0x200000cc
 80022c0:	431bde83 	.word	0x431bde83

080022c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d102      	bne.n	80022d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	f000 bc02 	b.w	8002adc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022d8:	4b96      	ldr	r3, [pc, #600]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 030c 	and.w	r3, r3, #12
 80022e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022e2:	4b94      	ldr	r3, [pc, #592]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80e4 	beq.w	80024c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_RCC_OscConfig+0x4c>
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b0c      	cmp	r3, #12
 8002304:	f040 808b 	bne.w	800241e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2b01      	cmp	r3, #1
 800230c:	f040 8087 	bne.w	800241e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002310:	4b88      	ldr	r3, [pc, #544]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_OscConfig+0x64>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e3d9      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1a      	ldr	r2, [r3, #32]
 800232c:	4b81      	ldr	r3, [pc, #516]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d004      	beq.n	8002342 <HAL_RCC_OscConfig+0x7e>
 8002338:	4b7e      	ldr	r3, [pc, #504]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002340:	e005      	b.n	800234e <HAL_RCC_OscConfig+0x8a>
 8002342:	4b7c      	ldr	r3, [pc, #496]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800234e:	4293      	cmp	r3, r2
 8002350:	d223      	bcs.n	800239a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fd8c 	bl	8002e74 <RCC_SetFlashLatencyFromMSIRange>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e3ba      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002366:	4b73      	ldr	r3, [pc, #460]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a72      	ldr	r2, [pc, #456]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 800236c:	f043 0308 	orr.w	r3, r3, #8
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b70      	ldr	r3, [pc, #448]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	496d      	ldr	r1, [pc, #436]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002380:	4313      	orrs	r3, r2
 8002382:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002384:	4b6b      	ldr	r3, [pc, #428]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	021b      	lsls	r3, r3, #8
 8002392:	4968      	ldr	r1, [pc, #416]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]
 8002398:	e025      	b.n	80023e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800239a:	4b66      	ldr	r3, [pc, #408]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a65      	ldr	r2, [pc, #404]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 80023a0:	f043 0308 	orr.w	r3, r3, #8
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	4b63      	ldr	r3, [pc, #396]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4960      	ldr	r1, [pc, #384]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023b8:	4b5e      	ldr	r3, [pc, #376]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	495b      	ldr	r1, [pc, #364]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 fd4c 	bl	8002e74 <RCC_SetFlashLatencyFromMSIRange>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e37a      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023e6:	f000 fc81 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 80023ea:	4602      	mov	r2, r0
 80023ec:	4b51      	ldr	r3, [pc, #324]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	4950      	ldr	r1, [pc, #320]	; (8002538 <HAL_RCC_OscConfig+0x274>)
 80023f8:	5ccb      	ldrb	r3, [r1, r3]
 80023fa:	f003 031f 	and.w	r3, r3, #31
 80023fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002402:	4a4e      	ldr	r2, [pc, #312]	; (800253c <HAL_RCC_OscConfig+0x278>)
 8002404:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002406:	4b4e      	ldr	r3, [pc, #312]	; (8002540 <HAL_RCC_OscConfig+0x27c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fb3a 	bl	8001a84 <HAL_InitTick>
 8002410:	4603      	mov	r3, r0
 8002412:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d052      	beq.n	80024c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	e35e      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d032      	beq.n	800248c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002426:	4b43      	ldr	r3, [pc, #268]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a42      	ldr	r2, [pc, #264]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002432:	f7ff fb77 	bl	8001b24 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800243a:	f7ff fb73 	bl	8001b24 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e347      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800244c:	4b39      	ldr	r3, [pc, #228]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002458:	4b36      	ldr	r3, [pc, #216]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a35      	ldr	r2, [pc, #212]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 800245e:	f043 0308 	orr.w	r3, r3, #8
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b33      	ldr	r3, [pc, #204]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	4930      	ldr	r1, [pc, #192]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002476:	4b2f      	ldr	r3, [pc, #188]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	492b      	ldr	r1, [pc, #172]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
 800248a:	e01a      	b.n	80024c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800248c:	4b29      	ldr	r3, [pc, #164]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a28      	ldr	r2, [pc, #160]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002492:	f023 0301 	bic.w	r3, r3, #1
 8002496:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002498:	f7ff fb44 	bl	8001b24 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024a0:	f7ff fb40 	bl	8001b24 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e314      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024b2:	4b20      	ldr	r3, [pc, #128]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x1dc>
 80024be:	e000      	b.n	80024c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d073      	beq.n	80025b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_OscConfig+0x21c>
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2b0c      	cmp	r3, #12
 80024d8:	d10e      	bne.n	80024f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d10b      	bne.n	80024f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	4b14      	ldr	r3, [pc, #80]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d063      	beq.n	80025b4 <HAL_RCC_OscConfig+0x2f0>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d15f      	bne.n	80025b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e2f1      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002500:	d106      	bne.n	8002510 <HAL_RCC_OscConfig+0x24c>
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a0b      	ldr	r2, [pc, #44]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	e025      	b.n	800255c <HAL_RCC_OscConfig+0x298>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002518:	d114      	bne.n	8002544 <HAL_RCC_OscConfig+0x280>
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a05      	ldr	r2, [pc, #20]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b03      	ldr	r3, [pc, #12]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a02      	ldr	r2, [pc, #8]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 800252c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e013      	b.n	800255c <HAL_RCC_OscConfig+0x298>
 8002534:	40021000 	.word	0x40021000
 8002538:	08006f5c 	.word	0x08006f5c
 800253c:	200000cc 	.word	0x200000cc
 8002540:	200000d0 	.word	0x200000d0
 8002544:	4ba0      	ldr	r3, [pc, #640]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a9f      	ldr	r2, [pc, #636]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 800254a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	4b9d      	ldr	r3, [pc, #628]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a9c      	ldr	r2, [pc, #624]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 8002556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800255a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d013      	beq.n	800258c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7ff fade 	bl	8001b24 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800256c:	f7ff fada 	bl	8001b24 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	; 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e2ae      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800257e:	4b92      	ldr	r3, [pc, #584]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x2a8>
 800258a:	e014      	b.n	80025b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7ff faca 	bl	8001b24 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002594:	f7ff fac6 	bl	8001b24 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	; 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e29a      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025a6:	4b88      	ldr	r3, [pc, #544]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x2d0>
 80025b2:	e000      	b.n	80025b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d060      	beq.n	8002684 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_OscConfig+0x310>
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2b0c      	cmp	r3, #12
 80025cc:	d119      	bne.n	8002602 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d116      	bne.n	8002602 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d4:	4b7c      	ldr	r3, [pc, #496]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_OscConfig+0x328>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e277      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ec:	4b76      	ldr	r3, [pc, #472]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	061b      	lsls	r3, r3, #24
 80025fa:	4973      	ldr	r1, [pc, #460]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002600:	e040      	b.n	8002684 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d023      	beq.n	8002652 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800260a:	4b6f      	ldr	r3, [pc, #444]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a6e      	ldr	r2, [pc, #440]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 8002610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7ff fa85 	bl	8001b24 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261e:	f7ff fa81 	bl	8001b24 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e255      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002630:	4b65      	ldr	r3, [pc, #404]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263c:	4b62      	ldr	r3, [pc, #392]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	061b      	lsls	r3, r3, #24
 800264a:	495f      	ldr	r1, [pc, #380]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]
 8002650:	e018      	b.n	8002684 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002652:	4b5d      	ldr	r3, [pc, #372]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a5c      	ldr	r2, [pc, #368]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 8002658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800265c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265e:	f7ff fa61 	bl	8001b24 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002666:	f7ff fa5d 	bl	8001b24 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e231      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002678:	4b53      	ldr	r3, [pc, #332]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f0      	bne.n	8002666 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d03c      	beq.n	800270a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01c      	beq.n	80026d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002698:	4b4b      	ldr	r3, [pc, #300]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 800269a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800269e:	4a4a      	ldr	r2, [pc, #296]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7ff fa3c 	bl	8001b24 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b0:	f7ff fa38 	bl	8001b24 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e20c      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026c2:	4b41      	ldr	r3, [pc, #260]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 80026c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0ef      	beq.n	80026b0 <HAL_RCC_OscConfig+0x3ec>
 80026d0:	e01b      	b.n	800270a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d2:	4b3d      	ldr	r3, [pc, #244]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 80026d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026d8:	4a3b      	ldr	r2, [pc, #236]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 80026da:	f023 0301 	bic.w	r3, r3, #1
 80026de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e2:	f7ff fa1f 	bl	8001b24 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ea:	f7ff fa1b 	bl	8001b24 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e1ef      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026fc:	4b32      	ldr	r3, [pc, #200]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 80026fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1ef      	bne.n	80026ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80a6 	beq.w	8002864 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002718:	2300      	movs	r3, #0
 800271a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800271c:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 800271e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10d      	bne.n	8002744 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002728:	4b27      	ldr	r3, [pc, #156]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	4a26      	ldr	r2, [pc, #152]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 800272e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002732:	6593      	str	r3, [r2, #88]	; 0x58
 8002734:	4b24      	ldr	r3, [pc, #144]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 8002736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002740:	2301      	movs	r3, #1
 8002742:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002744:	4b21      	ldr	r3, [pc, #132]	; (80027cc <HAL_RCC_OscConfig+0x508>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d118      	bne.n	8002782 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002750:	4b1e      	ldr	r3, [pc, #120]	; (80027cc <HAL_RCC_OscConfig+0x508>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a1d      	ldr	r2, [pc, #116]	; (80027cc <HAL_RCC_OscConfig+0x508>)
 8002756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275c:	f7ff f9e2 	bl	8001b24 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002764:	f7ff f9de 	bl	8001b24 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e1b2      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002776:	4b15      	ldr	r3, [pc, #84]	; (80027cc <HAL_RCC_OscConfig+0x508>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d108      	bne.n	800279c <HAL_RCC_OscConfig+0x4d8>
 800278a:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002790:	4a0d      	ldr	r2, [pc, #52]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800279a:	e029      	b.n	80027f0 <HAL_RCC_OscConfig+0x52c>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b05      	cmp	r3, #5
 80027a2:	d115      	bne.n	80027d0 <HAL_RCC_OscConfig+0x50c>
 80027a4:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027aa:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ba:	4a03      	ldr	r2, [pc, #12]	; (80027c8 <HAL_RCC_OscConfig+0x504>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027c4:	e014      	b.n	80027f0 <HAL_RCC_OscConfig+0x52c>
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40007000 	.word	0x40007000
 80027d0:	4b9a      	ldr	r3, [pc, #616]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 80027d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d6:	4a99      	ldr	r2, [pc, #612]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027e0:	4b96      	ldr	r3, [pc, #600]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 80027e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e6:	4a95      	ldr	r2, [pc, #596]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 80027e8:	f023 0304 	bic.w	r3, r3, #4
 80027ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d016      	beq.n	8002826 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f8:	f7ff f994 	bl	8001b24 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027fe:	e00a      	b.n	8002816 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002800:	f7ff f990 	bl	8001b24 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	f241 3288 	movw	r2, #5000	; 0x1388
 800280e:	4293      	cmp	r3, r2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e162      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002816:	4b89      	ldr	r3, [pc, #548]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 8002818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0ed      	beq.n	8002800 <HAL_RCC_OscConfig+0x53c>
 8002824:	e015      	b.n	8002852 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002826:	f7ff f97d 	bl	8001b24 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800282c:	e00a      	b.n	8002844 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282e:	f7ff f979 	bl	8001b24 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	f241 3288 	movw	r2, #5000	; 0x1388
 800283c:	4293      	cmp	r3, r2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e14b      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002844:	4b7d      	ldr	r3, [pc, #500]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1ed      	bne.n	800282e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002852:	7ffb      	ldrb	r3, [r7, #31]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d105      	bne.n	8002864 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002858:	4b78      	ldr	r3, [pc, #480]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 800285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285c:	4a77      	ldr	r2, [pc, #476]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 800285e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002862:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b00      	cmp	r3, #0
 800286e:	d03c      	beq.n	80028ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01c      	beq.n	80028b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002878:	4b70      	ldr	r3, [pc, #448]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 800287a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800287e:	4a6f      	ldr	r2, [pc, #444]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002888:	f7ff f94c 	bl	8001b24 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002890:	f7ff f948 	bl	8001b24 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e11c      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028a2:	4b66      	ldr	r3, [pc, #408]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 80028a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0ef      	beq.n	8002890 <HAL_RCC_OscConfig+0x5cc>
 80028b0:	e01b      	b.n	80028ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028b2:	4b62      	ldr	r3, [pc, #392]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 80028b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028b8:	4a60      	ldr	r2, [pc, #384]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 80028ba:	f023 0301 	bic.w	r3, r3, #1
 80028be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c2:	f7ff f92f 	bl	8001b24 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ca:	f7ff f92b 	bl	8001b24 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e0ff      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028dc:	4b57      	ldr	r3, [pc, #348]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 80028de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1ef      	bne.n	80028ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 80f3 	beq.w	8002ada <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	f040 80c9 	bne.w	8002a90 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028fe:	4b4f      	ldr	r3, [pc, #316]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f003 0203 	and.w	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	429a      	cmp	r2, r3
 8002910:	d12c      	bne.n	800296c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	3b01      	subs	r3, #1
 800291e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d123      	bne.n	800296c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d11b      	bne.n	800296c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002940:	429a      	cmp	r2, r3
 8002942:	d113      	bne.n	800296c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294e:	085b      	lsrs	r3, r3, #1
 8002950:	3b01      	subs	r3, #1
 8002952:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002954:	429a      	cmp	r2, r3
 8002956:	d109      	bne.n	800296c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	085b      	lsrs	r3, r3, #1
 8002964:	3b01      	subs	r3, #1
 8002966:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d06b      	beq.n	8002a44 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	2b0c      	cmp	r3, #12
 8002970:	d062      	beq.n	8002a38 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002972:	4b32      	ldr	r3, [pc, #200]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e0ac      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002982:	4b2e      	ldr	r3, [pc, #184]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a2d      	ldr	r2, [pc, #180]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 8002988:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800298c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800298e:	f7ff f8c9 	bl	8001b24 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002996:	f7ff f8c5 	bl	8001b24 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e099      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a8:	4b24      	ldr	r3, [pc, #144]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f0      	bne.n	8002996 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029b4:	4b21      	ldr	r3, [pc, #132]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	4b21      	ldr	r3, [pc, #132]	; (8002a40 <HAL_RCC_OscConfig+0x77c>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029c4:	3a01      	subs	r2, #1
 80029c6:	0112      	lsls	r2, r2, #4
 80029c8:	4311      	orrs	r1, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029ce:	0212      	lsls	r2, r2, #8
 80029d0:	4311      	orrs	r1, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029d6:	0852      	lsrs	r2, r2, #1
 80029d8:	3a01      	subs	r2, #1
 80029da:	0552      	lsls	r2, r2, #21
 80029dc:	4311      	orrs	r1, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029e2:	0852      	lsrs	r2, r2, #1
 80029e4:	3a01      	subs	r2, #1
 80029e6:	0652      	lsls	r2, r2, #25
 80029e8:	4311      	orrs	r1, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029ee:	06d2      	lsls	r2, r2, #27
 80029f0:	430a      	orrs	r2, r1
 80029f2:	4912      	ldr	r1, [pc, #72]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029f8:	4b10      	ldr	r3, [pc, #64]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0f      	ldr	r2, [pc, #60]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 80029fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a04:	4b0d      	ldr	r3, [pc, #52]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4a0c      	ldr	r2, [pc, #48]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 8002a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a10:	f7ff f888 	bl	8001b24 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a18:	f7ff f884 	bl	8001b24 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e058      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a2a:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <HAL_RCC_OscConfig+0x778>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a36:	e050      	b.n	8002ada <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e04f      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a44:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <HAL_RCC_OscConfig+0x820>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d144      	bne.n	8002ada <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a50:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <HAL_RCC_OscConfig+0x820>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a23      	ldr	r2, [pc, #140]	; (8002ae4 <HAL_RCC_OscConfig+0x820>)
 8002a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a5c:	4b21      	ldr	r3, [pc, #132]	; (8002ae4 <HAL_RCC_OscConfig+0x820>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4a20      	ldr	r2, [pc, #128]	; (8002ae4 <HAL_RCC_OscConfig+0x820>)
 8002a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a68:	f7ff f85c 	bl	8001b24 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a70:	f7ff f858 	bl	8001b24 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e02c      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a82:	4b18      	ldr	r3, [pc, #96]	; (8002ae4 <HAL_RCC_OscConfig+0x820>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0x7ac>
 8002a8e:	e024      	b.n	8002ada <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	2b0c      	cmp	r3, #12
 8002a94:	d01f      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a96:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <HAL_RCC_OscConfig+0x820>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a12      	ldr	r2, [pc, #72]	; (8002ae4 <HAL_RCC_OscConfig+0x820>)
 8002a9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa2:	f7ff f83f 	bl	8001b24 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aaa:	f7ff f83b 	bl	8001b24 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e00f      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002abc:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <HAL_RCC_OscConfig+0x820>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f0      	bne.n	8002aaa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_RCC_OscConfig+0x820>)
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	4905      	ldr	r1, [pc, #20]	; (8002ae4 <HAL_RCC_OscConfig+0x820>)
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <HAL_RCC_OscConfig+0x824>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60cb      	str	r3, [r1, #12]
 8002ad4:	e001      	b.n	8002ada <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3720      	adds	r7, #32
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	feeefffc 	.word	0xfeeefffc

08002aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0e7      	b.n	8002cd0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b00:	4b75      	ldr	r3, [pc, #468]	; (8002cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d910      	bls.n	8002b30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b72      	ldr	r3, [pc, #456]	; (8002cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 0207 	bic.w	r2, r3, #7
 8002b16:	4970      	ldr	r1, [pc, #448]	; (8002cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1e:	4b6e      	ldr	r3, [pc, #440]	; (8002cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0cf      	b.n	8002cd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d010      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	4b66      	ldr	r3, [pc, #408]	; (8002cdc <HAL_RCC_ClockConfig+0x1f0>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d908      	bls.n	8002b5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b4c:	4b63      	ldr	r3, [pc, #396]	; (8002cdc <HAL_RCC_ClockConfig+0x1f0>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4960      	ldr	r1, [pc, #384]	; (8002cdc <HAL_RCC_ClockConfig+0x1f0>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d04c      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d107      	bne.n	8002b82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b72:	4b5a      	ldr	r3, [pc, #360]	; (8002cdc <HAL_RCC_ClockConfig+0x1f0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d121      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e0a6      	b.n	8002cd0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d107      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b8a:	4b54      	ldr	r3, [pc, #336]	; (8002cdc <HAL_RCC_ClockConfig+0x1f0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d115      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e09a      	b.n	8002cd0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d107      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ba2:	4b4e      	ldr	r3, [pc, #312]	; (8002cdc <HAL_RCC_ClockConfig+0x1f0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d109      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e08e      	b.n	8002cd0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bb2:	4b4a      	ldr	r3, [pc, #296]	; (8002cdc <HAL_RCC_ClockConfig+0x1f0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e086      	b.n	8002cd0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bc2:	4b46      	ldr	r3, [pc, #280]	; (8002cdc <HAL_RCC_ClockConfig+0x1f0>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f023 0203 	bic.w	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4943      	ldr	r1, [pc, #268]	; (8002cdc <HAL_RCC_ClockConfig+0x1f0>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd4:	f7fe ffa6 	bl	8001b24 <HAL_GetTick>
 8002bd8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bdc:	f7fe ffa2 	bl	8001b24 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e06e      	b.n	8002cd0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf2:	4b3a      	ldr	r3, [pc, #232]	; (8002cdc <HAL_RCC_ClockConfig+0x1f0>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 020c 	and.w	r2, r3, #12
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d1eb      	bne.n	8002bdc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d010      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	4b31      	ldr	r3, [pc, #196]	; (8002cdc <HAL_RCC_ClockConfig+0x1f0>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d208      	bcs.n	8002c32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c20:	4b2e      	ldr	r3, [pc, #184]	; (8002cdc <HAL_RCC_ClockConfig+0x1f0>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	492b      	ldr	r1, [pc, #172]	; (8002cdc <HAL_RCC_ClockConfig+0x1f0>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c32:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d210      	bcs.n	8002c62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c40:	4b25      	ldr	r3, [pc, #148]	; (8002cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f023 0207 	bic.w	r2, r3, #7
 8002c48:	4923      	ldr	r1, [pc, #140]	; (8002cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c50:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d001      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e036      	b.n	8002cd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d008      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c6e:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <HAL_RCC_ClockConfig+0x1f0>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	4918      	ldr	r1, [pc, #96]	; (8002cdc <HAL_RCC_ClockConfig+0x1f0>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d009      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c8c:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <HAL_RCC_ClockConfig+0x1f0>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	4910      	ldr	r1, [pc, #64]	; (8002cdc <HAL_RCC_ClockConfig+0x1f0>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ca0:	f000 f824 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <HAL_RCC_ClockConfig+0x1f0>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	091b      	lsrs	r3, r3, #4
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	490b      	ldr	r1, [pc, #44]	; (8002ce0 <HAL_RCC_ClockConfig+0x1f4>)
 8002cb2:	5ccb      	ldrb	r3, [r1, r3]
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cbc:	4a09      	ldr	r2, [pc, #36]	; (8002ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8002cbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cc0:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <HAL_RCC_ClockConfig+0x1fc>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe fedd 	bl	8001a84 <HAL_InitTick>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	72fb      	strb	r3, [r7, #11]

  return status;
 8002cce:	7afb      	ldrb	r3, [r7, #11]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40022000 	.word	0x40022000
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	08006f5c 	.word	0x08006f5c
 8002ce4:	200000cc 	.word	0x200000cc
 8002ce8:	200000d0 	.word	0x200000d0

08002cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b089      	sub	sp, #36	; 0x24
 8002cf0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cfa:	4b3e      	ldr	r3, [pc, #248]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d04:	4b3b      	ldr	r3, [pc, #236]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_GetSysClockFreq+0x34>
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	2b0c      	cmp	r3, #12
 8002d18:	d121      	bne.n	8002d5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d11e      	bne.n	8002d5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d20:	4b34      	ldr	r3, [pc, #208]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d107      	bne.n	8002d3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d2c:	4b31      	ldr	r3, [pc, #196]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d32:	0a1b      	lsrs	r3, r3, #8
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	e005      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d3c:	4b2d      	ldr	r3, [pc, #180]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d48:	4a2b      	ldr	r2, [pc, #172]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10d      	bne.n	8002d74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d5c:	e00a      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d102      	bne.n	8002d6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d64:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x110>)
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	e004      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d70:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	2b0c      	cmp	r3, #12
 8002d78:	d134      	bne.n	8002de4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d7a:	4b1e      	ldr	r3, [pc, #120]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d003      	beq.n	8002d92 <HAL_RCC_GetSysClockFreq+0xa6>
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d003      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0xac>
 8002d90:	e005      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d92:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x110>)
 8002d94:	617b      	str	r3, [r7, #20]
      break;
 8002d96:	e005      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d98:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d9a:	617b      	str	r3, [r7, #20]
      break;
 8002d9c:	e002      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	617b      	str	r3, [r7, #20]
      break;
 8002da2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002da4:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	3301      	adds	r3, #1
 8002db0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	0a1b      	lsrs	r3, r3, #8
 8002db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	fb03 f202 	mul.w	r2, r3, r2
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	0e5b      	lsrs	r3, r3, #25
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002de4:	69bb      	ldr	r3, [r7, #24]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3724      	adds	r7, #36	; 0x24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000
 8002df8:	08006f74 	.word	0x08006f74
 8002dfc:	00f42400 	.word	0x00f42400
 8002e00:	007a1200 	.word	0x007a1200

08002e04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	200000cc 	.word	0x200000cc

08002e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e20:	f7ff fff0 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e24:	4602      	mov	r2, r0
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	0a1b      	lsrs	r3, r3, #8
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	4904      	ldr	r1, [pc, #16]	; (8002e44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e32:	5ccb      	ldrb	r3, [r1, r3]
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021000 	.word	0x40021000
 8002e44:	08006f6c 	.word	0x08006f6c

08002e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e4c:	f7ff ffda 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e50:	4602      	mov	r2, r0
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	0adb      	lsrs	r3, r3, #11
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	4904      	ldr	r1, [pc, #16]	; (8002e70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e5e:	5ccb      	ldrb	r3, [r1, r3]
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	08006f6c 	.word	0x08006f6c

08002e74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e80:	4b2a      	ldr	r3, [pc, #168]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e8c:	f7ff f9b6 	bl	80021fc <HAL_PWREx_GetVoltageRange>
 8002e90:	6178      	str	r0, [r7, #20]
 8002e92:	e014      	b.n	8002ebe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e94:	4b25      	ldr	r3, [pc, #148]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e98:	4a24      	ldr	r2, [pc, #144]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002ea0:	4b22      	ldr	r3, [pc, #136]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002eac:	f7ff f9a6 	bl	80021fc <HAL_PWREx_GetVoltageRange>
 8002eb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002eb2:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb6:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec4:	d10b      	bne.n	8002ede <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b80      	cmp	r3, #128	; 0x80
 8002eca:	d919      	bls.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2ba0      	cmp	r3, #160	; 0xa0
 8002ed0:	d902      	bls.n	8002ed8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	e013      	b.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ed8:	2301      	movs	r3, #1
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	e010      	b.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b80      	cmp	r3, #128	; 0x80
 8002ee2:	d902      	bls.n	8002eea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	e00a      	b.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b80      	cmp	r3, #128	; 0x80
 8002eee:	d102      	bne.n	8002ef6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	e004      	b.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b70      	cmp	r3, #112	; 0x70
 8002efa:	d101      	bne.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002efc:	2301      	movs	r3, #1
 8002efe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f00:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f023 0207 	bic.w	r2, r3, #7
 8002f08:	4909      	ldr	r1, [pc, #36]	; (8002f30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f10:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d001      	beq.n	8002f22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40022000 	.word	0x40022000

08002f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f40:	2300      	movs	r3, #0
 8002f42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d031      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f58:	d01a      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002f5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f5e:	d814      	bhi.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d009      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f68:	d10f      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002f6a:	4b5d      	ldr	r3, [pc, #372]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	4a5c      	ldr	r2, [pc, #368]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f74:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f76:	e00c      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 f9de 	bl	8003340 <RCCEx_PLLSAI1_Config>
 8002f84:	4603      	mov	r3, r0
 8002f86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f88:	e003      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	74fb      	strb	r3, [r7, #19]
      break;
 8002f8e:	e000      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f92:	7cfb      	ldrb	r3, [r7, #19]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10b      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f98:	4b51      	ldr	r3, [pc, #324]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa6:	494e      	ldr	r1, [pc, #312]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fae:	e001      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb0:	7cfb      	ldrb	r3, [r7, #19]
 8002fb2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 809e 	beq.w	80030fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fc6:	4b46      	ldr	r3, [pc, #280]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00d      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fdc:	4b40      	ldr	r3, [pc, #256]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe0:	4a3f      	ldr	r2, [pc, #252]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8002fe8:	4b3d      	ldr	r3, [pc, #244]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ff8:	4b3a      	ldr	r3, [pc, #232]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a39      	ldr	r2, [pc, #228]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003002:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003004:	f7fe fd8e 	bl	8001b24 <HAL_GetTick>
 8003008:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800300a:	e009      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300c:	f7fe fd8a 	bl	8001b24 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d902      	bls.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	74fb      	strb	r3, [r7, #19]
        break;
 800301e:	e005      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003020:	4b30      	ldr	r3, [pc, #192]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0ef      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800302c:	7cfb      	ldrb	r3, [r7, #19]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d15a      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003032:	4b2b      	ldr	r3, [pc, #172]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003038:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01e      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	429a      	cmp	r2, r3
 800304c:	d019      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800304e:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003058:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800305a:	4b21      	ldr	r3, [pc, #132]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003060:	4a1f      	ldr	r2, [pc, #124]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800306a:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800306c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003070:	4a1b      	ldr	r2, [pc, #108]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800307a:	4a19      	ldr	r2, [pc, #100]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d016      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308c:	f7fe fd4a 	bl	8001b24 <HAL_GetTick>
 8003090:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003092:	e00b      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003094:	f7fe fd46 	bl	8001b24 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d902      	bls.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	74fb      	strb	r3, [r7, #19]
            break;
 80030aa:	e006      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ac:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0ec      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80030ba:	7cfb      	ldrb	r3, [r7, #19]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10b      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ce:	4904      	ldr	r1, [pc, #16]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030d6:	e009      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030d8:	7cfb      	ldrb	r3, [r7, #19]
 80030da:	74bb      	strb	r3, [r7, #18]
 80030dc:	e006      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80030de:	bf00      	nop
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e8:	7cfb      	ldrb	r3, [r7, #19]
 80030ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ec:	7c7b      	ldrb	r3, [r7, #17]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d105      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f2:	4b8a      	ldr	r3, [pc, #552]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f6:	4a89      	ldr	r2, [pc, #548]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800310a:	4b84      	ldr	r3, [pc, #528]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800310c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003110:	f023 0203 	bic.w	r2, r3, #3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	4980      	ldr	r1, [pc, #512]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800312c:	4b7b      	ldr	r3, [pc, #492]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800312e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003132:	f023 020c 	bic.w	r2, r3, #12
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	4978      	ldr	r1, [pc, #480]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800314e:	4b73      	ldr	r3, [pc, #460]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003154:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	496f      	ldr	r1, [pc, #444]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00a      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003170:	4b6a      	ldr	r3, [pc, #424]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003176:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317e:	4967      	ldr	r1, [pc, #412]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003192:	4b62      	ldr	r3, [pc, #392]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003198:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a0:	495e      	ldr	r1, [pc, #376]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00a      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031b4:	4b59      	ldr	r3, [pc, #356]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	4956      	ldr	r1, [pc, #344]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031d6:	4b51      	ldr	r3, [pc, #324]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	494d      	ldr	r1, [pc, #308]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d028      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031f8:	4b48      	ldr	r3, [pc, #288]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	4945      	ldr	r1, [pc, #276]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003216:	d106      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003218:	4b40      	ldr	r3, [pc, #256]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	4a3f      	ldr	r2, [pc, #252]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800321e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003222:	60d3      	str	r3, [r2, #12]
 8003224:	e011      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800322e:	d10c      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3304      	adds	r3, #4
 8003234:	2101      	movs	r1, #1
 8003236:	4618      	mov	r0, r3
 8003238:	f000 f882 	bl	8003340 <RCCEx_PLLSAI1_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003246:	7cfb      	ldrb	r3, [r7, #19]
 8003248:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d028      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003256:	4b31      	ldr	r3, [pc, #196]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003264:	492d      	ldr	r1, [pc, #180]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003274:	d106      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003276:	4b29      	ldr	r3, [pc, #164]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	4a28      	ldr	r2, [pc, #160]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800327c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003280:	60d3      	str	r3, [r2, #12]
 8003282:	e011      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003288:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800328c:	d10c      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3304      	adds	r3, #4
 8003292:	2101      	movs	r1, #1
 8003294:	4618      	mov	r0, r3
 8003296:	f000 f853 	bl	8003340 <RCCEx_PLLSAI1_Config>
 800329a:	4603      	mov	r3, r0
 800329c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800329e:	7cfb      	ldrb	r3, [r7, #19]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80032a4:	7cfb      	ldrb	r3, [r7, #19]
 80032a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01c      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032b4:	4b19      	ldr	r3, [pc, #100]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c2:	4916      	ldr	r1, [pc, #88]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032d2:	d10c      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3304      	adds	r3, #4
 80032d8:	2102      	movs	r1, #2
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 f830 	bl	8003340 <RCCEx_PLLSAI1_Config>
 80032e0:	4603      	mov	r3, r0
 80032e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032e4:	7cfb      	ldrb	r3, [r7, #19]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80032ea:	7cfb      	ldrb	r3, [r7, #19]
 80032ec:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032fa:	4b08      	ldr	r3, [pc, #32]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003300:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003308:	4904      	ldr	r1, [pc, #16]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003310:	7cbb      	ldrb	r3, [r7, #18]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000

08003320 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a04      	ldr	r2, [pc, #16]	; (800333c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800332a:	f043 0304 	orr.w	r3, r3, #4
 800332e:	6013      	str	r3, [r2, #0]
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40021000 	.word	0x40021000

08003340 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800334e:	4b74      	ldr	r3, [pc, #464]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d018      	beq.n	800338c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800335a:	4b71      	ldr	r3, [pc, #452]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f003 0203 	and.w	r2, r3, #3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d10d      	bne.n	8003386 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
       ||
 800336e:	2b00      	cmp	r3, #0
 8003370:	d009      	beq.n	8003386 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003372:	4b6b      	ldr	r3, [pc, #428]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	091b      	lsrs	r3, r3, #4
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
       ||
 8003382:	429a      	cmp	r2, r3
 8003384:	d047      	beq.n	8003416 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
 800338a:	e044      	b.n	8003416 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b03      	cmp	r3, #3
 8003392:	d018      	beq.n	80033c6 <RCCEx_PLLSAI1_Config+0x86>
 8003394:	2b03      	cmp	r3, #3
 8003396:	d825      	bhi.n	80033e4 <RCCEx_PLLSAI1_Config+0xa4>
 8003398:	2b01      	cmp	r3, #1
 800339a:	d002      	beq.n	80033a2 <RCCEx_PLLSAI1_Config+0x62>
 800339c:	2b02      	cmp	r3, #2
 800339e:	d009      	beq.n	80033b4 <RCCEx_PLLSAI1_Config+0x74>
 80033a0:	e020      	b.n	80033e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033a2:	4b5f      	ldr	r3, [pc, #380]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d11d      	bne.n	80033ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b2:	e01a      	b.n	80033ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033b4:	4b5a      	ldr	r3, [pc, #360]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d116      	bne.n	80033ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c4:	e013      	b.n	80033ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033c6:	4b56      	ldr	r3, [pc, #344]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10f      	bne.n	80033f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033d2:	4b53      	ldr	r3, [pc, #332]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d109      	bne.n	80033f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033e2:	e006      	b.n	80033f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
      break;
 80033e8:	e004      	b.n	80033f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033ea:	bf00      	nop
 80033ec:	e002      	b.n	80033f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033ee:	bf00      	nop
 80033f0:	e000      	b.n	80033f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10d      	bne.n	8003416 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033fa:	4b49      	ldr	r3, [pc, #292]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6819      	ldr	r1, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	3b01      	subs	r3, #1
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	430b      	orrs	r3, r1
 8003410:	4943      	ldr	r1, [pc, #268]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003412:	4313      	orrs	r3, r2
 8003414:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003416:	7bfb      	ldrb	r3, [r7, #15]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d17c      	bne.n	8003516 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800341c:	4b40      	ldr	r3, [pc, #256]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a3f      	ldr	r2, [pc, #252]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003422:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003426:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003428:	f7fe fb7c 	bl	8001b24 <HAL_GetTick>
 800342c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800342e:	e009      	b.n	8003444 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003430:	f7fe fb78 	bl	8001b24 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d902      	bls.n	8003444 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	73fb      	strb	r3, [r7, #15]
        break;
 8003442:	e005      	b.n	8003450 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003444:	4b36      	ldr	r3, [pc, #216]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1ef      	bne.n	8003430 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d15f      	bne.n	8003516 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d110      	bne.n	800347e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800345c:	4b30      	ldr	r3, [pc, #192]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003464:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6892      	ldr	r2, [r2, #8]
 800346c:	0211      	lsls	r1, r2, #8
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68d2      	ldr	r2, [r2, #12]
 8003472:	06d2      	lsls	r2, r2, #27
 8003474:	430a      	orrs	r2, r1
 8003476:	492a      	ldr	r1, [pc, #168]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003478:	4313      	orrs	r3, r2
 800347a:	610b      	str	r3, [r1, #16]
 800347c:	e027      	b.n	80034ce <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d112      	bne.n	80034aa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003484:	4b26      	ldr	r3, [pc, #152]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800348c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6892      	ldr	r2, [r2, #8]
 8003494:	0211      	lsls	r1, r2, #8
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6912      	ldr	r2, [r2, #16]
 800349a:	0852      	lsrs	r2, r2, #1
 800349c:	3a01      	subs	r2, #1
 800349e:	0552      	lsls	r2, r2, #21
 80034a0:	430a      	orrs	r2, r1
 80034a2:	491f      	ldr	r1, [pc, #124]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	610b      	str	r3, [r1, #16]
 80034a8:	e011      	b.n	80034ce <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034aa:	4b1d      	ldr	r3, [pc, #116]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6892      	ldr	r2, [r2, #8]
 80034ba:	0211      	lsls	r1, r2, #8
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6952      	ldr	r2, [r2, #20]
 80034c0:	0852      	lsrs	r2, r2, #1
 80034c2:	3a01      	subs	r2, #1
 80034c4:	0652      	lsls	r2, r2, #25
 80034c6:	430a      	orrs	r2, r1
 80034c8:	4915      	ldr	r1, [pc, #84]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034ce:	4b14      	ldr	r3, [pc, #80]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a13      	ldr	r2, [pc, #76]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034da:	f7fe fb23 	bl	8001b24 <HAL_GetTick>
 80034de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034e0:	e009      	b.n	80034f6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034e2:	f7fe fb1f 	bl	8001b24 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d902      	bls.n	80034f6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	73fb      	strb	r3, [r7, #15]
          break;
 80034f4:	e005      	b.n	8003502 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034f6:	4b0a      	ldr	r3, [pc, #40]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0ef      	beq.n	80034e2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003502:	7bfb      	ldrb	r3, [r7, #15]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d106      	bne.n	8003516 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	4903      	ldr	r1, [pc, #12]	; (8003520 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003512:	4313      	orrs	r3, r2
 8003514:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003516:	7bfb      	ldrb	r3, [r7, #15]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40021000 	.word	0x40021000

08003524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e049      	b.n	80035ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fe f8be 	bl	80016cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3304      	adds	r3, #4
 8003560:	4619      	mov	r1, r3
 8003562:	4610      	mov	r0, r2
 8003564:	f000 fa9a 	bl	8003a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d001      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e03b      	b.n	8003664 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a19      	ldr	r2, [pc, #100]	; (8003670 <HAL_TIM_Base_Start_IT+0x9c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d009      	beq.n	8003622 <HAL_TIM_Base_Start_IT+0x4e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003616:	d004      	beq.n	8003622 <HAL_TIM_Base_Start_IT+0x4e>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a15      	ldr	r2, [pc, #84]	; (8003674 <HAL_TIM_Base_Start_IT+0xa0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d115      	bne.n	800364e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	4b13      	ldr	r3, [pc, #76]	; (8003678 <HAL_TIM_Base_Start_IT+0xa4>)
 800362a:	4013      	ands	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b06      	cmp	r3, #6
 8003632:	d015      	beq.n	8003660 <HAL_TIM_Base_Start_IT+0x8c>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363a:	d011      	beq.n	8003660 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364c:	e008      	b.n	8003660 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0201 	orr.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e000      	b.n	8003662 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003660:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	40012c00 	.word	0x40012c00
 8003674:	40014000 	.word	0x40014000
 8003678:	00010007 	.word	0x00010007

0800367c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b02      	cmp	r3, #2
 8003690:	d122      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b02      	cmp	r3, #2
 800369e:	d11b      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0202 	mvn.w	r2, #2
 80036a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f9ce 	bl	8003a60 <HAL_TIM_IC_CaptureCallback>
 80036c4:	e005      	b.n	80036d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f9c0 	bl	8003a4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f9d1 	bl	8003a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d122      	bne.n	800372c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d11b      	bne.n	800372c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0204 	mvn.w	r2, #4
 80036fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2202      	movs	r2, #2
 8003702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f9a4 	bl	8003a60 <HAL_TIM_IC_CaptureCallback>
 8003718:	e005      	b.n	8003726 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f996 	bl	8003a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f9a7 	bl	8003a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b08      	cmp	r3, #8
 8003738:	d122      	bne.n	8003780 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b08      	cmp	r3, #8
 8003746:	d11b      	bne.n	8003780 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f06f 0208 	mvn.w	r2, #8
 8003750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2204      	movs	r2, #4
 8003756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f97a 	bl	8003a60 <HAL_TIM_IC_CaptureCallback>
 800376c:	e005      	b.n	800377a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f96c 	bl	8003a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f97d 	bl	8003a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f003 0310 	and.w	r3, r3, #16
 800378a:	2b10      	cmp	r3, #16
 800378c:	d122      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0310 	and.w	r3, r3, #16
 8003798:	2b10      	cmp	r3, #16
 800379a:	d11b      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0210 	mvn.w	r2, #16
 80037a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2208      	movs	r2, #8
 80037aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f950 	bl	8003a60 <HAL_TIM_IC_CaptureCallback>
 80037c0:	e005      	b.n	80037ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f942 	bl	8003a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f953 	bl	8003a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d10e      	bne.n	8003800 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d107      	bne.n	8003800 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0201 	mvn.w	r2, #1
 80037f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fc feea 	bl	80005d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380a:	2b80      	cmp	r3, #128	; 0x80
 800380c:	d10e      	bne.n	800382c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003818:	2b80      	cmp	r3, #128	; 0x80
 800381a:	d107      	bne.n	800382c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 faa6 	bl	8003d78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800383a:	d10e      	bne.n	800385a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003846:	2b80      	cmp	r3, #128	; 0x80
 8003848:	d107      	bne.n	800385a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fa99 	bl	8003d8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003864:	2b40      	cmp	r3, #64	; 0x40
 8003866:	d10e      	bne.n	8003886 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003872:	2b40      	cmp	r3, #64	; 0x40
 8003874:	d107      	bne.n	8003886 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800387e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f901 	bl	8003a88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b20      	cmp	r3, #32
 8003892:	d10e      	bne.n	80038b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d107      	bne.n	80038b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f06f 0220 	mvn.w	r2, #32
 80038aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fa59 	bl	8003d64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b084      	sub	sp, #16
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_TIM_ConfigClockSource+0x1c>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e0b6      	b.n	8003a44 <HAL_TIM_ConfigClockSource+0x18a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2202      	movs	r2, #2
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003900:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003912:	d03e      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0xd8>
 8003914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003918:	f200 8087 	bhi.w	8003a2a <HAL_TIM_ConfigClockSource+0x170>
 800391c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003920:	f000 8086 	beq.w	8003a30 <HAL_TIM_ConfigClockSource+0x176>
 8003924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003928:	d87f      	bhi.n	8003a2a <HAL_TIM_ConfigClockSource+0x170>
 800392a:	2b70      	cmp	r3, #112	; 0x70
 800392c:	d01a      	beq.n	8003964 <HAL_TIM_ConfigClockSource+0xaa>
 800392e:	2b70      	cmp	r3, #112	; 0x70
 8003930:	d87b      	bhi.n	8003a2a <HAL_TIM_ConfigClockSource+0x170>
 8003932:	2b60      	cmp	r3, #96	; 0x60
 8003934:	d050      	beq.n	80039d8 <HAL_TIM_ConfigClockSource+0x11e>
 8003936:	2b60      	cmp	r3, #96	; 0x60
 8003938:	d877      	bhi.n	8003a2a <HAL_TIM_ConfigClockSource+0x170>
 800393a:	2b50      	cmp	r3, #80	; 0x50
 800393c:	d03c      	beq.n	80039b8 <HAL_TIM_ConfigClockSource+0xfe>
 800393e:	2b50      	cmp	r3, #80	; 0x50
 8003940:	d873      	bhi.n	8003a2a <HAL_TIM_ConfigClockSource+0x170>
 8003942:	2b40      	cmp	r3, #64	; 0x40
 8003944:	d058      	beq.n	80039f8 <HAL_TIM_ConfigClockSource+0x13e>
 8003946:	2b40      	cmp	r3, #64	; 0x40
 8003948:	d86f      	bhi.n	8003a2a <HAL_TIM_ConfigClockSource+0x170>
 800394a:	2b30      	cmp	r3, #48	; 0x30
 800394c:	d064      	beq.n	8003a18 <HAL_TIM_ConfigClockSource+0x15e>
 800394e:	2b30      	cmp	r3, #48	; 0x30
 8003950:	d86b      	bhi.n	8003a2a <HAL_TIM_ConfigClockSource+0x170>
 8003952:	2b20      	cmp	r3, #32
 8003954:	d060      	beq.n	8003a18 <HAL_TIM_ConfigClockSource+0x15e>
 8003956:	2b20      	cmp	r3, #32
 8003958:	d867      	bhi.n	8003a2a <HAL_TIM_ConfigClockSource+0x170>
 800395a:	2b00      	cmp	r3, #0
 800395c:	d05c      	beq.n	8003a18 <HAL_TIM_ConfigClockSource+0x15e>
 800395e:	2b10      	cmp	r3, #16
 8003960:	d05a      	beq.n	8003a18 <HAL_TIM_ConfigClockSource+0x15e>
 8003962:	e062      	b.n	8003a2a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6818      	ldr	r0, [r3, #0]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	6899      	ldr	r1, [r3, #8]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f000 f970 	bl	8003c58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003986:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	609a      	str	r2, [r3, #8]
      break;
 8003990:	e04f      	b.n	8003a32 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	6899      	ldr	r1, [r3, #8]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f000 f959 	bl	8003c58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039b4:	609a      	str	r2, [r3, #8]
      break;
 80039b6:	e03c      	b.n	8003a32 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	461a      	mov	r2, r3
 80039c6:	f000 f8cd 	bl	8003b64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2150      	movs	r1, #80	; 0x50
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 f926 	bl	8003c22 <TIM_ITRx_SetConfig>
      break;
 80039d6:	e02c      	b.n	8003a32 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	6859      	ldr	r1, [r3, #4]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	461a      	mov	r2, r3
 80039e6:	f000 f8ec 	bl	8003bc2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2160      	movs	r1, #96	; 0x60
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 f916 	bl	8003c22 <TIM_ITRx_SetConfig>
      break;
 80039f6:	e01c      	b.n	8003a32 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6818      	ldr	r0, [r3, #0]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	6859      	ldr	r1, [r3, #4]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	461a      	mov	r2, r3
 8003a06:	f000 f8ad 	bl	8003b64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2140      	movs	r1, #64	; 0x40
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 f906 	bl	8003c22 <TIM_ITRx_SetConfig>
      break;
 8003a16:	e00c      	b.n	8003a32 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4619      	mov	r1, r3
 8003a22:	4610      	mov	r0, r2
 8003a24:	f000 f8fd 	bl	8003c22 <TIM_ITRx_SetConfig>
      break;
 8003a28:	e003      	b.n	8003a32 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8003a2e:	e000      	b.n	8003a32 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003a30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a2a      	ldr	r2, [pc, #168]	; (8003b58 <TIM_Base_SetConfig+0xbc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d003      	beq.n	8003abc <TIM_Base_SetConfig+0x20>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aba:	d108      	bne.n	8003ace <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a21      	ldr	r2, [pc, #132]	; (8003b58 <TIM_Base_SetConfig+0xbc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00b      	beq.n	8003aee <TIM_Base_SetConfig+0x52>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003adc:	d007      	beq.n	8003aee <TIM_Base_SetConfig+0x52>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a1e      	ldr	r2, [pc, #120]	; (8003b5c <TIM_Base_SetConfig+0xc0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d003      	beq.n	8003aee <TIM_Base_SetConfig+0x52>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a1d      	ldr	r2, [pc, #116]	; (8003b60 <TIM_Base_SetConfig+0xc4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d108      	bne.n	8003b00 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a0c      	ldr	r2, [pc, #48]	; (8003b58 <TIM_Base_SetConfig+0xbc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d007      	beq.n	8003b3c <TIM_Base_SetConfig+0xa0>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a0b      	ldr	r2, [pc, #44]	; (8003b5c <TIM_Base_SetConfig+0xc0>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d003      	beq.n	8003b3c <TIM_Base_SetConfig+0xa0>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <TIM_Base_SetConfig+0xc4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d103      	bne.n	8003b44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	615a      	str	r2, [r3, #20]
}
 8003b4a:	bf00      	nop
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40012c00 	.word	0x40012c00
 8003b5c:	40014000 	.word	0x40014000
 8003b60:	40014400 	.word	0x40014400

08003b64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	f023 0201 	bic.w	r2, r3, #1
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f023 030a 	bic.w	r3, r3, #10
 8003ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	621a      	str	r2, [r3, #32]
}
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b087      	sub	sp, #28
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	f023 0210 	bic.w	r2, r3, #16
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	031b      	lsls	r3, r3, #12
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	621a      	str	r2, [r3, #32]
}
 8003c16:	bf00      	nop
 8003c18:	371c      	adds	r7, #28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b085      	sub	sp, #20
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
 8003c2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f043 0307 	orr.w	r3, r3, #7
 8003c44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	609a      	str	r2, [r3, #8]
}
 8003c4c:	bf00      	nop
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	021a      	lsls	r2, r3, #8
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	609a      	str	r2, [r3, #8]
}
 8003c8c:	bf00      	nop
 8003c8e:	371c      	adds	r7, #28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e04f      	b.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a21      	ldr	r2, [pc, #132]	; (8003d5c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d108      	bne.n	8003cec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ce0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a14      	ldr	r2, [pc, #80]	; (8003d5c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d009      	beq.n	8003d24 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d18:	d004      	beq.n	8003d24 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a10      	ldr	r2, [pc, #64]	; (8003d60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d10c      	bne.n	8003d3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	40012c00 	.word	0x40012c00
 8003d60:	40014000 	.word	0x40014000

08003d64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e040      	b.n	8003e34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fd fca6 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2224      	movs	r2, #36	; 0x24
 8003dcc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0201 	bic.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fbe8 	bl	80045b4 <UART_SetConfig>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e022      	b.n	8003e34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fe08 	bl	8004a0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fe8f 	bl	8004b50 <UART_CheckIdleState>
 8003e32:	4603      	mov	r3, r0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b08b      	sub	sp, #44	; 0x2c
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	4613      	mov	r3, r2
 8003e48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d156      	bne.n	8003f00 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <HAL_UART_Transmit_IT+0x22>
 8003e58:	88fb      	ldrh	r3, [r7, #6]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e04f      	b.n	8003f02 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_UART_Transmit_IT+0x34>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e048      	b.n	8003f02 <HAL_UART_Transmit_IT+0xc6>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	88fa      	ldrh	r2, [r7, #6]
 8003e82:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	88fa      	ldrh	r2, [r7, #6]
 8003e8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2221      	movs	r2, #33	; 0x21
 8003ea0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eaa:	d107      	bne.n	8003ebc <HAL_UART_Transmit_IT+0x80>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d103      	bne.n	8003ebc <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4a16      	ldr	r2, [pc, #88]	; (8003f10 <HAL_UART_Transmit_IT+0xd4>)
 8003eb8:	669a      	str	r2, [r3, #104]	; 0x68
 8003eba:	e002      	b.n	8003ec2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4a15      	ldr	r2, [pc, #84]	; (8003f14 <HAL_UART_Transmit_IT+0xd8>)
 8003ec0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	e853 3f00 	ldrex	r3, [r3]
 8003ed6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	623b      	str	r3, [r7, #32]
 8003eea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eec:	69f9      	ldr	r1, [r7, #28]
 8003eee:	6a3a      	ldr	r2, [r7, #32]
 8003ef0:	e841 2300 	strex	r3, r2, [r1]
 8003ef4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1e6      	bne.n	8003eca <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e000      	b.n	8003f02 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003f00:	2302      	movs	r3, #2
  }
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	372c      	adds	r7, #44	; 0x2c
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	080050ab 	.word	0x080050ab
 8003f14:	08004ff3 	.word	0x08004ff3

08003f18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08a      	sub	sp, #40	; 0x28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	d142      	bne.n	8003fb4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_UART_Receive_IT+0x22>
 8003f34:	88fb      	ldrh	r3, [r7, #6]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e03b      	b.n	8003fb6 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_UART_Receive_IT+0x34>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e034      	b.n	8003fb6 <HAL_UART_Receive_IT+0x9e>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a18      	ldr	r2, [pc, #96]	; (8003fc0 <HAL_UART_Receive_IT+0xa8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d01f      	beq.n	8003fa4 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d018      	beq.n	8003fa4 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	e853 3f00 	ldrex	r3, [r3]
 8003f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	623b      	str	r3, [r7, #32]
 8003f92:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f94:	69f9      	ldr	r1, [r7, #28]
 8003f96:	6a3a      	ldr	r2, [r7, #32]
 8003f98:	e841 2300 	strex	r3, r2, [r1]
 8003f9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1e6      	bne.n	8003f72 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fa4:	88fb      	ldrh	r3, [r7, #6]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 fede 	bl	8004d6c <UART_Start_Receive_IT>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	e000      	b.n	8003fb6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003fb4:	2302      	movs	r3, #2
  }
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3728      	adds	r7, #40	; 0x28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40008000 	.word	0x40008000

08003fc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b0ba      	sub	sp, #232	; 0xe8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003fea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003fee:	f640 030f 	movw	r3, #2063	; 0x80f
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003ff8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d115      	bne.n	800402c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00f      	beq.n	800402c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800400c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b00      	cmp	r3, #0
 8004016:	d009      	beq.n	800402c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 82a6 	beq.w	800456e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	4798      	blx	r3
      }
      return;
 800402a:	e2a0      	b.n	800456e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800402c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8117 	beq.w	8004264 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004042:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004046:	4b85      	ldr	r3, [pc, #532]	; (800425c <HAL_UART_IRQHandler+0x298>)
 8004048:	4013      	ands	r3, r2
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 810a 	beq.w	8004264 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d011      	beq.n	8004080 <HAL_UART_IRQHandler+0xbc>
 800405c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00b      	beq.n	8004080 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2201      	movs	r2, #1
 800406e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004076:	f043 0201 	orr.w	r2, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d011      	beq.n	80040b0 <HAL_UART_IRQHandler+0xec>
 800408c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00b      	beq.n	80040b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2202      	movs	r2, #2
 800409e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040a6:	f043 0204 	orr.w	r2, r3, #4
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d011      	beq.n	80040e0 <HAL_UART_IRQHandler+0x11c>
 80040bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00b      	beq.n	80040e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2204      	movs	r2, #4
 80040ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040d6:	f043 0202 	orr.w	r2, r3, #2
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d017      	beq.n	800411c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d105      	bne.n	8004104 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80040f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00b      	beq.n	800411c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2208      	movs	r2, #8
 800410a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004112:	f043 0208 	orr.w	r2, r3, #8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800411c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004124:	2b00      	cmp	r3, #0
 8004126:	d012      	beq.n	800414e <HAL_UART_IRQHandler+0x18a>
 8004128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800412c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00c      	beq.n	800414e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800413c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004144:	f043 0220 	orr.w	r2, r3, #32
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 820c 	beq.w	8004572 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800415a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00d      	beq.n	8004182 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d007      	beq.n	8004182 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004188:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004196:	2b40      	cmp	r3, #64	; 0x40
 8004198:	d005      	beq.n	80041a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800419a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800419e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d04f      	beq.n	8004246 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 feaa 	bl	8004f00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b6:	2b40      	cmp	r3, #64	; 0x40
 80041b8:	d141      	bne.n	800423e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3308      	adds	r3, #8
 80041c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041c8:	e853 3f00 	ldrex	r3, [r3]
 80041cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80041d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3308      	adds	r3, #8
 80041e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80041e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80041ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80041f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80041fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1d9      	bne.n	80041ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420a:	2b00      	cmp	r3, #0
 800420c:	d013      	beq.n	8004236 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004212:	4a13      	ldr	r2, [pc, #76]	; (8004260 <HAL_UART_IRQHandler+0x29c>)
 8004214:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421a:	4618      	mov	r0, r3
 800421c:	f7fd fe01 	bl	8001e22 <HAL_DMA_Abort_IT>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d017      	beq.n	8004256 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004230:	4610      	mov	r0, r2
 8004232:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004234:	e00f      	b.n	8004256 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f9a6 	bl	8004588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800423c:	e00b      	b.n	8004256 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f9a2 	bl	8004588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004244:	e007      	b.n	8004256 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f99e 	bl	8004588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004254:	e18d      	b.n	8004572 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004256:	bf00      	nop
    return;
 8004258:	e18b      	b.n	8004572 <HAL_UART_IRQHandler+0x5ae>
 800425a:	bf00      	nop
 800425c:	04000120 	.word	0x04000120
 8004260:	08004fc7 	.word	0x08004fc7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004268:	2b01      	cmp	r3, #1
 800426a:	f040 8146 	bne.w	80044fa <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800426e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 813f 	beq.w	80044fa <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800427c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 8138 	beq.w	80044fa <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2210      	movs	r2, #16
 8004290:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429c:	2b40      	cmp	r3, #64	; 0x40
 800429e:	f040 80b4 	bne.w	800440a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 815f 	beq.w	8004576 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80042be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042c2:	429a      	cmp	r2, r3
 80042c4:	f080 8157 	bcs.w	8004576 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f040 8085 	bne.w	80043ee <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042f0:	e853 3f00 	ldrex	r3, [r3]
 80042f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80042f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004300:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800430e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004312:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800431a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800431e:	e841 2300 	strex	r3, r2, [r1]
 8004322:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004326:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1da      	bne.n	80042e4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3308      	adds	r3, #8
 8004334:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800433e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004340:	f023 0301 	bic.w	r3, r3, #1
 8004344:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3308      	adds	r3, #8
 800434e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004352:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004356:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004358:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800435a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800435e:	e841 2300 	strex	r3, r2, [r1]
 8004362:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004364:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1e1      	bne.n	800432e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3308      	adds	r3, #8
 8004370:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800437a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800437c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004380:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3308      	adds	r3, #8
 800438a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800438e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004390:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004394:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800439c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e3      	bne.n	800436a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2220      	movs	r2, #32
 80043a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043be:	f023 0310 	bic.w	r3, r3, #16
 80043c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80043d2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043d8:	e841 2300 	strex	r3, r2, [r1]
 80043dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e4      	bne.n	80043ae <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fd fcdc 	bl	8001da6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	b29b      	uxth	r3, r3
 8004400:	4619      	mov	r1, r3
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f8ca 	bl	800459c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004408:	e0b5      	b.n	8004576 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004416:	b29b      	uxth	r3, r3
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 80a7 	beq.w	800457a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800442c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 80a2 	beq.w	800457a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443e:	e853 3f00 	ldrex	r3, [r3]
 8004442:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004446:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800444a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004458:	647b      	str	r3, [r7, #68]	; 0x44
 800445a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800445e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004460:	e841 2300 	strex	r3, r2, [r1]
 8004464:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e4      	bne.n	8004436 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3308      	adds	r3, #8
 8004472:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	e853 3f00 	ldrex	r3, [r3]
 800447a:	623b      	str	r3, [r7, #32]
   return(result);
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	f023 0301 	bic.w	r3, r3, #1
 8004482:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3308      	adds	r3, #8
 800448c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004490:	633a      	str	r2, [r7, #48]	; 0x30
 8004492:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004494:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004498:	e841 2300 	strex	r3, r2, [r1]
 800449c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800449e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e3      	bne.n	800446c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0310 	bic.w	r3, r3, #16
 80044ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044d8:	61fb      	str	r3, [r7, #28]
 80044da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	69b9      	ldr	r1, [r7, #24]
 80044de:	69fa      	ldr	r2, [r7, #28]
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	617b      	str	r3, [r7, #20]
   return(result);
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e4      	bne.n	80044b6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044f0:	4619      	mov	r1, r3
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f852 	bl	800459c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044f8:	e03f      	b.n	800457a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80044fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00e      	beq.n	8004524 <HAL_UART_IRQHandler+0x560>
 8004506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800450a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800451a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 ffae 	bl	800547e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004522:	e02d      	b.n	8004580 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00e      	beq.n	800454e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004538:	2b00      	cmp	r3, #0
 800453a:	d008      	beq.n	800454e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01c      	beq.n	800457e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	4798      	blx	r3
    }
    return;
 800454c:	e017      	b.n	800457e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800454e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	d012      	beq.n	8004580 <HAL_UART_IRQHandler+0x5bc>
 800455a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800455e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00c      	beq.n	8004580 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fdff 	bl	800516a <UART_EndTransmit_IT>
    return;
 800456c:	e008      	b.n	8004580 <HAL_UART_IRQHandler+0x5bc>
      return;
 800456e:	bf00      	nop
 8004570:	e006      	b.n	8004580 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004572:	bf00      	nop
 8004574:	e004      	b.n	8004580 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004576:	bf00      	nop
 8004578:	e002      	b.n	8004580 <HAL_UART_IRQHandler+0x5bc>
      return;
 800457a:	bf00      	nop
 800457c:	e000      	b.n	8004580 <HAL_UART_IRQHandler+0x5bc>
    return;
 800457e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004580:	37e8      	adds	r7, #232	; 0xe8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop

08004588 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045b8:	b08a      	sub	sp, #40	; 0x28
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	431a      	orrs	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	4313      	orrs	r3, r2
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	4bb4      	ldr	r3, [pc, #720]	; (80048b4 <UART_SetConfig+0x300>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	6812      	ldr	r2, [r2, #0]
 80045ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045ec:	430b      	orrs	r3, r1
 80045ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4aa9      	ldr	r2, [pc, #676]	; (80048b8 <UART_SetConfig+0x304>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d004      	beq.n	8004620 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461c:	4313      	orrs	r3, r2
 800461e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004630:	430a      	orrs	r2, r1
 8004632:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4aa0      	ldr	r2, [pc, #640]	; (80048bc <UART_SetConfig+0x308>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d126      	bne.n	800468c <UART_SetConfig+0xd8>
 800463e:	4ba0      	ldr	r3, [pc, #640]	; (80048c0 <UART_SetConfig+0x30c>)
 8004640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	2b03      	cmp	r3, #3
 800464a:	d81b      	bhi.n	8004684 <UART_SetConfig+0xd0>
 800464c:	a201      	add	r2, pc, #4	; (adr r2, 8004654 <UART_SetConfig+0xa0>)
 800464e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004652:	bf00      	nop
 8004654:	08004665 	.word	0x08004665
 8004658:	08004675 	.word	0x08004675
 800465c:	0800466d 	.word	0x0800466d
 8004660:	0800467d 	.word	0x0800467d
 8004664:	2301      	movs	r3, #1
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466a:	e080      	b.n	800476e <UART_SetConfig+0x1ba>
 800466c:	2302      	movs	r3, #2
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004672:	e07c      	b.n	800476e <UART_SetConfig+0x1ba>
 8004674:	2304      	movs	r3, #4
 8004676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467a:	e078      	b.n	800476e <UART_SetConfig+0x1ba>
 800467c:	2308      	movs	r3, #8
 800467e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004682:	e074      	b.n	800476e <UART_SetConfig+0x1ba>
 8004684:	2310      	movs	r3, #16
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468a:	e070      	b.n	800476e <UART_SetConfig+0x1ba>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a8c      	ldr	r2, [pc, #560]	; (80048c4 <UART_SetConfig+0x310>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d138      	bne.n	8004708 <UART_SetConfig+0x154>
 8004696:	4b8a      	ldr	r3, [pc, #552]	; (80048c0 <UART_SetConfig+0x30c>)
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469c:	f003 030c 	and.w	r3, r3, #12
 80046a0:	2b0c      	cmp	r3, #12
 80046a2:	d82d      	bhi.n	8004700 <UART_SetConfig+0x14c>
 80046a4:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <UART_SetConfig+0xf8>)
 80046a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046aa:	bf00      	nop
 80046ac:	080046e1 	.word	0x080046e1
 80046b0:	08004701 	.word	0x08004701
 80046b4:	08004701 	.word	0x08004701
 80046b8:	08004701 	.word	0x08004701
 80046bc:	080046f1 	.word	0x080046f1
 80046c0:	08004701 	.word	0x08004701
 80046c4:	08004701 	.word	0x08004701
 80046c8:	08004701 	.word	0x08004701
 80046cc:	080046e9 	.word	0x080046e9
 80046d0:	08004701 	.word	0x08004701
 80046d4:	08004701 	.word	0x08004701
 80046d8:	08004701 	.word	0x08004701
 80046dc:	080046f9 	.word	0x080046f9
 80046e0:	2300      	movs	r3, #0
 80046e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e6:	e042      	b.n	800476e <UART_SetConfig+0x1ba>
 80046e8:	2302      	movs	r3, #2
 80046ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ee:	e03e      	b.n	800476e <UART_SetConfig+0x1ba>
 80046f0:	2304      	movs	r3, #4
 80046f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f6:	e03a      	b.n	800476e <UART_SetConfig+0x1ba>
 80046f8:	2308      	movs	r3, #8
 80046fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fe:	e036      	b.n	800476e <UART_SetConfig+0x1ba>
 8004700:	2310      	movs	r3, #16
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004706:	e032      	b.n	800476e <UART_SetConfig+0x1ba>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a6a      	ldr	r2, [pc, #424]	; (80048b8 <UART_SetConfig+0x304>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d12a      	bne.n	8004768 <UART_SetConfig+0x1b4>
 8004712:	4b6b      	ldr	r3, [pc, #428]	; (80048c0 <UART_SetConfig+0x30c>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004718:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800471c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004720:	d01a      	beq.n	8004758 <UART_SetConfig+0x1a4>
 8004722:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004726:	d81b      	bhi.n	8004760 <UART_SetConfig+0x1ac>
 8004728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800472c:	d00c      	beq.n	8004748 <UART_SetConfig+0x194>
 800472e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004732:	d815      	bhi.n	8004760 <UART_SetConfig+0x1ac>
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <UART_SetConfig+0x18c>
 8004738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473c:	d008      	beq.n	8004750 <UART_SetConfig+0x19c>
 800473e:	e00f      	b.n	8004760 <UART_SetConfig+0x1ac>
 8004740:	2300      	movs	r3, #0
 8004742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004746:	e012      	b.n	800476e <UART_SetConfig+0x1ba>
 8004748:	2302      	movs	r3, #2
 800474a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800474e:	e00e      	b.n	800476e <UART_SetConfig+0x1ba>
 8004750:	2304      	movs	r3, #4
 8004752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004756:	e00a      	b.n	800476e <UART_SetConfig+0x1ba>
 8004758:	2308      	movs	r3, #8
 800475a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800475e:	e006      	b.n	800476e <UART_SetConfig+0x1ba>
 8004760:	2310      	movs	r3, #16
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004766:	e002      	b.n	800476e <UART_SetConfig+0x1ba>
 8004768:	2310      	movs	r3, #16
 800476a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a51      	ldr	r2, [pc, #324]	; (80048b8 <UART_SetConfig+0x304>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d17a      	bne.n	800486e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004778:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800477c:	2b08      	cmp	r3, #8
 800477e:	d824      	bhi.n	80047ca <UART_SetConfig+0x216>
 8004780:	a201      	add	r2, pc, #4	; (adr r2, 8004788 <UART_SetConfig+0x1d4>)
 8004782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004786:	bf00      	nop
 8004788:	080047ad 	.word	0x080047ad
 800478c:	080047cb 	.word	0x080047cb
 8004790:	080047b5 	.word	0x080047b5
 8004794:	080047cb 	.word	0x080047cb
 8004798:	080047bb 	.word	0x080047bb
 800479c:	080047cb 	.word	0x080047cb
 80047a0:	080047cb 	.word	0x080047cb
 80047a4:	080047cb 	.word	0x080047cb
 80047a8:	080047c3 	.word	0x080047c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047ac:	f7fe fb36 	bl	8002e1c <HAL_RCC_GetPCLK1Freq>
 80047b0:	61f8      	str	r0, [r7, #28]
        break;
 80047b2:	e010      	b.n	80047d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b4:	4b44      	ldr	r3, [pc, #272]	; (80048c8 <UART_SetConfig+0x314>)
 80047b6:	61fb      	str	r3, [r7, #28]
        break;
 80047b8:	e00d      	b.n	80047d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ba:	f7fe fa97 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 80047be:	61f8      	str	r0, [r7, #28]
        break;
 80047c0:	e009      	b.n	80047d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047c6:	61fb      	str	r3, [r7, #28]
        break;
 80047c8:	e005      	b.n	80047d6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 8107 	beq.w	80049ec <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	4413      	add	r3, r2
 80047e8:	69fa      	ldr	r2, [r7, #28]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d305      	bcc.n	80047fa <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d903      	bls.n	8004802 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004800:	e0f4      	b.n	80049ec <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	2200      	movs	r2, #0
 8004806:	461c      	mov	r4, r3
 8004808:	4615      	mov	r5, r2
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	022b      	lsls	r3, r5, #8
 8004814:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004818:	0222      	lsls	r2, r4, #8
 800481a:	68f9      	ldr	r1, [r7, #12]
 800481c:	6849      	ldr	r1, [r1, #4]
 800481e:	0849      	lsrs	r1, r1, #1
 8004820:	2000      	movs	r0, #0
 8004822:	4688      	mov	r8, r1
 8004824:	4681      	mov	r9, r0
 8004826:	eb12 0a08 	adds.w	sl, r2, r8
 800482a:	eb43 0b09 	adc.w	fp, r3, r9
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	603b      	str	r3, [r7, #0]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800483c:	4650      	mov	r0, sl
 800483e:	4659      	mov	r1, fp
 8004840:	f7fb fd1e 	bl	8000280 <__aeabi_uldivmod>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4613      	mov	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004852:	d308      	bcc.n	8004866 <UART_SetConfig+0x2b2>
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800485a:	d204      	bcs.n	8004866 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	60da      	str	r2, [r3, #12]
 8004864:	e0c2      	b.n	80049ec <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800486c:	e0be      	b.n	80049ec <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004876:	d16a      	bne.n	800494e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004878:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800487c:	2b08      	cmp	r3, #8
 800487e:	d834      	bhi.n	80048ea <UART_SetConfig+0x336>
 8004880:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <UART_SetConfig+0x2d4>)
 8004882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004886:	bf00      	nop
 8004888:	080048ad 	.word	0x080048ad
 800488c:	080048cd 	.word	0x080048cd
 8004890:	080048d5 	.word	0x080048d5
 8004894:	080048eb 	.word	0x080048eb
 8004898:	080048db 	.word	0x080048db
 800489c:	080048eb 	.word	0x080048eb
 80048a0:	080048eb 	.word	0x080048eb
 80048a4:	080048eb 	.word	0x080048eb
 80048a8:	080048e3 	.word	0x080048e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048ac:	f7fe fab6 	bl	8002e1c <HAL_RCC_GetPCLK1Freq>
 80048b0:	61f8      	str	r0, [r7, #28]
        break;
 80048b2:	e020      	b.n	80048f6 <UART_SetConfig+0x342>
 80048b4:	efff69f3 	.word	0xefff69f3
 80048b8:	40008000 	.word	0x40008000
 80048bc:	40013800 	.word	0x40013800
 80048c0:	40021000 	.word	0x40021000
 80048c4:	40004400 	.word	0x40004400
 80048c8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048cc:	f7fe fabc 	bl	8002e48 <HAL_RCC_GetPCLK2Freq>
 80048d0:	61f8      	str	r0, [r7, #28]
        break;
 80048d2:	e010      	b.n	80048f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048d4:	4b4c      	ldr	r3, [pc, #304]	; (8004a08 <UART_SetConfig+0x454>)
 80048d6:	61fb      	str	r3, [r7, #28]
        break;
 80048d8:	e00d      	b.n	80048f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048da:	f7fe fa07 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 80048de:	61f8      	str	r0, [r7, #28]
        break;
 80048e0:	e009      	b.n	80048f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048e6:	61fb      	str	r3, [r7, #28]
        break;
 80048e8:	e005      	b.n	80048f6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d077      	beq.n	80049ec <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	005a      	lsls	r2, r3, #1
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	085b      	lsrs	r3, r3, #1
 8004906:	441a      	add	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004910:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	2b0f      	cmp	r3, #15
 8004916:	d916      	bls.n	8004946 <UART_SetConfig+0x392>
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800491e:	d212      	bcs.n	8004946 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	b29b      	uxth	r3, r3
 8004924:	f023 030f 	bic.w	r3, r3, #15
 8004928:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	085b      	lsrs	r3, r3, #1
 800492e:	b29b      	uxth	r3, r3
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	b29a      	uxth	r2, r3
 8004936:	8afb      	ldrh	r3, [r7, #22]
 8004938:	4313      	orrs	r3, r2
 800493a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	8afa      	ldrh	r2, [r7, #22]
 8004942:	60da      	str	r2, [r3, #12]
 8004944:	e052      	b.n	80049ec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800494c:	e04e      	b.n	80049ec <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800494e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004952:	2b08      	cmp	r3, #8
 8004954:	d827      	bhi.n	80049a6 <UART_SetConfig+0x3f2>
 8004956:	a201      	add	r2, pc, #4	; (adr r2, 800495c <UART_SetConfig+0x3a8>)
 8004958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495c:	08004981 	.word	0x08004981
 8004960:	08004989 	.word	0x08004989
 8004964:	08004991 	.word	0x08004991
 8004968:	080049a7 	.word	0x080049a7
 800496c:	08004997 	.word	0x08004997
 8004970:	080049a7 	.word	0x080049a7
 8004974:	080049a7 	.word	0x080049a7
 8004978:	080049a7 	.word	0x080049a7
 800497c:	0800499f 	.word	0x0800499f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004980:	f7fe fa4c 	bl	8002e1c <HAL_RCC_GetPCLK1Freq>
 8004984:	61f8      	str	r0, [r7, #28]
        break;
 8004986:	e014      	b.n	80049b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004988:	f7fe fa5e 	bl	8002e48 <HAL_RCC_GetPCLK2Freq>
 800498c:	61f8      	str	r0, [r7, #28]
        break;
 800498e:	e010      	b.n	80049b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004990:	4b1d      	ldr	r3, [pc, #116]	; (8004a08 <UART_SetConfig+0x454>)
 8004992:	61fb      	str	r3, [r7, #28]
        break;
 8004994:	e00d      	b.n	80049b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004996:	f7fe f9a9 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 800499a:	61f8      	str	r0, [r7, #28]
        break;
 800499c:	e009      	b.n	80049b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800499e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049a2:	61fb      	str	r3, [r7, #28]
        break;
 80049a4:	e005      	b.n	80049b2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049b0:	bf00      	nop
    }

    if (pclk != 0U)
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d019      	beq.n	80049ec <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	085a      	lsrs	r2, r3, #1
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	441a      	add	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	2b0f      	cmp	r3, #15
 80049d0:	d909      	bls.n	80049e6 <UART_SetConfig+0x432>
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d8:	d205      	bcs.n	80049e6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	60da      	str	r2, [r3, #12]
 80049e4:	e002      	b.n	80049ec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3728      	adds	r7, #40	; 0x28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a06:	bf00      	nop
 8004a08:	00f42400 	.word	0x00f42400

08004a0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	f003 0310 	and.w	r3, r3, #16
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01a      	beq.n	8004b22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b0a:	d10a      	bne.n	8004b22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	605a      	str	r2, [r3, #4]
  }
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b60:	f7fc ffe0 	bl	8001b24 <HAL_GetTick>
 8004b64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d10e      	bne.n	8004b92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f82d 	bl	8004be2 <UART_WaitOnFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e023      	b.n	8004bda <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d10e      	bne.n	8004bbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ba0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f817 	bl	8004be2 <UART_WaitOnFlagUntilTimeout>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e00d      	b.n	8004bda <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b09c      	sub	sp, #112	; 0x70
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	603b      	str	r3, [r7, #0]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf2:	e0a5      	b.n	8004d40 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfa:	f000 80a1 	beq.w	8004d40 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bfe:	f7fc ff91 	bl	8001b24 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d302      	bcc.n	8004c14 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d13e      	bne.n	8004c92 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c28:	667b      	str	r3, [r7, #100]	; 0x64
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c34:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c3a:	e841 2300 	strex	r3, r2, [r1]
 8004c3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1e6      	bne.n	8004c14 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c50:	e853 3f00 	ldrex	r3, [r3]
 8004c54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	f023 0301 	bic.w	r3, r3, #1
 8004c5c:	663b      	str	r3, [r7, #96]	; 0x60
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3308      	adds	r3, #8
 8004c64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c66:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e5      	bne.n	8004c46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e067      	b.n	8004d62 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d04f      	beq.n	8004d40 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cae:	d147      	bne.n	8004d40 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cb8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cda:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ce0:	e841 2300 	strex	r3, r2, [r1]
 8004ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e6      	bne.n	8004cba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	e853 3f00 	ldrex	r3, [r3]
 8004cfa:	613b      	str	r3, [r7, #16]
   return(result);
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f023 0301 	bic.w	r3, r3, #1
 8004d02:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3308      	adds	r3, #8
 8004d0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d0c:	623a      	str	r2, [r7, #32]
 8004d0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d10:	69f9      	ldr	r1, [r7, #28]
 8004d12:	6a3a      	ldr	r2, [r7, #32]
 8004d14:	e841 2300 	strex	r3, r2, [r1]
 8004d18:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1e5      	bne.n	8004cec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2220      	movs	r2, #32
 8004d24:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e010      	b.n	8004d62 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69da      	ldr	r2, [r3, #28]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	461a      	mov	r2, r3
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	f43f af4a 	beq.w	8004bf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3770      	adds	r7, #112	; 0x70
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b097      	sub	sp, #92	; 0x5c
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	4613      	mov	r3, r2
 8004d78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	88fa      	ldrh	r2, [r7, #6]
 8004d84:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	88fa      	ldrh	r2, [r7, #6]
 8004d8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d9e:	d10e      	bne.n	8004dbe <UART_Start_Receive_IT+0x52>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d105      	bne.n	8004db4 <UART_Start_Receive_IT+0x48>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004dae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004db2:	e02d      	b.n	8004e10 <UART_Start_Receive_IT+0xa4>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	22ff      	movs	r2, #255	; 0xff
 8004db8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dbc:	e028      	b.n	8004e10 <UART_Start_Receive_IT+0xa4>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10d      	bne.n	8004de2 <UART_Start_Receive_IT+0x76>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d104      	bne.n	8004dd8 <UART_Start_Receive_IT+0x6c>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	22ff      	movs	r2, #255	; 0xff
 8004dd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dd6:	e01b      	b.n	8004e10 <UART_Start_Receive_IT+0xa4>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	227f      	movs	r2, #127	; 0x7f
 8004ddc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004de0:	e016      	b.n	8004e10 <UART_Start_Receive_IT+0xa4>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dea:	d10d      	bne.n	8004e08 <UART_Start_Receive_IT+0x9c>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d104      	bne.n	8004dfe <UART_Start_Receive_IT+0x92>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	227f      	movs	r2, #127	; 0x7f
 8004df8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dfc:	e008      	b.n	8004e10 <UART_Start_Receive_IT+0xa4>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	223f      	movs	r2, #63	; 0x3f
 8004e02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e06:	e003      	b.n	8004e10 <UART_Start_Receive_IT+0xa4>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2222      	movs	r2, #34	; 0x22
 8004e1c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3308      	adds	r3, #8
 8004e24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e30:	f043 0301 	orr.w	r3, r3, #1
 8004e34:	657b      	str	r3, [r7, #84]	; 0x54
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3308      	adds	r3, #8
 8004e3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e5      	bne.n	8004e1e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5a:	d107      	bne.n	8004e6c <UART_Start_Receive_IT+0x100>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d103      	bne.n	8004e6c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4a24      	ldr	r2, [pc, #144]	; (8004ef8 <UART_Start_Receive_IT+0x18c>)
 8004e68:	665a      	str	r2, [r3, #100]	; 0x64
 8004e6a:	e002      	b.n	8004e72 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4a23      	ldr	r2, [pc, #140]	; (8004efc <UART_Start_Receive_IT+0x190>)
 8004e70:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d019      	beq.n	8004eb6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	e853 3f00 	ldrex	r3, [r3]
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ea8:	e841 2300 	strex	r3, r2, [r1]
 8004eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e6      	bne.n	8004e82 <UART_Start_Receive_IT+0x116>
 8004eb4:	e018      	b.n	8004ee8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f043 0320 	orr.w	r3, r3, #32
 8004eca:	653b      	str	r3, [r7, #80]	; 0x50
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed4:	623b      	str	r3, [r7, #32]
 8004ed6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	69f9      	ldr	r1, [r7, #28]
 8004eda:	6a3a      	ldr	r2, [r7, #32]
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e6      	bne.n	8004eb6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	375c      	adds	r7, #92	; 0x5c
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	0800531f 	.word	0x0800531f
 8004efc:	080051bf 	.word	0x080051bf

08004f00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b095      	sub	sp, #84	; 0x54
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f26:	643b      	str	r3, [r7, #64]	; 0x40
 8004f28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e6      	bne.n	8004f08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3308      	adds	r3, #8
 8004f40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	f023 0301 	bic.w	r3, r3, #1
 8004f50:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3308      	adds	r3, #8
 8004f58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e5      	bne.n	8004f3a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d118      	bne.n	8004fa8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	e853 3f00 	ldrex	r3, [r3]
 8004f82:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f023 0310 	bic.w	r3, r3, #16
 8004f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f94:	61bb      	str	r3, [r7, #24]
 8004f96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f98:	6979      	ldr	r1, [r7, #20]
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	e841 2300 	strex	r3, r2, [r1]
 8004fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e6      	bne.n	8004f76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004fba:	bf00      	nop
 8004fbc:	3754      	adds	r7, #84	; 0x54
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b084      	sub	sp, #16
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f7ff facf 	bl	8004588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fea:	bf00      	nop
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b08f      	sub	sp, #60	; 0x3c
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ffe:	2b21      	cmp	r3, #33	; 0x21
 8005000:	d14d      	bne.n	800509e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d132      	bne.n	8005074 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	e853 3f00 	ldrex	r3, [r3]
 800501a:	61fb      	str	r3, [r7, #28]
   return(result);
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005022:	637b      	str	r3, [r7, #52]	; 0x34
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	461a      	mov	r2, r3
 800502a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800502c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800502e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005034:	e841 2300 	strex	r3, r2, [r1]
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1e6      	bne.n	800500e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	e853 3f00 	ldrex	r3, [r3]
 800504c:	60bb      	str	r3, [r7, #8]
   return(result);
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005054:	633b      	str	r3, [r7, #48]	; 0x30
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505e:	61bb      	str	r3, [r7, #24]
 8005060:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005062:	6979      	ldr	r1, [r7, #20]
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	e841 2300 	strex	r3, r2, [r1]
 800506a:	613b      	str	r3, [r7, #16]
   return(result);
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1e6      	bne.n	8005040 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005072:	e014      	b.n	800509e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005078:	781a      	ldrb	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	b292      	uxth	r2, r2
 8005080:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005092:	b29b      	uxth	r3, r3
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800509e:	bf00      	nop
 80050a0:	373c      	adds	r7, #60	; 0x3c
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b091      	sub	sp, #68	; 0x44
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050b6:	2b21      	cmp	r3, #33	; 0x21
 80050b8:	d151      	bne.n	800515e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d132      	bne.n	800512c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	e853 3f00 	ldrex	r3, [r3]
 80050d2:	623b      	str	r3, [r7, #32]
   return(result);
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050da:	63bb      	str	r3, [r7, #56]	; 0x38
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	461a      	mov	r2, r3
 80050e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e4:	633b      	str	r3, [r7, #48]	; 0x30
 80050e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ec:	e841 2300 	strex	r3, r2, [r1]
 80050f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1e6      	bne.n	80050c6 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	60fb      	str	r3, [r7, #12]
   return(result);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800510c:	637b      	str	r3, [r7, #52]	; 0x34
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005116:	61fb      	str	r3, [r7, #28]
 8005118:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511a:	69b9      	ldr	r1, [r7, #24]
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	617b      	str	r3, [r7, #20]
   return(result);
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1e6      	bne.n	80050f8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800512a:	e018      	b.n	800515e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005130:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005134:	881a      	ldrh	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800513e:	b292      	uxth	r2, r2
 8005140:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005146:	1c9a      	adds	r2, r3, #2
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005152:	b29b      	uxth	r3, r3
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800515e:	bf00      	nop
 8005160:	3744      	adds	r7, #68	; 0x44
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b088      	sub	sp, #32
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	e853 3f00 	ldrex	r3, [r3]
 800517e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005186:	61fb      	str	r3, [r7, #28]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	461a      	mov	r2, r3
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	61bb      	str	r3, [r7, #24]
 8005192:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005194:	6979      	ldr	r1, [r7, #20]
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	e841 2300 	strex	r3, r2, [r1]
 800519c:	613b      	str	r3, [r7, #16]
   return(result);
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1e6      	bne.n	8005172 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7fb f9e7 	bl	8000584 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051b6:	bf00      	nop
 80051b8:	3720      	adds	r7, #32
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b096      	sub	sp, #88	; 0x58
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051d4:	2b22      	cmp	r3, #34	; 0x22
 80051d6:	f040 8094 	bne.w	8005302 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80051e0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051e4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80051e8:	b2d9      	uxtb	r1, r3
 80051ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f4:	400a      	ands	r2, r1
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800521c:	b29b      	uxth	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d179      	bne.n	8005316 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005232:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005236:	653b      	str	r3, [r7, #80]	; 0x50
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	461a      	mov	r2, r3
 800523e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005240:	647b      	str	r3, [r7, #68]	; 0x44
 8005242:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005246:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005248:	e841 2300 	strex	r3, r2, [r1]
 800524c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800524e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e6      	bne.n	8005222 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3308      	adds	r3, #8
 800525a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	e853 3f00 	ldrex	r3, [r3]
 8005262:	623b      	str	r3, [r7, #32]
   return(result);
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	f023 0301 	bic.w	r3, r3, #1
 800526a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3308      	adds	r3, #8
 8005272:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005274:	633a      	str	r2, [r7, #48]	; 0x30
 8005276:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005278:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800527a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800527c:	e841 2300 	strex	r3, r2, [r1]
 8005280:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1e5      	bne.n	8005254 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2220      	movs	r2, #32
 800528c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005298:	2b01      	cmp	r3, #1
 800529a:	d12e      	bne.n	80052fa <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0310 	bic.w	r3, r3, #16
 80052b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	461a      	mov	r2, r3
 80052be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052c0:	61fb      	str	r3, [r7, #28]
 80052c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	69b9      	ldr	r1, [r7, #24]
 80052c6:	69fa      	ldr	r2, [r7, #28]
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	617b      	str	r3, [r7, #20]
   return(result);
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e6      	bne.n	80052a2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	2b10      	cmp	r3, #16
 80052e0:	d103      	bne.n	80052ea <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2210      	movs	r2, #16
 80052e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052f0:	4619      	mov	r1, r3
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7ff f952 	bl	800459c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052f8:	e00d      	b.n	8005316 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fb f94c 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 8005300:	e009      	b.n	8005316 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	8b1b      	ldrh	r3, [r3, #24]
 8005308:	b29a      	uxth	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0208 	orr.w	r2, r2, #8
 8005312:	b292      	uxth	r2, r2
 8005314:	831a      	strh	r2, [r3, #24]
}
 8005316:	bf00      	nop
 8005318:	3758      	adds	r7, #88	; 0x58
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b096      	sub	sp, #88	; 0x58
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800532c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005334:	2b22      	cmp	r3, #34	; 0x22
 8005336:	f040 8094 	bne.w	8005462 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005340:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005348:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800534a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800534e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005352:	4013      	ands	r3, r2
 8005354:	b29a      	uxth	r2, r3
 8005356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005358:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535e:	1c9a      	adds	r2, r3, #2
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800537c:	b29b      	uxth	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d179      	bne.n	8005476 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538a:	e853 3f00 	ldrex	r3, [r3]
 800538e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	461a      	mov	r2, r3
 800539e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a0:	643b      	str	r3, [r7, #64]	; 0x40
 80053a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053a8:	e841 2300 	strex	r3, r2, [r1]
 80053ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1e6      	bne.n	8005382 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3308      	adds	r3, #8
 80053ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	e853 3f00 	ldrex	r3, [r3]
 80053c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	f023 0301 	bic.w	r3, r3, #1
 80053ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	3308      	adds	r3, #8
 80053d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053dc:	e841 2300 	strex	r3, r2, [r1]
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1e5      	bne.n	80053b4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2220      	movs	r2, #32
 80053ec:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d12e      	bne.n	800545a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f023 0310 	bic.w	r3, r3, #16
 8005416:	647b      	str	r3, [r7, #68]	; 0x44
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005420:	61bb      	str	r3, [r7, #24]
 8005422:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005424:	6979      	ldr	r1, [r7, #20]
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	e841 2300 	strex	r3, r2, [r1]
 800542c:	613b      	str	r3, [r7, #16]
   return(result);
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e6      	bne.n	8005402 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f003 0310 	and.w	r3, r3, #16
 800543e:	2b10      	cmp	r3, #16
 8005440:	d103      	bne.n	800544a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2210      	movs	r2, #16
 8005448:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005450:	4619      	mov	r1, r3
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7ff f8a2 	bl	800459c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005458:	e00d      	b.n	8005476 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7fb f89c 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 8005460:	e009      	b.n	8005476 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	8b1b      	ldrh	r3, [r3, #24]
 8005468:	b29a      	uxth	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0208 	orr.w	r2, r2, #8
 8005472:	b292      	uxth	r2, r2
 8005474:	831a      	strh	r2, [r3, #24]
}
 8005476:	bf00      	nop
 8005478:	3758      	adds	r7, #88	; 0x58
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <atoi>:
 8005492:	220a      	movs	r2, #10
 8005494:	2100      	movs	r1, #0
 8005496:	f000 b983 	b.w	80057a0 <strtol>
	...

0800549c <__errno>:
 800549c:	4b01      	ldr	r3, [pc, #4]	; (80054a4 <__errno+0x8>)
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	200000d8 	.word	0x200000d8

080054a8 <__libc_init_array>:
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	4d0d      	ldr	r5, [pc, #52]	; (80054e0 <__libc_init_array+0x38>)
 80054ac:	4c0d      	ldr	r4, [pc, #52]	; (80054e4 <__libc_init_array+0x3c>)
 80054ae:	1b64      	subs	r4, r4, r5
 80054b0:	10a4      	asrs	r4, r4, #2
 80054b2:	2600      	movs	r6, #0
 80054b4:	42a6      	cmp	r6, r4
 80054b6:	d109      	bne.n	80054cc <__libc_init_array+0x24>
 80054b8:	4d0b      	ldr	r5, [pc, #44]	; (80054e8 <__libc_init_array+0x40>)
 80054ba:	4c0c      	ldr	r4, [pc, #48]	; (80054ec <__libc_init_array+0x44>)
 80054bc:	f001 fb72 	bl	8006ba4 <_init>
 80054c0:	1b64      	subs	r4, r4, r5
 80054c2:	10a4      	asrs	r4, r4, #2
 80054c4:	2600      	movs	r6, #0
 80054c6:	42a6      	cmp	r6, r4
 80054c8:	d105      	bne.n	80054d6 <__libc_init_array+0x2e>
 80054ca:	bd70      	pop	{r4, r5, r6, pc}
 80054cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d0:	4798      	blx	r3
 80054d2:	3601      	adds	r6, #1
 80054d4:	e7ee      	b.n	80054b4 <__libc_init_array+0xc>
 80054d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054da:	4798      	blx	r3
 80054dc:	3601      	adds	r6, #1
 80054de:	e7f2      	b.n	80054c6 <__libc_init_array+0x1e>
 80054e0:	0800721c 	.word	0x0800721c
 80054e4:	0800721c 	.word	0x0800721c
 80054e8:	0800721c 	.word	0x0800721c
 80054ec:	08007220 	.word	0x08007220

080054f0 <__itoa>:
 80054f0:	1e93      	subs	r3, r2, #2
 80054f2:	2b22      	cmp	r3, #34	; 0x22
 80054f4:	b510      	push	{r4, lr}
 80054f6:	460c      	mov	r4, r1
 80054f8:	d904      	bls.n	8005504 <__itoa+0x14>
 80054fa:	2300      	movs	r3, #0
 80054fc:	700b      	strb	r3, [r1, #0]
 80054fe:	461c      	mov	r4, r3
 8005500:	4620      	mov	r0, r4
 8005502:	bd10      	pop	{r4, pc}
 8005504:	2a0a      	cmp	r2, #10
 8005506:	d109      	bne.n	800551c <__itoa+0x2c>
 8005508:	2800      	cmp	r0, #0
 800550a:	da07      	bge.n	800551c <__itoa+0x2c>
 800550c:	232d      	movs	r3, #45	; 0x2d
 800550e:	700b      	strb	r3, [r1, #0]
 8005510:	4240      	negs	r0, r0
 8005512:	2101      	movs	r1, #1
 8005514:	4421      	add	r1, r4
 8005516:	f000 f94d 	bl	80057b4 <__utoa>
 800551a:	e7f1      	b.n	8005500 <__itoa+0x10>
 800551c:	2100      	movs	r1, #0
 800551e:	e7f9      	b.n	8005514 <__itoa+0x24>

08005520 <itoa>:
 8005520:	f7ff bfe6 	b.w	80054f0 <__itoa>

08005524 <memset>:
 8005524:	4402      	add	r2, r0
 8005526:	4603      	mov	r3, r0
 8005528:	4293      	cmp	r3, r2
 800552a:	d100      	bne.n	800552e <memset+0xa>
 800552c:	4770      	bx	lr
 800552e:	f803 1b01 	strb.w	r1, [r3], #1
 8005532:	e7f9      	b.n	8005528 <memset+0x4>

08005534 <siprintf>:
 8005534:	b40e      	push	{r1, r2, r3}
 8005536:	b500      	push	{lr}
 8005538:	b09c      	sub	sp, #112	; 0x70
 800553a:	ab1d      	add	r3, sp, #116	; 0x74
 800553c:	9002      	str	r0, [sp, #8]
 800553e:	9006      	str	r0, [sp, #24]
 8005540:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005544:	4809      	ldr	r0, [pc, #36]	; (800556c <siprintf+0x38>)
 8005546:	9107      	str	r1, [sp, #28]
 8005548:	9104      	str	r1, [sp, #16]
 800554a:	4909      	ldr	r1, [pc, #36]	; (8005570 <siprintf+0x3c>)
 800554c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005550:	9105      	str	r1, [sp, #20]
 8005552:	6800      	ldr	r0, [r0, #0]
 8005554:	9301      	str	r3, [sp, #4]
 8005556:	a902      	add	r1, sp, #8
 8005558:	f000 fae2 	bl	8005b20 <_svfiprintf_r>
 800555c:	9b02      	ldr	r3, [sp, #8]
 800555e:	2200      	movs	r2, #0
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	b01c      	add	sp, #112	; 0x70
 8005564:	f85d eb04 	ldr.w	lr, [sp], #4
 8005568:	b003      	add	sp, #12
 800556a:	4770      	bx	lr
 800556c:	200000d8 	.word	0x200000d8
 8005570:	ffff0208 	.word	0xffff0208

08005574 <strcat>:
 8005574:	b510      	push	{r4, lr}
 8005576:	4602      	mov	r2, r0
 8005578:	7814      	ldrb	r4, [r2, #0]
 800557a:	4613      	mov	r3, r2
 800557c:	3201      	adds	r2, #1
 800557e:	2c00      	cmp	r4, #0
 8005580:	d1fa      	bne.n	8005578 <strcat+0x4>
 8005582:	3b01      	subs	r3, #1
 8005584:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005588:	f803 2f01 	strb.w	r2, [r3, #1]!
 800558c:	2a00      	cmp	r2, #0
 800558e:	d1f9      	bne.n	8005584 <strcat+0x10>
 8005590:	bd10      	pop	{r4, pc}

08005592 <strncpy>:
 8005592:	b510      	push	{r4, lr}
 8005594:	3901      	subs	r1, #1
 8005596:	4603      	mov	r3, r0
 8005598:	b132      	cbz	r2, 80055a8 <strncpy+0x16>
 800559a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800559e:	f803 4b01 	strb.w	r4, [r3], #1
 80055a2:	3a01      	subs	r2, #1
 80055a4:	2c00      	cmp	r4, #0
 80055a6:	d1f7      	bne.n	8005598 <strncpy+0x6>
 80055a8:	441a      	add	r2, r3
 80055aa:	2100      	movs	r1, #0
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d100      	bne.n	80055b2 <strncpy+0x20>
 80055b0:	bd10      	pop	{r4, pc}
 80055b2:	f803 1b01 	strb.w	r1, [r3], #1
 80055b6:	e7f9      	b.n	80055ac <strncpy+0x1a>

080055b8 <strstr>:
 80055b8:	780a      	ldrb	r2, [r1, #0]
 80055ba:	b570      	push	{r4, r5, r6, lr}
 80055bc:	b96a      	cbnz	r2, 80055da <strstr+0x22>
 80055be:	bd70      	pop	{r4, r5, r6, pc}
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d109      	bne.n	80055d8 <strstr+0x20>
 80055c4:	460c      	mov	r4, r1
 80055c6:	4605      	mov	r5, r0
 80055c8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0f6      	beq.n	80055be <strstr+0x6>
 80055d0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80055d4:	429e      	cmp	r6, r3
 80055d6:	d0f7      	beq.n	80055c8 <strstr+0x10>
 80055d8:	3001      	adds	r0, #1
 80055da:	7803      	ldrb	r3, [r0, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1ef      	bne.n	80055c0 <strstr+0x8>
 80055e0:	4618      	mov	r0, r3
 80055e2:	e7ec      	b.n	80055be <strstr+0x6>

080055e4 <strtok>:
 80055e4:	4b16      	ldr	r3, [pc, #88]	; (8005640 <strtok+0x5c>)
 80055e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055e8:	681e      	ldr	r6, [r3, #0]
 80055ea:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80055ec:	4605      	mov	r5, r0
 80055ee:	b9fc      	cbnz	r4, 8005630 <strtok+0x4c>
 80055f0:	2050      	movs	r0, #80	; 0x50
 80055f2:	9101      	str	r1, [sp, #4]
 80055f4:	f000 f950 	bl	8005898 <malloc>
 80055f8:	9901      	ldr	r1, [sp, #4]
 80055fa:	65b0      	str	r0, [r6, #88]	; 0x58
 80055fc:	4602      	mov	r2, r0
 80055fe:	b920      	cbnz	r0, 800560a <strtok+0x26>
 8005600:	4b10      	ldr	r3, [pc, #64]	; (8005644 <strtok+0x60>)
 8005602:	4811      	ldr	r0, [pc, #68]	; (8005648 <strtok+0x64>)
 8005604:	2157      	movs	r1, #87	; 0x57
 8005606:	f000 f917 	bl	8005838 <__assert_func>
 800560a:	e9c0 4400 	strd	r4, r4, [r0]
 800560e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005612:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005616:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800561a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800561e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005622:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005626:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800562a:	6184      	str	r4, [r0, #24]
 800562c:	7704      	strb	r4, [r0, #28]
 800562e:	6244      	str	r4, [r0, #36]	; 0x24
 8005630:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8005632:	2301      	movs	r3, #1
 8005634:	4628      	mov	r0, r5
 8005636:	b002      	add	sp, #8
 8005638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800563c:	f000 b806 	b.w	800564c <__strtok_r>
 8005640:	200000d8 	.word	0x200000d8
 8005644:	08006fa8 	.word	0x08006fa8
 8005648:	08006fbf 	.word	0x08006fbf

0800564c <__strtok_r>:
 800564c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800564e:	b908      	cbnz	r0, 8005654 <__strtok_r+0x8>
 8005650:	6810      	ldr	r0, [r2, #0]
 8005652:	b188      	cbz	r0, 8005678 <__strtok_r+0x2c>
 8005654:	4604      	mov	r4, r0
 8005656:	4620      	mov	r0, r4
 8005658:	f814 5b01 	ldrb.w	r5, [r4], #1
 800565c:	460f      	mov	r7, r1
 800565e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005662:	b91e      	cbnz	r6, 800566c <__strtok_r+0x20>
 8005664:	b965      	cbnz	r5, 8005680 <__strtok_r+0x34>
 8005666:	6015      	str	r5, [r2, #0]
 8005668:	4628      	mov	r0, r5
 800566a:	e005      	b.n	8005678 <__strtok_r+0x2c>
 800566c:	42b5      	cmp	r5, r6
 800566e:	d1f6      	bne.n	800565e <__strtok_r+0x12>
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1f0      	bne.n	8005656 <__strtok_r+0xa>
 8005674:	6014      	str	r4, [r2, #0]
 8005676:	7003      	strb	r3, [r0, #0]
 8005678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800567a:	461c      	mov	r4, r3
 800567c:	e00c      	b.n	8005698 <__strtok_r+0x4c>
 800567e:	b915      	cbnz	r5, 8005686 <__strtok_r+0x3a>
 8005680:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005684:	460e      	mov	r6, r1
 8005686:	f816 5b01 	ldrb.w	r5, [r6], #1
 800568a:	42ab      	cmp	r3, r5
 800568c:	d1f7      	bne.n	800567e <__strtok_r+0x32>
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0f3      	beq.n	800567a <__strtok_r+0x2e>
 8005692:	2300      	movs	r3, #0
 8005694:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005698:	6014      	str	r4, [r2, #0]
 800569a:	e7ed      	b.n	8005678 <__strtok_r+0x2c>

0800569c <_strtol_l.constprop.0>:
 800569c:	2b01      	cmp	r3, #1
 800569e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056a2:	d001      	beq.n	80056a8 <_strtol_l.constprop.0+0xc>
 80056a4:	2b24      	cmp	r3, #36	; 0x24
 80056a6:	d906      	bls.n	80056b6 <_strtol_l.constprop.0+0x1a>
 80056a8:	f7ff fef8 	bl	800549c <__errno>
 80056ac:	2316      	movs	r3, #22
 80056ae:	6003      	str	r3, [r0, #0]
 80056b0:	2000      	movs	r0, #0
 80056b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800579c <_strtol_l.constprop.0+0x100>
 80056ba:	460d      	mov	r5, r1
 80056bc:	462e      	mov	r6, r5
 80056be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056c2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80056c6:	f017 0708 	ands.w	r7, r7, #8
 80056ca:	d1f7      	bne.n	80056bc <_strtol_l.constprop.0+0x20>
 80056cc:	2c2d      	cmp	r4, #45	; 0x2d
 80056ce:	d132      	bne.n	8005736 <_strtol_l.constprop.0+0x9a>
 80056d0:	782c      	ldrb	r4, [r5, #0]
 80056d2:	2701      	movs	r7, #1
 80056d4:	1cb5      	adds	r5, r6, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d05b      	beq.n	8005792 <_strtol_l.constprop.0+0xf6>
 80056da:	2b10      	cmp	r3, #16
 80056dc:	d109      	bne.n	80056f2 <_strtol_l.constprop.0+0x56>
 80056de:	2c30      	cmp	r4, #48	; 0x30
 80056e0:	d107      	bne.n	80056f2 <_strtol_l.constprop.0+0x56>
 80056e2:	782c      	ldrb	r4, [r5, #0]
 80056e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80056e8:	2c58      	cmp	r4, #88	; 0x58
 80056ea:	d14d      	bne.n	8005788 <_strtol_l.constprop.0+0xec>
 80056ec:	786c      	ldrb	r4, [r5, #1]
 80056ee:	2310      	movs	r3, #16
 80056f0:	3502      	adds	r5, #2
 80056f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80056f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80056fa:	f04f 0c00 	mov.w	ip, #0
 80056fe:	fbb8 f9f3 	udiv	r9, r8, r3
 8005702:	4666      	mov	r6, ip
 8005704:	fb03 8a19 	mls	sl, r3, r9, r8
 8005708:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800570c:	f1be 0f09 	cmp.w	lr, #9
 8005710:	d816      	bhi.n	8005740 <_strtol_l.constprop.0+0xa4>
 8005712:	4674      	mov	r4, lr
 8005714:	42a3      	cmp	r3, r4
 8005716:	dd24      	ble.n	8005762 <_strtol_l.constprop.0+0xc6>
 8005718:	f1bc 0f00 	cmp.w	ip, #0
 800571c:	db1e      	blt.n	800575c <_strtol_l.constprop.0+0xc0>
 800571e:	45b1      	cmp	r9, r6
 8005720:	d31c      	bcc.n	800575c <_strtol_l.constprop.0+0xc0>
 8005722:	d101      	bne.n	8005728 <_strtol_l.constprop.0+0x8c>
 8005724:	45a2      	cmp	sl, r4
 8005726:	db19      	blt.n	800575c <_strtol_l.constprop.0+0xc0>
 8005728:	fb06 4603 	mla	r6, r6, r3, r4
 800572c:	f04f 0c01 	mov.w	ip, #1
 8005730:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005734:	e7e8      	b.n	8005708 <_strtol_l.constprop.0+0x6c>
 8005736:	2c2b      	cmp	r4, #43	; 0x2b
 8005738:	bf04      	itt	eq
 800573a:	782c      	ldrbeq	r4, [r5, #0]
 800573c:	1cb5      	addeq	r5, r6, #2
 800573e:	e7ca      	b.n	80056d6 <_strtol_l.constprop.0+0x3a>
 8005740:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005744:	f1be 0f19 	cmp.w	lr, #25
 8005748:	d801      	bhi.n	800574e <_strtol_l.constprop.0+0xb2>
 800574a:	3c37      	subs	r4, #55	; 0x37
 800574c:	e7e2      	b.n	8005714 <_strtol_l.constprop.0+0x78>
 800574e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005752:	f1be 0f19 	cmp.w	lr, #25
 8005756:	d804      	bhi.n	8005762 <_strtol_l.constprop.0+0xc6>
 8005758:	3c57      	subs	r4, #87	; 0x57
 800575a:	e7db      	b.n	8005714 <_strtol_l.constprop.0+0x78>
 800575c:	f04f 3cff 	mov.w	ip, #4294967295
 8005760:	e7e6      	b.n	8005730 <_strtol_l.constprop.0+0x94>
 8005762:	f1bc 0f00 	cmp.w	ip, #0
 8005766:	da05      	bge.n	8005774 <_strtol_l.constprop.0+0xd8>
 8005768:	2322      	movs	r3, #34	; 0x22
 800576a:	6003      	str	r3, [r0, #0]
 800576c:	4646      	mov	r6, r8
 800576e:	b942      	cbnz	r2, 8005782 <_strtol_l.constprop.0+0xe6>
 8005770:	4630      	mov	r0, r6
 8005772:	e79e      	b.n	80056b2 <_strtol_l.constprop.0+0x16>
 8005774:	b107      	cbz	r7, 8005778 <_strtol_l.constprop.0+0xdc>
 8005776:	4276      	negs	r6, r6
 8005778:	2a00      	cmp	r2, #0
 800577a:	d0f9      	beq.n	8005770 <_strtol_l.constprop.0+0xd4>
 800577c:	f1bc 0f00 	cmp.w	ip, #0
 8005780:	d000      	beq.n	8005784 <_strtol_l.constprop.0+0xe8>
 8005782:	1e69      	subs	r1, r5, #1
 8005784:	6011      	str	r1, [r2, #0]
 8005786:	e7f3      	b.n	8005770 <_strtol_l.constprop.0+0xd4>
 8005788:	2430      	movs	r4, #48	; 0x30
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1b1      	bne.n	80056f2 <_strtol_l.constprop.0+0x56>
 800578e:	2308      	movs	r3, #8
 8005790:	e7af      	b.n	80056f2 <_strtol_l.constprop.0+0x56>
 8005792:	2c30      	cmp	r4, #48	; 0x30
 8005794:	d0a5      	beq.n	80056e2 <_strtol_l.constprop.0+0x46>
 8005796:	230a      	movs	r3, #10
 8005798:	e7ab      	b.n	80056f2 <_strtol_l.constprop.0+0x56>
 800579a:	bf00      	nop
 800579c:	0800707e 	.word	0x0800707e

080057a0 <strtol>:
 80057a0:	4613      	mov	r3, r2
 80057a2:	460a      	mov	r2, r1
 80057a4:	4601      	mov	r1, r0
 80057a6:	4802      	ldr	r0, [pc, #8]	; (80057b0 <strtol+0x10>)
 80057a8:	6800      	ldr	r0, [r0, #0]
 80057aa:	f7ff bf77 	b.w	800569c <_strtol_l.constprop.0>
 80057ae:	bf00      	nop
 80057b0:	200000d8 	.word	0x200000d8

080057b4 <__utoa>:
 80057b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057b6:	4c1f      	ldr	r4, [pc, #124]	; (8005834 <__utoa+0x80>)
 80057b8:	b08b      	sub	sp, #44	; 0x2c
 80057ba:	4605      	mov	r5, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	466e      	mov	r6, sp
 80057c0:	f104 0c20 	add.w	ip, r4, #32
 80057c4:	6820      	ldr	r0, [r4, #0]
 80057c6:	6861      	ldr	r1, [r4, #4]
 80057c8:	4637      	mov	r7, r6
 80057ca:	c703      	stmia	r7!, {r0, r1}
 80057cc:	3408      	adds	r4, #8
 80057ce:	4564      	cmp	r4, ip
 80057d0:	463e      	mov	r6, r7
 80057d2:	d1f7      	bne.n	80057c4 <__utoa+0x10>
 80057d4:	7921      	ldrb	r1, [r4, #4]
 80057d6:	7139      	strb	r1, [r7, #4]
 80057d8:	1e91      	subs	r1, r2, #2
 80057da:	6820      	ldr	r0, [r4, #0]
 80057dc:	6038      	str	r0, [r7, #0]
 80057de:	2922      	cmp	r1, #34	; 0x22
 80057e0:	f04f 0100 	mov.w	r1, #0
 80057e4:	d904      	bls.n	80057f0 <__utoa+0x3c>
 80057e6:	7019      	strb	r1, [r3, #0]
 80057e8:	460b      	mov	r3, r1
 80057ea:	4618      	mov	r0, r3
 80057ec:	b00b      	add	sp, #44	; 0x2c
 80057ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057f0:	1e58      	subs	r0, r3, #1
 80057f2:	4684      	mov	ip, r0
 80057f4:	fbb5 f7f2 	udiv	r7, r5, r2
 80057f8:	fb02 5617 	mls	r6, r2, r7, r5
 80057fc:	3628      	adds	r6, #40	; 0x28
 80057fe:	446e      	add	r6, sp
 8005800:	460c      	mov	r4, r1
 8005802:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005806:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800580a:	462e      	mov	r6, r5
 800580c:	42b2      	cmp	r2, r6
 800580e:	f101 0101 	add.w	r1, r1, #1
 8005812:	463d      	mov	r5, r7
 8005814:	d9ee      	bls.n	80057f4 <__utoa+0x40>
 8005816:	2200      	movs	r2, #0
 8005818:	545a      	strb	r2, [r3, r1]
 800581a:	1919      	adds	r1, r3, r4
 800581c:	1aa5      	subs	r5, r4, r2
 800581e:	42aa      	cmp	r2, r5
 8005820:	dae3      	bge.n	80057ea <__utoa+0x36>
 8005822:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005826:	780e      	ldrb	r6, [r1, #0]
 8005828:	7006      	strb	r6, [r0, #0]
 800582a:	3201      	adds	r2, #1
 800582c:	f801 5901 	strb.w	r5, [r1], #-1
 8005830:	e7f4      	b.n	800581c <__utoa+0x68>
 8005832:	bf00      	nop
 8005834:	0800701c 	.word	0x0800701c

08005838 <__assert_func>:
 8005838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800583a:	4614      	mov	r4, r2
 800583c:	461a      	mov	r2, r3
 800583e:	4b09      	ldr	r3, [pc, #36]	; (8005864 <__assert_func+0x2c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4605      	mov	r5, r0
 8005844:	68d8      	ldr	r0, [r3, #12]
 8005846:	b14c      	cbz	r4, 800585c <__assert_func+0x24>
 8005848:	4b07      	ldr	r3, [pc, #28]	; (8005868 <__assert_func+0x30>)
 800584a:	9100      	str	r1, [sp, #0]
 800584c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005850:	4906      	ldr	r1, [pc, #24]	; (800586c <__assert_func+0x34>)
 8005852:	462b      	mov	r3, r5
 8005854:	f000 f80e 	bl	8005874 <fiprintf>
 8005858:	f000 fe20 	bl	800649c <abort>
 800585c:	4b04      	ldr	r3, [pc, #16]	; (8005870 <__assert_func+0x38>)
 800585e:	461c      	mov	r4, r3
 8005860:	e7f3      	b.n	800584a <__assert_func+0x12>
 8005862:	bf00      	nop
 8005864:	200000d8 	.word	0x200000d8
 8005868:	08007041 	.word	0x08007041
 800586c:	0800704e 	.word	0x0800704e
 8005870:	0800707c 	.word	0x0800707c

08005874 <fiprintf>:
 8005874:	b40e      	push	{r1, r2, r3}
 8005876:	b503      	push	{r0, r1, lr}
 8005878:	4601      	mov	r1, r0
 800587a:	ab03      	add	r3, sp, #12
 800587c:	4805      	ldr	r0, [pc, #20]	; (8005894 <fiprintf+0x20>)
 800587e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005882:	6800      	ldr	r0, [r0, #0]
 8005884:	9301      	str	r3, [sp, #4]
 8005886:	f000 fa75 	bl	8005d74 <_vfiprintf_r>
 800588a:	b002      	add	sp, #8
 800588c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005890:	b003      	add	sp, #12
 8005892:	4770      	bx	lr
 8005894:	200000d8 	.word	0x200000d8

08005898 <malloc>:
 8005898:	4b02      	ldr	r3, [pc, #8]	; (80058a4 <malloc+0xc>)
 800589a:	4601      	mov	r1, r0
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	f000 b86f 	b.w	8005980 <_malloc_r>
 80058a2:	bf00      	nop
 80058a4:	200000d8 	.word	0x200000d8

080058a8 <_free_r>:
 80058a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058aa:	2900      	cmp	r1, #0
 80058ac:	d044      	beq.n	8005938 <_free_r+0x90>
 80058ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058b2:	9001      	str	r0, [sp, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f1a1 0404 	sub.w	r4, r1, #4
 80058ba:	bfb8      	it	lt
 80058bc:	18e4      	addlt	r4, r4, r3
 80058be:	f001 f83d 	bl	800693c <__malloc_lock>
 80058c2:	4a1e      	ldr	r2, [pc, #120]	; (800593c <_free_r+0x94>)
 80058c4:	9801      	ldr	r0, [sp, #4]
 80058c6:	6813      	ldr	r3, [r2, #0]
 80058c8:	b933      	cbnz	r3, 80058d8 <_free_r+0x30>
 80058ca:	6063      	str	r3, [r4, #4]
 80058cc:	6014      	str	r4, [r2, #0]
 80058ce:	b003      	add	sp, #12
 80058d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058d4:	f001 b838 	b.w	8006948 <__malloc_unlock>
 80058d8:	42a3      	cmp	r3, r4
 80058da:	d908      	bls.n	80058ee <_free_r+0x46>
 80058dc:	6825      	ldr	r5, [r4, #0]
 80058de:	1961      	adds	r1, r4, r5
 80058e0:	428b      	cmp	r3, r1
 80058e2:	bf01      	itttt	eq
 80058e4:	6819      	ldreq	r1, [r3, #0]
 80058e6:	685b      	ldreq	r3, [r3, #4]
 80058e8:	1949      	addeq	r1, r1, r5
 80058ea:	6021      	streq	r1, [r4, #0]
 80058ec:	e7ed      	b.n	80058ca <_free_r+0x22>
 80058ee:	461a      	mov	r2, r3
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	b10b      	cbz	r3, 80058f8 <_free_r+0x50>
 80058f4:	42a3      	cmp	r3, r4
 80058f6:	d9fa      	bls.n	80058ee <_free_r+0x46>
 80058f8:	6811      	ldr	r1, [r2, #0]
 80058fa:	1855      	adds	r5, r2, r1
 80058fc:	42a5      	cmp	r5, r4
 80058fe:	d10b      	bne.n	8005918 <_free_r+0x70>
 8005900:	6824      	ldr	r4, [r4, #0]
 8005902:	4421      	add	r1, r4
 8005904:	1854      	adds	r4, r2, r1
 8005906:	42a3      	cmp	r3, r4
 8005908:	6011      	str	r1, [r2, #0]
 800590a:	d1e0      	bne.n	80058ce <_free_r+0x26>
 800590c:	681c      	ldr	r4, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	6053      	str	r3, [r2, #4]
 8005912:	4421      	add	r1, r4
 8005914:	6011      	str	r1, [r2, #0]
 8005916:	e7da      	b.n	80058ce <_free_r+0x26>
 8005918:	d902      	bls.n	8005920 <_free_r+0x78>
 800591a:	230c      	movs	r3, #12
 800591c:	6003      	str	r3, [r0, #0]
 800591e:	e7d6      	b.n	80058ce <_free_r+0x26>
 8005920:	6825      	ldr	r5, [r4, #0]
 8005922:	1961      	adds	r1, r4, r5
 8005924:	428b      	cmp	r3, r1
 8005926:	bf04      	itt	eq
 8005928:	6819      	ldreq	r1, [r3, #0]
 800592a:	685b      	ldreq	r3, [r3, #4]
 800592c:	6063      	str	r3, [r4, #4]
 800592e:	bf04      	itt	eq
 8005930:	1949      	addeq	r1, r1, r5
 8005932:	6021      	streq	r1, [r4, #0]
 8005934:	6054      	str	r4, [r2, #4]
 8005936:	e7ca      	b.n	80058ce <_free_r+0x26>
 8005938:	b003      	add	sp, #12
 800593a:	bd30      	pop	{r4, r5, pc}
 800593c:	20000888 	.word	0x20000888

08005940 <sbrk_aligned>:
 8005940:	b570      	push	{r4, r5, r6, lr}
 8005942:	4e0e      	ldr	r6, [pc, #56]	; (800597c <sbrk_aligned+0x3c>)
 8005944:	460c      	mov	r4, r1
 8005946:	6831      	ldr	r1, [r6, #0]
 8005948:	4605      	mov	r5, r0
 800594a:	b911      	cbnz	r1, 8005952 <sbrk_aligned+0x12>
 800594c:	f000 fcd6 	bl	80062fc <_sbrk_r>
 8005950:	6030      	str	r0, [r6, #0]
 8005952:	4621      	mov	r1, r4
 8005954:	4628      	mov	r0, r5
 8005956:	f000 fcd1 	bl	80062fc <_sbrk_r>
 800595a:	1c43      	adds	r3, r0, #1
 800595c:	d00a      	beq.n	8005974 <sbrk_aligned+0x34>
 800595e:	1cc4      	adds	r4, r0, #3
 8005960:	f024 0403 	bic.w	r4, r4, #3
 8005964:	42a0      	cmp	r0, r4
 8005966:	d007      	beq.n	8005978 <sbrk_aligned+0x38>
 8005968:	1a21      	subs	r1, r4, r0
 800596a:	4628      	mov	r0, r5
 800596c:	f000 fcc6 	bl	80062fc <_sbrk_r>
 8005970:	3001      	adds	r0, #1
 8005972:	d101      	bne.n	8005978 <sbrk_aligned+0x38>
 8005974:	f04f 34ff 	mov.w	r4, #4294967295
 8005978:	4620      	mov	r0, r4
 800597a:	bd70      	pop	{r4, r5, r6, pc}
 800597c:	2000088c 	.word	0x2000088c

08005980 <_malloc_r>:
 8005980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005984:	1ccd      	adds	r5, r1, #3
 8005986:	f025 0503 	bic.w	r5, r5, #3
 800598a:	3508      	adds	r5, #8
 800598c:	2d0c      	cmp	r5, #12
 800598e:	bf38      	it	cc
 8005990:	250c      	movcc	r5, #12
 8005992:	2d00      	cmp	r5, #0
 8005994:	4607      	mov	r7, r0
 8005996:	db01      	blt.n	800599c <_malloc_r+0x1c>
 8005998:	42a9      	cmp	r1, r5
 800599a:	d905      	bls.n	80059a8 <_malloc_r+0x28>
 800599c:	230c      	movs	r3, #12
 800599e:	603b      	str	r3, [r7, #0]
 80059a0:	2600      	movs	r6, #0
 80059a2:	4630      	mov	r0, r6
 80059a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059a8:	4e2e      	ldr	r6, [pc, #184]	; (8005a64 <_malloc_r+0xe4>)
 80059aa:	f000 ffc7 	bl	800693c <__malloc_lock>
 80059ae:	6833      	ldr	r3, [r6, #0]
 80059b0:	461c      	mov	r4, r3
 80059b2:	bb34      	cbnz	r4, 8005a02 <_malloc_r+0x82>
 80059b4:	4629      	mov	r1, r5
 80059b6:	4638      	mov	r0, r7
 80059b8:	f7ff ffc2 	bl	8005940 <sbrk_aligned>
 80059bc:	1c43      	adds	r3, r0, #1
 80059be:	4604      	mov	r4, r0
 80059c0:	d14d      	bne.n	8005a5e <_malloc_r+0xde>
 80059c2:	6834      	ldr	r4, [r6, #0]
 80059c4:	4626      	mov	r6, r4
 80059c6:	2e00      	cmp	r6, #0
 80059c8:	d140      	bne.n	8005a4c <_malloc_r+0xcc>
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	4631      	mov	r1, r6
 80059ce:	4638      	mov	r0, r7
 80059d0:	eb04 0803 	add.w	r8, r4, r3
 80059d4:	f000 fc92 	bl	80062fc <_sbrk_r>
 80059d8:	4580      	cmp	r8, r0
 80059da:	d13a      	bne.n	8005a52 <_malloc_r+0xd2>
 80059dc:	6821      	ldr	r1, [r4, #0]
 80059de:	3503      	adds	r5, #3
 80059e0:	1a6d      	subs	r5, r5, r1
 80059e2:	f025 0503 	bic.w	r5, r5, #3
 80059e6:	3508      	adds	r5, #8
 80059e8:	2d0c      	cmp	r5, #12
 80059ea:	bf38      	it	cc
 80059ec:	250c      	movcc	r5, #12
 80059ee:	4629      	mov	r1, r5
 80059f0:	4638      	mov	r0, r7
 80059f2:	f7ff ffa5 	bl	8005940 <sbrk_aligned>
 80059f6:	3001      	adds	r0, #1
 80059f8:	d02b      	beq.n	8005a52 <_malloc_r+0xd2>
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	442b      	add	r3, r5
 80059fe:	6023      	str	r3, [r4, #0]
 8005a00:	e00e      	b.n	8005a20 <_malloc_r+0xa0>
 8005a02:	6822      	ldr	r2, [r4, #0]
 8005a04:	1b52      	subs	r2, r2, r5
 8005a06:	d41e      	bmi.n	8005a46 <_malloc_r+0xc6>
 8005a08:	2a0b      	cmp	r2, #11
 8005a0a:	d916      	bls.n	8005a3a <_malloc_r+0xba>
 8005a0c:	1961      	adds	r1, r4, r5
 8005a0e:	42a3      	cmp	r3, r4
 8005a10:	6025      	str	r5, [r4, #0]
 8005a12:	bf18      	it	ne
 8005a14:	6059      	strne	r1, [r3, #4]
 8005a16:	6863      	ldr	r3, [r4, #4]
 8005a18:	bf08      	it	eq
 8005a1a:	6031      	streq	r1, [r6, #0]
 8005a1c:	5162      	str	r2, [r4, r5]
 8005a1e:	604b      	str	r3, [r1, #4]
 8005a20:	4638      	mov	r0, r7
 8005a22:	f104 060b 	add.w	r6, r4, #11
 8005a26:	f000 ff8f 	bl	8006948 <__malloc_unlock>
 8005a2a:	f026 0607 	bic.w	r6, r6, #7
 8005a2e:	1d23      	adds	r3, r4, #4
 8005a30:	1af2      	subs	r2, r6, r3
 8005a32:	d0b6      	beq.n	80059a2 <_malloc_r+0x22>
 8005a34:	1b9b      	subs	r3, r3, r6
 8005a36:	50a3      	str	r3, [r4, r2]
 8005a38:	e7b3      	b.n	80059a2 <_malloc_r+0x22>
 8005a3a:	6862      	ldr	r2, [r4, #4]
 8005a3c:	42a3      	cmp	r3, r4
 8005a3e:	bf0c      	ite	eq
 8005a40:	6032      	streq	r2, [r6, #0]
 8005a42:	605a      	strne	r2, [r3, #4]
 8005a44:	e7ec      	b.n	8005a20 <_malloc_r+0xa0>
 8005a46:	4623      	mov	r3, r4
 8005a48:	6864      	ldr	r4, [r4, #4]
 8005a4a:	e7b2      	b.n	80059b2 <_malloc_r+0x32>
 8005a4c:	4634      	mov	r4, r6
 8005a4e:	6876      	ldr	r6, [r6, #4]
 8005a50:	e7b9      	b.n	80059c6 <_malloc_r+0x46>
 8005a52:	230c      	movs	r3, #12
 8005a54:	603b      	str	r3, [r7, #0]
 8005a56:	4638      	mov	r0, r7
 8005a58:	f000 ff76 	bl	8006948 <__malloc_unlock>
 8005a5c:	e7a1      	b.n	80059a2 <_malloc_r+0x22>
 8005a5e:	6025      	str	r5, [r4, #0]
 8005a60:	e7de      	b.n	8005a20 <_malloc_r+0xa0>
 8005a62:	bf00      	nop
 8005a64:	20000888 	.word	0x20000888

08005a68 <__ssputs_r>:
 8005a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a6c:	688e      	ldr	r6, [r1, #8]
 8005a6e:	429e      	cmp	r6, r3
 8005a70:	4682      	mov	sl, r0
 8005a72:	460c      	mov	r4, r1
 8005a74:	4690      	mov	r8, r2
 8005a76:	461f      	mov	r7, r3
 8005a78:	d838      	bhi.n	8005aec <__ssputs_r+0x84>
 8005a7a:	898a      	ldrh	r2, [r1, #12]
 8005a7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a80:	d032      	beq.n	8005ae8 <__ssputs_r+0x80>
 8005a82:	6825      	ldr	r5, [r4, #0]
 8005a84:	6909      	ldr	r1, [r1, #16]
 8005a86:	eba5 0901 	sub.w	r9, r5, r1
 8005a8a:	6965      	ldr	r5, [r4, #20]
 8005a8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a94:	3301      	adds	r3, #1
 8005a96:	444b      	add	r3, r9
 8005a98:	106d      	asrs	r5, r5, #1
 8005a9a:	429d      	cmp	r5, r3
 8005a9c:	bf38      	it	cc
 8005a9e:	461d      	movcc	r5, r3
 8005aa0:	0553      	lsls	r3, r2, #21
 8005aa2:	d531      	bpl.n	8005b08 <__ssputs_r+0xa0>
 8005aa4:	4629      	mov	r1, r5
 8005aa6:	f7ff ff6b 	bl	8005980 <_malloc_r>
 8005aaa:	4606      	mov	r6, r0
 8005aac:	b950      	cbnz	r0, 8005ac4 <__ssputs_r+0x5c>
 8005aae:	230c      	movs	r3, #12
 8005ab0:	f8ca 3000 	str.w	r3, [sl]
 8005ab4:	89a3      	ldrh	r3, [r4, #12]
 8005ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aba:	81a3      	strh	r3, [r4, #12]
 8005abc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac4:	6921      	ldr	r1, [r4, #16]
 8005ac6:	464a      	mov	r2, r9
 8005ac8:	f000 ff10 	bl	80068ec <memcpy>
 8005acc:	89a3      	ldrh	r3, [r4, #12]
 8005ace:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ad6:	81a3      	strh	r3, [r4, #12]
 8005ad8:	6126      	str	r6, [r4, #16]
 8005ada:	6165      	str	r5, [r4, #20]
 8005adc:	444e      	add	r6, r9
 8005ade:	eba5 0509 	sub.w	r5, r5, r9
 8005ae2:	6026      	str	r6, [r4, #0]
 8005ae4:	60a5      	str	r5, [r4, #8]
 8005ae6:	463e      	mov	r6, r7
 8005ae8:	42be      	cmp	r6, r7
 8005aea:	d900      	bls.n	8005aee <__ssputs_r+0x86>
 8005aec:	463e      	mov	r6, r7
 8005aee:	6820      	ldr	r0, [r4, #0]
 8005af0:	4632      	mov	r2, r6
 8005af2:	4641      	mov	r1, r8
 8005af4:	f000 ff08 	bl	8006908 <memmove>
 8005af8:	68a3      	ldr	r3, [r4, #8]
 8005afa:	1b9b      	subs	r3, r3, r6
 8005afc:	60a3      	str	r3, [r4, #8]
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	4433      	add	r3, r6
 8005b02:	6023      	str	r3, [r4, #0]
 8005b04:	2000      	movs	r0, #0
 8005b06:	e7db      	b.n	8005ac0 <__ssputs_r+0x58>
 8005b08:	462a      	mov	r2, r5
 8005b0a:	f000 ff23 	bl	8006954 <_realloc_r>
 8005b0e:	4606      	mov	r6, r0
 8005b10:	2800      	cmp	r0, #0
 8005b12:	d1e1      	bne.n	8005ad8 <__ssputs_r+0x70>
 8005b14:	6921      	ldr	r1, [r4, #16]
 8005b16:	4650      	mov	r0, sl
 8005b18:	f7ff fec6 	bl	80058a8 <_free_r>
 8005b1c:	e7c7      	b.n	8005aae <__ssputs_r+0x46>
	...

08005b20 <_svfiprintf_r>:
 8005b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b24:	4698      	mov	r8, r3
 8005b26:	898b      	ldrh	r3, [r1, #12]
 8005b28:	061b      	lsls	r3, r3, #24
 8005b2a:	b09d      	sub	sp, #116	; 0x74
 8005b2c:	4607      	mov	r7, r0
 8005b2e:	460d      	mov	r5, r1
 8005b30:	4614      	mov	r4, r2
 8005b32:	d50e      	bpl.n	8005b52 <_svfiprintf_r+0x32>
 8005b34:	690b      	ldr	r3, [r1, #16]
 8005b36:	b963      	cbnz	r3, 8005b52 <_svfiprintf_r+0x32>
 8005b38:	2140      	movs	r1, #64	; 0x40
 8005b3a:	f7ff ff21 	bl	8005980 <_malloc_r>
 8005b3e:	6028      	str	r0, [r5, #0]
 8005b40:	6128      	str	r0, [r5, #16]
 8005b42:	b920      	cbnz	r0, 8005b4e <_svfiprintf_r+0x2e>
 8005b44:	230c      	movs	r3, #12
 8005b46:	603b      	str	r3, [r7, #0]
 8005b48:	f04f 30ff 	mov.w	r0, #4294967295
 8005b4c:	e0d1      	b.n	8005cf2 <_svfiprintf_r+0x1d2>
 8005b4e:	2340      	movs	r3, #64	; 0x40
 8005b50:	616b      	str	r3, [r5, #20]
 8005b52:	2300      	movs	r3, #0
 8005b54:	9309      	str	r3, [sp, #36]	; 0x24
 8005b56:	2320      	movs	r3, #32
 8005b58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b60:	2330      	movs	r3, #48	; 0x30
 8005b62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005d0c <_svfiprintf_r+0x1ec>
 8005b66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b6a:	f04f 0901 	mov.w	r9, #1
 8005b6e:	4623      	mov	r3, r4
 8005b70:	469a      	mov	sl, r3
 8005b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b76:	b10a      	cbz	r2, 8005b7c <_svfiprintf_r+0x5c>
 8005b78:	2a25      	cmp	r2, #37	; 0x25
 8005b7a:	d1f9      	bne.n	8005b70 <_svfiprintf_r+0x50>
 8005b7c:	ebba 0b04 	subs.w	fp, sl, r4
 8005b80:	d00b      	beq.n	8005b9a <_svfiprintf_r+0x7a>
 8005b82:	465b      	mov	r3, fp
 8005b84:	4622      	mov	r2, r4
 8005b86:	4629      	mov	r1, r5
 8005b88:	4638      	mov	r0, r7
 8005b8a:	f7ff ff6d 	bl	8005a68 <__ssputs_r>
 8005b8e:	3001      	adds	r0, #1
 8005b90:	f000 80aa 	beq.w	8005ce8 <_svfiprintf_r+0x1c8>
 8005b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b96:	445a      	add	r2, fp
 8005b98:	9209      	str	r2, [sp, #36]	; 0x24
 8005b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f000 80a2 	beq.w	8005ce8 <_svfiprintf_r+0x1c8>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8005baa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bae:	f10a 0a01 	add.w	sl, sl, #1
 8005bb2:	9304      	str	r3, [sp, #16]
 8005bb4:	9307      	str	r3, [sp, #28]
 8005bb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bba:	931a      	str	r3, [sp, #104]	; 0x68
 8005bbc:	4654      	mov	r4, sl
 8005bbe:	2205      	movs	r2, #5
 8005bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bc4:	4851      	ldr	r0, [pc, #324]	; (8005d0c <_svfiprintf_r+0x1ec>)
 8005bc6:	f7fa fb0b 	bl	80001e0 <memchr>
 8005bca:	9a04      	ldr	r2, [sp, #16]
 8005bcc:	b9d8      	cbnz	r0, 8005c06 <_svfiprintf_r+0xe6>
 8005bce:	06d0      	lsls	r0, r2, #27
 8005bd0:	bf44      	itt	mi
 8005bd2:	2320      	movmi	r3, #32
 8005bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bd8:	0711      	lsls	r1, r2, #28
 8005bda:	bf44      	itt	mi
 8005bdc:	232b      	movmi	r3, #43	; 0x2b
 8005bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005be2:	f89a 3000 	ldrb.w	r3, [sl]
 8005be6:	2b2a      	cmp	r3, #42	; 0x2a
 8005be8:	d015      	beq.n	8005c16 <_svfiprintf_r+0xf6>
 8005bea:	9a07      	ldr	r2, [sp, #28]
 8005bec:	4654      	mov	r4, sl
 8005bee:	2000      	movs	r0, #0
 8005bf0:	f04f 0c0a 	mov.w	ip, #10
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bfa:	3b30      	subs	r3, #48	; 0x30
 8005bfc:	2b09      	cmp	r3, #9
 8005bfe:	d94e      	bls.n	8005c9e <_svfiprintf_r+0x17e>
 8005c00:	b1b0      	cbz	r0, 8005c30 <_svfiprintf_r+0x110>
 8005c02:	9207      	str	r2, [sp, #28]
 8005c04:	e014      	b.n	8005c30 <_svfiprintf_r+0x110>
 8005c06:	eba0 0308 	sub.w	r3, r0, r8
 8005c0a:	fa09 f303 	lsl.w	r3, r9, r3
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	9304      	str	r3, [sp, #16]
 8005c12:	46a2      	mov	sl, r4
 8005c14:	e7d2      	b.n	8005bbc <_svfiprintf_r+0x9c>
 8005c16:	9b03      	ldr	r3, [sp, #12]
 8005c18:	1d19      	adds	r1, r3, #4
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	9103      	str	r1, [sp, #12]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	bfbb      	ittet	lt
 8005c22:	425b      	neglt	r3, r3
 8005c24:	f042 0202 	orrlt.w	r2, r2, #2
 8005c28:	9307      	strge	r3, [sp, #28]
 8005c2a:	9307      	strlt	r3, [sp, #28]
 8005c2c:	bfb8      	it	lt
 8005c2e:	9204      	strlt	r2, [sp, #16]
 8005c30:	7823      	ldrb	r3, [r4, #0]
 8005c32:	2b2e      	cmp	r3, #46	; 0x2e
 8005c34:	d10c      	bne.n	8005c50 <_svfiprintf_r+0x130>
 8005c36:	7863      	ldrb	r3, [r4, #1]
 8005c38:	2b2a      	cmp	r3, #42	; 0x2a
 8005c3a:	d135      	bne.n	8005ca8 <_svfiprintf_r+0x188>
 8005c3c:	9b03      	ldr	r3, [sp, #12]
 8005c3e:	1d1a      	adds	r2, r3, #4
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	9203      	str	r2, [sp, #12]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	bfb8      	it	lt
 8005c48:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c4c:	3402      	adds	r4, #2
 8005c4e:	9305      	str	r3, [sp, #20]
 8005c50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005d1c <_svfiprintf_r+0x1fc>
 8005c54:	7821      	ldrb	r1, [r4, #0]
 8005c56:	2203      	movs	r2, #3
 8005c58:	4650      	mov	r0, sl
 8005c5a:	f7fa fac1 	bl	80001e0 <memchr>
 8005c5e:	b140      	cbz	r0, 8005c72 <_svfiprintf_r+0x152>
 8005c60:	2340      	movs	r3, #64	; 0x40
 8005c62:	eba0 000a 	sub.w	r0, r0, sl
 8005c66:	fa03 f000 	lsl.w	r0, r3, r0
 8005c6a:	9b04      	ldr	r3, [sp, #16]
 8005c6c:	4303      	orrs	r3, r0
 8005c6e:	3401      	adds	r4, #1
 8005c70:	9304      	str	r3, [sp, #16]
 8005c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c76:	4826      	ldr	r0, [pc, #152]	; (8005d10 <_svfiprintf_r+0x1f0>)
 8005c78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c7c:	2206      	movs	r2, #6
 8005c7e:	f7fa faaf 	bl	80001e0 <memchr>
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d038      	beq.n	8005cf8 <_svfiprintf_r+0x1d8>
 8005c86:	4b23      	ldr	r3, [pc, #140]	; (8005d14 <_svfiprintf_r+0x1f4>)
 8005c88:	bb1b      	cbnz	r3, 8005cd2 <_svfiprintf_r+0x1b2>
 8005c8a:	9b03      	ldr	r3, [sp, #12]
 8005c8c:	3307      	adds	r3, #7
 8005c8e:	f023 0307 	bic.w	r3, r3, #7
 8005c92:	3308      	adds	r3, #8
 8005c94:	9303      	str	r3, [sp, #12]
 8005c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c98:	4433      	add	r3, r6
 8005c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c9c:	e767      	b.n	8005b6e <_svfiprintf_r+0x4e>
 8005c9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	2001      	movs	r0, #1
 8005ca6:	e7a5      	b.n	8005bf4 <_svfiprintf_r+0xd4>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	3401      	adds	r4, #1
 8005cac:	9305      	str	r3, [sp, #20]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	f04f 0c0a 	mov.w	ip, #10
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cba:	3a30      	subs	r2, #48	; 0x30
 8005cbc:	2a09      	cmp	r2, #9
 8005cbe:	d903      	bls.n	8005cc8 <_svfiprintf_r+0x1a8>
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0c5      	beq.n	8005c50 <_svfiprintf_r+0x130>
 8005cc4:	9105      	str	r1, [sp, #20]
 8005cc6:	e7c3      	b.n	8005c50 <_svfiprintf_r+0x130>
 8005cc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ccc:	4604      	mov	r4, r0
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e7f0      	b.n	8005cb4 <_svfiprintf_r+0x194>
 8005cd2:	ab03      	add	r3, sp, #12
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	462a      	mov	r2, r5
 8005cd8:	4b0f      	ldr	r3, [pc, #60]	; (8005d18 <_svfiprintf_r+0x1f8>)
 8005cda:	a904      	add	r1, sp, #16
 8005cdc:	4638      	mov	r0, r7
 8005cde:	f3af 8000 	nop.w
 8005ce2:	1c42      	adds	r2, r0, #1
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	d1d6      	bne.n	8005c96 <_svfiprintf_r+0x176>
 8005ce8:	89ab      	ldrh	r3, [r5, #12]
 8005cea:	065b      	lsls	r3, r3, #25
 8005cec:	f53f af2c 	bmi.w	8005b48 <_svfiprintf_r+0x28>
 8005cf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cf2:	b01d      	add	sp, #116	; 0x74
 8005cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf8:	ab03      	add	r3, sp, #12
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	462a      	mov	r2, r5
 8005cfe:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <_svfiprintf_r+0x1f8>)
 8005d00:	a904      	add	r1, sp, #16
 8005d02:	4638      	mov	r0, r7
 8005d04:	f000 f9d4 	bl	80060b0 <_printf_i>
 8005d08:	e7eb      	b.n	8005ce2 <_svfiprintf_r+0x1c2>
 8005d0a:	bf00      	nop
 8005d0c:	0800717e 	.word	0x0800717e
 8005d10:	08007188 	.word	0x08007188
 8005d14:	00000000 	.word	0x00000000
 8005d18:	08005a69 	.word	0x08005a69
 8005d1c:	08007184 	.word	0x08007184

08005d20 <__sfputc_r>:
 8005d20:	6893      	ldr	r3, [r2, #8]
 8005d22:	3b01      	subs	r3, #1
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	b410      	push	{r4}
 8005d28:	6093      	str	r3, [r2, #8]
 8005d2a:	da08      	bge.n	8005d3e <__sfputc_r+0x1e>
 8005d2c:	6994      	ldr	r4, [r2, #24]
 8005d2e:	42a3      	cmp	r3, r4
 8005d30:	db01      	blt.n	8005d36 <__sfputc_r+0x16>
 8005d32:	290a      	cmp	r1, #10
 8005d34:	d103      	bne.n	8005d3e <__sfputc_r+0x1e>
 8005d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d3a:	f000 baef 	b.w	800631c <__swbuf_r>
 8005d3e:	6813      	ldr	r3, [r2, #0]
 8005d40:	1c58      	adds	r0, r3, #1
 8005d42:	6010      	str	r0, [r2, #0]
 8005d44:	7019      	strb	r1, [r3, #0]
 8005d46:	4608      	mov	r0, r1
 8005d48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <__sfputs_r>:
 8005d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d50:	4606      	mov	r6, r0
 8005d52:	460f      	mov	r7, r1
 8005d54:	4614      	mov	r4, r2
 8005d56:	18d5      	adds	r5, r2, r3
 8005d58:	42ac      	cmp	r4, r5
 8005d5a:	d101      	bne.n	8005d60 <__sfputs_r+0x12>
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	e007      	b.n	8005d70 <__sfputs_r+0x22>
 8005d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d64:	463a      	mov	r2, r7
 8005d66:	4630      	mov	r0, r6
 8005d68:	f7ff ffda 	bl	8005d20 <__sfputc_r>
 8005d6c:	1c43      	adds	r3, r0, #1
 8005d6e:	d1f3      	bne.n	8005d58 <__sfputs_r+0xa>
 8005d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d74 <_vfiprintf_r>:
 8005d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d78:	460d      	mov	r5, r1
 8005d7a:	b09d      	sub	sp, #116	; 0x74
 8005d7c:	4614      	mov	r4, r2
 8005d7e:	4698      	mov	r8, r3
 8005d80:	4606      	mov	r6, r0
 8005d82:	b118      	cbz	r0, 8005d8c <_vfiprintf_r+0x18>
 8005d84:	6983      	ldr	r3, [r0, #24]
 8005d86:	b90b      	cbnz	r3, 8005d8c <_vfiprintf_r+0x18>
 8005d88:	f000 fcaa 	bl	80066e0 <__sinit>
 8005d8c:	4b89      	ldr	r3, [pc, #548]	; (8005fb4 <_vfiprintf_r+0x240>)
 8005d8e:	429d      	cmp	r5, r3
 8005d90:	d11b      	bne.n	8005dca <_vfiprintf_r+0x56>
 8005d92:	6875      	ldr	r5, [r6, #4]
 8005d94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d96:	07d9      	lsls	r1, r3, #31
 8005d98:	d405      	bmi.n	8005da6 <_vfiprintf_r+0x32>
 8005d9a:	89ab      	ldrh	r3, [r5, #12]
 8005d9c:	059a      	lsls	r2, r3, #22
 8005d9e:	d402      	bmi.n	8005da6 <_vfiprintf_r+0x32>
 8005da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005da2:	f000 fd3b 	bl	800681c <__retarget_lock_acquire_recursive>
 8005da6:	89ab      	ldrh	r3, [r5, #12]
 8005da8:	071b      	lsls	r3, r3, #28
 8005daa:	d501      	bpl.n	8005db0 <_vfiprintf_r+0x3c>
 8005dac:	692b      	ldr	r3, [r5, #16]
 8005dae:	b9eb      	cbnz	r3, 8005dec <_vfiprintf_r+0x78>
 8005db0:	4629      	mov	r1, r5
 8005db2:	4630      	mov	r0, r6
 8005db4:	f000 fb04 	bl	80063c0 <__swsetup_r>
 8005db8:	b1c0      	cbz	r0, 8005dec <_vfiprintf_r+0x78>
 8005dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dbc:	07dc      	lsls	r4, r3, #31
 8005dbe:	d50e      	bpl.n	8005dde <_vfiprintf_r+0x6a>
 8005dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc4:	b01d      	add	sp, #116	; 0x74
 8005dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dca:	4b7b      	ldr	r3, [pc, #492]	; (8005fb8 <_vfiprintf_r+0x244>)
 8005dcc:	429d      	cmp	r5, r3
 8005dce:	d101      	bne.n	8005dd4 <_vfiprintf_r+0x60>
 8005dd0:	68b5      	ldr	r5, [r6, #8]
 8005dd2:	e7df      	b.n	8005d94 <_vfiprintf_r+0x20>
 8005dd4:	4b79      	ldr	r3, [pc, #484]	; (8005fbc <_vfiprintf_r+0x248>)
 8005dd6:	429d      	cmp	r5, r3
 8005dd8:	bf08      	it	eq
 8005dda:	68f5      	ldreq	r5, [r6, #12]
 8005ddc:	e7da      	b.n	8005d94 <_vfiprintf_r+0x20>
 8005dde:	89ab      	ldrh	r3, [r5, #12]
 8005de0:	0598      	lsls	r0, r3, #22
 8005de2:	d4ed      	bmi.n	8005dc0 <_vfiprintf_r+0x4c>
 8005de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005de6:	f000 fd1a 	bl	800681e <__retarget_lock_release_recursive>
 8005dea:	e7e9      	b.n	8005dc0 <_vfiprintf_r+0x4c>
 8005dec:	2300      	movs	r3, #0
 8005dee:	9309      	str	r3, [sp, #36]	; 0x24
 8005df0:	2320      	movs	r3, #32
 8005df2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005df6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dfa:	2330      	movs	r3, #48	; 0x30
 8005dfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005fc0 <_vfiprintf_r+0x24c>
 8005e00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e04:	f04f 0901 	mov.w	r9, #1
 8005e08:	4623      	mov	r3, r4
 8005e0a:	469a      	mov	sl, r3
 8005e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e10:	b10a      	cbz	r2, 8005e16 <_vfiprintf_r+0xa2>
 8005e12:	2a25      	cmp	r2, #37	; 0x25
 8005e14:	d1f9      	bne.n	8005e0a <_vfiprintf_r+0x96>
 8005e16:	ebba 0b04 	subs.w	fp, sl, r4
 8005e1a:	d00b      	beq.n	8005e34 <_vfiprintf_r+0xc0>
 8005e1c:	465b      	mov	r3, fp
 8005e1e:	4622      	mov	r2, r4
 8005e20:	4629      	mov	r1, r5
 8005e22:	4630      	mov	r0, r6
 8005e24:	f7ff ff93 	bl	8005d4e <__sfputs_r>
 8005e28:	3001      	adds	r0, #1
 8005e2a:	f000 80aa 	beq.w	8005f82 <_vfiprintf_r+0x20e>
 8005e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e30:	445a      	add	r2, fp
 8005e32:	9209      	str	r2, [sp, #36]	; 0x24
 8005e34:	f89a 3000 	ldrb.w	r3, [sl]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 80a2 	beq.w	8005f82 <_vfiprintf_r+0x20e>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f04f 32ff 	mov.w	r2, #4294967295
 8005e44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e48:	f10a 0a01 	add.w	sl, sl, #1
 8005e4c:	9304      	str	r3, [sp, #16]
 8005e4e:	9307      	str	r3, [sp, #28]
 8005e50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e54:	931a      	str	r3, [sp, #104]	; 0x68
 8005e56:	4654      	mov	r4, sl
 8005e58:	2205      	movs	r2, #5
 8005e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e5e:	4858      	ldr	r0, [pc, #352]	; (8005fc0 <_vfiprintf_r+0x24c>)
 8005e60:	f7fa f9be 	bl	80001e0 <memchr>
 8005e64:	9a04      	ldr	r2, [sp, #16]
 8005e66:	b9d8      	cbnz	r0, 8005ea0 <_vfiprintf_r+0x12c>
 8005e68:	06d1      	lsls	r1, r2, #27
 8005e6a:	bf44      	itt	mi
 8005e6c:	2320      	movmi	r3, #32
 8005e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e72:	0713      	lsls	r3, r2, #28
 8005e74:	bf44      	itt	mi
 8005e76:	232b      	movmi	r3, #43	; 0x2b
 8005e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e80:	2b2a      	cmp	r3, #42	; 0x2a
 8005e82:	d015      	beq.n	8005eb0 <_vfiprintf_r+0x13c>
 8005e84:	9a07      	ldr	r2, [sp, #28]
 8005e86:	4654      	mov	r4, sl
 8005e88:	2000      	movs	r0, #0
 8005e8a:	f04f 0c0a 	mov.w	ip, #10
 8005e8e:	4621      	mov	r1, r4
 8005e90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e94:	3b30      	subs	r3, #48	; 0x30
 8005e96:	2b09      	cmp	r3, #9
 8005e98:	d94e      	bls.n	8005f38 <_vfiprintf_r+0x1c4>
 8005e9a:	b1b0      	cbz	r0, 8005eca <_vfiprintf_r+0x156>
 8005e9c:	9207      	str	r2, [sp, #28]
 8005e9e:	e014      	b.n	8005eca <_vfiprintf_r+0x156>
 8005ea0:	eba0 0308 	sub.w	r3, r0, r8
 8005ea4:	fa09 f303 	lsl.w	r3, r9, r3
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	9304      	str	r3, [sp, #16]
 8005eac:	46a2      	mov	sl, r4
 8005eae:	e7d2      	b.n	8005e56 <_vfiprintf_r+0xe2>
 8005eb0:	9b03      	ldr	r3, [sp, #12]
 8005eb2:	1d19      	adds	r1, r3, #4
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	9103      	str	r1, [sp, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	bfbb      	ittet	lt
 8005ebc:	425b      	neglt	r3, r3
 8005ebe:	f042 0202 	orrlt.w	r2, r2, #2
 8005ec2:	9307      	strge	r3, [sp, #28]
 8005ec4:	9307      	strlt	r3, [sp, #28]
 8005ec6:	bfb8      	it	lt
 8005ec8:	9204      	strlt	r2, [sp, #16]
 8005eca:	7823      	ldrb	r3, [r4, #0]
 8005ecc:	2b2e      	cmp	r3, #46	; 0x2e
 8005ece:	d10c      	bne.n	8005eea <_vfiprintf_r+0x176>
 8005ed0:	7863      	ldrb	r3, [r4, #1]
 8005ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ed4:	d135      	bne.n	8005f42 <_vfiprintf_r+0x1ce>
 8005ed6:	9b03      	ldr	r3, [sp, #12]
 8005ed8:	1d1a      	adds	r2, r3, #4
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	9203      	str	r2, [sp, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	bfb8      	it	lt
 8005ee2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ee6:	3402      	adds	r4, #2
 8005ee8:	9305      	str	r3, [sp, #20]
 8005eea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005fd0 <_vfiprintf_r+0x25c>
 8005eee:	7821      	ldrb	r1, [r4, #0]
 8005ef0:	2203      	movs	r2, #3
 8005ef2:	4650      	mov	r0, sl
 8005ef4:	f7fa f974 	bl	80001e0 <memchr>
 8005ef8:	b140      	cbz	r0, 8005f0c <_vfiprintf_r+0x198>
 8005efa:	2340      	movs	r3, #64	; 0x40
 8005efc:	eba0 000a 	sub.w	r0, r0, sl
 8005f00:	fa03 f000 	lsl.w	r0, r3, r0
 8005f04:	9b04      	ldr	r3, [sp, #16]
 8005f06:	4303      	orrs	r3, r0
 8005f08:	3401      	adds	r4, #1
 8005f0a:	9304      	str	r3, [sp, #16]
 8005f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f10:	482c      	ldr	r0, [pc, #176]	; (8005fc4 <_vfiprintf_r+0x250>)
 8005f12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f16:	2206      	movs	r2, #6
 8005f18:	f7fa f962 	bl	80001e0 <memchr>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d03f      	beq.n	8005fa0 <_vfiprintf_r+0x22c>
 8005f20:	4b29      	ldr	r3, [pc, #164]	; (8005fc8 <_vfiprintf_r+0x254>)
 8005f22:	bb1b      	cbnz	r3, 8005f6c <_vfiprintf_r+0x1f8>
 8005f24:	9b03      	ldr	r3, [sp, #12]
 8005f26:	3307      	adds	r3, #7
 8005f28:	f023 0307 	bic.w	r3, r3, #7
 8005f2c:	3308      	adds	r3, #8
 8005f2e:	9303      	str	r3, [sp, #12]
 8005f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f32:	443b      	add	r3, r7
 8005f34:	9309      	str	r3, [sp, #36]	; 0x24
 8005f36:	e767      	b.n	8005e08 <_vfiprintf_r+0x94>
 8005f38:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f3c:	460c      	mov	r4, r1
 8005f3e:	2001      	movs	r0, #1
 8005f40:	e7a5      	b.n	8005e8e <_vfiprintf_r+0x11a>
 8005f42:	2300      	movs	r3, #0
 8005f44:	3401      	adds	r4, #1
 8005f46:	9305      	str	r3, [sp, #20]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	f04f 0c0a 	mov.w	ip, #10
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f54:	3a30      	subs	r2, #48	; 0x30
 8005f56:	2a09      	cmp	r2, #9
 8005f58:	d903      	bls.n	8005f62 <_vfiprintf_r+0x1ee>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0c5      	beq.n	8005eea <_vfiprintf_r+0x176>
 8005f5e:	9105      	str	r1, [sp, #20]
 8005f60:	e7c3      	b.n	8005eea <_vfiprintf_r+0x176>
 8005f62:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f66:	4604      	mov	r4, r0
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e7f0      	b.n	8005f4e <_vfiprintf_r+0x1da>
 8005f6c:	ab03      	add	r3, sp, #12
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	462a      	mov	r2, r5
 8005f72:	4b16      	ldr	r3, [pc, #88]	; (8005fcc <_vfiprintf_r+0x258>)
 8005f74:	a904      	add	r1, sp, #16
 8005f76:	4630      	mov	r0, r6
 8005f78:	f3af 8000 	nop.w
 8005f7c:	4607      	mov	r7, r0
 8005f7e:	1c78      	adds	r0, r7, #1
 8005f80:	d1d6      	bne.n	8005f30 <_vfiprintf_r+0x1bc>
 8005f82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f84:	07d9      	lsls	r1, r3, #31
 8005f86:	d405      	bmi.n	8005f94 <_vfiprintf_r+0x220>
 8005f88:	89ab      	ldrh	r3, [r5, #12]
 8005f8a:	059a      	lsls	r2, r3, #22
 8005f8c:	d402      	bmi.n	8005f94 <_vfiprintf_r+0x220>
 8005f8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f90:	f000 fc45 	bl	800681e <__retarget_lock_release_recursive>
 8005f94:	89ab      	ldrh	r3, [r5, #12]
 8005f96:	065b      	lsls	r3, r3, #25
 8005f98:	f53f af12 	bmi.w	8005dc0 <_vfiprintf_r+0x4c>
 8005f9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f9e:	e711      	b.n	8005dc4 <_vfiprintf_r+0x50>
 8005fa0:	ab03      	add	r3, sp, #12
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	462a      	mov	r2, r5
 8005fa6:	4b09      	ldr	r3, [pc, #36]	; (8005fcc <_vfiprintf_r+0x258>)
 8005fa8:	a904      	add	r1, sp, #16
 8005faa:	4630      	mov	r0, r6
 8005fac:	f000 f880 	bl	80060b0 <_printf_i>
 8005fb0:	e7e4      	b.n	8005f7c <_vfiprintf_r+0x208>
 8005fb2:	bf00      	nop
 8005fb4:	080071d4 	.word	0x080071d4
 8005fb8:	080071f4 	.word	0x080071f4
 8005fbc:	080071b4 	.word	0x080071b4
 8005fc0:	0800717e 	.word	0x0800717e
 8005fc4:	08007188 	.word	0x08007188
 8005fc8:	00000000 	.word	0x00000000
 8005fcc:	08005d4f 	.word	0x08005d4f
 8005fd0:	08007184 	.word	0x08007184

08005fd4 <_printf_common>:
 8005fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd8:	4616      	mov	r6, r2
 8005fda:	4699      	mov	r9, r3
 8005fdc:	688a      	ldr	r2, [r1, #8]
 8005fde:	690b      	ldr	r3, [r1, #16]
 8005fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	bfb8      	it	lt
 8005fe8:	4613      	movlt	r3, r2
 8005fea:	6033      	str	r3, [r6, #0]
 8005fec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ff0:	4607      	mov	r7, r0
 8005ff2:	460c      	mov	r4, r1
 8005ff4:	b10a      	cbz	r2, 8005ffa <_printf_common+0x26>
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	6033      	str	r3, [r6, #0]
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	0699      	lsls	r1, r3, #26
 8005ffe:	bf42      	ittt	mi
 8006000:	6833      	ldrmi	r3, [r6, #0]
 8006002:	3302      	addmi	r3, #2
 8006004:	6033      	strmi	r3, [r6, #0]
 8006006:	6825      	ldr	r5, [r4, #0]
 8006008:	f015 0506 	ands.w	r5, r5, #6
 800600c:	d106      	bne.n	800601c <_printf_common+0x48>
 800600e:	f104 0a19 	add.w	sl, r4, #25
 8006012:	68e3      	ldr	r3, [r4, #12]
 8006014:	6832      	ldr	r2, [r6, #0]
 8006016:	1a9b      	subs	r3, r3, r2
 8006018:	42ab      	cmp	r3, r5
 800601a:	dc26      	bgt.n	800606a <_printf_common+0x96>
 800601c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006020:	1e13      	subs	r3, r2, #0
 8006022:	6822      	ldr	r2, [r4, #0]
 8006024:	bf18      	it	ne
 8006026:	2301      	movne	r3, #1
 8006028:	0692      	lsls	r2, r2, #26
 800602a:	d42b      	bmi.n	8006084 <_printf_common+0xb0>
 800602c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006030:	4649      	mov	r1, r9
 8006032:	4638      	mov	r0, r7
 8006034:	47c0      	blx	r8
 8006036:	3001      	adds	r0, #1
 8006038:	d01e      	beq.n	8006078 <_printf_common+0xa4>
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	68e5      	ldr	r5, [r4, #12]
 800603e:	6832      	ldr	r2, [r6, #0]
 8006040:	f003 0306 	and.w	r3, r3, #6
 8006044:	2b04      	cmp	r3, #4
 8006046:	bf08      	it	eq
 8006048:	1aad      	subeq	r5, r5, r2
 800604a:	68a3      	ldr	r3, [r4, #8]
 800604c:	6922      	ldr	r2, [r4, #16]
 800604e:	bf0c      	ite	eq
 8006050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006054:	2500      	movne	r5, #0
 8006056:	4293      	cmp	r3, r2
 8006058:	bfc4      	itt	gt
 800605a:	1a9b      	subgt	r3, r3, r2
 800605c:	18ed      	addgt	r5, r5, r3
 800605e:	2600      	movs	r6, #0
 8006060:	341a      	adds	r4, #26
 8006062:	42b5      	cmp	r5, r6
 8006064:	d11a      	bne.n	800609c <_printf_common+0xc8>
 8006066:	2000      	movs	r0, #0
 8006068:	e008      	b.n	800607c <_printf_common+0xa8>
 800606a:	2301      	movs	r3, #1
 800606c:	4652      	mov	r2, sl
 800606e:	4649      	mov	r1, r9
 8006070:	4638      	mov	r0, r7
 8006072:	47c0      	blx	r8
 8006074:	3001      	adds	r0, #1
 8006076:	d103      	bne.n	8006080 <_printf_common+0xac>
 8006078:	f04f 30ff 	mov.w	r0, #4294967295
 800607c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006080:	3501      	adds	r5, #1
 8006082:	e7c6      	b.n	8006012 <_printf_common+0x3e>
 8006084:	18e1      	adds	r1, r4, r3
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	2030      	movs	r0, #48	; 0x30
 800608a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800608e:	4422      	add	r2, r4
 8006090:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006094:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006098:	3302      	adds	r3, #2
 800609a:	e7c7      	b.n	800602c <_printf_common+0x58>
 800609c:	2301      	movs	r3, #1
 800609e:	4622      	mov	r2, r4
 80060a0:	4649      	mov	r1, r9
 80060a2:	4638      	mov	r0, r7
 80060a4:	47c0      	blx	r8
 80060a6:	3001      	adds	r0, #1
 80060a8:	d0e6      	beq.n	8006078 <_printf_common+0xa4>
 80060aa:	3601      	adds	r6, #1
 80060ac:	e7d9      	b.n	8006062 <_printf_common+0x8e>
	...

080060b0 <_printf_i>:
 80060b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060b4:	7e0f      	ldrb	r7, [r1, #24]
 80060b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060b8:	2f78      	cmp	r7, #120	; 0x78
 80060ba:	4691      	mov	r9, r2
 80060bc:	4680      	mov	r8, r0
 80060be:	460c      	mov	r4, r1
 80060c0:	469a      	mov	sl, r3
 80060c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060c6:	d807      	bhi.n	80060d8 <_printf_i+0x28>
 80060c8:	2f62      	cmp	r7, #98	; 0x62
 80060ca:	d80a      	bhi.n	80060e2 <_printf_i+0x32>
 80060cc:	2f00      	cmp	r7, #0
 80060ce:	f000 80d8 	beq.w	8006282 <_printf_i+0x1d2>
 80060d2:	2f58      	cmp	r7, #88	; 0x58
 80060d4:	f000 80a3 	beq.w	800621e <_printf_i+0x16e>
 80060d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060e0:	e03a      	b.n	8006158 <_printf_i+0xa8>
 80060e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060e6:	2b15      	cmp	r3, #21
 80060e8:	d8f6      	bhi.n	80060d8 <_printf_i+0x28>
 80060ea:	a101      	add	r1, pc, #4	; (adr r1, 80060f0 <_printf_i+0x40>)
 80060ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060f0:	08006149 	.word	0x08006149
 80060f4:	0800615d 	.word	0x0800615d
 80060f8:	080060d9 	.word	0x080060d9
 80060fc:	080060d9 	.word	0x080060d9
 8006100:	080060d9 	.word	0x080060d9
 8006104:	080060d9 	.word	0x080060d9
 8006108:	0800615d 	.word	0x0800615d
 800610c:	080060d9 	.word	0x080060d9
 8006110:	080060d9 	.word	0x080060d9
 8006114:	080060d9 	.word	0x080060d9
 8006118:	080060d9 	.word	0x080060d9
 800611c:	08006269 	.word	0x08006269
 8006120:	0800618d 	.word	0x0800618d
 8006124:	0800624b 	.word	0x0800624b
 8006128:	080060d9 	.word	0x080060d9
 800612c:	080060d9 	.word	0x080060d9
 8006130:	0800628b 	.word	0x0800628b
 8006134:	080060d9 	.word	0x080060d9
 8006138:	0800618d 	.word	0x0800618d
 800613c:	080060d9 	.word	0x080060d9
 8006140:	080060d9 	.word	0x080060d9
 8006144:	08006253 	.word	0x08006253
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	1d1a      	adds	r2, r3, #4
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	602a      	str	r2, [r5, #0]
 8006150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006158:	2301      	movs	r3, #1
 800615a:	e0a3      	b.n	80062a4 <_printf_i+0x1f4>
 800615c:	6820      	ldr	r0, [r4, #0]
 800615e:	6829      	ldr	r1, [r5, #0]
 8006160:	0606      	lsls	r6, r0, #24
 8006162:	f101 0304 	add.w	r3, r1, #4
 8006166:	d50a      	bpl.n	800617e <_printf_i+0xce>
 8006168:	680e      	ldr	r6, [r1, #0]
 800616a:	602b      	str	r3, [r5, #0]
 800616c:	2e00      	cmp	r6, #0
 800616e:	da03      	bge.n	8006178 <_printf_i+0xc8>
 8006170:	232d      	movs	r3, #45	; 0x2d
 8006172:	4276      	negs	r6, r6
 8006174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006178:	485e      	ldr	r0, [pc, #376]	; (80062f4 <_printf_i+0x244>)
 800617a:	230a      	movs	r3, #10
 800617c:	e019      	b.n	80061b2 <_printf_i+0x102>
 800617e:	680e      	ldr	r6, [r1, #0]
 8006180:	602b      	str	r3, [r5, #0]
 8006182:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006186:	bf18      	it	ne
 8006188:	b236      	sxthne	r6, r6
 800618a:	e7ef      	b.n	800616c <_printf_i+0xbc>
 800618c:	682b      	ldr	r3, [r5, #0]
 800618e:	6820      	ldr	r0, [r4, #0]
 8006190:	1d19      	adds	r1, r3, #4
 8006192:	6029      	str	r1, [r5, #0]
 8006194:	0601      	lsls	r1, r0, #24
 8006196:	d501      	bpl.n	800619c <_printf_i+0xec>
 8006198:	681e      	ldr	r6, [r3, #0]
 800619a:	e002      	b.n	80061a2 <_printf_i+0xf2>
 800619c:	0646      	lsls	r6, r0, #25
 800619e:	d5fb      	bpl.n	8006198 <_printf_i+0xe8>
 80061a0:	881e      	ldrh	r6, [r3, #0]
 80061a2:	4854      	ldr	r0, [pc, #336]	; (80062f4 <_printf_i+0x244>)
 80061a4:	2f6f      	cmp	r7, #111	; 0x6f
 80061a6:	bf0c      	ite	eq
 80061a8:	2308      	moveq	r3, #8
 80061aa:	230a      	movne	r3, #10
 80061ac:	2100      	movs	r1, #0
 80061ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061b2:	6865      	ldr	r5, [r4, #4]
 80061b4:	60a5      	str	r5, [r4, #8]
 80061b6:	2d00      	cmp	r5, #0
 80061b8:	bfa2      	ittt	ge
 80061ba:	6821      	ldrge	r1, [r4, #0]
 80061bc:	f021 0104 	bicge.w	r1, r1, #4
 80061c0:	6021      	strge	r1, [r4, #0]
 80061c2:	b90e      	cbnz	r6, 80061c8 <_printf_i+0x118>
 80061c4:	2d00      	cmp	r5, #0
 80061c6:	d04d      	beq.n	8006264 <_printf_i+0x1b4>
 80061c8:	4615      	mov	r5, r2
 80061ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80061ce:	fb03 6711 	mls	r7, r3, r1, r6
 80061d2:	5dc7      	ldrb	r7, [r0, r7]
 80061d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061d8:	4637      	mov	r7, r6
 80061da:	42bb      	cmp	r3, r7
 80061dc:	460e      	mov	r6, r1
 80061de:	d9f4      	bls.n	80061ca <_printf_i+0x11a>
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d10b      	bne.n	80061fc <_printf_i+0x14c>
 80061e4:	6823      	ldr	r3, [r4, #0]
 80061e6:	07de      	lsls	r6, r3, #31
 80061e8:	d508      	bpl.n	80061fc <_printf_i+0x14c>
 80061ea:	6923      	ldr	r3, [r4, #16]
 80061ec:	6861      	ldr	r1, [r4, #4]
 80061ee:	4299      	cmp	r1, r3
 80061f0:	bfde      	ittt	le
 80061f2:	2330      	movle	r3, #48	; 0x30
 80061f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061fc:	1b52      	subs	r2, r2, r5
 80061fe:	6122      	str	r2, [r4, #16]
 8006200:	f8cd a000 	str.w	sl, [sp]
 8006204:	464b      	mov	r3, r9
 8006206:	aa03      	add	r2, sp, #12
 8006208:	4621      	mov	r1, r4
 800620a:	4640      	mov	r0, r8
 800620c:	f7ff fee2 	bl	8005fd4 <_printf_common>
 8006210:	3001      	adds	r0, #1
 8006212:	d14c      	bne.n	80062ae <_printf_i+0x1fe>
 8006214:	f04f 30ff 	mov.w	r0, #4294967295
 8006218:	b004      	add	sp, #16
 800621a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800621e:	4835      	ldr	r0, [pc, #212]	; (80062f4 <_printf_i+0x244>)
 8006220:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006224:	6829      	ldr	r1, [r5, #0]
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	f851 6b04 	ldr.w	r6, [r1], #4
 800622c:	6029      	str	r1, [r5, #0]
 800622e:	061d      	lsls	r5, r3, #24
 8006230:	d514      	bpl.n	800625c <_printf_i+0x1ac>
 8006232:	07df      	lsls	r7, r3, #31
 8006234:	bf44      	itt	mi
 8006236:	f043 0320 	orrmi.w	r3, r3, #32
 800623a:	6023      	strmi	r3, [r4, #0]
 800623c:	b91e      	cbnz	r6, 8006246 <_printf_i+0x196>
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	f023 0320 	bic.w	r3, r3, #32
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	2310      	movs	r3, #16
 8006248:	e7b0      	b.n	80061ac <_printf_i+0xfc>
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	f043 0320 	orr.w	r3, r3, #32
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	2378      	movs	r3, #120	; 0x78
 8006254:	4828      	ldr	r0, [pc, #160]	; (80062f8 <_printf_i+0x248>)
 8006256:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800625a:	e7e3      	b.n	8006224 <_printf_i+0x174>
 800625c:	0659      	lsls	r1, r3, #25
 800625e:	bf48      	it	mi
 8006260:	b2b6      	uxthmi	r6, r6
 8006262:	e7e6      	b.n	8006232 <_printf_i+0x182>
 8006264:	4615      	mov	r5, r2
 8006266:	e7bb      	b.n	80061e0 <_printf_i+0x130>
 8006268:	682b      	ldr	r3, [r5, #0]
 800626a:	6826      	ldr	r6, [r4, #0]
 800626c:	6961      	ldr	r1, [r4, #20]
 800626e:	1d18      	adds	r0, r3, #4
 8006270:	6028      	str	r0, [r5, #0]
 8006272:	0635      	lsls	r5, r6, #24
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	d501      	bpl.n	800627c <_printf_i+0x1cc>
 8006278:	6019      	str	r1, [r3, #0]
 800627a:	e002      	b.n	8006282 <_printf_i+0x1d2>
 800627c:	0670      	lsls	r0, r6, #25
 800627e:	d5fb      	bpl.n	8006278 <_printf_i+0x1c8>
 8006280:	8019      	strh	r1, [r3, #0]
 8006282:	2300      	movs	r3, #0
 8006284:	6123      	str	r3, [r4, #16]
 8006286:	4615      	mov	r5, r2
 8006288:	e7ba      	b.n	8006200 <_printf_i+0x150>
 800628a:	682b      	ldr	r3, [r5, #0]
 800628c:	1d1a      	adds	r2, r3, #4
 800628e:	602a      	str	r2, [r5, #0]
 8006290:	681d      	ldr	r5, [r3, #0]
 8006292:	6862      	ldr	r2, [r4, #4]
 8006294:	2100      	movs	r1, #0
 8006296:	4628      	mov	r0, r5
 8006298:	f7f9 ffa2 	bl	80001e0 <memchr>
 800629c:	b108      	cbz	r0, 80062a2 <_printf_i+0x1f2>
 800629e:	1b40      	subs	r0, r0, r5
 80062a0:	6060      	str	r0, [r4, #4]
 80062a2:	6863      	ldr	r3, [r4, #4]
 80062a4:	6123      	str	r3, [r4, #16]
 80062a6:	2300      	movs	r3, #0
 80062a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062ac:	e7a8      	b.n	8006200 <_printf_i+0x150>
 80062ae:	6923      	ldr	r3, [r4, #16]
 80062b0:	462a      	mov	r2, r5
 80062b2:	4649      	mov	r1, r9
 80062b4:	4640      	mov	r0, r8
 80062b6:	47d0      	blx	sl
 80062b8:	3001      	adds	r0, #1
 80062ba:	d0ab      	beq.n	8006214 <_printf_i+0x164>
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	079b      	lsls	r3, r3, #30
 80062c0:	d413      	bmi.n	80062ea <_printf_i+0x23a>
 80062c2:	68e0      	ldr	r0, [r4, #12]
 80062c4:	9b03      	ldr	r3, [sp, #12]
 80062c6:	4298      	cmp	r0, r3
 80062c8:	bfb8      	it	lt
 80062ca:	4618      	movlt	r0, r3
 80062cc:	e7a4      	b.n	8006218 <_printf_i+0x168>
 80062ce:	2301      	movs	r3, #1
 80062d0:	4632      	mov	r2, r6
 80062d2:	4649      	mov	r1, r9
 80062d4:	4640      	mov	r0, r8
 80062d6:	47d0      	blx	sl
 80062d8:	3001      	adds	r0, #1
 80062da:	d09b      	beq.n	8006214 <_printf_i+0x164>
 80062dc:	3501      	adds	r5, #1
 80062de:	68e3      	ldr	r3, [r4, #12]
 80062e0:	9903      	ldr	r1, [sp, #12]
 80062e2:	1a5b      	subs	r3, r3, r1
 80062e4:	42ab      	cmp	r3, r5
 80062e6:	dcf2      	bgt.n	80062ce <_printf_i+0x21e>
 80062e8:	e7eb      	b.n	80062c2 <_printf_i+0x212>
 80062ea:	2500      	movs	r5, #0
 80062ec:	f104 0619 	add.w	r6, r4, #25
 80062f0:	e7f5      	b.n	80062de <_printf_i+0x22e>
 80062f2:	bf00      	nop
 80062f4:	0800718f 	.word	0x0800718f
 80062f8:	080071a0 	.word	0x080071a0

080062fc <_sbrk_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	4d06      	ldr	r5, [pc, #24]	; (8006318 <_sbrk_r+0x1c>)
 8006300:	2300      	movs	r3, #0
 8006302:	4604      	mov	r4, r0
 8006304:	4608      	mov	r0, r1
 8006306:	602b      	str	r3, [r5, #0]
 8006308:	f7fb fb32 	bl	8001970 <_sbrk>
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	d102      	bne.n	8006316 <_sbrk_r+0x1a>
 8006310:	682b      	ldr	r3, [r5, #0]
 8006312:	b103      	cbz	r3, 8006316 <_sbrk_r+0x1a>
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	bd38      	pop	{r3, r4, r5, pc}
 8006318:	20000894 	.word	0x20000894

0800631c <__swbuf_r>:
 800631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631e:	460e      	mov	r6, r1
 8006320:	4614      	mov	r4, r2
 8006322:	4605      	mov	r5, r0
 8006324:	b118      	cbz	r0, 800632e <__swbuf_r+0x12>
 8006326:	6983      	ldr	r3, [r0, #24]
 8006328:	b90b      	cbnz	r3, 800632e <__swbuf_r+0x12>
 800632a:	f000 f9d9 	bl	80066e0 <__sinit>
 800632e:	4b21      	ldr	r3, [pc, #132]	; (80063b4 <__swbuf_r+0x98>)
 8006330:	429c      	cmp	r4, r3
 8006332:	d12b      	bne.n	800638c <__swbuf_r+0x70>
 8006334:	686c      	ldr	r4, [r5, #4]
 8006336:	69a3      	ldr	r3, [r4, #24]
 8006338:	60a3      	str	r3, [r4, #8]
 800633a:	89a3      	ldrh	r3, [r4, #12]
 800633c:	071a      	lsls	r2, r3, #28
 800633e:	d52f      	bpl.n	80063a0 <__swbuf_r+0x84>
 8006340:	6923      	ldr	r3, [r4, #16]
 8006342:	b36b      	cbz	r3, 80063a0 <__swbuf_r+0x84>
 8006344:	6923      	ldr	r3, [r4, #16]
 8006346:	6820      	ldr	r0, [r4, #0]
 8006348:	1ac0      	subs	r0, r0, r3
 800634a:	6963      	ldr	r3, [r4, #20]
 800634c:	b2f6      	uxtb	r6, r6
 800634e:	4283      	cmp	r3, r0
 8006350:	4637      	mov	r7, r6
 8006352:	dc04      	bgt.n	800635e <__swbuf_r+0x42>
 8006354:	4621      	mov	r1, r4
 8006356:	4628      	mov	r0, r5
 8006358:	f000 f92e 	bl	80065b8 <_fflush_r>
 800635c:	bb30      	cbnz	r0, 80063ac <__swbuf_r+0x90>
 800635e:	68a3      	ldr	r3, [r4, #8]
 8006360:	3b01      	subs	r3, #1
 8006362:	60a3      	str	r3, [r4, #8]
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	1c5a      	adds	r2, r3, #1
 8006368:	6022      	str	r2, [r4, #0]
 800636a:	701e      	strb	r6, [r3, #0]
 800636c:	6963      	ldr	r3, [r4, #20]
 800636e:	3001      	adds	r0, #1
 8006370:	4283      	cmp	r3, r0
 8006372:	d004      	beq.n	800637e <__swbuf_r+0x62>
 8006374:	89a3      	ldrh	r3, [r4, #12]
 8006376:	07db      	lsls	r3, r3, #31
 8006378:	d506      	bpl.n	8006388 <__swbuf_r+0x6c>
 800637a:	2e0a      	cmp	r6, #10
 800637c:	d104      	bne.n	8006388 <__swbuf_r+0x6c>
 800637e:	4621      	mov	r1, r4
 8006380:	4628      	mov	r0, r5
 8006382:	f000 f919 	bl	80065b8 <_fflush_r>
 8006386:	b988      	cbnz	r0, 80063ac <__swbuf_r+0x90>
 8006388:	4638      	mov	r0, r7
 800638a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800638c:	4b0a      	ldr	r3, [pc, #40]	; (80063b8 <__swbuf_r+0x9c>)
 800638e:	429c      	cmp	r4, r3
 8006390:	d101      	bne.n	8006396 <__swbuf_r+0x7a>
 8006392:	68ac      	ldr	r4, [r5, #8]
 8006394:	e7cf      	b.n	8006336 <__swbuf_r+0x1a>
 8006396:	4b09      	ldr	r3, [pc, #36]	; (80063bc <__swbuf_r+0xa0>)
 8006398:	429c      	cmp	r4, r3
 800639a:	bf08      	it	eq
 800639c:	68ec      	ldreq	r4, [r5, #12]
 800639e:	e7ca      	b.n	8006336 <__swbuf_r+0x1a>
 80063a0:	4621      	mov	r1, r4
 80063a2:	4628      	mov	r0, r5
 80063a4:	f000 f80c 	bl	80063c0 <__swsetup_r>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d0cb      	beq.n	8006344 <__swbuf_r+0x28>
 80063ac:	f04f 37ff 	mov.w	r7, #4294967295
 80063b0:	e7ea      	b.n	8006388 <__swbuf_r+0x6c>
 80063b2:	bf00      	nop
 80063b4:	080071d4 	.word	0x080071d4
 80063b8:	080071f4 	.word	0x080071f4
 80063bc:	080071b4 	.word	0x080071b4

080063c0 <__swsetup_r>:
 80063c0:	4b32      	ldr	r3, [pc, #200]	; (800648c <__swsetup_r+0xcc>)
 80063c2:	b570      	push	{r4, r5, r6, lr}
 80063c4:	681d      	ldr	r5, [r3, #0]
 80063c6:	4606      	mov	r6, r0
 80063c8:	460c      	mov	r4, r1
 80063ca:	b125      	cbz	r5, 80063d6 <__swsetup_r+0x16>
 80063cc:	69ab      	ldr	r3, [r5, #24]
 80063ce:	b913      	cbnz	r3, 80063d6 <__swsetup_r+0x16>
 80063d0:	4628      	mov	r0, r5
 80063d2:	f000 f985 	bl	80066e0 <__sinit>
 80063d6:	4b2e      	ldr	r3, [pc, #184]	; (8006490 <__swsetup_r+0xd0>)
 80063d8:	429c      	cmp	r4, r3
 80063da:	d10f      	bne.n	80063fc <__swsetup_r+0x3c>
 80063dc:	686c      	ldr	r4, [r5, #4]
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063e4:	0719      	lsls	r1, r3, #28
 80063e6:	d42c      	bmi.n	8006442 <__swsetup_r+0x82>
 80063e8:	06dd      	lsls	r5, r3, #27
 80063ea:	d411      	bmi.n	8006410 <__swsetup_r+0x50>
 80063ec:	2309      	movs	r3, #9
 80063ee:	6033      	str	r3, [r6, #0]
 80063f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063f4:	81a3      	strh	r3, [r4, #12]
 80063f6:	f04f 30ff 	mov.w	r0, #4294967295
 80063fa:	e03e      	b.n	800647a <__swsetup_r+0xba>
 80063fc:	4b25      	ldr	r3, [pc, #148]	; (8006494 <__swsetup_r+0xd4>)
 80063fe:	429c      	cmp	r4, r3
 8006400:	d101      	bne.n	8006406 <__swsetup_r+0x46>
 8006402:	68ac      	ldr	r4, [r5, #8]
 8006404:	e7eb      	b.n	80063de <__swsetup_r+0x1e>
 8006406:	4b24      	ldr	r3, [pc, #144]	; (8006498 <__swsetup_r+0xd8>)
 8006408:	429c      	cmp	r4, r3
 800640a:	bf08      	it	eq
 800640c:	68ec      	ldreq	r4, [r5, #12]
 800640e:	e7e6      	b.n	80063de <__swsetup_r+0x1e>
 8006410:	0758      	lsls	r0, r3, #29
 8006412:	d512      	bpl.n	800643a <__swsetup_r+0x7a>
 8006414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006416:	b141      	cbz	r1, 800642a <__swsetup_r+0x6a>
 8006418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800641c:	4299      	cmp	r1, r3
 800641e:	d002      	beq.n	8006426 <__swsetup_r+0x66>
 8006420:	4630      	mov	r0, r6
 8006422:	f7ff fa41 	bl	80058a8 <_free_r>
 8006426:	2300      	movs	r3, #0
 8006428:	6363      	str	r3, [r4, #52]	; 0x34
 800642a:	89a3      	ldrh	r3, [r4, #12]
 800642c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006430:	81a3      	strh	r3, [r4, #12]
 8006432:	2300      	movs	r3, #0
 8006434:	6063      	str	r3, [r4, #4]
 8006436:	6923      	ldr	r3, [r4, #16]
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	89a3      	ldrh	r3, [r4, #12]
 800643c:	f043 0308 	orr.w	r3, r3, #8
 8006440:	81a3      	strh	r3, [r4, #12]
 8006442:	6923      	ldr	r3, [r4, #16]
 8006444:	b94b      	cbnz	r3, 800645a <__swsetup_r+0x9a>
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800644c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006450:	d003      	beq.n	800645a <__swsetup_r+0x9a>
 8006452:	4621      	mov	r1, r4
 8006454:	4630      	mov	r0, r6
 8006456:	f000 fa09 	bl	800686c <__smakebuf_r>
 800645a:	89a0      	ldrh	r0, [r4, #12]
 800645c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006460:	f010 0301 	ands.w	r3, r0, #1
 8006464:	d00a      	beq.n	800647c <__swsetup_r+0xbc>
 8006466:	2300      	movs	r3, #0
 8006468:	60a3      	str	r3, [r4, #8]
 800646a:	6963      	ldr	r3, [r4, #20]
 800646c:	425b      	negs	r3, r3
 800646e:	61a3      	str	r3, [r4, #24]
 8006470:	6923      	ldr	r3, [r4, #16]
 8006472:	b943      	cbnz	r3, 8006486 <__swsetup_r+0xc6>
 8006474:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006478:	d1ba      	bne.n	80063f0 <__swsetup_r+0x30>
 800647a:	bd70      	pop	{r4, r5, r6, pc}
 800647c:	0781      	lsls	r1, r0, #30
 800647e:	bf58      	it	pl
 8006480:	6963      	ldrpl	r3, [r4, #20]
 8006482:	60a3      	str	r3, [r4, #8]
 8006484:	e7f4      	b.n	8006470 <__swsetup_r+0xb0>
 8006486:	2000      	movs	r0, #0
 8006488:	e7f7      	b.n	800647a <__swsetup_r+0xba>
 800648a:	bf00      	nop
 800648c:	200000d8 	.word	0x200000d8
 8006490:	080071d4 	.word	0x080071d4
 8006494:	080071f4 	.word	0x080071f4
 8006498:	080071b4 	.word	0x080071b4

0800649c <abort>:
 800649c:	b508      	push	{r3, lr}
 800649e:	2006      	movs	r0, #6
 80064a0:	f000 fab0 	bl	8006a04 <raise>
 80064a4:	2001      	movs	r0, #1
 80064a6:	f7fb f9eb 	bl	8001880 <_exit>
	...

080064ac <__sflush_r>:
 80064ac:	898a      	ldrh	r2, [r1, #12]
 80064ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b2:	4605      	mov	r5, r0
 80064b4:	0710      	lsls	r0, r2, #28
 80064b6:	460c      	mov	r4, r1
 80064b8:	d458      	bmi.n	800656c <__sflush_r+0xc0>
 80064ba:	684b      	ldr	r3, [r1, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	dc05      	bgt.n	80064cc <__sflush_r+0x20>
 80064c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	dc02      	bgt.n	80064cc <__sflush_r+0x20>
 80064c6:	2000      	movs	r0, #0
 80064c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064ce:	2e00      	cmp	r6, #0
 80064d0:	d0f9      	beq.n	80064c6 <__sflush_r+0x1a>
 80064d2:	2300      	movs	r3, #0
 80064d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064d8:	682f      	ldr	r7, [r5, #0]
 80064da:	602b      	str	r3, [r5, #0]
 80064dc:	d032      	beq.n	8006544 <__sflush_r+0x98>
 80064de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064e0:	89a3      	ldrh	r3, [r4, #12]
 80064e2:	075a      	lsls	r2, r3, #29
 80064e4:	d505      	bpl.n	80064f2 <__sflush_r+0x46>
 80064e6:	6863      	ldr	r3, [r4, #4]
 80064e8:	1ac0      	subs	r0, r0, r3
 80064ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064ec:	b10b      	cbz	r3, 80064f2 <__sflush_r+0x46>
 80064ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064f0:	1ac0      	subs	r0, r0, r3
 80064f2:	2300      	movs	r3, #0
 80064f4:	4602      	mov	r2, r0
 80064f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064f8:	6a21      	ldr	r1, [r4, #32]
 80064fa:	4628      	mov	r0, r5
 80064fc:	47b0      	blx	r6
 80064fe:	1c43      	adds	r3, r0, #1
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	d106      	bne.n	8006512 <__sflush_r+0x66>
 8006504:	6829      	ldr	r1, [r5, #0]
 8006506:	291d      	cmp	r1, #29
 8006508:	d82c      	bhi.n	8006564 <__sflush_r+0xb8>
 800650a:	4a2a      	ldr	r2, [pc, #168]	; (80065b4 <__sflush_r+0x108>)
 800650c:	40ca      	lsrs	r2, r1
 800650e:	07d6      	lsls	r6, r2, #31
 8006510:	d528      	bpl.n	8006564 <__sflush_r+0xb8>
 8006512:	2200      	movs	r2, #0
 8006514:	6062      	str	r2, [r4, #4]
 8006516:	04d9      	lsls	r1, r3, #19
 8006518:	6922      	ldr	r2, [r4, #16]
 800651a:	6022      	str	r2, [r4, #0]
 800651c:	d504      	bpl.n	8006528 <__sflush_r+0x7c>
 800651e:	1c42      	adds	r2, r0, #1
 8006520:	d101      	bne.n	8006526 <__sflush_r+0x7a>
 8006522:	682b      	ldr	r3, [r5, #0]
 8006524:	b903      	cbnz	r3, 8006528 <__sflush_r+0x7c>
 8006526:	6560      	str	r0, [r4, #84]	; 0x54
 8006528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800652a:	602f      	str	r7, [r5, #0]
 800652c:	2900      	cmp	r1, #0
 800652e:	d0ca      	beq.n	80064c6 <__sflush_r+0x1a>
 8006530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006534:	4299      	cmp	r1, r3
 8006536:	d002      	beq.n	800653e <__sflush_r+0x92>
 8006538:	4628      	mov	r0, r5
 800653a:	f7ff f9b5 	bl	80058a8 <_free_r>
 800653e:	2000      	movs	r0, #0
 8006540:	6360      	str	r0, [r4, #52]	; 0x34
 8006542:	e7c1      	b.n	80064c8 <__sflush_r+0x1c>
 8006544:	6a21      	ldr	r1, [r4, #32]
 8006546:	2301      	movs	r3, #1
 8006548:	4628      	mov	r0, r5
 800654a:	47b0      	blx	r6
 800654c:	1c41      	adds	r1, r0, #1
 800654e:	d1c7      	bne.n	80064e0 <__sflush_r+0x34>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0c4      	beq.n	80064e0 <__sflush_r+0x34>
 8006556:	2b1d      	cmp	r3, #29
 8006558:	d001      	beq.n	800655e <__sflush_r+0xb2>
 800655a:	2b16      	cmp	r3, #22
 800655c:	d101      	bne.n	8006562 <__sflush_r+0xb6>
 800655e:	602f      	str	r7, [r5, #0]
 8006560:	e7b1      	b.n	80064c6 <__sflush_r+0x1a>
 8006562:	89a3      	ldrh	r3, [r4, #12]
 8006564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006568:	81a3      	strh	r3, [r4, #12]
 800656a:	e7ad      	b.n	80064c8 <__sflush_r+0x1c>
 800656c:	690f      	ldr	r7, [r1, #16]
 800656e:	2f00      	cmp	r7, #0
 8006570:	d0a9      	beq.n	80064c6 <__sflush_r+0x1a>
 8006572:	0793      	lsls	r3, r2, #30
 8006574:	680e      	ldr	r6, [r1, #0]
 8006576:	bf08      	it	eq
 8006578:	694b      	ldreq	r3, [r1, #20]
 800657a:	600f      	str	r7, [r1, #0]
 800657c:	bf18      	it	ne
 800657e:	2300      	movne	r3, #0
 8006580:	eba6 0807 	sub.w	r8, r6, r7
 8006584:	608b      	str	r3, [r1, #8]
 8006586:	f1b8 0f00 	cmp.w	r8, #0
 800658a:	dd9c      	ble.n	80064c6 <__sflush_r+0x1a>
 800658c:	6a21      	ldr	r1, [r4, #32]
 800658e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006590:	4643      	mov	r3, r8
 8006592:	463a      	mov	r2, r7
 8006594:	4628      	mov	r0, r5
 8006596:	47b0      	blx	r6
 8006598:	2800      	cmp	r0, #0
 800659a:	dc06      	bgt.n	80065aa <__sflush_r+0xfe>
 800659c:	89a3      	ldrh	r3, [r4, #12]
 800659e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065a2:	81a3      	strh	r3, [r4, #12]
 80065a4:	f04f 30ff 	mov.w	r0, #4294967295
 80065a8:	e78e      	b.n	80064c8 <__sflush_r+0x1c>
 80065aa:	4407      	add	r7, r0
 80065ac:	eba8 0800 	sub.w	r8, r8, r0
 80065b0:	e7e9      	b.n	8006586 <__sflush_r+0xda>
 80065b2:	bf00      	nop
 80065b4:	20400001 	.word	0x20400001

080065b8 <_fflush_r>:
 80065b8:	b538      	push	{r3, r4, r5, lr}
 80065ba:	690b      	ldr	r3, [r1, #16]
 80065bc:	4605      	mov	r5, r0
 80065be:	460c      	mov	r4, r1
 80065c0:	b913      	cbnz	r3, 80065c8 <_fflush_r+0x10>
 80065c2:	2500      	movs	r5, #0
 80065c4:	4628      	mov	r0, r5
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	b118      	cbz	r0, 80065d2 <_fflush_r+0x1a>
 80065ca:	6983      	ldr	r3, [r0, #24]
 80065cc:	b90b      	cbnz	r3, 80065d2 <_fflush_r+0x1a>
 80065ce:	f000 f887 	bl	80066e0 <__sinit>
 80065d2:	4b14      	ldr	r3, [pc, #80]	; (8006624 <_fflush_r+0x6c>)
 80065d4:	429c      	cmp	r4, r3
 80065d6:	d11b      	bne.n	8006610 <_fflush_r+0x58>
 80065d8:	686c      	ldr	r4, [r5, #4]
 80065da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0ef      	beq.n	80065c2 <_fflush_r+0xa>
 80065e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065e4:	07d0      	lsls	r0, r2, #31
 80065e6:	d404      	bmi.n	80065f2 <_fflush_r+0x3a>
 80065e8:	0599      	lsls	r1, r3, #22
 80065ea:	d402      	bmi.n	80065f2 <_fflush_r+0x3a>
 80065ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065ee:	f000 f915 	bl	800681c <__retarget_lock_acquire_recursive>
 80065f2:	4628      	mov	r0, r5
 80065f4:	4621      	mov	r1, r4
 80065f6:	f7ff ff59 	bl	80064ac <__sflush_r>
 80065fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065fc:	07da      	lsls	r2, r3, #31
 80065fe:	4605      	mov	r5, r0
 8006600:	d4e0      	bmi.n	80065c4 <_fflush_r+0xc>
 8006602:	89a3      	ldrh	r3, [r4, #12]
 8006604:	059b      	lsls	r3, r3, #22
 8006606:	d4dd      	bmi.n	80065c4 <_fflush_r+0xc>
 8006608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800660a:	f000 f908 	bl	800681e <__retarget_lock_release_recursive>
 800660e:	e7d9      	b.n	80065c4 <_fflush_r+0xc>
 8006610:	4b05      	ldr	r3, [pc, #20]	; (8006628 <_fflush_r+0x70>)
 8006612:	429c      	cmp	r4, r3
 8006614:	d101      	bne.n	800661a <_fflush_r+0x62>
 8006616:	68ac      	ldr	r4, [r5, #8]
 8006618:	e7df      	b.n	80065da <_fflush_r+0x22>
 800661a:	4b04      	ldr	r3, [pc, #16]	; (800662c <_fflush_r+0x74>)
 800661c:	429c      	cmp	r4, r3
 800661e:	bf08      	it	eq
 8006620:	68ec      	ldreq	r4, [r5, #12]
 8006622:	e7da      	b.n	80065da <_fflush_r+0x22>
 8006624:	080071d4 	.word	0x080071d4
 8006628:	080071f4 	.word	0x080071f4
 800662c:	080071b4 	.word	0x080071b4

08006630 <std>:
 8006630:	2300      	movs	r3, #0
 8006632:	b510      	push	{r4, lr}
 8006634:	4604      	mov	r4, r0
 8006636:	e9c0 3300 	strd	r3, r3, [r0]
 800663a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800663e:	6083      	str	r3, [r0, #8]
 8006640:	8181      	strh	r1, [r0, #12]
 8006642:	6643      	str	r3, [r0, #100]	; 0x64
 8006644:	81c2      	strh	r2, [r0, #14]
 8006646:	6183      	str	r3, [r0, #24]
 8006648:	4619      	mov	r1, r3
 800664a:	2208      	movs	r2, #8
 800664c:	305c      	adds	r0, #92	; 0x5c
 800664e:	f7fe ff69 	bl	8005524 <memset>
 8006652:	4b05      	ldr	r3, [pc, #20]	; (8006668 <std+0x38>)
 8006654:	6263      	str	r3, [r4, #36]	; 0x24
 8006656:	4b05      	ldr	r3, [pc, #20]	; (800666c <std+0x3c>)
 8006658:	62a3      	str	r3, [r4, #40]	; 0x28
 800665a:	4b05      	ldr	r3, [pc, #20]	; (8006670 <std+0x40>)
 800665c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800665e:	4b05      	ldr	r3, [pc, #20]	; (8006674 <std+0x44>)
 8006660:	6224      	str	r4, [r4, #32]
 8006662:	6323      	str	r3, [r4, #48]	; 0x30
 8006664:	bd10      	pop	{r4, pc}
 8006666:	bf00      	nop
 8006668:	08006a3d 	.word	0x08006a3d
 800666c:	08006a5f 	.word	0x08006a5f
 8006670:	08006a97 	.word	0x08006a97
 8006674:	08006abb 	.word	0x08006abb

08006678 <_cleanup_r>:
 8006678:	4901      	ldr	r1, [pc, #4]	; (8006680 <_cleanup_r+0x8>)
 800667a:	f000 b8af 	b.w	80067dc <_fwalk_reent>
 800667e:	bf00      	nop
 8006680:	080065b9 	.word	0x080065b9

08006684 <__sfmoreglue>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	2268      	movs	r2, #104	; 0x68
 8006688:	1e4d      	subs	r5, r1, #1
 800668a:	4355      	muls	r5, r2
 800668c:	460e      	mov	r6, r1
 800668e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006692:	f7ff f975 	bl	8005980 <_malloc_r>
 8006696:	4604      	mov	r4, r0
 8006698:	b140      	cbz	r0, 80066ac <__sfmoreglue+0x28>
 800669a:	2100      	movs	r1, #0
 800669c:	e9c0 1600 	strd	r1, r6, [r0]
 80066a0:	300c      	adds	r0, #12
 80066a2:	60a0      	str	r0, [r4, #8]
 80066a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80066a8:	f7fe ff3c 	bl	8005524 <memset>
 80066ac:	4620      	mov	r0, r4
 80066ae:	bd70      	pop	{r4, r5, r6, pc}

080066b0 <__sfp_lock_acquire>:
 80066b0:	4801      	ldr	r0, [pc, #4]	; (80066b8 <__sfp_lock_acquire+0x8>)
 80066b2:	f000 b8b3 	b.w	800681c <__retarget_lock_acquire_recursive>
 80066b6:	bf00      	nop
 80066b8:	20000891 	.word	0x20000891

080066bc <__sfp_lock_release>:
 80066bc:	4801      	ldr	r0, [pc, #4]	; (80066c4 <__sfp_lock_release+0x8>)
 80066be:	f000 b8ae 	b.w	800681e <__retarget_lock_release_recursive>
 80066c2:	bf00      	nop
 80066c4:	20000891 	.word	0x20000891

080066c8 <__sinit_lock_acquire>:
 80066c8:	4801      	ldr	r0, [pc, #4]	; (80066d0 <__sinit_lock_acquire+0x8>)
 80066ca:	f000 b8a7 	b.w	800681c <__retarget_lock_acquire_recursive>
 80066ce:	bf00      	nop
 80066d0:	20000892 	.word	0x20000892

080066d4 <__sinit_lock_release>:
 80066d4:	4801      	ldr	r0, [pc, #4]	; (80066dc <__sinit_lock_release+0x8>)
 80066d6:	f000 b8a2 	b.w	800681e <__retarget_lock_release_recursive>
 80066da:	bf00      	nop
 80066dc:	20000892 	.word	0x20000892

080066e0 <__sinit>:
 80066e0:	b510      	push	{r4, lr}
 80066e2:	4604      	mov	r4, r0
 80066e4:	f7ff fff0 	bl	80066c8 <__sinit_lock_acquire>
 80066e8:	69a3      	ldr	r3, [r4, #24]
 80066ea:	b11b      	cbz	r3, 80066f4 <__sinit+0x14>
 80066ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066f0:	f7ff bff0 	b.w	80066d4 <__sinit_lock_release>
 80066f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80066f8:	6523      	str	r3, [r4, #80]	; 0x50
 80066fa:	4b13      	ldr	r3, [pc, #76]	; (8006748 <__sinit+0x68>)
 80066fc:	4a13      	ldr	r2, [pc, #76]	; (800674c <__sinit+0x6c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	62a2      	str	r2, [r4, #40]	; 0x28
 8006702:	42a3      	cmp	r3, r4
 8006704:	bf04      	itt	eq
 8006706:	2301      	moveq	r3, #1
 8006708:	61a3      	streq	r3, [r4, #24]
 800670a:	4620      	mov	r0, r4
 800670c:	f000 f820 	bl	8006750 <__sfp>
 8006710:	6060      	str	r0, [r4, #4]
 8006712:	4620      	mov	r0, r4
 8006714:	f000 f81c 	bl	8006750 <__sfp>
 8006718:	60a0      	str	r0, [r4, #8]
 800671a:	4620      	mov	r0, r4
 800671c:	f000 f818 	bl	8006750 <__sfp>
 8006720:	2200      	movs	r2, #0
 8006722:	60e0      	str	r0, [r4, #12]
 8006724:	2104      	movs	r1, #4
 8006726:	6860      	ldr	r0, [r4, #4]
 8006728:	f7ff ff82 	bl	8006630 <std>
 800672c:	68a0      	ldr	r0, [r4, #8]
 800672e:	2201      	movs	r2, #1
 8006730:	2109      	movs	r1, #9
 8006732:	f7ff ff7d 	bl	8006630 <std>
 8006736:	68e0      	ldr	r0, [r4, #12]
 8006738:	2202      	movs	r2, #2
 800673a:	2112      	movs	r1, #18
 800673c:	f7ff ff78 	bl	8006630 <std>
 8006740:	2301      	movs	r3, #1
 8006742:	61a3      	str	r3, [r4, #24]
 8006744:	e7d2      	b.n	80066ec <__sinit+0xc>
 8006746:	bf00      	nop
 8006748:	08006fa4 	.word	0x08006fa4
 800674c:	08006679 	.word	0x08006679

08006750 <__sfp>:
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	4607      	mov	r7, r0
 8006754:	f7ff ffac 	bl	80066b0 <__sfp_lock_acquire>
 8006758:	4b1e      	ldr	r3, [pc, #120]	; (80067d4 <__sfp+0x84>)
 800675a:	681e      	ldr	r6, [r3, #0]
 800675c:	69b3      	ldr	r3, [r6, #24]
 800675e:	b913      	cbnz	r3, 8006766 <__sfp+0x16>
 8006760:	4630      	mov	r0, r6
 8006762:	f7ff ffbd 	bl	80066e0 <__sinit>
 8006766:	3648      	adds	r6, #72	; 0x48
 8006768:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800676c:	3b01      	subs	r3, #1
 800676e:	d503      	bpl.n	8006778 <__sfp+0x28>
 8006770:	6833      	ldr	r3, [r6, #0]
 8006772:	b30b      	cbz	r3, 80067b8 <__sfp+0x68>
 8006774:	6836      	ldr	r6, [r6, #0]
 8006776:	e7f7      	b.n	8006768 <__sfp+0x18>
 8006778:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800677c:	b9d5      	cbnz	r5, 80067b4 <__sfp+0x64>
 800677e:	4b16      	ldr	r3, [pc, #88]	; (80067d8 <__sfp+0x88>)
 8006780:	60e3      	str	r3, [r4, #12]
 8006782:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006786:	6665      	str	r5, [r4, #100]	; 0x64
 8006788:	f000 f847 	bl	800681a <__retarget_lock_init_recursive>
 800678c:	f7ff ff96 	bl	80066bc <__sfp_lock_release>
 8006790:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006794:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006798:	6025      	str	r5, [r4, #0]
 800679a:	61a5      	str	r5, [r4, #24]
 800679c:	2208      	movs	r2, #8
 800679e:	4629      	mov	r1, r5
 80067a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80067a4:	f7fe febe 	bl	8005524 <memset>
 80067a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80067ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80067b0:	4620      	mov	r0, r4
 80067b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b4:	3468      	adds	r4, #104	; 0x68
 80067b6:	e7d9      	b.n	800676c <__sfp+0x1c>
 80067b8:	2104      	movs	r1, #4
 80067ba:	4638      	mov	r0, r7
 80067bc:	f7ff ff62 	bl	8006684 <__sfmoreglue>
 80067c0:	4604      	mov	r4, r0
 80067c2:	6030      	str	r0, [r6, #0]
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d1d5      	bne.n	8006774 <__sfp+0x24>
 80067c8:	f7ff ff78 	bl	80066bc <__sfp_lock_release>
 80067cc:	230c      	movs	r3, #12
 80067ce:	603b      	str	r3, [r7, #0]
 80067d0:	e7ee      	b.n	80067b0 <__sfp+0x60>
 80067d2:	bf00      	nop
 80067d4:	08006fa4 	.word	0x08006fa4
 80067d8:	ffff0001 	.word	0xffff0001

080067dc <_fwalk_reent>:
 80067dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067e0:	4606      	mov	r6, r0
 80067e2:	4688      	mov	r8, r1
 80067e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80067e8:	2700      	movs	r7, #0
 80067ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067ee:	f1b9 0901 	subs.w	r9, r9, #1
 80067f2:	d505      	bpl.n	8006800 <_fwalk_reent+0x24>
 80067f4:	6824      	ldr	r4, [r4, #0]
 80067f6:	2c00      	cmp	r4, #0
 80067f8:	d1f7      	bne.n	80067ea <_fwalk_reent+0xe>
 80067fa:	4638      	mov	r0, r7
 80067fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006800:	89ab      	ldrh	r3, [r5, #12]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d907      	bls.n	8006816 <_fwalk_reent+0x3a>
 8006806:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800680a:	3301      	adds	r3, #1
 800680c:	d003      	beq.n	8006816 <_fwalk_reent+0x3a>
 800680e:	4629      	mov	r1, r5
 8006810:	4630      	mov	r0, r6
 8006812:	47c0      	blx	r8
 8006814:	4307      	orrs	r7, r0
 8006816:	3568      	adds	r5, #104	; 0x68
 8006818:	e7e9      	b.n	80067ee <_fwalk_reent+0x12>

0800681a <__retarget_lock_init_recursive>:
 800681a:	4770      	bx	lr

0800681c <__retarget_lock_acquire_recursive>:
 800681c:	4770      	bx	lr

0800681e <__retarget_lock_release_recursive>:
 800681e:	4770      	bx	lr

08006820 <__swhatbuf_r>:
 8006820:	b570      	push	{r4, r5, r6, lr}
 8006822:	460e      	mov	r6, r1
 8006824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006828:	2900      	cmp	r1, #0
 800682a:	b096      	sub	sp, #88	; 0x58
 800682c:	4614      	mov	r4, r2
 800682e:	461d      	mov	r5, r3
 8006830:	da08      	bge.n	8006844 <__swhatbuf_r+0x24>
 8006832:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	602a      	str	r2, [r5, #0]
 800683a:	061a      	lsls	r2, r3, #24
 800683c:	d410      	bmi.n	8006860 <__swhatbuf_r+0x40>
 800683e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006842:	e00e      	b.n	8006862 <__swhatbuf_r+0x42>
 8006844:	466a      	mov	r2, sp
 8006846:	f000 f95f 	bl	8006b08 <_fstat_r>
 800684a:	2800      	cmp	r0, #0
 800684c:	dbf1      	blt.n	8006832 <__swhatbuf_r+0x12>
 800684e:	9a01      	ldr	r2, [sp, #4]
 8006850:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006854:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006858:	425a      	negs	r2, r3
 800685a:	415a      	adcs	r2, r3
 800685c:	602a      	str	r2, [r5, #0]
 800685e:	e7ee      	b.n	800683e <__swhatbuf_r+0x1e>
 8006860:	2340      	movs	r3, #64	; 0x40
 8006862:	2000      	movs	r0, #0
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	b016      	add	sp, #88	; 0x58
 8006868:	bd70      	pop	{r4, r5, r6, pc}
	...

0800686c <__smakebuf_r>:
 800686c:	898b      	ldrh	r3, [r1, #12]
 800686e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006870:	079d      	lsls	r5, r3, #30
 8006872:	4606      	mov	r6, r0
 8006874:	460c      	mov	r4, r1
 8006876:	d507      	bpl.n	8006888 <__smakebuf_r+0x1c>
 8006878:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	6123      	str	r3, [r4, #16]
 8006880:	2301      	movs	r3, #1
 8006882:	6163      	str	r3, [r4, #20]
 8006884:	b002      	add	sp, #8
 8006886:	bd70      	pop	{r4, r5, r6, pc}
 8006888:	ab01      	add	r3, sp, #4
 800688a:	466a      	mov	r2, sp
 800688c:	f7ff ffc8 	bl	8006820 <__swhatbuf_r>
 8006890:	9900      	ldr	r1, [sp, #0]
 8006892:	4605      	mov	r5, r0
 8006894:	4630      	mov	r0, r6
 8006896:	f7ff f873 	bl	8005980 <_malloc_r>
 800689a:	b948      	cbnz	r0, 80068b0 <__smakebuf_r+0x44>
 800689c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068a0:	059a      	lsls	r2, r3, #22
 80068a2:	d4ef      	bmi.n	8006884 <__smakebuf_r+0x18>
 80068a4:	f023 0303 	bic.w	r3, r3, #3
 80068a8:	f043 0302 	orr.w	r3, r3, #2
 80068ac:	81a3      	strh	r3, [r4, #12]
 80068ae:	e7e3      	b.n	8006878 <__smakebuf_r+0xc>
 80068b0:	4b0d      	ldr	r3, [pc, #52]	; (80068e8 <__smakebuf_r+0x7c>)
 80068b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80068b4:	89a3      	ldrh	r3, [r4, #12]
 80068b6:	6020      	str	r0, [r4, #0]
 80068b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068bc:	81a3      	strh	r3, [r4, #12]
 80068be:	9b00      	ldr	r3, [sp, #0]
 80068c0:	6163      	str	r3, [r4, #20]
 80068c2:	9b01      	ldr	r3, [sp, #4]
 80068c4:	6120      	str	r0, [r4, #16]
 80068c6:	b15b      	cbz	r3, 80068e0 <__smakebuf_r+0x74>
 80068c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068cc:	4630      	mov	r0, r6
 80068ce:	f000 f92d 	bl	8006b2c <_isatty_r>
 80068d2:	b128      	cbz	r0, 80068e0 <__smakebuf_r+0x74>
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	f023 0303 	bic.w	r3, r3, #3
 80068da:	f043 0301 	orr.w	r3, r3, #1
 80068de:	81a3      	strh	r3, [r4, #12]
 80068e0:	89a0      	ldrh	r0, [r4, #12]
 80068e2:	4305      	orrs	r5, r0
 80068e4:	81a5      	strh	r5, [r4, #12]
 80068e6:	e7cd      	b.n	8006884 <__smakebuf_r+0x18>
 80068e8:	08006679 	.word	0x08006679

080068ec <memcpy>:
 80068ec:	440a      	add	r2, r1
 80068ee:	4291      	cmp	r1, r2
 80068f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80068f4:	d100      	bne.n	80068f8 <memcpy+0xc>
 80068f6:	4770      	bx	lr
 80068f8:	b510      	push	{r4, lr}
 80068fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006902:	4291      	cmp	r1, r2
 8006904:	d1f9      	bne.n	80068fa <memcpy+0xe>
 8006906:	bd10      	pop	{r4, pc}

08006908 <memmove>:
 8006908:	4288      	cmp	r0, r1
 800690a:	b510      	push	{r4, lr}
 800690c:	eb01 0402 	add.w	r4, r1, r2
 8006910:	d902      	bls.n	8006918 <memmove+0x10>
 8006912:	4284      	cmp	r4, r0
 8006914:	4623      	mov	r3, r4
 8006916:	d807      	bhi.n	8006928 <memmove+0x20>
 8006918:	1e43      	subs	r3, r0, #1
 800691a:	42a1      	cmp	r1, r4
 800691c:	d008      	beq.n	8006930 <memmove+0x28>
 800691e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006922:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006926:	e7f8      	b.n	800691a <memmove+0x12>
 8006928:	4402      	add	r2, r0
 800692a:	4601      	mov	r1, r0
 800692c:	428a      	cmp	r2, r1
 800692e:	d100      	bne.n	8006932 <memmove+0x2a>
 8006930:	bd10      	pop	{r4, pc}
 8006932:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006936:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800693a:	e7f7      	b.n	800692c <memmove+0x24>

0800693c <__malloc_lock>:
 800693c:	4801      	ldr	r0, [pc, #4]	; (8006944 <__malloc_lock+0x8>)
 800693e:	f7ff bf6d 	b.w	800681c <__retarget_lock_acquire_recursive>
 8006942:	bf00      	nop
 8006944:	20000890 	.word	0x20000890

08006948 <__malloc_unlock>:
 8006948:	4801      	ldr	r0, [pc, #4]	; (8006950 <__malloc_unlock+0x8>)
 800694a:	f7ff bf68 	b.w	800681e <__retarget_lock_release_recursive>
 800694e:	bf00      	nop
 8006950:	20000890 	.word	0x20000890

08006954 <_realloc_r>:
 8006954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006958:	4680      	mov	r8, r0
 800695a:	4614      	mov	r4, r2
 800695c:	460e      	mov	r6, r1
 800695e:	b921      	cbnz	r1, 800696a <_realloc_r+0x16>
 8006960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006964:	4611      	mov	r1, r2
 8006966:	f7ff b80b 	b.w	8005980 <_malloc_r>
 800696a:	b92a      	cbnz	r2, 8006978 <_realloc_r+0x24>
 800696c:	f7fe ff9c 	bl	80058a8 <_free_r>
 8006970:	4625      	mov	r5, r4
 8006972:	4628      	mov	r0, r5
 8006974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006978:	f000 f8fa 	bl	8006b70 <_malloc_usable_size_r>
 800697c:	4284      	cmp	r4, r0
 800697e:	4607      	mov	r7, r0
 8006980:	d802      	bhi.n	8006988 <_realloc_r+0x34>
 8006982:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006986:	d812      	bhi.n	80069ae <_realloc_r+0x5a>
 8006988:	4621      	mov	r1, r4
 800698a:	4640      	mov	r0, r8
 800698c:	f7fe fff8 	bl	8005980 <_malloc_r>
 8006990:	4605      	mov	r5, r0
 8006992:	2800      	cmp	r0, #0
 8006994:	d0ed      	beq.n	8006972 <_realloc_r+0x1e>
 8006996:	42bc      	cmp	r4, r7
 8006998:	4622      	mov	r2, r4
 800699a:	4631      	mov	r1, r6
 800699c:	bf28      	it	cs
 800699e:	463a      	movcs	r2, r7
 80069a0:	f7ff ffa4 	bl	80068ec <memcpy>
 80069a4:	4631      	mov	r1, r6
 80069a6:	4640      	mov	r0, r8
 80069a8:	f7fe ff7e 	bl	80058a8 <_free_r>
 80069ac:	e7e1      	b.n	8006972 <_realloc_r+0x1e>
 80069ae:	4635      	mov	r5, r6
 80069b0:	e7df      	b.n	8006972 <_realloc_r+0x1e>

080069b2 <_raise_r>:
 80069b2:	291f      	cmp	r1, #31
 80069b4:	b538      	push	{r3, r4, r5, lr}
 80069b6:	4604      	mov	r4, r0
 80069b8:	460d      	mov	r5, r1
 80069ba:	d904      	bls.n	80069c6 <_raise_r+0x14>
 80069bc:	2316      	movs	r3, #22
 80069be:	6003      	str	r3, [r0, #0]
 80069c0:	f04f 30ff 	mov.w	r0, #4294967295
 80069c4:	bd38      	pop	{r3, r4, r5, pc}
 80069c6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80069c8:	b112      	cbz	r2, 80069d0 <_raise_r+0x1e>
 80069ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069ce:	b94b      	cbnz	r3, 80069e4 <_raise_r+0x32>
 80069d0:	4620      	mov	r0, r4
 80069d2:	f000 f831 	bl	8006a38 <_getpid_r>
 80069d6:	462a      	mov	r2, r5
 80069d8:	4601      	mov	r1, r0
 80069da:	4620      	mov	r0, r4
 80069dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069e0:	f000 b818 	b.w	8006a14 <_kill_r>
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d00a      	beq.n	80069fe <_raise_r+0x4c>
 80069e8:	1c59      	adds	r1, r3, #1
 80069ea:	d103      	bne.n	80069f4 <_raise_r+0x42>
 80069ec:	2316      	movs	r3, #22
 80069ee:	6003      	str	r3, [r0, #0]
 80069f0:	2001      	movs	r0, #1
 80069f2:	e7e7      	b.n	80069c4 <_raise_r+0x12>
 80069f4:	2400      	movs	r4, #0
 80069f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80069fa:	4628      	mov	r0, r5
 80069fc:	4798      	blx	r3
 80069fe:	2000      	movs	r0, #0
 8006a00:	e7e0      	b.n	80069c4 <_raise_r+0x12>
	...

08006a04 <raise>:
 8006a04:	4b02      	ldr	r3, [pc, #8]	; (8006a10 <raise+0xc>)
 8006a06:	4601      	mov	r1, r0
 8006a08:	6818      	ldr	r0, [r3, #0]
 8006a0a:	f7ff bfd2 	b.w	80069b2 <_raise_r>
 8006a0e:	bf00      	nop
 8006a10:	200000d8 	.word	0x200000d8

08006a14 <_kill_r>:
 8006a14:	b538      	push	{r3, r4, r5, lr}
 8006a16:	4d07      	ldr	r5, [pc, #28]	; (8006a34 <_kill_r+0x20>)
 8006a18:	2300      	movs	r3, #0
 8006a1a:	4604      	mov	r4, r0
 8006a1c:	4608      	mov	r0, r1
 8006a1e:	4611      	mov	r1, r2
 8006a20:	602b      	str	r3, [r5, #0]
 8006a22:	f7fa ff1d 	bl	8001860 <_kill>
 8006a26:	1c43      	adds	r3, r0, #1
 8006a28:	d102      	bne.n	8006a30 <_kill_r+0x1c>
 8006a2a:	682b      	ldr	r3, [r5, #0]
 8006a2c:	b103      	cbz	r3, 8006a30 <_kill_r+0x1c>
 8006a2e:	6023      	str	r3, [r4, #0]
 8006a30:	bd38      	pop	{r3, r4, r5, pc}
 8006a32:	bf00      	nop
 8006a34:	20000894 	.word	0x20000894

08006a38 <_getpid_r>:
 8006a38:	f7fa bf0a 	b.w	8001850 <_getpid>

08006a3c <__sread>:
 8006a3c:	b510      	push	{r4, lr}
 8006a3e:	460c      	mov	r4, r1
 8006a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a44:	f000 f89c 	bl	8006b80 <_read_r>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	bfab      	itete	ge
 8006a4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a4e:	89a3      	ldrhlt	r3, [r4, #12]
 8006a50:	181b      	addge	r3, r3, r0
 8006a52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a56:	bfac      	ite	ge
 8006a58:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a5a:	81a3      	strhlt	r3, [r4, #12]
 8006a5c:	bd10      	pop	{r4, pc}

08006a5e <__swrite>:
 8006a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a62:	461f      	mov	r7, r3
 8006a64:	898b      	ldrh	r3, [r1, #12]
 8006a66:	05db      	lsls	r3, r3, #23
 8006a68:	4605      	mov	r5, r0
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	4616      	mov	r6, r2
 8006a6e:	d505      	bpl.n	8006a7c <__swrite+0x1e>
 8006a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a74:	2302      	movs	r3, #2
 8006a76:	2200      	movs	r2, #0
 8006a78:	f000 f868 	bl	8006b4c <_lseek_r>
 8006a7c:	89a3      	ldrh	r3, [r4, #12]
 8006a7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a86:	81a3      	strh	r3, [r4, #12]
 8006a88:	4632      	mov	r2, r6
 8006a8a:	463b      	mov	r3, r7
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a92:	f000 b817 	b.w	8006ac4 <_write_r>

08006a96 <__sseek>:
 8006a96:	b510      	push	{r4, lr}
 8006a98:	460c      	mov	r4, r1
 8006a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a9e:	f000 f855 	bl	8006b4c <_lseek_r>
 8006aa2:	1c43      	adds	r3, r0, #1
 8006aa4:	89a3      	ldrh	r3, [r4, #12]
 8006aa6:	bf15      	itete	ne
 8006aa8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006aaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006aae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ab2:	81a3      	strheq	r3, [r4, #12]
 8006ab4:	bf18      	it	ne
 8006ab6:	81a3      	strhne	r3, [r4, #12]
 8006ab8:	bd10      	pop	{r4, pc}

08006aba <__sclose>:
 8006aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006abe:	f000 b813 	b.w	8006ae8 <_close_r>
	...

08006ac4 <_write_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	4d07      	ldr	r5, [pc, #28]	; (8006ae4 <_write_r+0x20>)
 8006ac8:	4604      	mov	r4, r0
 8006aca:	4608      	mov	r0, r1
 8006acc:	4611      	mov	r1, r2
 8006ace:	2200      	movs	r2, #0
 8006ad0:	602a      	str	r2, [r5, #0]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	f7fa fefb 	bl	80018ce <_write>
 8006ad8:	1c43      	adds	r3, r0, #1
 8006ada:	d102      	bne.n	8006ae2 <_write_r+0x1e>
 8006adc:	682b      	ldr	r3, [r5, #0]
 8006ade:	b103      	cbz	r3, 8006ae2 <_write_r+0x1e>
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	bd38      	pop	{r3, r4, r5, pc}
 8006ae4:	20000894 	.word	0x20000894

08006ae8 <_close_r>:
 8006ae8:	b538      	push	{r3, r4, r5, lr}
 8006aea:	4d06      	ldr	r5, [pc, #24]	; (8006b04 <_close_r+0x1c>)
 8006aec:	2300      	movs	r3, #0
 8006aee:	4604      	mov	r4, r0
 8006af0:	4608      	mov	r0, r1
 8006af2:	602b      	str	r3, [r5, #0]
 8006af4:	f7fa ff07 	bl	8001906 <_close>
 8006af8:	1c43      	adds	r3, r0, #1
 8006afa:	d102      	bne.n	8006b02 <_close_r+0x1a>
 8006afc:	682b      	ldr	r3, [r5, #0]
 8006afe:	b103      	cbz	r3, 8006b02 <_close_r+0x1a>
 8006b00:	6023      	str	r3, [r4, #0]
 8006b02:	bd38      	pop	{r3, r4, r5, pc}
 8006b04:	20000894 	.word	0x20000894

08006b08 <_fstat_r>:
 8006b08:	b538      	push	{r3, r4, r5, lr}
 8006b0a:	4d07      	ldr	r5, [pc, #28]	; (8006b28 <_fstat_r+0x20>)
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	4604      	mov	r4, r0
 8006b10:	4608      	mov	r0, r1
 8006b12:	4611      	mov	r1, r2
 8006b14:	602b      	str	r3, [r5, #0]
 8006b16:	f7fa ff02 	bl	800191e <_fstat>
 8006b1a:	1c43      	adds	r3, r0, #1
 8006b1c:	d102      	bne.n	8006b24 <_fstat_r+0x1c>
 8006b1e:	682b      	ldr	r3, [r5, #0]
 8006b20:	b103      	cbz	r3, 8006b24 <_fstat_r+0x1c>
 8006b22:	6023      	str	r3, [r4, #0]
 8006b24:	bd38      	pop	{r3, r4, r5, pc}
 8006b26:	bf00      	nop
 8006b28:	20000894 	.word	0x20000894

08006b2c <_isatty_r>:
 8006b2c:	b538      	push	{r3, r4, r5, lr}
 8006b2e:	4d06      	ldr	r5, [pc, #24]	; (8006b48 <_isatty_r+0x1c>)
 8006b30:	2300      	movs	r3, #0
 8006b32:	4604      	mov	r4, r0
 8006b34:	4608      	mov	r0, r1
 8006b36:	602b      	str	r3, [r5, #0]
 8006b38:	f7fa ff01 	bl	800193e <_isatty>
 8006b3c:	1c43      	adds	r3, r0, #1
 8006b3e:	d102      	bne.n	8006b46 <_isatty_r+0x1a>
 8006b40:	682b      	ldr	r3, [r5, #0]
 8006b42:	b103      	cbz	r3, 8006b46 <_isatty_r+0x1a>
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	bd38      	pop	{r3, r4, r5, pc}
 8006b48:	20000894 	.word	0x20000894

08006b4c <_lseek_r>:
 8006b4c:	b538      	push	{r3, r4, r5, lr}
 8006b4e:	4d07      	ldr	r5, [pc, #28]	; (8006b6c <_lseek_r+0x20>)
 8006b50:	4604      	mov	r4, r0
 8006b52:	4608      	mov	r0, r1
 8006b54:	4611      	mov	r1, r2
 8006b56:	2200      	movs	r2, #0
 8006b58:	602a      	str	r2, [r5, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f7fa fefa 	bl	8001954 <_lseek>
 8006b60:	1c43      	adds	r3, r0, #1
 8006b62:	d102      	bne.n	8006b6a <_lseek_r+0x1e>
 8006b64:	682b      	ldr	r3, [r5, #0]
 8006b66:	b103      	cbz	r3, 8006b6a <_lseek_r+0x1e>
 8006b68:	6023      	str	r3, [r4, #0]
 8006b6a:	bd38      	pop	{r3, r4, r5, pc}
 8006b6c:	20000894 	.word	0x20000894

08006b70 <_malloc_usable_size_r>:
 8006b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b74:	1f18      	subs	r0, r3, #4
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	bfbc      	itt	lt
 8006b7a:	580b      	ldrlt	r3, [r1, r0]
 8006b7c:	18c0      	addlt	r0, r0, r3
 8006b7e:	4770      	bx	lr

08006b80 <_read_r>:
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	4d07      	ldr	r5, [pc, #28]	; (8006ba0 <_read_r+0x20>)
 8006b84:	4604      	mov	r4, r0
 8006b86:	4608      	mov	r0, r1
 8006b88:	4611      	mov	r1, r2
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	602a      	str	r2, [r5, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f7fa fe80 	bl	8001894 <_read>
 8006b94:	1c43      	adds	r3, r0, #1
 8006b96:	d102      	bne.n	8006b9e <_read_r+0x1e>
 8006b98:	682b      	ldr	r3, [r5, #0]
 8006b9a:	b103      	cbz	r3, 8006b9e <_read_r+0x1e>
 8006b9c:	6023      	str	r3, [r4, #0]
 8006b9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ba0:	20000894 	.word	0x20000894

08006ba4 <_init>:
 8006ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba6:	bf00      	nop
 8006ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006baa:	bc08      	pop	{r3}
 8006bac:	469e      	mov	lr, r3
 8006bae:	4770      	bx	lr

08006bb0 <_fini>:
 8006bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb2:	bf00      	nop
 8006bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb6:	bc08      	pop	{r3}
 8006bb8:	469e      	mov	lr, r3
 8006bba:	4770      	bx	lr
