
river_sense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  08009ba4  08009ba4  00019ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a29c  0800a29c  00020154  2**0
                  CONTENTS
  4 .ARM          00000008  0800a29c  0800a29c  0001a29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2a4  0800a2a4  00020154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2a4  0800a2a4  0001a2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2a8  0800a2a8  0001a2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  0800a2ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000818  20000154  0800a400  00020154  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000096c  0800a400  0002096c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a0a  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000361a  00000000  00000000  00039b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  0003d1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d8  00000000  00000000  0003e7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b8a  00000000  00000000  0003fcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b315  00000000  00000000  0006485a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d68f6  00000000  00000000  0007fb6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156465  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b48  00000000  00000000  001564b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000154 	.word	0x20000154
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b8c 	.word	0x08009b8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000158 	.word	0x20000158
 80001cc:	08009b8c 	.word	0x08009b8c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <HAL_UART_TxCpltCallback>:
/* USER CODE BEGIN 0 */


// UART Transmit Callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <HAL_UART_RxCpltCallback>:

// UART Receive Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1) {
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <HAL_UART_RxCpltCallback+0x30>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d109      	bne.n	8000d9a <HAL_UART_RxCpltCallback+0x26>
		SIM_serialRX_Handler(serialRX_Data);
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_UART_RxCpltCallback+0x34>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 fbf0 	bl	8001570 <SIM_serialRX_Handler>
		// Enabling interrupt receive again
		HAL_UART_Receive_IT(&huart1, &serialRX_Data, 1); // receive data (one character only)
 8000d90:	2201      	movs	r2, #1
 8000d92:	4905      	ldr	r1, [pc, #20]	; (8000da8 <HAL_UART_RxCpltCallback+0x34>)
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <HAL_UART_RxCpltCallback+0x38>)
 8000d96:	f005 fb11 	bl	80063bc <HAL_UART_Receive_IT>
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40013800 	.word	0x40013800
 8000da8:	2000043f 	.word	0x2000043f
 8000dac:	20000244 	.word	0x20000244

08000db0 <HAL_TIM_PeriodElapsedCallback>:

// TIM Callback (100ms)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]

	// Toggle LED; Just for fun
	if (isLD3_Flicker) {
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d004      	beq.n	8000dcc <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000dc2:	2108      	movs	r1, #8
 8000dc4:	4808      	ldr	r0, [pc, #32]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000dc6:	f002 fa77 	bl	80032b8 <HAL_GPIO_TogglePin>
 8000dca:	e004      	b.n	8000dd6 <HAL_TIM_PeriodElapsedCallback+0x26>
	}
	else {
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2108      	movs	r1, #8
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000dd2:	f002 fa59 	bl	8003288 <HAL_GPIO_WritePin>
	}

	// Call SIM Module handler
	SIM_Handler();
 8000dd6:	f000 fb9d 	bl	8001514 <SIM_Handler>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000000 	.word	0x20000000
 8000de8:	48000400 	.word	0x48000400

08000dec <set_time>:

// Set time of RTC
void set_time(void) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	// From example: 10:20:30 09-Aug-2018
	sTime.Hours = 0x10; // set hours
 8000df2:	2310      	movs	r3, #16
 8000df4:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x20; // set minutes
 8000df6:	2320      	movs	r3, #32
 8000df8:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x30; // set seconds
 8000dfa:	2330      	movs	r3, #48	; 0x30
 8000dfc:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480d      	ldr	r0, [pc, #52]	; (8000e44 <set_time+0x58>)
 8000e0e:	f003 fc8c 	bl	800472a <HAL_RTC_SetTime>


	sDate.WeekDay = RTC_WEEKDAY_THURSDAY; // day
 8000e12:	2304      	movs	r3, #4
 8000e14:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_AUGUST; // month
 8000e16:	2308      	movs	r3, #8
 8000e18:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x09; // date
 8000e1a:	2309      	movs	r3, #9
 8000e1c:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x22; // year
 8000e1e:	2322      	movs	r3, #34	; 0x22
 8000e20:	70fb      	strb	r3, [r7, #3]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8000e22:	463b      	mov	r3, r7
 8000e24:	2201      	movs	r2, #1
 8000e26:	4619      	mov	r1, r3
 8000e28:	4806      	ldr	r0, [pc, #24]	; (8000e44 <set_time+0x58>)
 8000e2a:	f003 fd77 	bl	800491c <HAL_RTC_SetDate>

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register (random value being written now)
 8000e2e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000e32:	2101      	movs	r1, #1
 8000e34:	4803      	ldr	r0, [pc, #12]	; (8000e44 <set_time+0x58>)
 8000e36:	f004 f993 	bl	8005160 <HAL_RTCEx_BKUPWrite>


	return;
 8000e3a:	bf00      	nop
}
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000170 	.word	0x20000170

08000e48 <get_time>:

// Get time of RTC
void get_time(char* currentTime) {
 8000e48:	b5b0      	push	{r4, r5, r7, lr}
 8000e4a:	b08c      	sub	sp, #48	; 0x30
 8000e4c:	af04      	add	r7, sp, #16
 8000e4e:	6078      	str	r0, [r7, #4]

	 RTC_DateTypeDef gDate;
	 RTC_TimeTypeDef gTime;
	/* Get the RTC current Time */
	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000e50:	f107 0308 	add.w	r3, r7, #8
 8000e54:	2200      	movs	r2, #0
 8000e56:	4619      	mov	r1, r3
 8000e58:	480f      	ldr	r0, [pc, #60]	; (8000e98 <get_time+0x50>)
 8000e5a:	f003 fd03 	bl	8004864 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	2200      	movs	r2, #0
 8000e64:	4619      	mov	r1, r3
 8000e66:	480c      	ldr	r0, [pc, #48]	; (8000e98 <get_time+0x50>)
 8000e68:	f003 fddf 	bl	8004a2a <HAL_RTC_GetDate>
//	/* Display time Format: hh:mm:ss */
//	 sprintf(theTime,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
//	/* Display date Format: dd-mm-yy */
//	 sprintf(theDate,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);

	 sprintf(currentTime, "%2d-%02d-%02d %02d:%02d:%02d", 2000+gDate.Year, gDate.Month, gDate.Date, gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000e6c:	7ffb      	ldrb	r3, [r7, #31]
 8000e6e:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8000e72:	7f7b      	ldrb	r3, [r7, #29]
 8000e74:	461d      	mov	r5, r3
 8000e76:	7fbb      	ldrb	r3, [r7, #30]
 8000e78:	7a39      	ldrb	r1, [r7, #8]
 8000e7a:	7a78      	ldrb	r0, [r7, #9]
 8000e7c:	7abc      	ldrb	r4, [r7, #10]
 8000e7e:	9403      	str	r4, [sp, #12]
 8000e80:	9002      	str	r0, [sp, #8]
 8000e82:	9101      	str	r1, [sp, #4]
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	462b      	mov	r3, r5
 8000e88:	4904      	ldr	r1, [pc, #16]	; (8000e9c <get_time+0x54>)
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f007 fb46 	bl	800851c <siprintf>


	return;
 8000e90:	bf00      	nop
}
 8000e92:	3720      	adds	r7, #32
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bdb0      	pop	{r4, r5, r7, pc}
 8000e98:	20000170 	.word	0x20000170
 8000e9c:	08009ba4 	.word	0x08009ba4

08000ea0 <set_alarm_A>:
  sAlarm.Alarm = RTC_ALARM_A;
//  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD);
  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
}

void set_alarm_A(uint32_t secondsOffset) {
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b094      	sub	sp, #80	; 0x50
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef cDate;
	RTC_TimeTypeDef cTime;
	RTC_AlarmTypeDef sAlarm;

	// Get RTC current date and time
	HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BIN);
 8000ea8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000eac:	2200      	movs	r2, #0
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4845      	ldr	r0, [pc, #276]	; (8000fc8 <set_alarm_A+0x128>)
 8000eb2:	f003 fcd7 	bl	8004864 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BIN);
 8000eb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eba:	2200      	movs	r2, #0
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4842      	ldr	r0, [pc, #264]	; (8000fc8 <set_alarm_A+0x128>)
 8000ec0:	f003 fdb3 	bl	8004a2a <HAL_RTC_GetDate>

	// Convert secondsOffset to hours, minutes, seconds according to current time
	secondsOffset += cTime.Hours*3600 + cTime.Minutes*60 + cTime.Seconds;
 8000ec4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ec8:	461a      	mov	r2, r3
 8000eca:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000ece:	fb03 f202 	mul.w	r2, r3, r2
 8000ed2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	460b      	mov	r3, r1
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	1a5b      	subs	r3, r3, r1
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	4413      	add	r3, r2
 8000ee2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000ee6:	4413      	add	r3, r2
 8000ee8:	461a      	mov	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	607b      	str	r3, [r7, #4]
	uint8_t hr_offset = (uint8_t) (secondsOffset/3600);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a36      	ldr	r2, [pc, #216]	; (8000fcc <set_alarm_A+0x12c>)
 8000ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef8:	0adb      	lsrs	r3, r3, #11
 8000efa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t min_offset = (uint8_t) ((secondsOffset-3600.0*hr_offset)/60.0);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff fb00 	bl	8000504 <__aeabi_ui2d>
 8000f04:	4604      	mov	r4, r0
 8000f06:	460d      	mov	r5, r1
 8000f08:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fb09 	bl	8000524 <__aeabi_i2d>
 8000f12:	a32b      	add	r3, pc, #172	; (adr r3, 8000fc0 <set_alarm_A+0x120>)
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	f7ff fb6e 	bl	80005f8 <__aeabi_dmul>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4620      	mov	r0, r4
 8000f22:	4629      	mov	r1, r5
 8000f24:	f7ff f9b0 	bl	8000288 <__aeabi_dsub>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <set_alarm_A+0x130>)
 8000f36:	f7ff fc89 	bl	800084c <__aeabi_ddiv>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4610      	mov	r0, r2
 8000f40:	4619      	mov	r1, r3
 8000f42:	f7ff fd6b 	bl	8000a1c <__aeabi_d2uiz>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t sec_offset = (uint8_t) (secondsOffset-3600*hr_offset-60*min_offset);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000f54:	011b      	lsls	r3, r3, #4
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000f60:	4619      	mov	r1, r3
 8000f62:	0109      	lsls	r1, r1, #4
 8000f64:	1acb      	subs	r3, r1, r3
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	// TODO: adjust time for going into next date as well


	// Set alarm A to current date and time + offset provided
	sAlarm.AlarmTime.Hours = hr_offset;
 8000f70:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000f74:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = min_offset;
 8000f76:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000f7a:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = sec_offset;
 8000f7c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000f80:	72bb      	strb	r3, [r7, #10]
	sAlarm.AlarmTime.SubSeconds = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
	sAlarm.AlarmDateWeekDay = cDate.Date;
 8000f9a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000f9e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sAlarm.Alarm = RTC_ALARM_A;
 8000fa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa6:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	2200      	movs	r2, #0
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <set_alarm_A+0x128>)
 8000fb2:	f003 fd87 	bl	8004ac4 <HAL_RTC_SetAlarm_IT>

	return;
 8000fb6:	bf00      	nop
}
 8000fb8:	3750      	adds	r7, #80	; 0x50
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	00000000 	.word	0x00000000
 8000fc4:	40ac2000 	.word	0x40ac2000
 8000fc8:	20000170 	.word	0x20000170
 8000fcc:	91a2b3c5 	.word	0x91a2b3c5
 8000fd0:	404e0000 	.word	0x404e0000

08000fd4 <HAL_RTC_AlarmAEventCallback>:


// Alarm A callback function (for reading data from sensors)
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	get_time(timeAfterAlarm);
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <HAL_RTC_AlarmAEventCallback+0x18>)
 8000fde:	f7ff ff33 	bl	8000e48 <get_time>

	return;
 8000fe2:	bf00      	nop
}
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200002c8 	.word	0x200002c8

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b098      	sub	sp, #96	; 0x60
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff6:	f001 fdb4 	bl	8002b62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffa:	f000 f857 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffe:	f000 fa11 	bl	8001424 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001002:	f000 f9df 	bl	80013c4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001006:	f000 f98f 	bl	8001328 <MX_TIM2_Init>
  MX_SPI1_Init();
 800100a:	f000 f94f 	bl	80012ac <MX_SPI1_Init>
  MX_FATFS_Init();
 800100e:	f006 fc93 	bl	8007938 <MX_FATFS_Init>
  MX_RTC_Init();
 8001012:	f000 f8ad 	bl	8001170 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */


  set_time();
 8001016:	f7ff fee9 	bl	8000dec <set_time>

  char timeBeforeAlarm[20] = {0};
 800101a:	2300      	movs	r3, #0
 800101c:	647b      	str	r3, [r7, #68]	; 0x44
 800101e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
  get_time(timeBeforeAlarm);
 800102c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff09 	bl	8000e48 <get_time>

//  set_alarm();
  uint32_t offsetTest = 10*60 + 70;
 8001036:	f240 239e 	movw	r3, #670	; 0x29e
 800103a:	65fb      	str	r3, [r7, #92]	; 0x5c
  set_alarm_A(offsetTest);
 800103c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800103e:	f7ff ff2f 	bl	8000ea0 <set_alarm_A>

	RTC_DateTypeDef cDate;
	RTC_TimeTypeDef cTime;
	RTC_AlarmTypeDef sAlarm;

	HAL_RTC_GetAlarm(&hrtc, &sAlarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 8001042:	4639      	mov	r1, r7
 8001044:	2300      	movs	r3, #0
 8001046:	f44f 7280 	mov.w	r2, #256	; 0x100
 800104a:	4814      	ldr	r0, [pc, #80]	; (800109c <main+0xac>)
 800104c:	f003 fe76 	bl	8004d3c <HAL_RTC_GetAlarm>
	HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BIN);
 8001050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001054:	2200      	movs	r2, #0
 8001056:	4619      	mov	r1, r3
 8001058:	4810      	ldr	r0, [pc, #64]	; (800109c <main+0xac>)
 800105a:	f003 fc03 	bl	8004864 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BIN);
 800105e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001062:	2200      	movs	r2, #0
 8001064:	4619      	mov	r1, r3
 8001066:	480d      	ldr	r0, [pc, #52]	; (800109c <main+0xac>)
 8001068:	f003 fcdf 	bl	8004a2a <HAL_RTC_GetDate>


	int i = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	65bb      	str	r3, [r7, #88]	; 0x58


  // Baud rate synchronization
  // SIM7000 Series_UART_ApplicationNote_V1.01 p11
  // TODO: incorporate this in a state
  HAL_UART_Transmit_IT(&huart1, (uint8_t *) "AT\r\n", strlen("AT\r\n"));
 8001070:	2204      	movs	r2, #4
 8001072:	490b      	ldr	r1, [pc, #44]	; (80010a0 <main+0xb0>)
 8001074:	480b      	ldr	r0, [pc, #44]	; (80010a4 <main+0xb4>)
 8001076:	f005 f933 	bl	80062e0 <HAL_UART_Transmit_IT>
  HAL_Delay(1000);
 800107a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800107e:	f001 fde5 	bl	8002c4c <HAL_Delay>
  HAL_UART_Transmit_IT(&huart1, (uint8_t *) "AT\r\n", strlen("AT\r\n"));
 8001082:	2204      	movs	r2, #4
 8001084:	4906      	ldr	r1, [pc, #24]	; (80010a0 <main+0xb0>)
 8001086:	4807      	ldr	r0, [pc, #28]	; (80010a4 <main+0xb4>)
 8001088:	f005 f92a 	bl	80062e0 <HAL_UART_Transmit_IT>
  HAL_Delay(1000);
 800108c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001090:	f001 fddc 	bl	8002c4c <HAL_Delay>


  // Enable Timer(s)
  HAL_TIM_Base_Start_IT(&htim2);
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <main+0xb8>)
 8001096:	f004 fcef 	bl	8005a78 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800109a:	e7fe      	b.n	800109a <main+0xaa>
 800109c:	20000170 	.word	0x20000170
 80010a0:	08009bc4 	.word	0x08009bc4
 80010a4:	20000244 	.word	0x20000244
 80010a8:	200001f8 	.word	0x200001f8

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b096      	sub	sp, #88	; 0x58
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	2244      	movs	r2, #68	; 0x44
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f007 fa26 	bl	800850c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	463b      	mov	r3, r7
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010d2:	f002 f929 	bl	8003328 <HAL_PWREx_ControlVoltageScaling>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010dc:	f000 fa14 	bl	8001508 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010e0:	f002 f904 	bl	80032ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010e4:	4b21      	ldr	r3, [pc, #132]	; (800116c <SystemClock_Config+0xc0>)
 80010e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ea:	4a20      	ldr	r2, [pc, #128]	; (800116c <SystemClock_Config+0xc0>)
 80010ec:	f023 0318 	bic.w	r3, r3, #24
 80010f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010f4:	2314      	movs	r3, #20
 80010f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010f8:	2301      	movs	r3, #1
 80010fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010fc:	2301      	movs	r3, #1
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001104:	2360      	movs	r3, #96	; 0x60
 8001106:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001108:	2302      	movs	r3, #2
 800110a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800110c:	2301      	movs	r3, #1
 800110e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001110:	2301      	movs	r3, #1
 8001112:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001114:	2310      	movs	r3, #16
 8001116:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001118:	2307      	movs	r3, #7
 800111a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800111c:	2302      	movs	r3, #2
 800111e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001120:	2302      	movs	r3, #2
 8001122:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4618      	mov	r0, r3
 800112a:	f002 f953 	bl	80033d4 <HAL_RCC_OscConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001134:	f000 f9e8 	bl	8001508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001138:	230f      	movs	r3, #15
 800113a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113c:	2303      	movs	r3, #3
 800113e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800114c:	463b      	mov	r3, r7
 800114e:	2101      	movs	r1, #1
 8001150:	4618      	mov	r0, r3
 8001152:	f002 fd53 	bl	8003bfc <HAL_RCC_ClockConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800115c:	f000 f9d4 	bl	8001508 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001160:	f003 f966 	bl	8004430 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001164:	bf00      	nop
 8001166:	3758      	adds	r7, #88	; 0x58
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40021000 	.word	0x40021000

08001170 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b092      	sub	sp, #72	; 0x48
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001176:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001186:	2300      	movs	r3, #0
 8001188:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	222c      	movs	r2, #44	; 0x2c
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f007 f9bb 	bl	800850c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001196:	4b43      	ldr	r3, [pc, #268]	; (80012a4 <MX_RTC_Init+0x134>)
 8001198:	4a43      	ldr	r2, [pc, #268]	; (80012a8 <MX_RTC_Init+0x138>)
 800119a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800119c:	4b41      	ldr	r3, [pc, #260]	; (80012a4 <MX_RTC_Init+0x134>)
 800119e:	2200      	movs	r2, #0
 80011a0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011a2:	4b40      	ldr	r3, [pc, #256]	; (80012a4 <MX_RTC_Init+0x134>)
 80011a4:	227f      	movs	r2, #127	; 0x7f
 80011a6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011a8:	4b3e      	ldr	r3, [pc, #248]	; (80012a4 <MX_RTC_Init+0x134>)
 80011aa:	22ff      	movs	r2, #255	; 0xff
 80011ac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011ae:	4b3d      	ldr	r3, [pc, #244]	; (80012a4 <MX_RTC_Init+0x134>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80011b4:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <MX_RTC_Init+0x134>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011ba:	4b3a      	ldr	r3, [pc, #232]	; (80012a4 <MX_RTC_Init+0x134>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011c0:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <MX_RTC_Init+0x134>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011c6:	4837      	ldr	r0, [pc, #220]	; (80012a4 <MX_RTC_Init+0x134>)
 80011c8:	f003 fa34 	bl	8004634 <HAL_RTC_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80011d2:	f000 f999 	bl	8001508 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x13;
 80011d6:	2313      	movs	r3, #19
 80011d8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x15;
 80011dc:	2315      	movs	r3, #21
 80011de:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x30;
 80011e2:	2330      	movs	r3, #48	; 0x30
 80011e4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80011f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011f4:	2201      	movs	r2, #1
 80011f6:	4619      	mov	r1, r3
 80011f8:	482a      	ldr	r0, [pc, #168]	; (80012a4 <MX_RTC_Init+0x134>)
 80011fa:	f003 fa96 	bl	800472a <HAL_RTC_SetTime>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001204:	f000 f980 	bl	8001508 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001208:	2302      	movs	r3, #2
 800120a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_AUGUST;
 800120e:	2308      	movs	r3, #8
 8001210:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x12;
 8001214:	2312      	movs	r3, #18
 8001216:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x97;
 800121a:	2397      	movs	r3, #151	; 0x97
 800121c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001220:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001224:	2201      	movs	r2, #1
 8001226:	4619      	mov	r1, r3
 8001228:	481e      	ldr	r0, [pc, #120]	; (80012a4 <MX_RTC_Init+0x134>)
 800122a:	f003 fb77 	bl	800491c <HAL_RTC_SetDate>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001234:	f000 f968 	bl	8001508 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x10;
 8001238:	2310      	movs	r3, #16
 800123a:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x10;
 800123c:	2310      	movs	r3, #16
 800123e:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x10;
 8001240:	2310      	movs	r3, #16
 8001242:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x10;
 8001244:	2310      	movs	r3, #16
 8001246:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 800125c:	2301      	movs	r3, #1
 800125e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2201      	movs	r2, #1
 800126c:	4619      	mov	r1, r3
 800126e:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MX_RTC_Init+0x134>)
 8001270:	f003 fc28 	bl	8004ac4 <HAL_RTC_SetAlarm_IT>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 800127a:	f000 f945 	bl	8001508 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800127e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2201      	movs	r2, #1
 8001288:	4619      	mov	r1, r3
 800128a:	4806      	ldr	r0, [pc, #24]	; (80012a4 <MX_RTC_Init+0x134>)
 800128c:	f003 fc1a 	bl	8004ac4 <HAL_RTC_SetAlarm_IT>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8001296:	f000 f937 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	3748      	adds	r7, #72	; 0x48
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000170 	.word	0x20000170
 80012a8:	40002800 	.word	0x40002800

080012ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <MX_SPI1_Init+0x74>)
 80012b2:	4a1c      	ldr	r2, [pc, #112]	; (8001324 <MX_SPI1_Init+0x78>)
 80012b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012b6:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <MX_SPI1_Init+0x74>)
 80012b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012be:	4b18      	ldr	r3, [pc, #96]	; (8001320 <MX_SPI1_Init+0x74>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012c4:	4b16      	ldr	r3, [pc, #88]	; (8001320 <MX_SPI1_Init+0x74>)
 80012c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <MX_SPI1_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <MX_SPI1_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_SPI1_Init+0x74>)
 80012da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <MX_SPI1_Init+0x74>)
 80012e2:	2230      	movs	r2, #48	; 0x30
 80012e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_SPI1_Init+0x74>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_SPI1_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <MX_SPI1_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_SPI1_Init+0x74>)
 80012fa:	2207      	movs	r2, #7
 80012fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <MX_SPI1_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_SPI1_Init+0x74>)
 8001306:	2208      	movs	r2, #8
 8001308:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_SPI1_Init+0x74>)
 800130c:	f003 ff41 	bl	8005192 <HAL_SPI_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001316:	f000 f8f7 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000194 	.word	0x20000194
 8001324:	40013000 	.word	0x40013000

08001328 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132e:	f107 0310 	add.w	r3, r7, #16
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001346:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <MX_TIM2_Init+0x98>)
 8001348:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800134c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 319;
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <MX_TIM2_Init+0x98>)
 8001350:	f240 123f 	movw	r2, #319	; 0x13f
 8001354:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <MX_TIM2_Init+0x98>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800135c:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <MX_TIM2_Init+0x98>)
 800135e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001362:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <MX_TIM2_Init+0x98>)
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <MX_TIM2_Init+0x98>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001370:	4813      	ldr	r0, [pc, #76]	; (80013c0 <MX_TIM2_Init+0x98>)
 8001372:	f004 fb29 	bl	80059c8 <HAL_TIM_Base_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800137c:	f000 f8c4 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001384:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	4619      	mov	r1, r3
 800138c:	480c      	ldr	r0, [pc, #48]	; (80013c0 <MX_TIM2_Init+0x98>)
 800138e:	f004 fce6 	bl	8005d5e <HAL_TIM_ConfigClockSource>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001398:	f000 f8b6 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139c:	2300      	movs	r3, #0
 800139e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_TIM2_Init+0x98>)
 80013aa:	f004 fec7 	bl	800613c <HAL_TIMEx_MasterConfigSynchronization>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80013b4:	f000 f8a8 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	3720      	adds	r7, #32
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200001f8 	.word	0x200001f8

080013c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <MX_USART1_UART_Init+0x58>)
 80013ca:	4a15      	ldr	r2, [pc, #84]	; (8001420 <MX_USART1_UART_Init+0x5c>)
 80013cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <MX_USART1_UART_Init+0x58>)
 80013d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_USART1_UART_Init+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_USART1_UART_Init+0x58>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_USART1_UART_Init+0x58>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_USART1_UART_Init+0x58>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <MX_USART1_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_USART1_UART_Init+0x58>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <MX_USART1_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_USART1_UART_Init+0x58>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_USART1_UART_Init+0x58>)
 8001408:	f004 ff1c 	bl	8006244 <HAL_UART_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001412:	f000 f879 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000244 	.word	0x20000244
 8001420:	40013800 	.word	0x40013800

08001424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 030c 	add.w	r3, r7, #12
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	4b31      	ldr	r3, [pc, #196]	; (8001500 <MX_GPIO_Init+0xdc>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	4a30      	ldr	r2, [pc, #192]	; (8001500 <MX_GPIO_Init+0xdc>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001446:	4b2e      	ldr	r3, [pc, #184]	; (8001500 <MX_GPIO_Init+0xdc>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <MX_GPIO_Init+0xdc>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	4a2a      	ldr	r2, [pc, #168]	; (8001500 <MX_GPIO_Init+0xdc>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145e:	4b28      	ldr	r3, [pc, #160]	; (8001500 <MX_GPIO_Init+0xdc>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	4b25      	ldr	r3, [pc, #148]	; (8001500 <MX_GPIO_Init+0xdc>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a24      	ldr	r2, [pc, #144]	; (8001500 <MX_GPIO_Init+0xdc>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b22      	ldr	r3, [pc, #136]	; (8001500 <MX_GPIO_Init+0xdc>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	2120      	movs	r1, #32
 8001486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148a:	f001 fefd 	bl	8003288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	2108      	movs	r1, #8
 8001492:	481c      	ldr	r0, [pc, #112]	; (8001504 <MX_GPIO_Init+0xe0>)
 8001494:	f001 fef8 	bl	8003288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001498:	2320      	movs	r3, #32
 800149a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	4619      	mov	r1, r3
 80014ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b2:	f001 fd7f 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80014b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80014c8:	2303      	movs	r3, #3
 80014ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	4619      	mov	r1, r3
 80014d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d6:	f001 fd6d 	bl	8002fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80014da:	2308      	movs	r3, #8
 80014dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014de:	2301      	movs	r3, #1
 80014e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	4619      	mov	r1, r3
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <MX_GPIO_Init+0xe0>)
 80014f2:	f001 fd5f 	bl	8002fb4 <HAL_GPIO_Init>

}
 80014f6:	bf00      	nop
 80014f8:	3720      	adds	r7, #32
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000
 8001504:	48000400 	.word	0x48000400

08001508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
}
 800150e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001510:	e7fe      	b.n	8001510 <Error_Handler+0x8>
	...

08001514 <SIM_Handler>:
// Buffer to store all data. TODO: remove later
uint8_t allRX_Data[1000] = {0};
uint8_t allRX_Data_Index = 0;


void SIM_Handler(void) {
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0

	switch (simState) {
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <SIM_Handler+0x58>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b05      	cmp	r3, #5
 8001520:	d820      	bhi.n	8001564 <SIM_Handler+0x50>
 8001522:	a201      	add	r2, pc, #4	; (adr r2, 8001528 <SIM_Handler+0x14>)
 8001524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001528:	08001541 	.word	0x08001541
 800152c:	08001547 	.word	0x08001547
 8001530:	0800154d 	.word	0x0800154d
 8001534:	08001553 	.word	0x08001553
 8001538:	0800155b 	.word	0x0800155b
 800153c:	08001561 	.word	0x08001561
		case SIM_INIT:
			SIM_Init();
 8001540:	f000 f852 	bl	80015e8 <SIM_Init>
			break;
 8001544:	e00f      	b.n	8001566 <SIM_Handler+0x52>
		case SIM_UE_CHECK:
			SIM_UE_Check();
 8001546:	f000 f8f7 	bl	8001738 <SIM_UE_Check>
			break;
 800154a:	e00c      	b.n	8001566 <SIM_Handler+0x52>
		case SIM_PDN_ACTIVATION:
			SIM_PDN_Activation();
 800154c:	f000 f97c 	bl	8001848 <SIM_PDN_Activation>
			break;
 8001550:	e009      	b.n	8001566 <SIM_Handler+0x52>
		case SIM_HTTP_BUILD:
			SIM_HTTP_Build(SIM_HTTP_MAKE_GET);
 8001552:	2005      	movs	r0, #5
 8001554:	f000 fabc 	bl	8001ad0 <SIM_HTTP_Build>
			break;
 8001558:	e005      	b.n	8001566 <SIM_Handler+0x52>
		case SIM_HTTP_MAKE_POST:
			SIM_HTTP_Make_Post();
 800155a:	f000 fc25 	bl	8001da8 <SIM_HTTP_Make_Post>
			break;
 800155e:	e002      	b.n	8001566 <SIM_Handler+0x52>
		case SIM_HTTP_MAKE_GET:
			SIM_HTTP_Make_Get();
 8001560:	f000 fe86 	bl	8002270 <SIM_HTTP_Make_Get>
		default:
			break;
 8001564:	bf00      	nop
	}


	return;
 8001566:	bf00      	nop
}
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000001 	.word	0x20000001

08001570 <SIM_serialRX_Handler>:


void SIM_serialRX_Handler(uint8_t charReceived) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]

	serialRX_Buffer[serialRX_BufferIndex++] = charReceived;
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <SIM_serialRX_Handler+0x64>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	b2d1      	uxtb	r1, r2
 8001582:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <SIM_serialRX_Handler+0x64>)
 8001584:	7011      	strb	r1, [r2, #0]
 8001586:	4619      	mov	r1, r3
 8001588:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <SIM_serialRX_Handler+0x68>)
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	5453      	strb	r3, [r2, r1]

	// Remove later; Just for tracking
	allRX_Data[allRX_Data_Index++] = charReceived;
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <SIM_serialRX_Handler+0x6c>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	b2d1      	uxtb	r1, r2
 8001596:	4a11      	ldr	r2, [pc, #68]	; (80015dc <SIM_serialRX_Handler+0x6c>)
 8001598:	7011      	strb	r1, [r2, #0]
 800159a:	4619      	mov	r1, r3
 800159c:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <SIM_serialRX_Handler+0x70>)
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	5453      	strb	r3, [r2, r1]

	if ((charReceived == (uint8_t)'\n')) {
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	2b0a      	cmp	r3, #10
 80015a6:	d101      	bne.n	80015ac <SIM_serialRX_Handler+0x3c>
		SIM_Handler();
 80015a8:	f7ff ffb4 	bl	8001514 <SIM_Handler>
	}

	if (clearBuffer) { // reset index and clear buffer
 80015ac:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <SIM_serialRX_Handler+0x74>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00b      	beq.n	80015cc <SIM_serialRX_Handler+0x5c>
		serialRX_BufferIndex = 0;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <SIM_serialRX_Handler+0x64>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
		memset(serialRX_Buffer, 0, sizeof(serialRX_Buffer));
 80015ba:	22fa      	movs	r2, #250	; 0xfa
 80015bc:	2100      	movs	r1, #0
 80015be:	4806      	ldr	r0, [pc, #24]	; (80015d8 <SIM_serialRX_Handler+0x68>)
 80015c0:	f006 ffa4 	bl	800850c <memset>
		clearBuffer = 0;
 80015c4:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <SIM_serialRX_Handler+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
	}


	return;
 80015ca:	bf00      	nop
 80015cc:	bf00      	nop
}
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	2000043e 	.word	0x2000043e
 80015d8:	20000344 	.word	0x20000344
 80015dc:	20000930 	.word	0x20000930
 80015e0:	20000548 	.word	0x20000548
 80015e4:	20000440 	.word	0x20000440

080015e8 <SIM_Init>:


void SIM_Init(void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
	// ---------------------------- TX ------------------------------- //
	// 0: AT
	// 1: AT+CPIN?
	// All good state change: SIM_INIT to SIM_UE_CHECK

	uint8_t maxCommand = 1;
 80015ee:	2301      	movs	r3, #1
 80015f0:	71bb      	strb	r3, [r7, #6]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 80015f2:	4b44      	ldr	r3, [pc, #272]	; (8001704 <SIM_Init+0x11c>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d034      	beq.n	8001664 <SIM_Init+0x7c>
 80015fa:	79bb      	ldrb	r3, [r7, #6]
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	4b42      	ldr	r3, [pc, #264]	; (8001708 <SIM_Init+0x120>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	429a      	cmp	r2, r3
 8001606:	d32d      	bcc.n	8001664 <SIM_Init+0x7c>
		// Next command should be transmitted

		switch (commandIndex) {
 8001608:	4b3f      	ldr	r3, [pc, #252]	; (8001708 <SIM_Init+0x120>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	b29b      	uxth	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d002      	beq.n	8001618 <SIM_Init+0x30>
 8001612:	2b01      	cmp	r3, #1
 8001614:	d014      	beq.n	8001640 <SIM_Init+0x58>
				// Check SIM card status
				sprintf(ATcommand, "AT+CPIN?\r\n");
				HAL_UART_Transmit_IT(&huart1, (uint8_t*) ATcommand, strlen(ATcommand));
				break;
			default:
				break;
 8001616:	e022      	b.n	800165e <SIM_Init+0x76>
				sprintf(ATcommand, "AT\r\n");
 8001618:	493c      	ldr	r1, [pc, #240]	; (800170c <SIM_Init+0x124>)
 800161a:	483d      	ldr	r0, [pc, #244]	; (8001710 <SIM_Init+0x128>)
 800161c:	f006 ff7e 	bl	800851c <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8001620:	483b      	ldr	r0, [pc, #236]	; (8001710 <SIM_Init+0x128>)
 8001622:	f7fe fdd5 	bl	80001d0 <strlen>
 8001626:	4603      	mov	r3, r0
 8001628:	b29b      	uxth	r3, r3
 800162a:	461a      	mov	r2, r3
 800162c:	4938      	ldr	r1, [pc, #224]	; (8001710 <SIM_Init+0x128>)
 800162e:	4839      	ldr	r0, [pc, #228]	; (8001714 <SIM_Init+0x12c>)
 8001630:	f004 fe56 	bl	80062e0 <HAL_UART_Transmit_IT>
				HAL_UART_Receive_IT(&huart1, &serialRX_Data, 1);
 8001634:	2201      	movs	r2, #1
 8001636:	4938      	ldr	r1, [pc, #224]	; (8001718 <SIM_Init+0x130>)
 8001638:	4836      	ldr	r0, [pc, #216]	; (8001714 <SIM_Init+0x12c>)
 800163a:	f004 febf 	bl	80063bc <HAL_UART_Receive_IT>
				break;
 800163e:	e00e      	b.n	800165e <SIM_Init+0x76>
				sprintf(ATcommand, "AT+CPIN?\r\n");
 8001640:	4936      	ldr	r1, [pc, #216]	; (800171c <SIM_Init+0x134>)
 8001642:	4833      	ldr	r0, [pc, #204]	; (8001710 <SIM_Init+0x128>)
 8001644:	f006 ff6a 	bl	800851c <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t*) ATcommand, strlen(ATcommand));
 8001648:	4831      	ldr	r0, [pc, #196]	; (8001710 <SIM_Init+0x128>)
 800164a:	f7fe fdc1 	bl	80001d0 <strlen>
 800164e:	4603      	mov	r3, r0
 8001650:	b29b      	uxth	r3, r3
 8001652:	461a      	mov	r2, r3
 8001654:	492e      	ldr	r1, [pc, #184]	; (8001710 <SIM_Init+0x128>)
 8001656:	482f      	ldr	r0, [pc, #188]	; (8001714 <SIM_Init+0x12c>)
 8001658:	f004 fe42 	bl	80062e0 <HAL_UART_Transmit_IT>
				break;
 800165c:	bf00      	nop
		}

		shouldTransmit = 0; // no transmission until response has been read
 800165e:	4b29      	ldr	r3, [pc, #164]	; (8001704 <SIM_Init+0x11c>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]

	} // if shouldTransmit
	// --------------------------------------------------------------- //

	// ---------------------------- RX ------------------------------- //
	uint8_t isIncrementCommand = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	71fb      	strb	r3, [r7, #7]

	switch (commandIndex) {
 8001668:	4b27      	ldr	r3, [pc, #156]	; (8001708 <SIM_Init+0x120>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	b29b      	uxth	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <SIM_Init+0x90>
 8001672:	2b01      	cmp	r3, #1
 8001674:	d00a      	beq.n	800168c <SIM_Init+0xa4>
				isStateChanged = 1;
			}

			break;
		default:
			break;
 8001676:	e01c      	b.n	80016b2 <SIM_Init+0xca>
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8001678:	4929      	ldr	r1, [pc, #164]	; (8001720 <SIM_Init+0x138>)
 800167a:	482a      	ldr	r0, [pc, #168]	; (8001724 <SIM_Init+0x13c>)
 800167c:	f006 ff90 	bl	80085a0 <strstr>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d012      	beq.n	80016ac <SIM_Init+0xc4>
				isIncrementCommand = 1; // Increment to go to next command
 8001686:	2301      	movs	r3, #1
 8001688:	71fb      	strb	r3, [r7, #7]
			break;
 800168a:	e00f      	b.n	80016ac <SIM_Init+0xc4>
			if (strstr((char*) serialRX_Buffer, "+CPIN: READY\r\n\r\nOK\r\n")) {
 800168c:	4926      	ldr	r1, [pc, #152]	; (8001728 <SIM_Init+0x140>)
 800168e:	4825      	ldr	r0, [pc, #148]	; (8001724 <SIM_Init+0x13c>)
 8001690:	f006 ff86 	bl	80085a0 <strstr>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00a      	beq.n	80016b0 <SIM_Init+0xc8>
				isIncrementCommand = 1; // Increment to go to next command
 800169a:	2301      	movs	r3, #1
 800169c:	71fb      	strb	r3, [r7, #7]
				simState = SIM_UE_CHECK;
 800169e:	4b23      	ldr	r3, [pc, #140]	; (800172c <SIM_Init+0x144>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]
				isStateChanged = 1;
 80016a4:	4b22      	ldr	r3, [pc, #136]	; (8001730 <SIM_Init+0x148>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
			break;
 80016aa:	e001      	b.n	80016b0 <SIM_Init+0xc8>
			break;
 80016ac:	bf00      	nop
 80016ae:	e000      	b.n	80016b2 <SIM_Init+0xca>
			break;
 80016b0:	bf00      	nop
	}

	if (isIncrementCommand) {
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00e      	beq.n	80016d6 <SIM_Init+0xee>
		++commandIndex; // Next command
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <SIM_Init+0x120>)
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	3301      	adds	r3, #1
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <SIM_Init+0x120>)
 80016c4:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 80016c6:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <SIM_Init+0x14c>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 80016cc:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <SIM_Init+0x11c>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	71fb      	strb	r3, [r7, #7]
	}

	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 80016d6:	79bb      	ldrb	r3, [r7, #6]
 80016d8:	b29a      	uxth	r2, r3
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <SIM_Init+0x120>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d304      	bcc.n	80016ee <SIM_Init+0x106>
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <SIM_Init+0x148>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d006      	beq.n	80016fc <SIM_Init+0x114>
		commandIndex = 0;
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <SIM_Init+0x120>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 80016f4:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <SIM_Init+0x148>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
	}


	return;
 80016fa:	bf00      	nop
 80016fc:	bf00      	nop
}
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000002 	.word	0x20000002
 8001708:	20000340 	.word	0x20000340
 800170c:	08009bcc 	.word	0x08009bcc
 8001710:	200002dc 	.word	0x200002dc
 8001714:	20000244 	.word	0x20000244
 8001718:	2000043f 	.word	0x2000043f
 800171c:	08009bd4 	.word	0x08009bd4
 8001720:	08009be0 	.word	0x08009be0
 8001724:	20000344 	.word	0x20000344
 8001728:	08009be8 	.word	0x08009be8
 800172c:	20000001 	.word	0x20000001
 8001730:	20000342 	.word	0x20000342
 8001734:	20000440 	.word	0x20000440

08001738 <SIM_UE_Check>:


void SIM_UE_Check(void) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0

	// ---------------------------- TX ------------------------------- //
	// 0: AT+CPSI?

	uint8_t maxCommand = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	71bb      	strb	r3, [r7, #6]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 8001742:	4b36      	ldr	r3, [pc, #216]	; (800181c <SIM_UE_Check+0xe4>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d01e      	beq.n	8001788 <SIM_UE_Check+0x50>
 800174a:	79bb      	ldrb	r3, [r7, #6]
 800174c:	b29a      	uxth	r2, r3
 800174e:	4b34      	ldr	r3, [pc, #208]	; (8001820 <SIM_UE_Check+0xe8>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	429a      	cmp	r2, r3
 8001756:	d317      	bcc.n	8001788 <SIM_UE_Check+0x50>
		// Next command should be transmitted
		switch (commandIndex) {
 8001758:	4b31      	ldr	r3, [pc, #196]	; (8001820 <SIM_UE_Check+0xe8>)
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	b29b      	uxth	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10e      	bne.n	8001780 <SIM_UE_Check+0x48>
			case 0:
				// Inquire UE system information
				sprintf(ATcommand, "AT+CPSI?\r\n");
 8001762:	4930      	ldr	r1, [pc, #192]	; (8001824 <SIM_UE_Check+0xec>)
 8001764:	4830      	ldr	r0, [pc, #192]	; (8001828 <SIM_UE_Check+0xf0>)
 8001766:	f006 fed9 	bl	800851c <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 800176a:	482f      	ldr	r0, [pc, #188]	; (8001828 <SIM_UE_Check+0xf0>)
 800176c:	f7fe fd30 	bl	80001d0 <strlen>
 8001770:	4603      	mov	r3, r0
 8001772:	b29b      	uxth	r3, r3
 8001774:	461a      	mov	r2, r3
 8001776:	492c      	ldr	r1, [pc, #176]	; (8001828 <SIM_UE_Check+0xf0>)
 8001778:	482c      	ldr	r0, [pc, #176]	; (800182c <SIM_UE_Check+0xf4>)
 800177a:	f004 fdb1 	bl	80062e0 <HAL_UART_Transmit_IT>
				break;
 800177e:	e000      	b.n	8001782 <SIM_UE_Check+0x4a>
			default:
				break;
 8001780:	bf00      	nop
		}
		shouldTransmit = 0;
 8001782:	4b26      	ldr	r3, [pc, #152]	; (800181c <SIM_UE_Check+0xe4>)
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]


	// ---------------------------- RX ------------------------------- //
	// If NB-IoT is online, change from SIM_UE_CHECK to SIM_PDN_ACTIVATION
	// If NB-IoT is NOT online, change from SIM_UE_CHECK to SIM_CONNECT_NBIOT
	uint8_t isIncrementCommand = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	71fb      	strb	r3, [r7, #7]

	switch (commandIndex) {
 800178c:	4b24      	ldr	r3, [pc, #144]	; (8001820 <SIM_UE_Check+0xe8>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	b29b      	uxth	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d116      	bne.n	80017c4 <SIM_UE_Check+0x8c>
			case 0:
				// OK should be received
				// +CPSI: LTE NB-IOT,Online should be received
				if ((strstr((char*) serialRX_Buffer, "\nOK\r\n")) && (strstr((char*) serialRX_Buffer, "+CPSI: LTE NB-IOT,Online"))) {
 8001796:	4926      	ldr	r1, [pc, #152]	; (8001830 <SIM_UE_Check+0xf8>)
 8001798:	4826      	ldr	r0, [pc, #152]	; (8001834 <SIM_UE_Check+0xfc>)
 800179a:	f006 ff01 	bl	80085a0 <strstr>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d011      	beq.n	80017c8 <SIM_UE_Check+0x90>
 80017a4:	4924      	ldr	r1, [pc, #144]	; (8001838 <SIM_UE_Check+0x100>)
 80017a6:	4823      	ldr	r0, [pc, #140]	; (8001834 <SIM_UE_Check+0xfc>)
 80017a8:	f006 fefa 	bl	80085a0 <strstr>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00a      	beq.n	80017c8 <SIM_UE_Check+0x90>
					isIncrementCommand = 1; // Increment to go to next command
 80017b2:	2301      	movs	r3, #1
 80017b4:	71fb      	strb	r3, [r7, #7]
					simState = SIM_PDN_ACTIVATION;
 80017b6:	4b21      	ldr	r3, [pc, #132]	; (800183c <SIM_UE_Check+0x104>)
 80017b8:	2202      	movs	r2, #2
 80017ba:	701a      	strb	r2, [r3, #0]
					isStateChanged = 1;
 80017bc:	4b20      	ldr	r3, [pc, #128]	; (8001840 <SIM_UE_Check+0x108>)
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]
				// TODO: If NB-IoT is not online
//				[16:37:45.613] +CPSI: NO SERVICE,Online
//				[16:37:45.613]
//				[16:37:45.613] OK

				break;
 80017c2:	e001      	b.n	80017c8 <SIM_UE_Check+0x90>
			default:
				break;
 80017c4:	bf00      	nop
 80017c6:	e000      	b.n	80017ca <SIM_UE_Check+0x92>
				break;
 80017c8:	bf00      	nop
		}

	if (isIncrementCommand) {
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00e      	beq.n	80017ee <SIM_UE_Check+0xb6>
		++commandIndex; // Next command
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <SIM_UE_Check+0xe8>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	3301      	adds	r3, #1
 80017d8:	b29a      	uxth	r2, r3
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <SIM_UE_Check+0xe8>)
 80017dc:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <SIM_UE_Check+0x10c>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <SIM_UE_Check+0xe4>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	71fb      	strb	r3, [r7, #7]
	}
	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 80017ee:	79bb      	ldrb	r3, [r7, #6]
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <SIM_UE_Check+0xe8>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d304      	bcc.n	8001806 <SIM_UE_Check+0xce>
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <SIM_UE_Check+0x108>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d006      	beq.n	8001814 <SIM_UE_Check+0xdc>
		commandIndex = 0;
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <SIM_UE_Check+0xe8>)
 8001808:	2200      	movs	r2, #0
 800180a:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <SIM_UE_Check+0x108>)
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
	}


	return;
 8001812:	bf00      	nop
 8001814:	bf00      	nop
}
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000002 	.word	0x20000002
 8001820:	20000340 	.word	0x20000340
 8001824:	08009c00 	.word	0x08009c00
 8001828:	200002dc 	.word	0x200002dc
 800182c:	20000244 	.word	0x20000244
 8001830:	08009be0 	.word	0x08009be0
 8001834:	20000344 	.word	0x20000344
 8001838:	08009c0c 	.word	0x08009c0c
 800183c:	20000001 	.word	0x20000001
 8001840:	20000342 	.word	0x20000342
 8001844:	20000440 	.word	0x20000440

08001848 <SIM_PDN_Activation>:



void SIM_PDN_Activation(void) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
	// 1: AT+COPS? - Network information, operator and network
	// 2: AT+CGNAPN - Query APN delivered by the network
	// 3: AT+CNACT? - Get local IP
	// 4: AT+CNACT=0,1 - Activate 0th PDP

	uint8_t maxCommand = 4;
 800184e:	2304      	movs	r3, #4
 8001850:	71bb      	strb	r3, [r7, #6]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 8001852:	4b8b      	ldr	r3, [pc, #556]	; (8001a80 <SIM_PDN_Activation+0x238>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d067      	beq.n	800192a <SIM_PDN_Activation+0xe2>
 800185a:	79bb      	ldrb	r3, [r7, #6]
 800185c:	b29a      	uxth	r2, r3
 800185e:	4b89      	ldr	r3, [pc, #548]	; (8001a84 <SIM_PDN_Activation+0x23c>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	b29b      	uxth	r3, r3
 8001864:	429a      	cmp	r2, r3
 8001866:	d360      	bcc.n	800192a <SIM_PDN_Activation+0xe2>
		// Next command should be transmitted
		switch (commandIndex) {
 8001868:	4b86      	ldr	r3, [pc, #536]	; (8001a84 <SIM_PDN_Activation+0x23c>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	b29b      	uxth	r3, r3
 800186e:	2b04      	cmp	r3, #4
 8001870:	d857      	bhi.n	8001922 <SIM_PDN_Activation+0xda>
 8001872:	a201      	add	r2, pc, #4	; (adr r2, 8001878 <SIM_PDN_Activation+0x30>)
 8001874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001878:	0800188d 	.word	0x0800188d
 800187c:	080018ab 	.word	0x080018ab
 8001880:	080018c9 	.word	0x080018c9
 8001884:	080018e7 	.word	0x080018e7
 8001888:	08001905 	.word	0x08001905
			case 0:
				// Check PS service
				sprintf(ATcommand, "AT+CGATT?\r\n");
 800188c:	497e      	ldr	r1, [pc, #504]	; (8001a88 <SIM_PDN_Activation+0x240>)
 800188e:	487f      	ldr	r0, [pc, #508]	; (8001a8c <SIM_PDN_Activation+0x244>)
 8001890:	f006 fe44 	bl	800851c <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8001894:	487d      	ldr	r0, [pc, #500]	; (8001a8c <SIM_PDN_Activation+0x244>)
 8001896:	f7fe fc9b 	bl	80001d0 <strlen>
 800189a:	4603      	mov	r3, r0
 800189c:	b29b      	uxth	r3, r3
 800189e:	461a      	mov	r2, r3
 80018a0:	497a      	ldr	r1, [pc, #488]	; (8001a8c <SIM_PDN_Activation+0x244>)
 80018a2:	487b      	ldr	r0, [pc, #492]	; (8001a90 <SIM_PDN_Activation+0x248>)
 80018a4:	f004 fd1c 	bl	80062e0 <HAL_UART_Transmit_IT>
				break;
 80018a8:	e03c      	b.n	8001924 <SIM_PDN_Activation+0xdc>

			case 1:
				// Network information
				sprintf(ATcommand, "AT+COPS?\r\n");
 80018aa:	497a      	ldr	r1, [pc, #488]	; (8001a94 <SIM_PDN_Activation+0x24c>)
 80018ac:	4877      	ldr	r0, [pc, #476]	; (8001a8c <SIM_PDN_Activation+0x244>)
 80018ae:	f006 fe35 	bl	800851c <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 80018b2:	4876      	ldr	r0, [pc, #472]	; (8001a8c <SIM_PDN_Activation+0x244>)
 80018b4:	f7fe fc8c 	bl	80001d0 <strlen>
 80018b8:	4603      	mov	r3, r0
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	461a      	mov	r2, r3
 80018be:	4973      	ldr	r1, [pc, #460]	; (8001a8c <SIM_PDN_Activation+0x244>)
 80018c0:	4873      	ldr	r0, [pc, #460]	; (8001a90 <SIM_PDN_Activation+0x248>)
 80018c2:	f004 fd0d 	bl	80062e0 <HAL_UART_Transmit_IT>
				break;
 80018c6:	e02d      	b.n	8001924 <SIM_PDN_Activation+0xdc>

			case 2:
				// Network APN
				sprintf(ATcommand, "AT+CGNAPN\r\n");
 80018c8:	4973      	ldr	r1, [pc, #460]	; (8001a98 <SIM_PDN_Activation+0x250>)
 80018ca:	4870      	ldr	r0, [pc, #448]	; (8001a8c <SIM_PDN_Activation+0x244>)
 80018cc:	f006 fe26 	bl	800851c <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 80018d0:	486e      	ldr	r0, [pc, #440]	; (8001a8c <SIM_PDN_Activation+0x244>)
 80018d2:	f7fe fc7d 	bl	80001d0 <strlen>
 80018d6:	4603      	mov	r3, r0
 80018d8:	b29b      	uxth	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	496b      	ldr	r1, [pc, #428]	; (8001a8c <SIM_PDN_Activation+0x244>)
 80018de:	486c      	ldr	r0, [pc, #432]	; (8001a90 <SIM_PDN_Activation+0x248>)
 80018e0:	f004 fcfe 	bl	80062e0 <HAL_UART_Transmit_IT>
				break;
 80018e4:	e01e      	b.n	8001924 <SIM_PDN_Activation+0xdc>

			case 3:
				// Local IP (to check if need to activate network)
				sprintf(ATcommand, "AT+CNACT?\r\n");
 80018e6:	496d      	ldr	r1, [pc, #436]	; (8001a9c <SIM_PDN_Activation+0x254>)
 80018e8:	4868      	ldr	r0, [pc, #416]	; (8001a8c <SIM_PDN_Activation+0x244>)
 80018ea:	f006 fe17 	bl	800851c <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 80018ee:	4867      	ldr	r0, [pc, #412]	; (8001a8c <SIM_PDN_Activation+0x244>)
 80018f0:	f7fe fc6e 	bl	80001d0 <strlen>
 80018f4:	4603      	mov	r3, r0
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	4964      	ldr	r1, [pc, #400]	; (8001a8c <SIM_PDN_Activation+0x244>)
 80018fc:	4864      	ldr	r0, [pc, #400]	; (8001a90 <SIM_PDN_Activation+0x248>)
 80018fe:	f004 fcef 	bl	80062e0 <HAL_UART_Transmit_IT>
				break;
 8001902:	e00f      	b.n	8001924 <SIM_PDN_Activation+0xdc>

			case 4:
				// Activate network, Activate 0th PDP.
				sprintf(ATcommand, "AT+CNACT=0,1\r\n");
 8001904:	4966      	ldr	r1, [pc, #408]	; (8001aa0 <SIM_PDN_Activation+0x258>)
 8001906:	4861      	ldr	r0, [pc, #388]	; (8001a8c <SIM_PDN_Activation+0x244>)
 8001908:	f006 fe08 	bl	800851c <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 800190c:	485f      	ldr	r0, [pc, #380]	; (8001a8c <SIM_PDN_Activation+0x244>)
 800190e:	f7fe fc5f 	bl	80001d0 <strlen>
 8001912:	4603      	mov	r3, r0
 8001914:	b29b      	uxth	r3, r3
 8001916:	461a      	mov	r2, r3
 8001918:	495c      	ldr	r1, [pc, #368]	; (8001a8c <SIM_PDN_Activation+0x244>)
 800191a:	485d      	ldr	r0, [pc, #372]	; (8001a90 <SIM_PDN_Activation+0x248>)
 800191c:	f004 fce0 	bl	80062e0 <HAL_UART_Transmit_IT>
				break;
 8001920:	e000      	b.n	8001924 <SIM_PDN_Activation+0xdc>


			default:
				break;
 8001922:	bf00      	nop
		}
		shouldTransmit = 0;
 8001924:	4b56      	ldr	r3, [pc, #344]	; (8001a80 <SIM_PDN_Activation+0x238>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]



	// ---------------------------- RX ------------------------------- //

	uint8_t isIncrementCommand = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	71fb      	strb	r3, [r7, #7]

	switch (commandIndex) {
 800192e:	4b55      	ldr	r3, [pc, #340]	; (8001a84 <SIM_PDN_Activation+0x23c>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	b29b      	uxth	r3, r3
 8001934:	2b04      	cmp	r3, #4
 8001936:	d871      	bhi.n	8001a1c <SIM_PDN_Activation+0x1d4>
 8001938:	a201      	add	r2, pc, #4	; (adr r2, 8001940 <SIM_PDN_Activation+0xf8>)
 800193a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193e:	bf00      	nop
 8001940:	08001955 	.word	0x08001955
 8001944:	08001969 	.word	0x08001969
 8001948:	0800197d 	.word	0x0800197d
 800194c:	0800198f 	.word	0x0800198f
 8001950:	080019f5 	.word	0x080019f5
			case 0:
				// CGATT: 1\r\n\r\nOK\r\n - Has attached
				if ( strstr((char*) serialRX_Buffer, "CGATT: 1\r\n\r\nOK\r\n") ) {
 8001954:	4953      	ldr	r1, [pc, #332]	; (8001aa4 <SIM_PDN_Activation+0x25c>)
 8001956:	4854      	ldr	r0, [pc, #336]	; (8001aa8 <SIM_PDN_Activation+0x260>)
 8001958:	f006 fe22 	bl	80085a0 <strstr>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d05e      	beq.n	8001a20 <SIM_PDN_Activation+0x1d8>
					isIncrementCommand = 1; // Increment to go to next command
 8001962:	2301      	movs	r3, #1
 8001964:	71fb      	strb	r3, [r7, #7]
				}

				// TODO: If not attached to PS service
				break;
 8001966:	e05b      	b.n	8001a20 <SIM_PDN_Activation+0x1d8>

			case 1:
				// +COPS?\r\r\n+COPS: 1,0,\"VodaCom-SA\",9\r\n\r\nOK\r\n - 9: NB-IoT Network
				if (strstr((char*) serialRX_Buffer, "+COPS?\r\r\n+COPS: 1,0,\"VodaCom-SA\",9\r\n\r\nOK\r\n") ) {
 8001968:	4950      	ldr	r1, [pc, #320]	; (8001aac <SIM_PDN_Activation+0x264>)
 800196a:	484f      	ldr	r0, [pc, #316]	; (8001aa8 <SIM_PDN_Activation+0x260>)
 800196c:	f006 fe18 	bl	80085a0 <strstr>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d056      	beq.n	8001a24 <SIM_PDN_Activation+0x1dc>
					isIncrementCommand = 1;
 8001976:	2301      	movs	r3, #1
 8001978:	71fb      	strb	r3, [r7, #7]
				}

				// TODO: If network information is wrong
				break;
 800197a:	e053      	b.n	8001a24 <SIM_PDN_Activation+0x1dc>

			case 2:
				// +CGNAPN: 1,\"internet\"\r\n\r\nOK\r\n
				if ( strstr((char*) serialRX_Buffer, "+CGNAPN: 1,\"internet\"\r\n\r\nOK\r\n") ) {
 800197c:	494c      	ldr	r1, [pc, #304]	; (8001ab0 <SIM_PDN_Activation+0x268>)
 800197e:	484a      	ldr	r0, [pc, #296]	; (8001aa8 <SIM_PDN_Activation+0x260>)
 8001980:	f006 fe0e 	bl	80085a0 <strstr>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <SIM_PDN_Activation+0x146>
					isIncrementCommand = 1;
 800198a:	2301      	movs	r3, #1
 800198c:	71fb      	strb	r3, [r7, #7]
				}

			case 3:
				// +CNACT: 0,0,\"0.0.0.0\" - Not activated
				// \r\nOK\r\n - End of response
				if ( (strstr((char*) serialRX_Buffer, "+CNACT: 0,0,\"0.0.0.0\"")) && (strstr((char*) serialRX_Buffer, "\r\nOK\r\n")) ) {
 800198e:	4949      	ldr	r1, [pc, #292]	; (8001ab4 <SIM_PDN_Activation+0x26c>)
 8001990:	4845      	ldr	r0, [pc, #276]	; (8001aa8 <SIM_PDN_Activation+0x260>)
 8001992:	f006 fe05 	bl	80085a0 <strstr>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d010      	beq.n	80019be <SIM_PDN_Activation+0x176>
 800199c:	4946      	ldr	r1, [pc, #280]	; (8001ab8 <SIM_PDN_Activation+0x270>)
 800199e:	4842      	ldr	r0, [pc, #264]	; (8001aa8 <SIM_PDN_Activation+0x260>)
 80019a0:	f006 fdfe 	bl	80085a0 <strstr>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d009      	beq.n	80019be <SIM_PDN_Activation+0x176>
					// Set to correct command for activation; Clear buffer; Enable transmit next command
					commandIndex = 4;
 80019aa:	4b36      	ldr	r3, [pc, #216]	; (8001a84 <SIM_PDN_Activation+0x23c>)
 80019ac:	2204      	movs	r2, #4
 80019ae:	801a      	strh	r2, [r3, #0]
					clearBuffer = 1;
 80019b0:	4b42      	ldr	r3, [pc, #264]	; (8001abc <SIM_PDN_Activation+0x274>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
					shouldTransmit = 1;
 80019b6:	4b32      	ldr	r3, [pc, #200]	; (8001a80 <SIM_PDN_Activation+0x238>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
					simState = SIM_HTTP_BUILD;
					isStateChanged = 1;
					clearBuffer = 1;
					shouldTransmit = 1;
				}
				break;
 80019bc:	e034      	b.n	8001a28 <SIM_PDN_Activation+0x1e0>
				else if ( (strstr((char*) serialRX_Buffer, "\r\n+CNACT: 0,1,")) && (strstr((char*) serialRX_Buffer, "\r\nOK\r\n"))) {
 80019be:	4940      	ldr	r1, [pc, #256]	; (8001ac0 <SIM_PDN_Activation+0x278>)
 80019c0:	4839      	ldr	r0, [pc, #228]	; (8001aa8 <SIM_PDN_Activation+0x260>)
 80019c2:	f006 fded 	bl	80085a0 <strstr>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d02d      	beq.n	8001a28 <SIM_PDN_Activation+0x1e0>
 80019cc:	493a      	ldr	r1, [pc, #232]	; (8001ab8 <SIM_PDN_Activation+0x270>)
 80019ce:	4836      	ldr	r0, [pc, #216]	; (8001aa8 <SIM_PDN_Activation+0x260>)
 80019d0:	f006 fde6 	bl	80085a0 <strstr>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d026      	beq.n	8001a28 <SIM_PDN_Activation+0x1e0>
					simState = SIM_HTTP_BUILD;
 80019da:	4b3a      	ldr	r3, [pc, #232]	; (8001ac4 <SIM_PDN_Activation+0x27c>)
 80019dc:	2203      	movs	r2, #3
 80019de:	701a      	strb	r2, [r3, #0]
					isStateChanged = 1;
 80019e0:	4b39      	ldr	r3, [pc, #228]	; (8001ac8 <SIM_PDN_Activation+0x280>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
					clearBuffer = 1;
 80019e6:	4b35      	ldr	r3, [pc, #212]	; (8001abc <SIM_PDN_Activation+0x274>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
					shouldTransmit = 1;
 80019ec:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <SIM_PDN_Activation+0x238>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	701a      	strb	r2, [r3, #0]
				break;
 80019f2:	e019      	b.n	8001a28 <SIM_PDN_Activation+0x1e0>

			case 4:
				// +APP PDP: 0,ACTIVE\r\n - Activated
				if ( strstr((char*) serialRX_Buffer, "+APP PDP: 0,ACTIVE\r\n") ) {
 80019f4:	4935      	ldr	r1, [pc, #212]	; (8001acc <SIM_PDN_Activation+0x284>)
 80019f6:	482c      	ldr	r0, [pc, #176]	; (8001aa8 <SIM_PDN_Activation+0x260>)
 80019f8:	f006 fdd2 	bl	80085a0 <strstr>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d014      	beq.n	8001a2c <SIM_PDN_Activation+0x1e4>
					// Successful network activation
					// Change state; Clear buffer; Enable transmit
					simState = SIM_HTTP_BUILD;
 8001a02:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <SIM_PDN_Activation+0x27c>)
 8001a04:	2203      	movs	r2, #3
 8001a06:	701a      	strb	r2, [r3, #0]
					isStateChanged = 1;
 8001a08:	4b2f      	ldr	r3, [pc, #188]	; (8001ac8 <SIM_PDN_Activation+0x280>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
					clearBuffer = 1;
 8001a0e:	4b2b      	ldr	r3, [pc, #172]	; (8001abc <SIM_PDN_Activation+0x274>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
					shouldTransmit = 1;
 8001a14:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <SIM_PDN_Activation+0x238>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001a1a:	e007      	b.n	8001a2c <SIM_PDN_Activation+0x1e4>

			default:
				break;
 8001a1c:	bf00      	nop
 8001a1e:	e006      	b.n	8001a2e <SIM_PDN_Activation+0x1e6>
				break;
 8001a20:	bf00      	nop
 8001a22:	e004      	b.n	8001a2e <SIM_PDN_Activation+0x1e6>
				break;
 8001a24:	bf00      	nop
 8001a26:	e002      	b.n	8001a2e <SIM_PDN_Activation+0x1e6>
				break;
 8001a28:	bf00      	nop
 8001a2a:	e000      	b.n	8001a2e <SIM_PDN_Activation+0x1e6>
				break;
 8001a2c:	bf00      	nop
		}

	if (isIncrementCommand) {
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00e      	beq.n	8001a52 <SIM_PDN_Activation+0x20a>
		++commandIndex; // Next command
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <SIM_PDN_Activation+0x23c>)
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <SIM_PDN_Activation+0x23c>)
 8001a40:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 8001a42:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <SIM_PDN_Activation+0x274>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 8001a48:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <SIM_PDN_Activation+0x238>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	71fb      	strb	r3, [r7, #7]
	}
	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 8001a52:	79bb      	ldrb	r3, [r7, #6]
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <SIM_PDN_Activation+0x23c>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d304      	bcc.n	8001a6a <SIM_PDN_Activation+0x222>
 8001a60:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <SIM_PDN_Activation+0x280>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d006      	beq.n	8001a78 <SIM_PDN_Activation+0x230>
		commandIndex = 0;
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <SIM_PDN_Activation+0x23c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 8001a70:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <SIM_PDN_Activation+0x280>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
	}


	return;
 8001a76:	bf00      	nop
 8001a78:	bf00      	nop
}
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000002 	.word	0x20000002
 8001a84:	20000340 	.word	0x20000340
 8001a88:	08009c28 	.word	0x08009c28
 8001a8c:	200002dc 	.word	0x200002dc
 8001a90:	20000244 	.word	0x20000244
 8001a94:	08009c34 	.word	0x08009c34
 8001a98:	08009c40 	.word	0x08009c40
 8001a9c:	08009c4c 	.word	0x08009c4c
 8001aa0:	08009c58 	.word	0x08009c58
 8001aa4:	08009c68 	.word	0x08009c68
 8001aa8:	20000344 	.word	0x20000344
 8001aac:	08009c7c 	.word	0x08009c7c
 8001ab0:	08009ca8 	.word	0x08009ca8
 8001ab4:	08009cc8 	.word	0x08009cc8
 8001ab8:	08009ce0 	.word	0x08009ce0
 8001abc:	20000440 	.word	0x20000440
 8001ac0:	08009ce8 	.word	0x08009ce8
 8001ac4:	20000001 	.word	0x20000001
 8001ac8:	20000342 	.word	0x20000342
 8001acc:	08009cf8 	.word	0x08009cf8

08001ad0 <SIM_HTTP_Build>:

// nextState: State to go in next (POST or GET)
void SIM_HTTP_Build(simStateType nextState) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
	// 4: AT+SHCONF="HEADERLEN",350 - Set HTTP head length
	// 5: AT+SHCONN - HTTP build (retry if unsuccessful)
	// Change to either HTTP_MAKE_GET or to HTTP_MAKE_POST


	uint8_t maxCommand = 5;
 8001ada:	2305      	movs	r3, #5
 8001adc:	73bb      	strb	r3, [r7, #14]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 8001ade:	4b9e      	ldr	r3, [pc, #632]	; (8001d58 <SIM_HTTP_Build+0x288>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d07b      	beq.n	8001bde <SIM_HTTP_Build+0x10e>
 8001ae6:	7bbb      	ldrb	r3, [r7, #14]
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	4b9c      	ldr	r3, [pc, #624]	; (8001d5c <SIM_HTTP_Build+0x28c>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d374      	bcc.n	8001bde <SIM_HTTP_Build+0x10e>
		// Next command should be transmitted

		switch (commandIndex) {
 8001af4:	4b99      	ldr	r3, [pc, #612]	; (8001d5c <SIM_HTTP_Build+0x28c>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	d86b      	bhi.n	8001bd6 <SIM_HTTP_Build+0x106>
 8001afe:	a201      	add	r2, pc, #4	; (adr r2, 8001b04 <SIM_HTTP_Build+0x34>)
 8001b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b04:	08001b1d 	.word	0x08001b1d
 8001b08:	08001b3b 	.word	0x08001b3b
 8001b0c:	08001b59 	.word	0x08001b59
 8001b10:	08001b77 	.word	0x08001b77
 8001b14:	08001b95 	.word	0x08001b95
 8001b18:	08001bb3 	.word	0x08001bb3
			case 0:
				// Check if HTTP is connected
				sprintf(ATcommand, "AT+SHSTATE?\r\n");
 8001b1c:	4990      	ldr	r1, [pc, #576]	; (8001d60 <SIM_HTTP_Build+0x290>)
 8001b1e:	4891      	ldr	r0, [pc, #580]	; (8001d64 <SIM_HTTP_Build+0x294>)
 8001b20:	f006 fcfc 	bl	800851c <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8001b24:	488f      	ldr	r0, [pc, #572]	; (8001d64 <SIM_HTTP_Build+0x294>)
 8001b26:	f7fe fb53 	bl	80001d0 <strlen>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	498c      	ldr	r1, [pc, #560]	; (8001d64 <SIM_HTTP_Build+0x294>)
 8001b32:	488d      	ldr	r0, [pc, #564]	; (8001d68 <SIM_HTTP_Build+0x298>)
 8001b34:	f004 fbd4 	bl	80062e0 <HAL_UART_Transmit_IT>
				break;
 8001b38:	e04e      	b.n	8001bd8 <SIM_HTTP_Build+0x108>

			case 1:
				// Disconnect HTTP
				sprintf(ATcommand, "AT+SHDISC\r\n");
 8001b3a:	498c      	ldr	r1, [pc, #560]	; (8001d6c <SIM_HTTP_Build+0x29c>)
 8001b3c:	4889      	ldr	r0, [pc, #548]	; (8001d64 <SIM_HTTP_Build+0x294>)
 8001b3e:	f006 fced 	bl	800851c <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8001b42:	4888      	ldr	r0, [pc, #544]	; (8001d64 <SIM_HTTP_Build+0x294>)
 8001b44:	f7fe fb44 	bl	80001d0 <strlen>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4985      	ldr	r1, [pc, #532]	; (8001d64 <SIM_HTTP_Build+0x294>)
 8001b50:	4885      	ldr	r0, [pc, #532]	; (8001d68 <SIM_HTTP_Build+0x298>)
 8001b52:	f004 fbc5 	bl	80062e0 <HAL_UART_Transmit_IT>
				break;
 8001b56:	e03f      	b.n	8001bd8 <SIM_HTTP_Build+0x108>

			case 2:
				// Set up server URL
				sprintf(ATcommand, "AT+SHCONF=\"URL\",\"http://riversense.herokuapp.com\"\r\n");
 8001b58:	4985      	ldr	r1, [pc, #532]	; (8001d70 <SIM_HTTP_Build+0x2a0>)
 8001b5a:	4882      	ldr	r0, [pc, #520]	; (8001d64 <SIM_HTTP_Build+0x294>)
 8001b5c:	f006 fcde 	bl	800851c <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8001b60:	4880      	ldr	r0, [pc, #512]	; (8001d64 <SIM_HTTP_Build+0x294>)
 8001b62:	f7fe fb35 	bl	80001d0 <strlen>
 8001b66:	4603      	mov	r3, r0
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	497d      	ldr	r1, [pc, #500]	; (8001d64 <SIM_HTTP_Build+0x294>)
 8001b6e:	487e      	ldr	r0, [pc, #504]	; (8001d68 <SIM_HTTP_Build+0x298>)
 8001b70:	f004 fbb6 	bl	80062e0 <HAL_UART_Transmit_IT>
				break;
 8001b74:	e030      	b.n	8001bd8 <SIM_HTTP_Build+0x108>

			case 3:
				// Set HTTP body length
				sprintf(ATcommand, "AT+SHCONF=\"BODYLEN\",1024\r\n");
 8001b76:	497f      	ldr	r1, [pc, #508]	; (8001d74 <SIM_HTTP_Build+0x2a4>)
 8001b78:	487a      	ldr	r0, [pc, #488]	; (8001d64 <SIM_HTTP_Build+0x294>)
 8001b7a:	f006 fccf 	bl	800851c <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8001b7e:	4879      	ldr	r0, [pc, #484]	; (8001d64 <SIM_HTTP_Build+0x294>)
 8001b80:	f7fe fb26 	bl	80001d0 <strlen>
 8001b84:	4603      	mov	r3, r0
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4976      	ldr	r1, [pc, #472]	; (8001d64 <SIM_HTTP_Build+0x294>)
 8001b8c:	4876      	ldr	r0, [pc, #472]	; (8001d68 <SIM_HTTP_Build+0x298>)
 8001b8e:	f004 fba7 	bl	80062e0 <HAL_UART_Transmit_IT>
				break;
 8001b92:	e021      	b.n	8001bd8 <SIM_HTTP_Build+0x108>

			case 4:
				// Set HTTP head length
				sprintf(ATcommand, "AT+SHCONF=\"HEADERLEN\",350\r\n");
 8001b94:	4978      	ldr	r1, [pc, #480]	; (8001d78 <SIM_HTTP_Build+0x2a8>)
 8001b96:	4873      	ldr	r0, [pc, #460]	; (8001d64 <SIM_HTTP_Build+0x294>)
 8001b98:	f006 fcc0 	bl	800851c <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8001b9c:	4871      	ldr	r0, [pc, #452]	; (8001d64 <SIM_HTTP_Build+0x294>)
 8001b9e:	f7fe fb17 	bl	80001d0 <strlen>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	496e      	ldr	r1, [pc, #440]	; (8001d64 <SIM_HTTP_Build+0x294>)
 8001baa:	486f      	ldr	r0, [pc, #444]	; (8001d68 <SIM_HTTP_Build+0x298>)
 8001bac:	f004 fb98 	bl	80062e0 <HAL_UART_Transmit_IT>
				break;
 8001bb0:	e012      	b.n	8001bd8 <SIM_HTTP_Build+0x108>

			case 5:
				// HTTP connect (retry if unsuccessful)
				sprintf(ATcommand, "AT+SHCONN\r\n");
 8001bb2:	4972      	ldr	r1, [pc, #456]	; (8001d7c <SIM_HTTP_Build+0x2ac>)
 8001bb4:	486b      	ldr	r0, [pc, #428]	; (8001d64 <SIM_HTTP_Build+0x294>)
 8001bb6:	f006 fcb1 	bl	800851c <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8001bba:	486a      	ldr	r0, [pc, #424]	; (8001d64 <SIM_HTTP_Build+0x294>)
 8001bbc:	f7fe fb08 	bl	80001d0 <strlen>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4967      	ldr	r1, [pc, #412]	; (8001d64 <SIM_HTTP_Build+0x294>)
 8001bc8:	4867      	ldr	r0, [pc, #412]	; (8001d68 <SIM_HTTP_Build+0x298>)
 8001bca:	f004 fb89 	bl	80062e0 <HAL_UART_Transmit_IT>
				isLD3_Flicker = 0; // TODO: remove later
 8001bce:	4b6c      	ldr	r3, [pc, #432]	; (8001d80 <SIM_HTTP_Build+0x2b0>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
				break;
 8001bd4:	e000      	b.n	8001bd8 <SIM_HTTP_Build+0x108>

			default:
				break;
 8001bd6:	bf00      	nop
		}

		shouldTransmit = 0; // no transmission until response has been read
 8001bd8:	4b5f      	ldr	r3, [pc, #380]	; (8001d58 <SIM_HTTP_Build+0x288>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]

	} // if shouldTransmit
	// --------------------------------------------------------------- //

	// ---------------------------- RX ------------------------------- //
	uint8_t isIncrementCommand = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	73fb      	strb	r3, [r7, #15]

	switch (commandIndex) {
 8001be2:	4b5e      	ldr	r3, [pc, #376]	; (8001d5c <SIM_HTTP_Build+0x28c>)
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	2b05      	cmp	r3, #5
 8001bea:	d87e      	bhi.n	8001cea <SIM_HTTP_Build+0x21a>
 8001bec:	a201      	add	r2, pc, #4	; (adr r2, 8001bf4 <SIM_HTTP_Build+0x124>)
 8001bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf2:	bf00      	nop
 8001bf4:	08001c0d 	.word	0x08001c0d
 8001bf8:	08001c51 	.word	0x08001c51
 8001bfc:	08001c65 	.word	0x08001c65
 8001c00:	08001c79 	.word	0x08001c79
 8001c04:	08001c8d 	.word	0x08001c8d
 8001c08:	08001ca1 	.word	0x08001ca1
		case 0:
			// +SHSTATE: 0\r\n\r\nOK\r\n - HTTP disconnect state
			if (strstr((char*) serialRX_Buffer, "+SHSTATE: 0\r\n\r\nOK\r\n")) {
 8001c0c:	495d      	ldr	r1, [pc, #372]	; (8001d84 <SIM_HTTP_Build+0x2b4>)
 8001c0e:	485e      	ldr	r0, [pc, #376]	; (8001d88 <SIM_HTTP_Build+0x2b8>)
 8001c10:	f006 fcc6 	bl	80085a0 <strstr>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d009      	beq.n	8001c2e <SIM_HTTP_Build+0x15e>
				commandIndex = 2; // AT+SHCONF=... next command
 8001c1a:	4b50      	ldr	r3, [pc, #320]	; (8001d5c <SIM_HTTP_Build+0x28c>)
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	801a      	strh	r2, [r3, #0]
				clearBuffer = 1; // Clear buffer to receive next response
 8001c20:	4b5a      	ldr	r3, [pc, #360]	; (8001d8c <SIM_HTTP_Build+0x2bc>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1; // Can transmit next command
 8001c26:	4b4c      	ldr	r3, [pc, #304]	; (8001d58 <SIM_HTTP_Build+0x288>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	701a      	strb	r2, [r3, #0]
			else if (strstr((char*) serialRX_Buffer, "+SHSTATE: 1\r\n\r\nOK\r\n")) {
				commandIndex = 1; // AT+SHDISC next command
				clearBuffer = 1; // Clear buffer to receive next response
				shouldTransmit = 1; // Can transmit next command
			}
			break;
 8001c2c:	e05f      	b.n	8001cee <SIM_HTTP_Build+0x21e>
			else if (strstr((char*) serialRX_Buffer, "+SHSTATE: 1\r\n\r\nOK\r\n")) {
 8001c2e:	4958      	ldr	r1, [pc, #352]	; (8001d90 <SIM_HTTP_Build+0x2c0>)
 8001c30:	4855      	ldr	r0, [pc, #340]	; (8001d88 <SIM_HTTP_Build+0x2b8>)
 8001c32:	f006 fcb5 	bl	80085a0 <strstr>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d058      	beq.n	8001cee <SIM_HTTP_Build+0x21e>
				commandIndex = 1; // AT+SHDISC next command
 8001c3c:	4b47      	ldr	r3, [pc, #284]	; (8001d5c <SIM_HTTP_Build+0x28c>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	801a      	strh	r2, [r3, #0]
				clearBuffer = 1; // Clear buffer to receive next response
 8001c42:	4b52      	ldr	r3, [pc, #328]	; (8001d8c <SIM_HTTP_Build+0x2bc>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1; // Can transmit next command
 8001c48:	4b43      	ldr	r3, [pc, #268]	; (8001d58 <SIM_HTTP_Build+0x288>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	701a      	strb	r2, [r3, #0]
			break;
 8001c4e:	e04e      	b.n	8001cee <SIM_HTTP_Build+0x21e>

		case 1:
			// OK should be received for successful disconnect
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8001c50:	4950      	ldr	r1, [pc, #320]	; (8001d94 <SIM_HTTP_Build+0x2c4>)
 8001c52:	484d      	ldr	r0, [pc, #308]	; (8001d88 <SIM_HTTP_Build+0x2b8>)
 8001c54:	f006 fca4 	bl	80085a0 <strstr>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d049      	beq.n	8001cf2 <SIM_HTTP_Build+0x222>
				isIncrementCommand = 1;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8001c62:	e046      	b.n	8001cf2 <SIM_HTTP_Build+0x222>

		case 2:
			// OK should be received. URL setup
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8001c64:	494b      	ldr	r1, [pc, #300]	; (8001d94 <SIM_HTTP_Build+0x2c4>)
 8001c66:	4848      	ldr	r0, [pc, #288]	; (8001d88 <SIM_HTTP_Build+0x2b8>)
 8001c68:	f006 fc9a 	bl	80085a0 <strstr>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d041      	beq.n	8001cf6 <SIM_HTTP_Build+0x226>
				isIncrementCommand = 1;
 8001c72:	2301      	movs	r3, #1
 8001c74:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8001c76:	e03e      	b.n	8001cf6 <SIM_HTTP_Build+0x226>

		case 3:
			// OK should be received. HTTP body length
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8001c78:	4946      	ldr	r1, [pc, #280]	; (8001d94 <SIM_HTTP_Build+0x2c4>)
 8001c7a:	4843      	ldr	r0, [pc, #268]	; (8001d88 <SIM_HTTP_Build+0x2b8>)
 8001c7c:	f006 fc90 	bl	80085a0 <strstr>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d039      	beq.n	8001cfa <SIM_HTTP_Build+0x22a>
				isIncrementCommand = 1;
 8001c86:	2301      	movs	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8001c8a:	e036      	b.n	8001cfa <SIM_HTTP_Build+0x22a>

		case 4:
			// OK should be received. HTTP head length
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8001c8c:	4941      	ldr	r1, [pc, #260]	; (8001d94 <SIM_HTTP_Build+0x2c4>)
 8001c8e:	483e      	ldr	r0, [pc, #248]	; (8001d88 <SIM_HTTP_Build+0x2b8>)
 8001c90:	f006 fc86 	bl	80085a0 <strstr>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d031      	beq.n	8001cfe <SIM_HTTP_Build+0x22e>
				isIncrementCommand = 1; // Increment to go to next command
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8001c9e:	e02e      	b.n	8001cfe <SIM_HTTP_Build+0x22e>

		case 5:
			// Connection successful
			if (strstr((char*) serialRX_Buffer, "AT+SHCONN\r\r\nOK\r\n")) {
 8001ca0:	493d      	ldr	r1, [pc, #244]	; (8001d98 <SIM_HTTP_Build+0x2c8>)
 8001ca2:	4839      	ldr	r0, [pc, #228]	; (8001d88 <SIM_HTTP_Build+0x2b8>)
 8001ca4:	f006 fc7c 	bl	80085a0 <strstr>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00f      	beq.n	8001cce <SIM_HTTP_Build+0x1fe>
				simState = nextState;
 8001cae:	4a3b      	ldr	r2, [pc, #236]	; (8001d9c <SIM_HTTP_Build+0x2cc>)
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	7013      	strb	r3, [r2, #0]
				isStateChanged = 1;
 8001cb4:	4b3a      	ldr	r3, [pc, #232]	; (8001da0 <SIM_HTTP_Build+0x2d0>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1;
 8001cba:	4b27      	ldr	r3, [pc, #156]	; (8001d58 <SIM_HTTP_Build+0x288>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
				clearBuffer = 1;
 8001cc0:	4b32      	ldr	r3, [pc, #200]	; (8001d8c <SIM_HTTP_Build+0x2bc>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	701a      	strb	r2, [r3, #0]

				isLD3_Flicker = 1; // TODO: remove later
 8001cc6:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <SIM_HTTP_Build+0x2b0>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	701a      	strb	r2, [r3, #0]
			else if (strstr((char*) serialRX_Buffer, "AT+SHCONN\r\r\nERROR\r\n")) {
				// Resends HTTP build command
				clearBuffer = 1;
				shouldTransmit = 1;
			}
			break;
 8001ccc:	e019      	b.n	8001d02 <SIM_HTTP_Build+0x232>
			else if (strstr((char*) serialRX_Buffer, "AT+SHCONN\r\r\nERROR\r\n")) {
 8001cce:	4935      	ldr	r1, [pc, #212]	; (8001da4 <SIM_HTTP_Build+0x2d4>)
 8001cd0:	482d      	ldr	r0, [pc, #180]	; (8001d88 <SIM_HTTP_Build+0x2b8>)
 8001cd2:	f006 fc65 	bl	80085a0 <strstr>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d012      	beq.n	8001d02 <SIM_HTTP_Build+0x232>
				clearBuffer = 1;
 8001cdc:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <SIM_HTTP_Build+0x2bc>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1;
 8001ce2:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <SIM_HTTP_Build+0x288>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]
			break;
 8001ce8:	e00b      	b.n	8001d02 <SIM_HTTP_Build+0x232>

		default:
			break;
 8001cea:	bf00      	nop
 8001cec:	e00a      	b.n	8001d04 <SIM_HTTP_Build+0x234>
			break;
 8001cee:	bf00      	nop
 8001cf0:	e008      	b.n	8001d04 <SIM_HTTP_Build+0x234>
			break;
 8001cf2:	bf00      	nop
 8001cf4:	e006      	b.n	8001d04 <SIM_HTTP_Build+0x234>
			break;
 8001cf6:	bf00      	nop
 8001cf8:	e004      	b.n	8001d04 <SIM_HTTP_Build+0x234>
			break;
 8001cfa:	bf00      	nop
 8001cfc:	e002      	b.n	8001d04 <SIM_HTTP_Build+0x234>
			break;
 8001cfe:	bf00      	nop
 8001d00:	e000      	b.n	8001d04 <SIM_HTTP_Build+0x234>
			break;
 8001d02:	bf00      	nop
	}

	if (isIncrementCommand) {
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00e      	beq.n	8001d28 <SIM_HTTP_Build+0x258>
		++commandIndex; // Next command
 8001d0a:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <SIM_HTTP_Build+0x28c>)
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	3301      	adds	r3, #1
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <SIM_HTTP_Build+0x28c>)
 8001d16:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 8001d18:	4b1c      	ldr	r3, [pc, #112]	; (8001d8c <SIM_HTTP_Build+0x2bc>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <SIM_HTTP_Build+0x288>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]
	}

	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 8001d28:	7bbb      	ldrb	r3, [r7, #14]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <SIM_HTTP_Build+0x28c>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d304      	bcc.n	8001d40 <SIM_HTTP_Build+0x270>
 8001d36:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <SIM_HTTP_Build+0x2d0>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d006      	beq.n	8001d4e <SIM_HTTP_Build+0x27e>
		commandIndex = 0;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <SIM_HTTP_Build+0x28c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 8001d46:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <SIM_HTTP_Build+0x2d0>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
	}


	return;
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
}
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000002 	.word	0x20000002
 8001d5c:	20000340 	.word	0x20000340
 8001d60:	08009d10 	.word	0x08009d10
 8001d64:	200002dc 	.word	0x200002dc
 8001d68:	20000244 	.word	0x20000244
 8001d6c:	08009d20 	.word	0x08009d20
 8001d70:	08009d2c 	.word	0x08009d2c
 8001d74:	08009d60 	.word	0x08009d60
 8001d78:	08009d7c 	.word	0x08009d7c
 8001d7c:	08009d98 	.word	0x08009d98
 8001d80:	20000000 	.word	0x20000000
 8001d84:	08009da4 	.word	0x08009da4
 8001d88:	20000344 	.word	0x20000344
 8001d8c:	20000440 	.word	0x20000440
 8001d90:	08009db8 	.word	0x08009db8
 8001d94:	08009be0 	.word	0x08009be0
 8001d98:	08009dcc 	.word	0x08009dcc
 8001d9c:	20000001 	.word	0x20000001
 8001da0:	20000342 	.word	0x20000342
 8001da4:	08009de0 	.word	0x08009de0

08001da8 <SIM_HTTP_Make_Post>:

void SIM_HTTP_Make_Post(void) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
	// 8: AT+SHREQ="/api/update?API_KEY=9349da48-62ef-496b-831a-4720015ff72a",3 - Set request type is POST and send

	// 9: AT+SHREAD=0,2 // read http result (second variable dependant on result from SHREQ)
	// 10: AT+SHDISC - Disconnect HTTP connect

	uint8_t maxCommand = 10;
 8001dae:	230a      	movs	r3, #10
 8001db0:	73fb      	strb	r3, [r7, #15]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 8001db2:	4baf      	ldr	r3, [pc, #700]	; (8002070 <SIM_HTTP_Make_Post+0x2c8>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 80b6 	beq.w	8001f28 <SIM_HTTP_Make_Post+0x180>
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	4bac      	ldr	r3, [pc, #688]	; (8002074 <SIM_HTTP_Make_Post+0x2cc>)
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	f0c0 80ae 	bcc.w	8001f28 <SIM_HTTP_Make_Post+0x180>
		// Next command should be transmitted

		switch (commandIndex) {
 8001dcc:	4ba9      	ldr	r3, [pc, #676]	; (8002074 <SIM_HTTP_Make_Post+0x2cc>)
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	2b0a      	cmp	r3, #10
 8001dd4:	f200 809a 	bhi.w	8001f0c <SIM_HTTP_Make_Post+0x164>
 8001dd8:	a201      	add	r2, pc, #4	; (adr r2, 8001de0 <SIM_HTTP_Make_Post+0x38>)
 8001dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dde:	bf00      	nop
 8001de0:	08001e0d 	.word	0x08001e0d
 8001de4:	08001e17 	.word	0x08001e17
 8001de8:	08001e21 	.word	0x08001e21
 8001dec:	08001e2b 	.word	0x08001e2b
 8001df0:	08001e35 	.word	0x08001e35
 8001df4:	08001e3f 	.word	0x08001e3f
 8001df8:	08001e49 	.word	0x08001e49
 8001dfc:	08001e53 	.word	0x08001e53
 8001e00:	08001ed7 	.word	0x08001ed7
 8001e04:	08001ee1 	.word	0x08001ee1
 8001e08:	08001f03 	.word	0x08001f03
			case 0:
				// Get HTTP header
				sprintf(ATcommand, "AT+SHSTATE?\r\n");
 8001e0c:	499a      	ldr	r1, [pc, #616]	; (8002078 <SIM_HTTP_Make_Post+0x2d0>)
 8001e0e:	489b      	ldr	r0, [pc, #620]	; (800207c <SIM_HTTP_Make_Post+0x2d4>)
 8001e10:	f006 fb84 	bl	800851c <siprintf>
				break;
 8001e14:	e07b      	b.n	8001f0e <SIM_HTTP_Make_Post+0x166>

			case 1:
				// Clear HTTP header
				sprintf(ATcommand, "AT+SHCHEAD\r\n");
 8001e16:	499a      	ldr	r1, [pc, #616]	; (8002080 <SIM_HTTP_Make_Post+0x2d8>)
 8001e18:	4898      	ldr	r0, [pc, #608]	; (800207c <SIM_HTTP_Make_Post+0x2d4>)
 8001e1a:	f006 fb7f 	bl	800851c <siprintf>
				break;
 8001e1e:	e076      	b.n	8001f0e <SIM_HTTP_Make_Post+0x166>

			case 2:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Content-Type\",\"application/x-www-form-urlencoded\"\r\n");
 8001e20:	4998      	ldr	r1, [pc, #608]	; (8002084 <SIM_HTTP_Make_Post+0x2dc>)
 8001e22:	4896      	ldr	r0, [pc, #600]	; (800207c <SIM_HTTP_Make_Post+0x2d4>)
 8001e24:	f006 fb7a 	bl	800851c <siprintf>
				break;
 8001e28:	e071      	b.n	8001f0e <SIM_HTTP_Make_Post+0x166>

			case 3:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Cache-control\",\"no-cache\"\r\n");
 8001e2a:	4997      	ldr	r1, [pc, #604]	; (8002088 <SIM_HTTP_Make_Post+0x2e0>)
 8001e2c:	4893      	ldr	r0, [pc, #588]	; (800207c <SIM_HTTP_Make_Post+0x2d4>)
 8001e2e:	f006 fb75 	bl	800851c <siprintf>
				break;
 8001e32:	e06c      	b.n	8001f0e <SIM_HTTP_Make_Post+0x166>

			case 4:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Connection\",\"keep-alive\"\r\n");
 8001e34:	4995      	ldr	r1, [pc, #596]	; (800208c <SIM_HTTP_Make_Post+0x2e4>)
 8001e36:	4891      	ldr	r0, [pc, #580]	; (800207c <SIM_HTTP_Make_Post+0x2d4>)
 8001e38:	f006 fb70 	bl	800851c <siprintf>
				break;
 8001e3c:	e067      	b.n	8001f0e <SIM_HTTP_Make_Post+0x166>

			case 5:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Accept\",\"*/*\"\r\n");
 8001e3e:	4994      	ldr	r1, [pc, #592]	; (8002090 <SIM_HTTP_Make_Post+0x2e8>)
 8001e40:	488e      	ldr	r0, [pc, #568]	; (800207c <SIM_HTTP_Make_Post+0x2d4>)
 8001e42:	f006 fb6b 	bl	800851c <siprintf>
				break;
 8001e46:	e062      	b.n	8001f0e <SIM_HTTP_Make_Post+0x166>

			case 6:
				// Clear body content parameter
				sprintf(ATcommand, "AT+SHCPARA\r\n");
 8001e48:	4992      	ldr	r1, [pc, #584]	; (8002094 <SIM_HTTP_Make_Post+0x2ec>)
 8001e4a:	488c      	ldr	r0, [pc, #560]	; (800207c <SIM_HTTP_Make_Post+0x2d4>)
 8001e4c:	f006 fb66 	bl	800851c <siprintf>
				break;
 8001e50:	e05d      	b.n	8001f0e <SIM_HTTP_Make_Post+0x166>

			case 7:
				// Add body content parameter(s)
				memset(commandToSend, 0, sizeof(commandToSend)); // clear previous data
 8001e52:	2264      	movs	r2, #100	; 0x64
 8001e54:	2100      	movs	r1, #0
 8001e56:	4890      	ldr	r0, [pc, #576]	; (8002098 <SIM_HTTP_Make_Post+0x2f0>)
 8001e58:	f006 fb58 	bl	800850c <memset>
				strcat(commandToSend, "AT+SHPARA=");
 8001e5c:	488e      	ldr	r0, [pc, #568]	; (8002098 <SIM_HTTP_Make_Post+0x2f0>)
 8001e5e:	f7fe f9b7 	bl	80001d0 <strlen>
 8001e62:	4603      	mov	r3, r0
 8001e64:	461a      	mov	r2, r3
 8001e66:	4b8c      	ldr	r3, [pc, #560]	; (8002098 <SIM_HTTP_Make_Post+0x2f0>)
 8001e68:	4413      	add	r3, r2
 8001e6a:	498c      	ldr	r1, [pc, #560]	; (800209c <SIM_HTTP_Make_Post+0x2f4>)
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	460b      	mov	r3, r1
 8001e70:	cb03      	ldmia	r3!, {r0, r1}
 8001e72:	6010      	str	r0, [r2, #0]
 8001e74:	6051      	str	r1, [r2, #4]
 8001e76:	8819      	ldrh	r1, [r3, #0]
 8001e78:	789b      	ldrb	r3, [r3, #2]
 8001e7a:	8111      	strh	r1, [r2, #8]
 8001e7c:	7293      	strb	r3, [r2, #10]
				strcat(commandToSend, (char*)(testForms+testFormsIndex));
 8001e7e:	4b88      	ldr	r3, [pc, #544]	; (80020a0 <SIM_HTTP_Make_Post+0x2f8>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b85      	ldr	r3, [pc, #532]	; (80020a4 <SIM_HTTP_Make_Post+0x2fc>)
 8001e90:	4413      	add	r3, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	4880      	ldr	r0, [pc, #512]	; (8002098 <SIM_HTTP_Make_Post+0x2f0>)
 8001e96:	f006 fb61 	bl	800855c <strcat>
				strcat(commandToSend, "\r\n");
 8001e9a:	487f      	ldr	r0, [pc, #508]	; (8002098 <SIM_HTTP_Make_Post+0x2f0>)
 8001e9c:	f7fe f998 	bl	80001d0 <strlen>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b7c      	ldr	r3, [pc, #496]	; (8002098 <SIM_HTTP_Make_Post+0x2f0>)
 8001ea6:	4413      	add	r3, r2
 8001ea8:	4a7f      	ldr	r2, [pc, #508]	; (80020a8 <SIM_HTTP_Make_Post+0x300>)
 8001eaa:	8811      	ldrh	r1, [r2, #0]
 8001eac:	7892      	ldrb	r2, [r2, #2]
 8001eae:	8019      	strh	r1, [r3, #0]
 8001eb0:	709a      	strb	r2, [r3, #2]
				++testFormsIndex;
 8001eb2:	4b7b      	ldr	r3, [pc, #492]	; (80020a0 <SIM_HTTP_Make_Post+0x2f8>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4b79      	ldr	r3, [pc, #484]	; (80020a0 <SIM_HTTP_Make_Post+0x2f8>)
 8001ebc:	701a      	strb	r2, [r3, #0]
				if (testFormsIndex == TEST_FORM_LENGTH) {
 8001ebe:	4b78      	ldr	r3, [pc, #480]	; (80020a0 <SIM_HTTP_Make_Post+0x2f8>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b05      	cmp	r3, #5
 8001ec4:	d102      	bne.n	8001ecc <SIM_HTTP_Make_Post+0x124>
					testFormsSentFlag = 1;
 8001ec6:	4b79      	ldr	r3, [pc, #484]	; (80020ac <SIM_HTTP_Make_Post+0x304>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
				}
//				sprintf(ATcommand, "AT+SHPARA=\"batt_1\",\"2022-09-07 18:47:06,7.89\"\r\n");
				sprintf(ATcommand, commandToSend);
 8001ecc:	4972      	ldr	r1, [pc, #456]	; (8002098 <SIM_HTTP_Make_Post+0x2f0>)
 8001ece:	486b      	ldr	r0, [pc, #428]	; (800207c <SIM_HTTP_Make_Post+0x2d4>)
 8001ed0:	f006 fb24 	bl	800851c <siprintf>
				break;
 8001ed4:	e01b      	b.n	8001f0e <SIM_HTTP_Make_Post+0x166>

			case 8:
				// Add header content
//				sprintf(ATcommand, "AT+SHREQ=\"/update?api_key=1EC4ZVYTHEJUAAIO&field1=60\",3\r\nAT\r\n");
				sprintf(ATcommand, "AT+SHREQ=\"/api/update?API_KEY=9349da48-62ef-496b-831a-4720015ff72a\",3\r\n");
 8001ed6:	4976      	ldr	r1, [pc, #472]	; (80020b0 <SIM_HTTP_Make_Post+0x308>)
 8001ed8:	4868      	ldr	r0, [pc, #416]	; (800207c <SIM_HTTP_Make_Post+0x2d4>)
 8001eda:	f006 fb1f 	bl	800851c <siprintf>
				break;
 8001ede:	e016      	b.n	8001f0e <SIM_HTTP_Make_Post+0x166>

			case 9: ;
				// Read data after request
				char d[4];
				itoa(dataLengthVal, d, 10);
 8001ee0:	4b74      	ldr	r3, [pc, #464]	; (80020b4 <SIM_HTTP_Make_Post+0x30c>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f107 0308 	add.w	r3, r7, #8
 8001eea:	220a      	movs	r2, #10
 8001eec:	4619      	mov	r1, r3
 8001eee:	f006 fb0b 	bl	8008508 <itoa>
				sprintf(ATcommand, "AT+SHREAD=0,%s\r\n", d);
 8001ef2:	f107 0308 	add.w	r3, r7, #8
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	496f      	ldr	r1, [pc, #444]	; (80020b8 <SIM_HTTP_Make_Post+0x310>)
 8001efa:	4860      	ldr	r0, [pc, #384]	; (800207c <SIM_HTTP_Make_Post+0x2d4>)
 8001efc:	f006 fb0e 	bl	800851c <siprintf>
				break;
 8001f00:	e005      	b.n	8001f0e <SIM_HTTP_Make_Post+0x166>

			case 10:
				// Disconnect HTTP
				sprintf(ATcommand, "AT+SHDISC\r\n");
 8001f02:	496e      	ldr	r1, [pc, #440]	; (80020bc <SIM_HTTP_Make_Post+0x314>)
 8001f04:	485d      	ldr	r0, [pc, #372]	; (800207c <SIM_HTTP_Make_Post+0x2d4>)
 8001f06:	f006 fb09 	bl	800851c <siprintf>
				break;
 8001f0a:	e000      	b.n	8001f0e <SIM_HTTP_Make_Post+0x166>

			default:
				break;
 8001f0c:	bf00      	nop
		}

		HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand)); // Transmit AT command
 8001f0e:	485b      	ldr	r0, [pc, #364]	; (800207c <SIM_HTTP_Make_Post+0x2d4>)
 8001f10:	f7fe f95e 	bl	80001d0 <strlen>
 8001f14:	4603      	mov	r3, r0
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4958      	ldr	r1, [pc, #352]	; (800207c <SIM_HTTP_Make_Post+0x2d4>)
 8001f1c:	4868      	ldr	r0, [pc, #416]	; (80020c0 <SIM_HTTP_Make_Post+0x318>)
 8001f1e:	f004 f9df 	bl	80062e0 <HAL_UART_Transmit_IT>
		shouldTransmit = 0; // no transmission until response has been read
 8001f22:	4b53      	ldr	r3, [pc, #332]	; (8002070 <SIM_HTTP_Make_Post+0x2c8>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]

	} // if shouldTransmit
	// --------------------------------------------------------------- //

	// ---------------------------- RX ------------------------------- //
	uint8_t isIncrementCommand = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	75fb      	strb	r3, [r7, #23]

	switch (commandIndex) {
 8001f2c:	4b51      	ldr	r3, [pc, #324]	; (8002074 <SIM_HTTP_Make_Post+0x2cc>)
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	2b0a      	cmp	r3, #10
 8001f34:	f200 813a 	bhi.w	80021ac <SIM_HTTP_Make_Post+0x404>
 8001f38:	a201      	add	r2, pc, #4	; (adr r2, 8001f40 <SIM_HTTP_Make_Post+0x198>)
 8001f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3e:	bf00      	nop
 8001f40:	08001f6d 	.word	0x08001f6d
 8001f44:	08001fb9 	.word	0x08001fb9
 8001f48:	08001fcf 	.word	0x08001fcf
 8001f4c:	08001fe5 	.word	0x08001fe5
 8001f50:	08001ffb 	.word	0x08001ffb
 8001f54:	08002011 	.word	0x08002011
 8001f58:	08002027 	.word	0x08002027
 8001f5c:	0800203d 	.word	0x0800203d
 8001f60:	080020e1 	.word	0x080020e1
 8001f64:	08002169 	.word	0x08002169
 8001f68:	08002187 	.word	0x08002187
		case 0:
			// +SHSTATE: 0\r\n\r\nOK\r\n - HTTP disconnect state
			if (strstr((char*) serialRX_Buffer, "+SHSTATE: 0\r\n\r\nOK\r\n")) {
 8001f6c:	4955      	ldr	r1, [pc, #340]	; (80020c4 <SIM_HTTP_Make_Post+0x31c>)
 8001f6e:	4856      	ldr	r0, [pc, #344]	; (80020c8 <SIM_HTTP_Make_Post+0x320>)
 8001f70:	f006 fb16 	bl	80085a0 <strstr>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00c      	beq.n	8001f94 <SIM_HTTP_Make_Post+0x1ec>
				// If disconnected, build HTTP post
				simState = SIM_HTTP_BUILD;
 8001f7a:	4b54      	ldr	r3, [pc, #336]	; (80020cc <SIM_HTTP_Make_Post+0x324>)
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	701a      	strb	r2, [r3, #0]
				isStateChanged = 1;
 8001f80:	4b53      	ldr	r3, [pc, #332]	; (80020d0 <SIM_HTTP_Make_Post+0x328>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
				clearBuffer = 1; // Clear buffer to receive next response
 8001f86:	4b53      	ldr	r3, [pc, #332]	; (80020d4 <SIM_HTTP_Make_Post+0x32c>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1; // Can transmit next command
 8001f8c:	4b38      	ldr	r3, [pc, #224]	; (8002070 <SIM_HTTP_Make_Post+0x2c8>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
			else if (strstr((char*) serialRX_Buffer, "+SHSTATE: 1\r\n\r\nOK\r\n")) {
				commandIndex = 1; // AT+SHDISC next command
				clearBuffer = 1; // Clear buffer to receive next response
				shouldTransmit = 1; // Can transmit next command
			}
			break;
 8001f92:	e10d      	b.n	80021b0 <SIM_HTTP_Make_Post+0x408>
			else if (strstr((char*) serialRX_Buffer, "+SHSTATE: 1\r\n\r\nOK\r\n")) {
 8001f94:	4950      	ldr	r1, [pc, #320]	; (80020d8 <SIM_HTTP_Make_Post+0x330>)
 8001f96:	484c      	ldr	r0, [pc, #304]	; (80020c8 <SIM_HTTP_Make_Post+0x320>)
 8001f98:	f006 fb02 	bl	80085a0 <strstr>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8106 	beq.w	80021b0 <SIM_HTTP_Make_Post+0x408>
				commandIndex = 1; // AT+SHDISC next command
 8001fa4:	4b33      	ldr	r3, [pc, #204]	; (8002074 <SIM_HTTP_Make_Post+0x2cc>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	801a      	strh	r2, [r3, #0]
				clearBuffer = 1; // Clear buffer to receive next response
 8001faa:	4b4a      	ldr	r3, [pc, #296]	; (80020d4 <SIM_HTTP_Make_Post+0x32c>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1; // Can transmit next command
 8001fb0:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <SIM_HTTP_Make_Post+0x2c8>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	701a      	strb	r2, [r3, #0]
			break;
 8001fb6:	e0fb      	b.n	80021b0 <SIM_HTTP_Make_Post+0x408>

		case 1:
			// OK received if header cleared
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8001fb8:	4948      	ldr	r1, [pc, #288]	; (80020dc <SIM_HTTP_Make_Post+0x334>)
 8001fba:	4843      	ldr	r0, [pc, #268]	; (80020c8 <SIM_HTTP_Make_Post+0x320>)
 8001fbc:	f006 faf0 	bl	80085a0 <strstr>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80f6 	beq.w	80021b4 <SIM_HTTP_Make_Post+0x40c>
				isIncrementCommand = 1;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8001fcc:	e0f2      	b.n	80021b4 <SIM_HTTP_Make_Post+0x40c>

		case 2:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8001fce:	4943      	ldr	r1, [pc, #268]	; (80020dc <SIM_HTTP_Make_Post+0x334>)
 8001fd0:	483d      	ldr	r0, [pc, #244]	; (80020c8 <SIM_HTTP_Make_Post+0x320>)
 8001fd2:	f006 fae5 	bl	80085a0 <strstr>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80ed 	beq.w	80021b8 <SIM_HTTP_Make_Post+0x410>
				isIncrementCommand = 1;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8001fe2:	e0e9      	b.n	80021b8 <SIM_HTTP_Make_Post+0x410>

		case 3:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8001fe4:	493d      	ldr	r1, [pc, #244]	; (80020dc <SIM_HTTP_Make_Post+0x334>)
 8001fe6:	4838      	ldr	r0, [pc, #224]	; (80020c8 <SIM_HTTP_Make_Post+0x320>)
 8001fe8:	f006 fada 	bl	80085a0 <strstr>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 80e4 	beq.w	80021bc <SIM_HTTP_Make_Post+0x414>
				isIncrementCommand = 1;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8001ff8:	e0e0      	b.n	80021bc <SIM_HTTP_Make_Post+0x414>

		case 4:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8001ffa:	4938      	ldr	r1, [pc, #224]	; (80020dc <SIM_HTTP_Make_Post+0x334>)
 8001ffc:	4832      	ldr	r0, [pc, #200]	; (80020c8 <SIM_HTTP_Make_Post+0x320>)
 8001ffe:	f006 facf 	bl	80085a0 <strstr>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80db 	beq.w	80021c0 <SIM_HTTP_Make_Post+0x418>
				isIncrementCommand = 1;
 800200a:	2301      	movs	r3, #1
 800200c:	75fb      	strb	r3, [r7, #23]
			}
			break;
 800200e:	e0d7      	b.n	80021c0 <SIM_HTTP_Make_Post+0x418>

		case 5:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8002010:	4932      	ldr	r1, [pc, #200]	; (80020dc <SIM_HTTP_Make_Post+0x334>)
 8002012:	482d      	ldr	r0, [pc, #180]	; (80020c8 <SIM_HTTP_Make_Post+0x320>)
 8002014:	f006 fac4 	bl	80085a0 <strstr>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 80d2 	beq.w	80021c4 <SIM_HTTP_Make_Post+0x41c>
				isIncrementCommand = 1;
 8002020:	2301      	movs	r3, #1
 8002022:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8002024:	e0ce      	b.n	80021c4 <SIM_HTTP_Make_Post+0x41c>

		case 6:
			// OK received if body content parameter has been cleared
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8002026:	492d      	ldr	r1, [pc, #180]	; (80020dc <SIM_HTTP_Make_Post+0x334>)
 8002028:	4827      	ldr	r0, [pc, #156]	; (80020c8 <SIM_HTTP_Make_Post+0x320>)
 800202a:	f006 fab9 	bl	80085a0 <strstr>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80c9 	beq.w	80021c8 <SIM_HTTP_Make_Post+0x420>
				isIncrementCommand = 1;
 8002036:	2301      	movs	r3, #1
 8002038:	75fb      	strb	r3, [r7, #23]
			}
			break;
 800203a:	e0c5      	b.n	80021c8 <SIM_HTTP_Make_Post+0x420>

		case 7:
			// OK received if body content parameter is added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 800203c:	4927      	ldr	r1, [pc, #156]	; (80020dc <SIM_HTTP_Make_Post+0x334>)
 800203e:	4822      	ldr	r0, [pc, #136]	; (80020c8 <SIM_HTTP_Make_Post+0x320>)
 8002040:	f006 faae 	bl	80085a0 <strstr>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 80c0 	beq.w	80021cc <SIM_HTTP_Make_Post+0x424>
				if (!testFormsSentFlag) {
 800204c:	4b17      	ldr	r3, [pc, #92]	; (80020ac <SIM_HTTP_Make_Post+0x304>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d109      	bne.n	8002068 <SIM_HTTP_Make_Post+0x2c0>
					clearBuffer = 1;
 8002054:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <SIM_HTTP_Make_Post+0x32c>)
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]
					shouldTransmit = 1;
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <SIM_HTTP_Make_Post+0x2c8>)
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
					commandIndex = 7;
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <SIM_HTTP_Make_Post+0x2cc>)
 8002062:	2207      	movs	r2, #7
 8002064:	801a      	strh	r2, [r3, #0]
				} else {
					isIncrementCommand = 1;
				}
			}
			break;
 8002066:	e0b1      	b.n	80021cc <SIM_HTTP_Make_Post+0x424>
					isIncrementCommand = 1;
 8002068:	2301      	movs	r3, #1
 800206a:	75fb      	strb	r3, [r7, #23]
			break;
 800206c:	e0ae      	b.n	80021cc <SIM_HTTP_Make_Post+0x424>
 800206e:	bf00      	nop
 8002070:	20000002 	.word	0x20000002
 8002074:	20000340 	.word	0x20000340
 8002078:	08009d10 	.word	0x08009d10
 800207c:	200002dc 	.word	0x200002dc
 8002080:	08009df4 	.word	0x08009df4
 8002084:	08009e04 	.word	0x08009e04
 8002088:	08009e44 	.word	0x08009e44
 800208c:	08009e6c 	.word	0x08009e6c
 8002090:	08009e94 	.word	0x08009e94
 8002094:	08009eb0 	.word	0x08009eb0
 8002098:	20000444 	.word	0x20000444
 800209c:	08009ec0 	.word	0x08009ec0
 80020a0:	20000544 	.word	0x20000544
 80020a4:	20000004 	.word	0x20000004
 80020a8:	08009ecc 	.word	0x08009ecc
 80020ac:	20000545 	.word	0x20000545
 80020b0:	08009ed0 	.word	0x08009ed0
 80020b4:	200004dc 	.word	0x200004dc
 80020b8:	08009f18 	.word	0x08009f18
 80020bc:	08009d20 	.word	0x08009d20
 80020c0:	20000244 	.word	0x20000244
 80020c4:	08009da4 	.word	0x08009da4
 80020c8:	20000344 	.word	0x20000344
 80020cc:	20000001 	.word	0x20000001
 80020d0:	20000342 	.word	0x20000342
 80020d4:	20000440 	.word	0x20000440
 80020d8:	08009db8 	.word	0x08009db8
 80020dc:	08009be0 	.word	0x08009be0

		case 8:
			if (strstr((char*) serialRX_Buffer, "+SHREQ: \"POST\"")) {
 80020e0:	4952      	ldr	r1, [pc, #328]	; (800222c <SIM_HTTP_Make_Post+0x484>)
 80020e2:	4853      	ldr	r0, [pc, #332]	; (8002230 <SIM_HTTP_Make_Post+0x488>)
 80020e4:	f006 fa5c 	bl	80085a0 <strstr>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d070      	beq.n	80021d0 <SIM_HTTP_Make_Post+0x428>
				copySubstringFromMatch(responseSubstring, (char*)serialRX_Buffer, "+SHREQ: \"POST\"");
 80020ee:	4a4f      	ldr	r2, [pc, #316]	; (800222c <SIM_HTTP_Make_Post+0x484>)
 80020f0:	494f      	ldr	r1, [pc, #316]	; (8002230 <SIM_HTTP_Make_Post+0x488>)
 80020f2:	4850      	ldr	r0, [pc, #320]	; (8002234 <SIM_HTTP_Make_Post+0x48c>)
 80020f4:	f000 fa8e 	bl	8002614 <copySubstringFromMatch>
				// +SHREQ: \"POST\",200,2\r\n
				uint8_t splittedValIndex = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	75bb      	strb	r3, [r7, #22]
				uint16_t splittedVal[4] = {0};
 80020fc:	463b      	mov	r3, r7
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
				char* token;
				if (strstr(responseSubstring, "\r\n")) { // response has finished transmitting
 8002104:	494c      	ldr	r1, [pc, #304]	; (8002238 <SIM_HTTP_Make_Post+0x490>)
 8002106:	484b      	ldr	r0, [pc, #300]	; (8002234 <SIM_HTTP_Make_Post+0x48c>)
 8002108:	f006 fa4a 	bl	80085a0 <strstr>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d05e      	beq.n	80021d0 <SIM_HTTP_Make_Post+0x428>
					token = strtok(responseSubstring, ",");
 8002112:	494a      	ldr	r1, [pc, #296]	; (800223c <SIM_HTTP_Make_Post+0x494>)
 8002114:	4847      	ldr	r0, [pc, #284]	; (8002234 <SIM_HTTP_Make_Post+0x48c>)
 8002116:	f006 fa59 	bl	80085cc <strtok>
 800211a:	6138      	str	r0, [r7, #16]
					while (token != NULL  && splittedValIndex<4) {
 800211c:	e012      	b.n	8002144 <SIM_HTTP_Make_Post+0x39c>
						splittedVal[++splittedValIndex] = atoi(token);
 800211e:	6938      	ldr	r0, [r7, #16]
 8002120:	f006 f9ab 	bl	800847a <atoi>
 8002124:	4602      	mov	r2, r0
 8002126:	7dbb      	ldrb	r3, [r7, #22]
 8002128:	3301      	adds	r3, #1
 800212a:	75bb      	strb	r3, [r7, #22]
 800212c:	7dbb      	ldrb	r3, [r7, #22]
 800212e:	b292      	uxth	r2, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	3318      	adds	r3, #24
 8002134:	443b      	add	r3, r7
 8002136:	f823 2c18 	strh.w	r2, [r3, #-24]
						token = strtok(NULL, ",");
 800213a:	4940      	ldr	r1, [pc, #256]	; (800223c <SIM_HTTP_Make_Post+0x494>)
 800213c:	2000      	movs	r0, #0
 800213e:	f006 fa45 	bl	80085cc <strtok>
 8002142:	6138      	str	r0, [r7, #16]
					while (token != NULL  && splittedValIndex<4) {
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <SIM_HTTP_Make_Post+0x3a8>
 800214a:	7dbb      	ldrb	r3, [r7, #22]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d9e6      	bls.n	800211e <SIM_HTTP_Make_Post+0x376>
					}
					statusCodeVal = splittedVal[2];
 8002150:	88ba      	ldrh	r2, [r7, #4]
 8002152:	4b3b      	ldr	r3, [pc, #236]	; (8002240 <SIM_HTTP_Make_Post+0x498>)
 8002154:	801a      	strh	r2, [r3, #0]
					dataLengthVal = splittedVal[3];
 8002156:	88fa      	ldrh	r2, [r7, #6]
 8002158:	4b3a      	ldr	r3, [pc, #232]	; (8002244 <SIM_HTTP_Make_Post+0x49c>)
 800215a:	801a      	strh	r2, [r3, #0]
					isIncrementCommand = 1;
 800215c:	2301      	movs	r3, #1
 800215e:	75fb      	strb	r3, [r7, #23]
					isLD3_Flicker = 0; // TODO: remove later
 8002160:	4b39      	ldr	r3, [pc, #228]	; (8002248 <SIM_HTTP_Make_Post+0x4a0>)
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
				}

			}
			break;
 8002166:	e033      	b.n	80021d0 <SIM_HTTP_Make_Post+0x428>

		case 9:
			// All data has been received
			if (strstr((char*) serialRX_Buffer, "}\n\r\n")) {
 8002168:	4938      	ldr	r1, [pc, #224]	; (800224c <SIM_HTTP_Make_Post+0x4a4>)
 800216a:	4831      	ldr	r0, [pc, #196]	; (8002230 <SIM_HTTP_Make_Post+0x488>)
 800216c:	f006 fa18 	bl	80085a0 <strstr>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d02e      	beq.n	80021d4 <SIM_HTTP_Make_Post+0x42c>
				// Set flag
				copySubstringFromMatch(SHREAD_Data, (char*)serialRX_Buffer, "+SHREAD:");
 8002176:	4a36      	ldr	r2, [pc, #216]	; (8002250 <SIM_HTTP_Make_Post+0x4a8>)
 8002178:	492d      	ldr	r1, [pc, #180]	; (8002230 <SIM_HTTP_Make_Post+0x488>)
 800217a:	4836      	ldr	r0, [pc, #216]	; (8002254 <SIM_HTTP_Make_Post+0x4ac>)
 800217c:	f000 fa4a 	bl	8002614 <copySubstringFromMatch>
				isIncrementCommand = 1;
 8002180:	2301      	movs	r3, #1
 8002182:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8002184:	e026      	b.n	80021d4 <SIM_HTTP_Make_Post+0x42c>

		case 10:
			// OK received. Successful disconnect.
			if (strstr((char*) serialRX_Buffer, "+SHDISC\r\r\nOK\r\n")) {
 8002186:	4934      	ldr	r1, [pc, #208]	; (8002258 <SIM_HTTP_Make_Post+0x4b0>)
 8002188:	4829      	ldr	r0, [pc, #164]	; (8002230 <SIM_HTTP_Make_Post+0x488>)
 800218a:	f006 fa09 	bl	80085a0 <strstr>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d021      	beq.n	80021d8 <SIM_HTTP_Make_Post+0x430>
				isIncrementCommand = 1;
 8002194:	2301      	movs	r3, #1
 8002196:	75fb      	strb	r3, [r7, #23]
				simState = SIM_STANDBY;
 8002198:	4b30      	ldr	r3, [pc, #192]	; (800225c <SIM_HTTP_Make_Post+0x4b4>)
 800219a:	2207      	movs	r2, #7
 800219c:	701a      	strb	r2, [r3, #0]
				isStateChanged = 1;
 800219e:	4b30      	ldr	r3, [pc, #192]	; (8002260 <SIM_HTTP_Make_Post+0x4b8>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
				isLD3_Flicker = 1; // TODO: remove later
 80021a4:	4b28      	ldr	r3, [pc, #160]	; (8002248 <SIM_HTTP_Make_Post+0x4a0>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80021aa:	e015      	b.n	80021d8 <SIM_HTTP_Make_Post+0x430>

		default:
			break;
 80021ac:	bf00      	nop
 80021ae:	e014      	b.n	80021da <SIM_HTTP_Make_Post+0x432>
			break;
 80021b0:	bf00      	nop
 80021b2:	e012      	b.n	80021da <SIM_HTTP_Make_Post+0x432>
			break;
 80021b4:	bf00      	nop
 80021b6:	e010      	b.n	80021da <SIM_HTTP_Make_Post+0x432>
			break;
 80021b8:	bf00      	nop
 80021ba:	e00e      	b.n	80021da <SIM_HTTP_Make_Post+0x432>
			break;
 80021bc:	bf00      	nop
 80021be:	e00c      	b.n	80021da <SIM_HTTP_Make_Post+0x432>
			break;
 80021c0:	bf00      	nop
 80021c2:	e00a      	b.n	80021da <SIM_HTTP_Make_Post+0x432>
			break;
 80021c4:	bf00      	nop
 80021c6:	e008      	b.n	80021da <SIM_HTTP_Make_Post+0x432>
			break;
 80021c8:	bf00      	nop
 80021ca:	e006      	b.n	80021da <SIM_HTTP_Make_Post+0x432>
			break;
 80021cc:	bf00      	nop
 80021ce:	e004      	b.n	80021da <SIM_HTTP_Make_Post+0x432>
			break;
 80021d0:	bf00      	nop
 80021d2:	e002      	b.n	80021da <SIM_HTTP_Make_Post+0x432>
			break;
 80021d4:	bf00      	nop
 80021d6:	e000      	b.n	80021da <SIM_HTTP_Make_Post+0x432>
			break;
 80021d8:	bf00      	nop
	}

	if (isIncrementCommand) {
 80021da:	7dfb      	ldrb	r3, [r7, #23]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00e      	beq.n	80021fe <SIM_HTTP_Make_Post+0x456>
		++commandIndex; // Next command
 80021e0:	4b20      	ldr	r3, [pc, #128]	; (8002264 <SIM_HTTP_Make_Post+0x4bc>)
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	3301      	adds	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <SIM_HTTP_Make_Post+0x4bc>)
 80021ec:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 80021ee:	4b1e      	ldr	r3, [pc, #120]	; (8002268 <SIM_HTTP_Make_Post+0x4c0>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 80021f4:	4b1d      	ldr	r3, [pc, #116]	; (800226c <SIM_HTTP_Make_Post+0x4c4>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	75fb      	strb	r3, [r7, #23]
	}

	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	b29a      	uxth	r2, r3
 8002202:	4b18      	ldr	r3, [pc, #96]	; (8002264 <SIM_HTTP_Make_Post+0x4bc>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	429a      	cmp	r2, r3
 800220a:	d304      	bcc.n	8002216 <SIM_HTTP_Make_Post+0x46e>
 800220c:	4b14      	ldr	r3, [pc, #80]	; (8002260 <SIM_HTTP_Make_Post+0x4b8>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d006      	beq.n	8002224 <SIM_HTTP_Make_Post+0x47c>
		commandIndex = 0;
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <SIM_HTTP_Make_Post+0x4bc>)
 8002218:	2200      	movs	r2, #0
 800221a:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 800221c:	4b10      	ldr	r3, [pc, #64]	; (8002260 <SIM_HTTP_Make_Post+0x4b8>)
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
	}


	return;
 8002222:	bf00      	nop
 8002224:	bf00      	nop
}
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	08009f2c 	.word	0x08009f2c
 8002230:	20000344 	.word	0x20000344
 8002234:	200004a8 	.word	0x200004a8
 8002238:	08009ecc 	.word	0x08009ecc
 800223c:	08009f3c 	.word	0x08009f3c
 8002240:	200004da 	.word	0x200004da
 8002244:	200004dc 	.word	0x200004dc
 8002248:	20000000 	.word	0x20000000
 800224c:	08009f40 	.word	0x08009f40
 8002250:	08009f48 	.word	0x08009f48
 8002254:	200004e0 	.word	0x200004e0
 8002258:	08009f54 	.word	0x08009f54
 800225c:	20000001 	.word	0x20000001
 8002260:	20000342 	.word	0x20000342
 8002264:	20000340 	.word	0x20000340
 8002268:	20000440 	.word	0x20000440
 800226c:	20000002 	.word	0x20000002

08002270 <SIM_HTTP_Make_Get>:



void SIM_HTTP_Make_Get(void) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
	// 5: AT+SHAHEAD="Accept","*/*"
	// 6: AT+SHREQ="/api/time?API_KEY=9349da48-62ef-496b-831a-4720015ff72a",1
	// 7: AT+SHREAD=0,2 // read http result (second variable dependant on result from SHREQ)
	// 8: AT+SHDISC - Disconnect HTTP connect

	uint8_t maxCommand = 8;
 8002276:	2308      	movs	r3, #8
 8002278:	73fb      	strb	r3, [r7, #15]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 800227a:	4bae      	ldr	r3, [pc, #696]	; (8002534 <SIM_HTTP_Make_Get+0x2c4>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d067      	beq.n	8002352 <SIM_HTTP_Make_Get+0xe2>
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	b29a      	uxth	r2, r3
 8002286:	4bac      	ldr	r3, [pc, #688]	; (8002538 <SIM_HTTP_Make_Get+0x2c8>)
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	b29b      	uxth	r3, r3
 800228c:	429a      	cmp	r2, r3
 800228e:	d360      	bcc.n	8002352 <SIM_HTTP_Make_Get+0xe2>
		// Next command should be transmitted

		switch (commandIndex) {
 8002290:	4ba9      	ldr	r3, [pc, #676]	; (8002538 <SIM_HTTP_Make_Get+0x2c8>)
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	b29b      	uxth	r3, r3
 8002296:	2b08      	cmp	r3, #8
 8002298:	d84d      	bhi.n	8002336 <SIM_HTTP_Make_Get+0xc6>
 800229a:	a201      	add	r2, pc, #4	; (adr r2, 80022a0 <SIM_HTTP_Make_Get+0x30>)
 800229c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a0:	080022c5 	.word	0x080022c5
 80022a4:	080022cf 	.word	0x080022cf
 80022a8:	080022d9 	.word	0x080022d9
 80022ac:	080022e3 	.word	0x080022e3
 80022b0:	080022ed 	.word	0x080022ed
 80022b4:	080022f7 	.word	0x080022f7
 80022b8:	08002301 	.word	0x08002301
 80022bc:	0800230b 	.word	0x0800230b
 80022c0:	0800232d 	.word	0x0800232d
			case 0:
				// Get HTTP header
				sprintf(ATcommand, "AT+SHSTATE?\r\n");
 80022c4:	499d      	ldr	r1, [pc, #628]	; (800253c <SIM_HTTP_Make_Get+0x2cc>)
 80022c6:	489e      	ldr	r0, [pc, #632]	; (8002540 <SIM_HTTP_Make_Get+0x2d0>)
 80022c8:	f006 f928 	bl	800851c <siprintf>
				break;
 80022cc:	e034      	b.n	8002338 <SIM_HTTP_Make_Get+0xc8>
			case 1:
				// Clear HTTP header
				sprintf(ATcommand, "AT+SHCHEAD\r\n");
 80022ce:	499d      	ldr	r1, [pc, #628]	; (8002544 <SIM_HTTP_Make_Get+0x2d4>)
 80022d0:	489b      	ldr	r0, [pc, #620]	; (8002540 <SIM_HTTP_Make_Get+0x2d0>)
 80022d2:	f006 f923 	bl	800851c <siprintf>
				break;
 80022d6:	e02f      	b.n	8002338 <SIM_HTTP_Make_Get+0xc8>
			case 2:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"User-Agent\",\"curl/7.47.0\"\r\n");
 80022d8:	499b      	ldr	r1, [pc, #620]	; (8002548 <SIM_HTTP_Make_Get+0x2d8>)
 80022da:	4899      	ldr	r0, [pc, #612]	; (8002540 <SIM_HTTP_Make_Get+0x2d0>)
 80022dc:	f006 f91e 	bl	800851c <siprintf>
				break;
 80022e0:	e02a      	b.n	8002338 <SIM_HTTP_Make_Get+0xc8>
			case 3:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Cache-control\",\"no-cache\"\r\n");
 80022e2:	499a      	ldr	r1, [pc, #616]	; (800254c <SIM_HTTP_Make_Get+0x2dc>)
 80022e4:	4896      	ldr	r0, [pc, #600]	; (8002540 <SIM_HTTP_Make_Get+0x2d0>)
 80022e6:	f006 f919 	bl	800851c <siprintf>
				break;
 80022ea:	e025      	b.n	8002338 <SIM_HTTP_Make_Get+0xc8>
			case 4:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Connection\",\"keep-alive\"\r\n");
 80022ec:	4998      	ldr	r1, [pc, #608]	; (8002550 <SIM_HTTP_Make_Get+0x2e0>)
 80022ee:	4894      	ldr	r0, [pc, #592]	; (8002540 <SIM_HTTP_Make_Get+0x2d0>)
 80022f0:	f006 f914 	bl	800851c <siprintf>
				break;
 80022f4:	e020      	b.n	8002338 <SIM_HTTP_Make_Get+0xc8>
			case 5:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Accept\",\"*/*\"\r\n");
 80022f6:	4997      	ldr	r1, [pc, #604]	; (8002554 <SIM_HTTP_Make_Get+0x2e4>)
 80022f8:	4891      	ldr	r0, [pc, #580]	; (8002540 <SIM_HTTP_Make_Get+0x2d0>)
 80022fa:	f006 f90f 	bl	800851c <siprintf>
				break;
 80022fe:	e01b      	b.n	8002338 <SIM_HTTP_Make_Get+0xc8>
			case 6:
				// Set request (1: GET)
				sprintf(ATcommand, "AT+SHREQ=\"/api/time?API_KEY=9349da48-62ef-496b-831a-4720015ff72a\",1\r\n");
 8002300:	4995      	ldr	r1, [pc, #596]	; (8002558 <SIM_HTTP_Make_Get+0x2e8>)
 8002302:	488f      	ldr	r0, [pc, #572]	; (8002540 <SIM_HTTP_Make_Get+0x2d0>)
 8002304:	f006 f90a 	bl	800851c <siprintf>
				break;
 8002308:	e016      	b.n	8002338 <SIM_HTTP_Make_Get+0xc8>
			case 7: ;
				// Read data after request
				char d[4];
				itoa(dataLengthVal, d, 10);
 800230a:	4b94      	ldr	r3, [pc, #592]	; (800255c <SIM_HTTP_Make_Get+0x2ec>)
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f107 0308 	add.w	r3, r7, #8
 8002314:	220a      	movs	r2, #10
 8002316:	4619      	mov	r1, r3
 8002318:	f006 f8f6 	bl	8008508 <itoa>
				sprintf(ATcommand, "AT+SHREAD=0,%s\r\n", d);
 800231c:	f107 0308 	add.w	r3, r7, #8
 8002320:	461a      	mov	r2, r3
 8002322:	498f      	ldr	r1, [pc, #572]	; (8002560 <SIM_HTTP_Make_Get+0x2f0>)
 8002324:	4886      	ldr	r0, [pc, #536]	; (8002540 <SIM_HTTP_Make_Get+0x2d0>)
 8002326:	f006 f8f9 	bl	800851c <siprintf>
				break;
 800232a:	e005      	b.n	8002338 <SIM_HTTP_Make_Get+0xc8>
			case 8:
				// Disconnect HTTP
				sprintf(ATcommand, "AT+SHDISC\r\n");
 800232c:	498d      	ldr	r1, [pc, #564]	; (8002564 <SIM_HTTP_Make_Get+0x2f4>)
 800232e:	4884      	ldr	r0, [pc, #528]	; (8002540 <SIM_HTTP_Make_Get+0x2d0>)
 8002330:	f006 f8f4 	bl	800851c <siprintf>
				break;
 8002334:	e000      	b.n	8002338 <SIM_HTTP_Make_Get+0xc8>
			default:
				break;
 8002336:	bf00      	nop
		}


		HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand)); // Transmit AT command
 8002338:	4881      	ldr	r0, [pc, #516]	; (8002540 <SIM_HTTP_Make_Get+0x2d0>)
 800233a:	f7fd ff49 	bl	80001d0 <strlen>
 800233e:	4603      	mov	r3, r0
 8002340:	b29b      	uxth	r3, r3
 8002342:	461a      	mov	r2, r3
 8002344:	497e      	ldr	r1, [pc, #504]	; (8002540 <SIM_HTTP_Make_Get+0x2d0>)
 8002346:	4888      	ldr	r0, [pc, #544]	; (8002568 <SIM_HTTP_Make_Get+0x2f8>)
 8002348:	f003 ffca 	bl	80062e0 <HAL_UART_Transmit_IT>
		shouldTransmit = 0; // no transmission until response has been read
 800234c:	4b79      	ldr	r3, [pc, #484]	; (8002534 <SIM_HTTP_Make_Get+0x2c4>)
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]

	} // if shouldTransmit
	// --------------------------------------------------------------- //

	// ---------------------------- RX ------------------------------- //
	uint8_t isIncrementCommand = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	75fb      	strb	r3, [r7, #23]

	switch (commandIndex) {
 8002356:	4b78      	ldr	r3, [pc, #480]	; (8002538 <SIM_HTTP_Make_Get+0x2c8>)
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	2b08      	cmp	r3, #8
 800235e:	f200 80d6 	bhi.w	800250e <SIM_HTTP_Make_Get+0x29e>
 8002362:	a201      	add	r2, pc, #4	; (adr r2, 8002368 <SIM_HTTP_Make_Get+0xf8>)
 8002364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002368:	0800238d 	.word	0x0800238d
 800236c:	080023d9 	.word	0x080023d9
 8002370:	080023ef 	.word	0x080023ef
 8002374:	08002405 	.word	0x08002405
 8002378:	0800241b 	.word	0x0800241b
 800237c:	0800242f 	.word	0x0800242f
 8002380:	08002443 	.word	0x08002443
 8002384:	080024cb 	.word	0x080024cb
 8002388:	080024e9 	.word	0x080024e9
		case 0:
			// +SHSTATE: 0\r\n\r\nOK\r\n - HTTP disconnect state
			if (strstr((char*) serialRX_Buffer, "+SHSTATE: 0\r\n\r\nOK\r\n")) {
 800238c:	4977      	ldr	r1, [pc, #476]	; (800256c <SIM_HTTP_Make_Get+0x2fc>)
 800238e:	4878      	ldr	r0, [pc, #480]	; (8002570 <SIM_HTTP_Make_Get+0x300>)
 8002390:	f006 f906 	bl	80085a0 <strstr>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00c      	beq.n	80023b4 <SIM_HTTP_Make_Get+0x144>
				// If disconnected, build HTTP post
				simState = SIM_HTTP_BUILD;
 800239a:	4b76      	ldr	r3, [pc, #472]	; (8002574 <SIM_HTTP_Make_Get+0x304>)
 800239c:	2203      	movs	r2, #3
 800239e:	701a      	strb	r2, [r3, #0]
				isStateChanged = 1;
 80023a0:	4b75      	ldr	r3, [pc, #468]	; (8002578 <SIM_HTTP_Make_Get+0x308>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	701a      	strb	r2, [r3, #0]
				clearBuffer = 1; // Clear buffer to receive next response
 80023a6:	4b75      	ldr	r3, [pc, #468]	; (800257c <SIM_HTTP_Make_Get+0x30c>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1; // Can transmit next command
 80023ac:	4b61      	ldr	r3, [pc, #388]	; (8002534 <SIM_HTTP_Make_Get+0x2c4>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
			else if (strstr((char*) serialRX_Buffer, "+SHSTATE: 1\r\n\r\nOK\r\n")) {
				commandIndex = 1; // AT+SHDISC next command
				clearBuffer = 1; // Clear buffer to receive next response
				shouldTransmit = 1; // Can transmit next command
			}
			break;
 80023b2:	e0ae      	b.n	8002512 <SIM_HTTP_Make_Get+0x2a2>
			else if (strstr((char*) serialRX_Buffer, "+SHSTATE: 1\r\n\r\nOK\r\n")) {
 80023b4:	4972      	ldr	r1, [pc, #456]	; (8002580 <SIM_HTTP_Make_Get+0x310>)
 80023b6:	486e      	ldr	r0, [pc, #440]	; (8002570 <SIM_HTTP_Make_Get+0x300>)
 80023b8:	f006 f8f2 	bl	80085a0 <strstr>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 80a7 	beq.w	8002512 <SIM_HTTP_Make_Get+0x2a2>
				commandIndex = 1; // AT+SHDISC next command
 80023c4:	4b5c      	ldr	r3, [pc, #368]	; (8002538 <SIM_HTTP_Make_Get+0x2c8>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	801a      	strh	r2, [r3, #0]
				clearBuffer = 1; // Clear buffer to receive next response
 80023ca:	4b6c      	ldr	r3, [pc, #432]	; (800257c <SIM_HTTP_Make_Get+0x30c>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1; // Can transmit next command
 80023d0:	4b58      	ldr	r3, [pc, #352]	; (8002534 <SIM_HTTP_Make_Get+0x2c4>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
			break;
 80023d6:	e09c      	b.n	8002512 <SIM_HTTP_Make_Get+0x2a2>
		case 1:
			// OK received. Header cleared.
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 80023d8:	496a      	ldr	r1, [pc, #424]	; (8002584 <SIM_HTTP_Make_Get+0x314>)
 80023da:	4865      	ldr	r0, [pc, #404]	; (8002570 <SIM_HTTP_Make_Get+0x300>)
 80023dc:	f006 f8e0 	bl	80085a0 <strstr>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 8097 	beq.w	8002516 <SIM_HTTP_Make_Get+0x2a6>
				isIncrementCommand = 1;
 80023e8:	2301      	movs	r3, #1
 80023ea:	75fb      	strb	r3, [r7, #23]
			}
			break;
 80023ec:	e093      	b.n	8002516 <SIM_HTTP_Make_Get+0x2a6>
		case 2:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 80023ee:	4965      	ldr	r1, [pc, #404]	; (8002584 <SIM_HTTP_Make_Get+0x314>)
 80023f0:	485f      	ldr	r0, [pc, #380]	; (8002570 <SIM_HTTP_Make_Get+0x300>)
 80023f2:	f006 f8d5 	bl	80085a0 <strstr>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 808e 	beq.w	800251a <SIM_HTTP_Make_Get+0x2aa>
				isIncrementCommand = 1;
 80023fe:	2301      	movs	r3, #1
 8002400:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8002402:	e08a      	b.n	800251a <SIM_HTTP_Make_Get+0x2aa>
		case 3:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8002404:	495f      	ldr	r1, [pc, #380]	; (8002584 <SIM_HTTP_Make_Get+0x314>)
 8002406:	485a      	ldr	r0, [pc, #360]	; (8002570 <SIM_HTTP_Make_Get+0x300>)
 8002408:	f006 f8ca 	bl	80085a0 <strstr>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8085 	beq.w	800251e <SIM_HTTP_Make_Get+0x2ae>
				isIncrementCommand = 1;
 8002414:	2301      	movs	r3, #1
 8002416:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8002418:	e081      	b.n	800251e <SIM_HTTP_Make_Get+0x2ae>
		case 4:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 800241a:	495a      	ldr	r1, [pc, #360]	; (8002584 <SIM_HTTP_Make_Get+0x314>)
 800241c:	4854      	ldr	r0, [pc, #336]	; (8002570 <SIM_HTTP_Make_Get+0x300>)
 800241e:	f006 f8bf 	bl	80085a0 <strstr>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d07c      	beq.n	8002522 <SIM_HTTP_Make_Get+0x2b2>
				isIncrementCommand = 1;
 8002428:	2301      	movs	r3, #1
 800242a:	75fb      	strb	r3, [r7, #23]
			}
			break;
 800242c:	e079      	b.n	8002522 <SIM_HTTP_Make_Get+0x2b2>
		case 5:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 800242e:	4955      	ldr	r1, [pc, #340]	; (8002584 <SIM_HTTP_Make_Get+0x314>)
 8002430:	484f      	ldr	r0, [pc, #316]	; (8002570 <SIM_HTTP_Make_Get+0x300>)
 8002432:	f006 f8b5 	bl	80085a0 <strstr>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d074      	beq.n	8002526 <SIM_HTTP_Make_Get+0x2b6>
				isIncrementCommand = 1;
 800243c:	2301      	movs	r3, #1
 800243e:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8002440:	e071      	b.n	8002526 <SIM_HTTP_Make_Get+0x2b6>
		case 6:
			if (strstr((char*) serialRX_Buffer, "+SHREQ: \"GET\"")) {
 8002442:	4951      	ldr	r1, [pc, #324]	; (8002588 <SIM_HTTP_Make_Get+0x318>)
 8002444:	484a      	ldr	r0, [pc, #296]	; (8002570 <SIM_HTTP_Make_Get+0x300>)
 8002446:	f006 f8ab 	bl	80085a0 <strstr>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d06c      	beq.n	800252a <SIM_HTTP_Make_Get+0x2ba>
				copySubstringFromMatch(responseSubstring, (char*)serialRX_Buffer, "+SHREQ: \"GET\"");
 8002450:	4a4d      	ldr	r2, [pc, #308]	; (8002588 <SIM_HTTP_Make_Get+0x318>)
 8002452:	4947      	ldr	r1, [pc, #284]	; (8002570 <SIM_HTTP_Make_Get+0x300>)
 8002454:	484d      	ldr	r0, [pc, #308]	; (800258c <SIM_HTTP_Make_Get+0x31c>)
 8002456:	f000 f8dd 	bl	8002614 <copySubstringFromMatch>
				// +SHREQ: \"GET\",200,36\r\n
				uint8_t splittedValIndex = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	75bb      	strb	r3, [r7, #22]
				uint16_t splittedVal[4] = {0};
 800245e:	463b      	mov	r3, r7
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
				char* token;
				if (strstr(responseSubstring, "\r\n")) { // response has finished transmitting
 8002466:	494a      	ldr	r1, [pc, #296]	; (8002590 <SIM_HTTP_Make_Get+0x320>)
 8002468:	4848      	ldr	r0, [pc, #288]	; (800258c <SIM_HTTP_Make_Get+0x31c>)
 800246a:	f006 f899 	bl	80085a0 <strstr>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d05a      	beq.n	800252a <SIM_HTTP_Make_Get+0x2ba>
					token = strtok(responseSubstring, ",");
 8002474:	4947      	ldr	r1, [pc, #284]	; (8002594 <SIM_HTTP_Make_Get+0x324>)
 8002476:	4845      	ldr	r0, [pc, #276]	; (800258c <SIM_HTTP_Make_Get+0x31c>)
 8002478:	f006 f8a8 	bl	80085cc <strtok>
 800247c:	6138      	str	r0, [r7, #16]
					while (token != NULL  && splittedValIndex<4) {
 800247e:	e012      	b.n	80024a6 <SIM_HTTP_Make_Get+0x236>
						splittedVal[++splittedValIndex] = atoi(token);
 8002480:	6938      	ldr	r0, [r7, #16]
 8002482:	f005 fffa 	bl	800847a <atoi>
 8002486:	4602      	mov	r2, r0
 8002488:	7dbb      	ldrb	r3, [r7, #22]
 800248a:	3301      	adds	r3, #1
 800248c:	75bb      	strb	r3, [r7, #22]
 800248e:	7dbb      	ldrb	r3, [r7, #22]
 8002490:	b292      	uxth	r2, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	3318      	adds	r3, #24
 8002496:	443b      	add	r3, r7
 8002498:	f823 2c18 	strh.w	r2, [r3, #-24]
						token = strtok(NULL, ",");
 800249c:	493d      	ldr	r1, [pc, #244]	; (8002594 <SIM_HTTP_Make_Get+0x324>)
 800249e:	2000      	movs	r0, #0
 80024a0:	f006 f894 	bl	80085cc <strtok>
 80024a4:	6138      	str	r0, [r7, #16]
					while (token != NULL  && splittedValIndex<4) {
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <SIM_HTTP_Make_Get+0x242>
 80024ac:	7dbb      	ldrb	r3, [r7, #22]
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d9e6      	bls.n	8002480 <SIM_HTTP_Make_Get+0x210>
					}
					statusCodeVal = splittedVal[2]; // TODO: Wrong status code received? (Do the same for POST)
 80024b2:	88ba      	ldrh	r2, [r7, #4]
 80024b4:	4b38      	ldr	r3, [pc, #224]	; (8002598 <SIM_HTTP_Make_Get+0x328>)
 80024b6:	801a      	strh	r2, [r3, #0]
					dataLengthVal = splittedVal[3];
 80024b8:	88fa      	ldrh	r2, [r7, #6]
 80024ba:	4b28      	ldr	r3, [pc, #160]	; (800255c <SIM_HTTP_Make_Get+0x2ec>)
 80024bc:	801a      	strh	r2, [r3, #0]
					isIncrementCommand = 1;
 80024be:	2301      	movs	r3, #1
 80024c0:	75fb      	strb	r3, [r7, #23]
					isLD3_Flicker = 0; // TODO: remove later
 80024c2:	4b36      	ldr	r3, [pc, #216]	; (800259c <SIM_HTTP_Make_Get+0x32c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 80024c8:	e02f      	b.n	800252a <SIM_HTTP_Make_Get+0x2ba>
		case 7:
			if (strstr((char*) serialRX_Buffer, "}\n\r\n")) {
 80024ca:	4935      	ldr	r1, [pc, #212]	; (80025a0 <SIM_HTTP_Make_Get+0x330>)
 80024cc:	4828      	ldr	r0, [pc, #160]	; (8002570 <SIM_HTTP_Make_Get+0x300>)
 80024ce:	f006 f867 	bl	80085a0 <strstr>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d02a      	beq.n	800252e <SIM_HTTP_Make_Get+0x2be>
				copySubstringFromMatch(SHREAD_Data, (char*) serialRX_Buffer, "+SHREAD:");
 80024d8:	4a32      	ldr	r2, [pc, #200]	; (80025a4 <SIM_HTTP_Make_Get+0x334>)
 80024da:	4925      	ldr	r1, [pc, #148]	; (8002570 <SIM_HTTP_Make_Get+0x300>)
 80024dc:	4832      	ldr	r0, [pc, #200]	; (80025a8 <SIM_HTTP_Make_Get+0x338>)
 80024de:	f000 f899 	bl	8002614 <copySubstringFromMatch>
				isIncrementCommand = 1;
 80024e2:	2301      	movs	r3, #1
 80024e4:	75fb      	strb	r3, [r7, #23]
				// TODO: unpack data and update the RTC; Also set appropriate flag
			}
			break;
 80024e6:	e022      	b.n	800252e <SIM_HTTP_Make_Get+0x2be>
		case 8:
			// OK received. Successful disconnect.
			if (strstr((char*) serialRX_Buffer, "+SHDISC\r\r\nOK\r\n")) {
 80024e8:	4930      	ldr	r1, [pc, #192]	; (80025ac <SIM_HTTP_Make_Get+0x33c>)
 80024ea:	4821      	ldr	r0, [pc, #132]	; (8002570 <SIM_HTTP_Make_Get+0x300>)
 80024ec:	f006 f858 	bl	80085a0 <strstr>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d05c      	beq.n	80025b0 <SIM_HTTP_Make_Get+0x340>
				isIncrementCommand = 1;
 80024f6:	2301      	movs	r3, #1
 80024f8:	75fb      	strb	r3, [r7, #23]
				simState = SIM_STANDBY;
 80024fa:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <SIM_HTTP_Make_Get+0x304>)
 80024fc:	2207      	movs	r2, #7
 80024fe:	701a      	strb	r2, [r3, #0]
				isStateChanged = 1;
 8002500:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <SIM_HTTP_Make_Get+0x308>)
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
				isLD3_Flicker = 1; // TODO: remove later
 8002506:	4b25      	ldr	r3, [pc, #148]	; (800259c <SIM_HTTP_Make_Get+0x32c>)
 8002508:	2201      	movs	r2, #1
 800250a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800250c:	e050      	b.n	80025b0 <SIM_HTTP_Make_Get+0x340>
		default:
			break;
 800250e:	bf00      	nop
 8002510:	e04f      	b.n	80025b2 <SIM_HTTP_Make_Get+0x342>
			break;
 8002512:	bf00      	nop
 8002514:	e04d      	b.n	80025b2 <SIM_HTTP_Make_Get+0x342>
			break;
 8002516:	bf00      	nop
 8002518:	e04b      	b.n	80025b2 <SIM_HTTP_Make_Get+0x342>
			break;
 800251a:	bf00      	nop
 800251c:	e049      	b.n	80025b2 <SIM_HTTP_Make_Get+0x342>
			break;
 800251e:	bf00      	nop
 8002520:	e047      	b.n	80025b2 <SIM_HTTP_Make_Get+0x342>
			break;
 8002522:	bf00      	nop
 8002524:	e045      	b.n	80025b2 <SIM_HTTP_Make_Get+0x342>
			break;
 8002526:	bf00      	nop
 8002528:	e043      	b.n	80025b2 <SIM_HTTP_Make_Get+0x342>
			break;
 800252a:	bf00      	nop
 800252c:	e041      	b.n	80025b2 <SIM_HTTP_Make_Get+0x342>
			break;
 800252e:	bf00      	nop
 8002530:	e03f      	b.n	80025b2 <SIM_HTTP_Make_Get+0x342>
 8002532:	bf00      	nop
 8002534:	20000002 	.word	0x20000002
 8002538:	20000340 	.word	0x20000340
 800253c:	08009d10 	.word	0x08009d10
 8002540:	200002dc 	.word	0x200002dc
 8002544:	08009df4 	.word	0x08009df4
 8002548:	08009f64 	.word	0x08009f64
 800254c:	08009e44 	.word	0x08009e44
 8002550:	08009e6c 	.word	0x08009e6c
 8002554:	08009e94 	.word	0x08009e94
 8002558:	08009f8c 	.word	0x08009f8c
 800255c:	200004dc 	.word	0x200004dc
 8002560:	08009f18 	.word	0x08009f18
 8002564:	08009d20 	.word	0x08009d20
 8002568:	20000244 	.word	0x20000244
 800256c:	08009da4 	.word	0x08009da4
 8002570:	20000344 	.word	0x20000344
 8002574:	20000001 	.word	0x20000001
 8002578:	20000342 	.word	0x20000342
 800257c:	20000440 	.word	0x20000440
 8002580:	08009db8 	.word	0x08009db8
 8002584:	08009be0 	.word	0x08009be0
 8002588:	08009fd4 	.word	0x08009fd4
 800258c:	200004a8 	.word	0x200004a8
 8002590:	08009ecc 	.word	0x08009ecc
 8002594:	08009f3c 	.word	0x08009f3c
 8002598:	200004da 	.word	0x200004da
 800259c:	20000000 	.word	0x20000000
 80025a0:	08009f40 	.word	0x08009f40
 80025a4:	08009f48 	.word	0x08009f48
 80025a8:	200004e0 	.word	0x200004e0
 80025ac:	08009f54 	.word	0x08009f54
			break;
 80025b0:	bf00      	nop
	}

	if (isIncrementCommand) {
 80025b2:	7dfb      	ldrb	r3, [r7, #23]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00e      	beq.n	80025d6 <SIM_HTTP_Make_Get+0x366>
		++commandIndex; // Next command
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <SIM_HTTP_Make_Get+0x394>)
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3301      	adds	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <SIM_HTTP_Make_Get+0x394>)
 80025c4:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <SIM_HTTP_Make_Get+0x398>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 80025cc:	4b0f      	ldr	r3, [pc, #60]	; (800260c <SIM_HTTP_Make_Get+0x39c>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	75fb      	strb	r3, [r7, #23]
	}

	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	b29a      	uxth	r2, r3
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <SIM_HTTP_Make_Get+0x394>)
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d304      	bcc.n	80025ee <SIM_HTTP_Make_Get+0x37e>
 80025e4:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <SIM_HTTP_Make_Get+0x3a0>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d006      	beq.n	80025fc <SIM_HTTP_Make_Get+0x38c>
		commandIndex = 0;
 80025ee:	4b05      	ldr	r3, [pc, #20]	; (8002604 <SIM_HTTP_Make_Get+0x394>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <SIM_HTTP_Make_Get+0x3a0>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
	}


	return;
 80025fa:	bf00      	nop
 80025fc:	bf00      	nop
}
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20000340 	.word	0x20000340
 8002608:	20000440 	.word	0x20000440
 800260c:	20000002 	.word	0x20000002
 8002610:	20000342 	.word	0x20000342

08002614 <copySubstringFromMatch>:




// No check is implemented for destination that is smaller than the substring
void copySubstringFromMatch(char* destination, char* source, char* strToMatch) {
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
	char* firstOccurence = strstr(source, strToMatch);
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	68b8      	ldr	r0, [r7, #8]
 8002624:	f005 ffbc 	bl	80085a0 <strstr>
 8002628:	6178      	str	r0, [r7, #20]
	if (!firstOccurence) { // string to match not found
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d016      	beq.n	800265e <copySubstringFromMatch+0x4a>
		return;
	}

	uint16_t startPos = firstOccurence - source;
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	827b      	strh	r3, [r7, #18]
	uint16_t substringLength = strlen(source) - startPos;
 8002638:	68b8      	ldr	r0, [r7, #8]
 800263a:	f7fd fdc9 	bl	80001d0 <strlen>
 800263e:	4603      	mov	r3, r0
 8002640:	b29a      	uxth	r2, r3
 8002642:	8a7b      	ldrh	r3, [r7, #18]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	823b      	strh	r3, [r7, #16]

	strncpy(destination, source+startPos, startPos+substringLength);
 8002648:	8a7b      	ldrh	r3, [r7, #18]
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	18d1      	adds	r1, r2, r3
 800264e:	8a7a      	ldrh	r2, [r7, #18]
 8002650:	8a3b      	ldrh	r3, [r7, #16]
 8002652:	4413      	add	r3, r2
 8002654:	461a      	mov	r2, r3
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f005 ff8f 	bl	800857a <strncpy>

	return;
 800265c:	e000      	b.n	8002660 <copySubstringFromMatch+0x4c>
		return;
 800265e:	bf00      	nop
}
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266e:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <HAL_MspInit+0x44>)
 8002670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002672:	4a0e      	ldr	r2, [pc, #56]	; (80026ac <HAL_MspInit+0x44>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6613      	str	r3, [r2, #96]	; 0x60
 800267a:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <HAL_MspInit+0x44>)
 800267c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <HAL_MspInit+0x44>)
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	4a08      	ldr	r2, [pc, #32]	; (80026ac <HAL_MspInit+0x44>)
 800268c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002690:	6593      	str	r3, [r2, #88]	; 0x58
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_MspInit+0x44>)
 8002694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000

080026b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b098      	sub	sp, #96	; 0x60
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026b8:	f107 030c 	add.w	r3, r7, #12
 80026bc:	2254      	movs	r2, #84	; 0x54
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f005 ff23 	bl	800850c <memset>
  if(hrtc->Instance==RTC)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a17      	ldr	r2, [pc, #92]	; (8002728 <HAL_RTC_MspInit+0x78>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d127      	bne.n	8002720 <HAL_RTC_MspInit+0x70>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80026d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80026d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026da:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026dc:	f107 030c 	add.w	r3, r7, #12
 80026e0:	4618      	mov	r0, r3
 80026e2:	f001 fcaf 	bl	8004044 <HAL_RCCEx_PeriphCLKConfig>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80026ec:	f7fe ff0c 	bl	8001508 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <HAL_RTC_MspInit+0x7c>)
 80026f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f6:	4a0d      	ldr	r2, [pc, #52]	; (800272c <HAL_RTC_MspInit+0x7c>)
 80026f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002700:	2200      	movs	r2, #0
 8002702:	2100      	movs	r1, #0
 8002704:	2003      	movs	r0, #3
 8002706:	f000 fba0 	bl	8002e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800270a:	2003      	movs	r0, #3
 800270c:	f000 fbb9 	bl	8002e82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002710:	2200      	movs	r2, #0
 8002712:	2100      	movs	r1, #0
 8002714:	2029      	movs	r0, #41	; 0x29
 8002716:	f000 fb98 	bl	8002e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800271a:	2029      	movs	r0, #41	; 0x29
 800271c:	f000 fbb1 	bl	8002e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002720:	bf00      	nop
 8002722:	3760      	adds	r7, #96	; 0x60
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40002800 	.word	0x40002800
 800272c:	40021000 	.word	0x40021000

08002730 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08a      	sub	sp, #40	; 0x28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	f107 0314 	add.w	r3, r7, #20
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a17      	ldr	r2, [pc, #92]	; (80027ac <HAL_SPI_MspInit+0x7c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d128      	bne.n	80027a4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002752:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <HAL_SPI_MspInit+0x80>)
 8002754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002756:	4a16      	ldr	r2, [pc, #88]	; (80027b0 <HAL_SPI_MspInit+0x80>)
 8002758:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800275c:	6613      	str	r3, [r2, #96]	; 0x60
 800275e:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <HAL_SPI_MspInit+0x80>)
 8002760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002762:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <HAL_SPI_MspInit+0x80>)
 800276c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276e:	4a10      	ldr	r2, [pc, #64]	; (80027b0 <HAL_SPI_MspInit+0x80>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <HAL_SPI_MspInit+0x80>)
 8002778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8002782:	23c2      	movs	r3, #194	; 0xc2
 8002784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002786:	2302      	movs	r3, #2
 8002788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278e:	2303      	movs	r3, #3
 8002790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002792:	2305      	movs	r3, #5
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a0:	f000 fc08 	bl	8002fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80027a4:	bf00      	nop
 80027a6:	3728      	adds	r7, #40	; 0x28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40013000 	.word	0x40013000
 80027b0:	40021000 	.word	0x40021000

080027b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c4:	d113      	bne.n	80027ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027c6:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <HAL_TIM_Base_MspInit+0x44>)
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	4a0b      	ldr	r2, [pc, #44]	; (80027f8 <HAL_TIM_Base_MspInit+0x44>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6593      	str	r3, [r2, #88]	; 0x58
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_TIM_Base_MspInit+0x44>)
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2100      	movs	r1, #0
 80027e2:	201c      	movs	r0, #28
 80027e4:	f000 fb31 	bl	8002e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027e8:	201c      	movs	r0, #28
 80027ea:	f000 fb4a 	bl	8002e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40021000 	.word	0x40021000

080027fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b09e      	sub	sp, #120	; 0x78
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002814:	f107 0310 	add.w	r3, r7, #16
 8002818:	2254      	movs	r2, #84	; 0x54
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f005 fe75 	bl	800850c <memset>
  if(huart->Instance==USART1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a23      	ldr	r2, [pc, #140]	; (80028b4 <HAL_UART_MspInit+0xb8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d13f      	bne.n	80028ac <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800282c:	2301      	movs	r3, #1
 800282e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002830:	2300      	movs	r3, #0
 8002832:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002834:	f107 0310 	add.w	r3, r7, #16
 8002838:	4618      	mov	r0, r3
 800283a:	f001 fc03 	bl	8004044 <HAL_RCCEx_PeriphCLKConfig>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002844:	f7fe fe60 	bl	8001508 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002848:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <HAL_UART_MspInit+0xbc>)
 800284a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284c:	4a1a      	ldr	r2, [pc, #104]	; (80028b8 <HAL_UART_MspInit+0xbc>)
 800284e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002852:	6613      	str	r3, [r2, #96]	; 0x60
 8002854:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <HAL_UART_MspInit+0xbc>)
 8002856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002860:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <HAL_UART_MspInit+0xbc>)
 8002862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002864:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <HAL_UART_MspInit+0xbc>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800286c:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_UART_MspInit+0xbc>)
 800286e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_SIM_Pin|UART_RX_SIM_Pin;
 8002878:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800287c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002886:	2303      	movs	r3, #3
 8002888:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800288a:	2307      	movs	r3, #7
 800288c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002892:	4619      	mov	r1, r3
 8002894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002898:	f000 fb8c 	bl	8002fb4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	2100      	movs	r1, #0
 80028a0:	2025      	movs	r0, #37	; 0x25
 80028a2:	f000 fad2 	bl	8002e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028a6:	2025      	movs	r0, #37	; 0x25
 80028a8:	f000 faeb 	bl	8002e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80028ac:	bf00      	nop
 80028ae:	3778      	adds	r7, #120	; 0x78
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40013800 	.word	0x40013800
 80028b8:	40021000 	.word	0x40021000

080028bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028c0:	e7fe      	b.n	80028c0 <NMI_Handler+0x4>

080028c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c6:	e7fe      	b.n	80028c6 <HardFault_Handler+0x4>

080028c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028cc:	e7fe      	b.n	80028cc <MemManage_Handler+0x4>

080028ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028d2:	e7fe      	b.n	80028d2 <BusFault_Handler+0x4>

080028d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d8:	e7fe      	b.n	80028d8 <UsageFault_Handler+0x4>

080028da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002908:	f000 f980 	bl	8002c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}

08002910 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002914:	4802      	ldr	r0, [pc, #8]	; (8002920 <RTC_WKUP_IRQHandler+0x10>)
 8002916:	f002 fbe9 	bl	80050ec <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000170 	.word	0x20000170

08002924 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002928:	4802      	ldr	r0, [pc, #8]	; (8002934 <TIM2_IRQHandler+0x10>)
 800292a:	f003 f8f9 	bl	8005b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	200001f8 	.word	0x200001f8

08002938 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800293c:	4802      	ldr	r0, [pc, #8]	; (8002948 <USART1_IRQHandler+0x10>)
 800293e:	f003 fd93 	bl	8006468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000244 	.word	0x20000244

0800294c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002950:	4802      	ldr	r0, [pc, #8]	; (800295c <RTC_Alarm_IRQHandler+0x10>)
 8002952:	f002 fab3 	bl	8004ebc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000170 	.word	0x20000170

08002960 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
	return 1;
 8002964:	2301      	movs	r3, #1
}
 8002966:	4618      	mov	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <_kill>:

int _kill(int pid, int sig)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800297a:	f005 fd83 	bl	8008484 <__errno>
 800297e:	4603      	mov	r3, r0
 8002980:	2216      	movs	r2, #22
 8002982:	601a      	str	r2, [r3, #0]
	return -1;
 8002984:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <_exit>:

void _exit (int status)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002998:	f04f 31ff 	mov.w	r1, #4294967295
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ffe7 	bl	8002970 <_kill>
	while (1) {}		/* Make sure we hang here */
 80029a2:	e7fe      	b.n	80029a2 <_exit+0x12>

080029a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	e00a      	b.n	80029cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029b6:	f3af 8000 	nop.w
 80029ba:	4601      	mov	r1, r0
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	60ba      	str	r2, [r7, #8]
 80029c2:	b2ca      	uxtb	r2, r1
 80029c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	3301      	adds	r3, #1
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	dbf0      	blt.n	80029b6 <_read+0x12>
	}

return len;
 80029d4:	687b      	ldr	r3, [r7, #4]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b086      	sub	sp, #24
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	e009      	b.n	8002a04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	60ba      	str	r2, [r7, #8]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	3301      	adds	r3, #1
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	dbf1      	blt.n	80029f0 <_write+0x12>
	}
	return len;
 8002a0c:	687b      	ldr	r3, [r7, #4]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <_close>:

int _close(int file)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
	return -1;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a3e:	605a      	str	r2, [r3, #4]
	return 0;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <_isatty>:

int _isatty(int file)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
	return 1;
 8002a56:	2301      	movs	r3, #1
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
	return 0;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a88:	4a14      	ldr	r2, [pc, #80]	; (8002adc <_sbrk+0x5c>)
 8002a8a:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <_sbrk+0x60>)
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a94:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <_sbrk+0x64>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d102      	bne.n	8002aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a9c:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <_sbrk+0x64>)
 8002a9e:	4a12      	ldr	r2, [pc, #72]	; (8002ae8 <_sbrk+0x68>)
 8002aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aa2:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <_sbrk+0x64>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d207      	bcs.n	8002ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ab0:	f005 fce8 	bl	8008484 <__errno>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	220c      	movs	r2, #12
 8002ab8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aba:	f04f 33ff 	mov.w	r3, #4294967295
 8002abe:	e009      	b.n	8002ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ac0:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <_sbrk+0x64>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ac6:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <_sbrk+0x64>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	4a05      	ldr	r2, [pc, #20]	; (8002ae4 <_sbrk+0x64>)
 8002ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20010000 	.word	0x20010000
 8002ae0:	00000400 	.word	0x00000400
 8002ae4:	20000934 	.word	0x20000934
 8002ae8:	20000970 	.word	0x20000970

08002aec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <SystemInit+0x20>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af6:	4a05      	ldr	r2, [pc, #20]	; (8002b0c <SystemInit+0x20>)
 8002af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b14:	f7ff ffea 	bl	8002aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b18:	480c      	ldr	r0, [pc, #48]	; (8002b4c <LoopForever+0x6>)
  ldr r1, =_edata
 8002b1a:	490d      	ldr	r1, [pc, #52]	; (8002b50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b1c:	4a0d      	ldr	r2, [pc, #52]	; (8002b54 <LoopForever+0xe>)
  movs r3, #0
 8002b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b20:	e002      	b.n	8002b28 <LoopCopyDataInit>

08002b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b26:	3304      	adds	r3, #4

08002b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b2c:	d3f9      	bcc.n	8002b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b30:	4c0a      	ldr	r4, [pc, #40]	; (8002b5c <LoopForever+0x16>)
  movs r3, #0
 8002b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b34:	e001      	b.n	8002b3a <LoopFillZerobss>

08002b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b38:	3204      	adds	r2, #4

08002b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b3c:	d3fb      	bcc.n	8002b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b3e:	f005 fca7 	bl	8008490 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b42:	f7fe fa55 	bl	8000ff0 <main>

08002b46 <LoopForever>:

LoopForever:
    b LoopForever
 8002b46:	e7fe      	b.n	8002b46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b48:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b50:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8002b54:	0800a2ac 	.word	0x0800a2ac
  ldr r2, =_sbss
 8002b58:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8002b5c:	2000096c 	.word	0x2000096c

08002b60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b60:	e7fe      	b.n	8002b60 <ADC1_IRQHandler>

08002b62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b6c:	2003      	movs	r0, #3
 8002b6e:	f000 f961 	bl	8002e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b72:	2000      	movs	r0, #0
 8002b74:	f000 f80e 	bl	8002b94 <HAL_InitTick>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	71fb      	strb	r3, [r7, #7]
 8002b82:	e001      	b.n	8002b88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b84:	f7ff fd70 	bl	8002668 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b88:	79fb      	ldrb	r3, [r7, #7]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ba0:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <HAL_InitTick+0x6c>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d023      	beq.n	8002bf0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ba8:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <HAL_InitTick+0x70>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <HAL_InitTick+0x6c>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f96d 	bl	8002e9e <HAL_SYSTICK_Config>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10f      	bne.n	8002bea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b0f      	cmp	r3, #15
 8002bce:	d809      	bhi.n	8002be4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd8:	f000 f937 	bl	8002e4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bdc:	4a0a      	ldr	r2, [pc, #40]	; (8002c08 <HAL_InitTick+0x74>)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	e007      	b.n	8002bf4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
 8002be8:	e004      	b.n	8002bf4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
 8002bee:	e001      	b.n	8002bf4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200000d4 	.word	0x200000d4
 8002c04:	200000cc 	.word	0x200000cc
 8002c08:	200000d0 	.word	0x200000d0

08002c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_IncTick+0x20>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_IncTick+0x24>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	4a04      	ldr	r2, [pc, #16]	; (8002c30 <HAL_IncTick+0x24>)
 8002c1e:	6013      	str	r3, [r2, #0]
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	200000d4 	.word	0x200000d4
 8002c30:	20000938 	.word	0x20000938

08002c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return uwTick;
 8002c38:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <HAL_GetTick+0x14>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	20000938 	.word	0x20000938

08002c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c54:	f7ff ffee 	bl	8002c34 <HAL_GetTick>
 8002c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c64:	d005      	beq.n	8002c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <HAL_Delay+0x44>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4413      	add	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c72:	bf00      	nop
 8002c74:	f7ff ffde 	bl	8002c34 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d8f7      	bhi.n	8002c74 <HAL_Delay+0x28>
  {
  }
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200000d4 	.word	0x200000d4

08002c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca4:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cc6:	4a04      	ldr	r2, [pc, #16]	; (8002cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	60d3      	str	r3, [r2, #12]
}
 8002ccc:	bf00      	nop
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce0:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	0a1b      	lsrs	r3, r3, #8
 8002ce6:	f003 0307 	and.w	r3, r3, #7
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	db0b      	blt.n	8002d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	f003 021f 	and.w	r2, r3, #31
 8002d10:	4907      	ldr	r1, [pc, #28]	; (8002d30 <__NVIC_EnableIRQ+0x38>)
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	2001      	movs	r0, #1
 8002d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	e000e100 	.word	0xe000e100

08002d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	6039      	str	r1, [r7, #0]
 8002d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	db0a      	blt.n	8002d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	490c      	ldr	r1, [pc, #48]	; (8002d80 <__NVIC_SetPriority+0x4c>)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	0112      	lsls	r2, r2, #4
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	440b      	add	r3, r1
 8002d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d5c:	e00a      	b.n	8002d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	4908      	ldr	r1, [pc, #32]	; (8002d84 <__NVIC_SetPriority+0x50>)
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	3b04      	subs	r3, #4
 8002d6c:	0112      	lsls	r2, r2, #4
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	440b      	add	r3, r1
 8002d72:	761a      	strb	r2, [r3, #24]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000e100 	.word	0xe000e100
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b089      	sub	sp, #36	; 0x24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f1c3 0307 	rsb	r3, r3, #7
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	bf28      	it	cs
 8002da6:	2304      	movcs	r3, #4
 8002da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3304      	adds	r3, #4
 8002dae:	2b06      	cmp	r3, #6
 8002db0:	d902      	bls.n	8002db8 <NVIC_EncodePriority+0x30>
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3b03      	subs	r3, #3
 8002db6:	e000      	b.n	8002dba <NVIC_EncodePriority+0x32>
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	401a      	ands	r2, r3
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dda:	43d9      	mvns	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de0:	4313      	orrs	r3, r2
         );
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3724      	adds	r7, #36	; 0x24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e00:	d301      	bcc.n	8002e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e02:	2301      	movs	r3, #1
 8002e04:	e00f      	b.n	8002e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e06:	4a0a      	ldr	r2, [pc, #40]	; (8002e30 <SysTick_Config+0x40>)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e0e:	210f      	movs	r1, #15
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295
 8002e14:	f7ff ff8e 	bl	8002d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <SysTick_Config+0x40>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e1e:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <SysTick_Config+0x40>)
 8002e20:	2207      	movs	r2, #7
 8002e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	e000e010 	.word	0xe000e010

08002e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff ff29 	bl	8002c94 <__NVIC_SetPriorityGrouping>
}
 8002e42:	bf00      	nop
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b086      	sub	sp, #24
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	4603      	mov	r3, r0
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e5c:	f7ff ff3e 	bl	8002cdc <__NVIC_GetPriorityGrouping>
 8002e60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	6978      	ldr	r0, [r7, #20]
 8002e68:	f7ff ff8e 	bl	8002d88 <NVIC_EncodePriority>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e72:	4611      	mov	r1, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff ff5d 	bl	8002d34 <__NVIC_SetPriority>
}
 8002e7a:	bf00      	nop
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	4603      	mov	r3, r0
 8002e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff31 	bl	8002cf8 <__NVIC_EnableIRQ>
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ffa2 	bl	8002df0 <SysTick_Config>
 8002eac:	4603      	mov	r3, r0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b085      	sub	sp, #20
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d008      	beq.n	8002ee0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e022      	b.n	8002f26 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 020e 	bic.w	r2, r2, #14
 8002eee:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f04:	f003 021c 	and.w	r2, r3, #28
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f12:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d005      	beq.n	8002f56 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
 8002f54:	e029      	b.n	8002faa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 020e 	bic.w	r2, r2, #14
 8002f64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0201 	bic.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	f003 021c 	and.w	r2, r3, #28
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	2101      	movs	r1, #1
 8002f84:	fa01 f202 	lsl.w	r2, r1, r2
 8002f88:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	4798      	blx	r3
    }
  }
  return status;
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fc2:	e148      	b.n	8003256 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	2101      	movs	r1, #1
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 813a 	beq.w	8003250 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d005      	beq.n	8002ff4 <HAL_GPIO_Init+0x40>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d130      	bne.n	8003056 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	2203      	movs	r2, #3
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800302a:	2201      	movs	r2, #1
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4013      	ands	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	091b      	lsrs	r3, r3, #4
 8003040:	f003 0201 	and.w	r2, r3, #1
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b03      	cmp	r3, #3
 8003060:	d017      	beq.n	8003092 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	2203      	movs	r2, #3
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4013      	ands	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d123      	bne.n	80030e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	08da      	lsrs	r2, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3208      	adds	r2, #8
 80030a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	220f      	movs	r2, #15
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4013      	ands	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	691a      	ldr	r2, [r3, #16]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	08da      	lsrs	r2, r3, #3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3208      	adds	r2, #8
 80030e0:	6939      	ldr	r1, [r7, #16]
 80030e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	2203      	movs	r2, #3
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4013      	ands	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 0203 	and.w	r2, r3, #3
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 8094 	beq.w	8003250 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003128:	4b52      	ldr	r3, [pc, #328]	; (8003274 <HAL_GPIO_Init+0x2c0>)
 800312a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312c:	4a51      	ldr	r2, [pc, #324]	; (8003274 <HAL_GPIO_Init+0x2c0>)
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	6613      	str	r3, [r2, #96]	; 0x60
 8003134:	4b4f      	ldr	r3, [pc, #316]	; (8003274 <HAL_GPIO_Init+0x2c0>)
 8003136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003140:	4a4d      	ldr	r2, [pc, #308]	; (8003278 <HAL_GPIO_Init+0x2c4>)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	089b      	lsrs	r3, r3, #2
 8003146:	3302      	adds	r3, #2
 8003148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	220f      	movs	r2, #15
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4013      	ands	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800316a:	d00d      	beq.n	8003188 <HAL_GPIO_Init+0x1d4>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a43      	ldr	r2, [pc, #268]	; (800327c <HAL_GPIO_Init+0x2c8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d007      	beq.n	8003184 <HAL_GPIO_Init+0x1d0>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a42      	ldr	r2, [pc, #264]	; (8003280 <HAL_GPIO_Init+0x2cc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d101      	bne.n	8003180 <HAL_GPIO_Init+0x1cc>
 800317c:	2302      	movs	r3, #2
 800317e:	e004      	b.n	800318a <HAL_GPIO_Init+0x1d6>
 8003180:	2307      	movs	r3, #7
 8003182:	e002      	b.n	800318a <HAL_GPIO_Init+0x1d6>
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <HAL_GPIO_Init+0x1d6>
 8003188:	2300      	movs	r3, #0
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	f002 0203 	and.w	r2, r2, #3
 8003190:	0092      	lsls	r2, r2, #2
 8003192:	4093      	lsls	r3, r2
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800319a:	4937      	ldr	r1, [pc, #220]	; (8003278 <HAL_GPIO_Init+0x2c4>)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	089b      	lsrs	r3, r3, #2
 80031a0:	3302      	adds	r3, #2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031a8:	4b36      	ldr	r3, [pc, #216]	; (8003284 <HAL_GPIO_Init+0x2d0>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4013      	ands	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031cc:	4a2d      	ldr	r2, [pc, #180]	; (8003284 <HAL_GPIO_Init+0x2d0>)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031d2:	4b2c      	ldr	r3, [pc, #176]	; (8003284 <HAL_GPIO_Init+0x2d0>)
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	43db      	mvns	r3, r3
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4013      	ands	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031f6:	4a23      	ldr	r2, [pc, #140]	; (8003284 <HAL_GPIO_Init+0x2d0>)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031fc:	4b21      	ldr	r3, [pc, #132]	; (8003284 <HAL_GPIO_Init+0x2d0>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	43db      	mvns	r3, r3
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4013      	ands	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003220:	4a18      	ldr	r2, [pc, #96]	; (8003284 <HAL_GPIO_Init+0x2d0>)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003226:	4b17      	ldr	r3, [pc, #92]	; (8003284 <HAL_GPIO_Init+0x2d0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	43db      	mvns	r3, r3
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4013      	ands	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800324a:	4a0e      	ldr	r2, [pc, #56]	; (8003284 <HAL_GPIO_Init+0x2d0>)
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	3301      	adds	r3, #1
 8003254:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	f47f aeaf 	bne.w	8002fc4 <HAL_GPIO_Init+0x10>
  }
}
 8003266:	bf00      	nop
 8003268:	bf00      	nop
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	40021000 	.word	0x40021000
 8003278:	40010000 	.word	0x40010000
 800327c:	48000400 	.word	0x48000400
 8003280:	48000800 	.word	0x48000800
 8003284:	40010400 	.word	0x40010400

08003288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	807b      	strh	r3, [r7, #2]
 8003294:	4613      	mov	r3, r2
 8003296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003298:	787b      	ldrb	r3, [r7, #1]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800329e:	887a      	ldrh	r2, [r7, #2]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032a4:	e002      	b.n	80032ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032a6:	887a      	ldrh	r2, [r7, #2]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4013      	ands	r3, r2
 80032d0:	041a      	lsls	r2, r3, #16
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	43d9      	mvns	r1, r3
 80032d6:	887b      	ldrh	r3, [r7, #2]
 80032d8:	400b      	ands	r3, r1
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	619a      	str	r2, [r3, #24]
}
 80032e0:	bf00      	nop
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032f0:	4b05      	ldr	r3, [pc, #20]	; (8003308 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a04      	ldr	r2, [pc, #16]	; (8003308 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fa:	6013      	str	r3, [r2, #0]
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40007000 	.word	0x40007000

0800330c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003310:	4b04      	ldr	r3, [pc, #16]	; (8003324 <HAL_PWREx_GetVoltageRange+0x18>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003318:	4618      	mov	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40007000 	.word	0x40007000

08003328 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003336:	d130      	bne.n	800339a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003338:	4b23      	ldr	r3, [pc, #140]	; (80033c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003344:	d038      	beq.n	80033b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003346:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800334e:	4a1e      	ldr	r2, [pc, #120]	; (80033c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003350:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003354:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003356:	4b1d      	ldr	r3, [pc, #116]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2232      	movs	r2, #50	; 0x32
 800335c:	fb02 f303 	mul.w	r3, r2, r3
 8003360:	4a1b      	ldr	r2, [pc, #108]	; (80033d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	0c9b      	lsrs	r3, r3, #18
 8003368:	3301      	adds	r3, #1
 800336a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800336c:	e002      	b.n	8003374 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	3b01      	subs	r3, #1
 8003372:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003374:	4b14      	ldr	r3, [pc, #80]	; (80033c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003380:	d102      	bne.n	8003388 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f2      	bne.n	800336e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003388:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003394:	d110      	bne.n	80033b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e00f      	b.n	80033ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800339a:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a6:	d007      	beq.n	80033b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033a8:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033b0:	4a05      	ldr	r2, [pc, #20]	; (80033c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40007000 	.word	0x40007000
 80033cc:	200000cc 	.word	0x200000cc
 80033d0:	431bde83 	.word	0x431bde83

080033d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d102      	bne.n	80033e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	f000 bc02 	b.w	8003bec <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e8:	4b96      	ldr	r3, [pc, #600]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 030c 	and.w	r3, r3, #12
 80033f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033f2:	4b94      	ldr	r3, [pc, #592]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 80e4 	beq.w	80035d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <HAL_RCC_OscConfig+0x4c>
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	2b0c      	cmp	r3, #12
 8003414:	f040 808b 	bne.w	800352e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	2b01      	cmp	r3, #1
 800341c:	f040 8087 	bne.w	800352e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003420:	4b88      	ldr	r3, [pc, #544]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_RCC_OscConfig+0x64>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e3d9      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1a      	ldr	r2, [r3, #32]
 800343c:	4b81      	ldr	r3, [pc, #516]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d004      	beq.n	8003452 <HAL_RCC_OscConfig+0x7e>
 8003448:	4b7e      	ldr	r3, [pc, #504]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003450:	e005      	b.n	800345e <HAL_RCC_OscConfig+0x8a>
 8003452:	4b7c      	ldr	r3, [pc, #496]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 8003454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800345e:	4293      	cmp	r3, r2
 8003460:	d223      	bcs.n	80034aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	4618      	mov	r0, r3
 8003468:	f000 fd8c 	bl	8003f84 <RCC_SetFlashLatencyFromMSIRange>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e3ba      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003476:	4b73      	ldr	r3, [pc, #460]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a72      	ldr	r2, [pc, #456]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 800347c:	f043 0308 	orr.w	r3, r3, #8
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	4b70      	ldr	r3, [pc, #448]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	496d      	ldr	r1, [pc, #436]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 8003490:	4313      	orrs	r3, r2
 8003492:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003494:	4b6b      	ldr	r3, [pc, #428]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	4968      	ldr	r1, [pc, #416]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]
 80034a8:	e025      	b.n	80034f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034aa:	4b66      	ldr	r3, [pc, #408]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a65      	ldr	r2, [pc, #404]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 80034b0:	f043 0308 	orr.w	r3, r3, #8
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	4b63      	ldr	r3, [pc, #396]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	4960      	ldr	r1, [pc, #384]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034c8:	4b5e      	ldr	r3, [pc, #376]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	495b      	ldr	r1, [pc, #364]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d109      	bne.n	80034f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fd4c 	bl	8003f84 <RCC_SetFlashLatencyFromMSIRange>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e37a      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034f6:	f000 fc81 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 80034fa:	4602      	mov	r2, r0
 80034fc:	4b51      	ldr	r3, [pc, #324]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	4950      	ldr	r1, [pc, #320]	; (8003648 <HAL_RCC_OscConfig+0x274>)
 8003508:	5ccb      	ldrb	r3, [r1, r3]
 800350a:	f003 031f 	and.w	r3, r3, #31
 800350e:	fa22 f303 	lsr.w	r3, r2, r3
 8003512:	4a4e      	ldr	r2, [pc, #312]	; (800364c <HAL_RCC_OscConfig+0x278>)
 8003514:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003516:	4b4e      	ldr	r3, [pc, #312]	; (8003650 <HAL_RCC_OscConfig+0x27c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff fb3a 	bl	8002b94 <HAL_InitTick>
 8003520:	4603      	mov	r3, r0
 8003522:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d052      	beq.n	80035d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	e35e      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d032      	beq.n	800359c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003536:	4b43      	ldr	r3, [pc, #268]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a42      	ldr	r2, [pc, #264]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003542:	f7ff fb77 	bl	8002c34 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800354a:	f7ff fb73 	bl	8002c34 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e347      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800355c:	4b39      	ldr	r3, [pc, #228]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003568:	4b36      	ldr	r3, [pc, #216]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a35      	ldr	r2, [pc, #212]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 800356e:	f043 0308 	orr.w	r3, r3, #8
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	4b33      	ldr	r3, [pc, #204]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	4930      	ldr	r1, [pc, #192]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 8003582:	4313      	orrs	r3, r2
 8003584:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003586:	4b2f      	ldr	r3, [pc, #188]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	492b      	ldr	r1, [pc, #172]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 8003596:	4313      	orrs	r3, r2
 8003598:	604b      	str	r3, [r1, #4]
 800359a:	e01a      	b.n	80035d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800359c:	4b29      	ldr	r3, [pc, #164]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a28      	ldr	r2, [pc, #160]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 80035a2:	f023 0301 	bic.w	r3, r3, #1
 80035a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035a8:	f7ff fb44 	bl	8002c34 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035b0:	f7ff fb40 	bl	8002c34 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e314      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035c2:	4b20      	ldr	r3, [pc, #128]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x1dc>
 80035ce:	e000      	b.n	80035d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d073      	beq.n	80036c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_OscConfig+0x21c>
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	2b0c      	cmp	r3, #12
 80035e8:	d10e      	bne.n	8003608 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d10b      	bne.n	8003608 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f0:	4b14      	ldr	r3, [pc, #80]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d063      	beq.n	80036c4 <HAL_RCC_OscConfig+0x2f0>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d15f      	bne.n	80036c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e2f1      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003610:	d106      	bne.n	8003620 <HAL_RCC_OscConfig+0x24c>
 8003612:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a0b      	ldr	r2, [pc, #44]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 8003618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	e025      	b.n	800366c <HAL_RCC_OscConfig+0x298>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003628:	d114      	bne.n	8003654 <HAL_RCC_OscConfig+0x280>
 800362a:	4b06      	ldr	r3, [pc, #24]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a05      	ldr	r2, [pc, #20]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 8003630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	4b03      	ldr	r3, [pc, #12]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a02      	ldr	r2, [pc, #8]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 800363c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	e013      	b.n	800366c <HAL_RCC_OscConfig+0x298>
 8003644:	40021000 	.word	0x40021000
 8003648:	08009fe4 	.word	0x08009fe4
 800364c:	200000cc 	.word	0x200000cc
 8003650:	200000d0 	.word	0x200000d0
 8003654:	4ba0      	ldr	r3, [pc, #640]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a9f      	ldr	r2, [pc, #636]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 800365a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	4b9d      	ldr	r3, [pc, #628]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a9c      	ldr	r2, [pc, #624]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 8003666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800366a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d013      	beq.n	800369c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003674:	f7ff fade 	bl	8002c34 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800367c:	f7ff fada 	bl	8002c34 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b64      	cmp	r3, #100	; 0x64
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e2ae      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800368e:	4b92      	ldr	r3, [pc, #584]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0x2a8>
 800369a:	e014      	b.n	80036c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7ff faca 	bl	8002c34 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a4:	f7ff fac6 	bl	8002c34 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b64      	cmp	r3, #100	; 0x64
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e29a      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036b6:	4b88      	ldr	r3, [pc, #544]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x2d0>
 80036c2:	e000      	b.n	80036c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d060      	beq.n	8003794 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_OscConfig+0x310>
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2b0c      	cmp	r3, #12
 80036dc:	d119      	bne.n	8003712 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d116      	bne.n	8003712 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036e4:	4b7c      	ldr	r3, [pc, #496]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_OscConfig+0x328>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e277      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fc:	4b76      	ldr	r3, [pc, #472]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	061b      	lsls	r3, r3, #24
 800370a:	4973      	ldr	r1, [pc, #460]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003710:	e040      	b.n	8003794 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d023      	beq.n	8003762 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800371a:	4b6f      	ldr	r3, [pc, #444]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a6e      	ldr	r2, [pc, #440]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 8003720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003726:	f7ff fa85 	bl	8002c34 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800372e:	f7ff fa81 	bl	8002c34 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e255      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003740:	4b65      	ldr	r3, [pc, #404]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0f0      	beq.n	800372e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374c:	4b62      	ldr	r3, [pc, #392]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	061b      	lsls	r3, r3, #24
 800375a:	495f      	ldr	r1, [pc, #380]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 800375c:	4313      	orrs	r3, r2
 800375e:	604b      	str	r3, [r1, #4]
 8003760:	e018      	b.n	8003794 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003762:	4b5d      	ldr	r3, [pc, #372]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a5c      	ldr	r2, [pc, #368]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 8003768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800376c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7ff fa61 	bl	8002c34 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003776:	f7ff fa5d 	bl	8002c34 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e231      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003788:	4b53      	ldr	r3, [pc, #332]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f0      	bne.n	8003776 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b00      	cmp	r3, #0
 800379e:	d03c      	beq.n	800381a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d01c      	beq.n	80037e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037a8:	4b4b      	ldr	r3, [pc, #300]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 80037aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ae:	4a4a      	ldr	r2, [pc, #296]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b8:	f7ff fa3c 	bl	8002c34 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c0:	f7ff fa38 	bl	8002c34 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e20c      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037d2:	4b41      	ldr	r3, [pc, #260]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 80037d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0ef      	beq.n	80037c0 <HAL_RCC_OscConfig+0x3ec>
 80037e0:	e01b      	b.n	800381a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e2:	4b3d      	ldr	r3, [pc, #244]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 80037e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e8:	4a3b      	ldr	r2, [pc, #236]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f2:	f7ff fa1f 	bl	8002c34 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fa:	f7ff fa1b 	bl	8002c34 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e1ef      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800380c:	4b32      	ldr	r3, [pc, #200]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 800380e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1ef      	bne.n	80037fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 80a6 	beq.w	8003974 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003828:	2300      	movs	r3, #0
 800382a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800382c:	4b2a      	ldr	r3, [pc, #168]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 800382e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10d      	bne.n	8003854 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003838:	4b27      	ldr	r3, [pc, #156]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 800383a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383c:	4a26      	ldr	r2, [pc, #152]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 800383e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003842:	6593      	str	r3, [r2, #88]	; 0x58
 8003844:	4b24      	ldr	r3, [pc, #144]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 8003846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003850:	2301      	movs	r3, #1
 8003852:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003854:	4b21      	ldr	r3, [pc, #132]	; (80038dc <HAL_RCC_OscConfig+0x508>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385c:	2b00      	cmp	r3, #0
 800385e:	d118      	bne.n	8003892 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003860:	4b1e      	ldr	r3, [pc, #120]	; (80038dc <HAL_RCC_OscConfig+0x508>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a1d      	ldr	r2, [pc, #116]	; (80038dc <HAL_RCC_OscConfig+0x508>)
 8003866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800386a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800386c:	f7ff f9e2 	bl	8002c34 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003874:	f7ff f9de 	bl	8002c34 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e1b2      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003886:	4b15      	ldr	r3, [pc, #84]	; (80038dc <HAL_RCC_OscConfig+0x508>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0f0      	beq.n	8003874 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d108      	bne.n	80038ac <HAL_RCC_OscConfig+0x4d8>
 800389a:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 800389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a0:	4a0d      	ldr	r2, [pc, #52]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038aa:	e029      	b.n	8003900 <HAL_RCC_OscConfig+0x52c>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b05      	cmp	r3, #5
 80038b2:	d115      	bne.n	80038e0 <HAL_RCC_OscConfig+0x50c>
 80038b4:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ba:	4a07      	ldr	r2, [pc, #28]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 80038bc:	f043 0304 	orr.w	r3, r3, #4
 80038c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ca:	4a03      	ldr	r2, [pc, #12]	; (80038d8 <HAL_RCC_OscConfig+0x504>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038d4:	e014      	b.n	8003900 <HAL_RCC_OscConfig+0x52c>
 80038d6:	bf00      	nop
 80038d8:	40021000 	.word	0x40021000
 80038dc:	40007000 	.word	0x40007000
 80038e0:	4b9a      	ldr	r3, [pc, #616]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e6:	4a99      	ldr	r2, [pc, #612]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 80038e8:	f023 0301 	bic.w	r3, r3, #1
 80038ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038f0:	4b96      	ldr	r3, [pc, #600]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	4a95      	ldr	r2, [pc, #596]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 80038f8:	f023 0304 	bic.w	r3, r3, #4
 80038fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d016      	beq.n	8003936 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003908:	f7ff f994 	bl	8002c34 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800390e:	e00a      	b.n	8003926 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003910:	f7ff f990 	bl	8002c34 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	f241 3288 	movw	r2, #5000	; 0x1388
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e162      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003926:	4b89      	ldr	r3, [pc, #548]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 8003928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0ed      	beq.n	8003910 <HAL_RCC_OscConfig+0x53c>
 8003934:	e015      	b.n	8003962 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003936:	f7ff f97d 	bl	8002c34 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800393c:	e00a      	b.n	8003954 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393e:	f7ff f979 	bl	8002c34 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	f241 3288 	movw	r2, #5000	; 0x1388
 800394c:	4293      	cmp	r3, r2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e14b      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003954:	4b7d      	ldr	r3, [pc, #500]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1ed      	bne.n	800393e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003962:	7ffb      	ldrb	r3, [r7, #31]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d105      	bne.n	8003974 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003968:	4b78      	ldr	r3, [pc, #480]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 800396a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396c:	4a77      	ldr	r2, [pc, #476]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 800396e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003972:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	2b00      	cmp	r3, #0
 800397e:	d03c      	beq.n	80039fa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01c      	beq.n	80039c2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003988:	4b70      	ldr	r3, [pc, #448]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 800398a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800398e:	4a6f      	ldr	r2, [pc, #444]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003998:	f7ff f94c 	bl	8002c34 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039a0:	f7ff f948 	bl	8002c34 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e11c      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039b2:	4b66      	ldr	r3, [pc, #408]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 80039b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0ef      	beq.n	80039a0 <HAL_RCC_OscConfig+0x5cc>
 80039c0:	e01b      	b.n	80039fa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039c2:	4b62      	ldr	r3, [pc, #392]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 80039c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039c8:	4a60      	ldr	r2, [pc, #384]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 80039ca:	f023 0301 	bic.w	r3, r3, #1
 80039ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d2:	f7ff f92f 	bl	8002c34 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039da:	f7ff f92b 	bl	8002c34 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e0ff      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039ec:	4b57      	ldr	r3, [pc, #348]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 80039ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1ef      	bne.n	80039da <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 80f3 	beq.w	8003bea <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	f040 80c9 	bne.w	8003ba0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a0e:	4b4f      	ldr	r3, [pc, #316]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f003 0203 	and.w	r2, r3, #3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d12c      	bne.n	8003a7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d123      	bne.n	8003a7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d11b      	bne.n	8003a7c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d113      	bne.n	8003a7c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5e:	085b      	lsrs	r3, r3, #1
 8003a60:	3b01      	subs	r3, #1
 8003a62:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d109      	bne.n	8003a7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	085b      	lsrs	r3, r3, #1
 8003a74:	3b01      	subs	r3, #1
 8003a76:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d06b      	beq.n	8003b54 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	2b0c      	cmp	r3, #12
 8003a80:	d062      	beq.n	8003b48 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a82:	4b32      	ldr	r3, [pc, #200]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e0ac      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a92:	4b2e      	ldr	r3, [pc, #184]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a2d      	ldr	r2, [pc, #180]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 8003a98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a9c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a9e:	f7ff f8c9 	bl	8002c34 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa6:	f7ff f8c5 	bl	8002c34 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e099      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ab8:	4b24      	ldr	r3, [pc, #144]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f0      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ac4:	4b21      	ldr	r3, [pc, #132]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	4b21      	ldr	r3, [pc, #132]	; (8003b50 <HAL_RCC_OscConfig+0x77c>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ad4:	3a01      	subs	r2, #1
 8003ad6:	0112      	lsls	r2, r2, #4
 8003ad8:	4311      	orrs	r1, r2
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ade:	0212      	lsls	r2, r2, #8
 8003ae0:	4311      	orrs	r1, r2
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ae6:	0852      	lsrs	r2, r2, #1
 8003ae8:	3a01      	subs	r2, #1
 8003aea:	0552      	lsls	r2, r2, #21
 8003aec:	4311      	orrs	r1, r2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003af2:	0852      	lsrs	r2, r2, #1
 8003af4:	3a01      	subs	r2, #1
 8003af6:	0652      	lsls	r2, r2, #25
 8003af8:	4311      	orrs	r1, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003afe:	06d2      	lsls	r2, r2, #27
 8003b00:	430a      	orrs	r2, r1
 8003b02:	4912      	ldr	r1, [pc, #72]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b08:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a0f      	ldr	r2, [pc, #60]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 8003b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b14:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4a0c      	ldr	r2, [pc, #48]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 8003b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b20:	f7ff f888 	bl	8002c34 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b28:	f7ff f884 	bl	8002c34 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e058      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b3a:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <HAL_RCC_OscConfig+0x778>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b46:	e050      	b.n	8003bea <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e04f      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b54:	4b27      	ldr	r3, [pc, #156]	; (8003bf4 <HAL_RCC_OscConfig+0x820>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d144      	bne.n	8003bea <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b60:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <HAL_RCC_OscConfig+0x820>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a23      	ldr	r2, [pc, #140]	; (8003bf4 <HAL_RCC_OscConfig+0x820>)
 8003b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b6c:	4b21      	ldr	r3, [pc, #132]	; (8003bf4 <HAL_RCC_OscConfig+0x820>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4a20      	ldr	r2, [pc, #128]	; (8003bf4 <HAL_RCC_OscConfig+0x820>)
 8003b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b78:	f7ff f85c 	bl	8002c34 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b80:	f7ff f858 	bl	8002c34 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e02c      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b92:	4b18      	ldr	r3, [pc, #96]	; (8003bf4 <HAL_RCC_OscConfig+0x820>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0x7ac>
 8003b9e:	e024      	b.n	8003bea <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2b0c      	cmp	r3, #12
 8003ba4:	d01f      	beq.n	8003be6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba6:	4b13      	ldr	r3, [pc, #76]	; (8003bf4 <HAL_RCC_OscConfig+0x820>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a12      	ldr	r2, [pc, #72]	; (8003bf4 <HAL_RCC_OscConfig+0x820>)
 8003bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb2:	f7ff f83f 	bl	8002c34 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bba:	f7ff f83b 	bl	8002c34 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e00f      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bcc:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <HAL_RCC_OscConfig+0x820>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f0      	bne.n	8003bba <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003bd8:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <HAL_RCC_OscConfig+0x820>)
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	4905      	ldr	r1, [pc, #20]	; (8003bf4 <HAL_RCC_OscConfig+0x820>)
 8003bde:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <HAL_RCC_OscConfig+0x824>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	60cb      	str	r3, [r1, #12]
 8003be4:	e001      	b.n	8003bea <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3720      	adds	r7, #32
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	feeefffc 	.word	0xfeeefffc

08003bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0e7      	b.n	8003de0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c10:	4b75      	ldr	r3, [pc, #468]	; (8003de8 <HAL_RCC_ClockConfig+0x1ec>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d910      	bls.n	8003c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1e:	4b72      	ldr	r3, [pc, #456]	; (8003de8 <HAL_RCC_ClockConfig+0x1ec>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f023 0207 	bic.w	r2, r3, #7
 8003c26:	4970      	ldr	r1, [pc, #448]	; (8003de8 <HAL_RCC_ClockConfig+0x1ec>)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2e:	4b6e      	ldr	r3, [pc, #440]	; (8003de8 <HAL_RCC_ClockConfig+0x1ec>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d001      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0cf      	b.n	8003de0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d010      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	4b66      	ldr	r3, [pc, #408]	; (8003dec <HAL_RCC_ClockConfig+0x1f0>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d908      	bls.n	8003c6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c5c:	4b63      	ldr	r3, [pc, #396]	; (8003dec <HAL_RCC_ClockConfig+0x1f0>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	4960      	ldr	r1, [pc, #384]	; (8003dec <HAL_RCC_ClockConfig+0x1f0>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d04c      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d107      	bne.n	8003c92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c82:	4b5a      	ldr	r3, [pc, #360]	; (8003dec <HAL_RCC_ClockConfig+0x1f0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d121      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e0a6      	b.n	8003de0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d107      	bne.n	8003caa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c9a:	4b54      	ldr	r3, [pc, #336]	; (8003dec <HAL_RCC_ClockConfig+0x1f0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d115      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e09a      	b.n	8003de0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d107      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cb2:	4b4e      	ldr	r3, [pc, #312]	; (8003dec <HAL_RCC_ClockConfig+0x1f0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d109      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e08e      	b.n	8003de0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cc2:	4b4a      	ldr	r3, [pc, #296]	; (8003dec <HAL_RCC_ClockConfig+0x1f0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e086      	b.n	8003de0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cd2:	4b46      	ldr	r3, [pc, #280]	; (8003dec <HAL_RCC_ClockConfig+0x1f0>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f023 0203 	bic.w	r2, r3, #3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	4943      	ldr	r1, [pc, #268]	; (8003dec <HAL_RCC_ClockConfig+0x1f0>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce4:	f7fe ffa6 	bl	8002c34 <HAL_GetTick>
 8003ce8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cea:	e00a      	b.n	8003d02 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cec:	f7fe ffa2 	bl	8002c34 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e06e      	b.n	8003de0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d02:	4b3a      	ldr	r3, [pc, #232]	; (8003dec <HAL_RCC_ClockConfig+0x1f0>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 020c 	and.w	r2, r3, #12
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d1eb      	bne.n	8003cec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d010      	beq.n	8003d42 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	4b31      	ldr	r3, [pc, #196]	; (8003dec <HAL_RCC_ClockConfig+0x1f0>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d208      	bcs.n	8003d42 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d30:	4b2e      	ldr	r3, [pc, #184]	; (8003dec <HAL_RCC_ClockConfig+0x1f0>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	492b      	ldr	r1, [pc, #172]	; (8003dec <HAL_RCC_ClockConfig+0x1f0>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d42:	4b29      	ldr	r3, [pc, #164]	; (8003de8 <HAL_RCC_ClockConfig+0x1ec>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d210      	bcs.n	8003d72 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d50:	4b25      	ldr	r3, [pc, #148]	; (8003de8 <HAL_RCC_ClockConfig+0x1ec>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f023 0207 	bic.w	r2, r3, #7
 8003d58:	4923      	ldr	r1, [pc, #140]	; (8003de8 <HAL_RCC_ClockConfig+0x1ec>)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d60:	4b21      	ldr	r3, [pc, #132]	; (8003de8 <HAL_RCC_ClockConfig+0x1ec>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d001      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e036      	b.n	8003de0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d7e:	4b1b      	ldr	r3, [pc, #108]	; (8003dec <HAL_RCC_ClockConfig+0x1f0>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	4918      	ldr	r1, [pc, #96]	; (8003dec <HAL_RCC_ClockConfig+0x1f0>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d009      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d9c:	4b13      	ldr	r3, [pc, #76]	; (8003dec <HAL_RCC_ClockConfig+0x1f0>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	4910      	ldr	r1, [pc, #64]	; (8003dec <HAL_RCC_ClockConfig+0x1f0>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003db0:	f000 f824 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <HAL_RCC_ClockConfig+0x1f0>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	091b      	lsrs	r3, r3, #4
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	490b      	ldr	r1, [pc, #44]	; (8003df0 <HAL_RCC_ClockConfig+0x1f4>)
 8003dc2:	5ccb      	ldrb	r3, [r1, r3]
 8003dc4:	f003 031f 	and.w	r3, r3, #31
 8003dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dcc:	4a09      	ldr	r2, [pc, #36]	; (8003df4 <HAL_RCC_ClockConfig+0x1f8>)
 8003dce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003dd0:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <HAL_RCC_ClockConfig+0x1fc>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fe fedd 	bl	8002b94 <HAL_InitTick>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	72fb      	strb	r3, [r7, #11]

  return status;
 8003dde:	7afb      	ldrb	r3, [r7, #11]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40022000 	.word	0x40022000
 8003dec:	40021000 	.word	0x40021000
 8003df0:	08009fe4 	.word	0x08009fe4
 8003df4:	200000cc 	.word	0x200000cc
 8003df8:	200000d0 	.word	0x200000d0

08003dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b089      	sub	sp, #36	; 0x24
 8003e00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	2300      	movs	r3, #0
 8003e08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e0a:	4b3e      	ldr	r3, [pc, #248]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e14:	4b3b      	ldr	r3, [pc, #236]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <HAL_RCC_GetSysClockFreq+0x34>
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	2b0c      	cmp	r3, #12
 8003e28:	d121      	bne.n	8003e6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d11e      	bne.n	8003e6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e30:	4b34      	ldr	r3, [pc, #208]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d107      	bne.n	8003e4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e3c:	4b31      	ldr	r3, [pc, #196]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e42:	0a1b      	lsrs	r3, r3, #8
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	61fb      	str	r3, [r7, #28]
 8003e4a:	e005      	b.n	8003e58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e4c:	4b2d      	ldr	r3, [pc, #180]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	091b      	lsrs	r3, r3, #4
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e58:	4a2b      	ldr	r2, [pc, #172]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10d      	bne.n	8003e84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e6c:	e00a      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d102      	bne.n	8003e7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e74:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x110>)
 8003e76:	61bb      	str	r3, [r7, #24]
 8003e78:	e004      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d101      	bne.n	8003e84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e80:	4b23      	ldr	r3, [pc, #140]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	2b0c      	cmp	r3, #12
 8003e88:	d134      	bne.n	8003ef4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e8a:	4b1e      	ldr	r3, [pc, #120]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d003      	beq.n	8003ea2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d003      	beq.n	8003ea8 <HAL_RCC_GetSysClockFreq+0xac>
 8003ea0:	e005      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ea2:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ea4:	617b      	str	r3, [r7, #20]
      break;
 8003ea6:	e005      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ea8:	4b19      	ldr	r3, [pc, #100]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x114>)
 8003eaa:	617b      	str	r3, [r7, #20]
      break;
 8003eac:	e002      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	617b      	str	r3, [r7, #20]
      break;
 8003eb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003eb4:	4b13      	ldr	r3, [pc, #76]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	f003 0307 	and.w	r3, r3, #7
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ec2:	4b10      	ldr	r3, [pc, #64]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	0a1b      	lsrs	r3, r3, #8
 8003ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	fb03 f202 	mul.w	r2, r3, r2
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003eda:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	0e5b      	lsrs	r3, r3, #25
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ef4:	69bb      	ldr	r3, [r7, #24]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3724      	adds	r7, #36	; 0x24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40021000 	.word	0x40021000
 8003f08:	08009ffc 	.word	0x08009ffc
 8003f0c:	00f42400 	.word	0x00f42400
 8003f10:	007a1200 	.word	0x007a1200

08003f14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f18:	4b03      	ldr	r3, [pc, #12]	; (8003f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	200000cc 	.word	0x200000cc

08003f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f30:	f7ff fff0 	bl	8003f14 <HAL_RCC_GetHCLKFreq>
 8003f34:	4602      	mov	r2, r0
 8003f36:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	0a1b      	lsrs	r3, r3, #8
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	4904      	ldr	r1, [pc, #16]	; (8003f54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f42:	5ccb      	ldrb	r3, [r1, r3]
 8003f44:	f003 031f 	and.w	r3, r3, #31
 8003f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40021000 	.word	0x40021000
 8003f54:	08009ff4 	.word	0x08009ff4

08003f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f5c:	f7ff ffda 	bl	8003f14 <HAL_RCC_GetHCLKFreq>
 8003f60:	4602      	mov	r2, r0
 8003f62:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	0adb      	lsrs	r3, r3, #11
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	4904      	ldr	r1, [pc, #16]	; (8003f80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f6e:	5ccb      	ldrb	r3, [r1, r3]
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	08009ff4 	.word	0x08009ff4

08003f84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f90:	4b2a      	ldr	r3, [pc, #168]	; (800403c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f9c:	f7ff f9b6 	bl	800330c <HAL_PWREx_GetVoltageRange>
 8003fa0:	6178      	str	r0, [r7, #20]
 8003fa2:	e014      	b.n	8003fce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fa4:	4b25      	ldr	r3, [pc, #148]	; (800403c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa8:	4a24      	ldr	r2, [pc, #144]	; (800403c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fae:	6593      	str	r3, [r2, #88]	; 0x58
 8003fb0:	4b22      	ldr	r3, [pc, #136]	; (800403c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fbc:	f7ff f9a6 	bl	800330c <HAL_PWREx_GetVoltageRange>
 8003fc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fc2:	4b1e      	ldr	r3, [pc, #120]	; (800403c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc6:	4a1d      	ldr	r2, [pc, #116]	; (800403c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fd4:	d10b      	bne.n	8003fee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b80      	cmp	r3, #128	; 0x80
 8003fda:	d919      	bls.n	8004010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2ba0      	cmp	r3, #160	; 0xa0
 8003fe0:	d902      	bls.n	8003fe8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	613b      	str	r3, [r7, #16]
 8003fe6:	e013      	b.n	8004010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fe8:	2301      	movs	r3, #1
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	e010      	b.n	8004010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b80      	cmp	r3, #128	; 0x80
 8003ff2:	d902      	bls.n	8003ffa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	613b      	str	r3, [r7, #16]
 8003ff8:	e00a      	b.n	8004010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b80      	cmp	r3, #128	; 0x80
 8003ffe:	d102      	bne.n	8004006 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004000:	2302      	movs	r3, #2
 8004002:	613b      	str	r3, [r7, #16]
 8004004:	e004      	b.n	8004010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b70      	cmp	r3, #112	; 0x70
 800400a:	d101      	bne.n	8004010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800400c:	2301      	movs	r3, #1
 800400e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f023 0207 	bic.w	r2, r3, #7
 8004018:	4909      	ldr	r1, [pc, #36]	; (8004040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004020:	4b07      	ldr	r3, [pc, #28]	; (8004040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	429a      	cmp	r2, r3
 800402c:	d001      	beq.n	8004032 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40021000 	.word	0x40021000
 8004040:	40022000 	.word	0x40022000

08004044 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800404c:	2300      	movs	r3, #0
 800404e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004050:	2300      	movs	r3, #0
 8004052:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800405c:	2b00      	cmp	r3, #0
 800405e:	d031      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004064:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004068:	d01a      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800406a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800406e:	d814      	bhi.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004070:	2b00      	cmp	r3, #0
 8004072:	d009      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004074:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004078:	d10f      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800407a:	4b5d      	ldr	r3, [pc, #372]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	4a5c      	ldr	r2, [pc, #368]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004084:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004086:	e00c      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3304      	adds	r3, #4
 800408c:	2100      	movs	r1, #0
 800408e:	4618      	mov	r0, r3
 8004090:	f000 f9de 	bl	8004450 <RCCEx_PLLSAI1_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004098:	e003      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	74fb      	strb	r3, [r7, #19]
      break;
 800409e:	e000      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80040a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040a2:	7cfb      	ldrb	r3, [r7, #19]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10b      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040a8:	4b51      	ldr	r3, [pc, #324]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b6:	494e      	ldr	r1, [pc, #312]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040be:	e001      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c0:	7cfb      	ldrb	r3, [r7, #19]
 80040c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 809e 	beq.w	800420e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040d2:	2300      	movs	r3, #0
 80040d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040d6:	4b46      	ldr	r3, [pc, #280]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80040e6:	2300      	movs	r3, #0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00d      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ec:	4b40      	ldr	r3, [pc, #256]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f0:	4a3f      	ldr	r2, [pc, #252]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f6:	6593      	str	r3, [r2, #88]	; 0x58
 80040f8:	4b3d      	ldr	r3, [pc, #244]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004104:	2301      	movs	r3, #1
 8004106:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004108:	4b3a      	ldr	r3, [pc, #232]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a39      	ldr	r2, [pc, #228]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800410e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004112:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004114:	f7fe fd8e 	bl	8002c34 <HAL_GetTick>
 8004118:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800411a:	e009      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800411c:	f7fe fd8a 	bl	8002c34 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d902      	bls.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	74fb      	strb	r3, [r7, #19]
        break;
 800412e:	e005      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004130:	4b30      	ldr	r3, [pc, #192]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0ef      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800413c:	7cfb      	ldrb	r3, [r7, #19]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d15a      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004142:	4b2b      	ldr	r3, [pc, #172]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01e      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	429a      	cmp	r2, r3
 800415c:	d019      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800415e:	4b24      	ldr	r3, [pc, #144]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004168:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800416a:	4b21      	ldr	r3, [pc, #132]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800416c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004170:	4a1f      	ldr	r2, [pc, #124]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800417a:	4b1d      	ldr	r3, [pc, #116]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800417c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004180:	4a1b      	ldr	r2, [pc, #108]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004186:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800418a:	4a19      	ldr	r2, [pc, #100]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d016      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419c:	f7fe fd4a 	bl	8002c34 <HAL_GetTick>
 80041a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041a2:	e00b      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a4:	f7fe fd46 	bl	8002c34 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d902      	bls.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	74fb      	strb	r3, [r7, #19]
            break;
 80041ba:	e006      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041bc:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0ec      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80041ca:	7cfb      	ldrb	r3, [r7, #19]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10b      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041d0:	4b07      	ldr	r3, [pc, #28]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041de:	4904      	ldr	r1, [pc, #16]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041e6:	e009      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041e8:	7cfb      	ldrb	r3, [r7, #19]
 80041ea:	74bb      	strb	r3, [r7, #18]
 80041ec:	e006      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80041ee:	bf00      	nop
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f8:	7cfb      	ldrb	r3, [r7, #19]
 80041fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041fc:	7c7b      	ldrb	r3, [r7, #17]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d105      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004202:	4b8a      	ldr	r3, [pc, #552]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004206:	4a89      	ldr	r2, [pc, #548]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800420c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800421a:	4b84      	ldr	r3, [pc, #528]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004220:	f023 0203 	bic.w	r2, r3, #3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	4980      	ldr	r1, [pc, #512]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800423c:	4b7b      	ldr	r3, [pc, #492]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004242:	f023 020c 	bic.w	r2, r3, #12
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	4978      	ldr	r1, [pc, #480]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0320 	and.w	r3, r3, #32
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800425e:	4b73      	ldr	r3, [pc, #460]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004264:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426c:	496f      	ldr	r1, [pc, #444]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004280:	4b6a      	ldr	r3, [pc, #424]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428e:	4967      	ldr	r1, [pc, #412]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042a2:	4b62      	ldr	r3, [pc, #392]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b0:	495e      	ldr	r1, [pc, #376]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042c4:	4b59      	ldr	r3, [pc, #356]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	4956      	ldr	r1, [pc, #344]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042e6:	4b51      	ldr	r3, [pc, #324]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	494d      	ldr	r1, [pc, #308]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d028      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004308:	4b48      	ldr	r3, [pc, #288]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	4945      	ldr	r1, [pc, #276]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004326:	d106      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004328:	4b40      	ldr	r3, [pc, #256]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4a3f      	ldr	r2, [pc, #252]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800432e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004332:	60d3      	str	r3, [r2, #12]
 8004334:	e011      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800433e:	d10c      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3304      	adds	r3, #4
 8004344:	2101      	movs	r1, #1
 8004346:	4618      	mov	r0, r3
 8004348:	f000 f882 	bl	8004450 <RCCEx_PLLSAI1_Config>
 800434c:	4603      	mov	r3, r0
 800434e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004350:	7cfb      	ldrb	r3, [r7, #19]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004356:	7cfb      	ldrb	r3, [r7, #19]
 8004358:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d028      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004366:	4b31      	ldr	r3, [pc, #196]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004374:	492d      	ldr	r1, [pc, #180]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004380:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004384:	d106      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004386:	4b29      	ldr	r3, [pc, #164]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	4a28      	ldr	r2, [pc, #160]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800438c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004390:	60d3      	str	r3, [r2, #12]
 8004392:	e011      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004398:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800439c:	d10c      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3304      	adds	r3, #4
 80043a2:	2101      	movs	r1, #1
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 f853 	bl	8004450 <RCCEx_PLLSAI1_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ae:	7cfb      	ldrb	r3, [r7, #19]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d01c      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043c4:	4b19      	ldr	r3, [pc, #100]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d2:	4916      	ldr	r1, [pc, #88]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043e2:	d10c      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3304      	adds	r3, #4
 80043e8:	2102      	movs	r1, #2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 f830 	bl	8004450 <RCCEx_PLLSAI1_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043f4:	7cfb      	ldrb	r3, [r7, #19]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80043fa:	7cfb      	ldrb	r3, [r7, #19]
 80043fc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800440a:	4b08      	ldr	r3, [pc, #32]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004410:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004418:	4904      	ldr	r1, [pc, #16]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004420:	7cbb      	ldrb	r3, [r7, #18]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40021000 	.word	0x40021000

08004430 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004434:	4b05      	ldr	r3, [pc, #20]	; (800444c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a04      	ldr	r2, [pc, #16]	; (800444c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800443a:	f043 0304 	orr.w	r3, r3, #4
 800443e:	6013      	str	r3, [r2, #0]
}
 8004440:	bf00      	nop
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40021000 	.word	0x40021000

08004450 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800445e:	4b74      	ldr	r3, [pc, #464]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d018      	beq.n	800449c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800446a:	4b71      	ldr	r3, [pc, #452]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f003 0203 	and.w	r2, r3, #3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d10d      	bne.n	8004496 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
       ||
 800447e:	2b00      	cmp	r3, #0
 8004480:	d009      	beq.n	8004496 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004482:	4b6b      	ldr	r3, [pc, #428]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	091b      	lsrs	r3, r3, #4
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
       ||
 8004492:	429a      	cmp	r2, r3
 8004494:	d047      	beq.n	8004526 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
 800449a:	e044      	b.n	8004526 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d018      	beq.n	80044d6 <RCCEx_PLLSAI1_Config+0x86>
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d825      	bhi.n	80044f4 <RCCEx_PLLSAI1_Config+0xa4>
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d002      	beq.n	80044b2 <RCCEx_PLLSAI1_Config+0x62>
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d009      	beq.n	80044c4 <RCCEx_PLLSAI1_Config+0x74>
 80044b0:	e020      	b.n	80044f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044b2:	4b5f      	ldr	r3, [pc, #380]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d11d      	bne.n	80044fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044c2:	e01a      	b.n	80044fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044c4:	4b5a      	ldr	r3, [pc, #360]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d116      	bne.n	80044fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044d4:	e013      	b.n	80044fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044d6:	4b56      	ldr	r3, [pc, #344]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10f      	bne.n	8004502 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044e2:	4b53      	ldr	r3, [pc, #332]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d109      	bne.n	8004502 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044f2:	e006      	b.n	8004502 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	73fb      	strb	r3, [r7, #15]
      break;
 80044f8:	e004      	b.n	8004504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044fa:	bf00      	nop
 80044fc:	e002      	b.n	8004504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044fe:	bf00      	nop
 8004500:	e000      	b.n	8004504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004502:	bf00      	nop
    }

    if(status == HAL_OK)
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10d      	bne.n	8004526 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800450a:	4b49      	ldr	r3, [pc, #292]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6819      	ldr	r1, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	3b01      	subs	r3, #1
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	430b      	orrs	r3, r1
 8004520:	4943      	ldr	r1, [pc, #268]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004522:	4313      	orrs	r3, r2
 8004524:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004526:	7bfb      	ldrb	r3, [r7, #15]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d17c      	bne.n	8004626 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800452c:	4b40      	ldr	r3, [pc, #256]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a3f      	ldr	r2, [pc, #252]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004532:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004538:	f7fe fb7c 	bl	8002c34 <HAL_GetTick>
 800453c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800453e:	e009      	b.n	8004554 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004540:	f7fe fb78 	bl	8002c34 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d902      	bls.n	8004554 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	73fb      	strb	r3, [r7, #15]
        break;
 8004552:	e005      	b.n	8004560 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004554:	4b36      	ldr	r3, [pc, #216]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ef      	bne.n	8004540 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d15f      	bne.n	8004626 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d110      	bne.n	800458e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800456c:	4b30      	ldr	r3, [pc, #192]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004574:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6892      	ldr	r2, [r2, #8]
 800457c:	0211      	lsls	r1, r2, #8
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	68d2      	ldr	r2, [r2, #12]
 8004582:	06d2      	lsls	r2, r2, #27
 8004584:	430a      	orrs	r2, r1
 8004586:	492a      	ldr	r1, [pc, #168]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004588:	4313      	orrs	r3, r2
 800458a:	610b      	str	r3, [r1, #16]
 800458c:	e027      	b.n	80045de <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d112      	bne.n	80045ba <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004594:	4b26      	ldr	r3, [pc, #152]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800459c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6892      	ldr	r2, [r2, #8]
 80045a4:	0211      	lsls	r1, r2, #8
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6912      	ldr	r2, [r2, #16]
 80045aa:	0852      	lsrs	r2, r2, #1
 80045ac:	3a01      	subs	r2, #1
 80045ae:	0552      	lsls	r2, r2, #21
 80045b0:	430a      	orrs	r2, r1
 80045b2:	491f      	ldr	r1, [pc, #124]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	610b      	str	r3, [r1, #16]
 80045b8:	e011      	b.n	80045de <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045ba:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6892      	ldr	r2, [r2, #8]
 80045ca:	0211      	lsls	r1, r2, #8
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6952      	ldr	r2, [r2, #20]
 80045d0:	0852      	lsrs	r2, r2, #1
 80045d2:	3a01      	subs	r2, #1
 80045d4:	0652      	lsls	r2, r2, #25
 80045d6:	430a      	orrs	r2, r1
 80045d8:	4915      	ldr	r1, [pc, #84]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045de:	4b14      	ldr	r3, [pc, #80]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a13      	ldr	r2, [pc, #76]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ea:	f7fe fb23 	bl	8002c34 <HAL_GetTick>
 80045ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045f0:	e009      	b.n	8004606 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045f2:	f7fe fb1f 	bl	8002c34 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d902      	bls.n	8004606 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	73fb      	strb	r3, [r7, #15]
          break;
 8004604:	e005      	b.n	8004612 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004606:	4b0a      	ldr	r3, [pc, #40]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0ef      	beq.n	80045f2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d106      	bne.n	8004626 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004618:	4b05      	ldr	r3, [pc, #20]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	4903      	ldr	r1, [pc, #12]	; (8004630 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004622:	4313      	orrs	r3, r2
 8004624:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004626:	7bfb      	ldrb	r3, [r7, #15]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40021000 	.word	0x40021000

08004634 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d06c      	beq.n	8004720 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fe f828 	bl	80026b0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	22ca      	movs	r2, #202	; 0xca
 800466e:	625a      	str	r2, [r3, #36]	; 0x24
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2253      	movs	r2, #83	; 0x53
 8004676:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fc8b 	bl	8004f94 <RTC_EnterInitMode>
 800467e:	4603      	mov	r3, r0
 8004680:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d14b      	bne.n	8004720 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6812      	ldr	r2, [r2, #0]
 8004692:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800469a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6899      	ldr	r1, [r3, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	68d2      	ldr	r2, [r2, #12]
 80046c2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6919      	ldr	r1, [r3, #16]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	041a      	lsls	r2, r3, #16
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fc8f 	bl	8004ffc <RTC_ExitInitMode>
 80046de:	4603      	mov	r3, r0
 80046e0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d11b      	bne.n	8004720 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0203 	bic.w	r2, r2, #3
 80046f6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69da      	ldr	r2, [r3, #28]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	22ff      	movs	r2, #255	; 0xff
 8004716:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004720:	7bfb      	ldrb	r3, [r7, #15]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800472a:	b590      	push	{r4, r7, lr}
 800472c:	b087      	sub	sp, #28
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_RTC_SetTime+0x1a>
 8004740:	2302      	movs	r3, #2
 8004742:	e08b      	b.n	800485c <HAL_RTC_SetTime+0x132>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	22ca      	movs	r2, #202	; 0xca
 800475a:	625a      	str	r2, [r3, #36]	; 0x24
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2253      	movs	r2, #83	; 0x53
 8004762:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 fc15 	bl	8004f94 <RTC_EnterInitMode>
 800476a:	4603      	mov	r3, r0
 800476c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800476e:	7cfb      	ldrb	r3, [r7, #19]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d163      	bne.n	800483c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d126      	bne.n	80047c8 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004784:	2b00      	cmp	r3, #0
 8004786:	d102      	bne.n	800478e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2200      	movs	r2, #0
 800478c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fc70 	bl	8005078 <RTC_ByteToBcd2>
 8004798:	4603      	mov	r3, r0
 800479a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	785b      	ldrb	r3, [r3, #1]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fc69 	bl	8005078 <RTC_ByteToBcd2>
 80047a6:	4603      	mov	r3, r0
 80047a8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80047aa:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	789b      	ldrb	r3, [r3, #2]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 fc61 	bl	8005078 <RTC_ByteToBcd2>
 80047b6:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80047b8:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	78db      	ldrb	r3, [r3, #3]
 80047c0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	e018      	b.n	80047fa <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d102      	bne.n	80047dc <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2200      	movs	r2, #0
 80047da:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	785b      	ldrb	r3, [r3, #1]
 80047e6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80047e8:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80047ee:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	78db      	ldrb	r3, [r3, #3]
 80047f4:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004804:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004808:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004818:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6899      	ldr	r1, [r3, #8]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	431a      	orrs	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 fbe2 	bl	8004ffc <RTC_ExitInitMode>
 8004838:	4603      	mov	r3, r0
 800483a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	22ff      	movs	r2, #255	; 0xff
 8004842:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004844:	7cfb      	ldrb	r3, [r7, #19]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d103      	bne.n	8004852 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800485a:	7cfb      	ldrb	r3, [r7, #19]
}
 800485c:	4618      	mov	r0, r3
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	bd90      	pop	{r4, r7, pc}

08004864 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004892:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004896:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	0c1b      	lsrs	r3, r3, #16
 800489c:	b2db      	uxtb	r3, r3
 800489e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	0a1b      	lsrs	r3, r3, #8
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	0d9b      	lsrs	r3, r3, #22
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d11a      	bne.n	8004912 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fbe9 	bl	80050b8 <RTC_Bcd2ToByte>
 80048e6:	4603      	mov	r3, r0
 80048e8:	461a      	mov	r2, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	785b      	ldrb	r3, [r3, #1]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fbe0 	bl	80050b8 <RTC_Bcd2ToByte>
 80048f8:	4603      	mov	r3, r0
 80048fa:	461a      	mov	r2, r3
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	789b      	ldrb	r3, [r3, #2]
 8004904:	4618      	mov	r0, r3
 8004906:	f000 fbd7 	bl	80050b8 <RTC_Bcd2ToByte>
 800490a:	4603      	mov	r3, r0
 800490c:	461a      	mov	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800491c:	b590      	push	{r4, r7, lr}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_RTC_SetDate+0x1a>
 8004932:	2302      	movs	r3, #2
 8004934:	e075      	b.n	8004a22 <HAL_RTC_SetDate+0x106>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2202      	movs	r2, #2
 8004942:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10e      	bne.n	800496a <HAL_RTC_SetDate+0x4e>
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	785b      	ldrb	r3, [r3, #1]
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	785b      	ldrb	r3, [r3, #1]
 800495c:	f023 0310 	bic.w	r3, r3, #16
 8004960:	b2db      	uxtb	r3, r3
 8004962:	330a      	adds	r3, #10
 8004964:	b2da      	uxtb	r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d11c      	bne.n	80049aa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	78db      	ldrb	r3, [r3, #3]
 8004974:	4618      	mov	r0, r3
 8004976:	f000 fb7f 	bl	8005078 <RTC_ByteToBcd2>
 800497a:	4603      	mov	r3, r0
 800497c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	785b      	ldrb	r3, [r3, #1]
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fb78 	bl	8005078 <RTC_ByteToBcd2>
 8004988:	4603      	mov	r3, r0
 800498a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800498c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	789b      	ldrb	r3, [r3, #2]
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fb70 	bl	8005078 <RTC_ByteToBcd2>
 8004998:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800499a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80049a4:	4313      	orrs	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	e00e      	b.n	80049c8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	78db      	ldrb	r3, [r3, #3]
 80049ae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	785b      	ldrb	r3, [r3, #1]
 80049b4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80049b6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80049bc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	22ca      	movs	r2, #202	; 0xca
 80049ce:	625a      	str	r2, [r3, #36]	; 0x24
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2253      	movs	r2, #83	; 0x53
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 fadb 	bl	8004f94 <RTC_EnterInitMode>
 80049de:	4603      	mov	r3, r0
 80049e0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80049e2:	7cfb      	ldrb	r3, [r7, #19]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10c      	bne.n	8004a02 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80049f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80049f6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 faff 	bl	8004ffc <RTC_ExitInitMode>
 80049fe:	4603      	mov	r3, r0
 8004a00:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	22ff      	movs	r2, #255	; 0xff
 8004a08:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004a0a:	7cfb      	ldrb	r3, [r7, #19]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d103      	bne.n	8004a18 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004a20:	7cfb      	ldrb	r3, [r7, #19]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd90      	pop	{r4, r7, pc}

08004a2a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b086      	sub	sp, #24
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004a40:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004a44:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	0c1b      	lsrs	r3, r3, #16
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	0b5b      	lsrs	r3, r3, #13
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d11a      	bne.n	8004aba <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	78db      	ldrb	r3, [r3, #3]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fb15 	bl	80050b8 <RTC_Bcd2ToByte>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	461a      	mov	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	785b      	ldrb	r3, [r3, #1]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fb0c 	bl	80050b8 <RTC_Bcd2ToByte>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	789b      	ldrb	r3, [r3, #2]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 fb03 	bl	80050b8 <RTC_Bcd2ToByte>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b089      	sub	sp, #36	; 0x24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d101      	bne.n	8004ade <HAL_RTC_SetAlarm_IT+0x1a>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e127      	b.n	8004d2e <HAL_RTC_SetAlarm_IT+0x26a>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d137      	bne.n	8004b64 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d102      	bne.n	8004b08 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2200      	movs	r2, #0
 8004b06:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 fab3 	bl	8005078 <RTC_ByteToBcd2>
 8004b12:	4603      	mov	r3, r0
 8004b14:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	785b      	ldrb	r3, [r3, #1]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 faac 	bl	8005078 <RTC_ByteToBcd2>
 8004b20:	4603      	mov	r3, r0
 8004b22:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004b24:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	789b      	ldrb	r3, [r3, #2]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 faa4 	bl	8005078 <RTC_ByteToBcd2>
 8004b30:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004b32:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	78db      	ldrb	r3, [r3, #3]
 8004b3a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004b3c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fa96 	bl	8005078 <RTC_ByteToBcd2>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004b50:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004b58:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	61fb      	str	r3, [r7, #28]
 8004b62:	e023      	b.n	8004bac <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d102      	bne.n	8004b78 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2200      	movs	r2, #0
 8004b76:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	785b      	ldrb	r3, [r3, #1]
 8004b82:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004b84:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004b8a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	78db      	ldrb	r3, [r3, #3]
 8004b90:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004b92:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b9a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004b9c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004ba2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	22ca      	movs	r2, #202	; 0xca
 8004bbe:	625a      	str	r2, [r3, #36]	; 0x24
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2253      	movs	r2, #83	; 0x53
 8004bc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bd0:	d14a      	bne.n	8004c68 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004be0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004bf2:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8004bf4:	f7fe f81e 	bl	8002c34 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004bfa:	e015      	b.n	8004c28 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004bfc:	f7fe f81a 	bl	8002c34 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c0a:	d90d      	bls.n	8004c28 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	22ff      	movs	r2, #255	; 0xff
 8004c12:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2203      	movs	r2, #3
 8004c18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e082      	b.n	8004d2e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0e2      	beq.n	8004bfc <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c54:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c64:	609a      	str	r2, [r3, #8]
 8004c66:	e049      	b.n	8004cfc <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c76:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004c88:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8004c8a:	f7fd ffd3 	bl	8002c34 <HAL_GetTick>
 8004c8e:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004c90:	e015      	b.n	8004cbe <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c92:	f7fd ffcf 	bl	8002c34 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ca0:	d90d      	bls.n	8004cbe <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	22ff      	movs	r2, #255	; 0xff
 8004ca8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2203      	movs	r2, #3
 8004cae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e037      	b.n	8004d2e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0e2      	beq.n	8004c92 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cea:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cfa:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004cfc:	4b0e      	ldr	r3, [pc, #56]	; (8004d38 <HAL_RTC_SetAlarm_IT+0x274>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a0d      	ldr	r2, [pc, #52]	; (8004d38 <HAL_RTC_SetAlarm_IT+0x274>)
 8004d02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d06:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004d08:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <HAL_RTC_SetAlarm_IT+0x274>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	4a0a      	ldr	r2, [pc, #40]	; (8004d38 <HAL_RTC_SetAlarm_IT+0x274>)
 8004d0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d12:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	22ff      	movs	r2, #255	; 0xff
 8004d1a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3724      	adds	r7, #36	; 0x24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd90      	pop	{r4, r7, pc}
 8004d36:	bf00      	nop
 8004d38:	40010400 	.word	0x40010400

08004d3c <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d50:	d143      	bne.n	8004dda <HAL_RTC_GetAlarm+0x9e>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d58:	629a      	str	r2, [r3, #40]	; 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d68:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004d6c:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	0c1b      	lsrs	r3, r3, #16
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	0a1b      	lsrs	r3, r3, #8
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	0d9b      	lsrs	r3, r3, #22
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	0e1b      	lsrs	r3, r3, #24
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	615a      	str	r2, [r3, #20]
 8004dd8:	e042      	b.n	8004e60 <HAL_RTC_GetAlarm+0x124>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004de0:	629a      	str	r2, [r3, #40]	; 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004df4:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	0c1b      	lsrs	r3, r3, #16
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	0a1b      	lsrs	r3, r3, #8
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	0d9b      	lsrs	r3, r3, #22
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	0e1b      	lsrs	r3, r3, #24
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	615a      	str	r2, [r3, #20]
  }

  if (Format == RTC_FORMAT_BIN)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d125      	bne.n	8004eb2 <HAL_RTC_GetAlarm+0x176>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 f924 	bl	80050b8 <RTC_Bcd2ToByte>
 8004e70:	4603      	mov	r3, r0
 8004e72:	461a      	mov	r2, r3
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	785b      	ldrb	r3, [r3, #1]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 f91b 	bl	80050b8 <RTC_Bcd2ToByte>
 8004e82:	4603      	mov	r3, r0
 8004e84:	461a      	mov	r2, r3
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	789b      	ldrb	r3, [r3, #2]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 f912 	bl	80050b8 <RTC_Bcd2ToByte>
 8004e94:	4603      	mov	r3, r0
 8004e96:	461a      	mov	r2, r3
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 f908 	bl	80050b8 <RTC_Bcd2ToByte>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	461a      	mov	r2, r3
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004ec4:	4b1f      	ldr	r3, [pc, #124]	; (8004f44 <HAL_RTC_AlarmIRQHandler+0x88>)
 8004ec6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004eca:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d012      	beq.n	8004f00 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00b      	beq.n	8004f00 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004ef8:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7fc f86a 	bl	8000fd4 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d012      	beq.n	8004f34 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00b      	beq.n	8004f34 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004f2c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f90c 	bl	800514c <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8004f3c:	bf00      	nop
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40010400 	.word	0x40010400

08004f48 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f5e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004f60:	f7fd fe68 	bl	8002c34 <HAL_GetTick>
 8004f64:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f66:	e009      	b.n	8004f7c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f68:	f7fd fe64 	bl	8002c34 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f76:	d901      	bls.n	8004f7c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e007      	b.n	8004f8c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0ee      	beq.n	8004f68 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d120      	bne.n	8004ff0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004fb8:	f7fd fe3c 	bl	8002c34 <HAL_GetTick>
 8004fbc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004fbe:	e00d      	b.n	8004fdc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004fc0:	f7fd fe38 	bl	8002c34 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fce:	d905      	bls.n	8004fdc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2203      	movs	r2, #3
 8004fd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d102      	bne.n	8004ff0 <RTC_EnterInitMode+0x5c>
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
 8004fec:	2b03      	cmp	r3, #3
 8004fee:	d1e7      	bne.n	8004fc0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005008:	4b1a      	ldr	r3, [pc, #104]	; (8005074 <RTC_ExitInitMode+0x78>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	4a19      	ldr	r2, [pc, #100]	; (8005074 <RTC_ExitInitMode+0x78>)
 800500e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005012:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005014:	4b17      	ldr	r3, [pc, #92]	; (8005074 <RTC_ExitInitMode+0x78>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10c      	bne.n	800503a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff ff91 	bl	8004f48 <HAL_RTC_WaitForSynchro>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d01e      	beq.n	800506a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2203      	movs	r2, #3
 8005030:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	73fb      	strb	r3, [r7, #15]
 8005038:	e017      	b.n	800506a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800503a:	4b0e      	ldr	r3, [pc, #56]	; (8005074 <RTC_ExitInitMode+0x78>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	4a0d      	ldr	r2, [pc, #52]	; (8005074 <RTC_ExitInitMode+0x78>)
 8005040:	f023 0320 	bic.w	r3, r3, #32
 8005044:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7ff ff7e 	bl	8004f48 <HAL_RTC_WaitForSynchro>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d005      	beq.n	800505e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2203      	movs	r2, #3
 8005056:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800505e:	4b05      	ldr	r3, [pc, #20]	; (8005074 <RTC_ExitInitMode+0x78>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	4a04      	ldr	r2, [pc, #16]	; (8005074 <RTC_ExitInitMode+0x78>)
 8005064:	f043 0320 	orr.w	r3, r3, #32
 8005068:	6093      	str	r3, [r2, #8]
  }

  return status;
 800506a:	7bfb      	ldrb	r3, [r7, #15]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40002800 	.word	0x40002800

08005078 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800508a:	e005      	b.n	8005098 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	3301      	adds	r3, #1
 8005090:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005092:	7afb      	ldrb	r3, [r7, #11]
 8005094:	3b0a      	subs	r3, #10
 8005096:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005098:	7afb      	ldrb	r3, [r7, #11]
 800509a:	2b09      	cmp	r3, #9
 800509c:	d8f6      	bhi.n	800508c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	7afb      	ldrb	r3, [r7, #11]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	b2db      	uxtb	r3, r3
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	4603      	mov	r3, r0
 80050c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	0092      	lsls	r2, r2, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	f003 030f 	and.w	r3, r3, #15
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	7bfb      	ldrb	r3, [r7, #15]
 80050dc:	4413      	add	r3, r2
 80050de:	b2db      	uxtb	r3, r3
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80050f4:	4b0f      	ldr	r3, [pc, #60]	; (8005134 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80050f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80050fa:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00b      	beq.n	8005122 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	b2da      	uxtb	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800511a:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f80b 	bl	8005138 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800512a:	bf00      	nop
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	40010400 	.word	0x40010400

08005138 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3350      	adds	r3, #80	; 0x50
 8005172:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	009a      	lsls	r2, r3, #2
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	4413      	add	r3, r2
 800517c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	461a      	mov	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6013      	str	r3, [r2, #0]
}
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e095      	b.n	80052d0 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d108      	bne.n	80051be <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051b4:	d009      	beq.n	80051ca <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	61da      	str	r2, [r3, #28]
 80051bc:	e005      	b.n	80051ca <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d106      	bne.n	80051ea <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7fd faa3 	bl	8002730 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2202      	movs	r2, #2
 80051ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005200:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800520a:	d902      	bls.n	8005212 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800520c:	2300      	movs	r3, #0
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	e002      	b.n	8005218 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005216:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005220:	d007      	beq.n	8005232 <HAL_SPI_Init+0xa0>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800522a:	d002      	beq.n	8005232 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	431a      	orrs	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005274:	ea42 0103 	orr.w	r1, r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	0c1b      	lsrs	r3, r3, #16
 800528e:	f003 0204 	and.w	r2, r3, #4
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	f003 0310 	and.w	r3, r3, #16
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80052ae:	ea42 0103 	orr.w	r1, r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08a      	sub	sp, #40	; 0x28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80052e6:	2301      	movs	r3, #1
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <HAL_SPI_TransmitReceive+0x26>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e1fb      	b.n	80056f6 <HAL_SPI_TransmitReceive+0x41e>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005306:	f7fd fc95 	bl	8002c34 <HAL_GetTick>
 800530a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005312:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800531a:	887b      	ldrh	r3, [r7, #2]
 800531c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800531e:	887b      	ldrh	r3, [r7, #2]
 8005320:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005322:	7efb      	ldrb	r3, [r7, #27]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d00e      	beq.n	8005346 <HAL_SPI_TransmitReceive+0x6e>
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800532e:	d106      	bne.n	800533e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d102      	bne.n	800533e <HAL_SPI_TransmitReceive+0x66>
 8005338:	7efb      	ldrb	r3, [r7, #27]
 800533a:	2b04      	cmp	r3, #4
 800533c:	d003      	beq.n	8005346 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800533e:	2302      	movs	r3, #2
 8005340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005344:	e1cd      	b.n	80056e2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <HAL_SPI_TransmitReceive+0x80>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <HAL_SPI_TransmitReceive+0x80>
 8005352:	887b      	ldrh	r3, [r7, #2]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d103      	bne.n	8005360 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800535e:	e1c0      	b.n	80056e2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b04      	cmp	r3, #4
 800536a:	d003      	beq.n	8005374 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2205      	movs	r2, #5
 8005370:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	887a      	ldrh	r2, [r7, #2]
 8005384:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	887a      	ldrh	r2, [r7, #2]
 800538c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	887a      	ldrh	r2, [r7, #2]
 800539a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	887a      	ldrh	r2, [r7, #2]
 80053a0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053b6:	d802      	bhi.n	80053be <HAL_SPI_TransmitReceive+0xe6>
 80053b8:	8a3b      	ldrh	r3, [r7, #16]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d908      	bls.n	80053d0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053cc:	605a      	str	r2, [r3, #4]
 80053ce:	e007      	b.n	80053e0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053de:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d007      	beq.n	80053fe <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005406:	d97c      	bls.n	8005502 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <HAL_SPI_TransmitReceive+0x13e>
 8005410:	8a7b      	ldrh	r3, [r7, #18]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d169      	bne.n	80054ea <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541a:	881a      	ldrh	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005426:	1c9a      	adds	r2, r3, #2
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005430:	b29b      	uxth	r3, r3
 8005432:	3b01      	subs	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800543a:	e056      	b.n	80054ea <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b02      	cmp	r3, #2
 8005448:	d11b      	bne.n	8005482 <HAL_SPI_TransmitReceive+0x1aa>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d016      	beq.n	8005482 <HAL_SPI_TransmitReceive+0x1aa>
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	2b01      	cmp	r3, #1
 8005458:	d113      	bne.n	8005482 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	881a      	ldrh	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	1c9a      	adds	r2, r3, #2
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800547e:	2300      	movs	r3, #0
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b01      	cmp	r3, #1
 800548e:	d11c      	bne.n	80054ca <HAL_SPI_TransmitReceive+0x1f2>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d016      	beq.n	80054ca <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	b292      	uxth	r2, r2
 80054a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	1c9a      	adds	r2, r3, #2
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054c6:	2301      	movs	r3, #1
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054ca:	f7fd fbb3 	bl	8002c34 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d807      	bhi.n	80054ea <HAL_SPI_TransmitReceive+0x212>
 80054da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e0:	d003      	beq.n	80054ea <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80054e8:	e0fb      	b.n	80056e2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1a3      	bne.n	800543c <HAL_SPI_TransmitReceive+0x164>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d19d      	bne.n	800543c <HAL_SPI_TransmitReceive+0x164>
 8005500:	e0df      	b.n	80056c2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_SPI_TransmitReceive+0x23a>
 800550a:	8a7b      	ldrh	r3, [r7, #18]
 800550c:	2b01      	cmp	r3, #1
 800550e:	f040 80cb 	bne.w	80056a8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005516:	b29b      	uxth	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	d912      	bls.n	8005542 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005520:	881a      	ldrh	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	1c9a      	adds	r2, r3, #2
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005536:	b29b      	uxth	r3, r3
 8005538:	3b02      	subs	r3, #2
 800553a:	b29a      	uxth	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005540:	e0b2      	b.n	80056a8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	330c      	adds	r3, #12
 800554c:	7812      	ldrb	r2, [r2, #0]
 800554e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800555e:	b29b      	uxth	r3, r3
 8005560:	3b01      	subs	r3, #1
 8005562:	b29a      	uxth	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005568:	e09e      	b.n	80056a8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b02      	cmp	r3, #2
 8005576:	d134      	bne.n	80055e2 <HAL_SPI_TransmitReceive+0x30a>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800557c:	b29b      	uxth	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d02f      	beq.n	80055e2 <HAL_SPI_TransmitReceive+0x30a>
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	2b01      	cmp	r3, #1
 8005586:	d12c      	bne.n	80055e2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800558c:	b29b      	uxth	r3, r3
 800558e:	2b01      	cmp	r3, #1
 8005590:	d912      	bls.n	80055b8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005596:	881a      	ldrh	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	1c9a      	adds	r2, r3, #2
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	3b02      	subs	r3, #2
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055b6:	e012      	b.n	80055de <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	330c      	adds	r3, #12
 80055c2:	7812      	ldrb	r2, [r2, #0]
 80055c4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d148      	bne.n	8005682 <HAL_SPI_TransmitReceive+0x3aa>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d042      	beq.n	8005682 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b01      	cmp	r3, #1
 8005606:	d923      	bls.n	8005650 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	b292      	uxth	r2, r2
 8005614:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	1c9a      	adds	r2, r3, #2
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b02      	subs	r3, #2
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b01      	cmp	r3, #1
 800563c:	d81f      	bhi.n	800567e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800564c:	605a      	str	r2, [r3, #4]
 800564e:	e016      	b.n	800567e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f103 020c 	add.w	r2, r3, #12
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565c:	7812      	ldrb	r2, [r2, #0]
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b01      	subs	r3, #1
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800567e:	2301      	movs	r3, #1
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005682:	f7fd fad7 	bl	8002c34 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800568e:	429a      	cmp	r2, r3
 8005690:	d803      	bhi.n	800569a <HAL_SPI_TransmitReceive+0x3c2>
 8005692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005698:	d102      	bne.n	80056a0 <HAL_SPI_TransmitReceive+0x3c8>
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	2b00      	cmp	r3, #0
 800569e:	d103      	bne.n	80056a8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80056a6:	e01c      	b.n	80056e2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f47f af5b 	bne.w	800556a <HAL_SPI_TransmitReceive+0x292>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f47f af54 	bne.w	800556a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056c2:	69fa      	ldr	r2, [r7, #28]
 80056c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 f938 	bl	800593c <SPI_EndRxTxTransaction>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d006      	beq.n	80056e0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2220      	movs	r2, #32
 80056dc:	661a      	str	r2, [r3, #96]	; 0x60
 80056de:	e000      	b.n	80056e2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80056e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80056f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3728      	adds	r7, #40	; 0x28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
	...

08005700 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b088      	sub	sp, #32
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	4613      	mov	r3, r2
 800570e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005710:	f7fd fa90 	bl	8002c34 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	1a9b      	subs	r3, r3, r2
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	4413      	add	r3, r2
 800571e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005720:	f7fd fa88 	bl	8002c34 <HAL_GetTick>
 8005724:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005726:	4b39      	ldr	r3, [pc, #228]	; (800580c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	015b      	lsls	r3, r3, #5
 800572c:	0d1b      	lsrs	r3, r3, #20
 800572e:	69fa      	ldr	r2, [r7, #28]
 8005730:	fb02 f303 	mul.w	r3, r2, r3
 8005734:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005736:	e054      	b.n	80057e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573e:	d050      	beq.n	80057e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005740:	f7fd fa78 	bl	8002c34 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	69fa      	ldr	r2, [r7, #28]
 800574c:	429a      	cmp	r2, r3
 800574e:	d902      	bls.n	8005756 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d13d      	bne.n	80057d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005764:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800576e:	d111      	bne.n	8005794 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005778:	d004      	beq.n	8005784 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005782:	d107      	bne.n	8005794 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005792:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800579c:	d10f      	bne.n	80057be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e017      	b.n	8005802 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	3b01      	subs	r3, #1
 80057e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4013      	ands	r3, r2
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	bf0c      	ite	eq
 80057f2:	2301      	moveq	r3, #1
 80057f4:	2300      	movne	r3, #0
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	79fb      	ldrb	r3, [r7, #7]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d19b      	bne.n	8005738 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3720      	adds	r7, #32
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	200000cc 	.word	0x200000cc

08005810 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08a      	sub	sp, #40	; 0x28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800581e:	2300      	movs	r3, #0
 8005820:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005822:	f7fd fa07 	bl	8002c34 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	1a9b      	subs	r3, r3, r2
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	4413      	add	r3, r2
 8005830:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005832:	f7fd f9ff 	bl	8002c34 <HAL_GetTick>
 8005836:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	330c      	adds	r3, #12
 800583e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005840:	4b3d      	ldr	r3, [pc, #244]	; (8005938 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	4613      	mov	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	00da      	lsls	r2, r3, #3
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	0d1b      	lsrs	r3, r3, #20
 8005850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005852:	fb02 f303 	mul.w	r3, r2, r3
 8005856:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005858:	e060      	b.n	800591c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005860:	d107      	bne.n	8005872 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d104      	bne.n	8005872 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005870:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005878:	d050      	beq.n	800591c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800587a:	f7fd f9db 	bl	8002c34 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005886:	429a      	cmp	r2, r3
 8005888:	d902      	bls.n	8005890 <SPI_WaitFifoStateUntilTimeout+0x80>
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	2b00      	cmp	r3, #0
 800588e:	d13d      	bne.n	800590c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800589e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058a8:	d111      	bne.n	80058ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058b2:	d004      	beq.n	80058be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058bc:	d107      	bne.n	80058ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058d6:	d10f      	bne.n	80058f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e010      	b.n	800592e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	3b01      	subs	r3, #1
 800591a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	4013      	ands	r3, r2
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	429a      	cmp	r2, r3
 800592a:	d196      	bne.n	800585a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3728      	adds	r7, #40	; 0x28
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	200000cc 	.word	0x200000cc

0800593c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af02      	add	r7, sp, #8
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2200      	movs	r2, #0
 8005950:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f7ff ff5b 	bl	8005810 <SPI_WaitFifoStateUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d007      	beq.n	8005970 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005964:	f043 0220 	orr.w	r2, r3, #32
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e027      	b.n	80059c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2200      	movs	r2, #0
 8005978:	2180      	movs	r1, #128	; 0x80
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f7ff fec0 	bl	8005700 <SPI_WaitFlagStateUntilTimeout>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d007      	beq.n	8005996 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598a:	f043 0220 	orr.w	r2, r3, #32
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e014      	b.n	80059c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2200      	movs	r2, #0
 800599e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f7ff ff34 	bl	8005810 <SPI_WaitFifoStateUntilTimeout>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d007      	beq.n	80059be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059b2:	f043 0220 	orr.w	r2, r3, #32
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e000      	b.n	80059c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e049      	b.n	8005a6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7fc fee0 	bl	80027b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4619      	mov	r1, r3
 8005a06:	4610      	mov	r0, r2
 8005a08:	f000 fa9a 	bl	8005f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d001      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e03b      	b.n	8005b08 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68da      	ldr	r2, [r3, #12]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0201 	orr.w	r2, r2, #1
 8005aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a19      	ldr	r2, [pc, #100]	; (8005b14 <HAL_TIM_Base_Start_IT+0x9c>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d009      	beq.n	8005ac6 <HAL_TIM_Base_Start_IT+0x4e>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aba:	d004      	beq.n	8005ac6 <HAL_TIM_Base_Start_IT+0x4e>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a15      	ldr	r2, [pc, #84]	; (8005b18 <HAL_TIM_Base_Start_IT+0xa0>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d115      	bne.n	8005af2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	4b13      	ldr	r3, [pc, #76]	; (8005b1c <HAL_TIM_Base_Start_IT+0xa4>)
 8005ace:	4013      	ands	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b06      	cmp	r3, #6
 8005ad6:	d015      	beq.n	8005b04 <HAL_TIM_Base_Start_IT+0x8c>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ade:	d011      	beq.n	8005b04 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0201 	orr.w	r2, r2, #1
 8005aee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af0:	e008      	b.n	8005b04 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f042 0201 	orr.w	r2, r2, #1
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	e000      	b.n	8005b06 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b04:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	40012c00 	.word	0x40012c00
 8005b18:	40014000 	.word	0x40014000
 8005b1c:	00010007 	.word	0x00010007

08005b20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d122      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d11b      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f06f 0202 	mvn.w	r2, #2
 8005b4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f9ce 	bl	8005f04 <HAL_TIM_IC_CaptureCallback>
 8005b68:	e005      	b.n	8005b76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f9c0 	bl	8005ef0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f9d1 	bl	8005f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f003 0304 	and.w	r3, r3, #4
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	d122      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	d11b      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0204 	mvn.w	r2, #4
 8005ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f9a4 	bl	8005f04 <HAL_TIM_IC_CaptureCallback>
 8005bbc:	e005      	b.n	8005bca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f996 	bl	8005ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f9a7 	bl	8005f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f003 0308 	and.w	r3, r3, #8
 8005bda:	2b08      	cmp	r3, #8
 8005bdc:	d122      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 0308 	and.w	r3, r3, #8
 8005be8:	2b08      	cmp	r3, #8
 8005bea:	d11b      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f06f 0208 	mvn.w	r2, #8
 8005bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2204      	movs	r2, #4
 8005bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f97a 	bl	8005f04 <HAL_TIM_IC_CaptureCallback>
 8005c10:	e005      	b.n	8005c1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f96c 	bl	8005ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f97d 	bl	8005f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f003 0310 	and.w	r3, r3, #16
 8005c2e:	2b10      	cmp	r3, #16
 8005c30:	d122      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f003 0310 	and.w	r3, r3, #16
 8005c3c:	2b10      	cmp	r3, #16
 8005c3e:	d11b      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0210 	mvn.w	r2, #16
 8005c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2208      	movs	r2, #8
 8005c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f950 	bl	8005f04 <HAL_TIM_IC_CaptureCallback>
 8005c64:	e005      	b.n	8005c72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f942 	bl	8005ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f953 	bl	8005f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d10e      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d107      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0201 	mvn.w	r2, #1
 8005c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7fb f886 	bl	8000db0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cae:	2b80      	cmp	r3, #128	; 0x80
 8005cb0:	d10e      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cbc:	2b80      	cmp	r3, #128	; 0x80
 8005cbe:	d107      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 faa6 	bl	800621c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cde:	d10e      	bne.n	8005cfe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cea:	2b80      	cmp	r3, #128	; 0x80
 8005cec:	d107      	bne.n	8005cfe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fa99 	bl	8006230 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d08:	2b40      	cmp	r3, #64	; 0x40
 8005d0a:	d10e      	bne.n	8005d2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d16:	2b40      	cmp	r3, #64	; 0x40
 8005d18:	d107      	bne.n	8005d2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f901 	bl	8005f2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f003 0320 	and.w	r3, r3, #32
 8005d34:	2b20      	cmp	r3, #32
 8005d36:	d10e      	bne.n	8005d56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f003 0320 	and.w	r3, r3, #32
 8005d42:	2b20      	cmp	r3, #32
 8005d44:	d107      	bne.n	8005d56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f06f 0220 	mvn.w	r2, #32
 8005d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fa59 	bl	8006208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d56:	bf00      	nop
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b084      	sub	sp, #16
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <HAL_TIM_ConfigClockSource+0x1c>
 8005d76:	2302      	movs	r3, #2
 8005d78:	e0b6      	b.n	8005ee8 <HAL_TIM_ConfigClockSource+0x18a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2202      	movs	r2, #2
 8005d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d98:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d9c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005da4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005db6:	d03e      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0xd8>
 8005db8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dbc:	f200 8087 	bhi.w	8005ece <HAL_TIM_ConfigClockSource+0x170>
 8005dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc4:	f000 8086 	beq.w	8005ed4 <HAL_TIM_ConfigClockSource+0x176>
 8005dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dcc:	d87f      	bhi.n	8005ece <HAL_TIM_ConfigClockSource+0x170>
 8005dce:	2b70      	cmp	r3, #112	; 0x70
 8005dd0:	d01a      	beq.n	8005e08 <HAL_TIM_ConfigClockSource+0xaa>
 8005dd2:	2b70      	cmp	r3, #112	; 0x70
 8005dd4:	d87b      	bhi.n	8005ece <HAL_TIM_ConfigClockSource+0x170>
 8005dd6:	2b60      	cmp	r3, #96	; 0x60
 8005dd8:	d050      	beq.n	8005e7c <HAL_TIM_ConfigClockSource+0x11e>
 8005dda:	2b60      	cmp	r3, #96	; 0x60
 8005ddc:	d877      	bhi.n	8005ece <HAL_TIM_ConfigClockSource+0x170>
 8005dde:	2b50      	cmp	r3, #80	; 0x50
 8005de0:	d03c      	beq.n	8005e5c <HAL_TIM_ConfigClockSource+0xfe>
 8005de2:	2b50      	cmp	r3, #80	; 0x50
 8005de4:	d873      	bhi.n	8005ece <HAL_TIM_ConfigClockSource+0x170>
 8005de6:	2b40      	cmp	r3, #64	; 0x40
 8005de8:	d058      	beq.n	8005e9c <HAL_TIM_ConfigClockSource+0x13e>
 8005dea:	2b40      	cmp	r3, #64	; 0x40
 8005dec:	d86f      	bhi.n	8005ece <HAL_TIM_ConfigClockSource+0x170>
 8005dee:	2b30      	cmp	r3, #48	; 0x30
 8005df0:	d064      	beq.n	8005ebc <HAL_TIM_ConfigClockSource+0x15e>
 8005df2:	2b30      	cmp	r3, #48	; 0x30
 8005df4:	d86b      	bhi.n	8005ece <HAL_TIM_ConfigClockSource+0x170>
 8005df6:	2b20      	cmp	r3, #32
 8005df8:	d060      	beq.n	8005ebc <HAL_TIM_ConfigClockSource+0x15e>
 8005dfa:	2b20      	cmp	r3, #32
 8005dfc:	d867      	bhi.n	8005ece <HAL_TIM_ConfigClockSource+0x170>
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d05c      	beq.n	8005ebc <HAL_TIM_ConfigClockSource+0x15e>
 8005e02:	2b10      	cmp	r3, #16
 8005e04:	d05a      	beq.n	8005ebc <HAL_TIM_ConfigClockSource+0x15e>
 8005e06:	e062      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6818      	ldr	r0, [r3, #0]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	6899      	ldr	r1, [r3, #8]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f000 f970 	bl	80060fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e2a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	609a      	str	r2, [r3, #8]
      break;
 8005e34:	e04f      	b.n	8005ed6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6818      	ldr	r0, [r3, #0]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	6899      	ldr	r1, [r3, #8]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	f000 f959 	bl	80060fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e58:	609a      	str	r2, [r3, #8]
      break;
 8005e5a:	e03c      	b.n	8005ed6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6818      	ldr	r0, [r3, #0]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	6859      	ldr	r1, [r3, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	f000 f8cd 	bl	8006008 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2150      	movs	r1, #80	; 0x50
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 f926 	bl	80060c6 <TIM_ITRx_SetConfig>
      break;
 8005e7a:	e02c      	b.n	8005ed6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6818      	ldr	r0, [r3, #0]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	6859      	ldr	r1, [r3, #4]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	f000 f8ec 	bl	8006066 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2160      	movs	r1, #96	; 0x60
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 f916 	bl	80060c6 <TIM_ITRx_SetConfig>
      break;
 8005e9a:	e01c      	b.n	8005ed6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	6859      	ldr	r1, [r3, #4]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f000 f8ad 	bl	8006008 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2140      	movs	r1, #64	; 0x40
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 f906 	bl	80060c6 <TIM_ITRx_SetConfig>
      break;
 8005eba:	e00c      	b.n	8005ed6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	f000 f8fd 	bl	80060c6 <TIM_ITRx_SetConfig>
      break;
 8005ecc:	e003      	b.n	8005ed6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ed2:	e000      	b.n	8005ed6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005ed4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a2a      	ldr	r2, [pc, #168]	; (8005ffc <TIM_Base_SetConfig+0xbc>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d003      	beq.n	8005f60 <TIM_Base_SetConfig+0x20>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f5e:	d108      	bne.n	8005f72 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a21      	ldr	r2, [pc, #132]	; (8005ffc <TIM_Base_SetConfig+0xbc>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d00b      	beq.n	8005f92 <TIM_Base_SetConfig+0x52>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f80:	d007      	beq.n	8005f92 <TIM_Base_SetConfig+0x52>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a1e      	ldr	r2, [pc, #120]	; (8006000 <TIM_Base_SetConfig+0xc0>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d003      	beq.n	8005f92 <TIM_Base_SetConfig+0x52>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a1d      	ldr	r2, [pc, #116]	; (8006004 <TIM_Base_SetConfig+0xc4>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d108      	bne.n	8005fa4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a0c      	ldr	r2, [pc, #48]	; (8005ffc <TIM_Base_SetConfig+0xbc>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d007      	beq.n	8005fe0 <TIM_Base_SetConfig+0xa0>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a0b      	ldr	r2, [pc, #44]	; (8006000 <TIM_Base_SetConfig+0xc0>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d003      	beq.n	8005fe0 <TIM_Base_SetConfig+0xa0>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a0a      	ldr	r2, [pc, #40]	; (8006004 <TIM_Base_SetConfig+0xc4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d103      	bne.n	8005fe8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	691a      	ldr	r2, [r3, #16]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	615a      	str	r2, [r3, #20]
}
 8005fee:	bf00      	nop
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	40012c00 	.word	0x40012c00
 8006000:	40014000 	.word	0x40014000
 8006004:	40014400 	.word	0x40014400

08006008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	f023 0201 	bic.w	r2, r3, #1
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	4313      	orrs	r3, r2
 800603c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f023 030a 	bic.w	r3, r3, #10
 8006044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	621a      	str	r2, [r3, #32]
}
 800605a:	bf00      	nop
 800605c:	371c      	adds	r7, #28
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006066:	b480      	push	{r7}
 8006068:	b087      	sub	sp, #28
 800606a:	af00      	add	r7, sp, #0
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	f023 0210 	bic.w	r2, r3, #16
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006090:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	031b      	lsls	r3, r3, #12
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	4313      	orrs	r3, r2
 800609a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	011b      	lsls	r3, r3, #4
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	621a      	str	r2, [r3, #32]
}
 80060ba:	bf00      	nop
 80060bc:	371c      	adds	r7, #28
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b085      	sub	sp, #20
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	f043 0307 	orr.w	r3, r3, #7
 80060e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	609a      	str	r2, [r3, #8]
}
 80060f0:	bf00      	nop
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
 8006108:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006116:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	021a      	lsls	r2, r3, #8
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	431a      	orrs	r2, r3
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	4313      	orrs	r3, r2
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	4313      	orrs	r3, r2
 8006128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	609a      	str	r2, [r3, #8]
}
 8006130:	bf00      	nop
 8006132:	371c      	adds	r7, #28
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800614c:	2b01      	cmp	r3, #1
 800614e:	d101      	bne.n	8006154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006150:	2302      	movs	r3, #2
 8006152:	e04f      	b.n	80061f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a21      	ldr	r2, [pc, #132]	; (8006200 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d108      	bne.n	8006190 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006184:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	4313      	orrs	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006196:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	4313      	orrs	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a14      	ldr	r2, [pc, #80]	; (8006200 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d009      	beq.n	80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061bc:	d004      	beq.n	80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a10      	ldr	r2, [pc, #64]	; (8006204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d10c      	bne.n	80061e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	40012c00 	.word	0x40012c00
 8006204:	40014000 	.word	0x40014000

08006208 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e040      	b.n	80062d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800625a:	2b00      	cmp	r3, #0
 800625c:	d106      	bne.n	800626c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7fc fac8 	bl	80027fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2224      	movs	r2, #36	; 0x24
 8006270:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0201 	bic.w	r2, r2, #1
 8006280:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fbe8 	bl	8006a58 <UART_SetConfig>
 8006288:	4603      	mov	r3, r0
 800628a:	2b01      	cmp	r3, #1
 800628c:	d101      	bne.n	8006292 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e022      	b.n	80062d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fe08 	bl	8006eb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689a      	ldr	r2, [r3, #8]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0201 	orr.w	r2, r2, #1
 80062ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fe8f 	bl	8006ff4 <UART_CheckIdleState>
 80062d6:	4603      	mov	r3, r0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b08b      	sub	sp, #44	; 0x2c
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	4613      	mov	r3, r2
 80062ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062f2:	2b20      	cmp	r3, #32
 80062f4:	d156      	bne.n	80063a4 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <HAL_UART_Transmit_IT+0x22>
 80062fc:	88fb      	ldrh	r3, [r7, #6]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e04f      	b.n	80063a6 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800630c:	2b01      	cmp	r3, #1
 800630e:	d101      	bne.n	8006314 <HAL_UART_Transmit_IT+0x34>
 8006310:	2302      	movs	r3, #2
 8006312:	e048      	b.n	80063a6 <HAL_UART_Transmit_IT+0xc6>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	88fa      	ldrh	r2, [r7, #6]
 8006326:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	88fa      	ldrh	r2, [r7, #6]
 800632e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2221      	movs	r2, #33	; 0x21
 8006344:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800634e:	d107      	bne.n	8006360 <HAL_UART_Transmit_IT+0x80>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d103      	bne.n	8006360 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4a16      	ldr	r2, [pc, #88]	; (80063b4 <HAL_UART_Transmit_IT+0xd4>)
 800635c:	669a      	str	r2, [r3, #104]	; 0x68
 800635e:	e002      	b.n	8006366 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4a15      	ldr	r2, [pc, #84]	; (80063b8 <HAL_UART_Transmit_IT+0xd8>)
 8006364:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	e853 3f00 	ldrex	r3, [r3]
 800637a:	613b      	str	r3, [r7, #16]
   return(result);
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006382:	627b      	str	r3, [r7, #36]	; 0x24
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	623b      	str	r3, [r7, #32]
 800638e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	69f9      	ldr	r1, [r7, #28]
 8006392:	6a3a      	ldr	r2, [r7, #32]
 8006394:	e841 2300 	strex	r3, r2, [r1]
 8006398:	61bb      	str	r3, [r7, #24]
   return(result);
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e6      	bne.n	800636e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	e000      	b.n	80063a6 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80063a4:	2302      	movs	r3, #2
  }
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	372c      	adds	r7, #44	; 0x2c
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	0800754f 	.word	0x0800754f
 80063b8:	08007497 	.word	0x08007497

080063bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08a      	sub	sp, #40	; 0x28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	4613      	mov	r3, r2
 80063c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ce:	2b20      	cmp	r3, #32
 80063d0:	d142      	bne.n	8006458 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <HAL_UART_Receive_IT+0x22>
 80063d8:	88fb      	ldrh	r3, [r7, #6]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e03b      	b.n	800645a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_UART_Receive_IT+0x34>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e034      	b.n	800645a <HAL_UART_Receive_IT+0x9e>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a18      	ldr	r2, [pc, #96]	; (8006464 <HAL_UART_Receive_IT+0xa8>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d01f      	beq.n	8006448 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d018      	beq.n	8006448 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	e853 3f00 	ldrex	r3, [r3]
 8006422:	613b      	str	r3, [r7, #16]
   return(result);
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800642a:	627b      	str	r3, [r7, #36]	; 0x24
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	623b      	str	r3, [r7, #32]
 8006436:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006438:	69f9      	ldr	r1, [r7, #28]
 800643a:	6a3a      	ldr	r2, [r7, #32]
 800643c:	e841 2300 	strex	r3, r2, [r1]
 8006440:	61bb      	str	r3, [r7, #24]
   return(result);
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e6      	bne.n	8006416 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006448:	88fb      	ldrh	r3, [r7, #6]
 800644a:	461a      	mov	r2, r3
 800644c:	68b9      	ldr	r1, [r7, #8]
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 fede 	bl	8007210 <UART_Start_Receive_IT>
 8006454:	4603      	mov	r3, r0
 8006456:	e000      	b.n	800645a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006458:	2302      	movs	r3, #2
  }
}
 800645a:	4618      	mov	r0, r3
 800645c:	3728      	adds	r7, #40	; 0x28
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	40008000 	.word	0x40008000

08006468 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b0ba      	sub	sp, #232	; 0xe8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800648e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006492:	f640 030f 	movw	r3, #2063	; 0x80f
 8006496:	4013      	ands	r3, r2
 8006498:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800649c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d115      	bne.n	80064d0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80064a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a8:	f003 0320 	and.w	r3, r3, #32
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00f      	beq.n	80064d0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064b4:	f003 0320 	and.w	r3, r3, #32
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d009      	beq.n	80064d0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 82a6 	beq.w	8006a12 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	4798      	blx	r3
      }
      return;
 80064ce:	e2a0      	b.n	8006a12 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80064d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 8117 	beq.w	8006708 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80064da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d106      	bne.n	80064f4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80064e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80064ea:	4b85      	ldr	r3, [pc, #532]	; (8006700 <HAL_UART_IRQHandler+0x298>)
 80064ec:	4013      	ands	r3, r2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 810a 	beq.w	8006708 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d011      	beq.n	8006524 <HAL_UART_IRQHandler+0xbc>
 8006500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00b      	beq.n	8006524 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2201      	movs	r2, #1
 8006512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800651a:	f043 0201 	orr.w	r2, r3, #1
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d011      	beq.n	8006554 <HAL_UART_IRQHandler+0xec>
 8006530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00b      	beq.n	8006554 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2202      	movs	r2, #2
 8006542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800654a:	f043 0204 	orr.w	r2, r3, #4
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b00      	cmp	r3, #0
 800655e:	d011      	beq.n	8006584 <HAL_UART_IRQHandler+0x11c>
 8006560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00b      	beq.n	8006584 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2204      	movs	r2, #4
 8006572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800657a:	f043 0202 	orr.w	r2, r3, #2
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006588:	f003 0308 	and.w	r3, r3, #8
 800658c:	2b00      	cmp	r3, #0
 800658e:	d017      	beq.n	80065c0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006594:	f003 0320 	and.w	r3, r3, #32
 8006598:	2b00      	cmp	r3, #0
 800659a:	d105      	bne.n	80065a8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800659c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00b      	beq.n	80065c0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2208      	movs	r2, #8
 80065ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065b6:	f043 0208 	orr.w	r2, r3, #8
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d012      	beq.n	80065f2 <HAL_UART_IRQHandler+0x18a>
 80065cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00c      	beq.n	80065f2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065e8:	f043 0220 	orr.w	r2, r3, #32
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 820c 	beq.w	8006a16 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80065fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00d      	beq.n	8006626 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800660a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b00      	cmp	r3, #0
 8006614:	d007      	beq.n	8006626 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800662c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663a:	2b40      	cmp	r3, #64	; 0x40
 800663c:	d005      	beq.n	800664a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800663e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006642:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006646:	2b00      	cmp	r3, #0
 8006648:	d04f      	beq.n	80066ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 feaa 	bl	80073a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665a:	2b40      	cmp	r3, #64	; 0x40
 800665c:	d141      	bne.n	80066e2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3308      	adds	r3, #8
 8006664:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006668:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006674:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800667c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3308      	adds	r3, #8
 8006686:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800668a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800668e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006696:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800669a:	e841 2300 	strex	r3, r2, [r1]
 800669e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1d9      	bne.n	800665e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d013      	beq.n	80066da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b6:	4a13      	ldr	r2, [pc, #76]	; (8006704 <HAL_UART_IRQHandler+0x29c>)
 80066b8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fc fc37 	bl	8002f32 <HAL_DMA_Abort_IT>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d017      	beq.n	80066fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80066d4:	4610      	mov	r0, r2
 80066d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d8:	e00f      	b.n	80066fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f9a6 	bl	8006a2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e0:	e00b      	b.n	80066fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f9a2 	bl	8006a2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e8:	e007      	b.n	80066fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f99e 	bl	8006a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80066f8:	e18d      	b.n	8006a16 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066fa:	bf00      	nop
    return;
 80066fc:	e18b      	b.n	8006a16 <HAL_UART_IRQHandler+0x5ae>
 80066fe:	bf00      	nop
 8006700:	04000120 	.word	0x04000120
 8006704:	0800746b 	.word	0x0800746b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800670c:	2b01      	cmp	r3, #1
 800670e:	f040 8146 	bne.w	800699e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006716:	f003 0310 	and.w	r3, r3, #16
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 813f 	beq.w	800699e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006724:	f003 0310 	and.w	r3, r3, #16
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 8138 	beq.w	800699e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2210      	movs	r2, #16
 8006734:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006740:	2b40      	cmp	r3, #64	; 0x40
 8006742:	f040 80b4 	bne.w	80068ae <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006752:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 815f 	beq.w	8006a1a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006766:	429a      	cmp	r2, r3
 8006768:	f080 8157 	bcs.w	8006a1a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006772:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0320 	and.w	r3, r3, #32
 8006782:	2b00      	cmp	r3, #0
 8006784:	f040 8085 	bne.w	8006892 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006790:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006794:	e853 3f00 	ldrex	r3, [r3]
 8006798:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800679c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	461a      	mov	r2, r3
 80067ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1da      	bne.n	8006788 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3308      	adds	r3, #8
 80067d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067dc:	e853 3f00 	ldrex	r3, [r3]
 80067e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067e4:	f023 0301 	bic.w	r3, r3, #1
 80067e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3308      	adds	r3, #8
 80067f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006802:	e841 2300 	strex	r3, r2, [r1]
 8006806:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1e1      	bne.n	80067d2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3308      	adds	r3, #8
 8006814:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800681e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006824:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3308      	adds	r3, #8
 800682e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006832:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006834:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006838:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e3      	bne.n	800680e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2220      	movs	r2, #32
 800684a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800685a:	e853 3f00 	ldrex	r3, [r3]
 800685e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006862:	f023 0310 	bic.w	r3, r3, #16
 8006866:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	461a      	mov	r2, r3
 8006870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006874:	65bb      	str	r3, [r7, #88]	; 0x58
 8006876:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006878:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800687a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800687c:	e841 2300 	strex	r3, r2, [r1]
 8006880:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1e4      	bne.n	8006852 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688c:	4618      	mov	r0, r3
 800688e:	f7fc fb12 	bl	8002eb6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800689e:	b29b      	uxth	r3, r3
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f8ca 	bl	8006a40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068ac:	e0b5      	b.n	8006a1a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 80a7 	beq.w	8006a1e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80068d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 80a2 	beq.w	8006a1e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e2:	e853 3f00 	ldrex	r3, [r3]
 80068e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068fc:	647b      	str	r3, [r7, #68]	; 0x44
 80068fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006900:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006902:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006904:	e841 2300 	strex	r3, r2, [r1]
 8006908:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800690a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1e4      	bne.n	80068da <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3308      	adds	r3, #8
 8006916:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691a:	e853 3f00 	ldrex	r3, [r3]
 800691e:	623b      	str	r3, [r7, #32]
   return(result);
 8006920:	6a3b      	ldr	r3, [r7, #32]
 8006922:	f023 0301 	bic.w	r3, r3, #1
 8006926:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3308      	adds	r3, #8
 8006930:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006934:	633a      	str	r2, [r7, #48]	; 0x30
 8006936:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800693a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e3      	bne.n	8006910 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2220      	movs	r2, #32
 800694c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	e853 3f00 	ldrex	r3, [r3]
 8006966:	60fb      	str	r3, [r7, #12]
   return(result);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 0310 	bic.w	r3, r3, #16
 800696e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800697c:	61fb      	str	r3, [r7, #28]
 800697e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006980:	69b9      	ldr	r1, [r7, #24]
 8006982:	69fa      	ldr	r2, [r7, #28]
 8006984:	e841 2300 	strex	r3, r2, [r1]
 8006988:	617b      	str	r3, [r7, #20]
   return(result);
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e4      	bne.n	800695a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006990:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f852 	bl	8006a40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800699c:	e03f      	b.n	8006a1e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800699e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00e      	beq.n	80069c8 <HAL_UART_IRQHandler+0x560>
 80069aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d008      	beq.n	80069c8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80069be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 ffae 	bl	8007922 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069c6:	e02d      	b.n	8006a24 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80069c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00e      	beq.n	80069f2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80069d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d008      	beq.n	80069f2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d01c      	beq.n	8006a22 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	4798      	blx	r3
    }
    return;
 80069f0:	e017      	b.n	8006a22 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d012      	beq.n	8006a24 <HAL_UART_IRQHandler+0x5bc>
 80069fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00c      	beq.n	8006a24 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fdff 	bl	800760e <UART_EndTransmit_IT>
    return;
 8006a10:	e008      	b.n	8006a24 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006a12:	bf00      	nop
 8006a14:	e006      	b.n	8006a24 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006a16:	bf00      	nop
 8006a18:	e004      	b.n	8006a24 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006a1a:	bf00      	nop
 8006a1c:	e002      	b.n	8006a24 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006a1e:	bf00      	nop
 8006a20:	e000      	b.n	8006a24 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006a22:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006a24:	37e8      	adds	r7, #232	; 0xe8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop

08006a2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a5c:	b08a      	sub	sp, #40	; 0x28
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	689a      	ldr	r2, [r3, #8]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	431a      	orrs	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	431a      	orrs	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	4bb4      	ldr	r3, [pc, #720]	; (8006d58 <UART_SetConfig+0x300>)
 8006a88:	4013      	ands	r3, r2
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	6812      	ldr	r2, [r2, #0]
 8006a8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a90:	430b      	orrs	r3, r1
 8006a92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4aa9      	ldr	r2, [pc, #676]	; (8006d5c <UART_SetConfig+0x304>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d004      	beq.n	8006ac4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4aa0      	ldr	r2, [pc, #640]	; (8006d60 <UART_SetConfig+0x308>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d126      	bne.n	8006b30 <UART_SetConfig+0xd8>
 8006ae2:	4ba0      	ldr	r3, [pc, #640]	; (8006d64 <UART_SetConfig+0x30c>)
 8006ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae8:	f003 0303 	and.w	r3, r3, #3
 8006aec:	2b03      	cmp	r3, #3
 8006aee:	d81b      	bhi.n	8006b28 <UART_SetConfig+0xd0>
 8006af0:	a201      	add	r2, pc, #4	; (adr r2, 8006af8 <UART_SetConfig+0xa0>)
 8006af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af6:	bf00      	nop
 8006af8:	08006b09 	.word	0x08006b09
 8006afc:	08006b19 	.word	0x08006b19
 8006b00:	08006b11 	.word	0x08006b11
 8006b04:	08006b21 	.word	0x08006b21
 8006b08:	2301      	movs	r3, #1
 8006b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b0e:	e080      	b.n	8006c12 <UART_SetConfig+0x1ba>
 8006b10:	2302      	movs	r3, #2
 8006b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b16:	e07c      	b.n	8006c12 <UART_SetConfig+0x1ba>
 8006b18:	2304      	movs	r3, #4
 8006b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b1e:	e078      	b.n	8006c12 <UART_SetConfig+0x1ba>
 8006b20:	2308      	movs	r3, #8
 8006b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b26:	e074      	b.n	8006c12 <UART_SetConfig+0x1ba>
 8006b28:	2310      	movs	r3, #16
 8006b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b2e:	e070      	b.n	8006c12 <UART_SetConfig+0x1ba>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a8c      	ldr	r2, [pc, #560]	; (8006d68 <UART_SetConfig+0x310>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d138      	bne.n	8006bac <UART_SetConfig+0x154>
 8006b3a:	4b8a      	ldr	r3, [pc, #552]	; (8006d64 <UART_SetConfig+0x30c>)
 8006b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b40:	f003 030c 	and.w	r3, r3, #12
 8006b44:	2b0c      	cmp	r3, #12
 8006b46:	d82d      	bhi.n	8006ba4 <UART_SetConfig+0x14c>
 8006b48:	a201      	add	r2, pc, #4	; (adr r2, 8006b50 <UART_SetConfig+0xf8>)
 8006b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4e:	bf00      	nop
 8006b50:	08006b85 	.word	0x08006b85
 8006b54:	08006ba5 	.word	0x08006ba5
 8006b58:	08006ba5 	.word	0x08006ba5
 8006b5c:	08006ba5 	.word	0x08006ba5
 8006b60:	08006b95 	.word	0x08006b95
 8006b64:	08006ba5 	.word	0x08006ba5
 8006b68:	08006ba5 	.word	0x08006ba5
 8006b6c:	08006ba5 	.word	0x08006ba5
 8006b70:	08006b8d 	.word	0x08006b8d
 8006b74:	08006ba5 	.word	0x08006ba5
 8006b78:	08006ba5 	.word	0x08006ba5
 8006b7c:	08006ba5 	.word	0x08006ba5
 8006b80:	08006b9d 	.word	0x08006b9d
 8006b84:	2300      	movs	r3, #0
 8006b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b8a:	e042      	b.n	8006c12 <UART_SetConfig+0x1ba>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b92:	e03e      	b.n	8006c12 <UART_SetConfig+0x1ba>
 8006b94:	2304      	movs	r3, #4
 8006b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b9a:	e03a      	b.n	8006c12 <UART_SetConfig+0x1ba>
 8006b9c:	2308      	movs	r3, #8
 8006b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ba2:	e036      	b.n	8006c12 <UART_SetConfig+0x1ba>
 8006ba4:	2310      	movs	r3, #16
 8006ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006baa:	e032      	b.n	8006c12 <UART_SetConfig+0x1ba>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a6a      	ldr	r2, [pc, #424]	; (8006d5c <UART_SetConfig+0x304>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d12a      	bne.n	8006c0c <UART_SetConfig+0x1b4>
 8006bb6:	4b6b      	ldr	r3, [pc, #428]	; (8006d64 <UART_SetConfig+0x30c>)
 8006bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bc4:	d01a      	beq.n	8006bfc <UART_SetConfig+0x1a4>
 8006bc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bca:	d81b      	bhi.n	8006c04 <UART_SetConfig+0x1ac>
 8006bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd0:	d00c      	beq.n	8006bec <UART_SetConfig+0x194>
 8006bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd6:	d815      	bhi.n	8006c04 <UART_SetConfig+0x1ac>
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d003      	beq.n	8006be4 <UART_SetConfig+0x18c>
 8006bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006be0:	d008      	beq.n	8006bf4 <UART_SetConfig+0x19c>
 8006be2:	e00f      	b.n	8006c04 <UART_SetConfig+0x1ac>
 8006be4:	2300      	movs	r3, #0
 8006be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bea:	e012      	b.n	8006c12 <UART_SetConfig+0x1ba>
 8006bec:	2302      	movs	r3, #2
 8006bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bf2:	e00e      	b.n	8006c12 <UART_SetConfig+0x1ba>
 8006bf4:	2304      	movs	r3, #4
 8006bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bfa:	e00a      	b.n	8006c12 <UART_SetConfig+0x1ba>
 8006bfc:	2308      	movs	r3, #8
 8006bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c02:	e006      	b.n	8006c12 <UART_SetConfig+0x1ba>
 8006c04:	2310      	movs	r3, #16
 8006c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c0a:	e002      	b.n	8006c12 <UART_SetConfig+0x1ba>
 8006c0c:	2310      	movs	r3, #16
 8006c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a51      	ldr	r2, [pc, #324]	; (8006d5c <UART_SetConfig+0x304>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d17a      	bne.n	8006d12 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d824      	bhi.n	8006c6e <UART_SetConfig+0x216>
 8006c24:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <UART_SetConfig+0x1d4>)
 8006c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2a:	bf00      	nop
 8006c2c:	08006c51 	.word	0x08006c51
 8006c30:	08006c6f 	.word	0x08006c6f
 8006c34:	08006c59 	.word	0x08006c59
 8006c38:	08006c6f 	.word	0x08006c6f
 8006c3c:	08006c5f 	.word	0x08006c5f
 8006c40:	08006c6f 	.word	0x08006c6f
 8006c44:	08006c6f 	.word	0x08006c6f
 8006c48:	08006c6f 	.word	0x08006c6f
 8006c4c:	08006c67 	.word	0x08006c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c50:	f7fd f96c 	bl	8003f2c <HAL_RCC_GetPCLK1Freq>
 8006c54:	61f8      	str	r0, [r7, #28]
        break;
 8006c56:	e010      	b.n	8006c7a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c58:	4b44      	ldr	r3, [pc, #272]	; (8006d6c <UART_SetConfig+0x314>)
 8006c5a:	61fb      	str	r3, [r7, #28]
        break;
 8006c5c:	e00d      	b.n	8006c7a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c5e:	f7fd f8cd 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8006c62:	61f8      	str	r0, [r7, #28]
        break;
 8006c64:	e009      	b.n	8006c7a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c6a:	61fb      	str	r3, [r7, #28]
        break;
 8006c6c:	e005      	b.n	8006c7a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 8107 	beq.w	8006e90 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	4613      	mov	r3, r2
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	4413      	add	r3, r2
 8006c8c:	69fa      	ldr	r2, [r7, #28]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d305      	bcc.n	8006c9e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c98:	69fa      	ldr	r2, [r7, #28]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d903      	bls.n	8006ca6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ca4:	e0f4      	b.n	8006e90 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	461c      	mov	r4, r3
 8006cac:	4615      	mov	r5, r2
 8006cae:	f04f 0200 	mov.w	r2, #0
 8006cb2:	f04f 0300 	mov.w	r3, #0
 8006cb6:	022b      	lsls	r3, r5, #8
 8006cb8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006cbc:	0222      	lsls	r2, r4, #8
 8006cbe:	68f9      	ldr	r1, [r7, #12]
 8006cc0:	6849      	ldr	r1, [r1, #4]
 8006cc2:	0849      	lsrs	r1, r1, #1
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	4688      	mov	r8, r1
 8006cc8:	4681      	mov	r9, r0
 8006cca:	eb12 0a08 	adds.w	sl, r2, r8
 8006cce:	eb43 0b09 	adc.w	fp, r3, r9
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	603b      	str	r3, [r7, #0]
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ce0:	4650      	mov	r0, sl
 8006ce2:	4659      	mov	r1, fp
 8006ce4:	f7f9 feba 	bl	8000a5c <__aeabi_uldivmod>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	460b      	mov	r3, r1
 8006cec:	4613      	mov	r3, r2
 8006cee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cf6:	d308      	bcc.n	8006d0a <UART_SetConfig+0x2b2>
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cfe:	d204      	bcs.n	8006d0a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	60da      	str	r2, [r3, #12]
 8006d08:	e0c2      	b.n	8006e90 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d10:	e0be      	b.n	8006e90 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d1a:	d16a      	bne.n	8006df2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006d1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d20:	2b08      	cmp	r3, #8
 8006d22:	d834      	bhi.n	8006d8e <UART_SetConfig+0x336>
 8006d24:	a201      	add	r2, pc, #4	; (adr r2, 8006d2c <UART_SetConfig+0x2d4>)
 8006d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2a:	bf00      	nop
 8006d2c:	08006d51 	.word	0x08006d51
 8006d30:	08006d71 	.word	0x08006d71
 8006d34:	08006d79 	.word	0x08006d79
 8006d38:	08006d8f 	.word	0x08006d8f
 8006d3c:	08006d7f 	.word	0x08006d7f
 8006d40:	08006d8f 	.word	0x08006d8f
 8006d44:	08006d8f 	.word	0x08006d8f
 8006d48:	08006d8f 	.word	0x08006d8f
 8006d4c:	08006d87 	.word	0x08006d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d50:	f7fd f8ec 	bl	8003f2c <HAL_RCC_GetPCLK1Freq>
 8006d54:	61f8      	str	r0, [r7, #28]
        break;
 8006d56:	e020      	b.n	8006d9a <UART_SetConfig+0x342>
 8006d58:	efff69f3 	.word	0xefff69f3
 8006d5c:	40008000 	.word	0x40008000
 8006d60:	40013800 	.word	0x40013800
 8006d64:	40021000 	.word	0x40021000
 8006d68:	40004400 	.word	0x40004400
 8006d6c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d70:	f7fd f8f2 	bl	8003f58 <HAL_RCC_GetPCLK2Freq>
 8006d74:	61f8      	str	r0, [r7, #28]
        break;
 8006d76:	e010      	b.n	8006d9a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d78:	4b4c      	ldr	r3, [pc, #304]	; (8006eac <UART_SetConfig+0x454>)
 8006d7a:	61fb      	str	r3, [r7, #28]
        break;
 8006d7c:	e00d      	b.n	8006d9a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d7e:	f7fd f83d 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8006d82:	61f8      	str	r0, [r7, #28]
        break;
 8006d84:	e009      	b.n	8006d9a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d8a:	61fb      	str	r3, [r7, #28]
        break;
 8006d8c:	e005      	b.n	8006d9a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d077      	beq.n	8006e90 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	005a      	lsls	r2, r3, #1
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	085b      	lsrs	r3, r3, #1
 8006daa:	441a      	add	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	2b0f      	cmp	r3, #15
 8006dba:	d916      	bls.n	8006dea <UART_SetConfig+0x392>
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc2:	d212      	bcs.n	8006dea <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	f023 030f 	bic.w	r3, r3, #15
 8006dcc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	085b      	lsrs	r3, r3, #1
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	8afb      	ldrh	r3, [r7, #22]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	8afa      	ldrh	r2, [r7, #22]
 8006de6:	60da      	str	r2, [r3, #12]
 8006de8:	e052      	b.n	8006e90 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006df0:	e04e      	b.n	8006e90 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006df2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006df6:	2b08      	cmp	r3, #8
 8006df8:	d827      	bhi.n	8006e4a <UART_SetConfig+0x3f2>
 8006dfa:	a201      	add	r2, pc, #4	; (adr r2, 8006e00 <UART_SetConfig+0x3a8>)
 8006dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e00:	08006e25 	.word	0x08006e25
 8006e04:	08006e2d 	.word	0x08006e2d
 8006e08:	08006e35 	.word	0x08006e35
 8006e0c:	08006e4b 	.word	0x08006e4b
 8006e10:	08006e3b 	.word	0x08006e3b
 8006e14:	08006e4b 	.word	0x08006e4b
 8006e18:	08006e4b 	.word	0x08006e4b
 8006e1c:	08006e4b 	.word	0x08006e4b
 8006e20:	08006e43 	.word	0x08006e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e24:	f7fd f882 	bl	8003f2c <HAL_RCC_GetPCLK1Freq>
 8006e28:	61f8      	str	r0, [r7, #28]
        break;
 8006e2a:	e014      	b.n	8006e56 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e2c:	f7fd f894 	bl	8003f58 <HAL_RCC_GetPCLK2Freq>
 8006e30:	61f8      	str	r0, [r7, #28]
        break;
 8006e32:	e010      	b.n	8006e56 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e34:	4b1d      	ldr	r3, [pc, #116]	; (8006eac <UART_SetConfig+0x454>)
 8006e36:	61fb      	str	r3, [r7, #28]
        break;
 8006e38:	e00d      	b.n	8006e56 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e3a:	f7fc ffdf 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8006e3e:	61f8      	str	r0, [r7, #28]
        break;
 8006e40:	e009      	b.n	8006e56 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e46:	61fb      	str	r3, [r7, #28]
        break;
 8006e48:	e005      	b.n	8006e56 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e54:	bf00      	nop
    }

    if (pclk != 0U)
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d019      	beq.n	8006e90 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	085a      	lsrs	r2, r3, #1
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	441a      	add	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	2b0f      	cmp	r3, #15
 8006e74:	d909      	bls.n	8006e8a <UART_SetConfig+0x432>
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e7c:	d205      	bcs.n	8006e8a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	60da      	str	r2, [r3, #12]
 8006e88:	e002      	b.n	8006e90 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006e9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3728      	adds	r7, #40	; 0x28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eaa:	bf00      	nop
 8006eac:	00f42400 	.word	0x00f42400

08006eb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00a      	beq.n	8006eda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00a      	beq.n	8006efc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00a      	beq.n	8006f1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f22:	f003 0308 	and.w	r3, r3, #8
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f44:	f003 0310 	and.w	r3, r3, #16
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00a      	beq.n	8006f62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	f003 0320 	and.w	r3, r3, #32
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d01a      	beq.n	8006fc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fae:	d10a      	bne.n	8006fc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00a      	beq.n	8006fe8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	605a      	str	r2, [r3, #4]
  }
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af02      	add	r7, sp, #8
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007004:	f7fb fe16 	bl	8002c34 <HAL_GetTick>
 8007008:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	2b08      	cmp	r3, #8
 8007016:	d10e      	bne.n	8007036 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007018:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f82d 	bl	8007086 <UART_WaitOnFlagUntilTimeout>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e023      	b.n	800707e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0304 	and.w	r3, r3, #4
 8007040:	2b04      	cmp	r3, #4
 8007042:	d10e      	bne.n	8007062 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007044:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f817 	bl	8007086 <UART_WaitOnFlagUntilTimeout>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e00d      	b.n	800707e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2220      	movs	r2, #32
 8007066:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2220      	movs	r2, #32
 800706c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b09c      	sub	sp, #112	; 0x70
 800708a:	af00      	add	r7, sp, #0
 800708c:	60f8      	str	r0, [r7, #12]
 800708e:	60b9      	str	r1, [r7, #8]
 8007090:	603b      	str	r3, [r7, #0]
 8007092:	4613      	mov	r3, r2
 8007094:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007096:	e0a5      	b.n	80071e4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800709a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800709e:	f000 80a1 	beq.w	80071e4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070a2:	f7fb fdc7 	bl	8002c34 <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d302      	bcc.n	80070b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80070b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d13e      	bne.n	8007136 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070c0:	e853 3f00 	ldrex	r3, [r3]
 80070c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80070c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070cc:	667b      	str	r3, [r7, #100]	; 0x64
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070de:	e841 2300 	strex	r3, r2, [r1]
 80070e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80070e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1e6      	bne.n	80070b8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3308      	adds	r3, #8
 80070f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070f4:	e853 3f00 	ldrex	r3, [r3]
 80070f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fc:	f023 0301 	bic.w	r3, r3, #1
 8007100:	663b      	str	r3, [r7, #96]	; 0x60
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3308      	adds	r3, #8
 8007108:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800710a:	64ba      	str	r2, [r7, #72]	; 0x48
 800710c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007110:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007112:	e841 2300 	strex	r3, r2, [r1]
 8007116:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1e5      	bne.n	80070ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2220      	movs	r2, #32
 8007122:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2220      	movs	r2, #32
 8007128:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e067      	b.n	8007206 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0304 	and.w	r3, r3, #4
 8007140:	2b00      	cmp	r3, #0
 8007142:	d04f      	beq.n	80071e4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800714e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007152:	d147      	bne.n	80071e4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800715c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007166:	e853 3f00 	ldrex	r3, [r3]
 800716a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007172:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	461a      	mov	r2, r3
 800717a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800717c:	637b      	str	r3, [r7, #52]	; 0x34
 800717e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007180:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007184:	e841 2300 	strex	r3, r2, [r1]
 8007188:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1e6      	bne.n	800715e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	3308      	adds	r3, #8
 8007196:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	e853 3f00 	ldrex	r3, [r3]
 800719e:	613b      	str	r3, [r7, #16]
   return(result);
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f023 0301 	bic.w	r3, r3, #1
 80071a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3308      	adds	r3, #8
 80071ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80071b0:	623a      	str	r2, [r7, #32]
 80071b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b4:	69f9      	ldr	r1, [r7, #28]
 80071b6:	6a3a      	ldr	r2, [r7, #32]
 80071b8:	e841 2300 	strex	r3, r2, [r1]
 80071bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1e5      	bne.n	8007190 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2220      	movs	r2, #32
 80071c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2220      	movs	r2, #32
 80071ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2220      	movs	r2, #32
 80071d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e010      	b.n	8007206 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	69da      	ldr	r2, [r3, #28]
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	4013      	ands	r3, r2
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	bf0c      	ite	eq
 80071f4:	2301      	moveq	r3, #1
 80071f6:	2300      	movne	r3, #0
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	461a      	mov	r2, r3
 80071fc:	79fb      	ldrb	r3, [r7, #7]
 80071fe:	429a      	cmp	r2, r3
 8007200:	f43f af4a 	beq.w	8007098 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3770      	adds	r7, #112	; 0x70
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007210:	b480      	push	{r7}
 8007212:	b097      	sub	sp, #92	; 0x5c
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	4613      	mov	r3, r2
 800721c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	88fa      	ldrh	r2, [r7, #6]
 8007228:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	88fa      	ldrh	r2, [r7, #6]
 8007230:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007242:	d10e      	bne.n	8007262 <UART_Start_Receive_IT+0x52>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d105      	bne.n	8007258 <UART_Start_Receive_IT+0x48>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007252:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007256:	e02d      	b.n	80072b4 <UART_Start_Receive_IT+0xa4>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	22ff      	movs	r2, #255	; 0xff
 800725c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007260:	e028      	b.n	80072b4 <UART_Start_Receive_IT+0xa4>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10d      	bne.n	8007286 <UART_Start_Receive_IT+0x76>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d104      	bne.n	800727c <UART_Start_Receive_IT+0x6c>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	22ff      	movs	r2, #255	; 0xff
 8007276:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800727a:	e01b      	b.n	80072b4 <UART_Start_Receive_IT+0xa4>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	227f      	movs	r2, #127	; 0x7f
 8007280:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007284:	e016      	b.n	80072b4 <UART_Start_Receive_IT+0xa4>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800728e:	d10d      	bne.n	80072ac <UART_Start_Receive_IT+0x9c>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d104      	bne.n	80072a2 <UART_Start_Receive_IT+0x92>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	227f      	movs	r2, #127	; 0x7f
 800729c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072a0:	e008      	b.n	80072b4 <UART_Start_Receive_IT+0xa4>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	223f      	movs	r2, #63	; 0x3f
 80072a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072aa:	e003      	b.n	80072b4 <UART_Start_Receive_IT+0xa4>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2222      	movs	r2, #34	; 0x22
 80072c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3308      	adds	r3, #8
 80072c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d4:	f043 0301 	orr.w	r3, r3, #1
 80072d8:	657b      	str	r3, [r7, #84]	; 0x54
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3308      	adds	r3, #8
 80072e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80072e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80072e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072ea:	e841 2300 	strex	r3, r2, [r1]
 80072ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1e5      	bne.n	80072c2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fe:	d107      	bne.n	8007310 <UART_Start_Receive_IT+0x100>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d103      	bne.n	8007310 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4a24      	ldr	r2, [pc, #144]	; (800739c <UART_Start_Receive_IT+0x18c>)
 800730c:	665a      	str	r2, [r3, #100]	; 0x64
 800730e:	e002      	b.n	8007316 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	4a23      	ldr	r2, [pc, #140]	; (80073a0 <UART_Start_Receive_IT+0x190>)
 8007314:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d019      	beq.n	800735a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732e:	e853 3f00 	ldrex	r3, [r3]
 8007332:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800733a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	461a      	mov	r2, r3
 8007342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007344:	637b      	str	r3, [r7, #52]	; 0x34
 8007346:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007348:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800734a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800734c:	e841 2300 	strex	r3, r2, [r1]
 8007350:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e6      	bne.n	8007326 <UART_Start_Receive_IT+0x116>
 8007358:	e018      	b.n	800738c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	e853 3f00 	ldrex	r3, [r3]
 8007366:	613b      	str	r3, [r7, #16]
   return(result);
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	f043 0320 	orr.w	r3, r3, #32
 800736e:	653b      	str	r3, [r7, #80]	; 0x50
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	461a      	mov	r2, r3
 8007376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007378:	623b      	str	r3, [r7, #32]
 800737a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737c:	69f9      	ldr	r1, [r7, #28]
 800737e:	6a3a      	ldr	r2, [r7, #32]
 8007380:	e841 2300 	strex	r3, r2, [r1]
 8007384:	61bb      	str	r3, [r7, #24]
   return(result);
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1e6      	bne.n	800735a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	375c      	adds	r7, #92	; 0x5c
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	080077c3 	.word	0x080077c3
 80073a0:	08007663 	.word	0x08007663

080073a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b095      	sub	sp, #84	; 0x54
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b4:	e853 3f00 	ldrex	r3, [r3]
 80073b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ca:	643b      	str	r3, [r7, #64]	; 0x40
 80073cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073d2:	e841 2300 	strex	r3, r2, [r1]
 80073d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1e6      	bne.n	80073ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	3308      	adds	r3, #8
 80073e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	e853 3f00 	ldrex	r3, [r3]
 80073ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	f023 0301 	bic.w	r3, r3, #1
 80073f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3308      	adds	r3, #8
 80073fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007400:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e5      	bne.n	80073de <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007416:	2b01      	cmp	r3, #1
 8007418:	d118      	bne.n	800744c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	e853 3f00 	ldrex	r3, [r3]
 8007426:	60bb      	str	r3, [r7, #8]
   return(result);
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f023 0310 	bic.w	r3, r3, #16
 800742e:	647b      	str	r3, [r7, #68]	; 0x44
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	461a      	mov	r2, r3
 8007436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	6979      	ldr	r1, [r7, #20]
 800743e:	69ba      	ldr	r2, [r7, #24]
 8007440:	e841 2300 	strex	r3, r2, [r1]
 8007444:	613b      	str	r3, [r7, #16]
   return(result);
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e6      	bne.n	800741a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800745e:	bf00      	nop
 8007460:	3754      	adds	r7, #84	; 0x54
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b084      	sub	sp, #16
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007476:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f7ff facf 	bl	8006a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800748e:	bf00      	nop
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007496:	b480      	push	{r7}
 8007498:	b08f      	sub	sp, #60	; 0x3c
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074a2:	2b21      	cmp	r3, #33	; 0x21
 80074a4:	d14d      	bne.n	8007542 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d132      	bne.n	8007518 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b8:	6a3b      	ldr	r3, [r7, #32]
 80074ba:	e853 3f00 	ldrex	r3, [r3]
 80074be:	61fb      	str	r3, [r7, #28]
   return(result);
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074c6:	637b      	str	r3, [r7, #52]	; 0x34
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	461a      	mov	r2, r3
 80074ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074d2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074d8:	e841 2300 	strex	r3, r2, [r1]
 80074dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1e6      	bne.n	80074b2 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	e853 3f00 	ldrex	r3, [r3]
 80074f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074f8:	633b      	str	r3, [r7, #48]	; 0x30
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007502:	61bb      	str	r3, [r7, #24]
 8007504:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6979      	ldr	r1, [r7, #20]
 8007508:	69ba      	ldr	r2, [r7, #24]
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	613b      	str	r3, [r7, #16]
   return(result);
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e6      	bne.n	80074e4 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007516:	e014      	b.n	8007542 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800751c:	781a      	ldrb	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	b292      	uxth	r2, r2
 8007524:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007536:	b29b      	uxth	r3, r3
 8007538:	3b01      	subs	r3, #1
 800753a:	b29a      	uxth	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007542:	bf00      	nop
 8007544:	373c      	adds	r7, #60	; 0x3c
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800754e:	b480      	push	{r7}
 8007550:	b091      	sub	sp, #68	; 0x44
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800755a:	2b21      	cmp	r3, #33	; 0x21
 800755c:	d151      	bne.n	8007602 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007564:	b29b      	uxth	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d132      	bne.n	80075d0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	e853 3f00 	ldrex	r3, [r3]
 8007576:	623b      	str	r3, [r7, #32]
   return(result);
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800757e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	461a      	mov	r2, r3
 8007586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007588:	633b      	str	r3, [r7, #48]	; 0x30
 800758a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800758e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007590:	e841 2300 	strex	r3, r2, [r1]
 8007594:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1e6      	bne.n	800756a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	e853 3f00 	ldrex	r3, [r3]
 80075a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075b0:	637b      	str	r3, [r7, #52]	; 0x34
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	461a      	mov	r2, r3
 80075b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ba:	61fb      	str	r3, [r7, #28]
 80075bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075be:	69b9      	ldr	r1, [r7, #24]
 80075c0:	69fa      	ldr	r2, [r7, #28]
 80075c2:	e841 2300 	strex	r3, r2, [r1]
 80075c6:	617b      	str	r3, [r7, #20]
   return(result);
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1e6      	bne.n	800759c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80075ce:	e018      	b.n	8007602 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075d4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80075d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d8:	881a      	ldrh	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075e2:	b292      	uxth	r2, r2
 80075e4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ea:	1c9a      	adds	r2, r3, #2
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	3b01      	subs	r3, #1
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007602:	bf00      	nop
 8007604:	3744      	adds	r7, #68	; 0x44
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b088      	sub	sp, #32
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	e853 3f00 	ldrex	r3, [r3]
 8007622:	60bb      	str	r3, [r7, #8]
   return(result);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800762a:	61fb      	str	r3, [r7, #28]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	461a      	mov	r2, r3
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	61bb      	str	r3, [r7, #24]
 8007636:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007638:	6979      	ldr	r1, [r7, #20]
 800763a:	69ba      	ldr	r2, [r7, #24]
 800763c:	e841 2300 	strex	r3, r2, [r1]
 8007640:	613b      	str	r3, [r7, #16]
   return(result);
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1e6      	bne.n	8007616 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2220      	movs	r2, #32
 800764c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7f9 fb83 	bl	8000d60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800765a:	bf00      	nop
 800765c:	3720      	adds	r7, #32
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b096      	sub	sp, #88	; 0x58
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007670:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007678:	2b22      	cmp	r3, #34	; 0x22
 800767a:	f040 8094 	bne.w	80077a6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007684:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007688:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800768c:	b2d9      	uxtb	r1, r3
 800768e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007692:	b2da      	uxtb	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007698:	400a      	ands	r2, r1
 800769a:	b2d2      	uxtb	r2, r2
 800769c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	3b01      	subs	r3, #1
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d179      	bne.n	80077ba <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ce:	e853 3f00 	ldrex	r3, [r3]
 80076d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076da:	653b      	str	r3, [r7, #80]	; 0x50
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	461a      	mov	r2, r3
 80076e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076e4:	647b      	str	r3, [r7, #68]	; 0x44
 80076e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076ec:	e841 2300 	strex	r3, r2, [r1]
 80076f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1e6      	bne.n	80076c6 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3308      	adds	r3, #8
 80076fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007702:	e853 3f00 	ldrex	r3, [r3]
 8007706:	623b      	str	r3, [r7, #32]
   return(result);
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	f023 0301 	bic.w	r3, r3, #1
 800770e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3308      	adds	r3, #8
 8007716:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007718:	633a      	str	r2, [r7, #48]	; 0x30
 800771a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800771e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007720:	e841 2300 	strex	r3, r2, [r1]
 8007724:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1e5      	bne.n	80076f8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2220      	movs	r2, #32
 8007730:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800773c:	2b01      	cmp	r3, #1
 800773e:	d12e      	bne.n	800779e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	e853 3f00 	ldrex	r3, [r3]
 8007752:	60fb      	str	r3, [r7, #12]
   return(result);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 0310 	bic.w	r3, r3, #16
 800775a:	64bb      	str	r3, [r7, #72]	; 0x48
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007764:	61fb      	str	r3, [r7, #28]
 8007766:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007768:	69b9      	ldr	r1, [r7, #24]
 800776a:	69fa      	ldr	r2, [r7, #28]
 800776c:	e841 2300 	strex	r3, r2, [r1]
 8007770:	617b      	str	r3, [r7, #20]
   return(result);
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e6      	bne.n	8007746 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	f003 0310 	and.w	r3, r3, #16
 8007782:	2b10      	cmp	r3, #16
 8007784:	d103      	bne.n	800778e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2210      	movs	r2, #16
 800778c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007794:	4619      	mov	r1, r3
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7ff f952 	bl	8006a40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800779c:	e00d      	b.n	80077ba <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7f9 fae8 	bl	8000d74 <HAL_UART_RxCpltCallback>
}
 80077a4:	e009      	b.n	80077ba <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	8b1b      	ldrh	r3, [r3, #24]
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f042 0208 	orr.w	r2, r2, #8
 80077b6:	b292      	uxth	r2, r2
 80077b8:	831a      	strh	r2, [r3, #24]
}
 80077ba:	bf00      	nop
 80077bc:	3758      	adds	r7, #88	; 0x58
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b096      	sub	sp, #88	; 0x58
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077d8:	2b22      	cmp	r3, #34	; 0x22
 80077da:	f040 8094 	bne.w	8007906 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80077e4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ec:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80077ee:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80077f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80077f6:	4013      	ands	r3, r2
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007802:	1c9a      	adds	r2, r3, #2
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800780e:	b29b      	uxth	r3, r3
 8007810:	3b01      	subs	r3, #1
 8007812:	b29a      	uxth	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007820:	b29b      	uxth	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d179      	bne.n	800791a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800782e:	e853 3f00 	ldrex	r3, [r3]
 8007832:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007836:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800783a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	461a      	mov	r2, r3
 8007842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007844:	643b      	str	r3, [r7, #64]	; 0x40
 8007846:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007848:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800784a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800784c:	e841 2300 	strex	r3, r2, [r1]
 8007850:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1e6      	bne.n	8007826 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3308      	adds	r3, #8
 800785e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	6a3b      	ldr	r3, [r7, #32]
 8007862:	e853 3f00 	ldrex	r3, [r3]
 8007866:	61fb      	str	r3, [r7, #28]
   return(result);
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	f023 0301 	bic.w	r3, r3, #1
 800786e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3308      	adds	r3, #8
 8007876:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007878:	62fa      	str	r2, [r7, #44]	; 0x2c
 800787a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800787e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007880:	e841 2300 	strex	r3, r2, [r1]
 8007884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e5      	bne.n	8007858 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2220      	movs	r2, #32
 8007890:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800789c:	2b01      	cmp	r3, #1
 800789e:	d12e      	bne.n	80078fe <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	e853 3f00 	ldrex	r3, [r3]
 80078b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	f023 0310 	bic.w	r3, r3, #16
 80078ba:	647b      	str	r3, [r7, #68]	; 0x44
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	461a      	mov	r2, r3
 80078c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078c4:	61bb      	str	r3, [r7, #24]
 80078c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c8:	6979      	ldr	r1, [r7, #20]
 80078ca:	69ba      	ldr	r2, [r7, #24]
 80078cc:	e841 2300 	strex	r3, r2, [r1]
 80078d0:	613b      	str	r3, [r7, #16]
   return(result);
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1e6      	bne.n	80078a6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	f003 0310 	and.w	r3, r3, #16
 80078e2:	2b10      	cmp	r3, #16
 80078e4:	d103      	bne.n	80078ee <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2210      	movs	r2, #16
 80078ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80078f4:	4619      	mov	r1, r3
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7ff f8a2 	bl	8006a40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078fc:	e00d      	b.n	800791a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7f9 fa38 	bl	8000d74 <HAL_UART_RxCpltCallback>
}
 8007904:	e009      	b.n	800791a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	8b1b      	ldrh	r3, [r3, #24]
 800790c:	b29a      	uxth	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f042 0208 	orr.w	r2, r2, #8
 8007916:	b292      	uxth	r2, r2
 8007918:	831a      	strh	r2, [r3, #24]
}
 800791a:	bf00      	nop
 800791c:	3758      	adds	r7, #88	; 0x58
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
	...

08007938 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800793c:	4904      	ldr	r1, [pc, #16]	; (8007950 <MX_FATFS_Init+0x18>)
 800793e:	4805      	ldr	r0, [pc, #20]	; (8007954 <MX_FATFS_Init+0x1c>)
 8007940:	f000 fd8c 	bl	800845c <FATFS_LinkDriver>
 8007944:	4603      	mov	r3, r0
 8007946:	461a      	mov	r2, r3
 8007948:	4b03      	ldr	r3, [pc, #12]	; (8007958 <MX_FATFS_Init+0x20>)
 800794a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800794c:	bf00      	nop
 800794e:	bd80      	pop	{r7, pc}
 8007950:	20000940 	.word	0x20000940
 8007954:	200000d8 	.word	0x200000d8
 8007958:	2000093c 	.word	0x2000093c

0800795c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT; 	--- Commented out
//    return Stat;			--- Commented out
	return USER_SPI_initialize(pdrv); // ADDED
 8007966:	79fb      	ldrb	r3, [r7, #7]
 8007968:	4618      	mov	r0, r3
 800796a:	f000 f9d7 	bl	8007d1c <USER_SPI_initialize>
 800796e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007970:	4618      	mov	r0, r3
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	4603      	mov	r3, r0
 8007980:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;		--- Commented out
//    return Stat;				--- Commented out
	return USER_SPI_status(pdrv); // ADDED
 8007982:	79fb      	ldrb	r3, [r7, #7]
 8007984:	4618      	mov	r0, r3
 8007986:	f000 fab5 	bl	8007ef4 <USER_SPI_status>
 800798a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	60b9      	str	r1, [r7, #8]
 800799c:	607a      	str	r2, [r7, #4]
 800799e:	603b      	str	r3, [r7, #0]
 80079a0:	4603      	mov	r3, r0
 80079a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;			--- Commented out
	return USER_SPI_read(pdrv, buff, sector, count); // ADDED
 80079a4:	7bf8      	ldrb	r0, [r7, #15]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	68b9      	ldr	r1, [r7, #8]
 80079ac:	f000 fab8 	bl	8007f20 <USER_SPI_read>
 80079b0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b084      	sub	sp, #16
 80079be:	af00      	add	r7, sp, #0
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	603b      	str	r3, [r7, #0]
 80079c6:	4603      	mov	r3, r0
 80079c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;			--- Commented out
	return USER_SPI_write(pdrv, buff, sector, count); // ADDED
 80079ca:	7bf8      	ldrb	r0, [r7, #15]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	68b9      	ldr	r1, [r7, #8]
 80079d2:	f000 fb0b 	bl	8007fec <USER_SPI_write>
 80079d6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	4603      	mov	r3, r0
 80079e8:	603a      	str	r2, [r7, #0]
 80079ea:	71fb      	strb	r3, [r7, #7]
 80079ec:	460b      	mov	r3, r1
 80079ee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;	--- Commented out
//    return res;				--- Commented out
	return USER_SPI_ioctl(pdrv, cmd, buff); // ADDED
 80079f0:	79b9      	ldrb	r1, [r7, #6]
 80079f2:	79fb      	ldrb	r3, [r7, #7]
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f000 fb74 	bl	80080e4 <USER_SPI_ioctl>
 80079fc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007a10:	f7fb f910 	bl	8002c34 <HAL_GetTick>
 8007a14:	4603      	mov	r3, r0
 8007a16:	4a04      	ldr	r2, [pc, #16]	; (8007a28 <SPI_Timer_On+0x20>)
 8007a18:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8007a1a:	4a04      	ldr	r2, [pc, #16]	; (8007a2c <SPI_Timer_On+0x24>)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6013      	str	r3, [r2, #0]
}
 8007a20:	bf00      	nop
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	20000948 	.word	0x20000948
 8007a2c:	2000094c 	.word	0x2000094c

08007a30 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007a30:	b580      	push	{r7, lr}
 8007a32:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007a34:	f7fb f8fe 	bl	8002c34 <HAL_GetTick>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	4b06      	ldr	r3, [pc, #24]	; (8007a54 <SPI_Timer_Status+0x24>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	1ad2      	subs	r2, r2, r3
 8007a40:	4b05      	ldr	r3, [pc, #20]	; (8007a58 <SPI_Timer_Status+0x28>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	bf34      	ite	cc
 8007a48:	2301      	movcc	r3, #1
 8007a4a:	2300      	movcs	r3, #0
 8007a4c:	b2db      	uxtb	r3, r3
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	20000948 	.word	0x20000948
 8007a58:	2000094c 	.word	0x2000094c

08007a5c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af02      	add	r7, sp, #8
 8007a62:	4603      	mov	r3, r0
 8007a64:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8007a66:	f107 020f 	add.w	r2, r7, #15
 8007a6a:	1df9      	adds	r1, r7, #7
 8007a6c:	2332      	movs	r3, #50	; 0x32
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	2301      	movs	r3, #1
 8007a72:	4804      	ldr	r0, [pc, #16]	; (8007a84 <xchg_spi+0x28>)
 8007a74:	f7fd fc30 	bl	80052d8 <HAL_SPI_TransmitReceive>
    return rxDat;
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20000194 	.word	0x20000194

08007a88 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007a88:	b590      	push	{r4, r7, lr}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8007a92:	2300      	movs	r3, #0
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	e00a      	b.n	8007aae <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	18d4      	adds	r4, r2, r3
 8007a9e:	20ff      	movs	r0, #255	; 0xff
 8007aa0:	f7ff ffdc 	bl	8007a5c <xchg_spi>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	60fb      	str	r3, [r7, #12]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d3f0      	bcc.n	8007a98 <rcvr_spi_multi+0x10>
	}
}
 8007ab6:	bf00      	nop
 8007ab8:	bf00      	nop
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd90      	pop	{r4, r7, pc}

08007ac0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8007aca:	2300      	movs	r3, #0
 8007acc:	60fb      	str	r3, [r7, #12]
 8007ace:	e009      	b.n	8007ae4 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7ff ffbf 	bl	8007a5c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	60fb      	str	r3, [r7, #12]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d3f1      	bcc.n	8007ad0 <xmit_spi_multi+0x10>
	}
}
 8007aec:	bf00      	nop
 8007aee:	bf00      	nop
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b086      	sub	sp, #24
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8007afe:	f7fb f899 	bl	8002c34 <HAL_GetTick>
 8007b02:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8007b08:	20ff      	movs	r0, #255	; 0xff
 8007b0a:	f7ff ffa7 	bl	8007a5c <xchg_spi>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8007b12:	7bfb      	ldrb	r3, [r7, #15]
 8007b14:	2bff      	cmp	r3, #255	; 0xff
 8007b16:	d007      	beq.n	8007b28 <wait_ready+0x32>
 8007b18:	f7fb f88c 	bl	8002c34 <HAL_GetTick>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d8ef      	bhi.n	8007b08 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
 8007b2a:	2bff      	cmp	r3, #255	; 0xff
 8007b2c:	bf0c      	ite	eq
 8007b2e:	2301      	moveq	r3, #1
 8007b30:	2300      	movne	r3, #0
 8007b32:	b2db      	uxtb	r3, r3
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3718      	adds	r7, #24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8007b40:	2201      	movs	r2, #1
 8007b42:	2120      	movs	r1, #32
 8007b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b48:	f7fb fb9e 	bl	8003288 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007b4c:	20ff      	movs	r0, #255	; 0xff
 8007b4e:	f7ff ff85 	bl	8007a5c <xchg_spi>

}
 8007b52:	bf00      	nop
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2120      	movs	r1, #32
 8007b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b62:	f7fb fb91 	bl	8003288 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007b66:	20ff      	movs	r0, #255	; 0xff
 8007b68:	f7ff ff78 	bl	8007a5c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8007b6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b70:	f7ff ffc1 	bl	8007af6 <wait_ready>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <spiselect+0x28>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e002      	b.n	8007b84 <spiselect+0x2e>

	despiselect();
 8007b7e:	f7ff ffdd 	bl	8007b3c <despiselect>
	return 0;	/* Timeout */
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8007b92:	20c8      	movs	r0, #200	; 0xc8
 8007b94:	f7ff ff38 	bl	8007a08 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8007b98:	20ff      	movs	r0, #255	; 0xff
 8007b9a:	f7ff ff5f 	bl	8007a5c <xchg_spi>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
 8007ba4:	2bff      	cmp	r3, #255	; 0xff
 8007ba6:	d104      	bne.n	8007bb2 <rcvr_datablock+0x2a>
 8007ba8:	f7ff ff42 	bl	8007a30 <SPI_Timer_Status>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1f2      	bne.n	8007b98 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
 8007bb4:	2bfe      	cmp	r3, #254	; 0xfe
 8007bb6:	d001      	beq.n	8007bbc <rcvr_datablock+0x34>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	e00a      	b.n	8007bd2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7ff ff62 	bl	8007a88 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007bc4:	20ff      	movs	r0, #255	; 0xff
 8007bc6:	f7ff ff49 	bl	8007a5c <xchg_spi>
 8007bca:	20ff      	movs	r0, #255	; 0xff
 8007bcc:	f7ff ff46 	bl	8007a5c <xchg_spi>

	return 1;						/* Function succeeded */
 8007bd0:	2301      	movs	r3, #1
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	460b      	mov	r3, r1
 8007be4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8007be6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007bea:	f7ff ff84 	bl	8007af6 <wait_ready>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <xmit_datablock+0x1e>
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	e01e      	b.n	8007c36 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007bf8:	78fb      	ldrb	r3, [r7, #3]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7ff ff2e 	bl	8007a5c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8007c00:	78fb      	ldrb	r3, [r7, #3]
 8007c02:	2bfd      	cmp	r3, #253	; 0xfd
 8007c04:	d016      	beq.n	8007c34 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8007c06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7ff ff58 	bl	8007ac0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8007c10:	20ff      	movs	r0, #255	; 0xff
 8007c12:	f7ff ff23 	bl	8007a5c <xchg_spi>
 8007c16:	20ff      	movs	r0, #255	; 0xff
 8007c18:	f7ff ff20 	bl	8007a5c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8007c1c:	20ff      	movs	r0, #255	; 0xff
 8007c1e:	f7ff ff1d 	bl	8007a5c <xchg_spi>
 8007c22:	4603      	mov	r3, r0
 8007c24:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
 8007c28:	f003 031f 	and.w	r3, r3, #31
 8007c2c:	2b05      	cmp	r3, #5
 8007c2e:	d001      	beq.n	8007c34 <xmit_datablock+0x5a>
 8007c30:	2300      	movs	r3, #0
 8007c32:	e000      	b.n	8007c36 <xmit_datablock+0x5c>
	}
	return 1;
 8007c34:	2301      	movs	r3, #1
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b084      	sub	sp, #16
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	4603      	mov	r3, r0
 8007c46:	6039      	str	r1, [r7, #0]
 8007c48:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8007c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	da0e      	bge.n	8007c70 <send_cmd+0x32>
		cmd &= 0x7F;
 8007c52:	79fb      	ldrb	r3, [r7, #7]
 8007c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c58:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	2037      	movs	r0, #55	; 0x37
 8007c5e:	f7ff ffee 	bl	8007c3e <send_cmd>
 8007c62:	4603      	mov	r3, r0
 8007c64:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8007c66:	7bbb      	ldrb	r3, [r7, #14]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d901      	bls.n	8007c70 <send_cmd+0x32>
 8007c6c:	7bbb      	ldrb	r3, [r7, #14]
 8007c6e:	e051      	b.n	8007d14 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007c70:	79fb      	ldrb	r3, [r7, #7]
 8007c72:	2b0c      	cmp	r3, #12
 8007c74:	d008      	beq.n	8007c88 <send_cmd+0x4a>
		despiselect();
 8007c76:	f7ff ff61 	bl	8007b3c <despiselect>
		if (!spiselect()) return 0xFF;
 8007c7a:	f7ff ff6c 	bl	8007b56 <spiselect>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d101      	bne.n	8007c88 <send_cmd+0x4a>
 8007c84:	23ff      	movs	r3, #255	; 0xff
 8007c86:	e045      	b.n	8007d14 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8007c88:	79fb      	ldrb	r3, [r7, #7]
 8007c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7ff fee3 	bl	8007a5c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	0e1b      	lsrs	r3, r3, #24
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7ff fedd 	bl	8007a5c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	0c1b      	lsrs	r3, r3, #16
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7ff fed7 	bl	8007a5c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	0a1b      	lsrs	r3, r3, #8
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7ff fed1 	bl	8007a5c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff fecc 	bl	8007a5c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007cc8:	79fb      	ldrb	r3, [r7, #7]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <send_cmd+0x94>
 8007cce:	2395      	movs	r3, #149	; 0x95
 8007cd0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007cd2:	79fb      	ldrb	r3, [r7, #7]
 8007cd4:	2b08      	cmp	r3, #8
 8007cd6:	d101      	bne.n	8007cdc <send_cmd+0x9e>
 8007cd8:	2387      	movs	r3, #135	; 0x87
 8007cda:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7ff febc 	bl	8007a5c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007ce4:	79fb      	ldrb	r3, [r7, #7]
 8007ce6:	2b0c      	cmp	r3, #12
 8007ce8:	d102      	bne.n	8007cf0 <send_cmd+0xb2>
 8007cea:	20ff      	movs	r0, #255	; 0xff
 8007cec:	f7ff feb6 	bl	8007a5c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8007cf0:	230a      	movs	r3, #10
 8007cf2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007cf4:	20ff      	movs	r0, #255	; 0xff
 8007cf6:	f7ff feb1 	bl	8007a5c <xchg_spi>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8007cfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	da05      	bge.n	8007d12 <send_cmd+0xd4>
 8007d06:	7bfb      	ldrb	r3, [r7, #15]
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	73fb      	strb	r3, [r7, #15]
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1f0      	bne.n	8007cf4 <send_cmd+0xb6>

	return res;							/* Return received response */
 8007d12:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007d1c:	b590      	push	{r4, r7, lr}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	4603      	mov	r3, r0
 8007d24:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8007d26:	79fb      	ldrb	r3, [r7, #7]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d001      	beq.n	8007d30 <USER_SPI_initialize+0x14>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e0d6      	b.n	8007ede <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007d30:	4b6d      	ldr	r3, [pc, #436]	; (8007ee8 <USER_SPI_initialize+0x1cc>)
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	f003 0302 	and.w	r3, r3, #2
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <USER_SPI_initialize+0x2a>
 8007d3e:	4b6a      	ldr	r3, [pc, #424]	; (8007ee8 <USER_SPI_initialize+0x1cc>)
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	e0cb      	b.n	8007ede <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8007d46:	4b69      	ldr	r3, [pc, #420]	; (8007eec <USER_SPI_initialize+0x1d0>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007d50:	4b66      	ldr	r3, [pc, #408]	; (8007eec <USER_SPI_initialize+0x1d0>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8007d58:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8007d5a:	230a      	movs	r3, #10
 8007d5c:	73fb      	strb	r3, [r7, #15]
 8007d5e:	e005      	b.n	8007d6c <USER_SPI_initialize+0x50>
 8007d60:	20ff      	movs	r0, #255	; 0xff
 8007d62:	f7ff fe7b 	bl	8007a5c <xchg_spi>
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	73fb      	strb	r3, [r7, #15]
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1f6      	bne.n	8007d60 <USER_SPI_initialize+0x44>

	ty = 0;
 8007d72:	2300      	movs	r3, #0
 8007d74:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007d76:	2100      	movs	r1, #0
 8007d78:	2000      	movs	r0, #0
 8007d7a:	f7ff ff60 	bl	8007c3e <send_cmd>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	f040 808b 	bne.w	8007e9c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007d86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d8a:	f7ff fe3d 	bl	8007a08 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007d8e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d92:	2008      	movs	r0, #8
 8007d94:	f7ff ff53 	bl	8007c3e <send_cmd>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d151      	bne.n	8007e42 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8007d9e:	2300      	movs	r3, #0
 8007da0:	73fb      	strb	r3, [r7, #15]
 8007da2:	e00d      	b.n	8007dc0 <USER_SPI_initialize+0xa4>
 8007da4:	7bfc      	ldrb	r4, [r7, #15]
 8007da6:	20ff      	movs	r0, #255	; 0xff
 8007da8:	f7ff fe58 	bl	8007a5c <xchg_spi>
 8007dac:	4603      	mov	r3, r0
 8007dae:	461a      	mov	r2, r3
 8007db0:	f104 0310 	add.w	r3, r4, #16
 8007db4:	443b      	add	r3, r7
 8007db6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	73fb      	strb	r3, [r7, #15]
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d9ee      	bls.n	8007da4 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007dc6:	7abb      	ldrb	r3, [r7, #10]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d167      	bne.n	8007e9c <USER_SPI_initialize+0x180>
 8007dcc:	7afb      	ldrb	r3, [r7, #11]
 8007dce:	2baa      	cmp	r3, #170	; 0xaa
 8007dd0:	d164      	bne.n	8007e9c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8007dd2:	bf00      	nop
 8007dd4:	f7ff fe2c 	bl	8007a30 <SPI_Timer_Status>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d007      	beq.n	8007dee <USER_SPI_initialize+0xd2>
 8007dde:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007de2:	20a9      	movs	r0, #169	; 0xa9
 8007de4:	f7ff ff2b 	bl	8007c3e <send_cmd>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1f2      	bne.n	8007dd4 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8007dee:	f7ff fe1f 	bl	8007a30 <SPI_Timer_Status>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d051      	beq.n	8007e9c <USER_SPI_initialize+0x180>
 8007df8:	2100      	movs	r1, #0
 8007dfa:	203a      	movs	r0, #58	; 0x3a
 8007dfc:	f7ff ff1f 	bl	8007c3e <send_cmd>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d14a      	bne.n	8007e9c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007e06:	2300      	movs	r3, #0
 8007e08:	73fb      	strb	r3, [r7, #15]
 8007e0a:	e00d      	b.n	8007e28 <USER_SPI_initialize+0x10c>
 8007e0c:	7bfc      	ldrb	r4, [r7, #15]
 8007e0e:	20ff      	movs	r0, #255	; 0xff
 8007e10:	f7ff fe24 	bl	8007a5c <xchg_spi>
 8007e14:	4603      	mov	r3, r0
 8007e16:	461a      	mov	r2, r3
 8007e18:	f104 0310 	add.w	r3, r4, #16
 8007e1c:	443b      	add	r3, r7
 8007e1e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007e22:	7bfb      	ldrb	r3, [r7, #15]
 8007e24:	3301      	adds	r3, #1
 8007e26:	73fb      	strb	r3, [r7, #15]
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d9ee      	bls.n	8007e0c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007e2e:	7a3b      	ldrb	r3, [r7, #8]
 8007e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d001      	beq.n	8007e3c <USER_SPI_initialize+0x120>
 8007e38:	230c      	movs	r3, #12
 8007e3a:	e000      	b.n	8007e3e <USER_SPI_initialize+0x122>
 8007e3c:	2304      	movs	r3, #4
 8007e3e:	737b      	strb	r3, [r7, #13]
 8007e40:	e02c      	b.n	8007e9c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007e42:	2100      	movs	r1, #0
 8007e44:	20a9      	movs	r0, #169	; 0xa9
 8007e46:	f7ff fefa 	bl	8007c3e <send_cmd>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d804      	bhi.n	8007e5a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007e50:	2302      	movs	r3, #2
 8007e52:	737b      	strb	r3, [r7, #13]
 8007e54:	23a9      	movs	r3, #169	; 0xa9
 8007e56:	73bb      	strb	r3, [r7, #14]
 8007e58:	e003      	b.n	8007e62 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	737b      	strb	r3, [r7, #13]
 8007e5e:	2301      	movs	r3, #1
 8007e60:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007e62:	bf00      	nop
 8007e64:	f7ff fde4 	bl	8007a30 <SPI_Timer_Status>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d007      	beq.n	8007e7e <USER_SPI_initialize+0x162>
 8007e6e:	7bbb      	ldrb	r3, [r7, #14]
 8007e70:	2100      	movs	r1, #0
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7ff fee3 	bl	8007c3e <send_cmd>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1f2      	bne.n	8007e64 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007e7e:	f7ff fdd7 	bl	8007a30 <SPI_Timer_Status>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d007      	beq.n	8007e98 <USER_SPI_initialize+0x17c>
 8007e88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e8c:	2010      	movs	r0, #16
 8007e8e:	f7ff fed6 	bl	8007c3e <send_cmd>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d001      	beq.n	8007e9c <USER_SPI_initialize+0x180>
				ty = 0;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007e9c:	4a14      	ldr	r2, [pc, #80]	; (8007ef0 <USER_SPI_initialize+0x1d4>)
 8007e9e:	7b7b      	ldrb	r3, [r7, #13]
 8007ea0:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007ea2:	f7ff fe4b 	bl	8007b3c <despiselect>

	if (ty) {			/* OK */
 8007ea6:	7b7b      	ldrb	r3, [r7, #13]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d012      	beq.n	8007ed2 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8007eac:	4b0f      	ldr	r3, [pc, #60]	; (8007eec <USER_SPI_initialize+0x1d0>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007eb6:	4b0d      	ldr	r3, [pc, #52]	; (8007eec <USER_SPI_initialize+0x1d0>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f042 0210 	orr.w	r2, r2, #16
 8007ebe:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007ec0:	4b09      	ldr	r3, [pc, #36]	; (8007ee8 <USER_SPI_initialize+0x1cc>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	f023 0301 	bic.w	r3, r3, #1
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	4b06      	ldr	r3, [pc, #24]	; (8007ee8 <USER_SPI_initialize+0x1cc>)
 8007ece:	701a      	strb	r2, [r3, #0]
 8007ed0:	e002      	b.n	8007ed8 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007ed2:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <USER_SPI_initialize+0x1cc>)
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007ed8:	4b03      	ldr	r3, [pc, #12]	; (8007ee8 <USER_SPI_initialize+0x1cc>)
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	b2db      	uxtb	r3, r3
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd90      	pop	{r4, r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	200000ec 	.word	0x200000ec
 8007eec:	20000194 	.word	0x20000194
 8007ef0:	20000944 	.word	0x20000944

08007ef4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	4603      	mov	r3, r0
 8007efc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8007efe:	79fb      	ldrb	r3, [r7, #7]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d001      	beq.n	8007f08 <USER_SPI_status+0x14>
 8007f04:	2301      	movs	r3, #1
 8007f06:	e002      	b.n	8007f0e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007f08:	4b04      	ldr	r3, [pc, #16]	; (8007f1c <USER_SPI_status+0x28>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	b2db      	uxtb	r3, r3
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	370c      	adds	r7, #12
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	200000ec 	.word	0x200000ec

08007f20 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60b9      	str	r1, [r7, #8]
 8007f28:	607a      	str	r2, [r7, #4]
 8007f2a:	603b      	str	r3, [r7, #0]
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d102      	bne.n	8007f3c <USER_SPI_read+0x1c>
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d101      	bne.n	8007f40 <USER_SPI_read+0x20>
 8007f3c:	2304      	movs	r3, #4
 8007f3e:	e04d      	b.n	8007fdc <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007f40:	4b28      	ldr	r3, [pc, #160]	; (8007fe4 <USER_SPI_read+0xc4>)
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d001      	beq.n	8007f52 <USER_SPI_read+0x32>
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e044      	b.n	8007fdc <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007f52:	4b25      	ldr	r3, [pc, #148]	; (8007fe8 <USER_SPI_read+0xc8>)
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	f003 0308 	and.w	r3, r3, #8
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d102      	bne.n	8007f64 <USER_SPI_read+0x44>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	025b      	lsls	r3, r3, #9
 8007f62:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d111      	bne.n	8007f8e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007f6a:	6879      	ldr	r1, [r7, #4]
 8007f6c:	2011      	movs	r0, #17
 8007f6e:	f7ff fe66 	bl	8007c3e <send_cmd>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d129      	bne.n	8007fcc <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007f7c:	68b8      	ldr	r0, [r7, #8]
 8007f7e:	f7ff fe03 	bl	8007b88 <rcvr_datablock>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d021      	beq.n	8007fcc <USER_SPI_read+0xac>
			count = 0;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	603b      	str	r3, [r7, #0]
 8007f8c:	e01e      	b.n	8007fcc <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007f8e:	6879      	ldr	r1, [r7, #4]
 8007f90:	2012      	movs	r0, #18
 8007f92:	f7ff fe54 	bl	8007c3e <send_cmd>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d117      	bne.n	8007fcc <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007f9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007fa0:	68b8      	ldr	r0, [r7, #8]
 8007fa2:	f7ff fdf1 	bl	8007b88 <rcvr_datablock>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00a      	beq.n	8007fc2 <USER_SPI_read+0xa2>
				buff += 512;
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007fb2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	603b      	str	r3, [r7, #0]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1ed      	bne.n	8007f9c <USER_SPI_read+0x7c>
 8007fc0:	e000      	b.n	8007fc4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007fc2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	200c      	movs	r0, #12
 8007fc8:	f7ff fe39 	bl	8007c3e <send_cmd>
		}
	}
	despiselect();
 8007fcc:	f7ff fdb6 	bl	8007b3c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	bf14      	ite	ne
 8007fd6:	2301      	movne	r3, #1
 8007fd8:	2300      	moveq	r3, #0
 8007fda:	b2db      	uxtb	r3, r3
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	200000ec 	.word	0x200000ec
 8007fe8:	20000944 	.word	0x20000944

08007fec <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60b9      	str	r1, [r7, #8]
 8007ff4:	607a      	str	r2, [r7, #4]
 8007ff6:	603b      	str	r3, [r7, #0]
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d102      	bne.n	8008008 <USER_SPI_write+0x1c>
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d101      	bne.n	800800c <USER_SPI_write+0x20>
 8008008:	2304      	movs	r3, #4
 800800a:	e063      	b.n	80080d4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800800c:	4b33      	ldr	r3, [pc, #204]	; (80080dc <USER_SPI_write+0xf0>)
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	b2db      	uxtb	r3, r3
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	2b00      	cmp	r3, #0
 8008018:	d001      	beq.n	800801e <USER_SPI_write+0x32>
 800801a:	2303      	movs	r3, #3
 800801c:	e05a      	b.n	80080d4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800801e:	4b2f      	ldr	r3, [pc, #188]	; (80080dc <USER_SPI_write+0xf0>)
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	b2db      	uxtb	r3, r3
 8008024:	f003 0304 	and.w	r3, r3, #4
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <USER_SPI_write+0x44>
 800802c:	2302      	movs	r3, #2
 800802e:	e051      	b.n	80080d4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8008030:	4b2b      	ldr	r3, [pc, #172]	; (80080e0 <USER_SPI_write+0xf4>)
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	f003 0308 	and.w	r3, r3, #8
 8008038:	2b00      	cmp	r3, #0
 800803a:	d102      	bne.n	8008042 <USER_SPI_write+0x56>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	025b      	lsls	r3, r3, #9
 8008040:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d110      	bne.n	800806a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8008048:	6879      	ldr	r1, [r7, #4]
 800804a:	2018      	movs	r0, #24
 800804c:	f7ff fdf7 	bl	8007c3e <send_cmd>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d136      	bne.n	80080c4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8008056:	21fe      	movs	r1, #254	; 0xfe
 8008058:	68b8      	ldr	r0, [r7, #8]
 800805a:	f7ff fdbe 	bl	8007bda <xmit_datablock>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d02f      	beq.n	80080c4 <USER_SPI_write+0xd8>
			count = 0;
 8008064:	2300      	movs	r3, #0
 8008066:	603b      	str	r3, [r7, #0]
 8008068:	e02c      	b.n	80080c4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800806a:	4b1d      	ldr	r3, [pc, #116]	; (80080e0 <USER_SPI_write+0xf4>)
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	f003 0306 	and.w	r3, r3, #6
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <USER_SPI_write+0x92>
 8008076:	6839      	ldr	r1, [r7, #0]
 8008078:	2097      	movs	r0, #151	; 0x97
 800807a:	f7ff fde0 	bl	8007c3e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800807e:	6879      	ldr	r1, [r7, #4]
 8008080:	2019      	movs	r0, #25
 8008082:	f7ff fddc 	bl	8007c3e <send_cmd>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d11b      	bne.n	80080c4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800808c:	21fc      	movs	r1, #252	; 0xfc
 800808e:	68b8      	ldr	r0, [r7, #8]
 8008090:	f7ff fda3 	bl	8007bda <xmit_datablock>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <USER_SPI_write+0xc4>
				buff += 512;
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80080a0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	3b01      	subs	r3, #1
 80080a6:	603b      	str	r3, [r7, #0]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1ee      	bne.n	800808c <USER_SPI_write+0xa0>
 80080ae:	e000      	b.n	80080b2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80080b0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80080b2:	21fd      	movs	r1, #253	; 0xfd
 80080b4:	2000      	movs	r0, #0
 80080b6:	f7ff fd90 	bl	8007bda <xmit_datablock>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <USER_SPI_write+0xd8>
 80080c0:	2301      	movs	r3, #1
 80080c2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80080c4:	f7ff fd3a 	bl	8007b3c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	bf14      	ite	ne
 80080ce:	2301      	movne	r3, #1
 80080d0:	2300      	moveq	r3, #0
 80080d2:	b2db      	uxtb	r3, r3
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	200000ec 	.word	0x200000ec
 80080e0:	20000944 	.word	0x20000944

080080e4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b08c      	sub	sp, #48	; 0x30
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	4603      	mov	r3, r0
 80080ec:	603a      	str	r2, [r7, #0]
 80080ee:	71fb      	strb	r3, [r7, #7]
 80080f0:	460b      	mov	r3, r1
 80080f2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80080f4:	79fb      	ldrb	r3, [r7, #7]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d001      	beq.n	80080fe <USER_SPI_ioctl+0x1a>
 80080fa:	2304      	movs	r3, #4
 80080fc:	e15a      	b.n	80083b4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80080fe:	4baf      	ldr	r3, [pc, #700]	; (80083bc <USER_SPI_ioctl+0x2d8>)
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	b2db      	uxtb	r3, r3
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <USER_SPI_ioctl+0x2c>
 800810c:	2303      	movs	r3, #3
 800810e:	e151      	b.n	80083b4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8008116:	79bb      	ldrb	r3, [r7, #6]
 8008118:	2b04      	cmp	r3, #4
 800811a:	f200 8136 	bhi.w	800838a <USER_SPI_ioctl+0x2a6>
 800811e:	a201      	add	r2, pc, #4	; (adr r2, 8008124 <USER_SPI_ioctl+0x40>)
 8008120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008124:	08008139 	.word	0x08008139
 8008128:	0800814d 	.word	0x0800814d
 800812c:	0800838b 	.word	0x0800838b
 8008130:	080081f9 	.word	0x080081f9
 8008134:	080082ef 	.word	0x080082ef
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8008138:	f7ff fd0d 	bl	8007b56 <spiselect>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	f000 8127 	beq.w	8008392 <USER_SPI_ioctl+0x2ae>
 8008144:	2300      	movs	r3, #0
 8008146:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800814a:	e122      	b.n	8008392 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800814c:	2100      	movs	r1, #0
 800814e:	2009      	movs	r0, #9
 8008150:	f7ff fd75 	bl	8007c3e <send_cmd>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	f040 811d 	bne.w	8008396 <USER_SPI_ioctl+0x2b2>
 800815c:	f107 030c 	add.w	r3, r7, #12
 8008160:	2110      	movs	r1, #16
 8008162:	4618      	mov	r0, r3
 8008164:	f7ff fd10 	bl	8007b88 <rcvr_datablock>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	f000 8113 	beq.w	8008396 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8008170:	7b3b      	ldrb	r3, [r7, #12]
 8008172:	099b      	lsrs	r3, r3, #6
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b01      	cmp	r3, #1
 8008178:	d111      	bne.n	800819e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800817a:	7d7b      	ldrb	r3, [r7, #21]
 800817c:	461a      	mov	r2, r3
 800817e:	7d3b      	ldrb	r3, [r7, #20]
 8008180:	021b      	lsls	r3, r3, #8
 8008182:	4413      	add	r3, r2
 8008184:	461a      	mov	r2, r3
 8008186:	7cfb      	ldrb	r3, [r7, #19]
 8008188:	041b      	lsls	r3, r3, #16
 800818a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800818e:	4413      	add	r3, r2
 8008190:	3301      	adds	r3, #1
 8008192:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	029a      	lsls	r2, r3, #10
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	601a      	str	r2, [r3, #0]
 800819c:	e028      	b.n	80081f0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800819e:	7c7b      	ldrb	r3, [r7, #17]
 80081a0:	f003 030f 	and.w	r3, r3, #15
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	7dbb      	ldrb	r3, [r7, #22]
 80081a8:	09db      	lsrs	r3, r3, #7
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	4413      	add	r3, r2
 80081ae:	b2da      	uxtb	r2, r3
 80081b0:	7d7b      	ldrb	r3, [r7, #21]
 80081b2:	005b      	lsls	r3, r3, #1
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	f003 0306 	and.w	r3, r3, #6
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	4413      	add	r3, r2
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	3302      	adds	r3, #2
 80081c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80081c6:	7d3b      	ldrb	r3, [r7, #20]
 80081c8:	099b      	lsrs	r3, r3, #6
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	461a      	mov	r2, r3
 80081ce:	7cfb      	ldrb	r3, [r7, #19]
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	441a      	add	r2, r3
 80081d4:	7cbb      	ldrb	r3, [r7, #18]
 80081d6:	029b      	lsls	r3, r3, #10
 80081d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80081dc:	4413      	add	r3, r2
 80081de:	3301      	adds	r3, #1
 80081e0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80081e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80081e6:	3b09      	subs	r3, #9
 80081e8:	69fa      	ldr	r2, [r7, #28]
 80081ea:	409a      	lsls	r2, r3
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80081f0:	2300      	movs	r3, #0
 80081f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80081f6:	e0ce      	b.n	8008396 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80081f8:	4b71      	ldr	r3, [pc, #452]	; (80083c0 <USER_SPI_ioctl+0x2dc>)
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	f003 0304 	and.w	r3, r3, #4
 8008200:	2b00      	cmp	r3, #0
 8008202:	d031      	beq.n	8008268 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8008204:	2100      	movs	r1, #0
 8008206:	208d      	movs	r0, #141	; 0x8d
 8008208:	f7ff fd19 	bl	8007c3e <send_cmd>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	f040 80c3 	bne.w	800839a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8008214:	20ff      	movs	r0, #255	; 0xff
 8008216:	f7ff fc21 	bl	8007a5c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800821a:	f107 030c 	add.w	r3, r7, #12
 800821e:	2110      	movs	r1, #16
 8008220:	4618      	mov	r0, r3
 8008222:	f7ff fcb1 	bl	8007b88 <rcvr_datablock>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 80b6 	beq.w	800839a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800822e:	2330      	movs	r3, #48	; 0x30
 8008230:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008234:	e007      	b.n	8008246 <USER_SPI_ioctl+0x162>
 8008236:	20ff      	movs	r0, #255	; 0xff
 8008238:	f7ff fc10 	bl	8007a5c <xchg_spi>
 800823c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008240:	3b01      	subs	r3, #1
 8008242:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008246:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1f3      	bne.n	8008236 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800824e:	7dbb      	ldrb	r3, [r7, #22]
 8008250:	091b      	lsrs	r3, r3, #4
 8008252:	b2db      	uxtb	r3, r3
 8008254:	461a      	mov	r2, r3
 8008256:	2310      	movs	r3, #16
 8008258:	fa03 f202 	lsl.w	r2, r3, r2
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8008260:	2300      	movs	r3, #0
 8008262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8008266:	e098      	b.n	800839a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8008268:	2100      	movs	r1, #0
 800826a:	2009      	movs	r0, #9
 800826c:	f7ff fce7 	bl	8007c3e <send_cmd>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	f040 8091 	bne.w	800839a <USER_SPI_ioctl+0x2b6>
 8008278:	f107 030c 	add.w	r3, r7, #12
 800827c:	2110      	movs	r1, #16
 800827e:	4618      	mov	r0, r3
 8008280:	f7ff fc82 	bl	8007b88 <rcvr_datablock>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	f000 8087 	beq.w	800839a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800828c:	4b4c      	ldr	r3, [pc, #304]	; (80083c0 <USER_SPI_ioctl+0x2dc>)
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	f003 0302 	and.w	r3, r3, #2
 8008294:	2b00      	cmp	r3, #0
 8008296:	d012      	beq.n	80082be <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8008298:	7dbb      	ldrb	r3, [r7, #22]
 800829a:	005b      	lsls	r3, r3, #1
 800829c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80082a0:	7dfa      	ldrb	r2, [r7, #23]
 80082a2:	09d2      	lsrs	r2, r2, #7
 80082a4:	b2d2      	uxtb	r2, r2
 80082a6:	4413      	add	r3, r2
 80082a8:	1c5a      	adds	r2, r3, #1
 80082aa:	7e7b      	ldrb	r3, [r7, #25]
 80082ac:	099b      	lsrs	r3, r3, #6
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	3b01      	subs	r3, #1
 80082b2:	fa02 f303 	lsl.w	r3, r2, r3
 80082b6:	461a      	mov	r2, r3
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	601a      	str	r2, [r3, #0]
 80082bc:	e013      	b.n	80082e6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80082be:	7dbb      	ldrb	r3, [r7, #22]
 80082c0:	109b      	asrs	r3, r3, #2
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	f003 031f 	and.w	r3, r3, #31
 80082c8:	3301      	adds	r3, #1
 80082ca:	7dfa      	ldrb	r2, [r7, #23]
 80082cc:	00d2      	lsls	r2, r2, #3
 80082ce:	f002 0218 	and.w	r2, r2, #24
 80082d2:	7df9      	ldrb	r1, [r7, #23]
 80082d4:	0949      	lsrs	r1, r1, #5
 80082d6:	b2c9      	uxtb	r1, r1
 80082d8:	440a      	add	r2, r1
 80082da:	3201      	adds	r2, #1
 80082dc:	fb02 f303 	mul.w	r3, r2, r3
 80082e0:	461a      	mov	r2, r3
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80082ec:	e055      	b.n	800839a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80082ee:	4b34      	ldr	r3, [pc, #208]	; (80083c0 <USER_SPI_ioctl+0x2dc>)
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	f003 0306 	and.w	r3, r3, #6
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d051      	beq.n	800839e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80082fa:	f107 020c 	add.w	r2, r7, #12
 80082fe:	79fb      	ldrb	r3, [r7, #7]
 8008300:	210b      	movs	r1, #11
 8008302:	4618      	mov	r0, r3
 8008304:	f7ff feee 	bl	80080e4 <USER_SPI_ioctl>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d149      	bne.n	80083a2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800830e:	7b3b      	ldrb	r3, [r7, #12]
 8008310:	099b      	lsrs	r3, r3, #6
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	d104      	bne.n	8008322 <USER_SPI_ioctl+0x23e>
 8008318:	7dbb      	ldrb	r3, [r7, #22]
 800831a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800831e:	2b00      	cmp	r3, #0
 8008320:	d041      	beq.n	80083a6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	623b      	str	r3, [r7, #32]
 8008326:	6a3b      	ldr	r3, [r7, #32]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	62bb      	str	r3, [r7, #40]	; 0x28
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8008332:	4b23      	ldr	r3, [pc, #140]	; (80083c0 <USER_SPI_ioctl+0x2dc>)
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	f003 0308 	and.w	r3, r3, #8
 800833a:	2b00      	cmp	r3, #0
 800833c:	d105      	bne.n	800834a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800833e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008340:	025b      	lsls	r3, r3, #9
 8008342:	62bb      	str	r3, [r7, #40]	; 0x28
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	025b      	lsls	r3, r3, #9
 8008348:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800834a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800834c:	2020      	movs	r0, #32
 800834e:	f7ff fc76 	bl	8007c3e <send_cmd>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d128      	bne.n	80083aa <USER_SPI_ioctl+0x2c6>
 8008358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800835a:	2021      	movs	r0, #33	; 0x21
 800835c:	f7ff fc6f 	bl	8007c3e <send_cmd>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d121      	bne.n	80083aa <USER_SPI_ioctl+0x2c6>
 8008366:	2100      	movs	r1, #0
 8008368:	2026      	movs	r0, #38	; 0x26
 800836a:	f7ff fc68 	bl	8007c3e <send_cmd>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d11a      	bne.n	80083aa <USER_SPI_ioctl+0x2c6>
 8008374:	f247 5030 	movw	r0, #30000	; 0x7530
 8008378:	f7ff fbbd 	bl	8007af6 <wait_ready>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d013      	beq.n	80083aa <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8008382:	2300      	movs	r3, #0
 8008384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8008388:	e00f      	b.n	80083aa <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800838a:	2304      	movs	r3, #4
 800838c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008390:	e00c      	b.n	80083ac <USER_SPI_ioctl+0x2c8>
		break;
 8008392:	bf00      	nop
 8008394:	e00a      	b.n	80083ac <USER_SPI_ioctl+0x2c8>
		break;
 8008396:	bf00      	nop
 8008398:	e008      	b.n	80083ac <USER_SPI_ioctl+0x2c8>
		break;
 800839a:	bf00      	nop
 800839c:	e006      	b.n	80083ac <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800839e:	bf00      	nop
 80083a0:	e004      	b.n	80083ac <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80083a2:	bf00      	nop
 80083a4:	e002      	b.n	80083ac <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80083a6:	bf00      	nop
 80083a8:	e000      	b.n	80083ac <USER_SPI_ioctl+0x2c8>
		break;
 80083aa:	bf00      	nop
	}

	despiselect();
 80083ac:	f7ff fbc6 	bl	8007b3c <despiselect>

	return res;
 80083b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3730      	adds	r7, #48	; 0x30
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	200000ec 	.word	0x200000ec
 80083c0:	20000944 	.word	0x20000944

080083c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b087      	sub	sp, #28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	4613      	mov	r3, r2
 80083d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80083d2:	2301      	movs	r3, #1
 80083d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80083d6:	2300      	movs	r3, #0
 80083d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80083da:	4b1f      	ldr	r3, [pc, #124]	; (8008458 <FATFS_LinkDriverEx+0x94>)
 80083dc:	7a5b      	ldrb	r3, [r3, #9]
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d131      	bne.n	8008448 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80083e4:	4b1c      	ldr	r3, [pc, #112]	; (8008458 <FATFS_LinkDriverEx+0x94>)
 80083e6:	7a5b      	ldrb	r3, [r3, #9]
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	461a      	mov	r2, r3
 80083ec:	4b1a      	ldr	r3, [pc, #104]	; (8008458 <FATFS_LinkDriverEx+0x94>)
 80083ee:	2100      	movs	r1, #0
 80083f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80083f2:	4b19      	ldr	r3, [pc, #100]	; (8008458 <FATFS_LinkDriverEx+0x94>)
 80083f4:	7a5b      	ldrb	r3, [r3, #9]
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	4a17      	ldr	r2, [pc, #92]	; (8008458 <FATFS_LinkDriverEx+0x94>)
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008402:	4b15      	ldr	r3, [pc, #84]	; (8008458 <FATFS_LinkDriverEx+0x94>)
 8008404:	7a5b      	ldrb	r3, [r3, #9]
 8008406:	b2db      	uxtb	r3, r3
 8008408:	461a      	mov	r2, r3
 800840a:	4b13      	ldr	r3, [pc, #76]	; (8008458 <FATFS_LinkDriverEx+0x94>)
 800840c:	4413      	add	r3, r2
 800840e:	79fa      	ldrb	r2, [r7, #7]
 8008410:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008412:	4b11      	ldr	r3, [pc, #68]	; (8008458 <FATFS_LinkDriverEx+0x94>)
 8008414:	7a5b      	ldrb	r3, [r3, #9]
 8008416:	b2db      	uxtb	r3, r3
 8008418:	1c5a      	adds	r2, r3, #1
 800841a:	b2d1      	uxtb	r1, r2
 800841c:	4a0e      	ldr	r2, [pc, #56]	; (8008458 <FATFS_LinkDriverEx+0x94>)
 800841e:	7251      	strb	r1, [r2, #9]
 8008420:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008422:	7dbb      	ldrb	r3, [r7, #22]
 8008424:	3330      	adds	r3, #48	; 0x30
 8008426:	b2da      	uxtb	r2, r3
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	3301      	adds	r3, #1
 8008430:	223a      	movs	r2, #58	; 0x3a
 8008432:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	3302      	adds	r3, #2
 8008438:	222f      	movs	r2, #47	; 0x2f
 800843a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	3303      	adds	r3, #3
 8008440:	2200      	movs	r2, #0
 8008442:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008444:	2300      	movs	r3, #0
 8008446:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008448:	7dfb      	ldrb	r3, [r7, #23]
}
 800844a:	4618      	mov	r0, r3
 800844c:	371c      	adds	r7, #28
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	20000950 	.word	0x20000950

0800845c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008466:	2200      	movs	r2, #0
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7ff ffaa 	bl	80083c4 <FATFS_LinkDriverEx>
 8008470:	4603      	mov	r3, r0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <atoi>:
 800847a:	220a      	movs	r2, #10
 800847c:	2100      	movs	r1, #0
 800847e:	f000 b983 	b.w	8008788 <strtol>
	...

08008484 <__errno>:
 8008484:	4b01      	ldr	r3, [pc, #4]	; (800848c <__errno+0x8>)
 8008486:	6818      	ldr	r0, [r3, #0]
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	200000f0 	.word	0x200000f0

08008490 <__libc_init_array>:
 8008490:	b570      	push	{r4, r5, r6, lr}
 8008492:	4d0d      	ldr	r5, [pc, #52]	; (80084c8 <__libc_init_array+0x38>)
 8008494:	4c0d      	ldr	r4, [pc, #52]	; (80084cc <__libc_init_array+0x3c>)
 8008496:	1b64      	subs	r4, r4, r5
 8008498:	10a4      	asrs	r4, r4, #2
 800849a:	2600      	movs	r6, #0
 800849c:	42a6      	cmp	r6, r4
 800849e:	d109      	bne.n	80084b4 <__libc_init_array+0x24>
 80084a0:	4d0b      	ldr	r5, [pc, #44]	; (80084d0 <__libc_init_array+0x40>)
 80084a2:	4c0c      	ldr	r4, [pc, #48]	; (80084d4 <__libc_init_array+0x44>)
 80084a4:	f001 fb72 	bl	8009b8c <_init>
 80084a8:	1b64      	subs	r4, r4, r5
 80084aa:	10a4      	asrs	r4, r4, #2
 80084ac:	2600      	movs	r6, #0
 80084ae:	42a6      	cmp	r6, r4
 80084b0:	d105      	bne.n	80084be <__libc_init_array+0x2e>
 80084b2:	bd70      	pop	{r4, r5, r6, pc}
 80084b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b8:	4798      	blx	r3
 80084ba:	3601      	adds	r6, #1
 80084bc:	e7ee      	b.n	800849c <__libc_init_array+0xc>
 80084be:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c2:	4798      	blx	r3
 80084c4:	3601      	adds	r6, #1
 80084c6:	e7f2      	b.n	80084ae <__libc_init_array+0x1e>
 80084c8:	0800a2a4 	.word	0x0800a2a4
 80084cc:	0800a2a4 	.word	0x0800a2a4
 80084d0:	0800a2a4 	.word	0x0800a2a4
 80084d4:	0800a2a8 	.word	0x0800a2a8

080084d8 <__itoa>:
 80084d8:	1e93      	subs	r3, r2, #2
 80084da:	2b22      	cmp	r3, #34	; 0x22
 80084dc:	b510      	push	{r4, lr}
 80084de:	460c      	mov	r4, r1
 80084e0:	d904      	bls.n	80084ec <__itoa+0x14>
 80084e2:	2300      	movs	r3, #0
 80084e4:	700b      	strb	r3, [r1, #0]
 80084e6:	461c      	mov	r4, r3
 80084e8:	4620      	mov	r0, r4
 80084ea:	bd10      	pop	{r4, pc}
 80084ec:	2a0a      	cmp	r2, #10
 80084ee:	d109      	bne.n	8008504 <__itoa+0x2c>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	da07      	bge.n	8008504 <__itoa+0x2c>
 80084f4:	232d      	movs	r3, #45	; 0x2d
 80084f6:	700b      	strb	r3, [r1, #0]
 80084f8:	4240      	negs	r0, r0
 80084fa:	2101      	movs	r1, #1
 80084fc:	4421      	add	r1, r4
 80084fe:	f000 f94d 	bl	800879c <__utoa>
 8008502:	e7f1      	b.n	80084e8 <__itoa+0x10>
 8008504:	2100      	movs	r1, #0
 8008506:	e7f9      	b.n	80084fc <__itoa+0x24>

08008508 <itoa>:
 8008508:	f7ff bfe6 	b.w	80084d8 <__itoa>

0800850c <memset>:
 800850c:	4402      	add	r2, r0
 800850e:	4603      	mov	r3, r0
 8008510:	4293      	cmp	r3, r2
 8008512:	d100      	bne.n	8008516 <memset+0xa>
 8008514:	4770      	bx	lr
 8008516:	f803 1b01 	strb.w	r1, [r3], #1
 800851a:	e7f9      	b.n	8008510 <memset+0x4>

0800851c <siprintf>:
 800851c:	b40e      	push	{r1, r2, r3}
 800851e:	b500      	push	{lr}
 8008520:	b09c      	sub	sp, #112	; 0x70
 8008522:	ab1d      	add	r3, sp, #116	; 0x74
 8008524:	9002      	str	r0, [sp, #8]
 8008526:	9006      	str	r0, [sp, #24]
 8008528:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800852c:	4809      	ldr	r0, [pc, #36]	; (8008554 <siprintf+0x38>)
 800852e:	9107      	str	r1, [sp, #28]
 8008530:	9104      	str	r1, [sp, #16]
 8008532:	4909      	ldr	r1, [pc, #36]	; (8008558 <siprintf+0x3c>)
 8008534:	f853 2b04 	ldr.w	r2, [r3], #4
 8008538:	9105      	str	r1, [sp, #20]
 800853a:	6800      	ldr	r0, [r0, #0]
 800853c:	9301      	str	r3, [sp, #4]
 800853e:	a902      	add	r1, sp, #8
 8008540:	f000 fae2 	bl	8008b08 <_svfiprintf_r>
 8008544:	9b02      	ldr	r3, [sp, #8]
 8008546:	2200      	movs	r2, #0
 8008548:	701a      	strb	r2, [r3, #0]
 800854a:	b01c      	add	sp, #112	; 0x70
 800854c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008550:	b003      	add	sp, #12
 8008552:	4770      	bx	lr
 8008554:	200000f0 	.word	0x200000f0
 8008558:	ffff0208 	.word	0xffff0208

0800855c <strcat>:
 800855c:	b510      	push	{r4, lr}
 800855e:	4602      	mov	r2, r0
 8008560:	7814      	ldrb	r4, [r2, #0]
 8008562:	4613      	mov	r3, r2
 8008564:	3201      	adds	r2, #1
 8008566:	2c00      	cmp	r4, #0
 8008568:	d1fa      	bne.n	8008560 <strcat+0x4>
 800856a:	3b01      	subs	r3, #1
 800856c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008570:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008574:	2a00      	cmp	r2, #0
 8008576:	d1f9      	bne.n	800856c <strcat+0x10>
 8008578:	bd10      	pop	{r4, pc}

0800857a <strncpy>:
 800857a:	b510      	push	{r4, lr}
 800857c:	3901      	subs	r1, #1
 800857e:	4603      	mov	r3, r0
 8008580:	b132      	cbz	r2, 8008590 <strncpy+0x16>
 8008582:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008586:	f803 4b01 	strb.w	r4, [r3], #1
 800858a:	3a01      	subs	r2, #1
 800858c:	2c00      	cmp	r4, #0
 800858e:	d1f7      	bne.n	8008580 <strncpy+0x6>
 8008590:	441a      	add	r2, r3
 8008592:	2100      	movs	r1, #0
 8008594:	4293      	cmp	r3, r2
 8008596:	d100      	bne.n	800859a <strncpy+0x20>
 8008598:	bd10      	pop	{r4, pc}
 800859a:	f803 1b01 	strb.w	r1, [r3], #1
 800859e:	e7f9      	b.n	8008594 <strncpy+0x1a>

080085a0 <strstr>:
 80085a0:	780a      	ldrb	r2, [r1, #0]
 80085a2:	b570      	push	{r4, r5, r6, lr}
 80085a4:	b96a      	cbnz	r2, 80085c2 <strstr+0x22>
 80085a6:	bd70      	pop	{r4, r5, r6, pc}
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d109      	bne.n	80085c0 <strstr+0x20>
 80085ac:	460c      	mov	r4, r1
 80085ae:	4605      	mov	r5, r0
 80085b0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d0f6      	beq.n	80085a6 <strstr+0x6>
 80085b8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80085bc:	429e      	cmp	r6, r3
 80085be:	d0f7      	beq.n	80085b0 <strstr+0x10>
 80085c0:	3001      	adds	r0, #1
 80085c2:	7803      	ldrb	r3, [r0, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1ef      	bne.n	80085a8 <strstr+0x8>
 80085c8:	4618      	mov	r0, r3
 80085ca:	e7ec      	b.n	80085a6 <strstr+0x6>

080085cc <strtok>:
 80085cc:	4b16      	ldr	r3, [pc, #88]	; (8008628 <strtok+0x5c>)
 80085ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085d0:	681e      	ldr	r6, [r3, #0]
 80085d2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80085d4:	4605      	mov	r5, r0
 80085d6:	b9fc      	cbnz	r4, 8008618 <strtok+0x4c>
 80085d8:	2050      	movs	r0, #80	; 0x50
 80085da:	9101      	str	r1, [sp, #4]
 80085dc:	f000 f950 	bl	8008880 <malloc>
 80085e0:	9901      	ldr	r1, [sp, #4]
 80085e2:	65b0      	str	r0, [r6, #88]	; 0x58
 80085e4:	4602      	mov	r2, r0
 80085e6:	b920      	cbnz	r0, 80085f2 <strtok+0x26>
 80085e8:	4b10      	ldr	r3, [pc, #64]	; (800862c <strtok+0x60>)
 80085ea:	4811      	ldr	r0, [pc, #68]	; (8008630 <strtok+0x64>)
 80085ec:	2157      	movs	r1, #87	; 0x57
 80085ee:	f000 f917 	bl	8008820 <__assert_func>
 80085f2:	e9c0 4400 	strd	r4, r4, [r0]
 80085f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80085fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80085fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008602:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008606:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800860a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800860e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008612:	6184      	str	r4, [r0, #24]
 8008614:	7704      	strb	r4, [r0, #28]
 8008616:	6244      	str	r4, [r0, #36]	; 0x24
 8008618:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800861a:	2301      	movs	r3, #1
 800861c:	4628      	mov	r0, r5
 800861e:	b002      	add	sp, #8
 8008620:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008624:	f000 b806 	b.w	8008634 <__strtok_r>
 8008628:	200000f0 	.word	0x200000f0
 800862c:	0800a030 	.word	0x0800a030
 8008630:	0800a047 	.word	0x0800a047

08008634 <__strtok_r>:
 8008634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008636:	b908      	cbnz	r0, 800863c <__strtok_r+0x8>
 8008638:	6810      	ldr	r0, [r2, #0]
 800863a:	b188      	cbz	r0, 8008660 <__strtok_r+0x2c>
 800863c:	4604      	mov	r4, r0
 800863e:	4620      	mov	r0, r4
 8008640:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008644:	460f      	mov	r7, r1
 8008646:	f817 6b01 	ldrb.w	r6, [r7], #1
 800864a:	b91e      	cbnz	r6, 8008654 <__strtok_r+0x20>
 800864c:	b965      	cbnz	r5, 8008668 <__strtok_r+0x34>
 800864e:	6015      	str	r5, [r2, #0]
 8008650:	4628      	mov	r0, r5
 8008652:	e005      	b.n	8008660 <__strtok_r+0x2c>
 8008654:	42b5      	cmp	r5, r6
 8008656:	d1f6      	bne.n	8008646 <__strtok_r+0x12>
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1f0      	bne.n	800863e <__strtok_r+0xa>
 800865c:	6014      	str	r4, [r2, #0]
 800865e:	7003      	strb	r3, [r0, #0]
 8008660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008662:	461c      	mov	r4, r3
 8008664:	e00c      	b.n	8008680 <__strtok_r+0x4c>
 8008666:	b915      	cbnz	r5, 800866e <__strtok_r+0x3a>
 8008668:	f814 3b01 	ldrb.w	r3, [r4], #1
 800866c:	460e      	mov	r6, r1
 800866e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008672:	42ab      	cmp	r3, r5
 8008674:	d1f7      	bne.n	8008666 <__strtok_r+0x32>
 8008676:	2b00      	cmp	r3, #0
 8008678:	d0f3      	beq.n	8008662 <__strtok_r+0x2e>
 800867a:	2300      	movs	r3, #0
 800867c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008680:	6014      	str	r4, [r2, #0]
 8008682:	e7ed      	b.n	8008660 <__strtok_r+0x2c>

08008684 <_strtol_l.constprop.0>:
 8008684:	2b01      	cmp	r3, #1
 8008686:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800868a:	d001      	beq.n	8008690 <_strtol_l.constprop.0+0xc>
 800868c:	2b24      	cmp	r3, #36	; 0x24
 800868e:	d906      	bls.n	800869e <_strtol_l.constprop.0+0x1a>
 8008690:	f7ff fef8 	bl	8008484 <__errno>
 8008694:	2316      	movs	r3, #22
 8008696:	6003      	str	r3, [r0, #0]
 8008698:	2000      	movs	r0, #0
 800869a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800869e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008784 <_strtol_l.constprop.0+0x100>
 80086a2:	460d      	mov	r5, r1
 80086a4:	462e      	mov	r6, r5
 80086a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086aa:	f814 700c 	ldrb.w	r7, [r4, ip]
 80086ae:	f017 0708 	ands.w	r7, r7, #8
 80086b2:	d1f7      	bne.n	80086a4 <_strtol_l.constprop.0+0x20>
 80086b4:	2c2d      	cmp	r4, #45	; 0x2d
 80086b6:	d132      	bne.n	800871e <_strtol_l.constprop.0+0x9a>
 80086b8:	782c      	ldrb	r4, [r5, #0]
 80086ba:	2701      	movs	r7, #1
 80086bc:	1cb5      	adds	r5, r6, #2
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d05b      	beq.n	800877a <_strtol_l.constprop.0+0xf6>
 80086c2:	2b10      	cmp	r3, #16
 80086c4:	d109      	bne.n	80086da <_strtol_l.constprop.0+0x56>
 80086c6:	2c30      	cmp	r4, #48	; 0x30
 80086c8:	d107      	bne.n	80086da <_strtol_l.constprop.0+0x56>
 80086ca:	782c      	ldrb	r4, [r5, #0]
 80086cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80086d0:	2c58      	cmp	r4, #88	; 0x58
 80086d2:	d14d      	bne.n	8008770 <_strtol_l.constprop.0+0xec>
 80086d4:	786c      	ldrb	r4, [r5, #1]
 80086d6:	2310      	movs	r3, #16
 80086d8:	3502      	adds	r5, #2
 80086da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80086de:	f108 38ff 	add.w	r8, r8, #4294967295
 80086e2:	f04f 0c00 	mov.w	ip, #0
 80086e6:	fbb8 f9f3 	udiv	r9, r8, r3
 80086ea:	4666      	mov	r6, ip
 80086ec:	fb03 8a19 	mls	sl, r3, r9, r8
 80086f0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80086f4:	f1be 0f09 	cmp.w	lr, #9
 80086f8:	d816      	bhi.n	8008728 <_strtol_l.constprop.0+0xa4>
 80086fa:	4674      	mov	r4, lr
 80086fc:	42a3      	cmp	r3, r4
 80086fe:	dd24      	ble.n	800874a <_strtol_l.constprop.0+0xc6>
 8008700:	f1bc 0f00 	cmp.w	ip, #0
 8008704:	db1e      	blt.n	8008744 <_strtol_l.constprop.0+0xc0>
 8008706:	45b1      	cmp	r9, r6
 8008708:	d31c      	bcc.n	8008744 <_strtol_l.constprop.0+0xc0>
 800870a:	d101      	bne.n	8008710 <_strtol_l.constprop.0+0x8c>
 800870c:	45a2      	cmp	sl, r4
 800870e:	db19      	blt.n	8008744 <_strtol_l.constprop.0+0xc0>
 8008710:	fb06 4603 	mla	r6, r6, r3, r4
 8008714:	f04f 0c01 	mov.w	ip, #1
 8008718:	f815 4b01 	ldrb.w	r4, [r5], #1
 800871c:	e7e8      	b.n	80086f0 <_strtol_l.constprop.0+0x6c>
 800871e:	2c2b      	cmp	r4, #43	; 0x2b
 8008720:	bf04      	itt	eq
 8008722:	782c      	ldrbeq	r4, [r5, #0]
 8008724:	1cb5      	addeq	r5, r6, #2
 8008726:	e7ca      	b.n	80086be <_strtol_l.constprop.0+0x3a>
 8008728:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800872c:	f1be 0f19 	cmp.w	lr, #25
 8008730:	d801      	bhi.n	8008736 <_strtol_l.constprop.0+0xb2>
 8008732:	3c37      	subs	r4, #55	; 0x37
 8008734:	e7e2      	b.n	80086fc <_strtol_l.constprop.0+0x78>
 8008736:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800873a:	f1be 0f19 	cmp.w	lr, #25
 800873e:	d804      	bhi.n	800874a <_strtol_l.constprop.0+0xc6>
 8008740:	3c57      	subs	r4, #87	; 0x57
 8008742:	e7db      	b.n	80086fc <_strtol_l.constprop.0+0x78>
 8008744:	f04f 3cff 	mov.w	ip, #4294967295
 8008748:	e7e6      	b.n	8008718 <_strtol_l.constprop.0+0x94>
 800874a:	f1bc 0f00 	cmp.w	ip, #0
 800874e:	da05      	bge.n	800875c <_strtol_l.constprop.0+0xd8>
 8008750:	2322      	movs	r3, #34	; 0x22
 8008752:	6003      	str	r3, [r0, #0]
 8008754:	4646      	mov	r6, r8
 8008756:	b942      	cbnz	r2, 800876a <_strtol_l.constprop.0+0xe6>
 8008758:	4630      	mov	r0, r6
 800875a:	e79e      	b.n	800869a <_strtol_l.constprop.0+0x16>
 800875c:	b107      	cbz	r7, 8008760 <_strtol_l.constprop.0+0xdc>
 800875e:	4276      	negs	r6, r6
 8008760:	2a00      	cmp	r2, #0
 8008762:	d0f9      	beq.n	8008758 <_strtol_l.constprop.0+0xd4>
 8008764:	f1bc 0f00 	cmp.w	ip, #0
 8008768:	d000      	beq.n	800876c <_strtol_l.constprop.0+0xe8>
 800876a:	1e69      	subs	r1, r5, #1
 800876c:	6011      	str	r1, [r2, #0]
 800876e:	e7f3      	b.n	8008758 <_strtol_l.constprop.0+0xd4>
 8008770:	2430      	movs	r4, #48	; 0x30
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1b1      	bne.n	80086da <_strtol_l.constprop.0+0x56>
 8008776:	2308      	movs	r3, #8
 8008778:	e7af      	b.n	80086da <_strtol_l.constprop.0+0x56>
 800877a:	2c30      	cmp	r4, #48	; 0x30
 800877c:	d0a5      	beq.n	80086ca <_strtol_l.constprop.0+0x46>
 800877e:	230a      	movs	r3, #10
 8008780:	e7ab      	b.n	80086da <_strtol_l.constprop.0+0x56>
 8008782:	bf00      	nop
 8008784:	0800a106 	.word	0x0800a106

08008788 <strtol>:
 8008788:	4613      	mov	r3, r2
 800878a:	460a      	mov	r2, r1
 800878c:	4601      	mov	r1, r0
 800878e:	4802      	ldr	r0, [pc, #8]	; (8008798 <strtol+0x10>)
 8008790:	6800      	ldr	r0, [r0, #0]
 8008792:	f7ff bf77 	b.w	8008684 <_strtol_l.constprop.0>
 8008796:	bf00      	nop
 8008798:	200000f0 	.word	0x200000f0

0800879c <__utoa>:
 800879c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800879e:	4c1f      	ldr	r4, [pc, #124]	; (800881c <__utoa+0x80>)
 80087a0:	b08b      	sub	sp, #44	; 0x2c
 80087a2:	4605      	mov	r5, r0
 80087a4:	460b      	mov	r3, r1
 80087a6:	466e      	mov	r6, sp
 80087a8:	f104 0c20 	add.w	ip, r4, #32
 80087ac:	6820      	ldr	r0, [r4, #0]
 80087ae:	6861      	ldr	r1, [r4, #4]
 80087b0:	4637      	mov	r7, r6
 80087b2:	c703      	stmia	r7!, {r0, r1}
 80087b4:	3408      	adds	r4, #8
 80087b6:	4564      	cmp	r4, ip
 80087b8:	463e      	mov	r6, r7
 80087ba:	d1f7      	bne.n	80087ac <__utoa+0x10>
 80087bc:	7921      	ldrb	r1, [r4, #4]
 80087be:	7139      	strb	r1, [r7, #4]
 80087c0:	1e91      	subs	r1, r2, #2
 80087c2:	6820      	ldr	r0, [r4, #0]
 80087c4:	6038      	str	r0, [r7, #0]
 80087c6:	2922      	cmp	r1, #34	; 0x22
 80087c8:	f04f 0100 	mov.w	r1, #0
 80087cc:	d904      	bls.n	80087d8 <__utoa+0x3c>
 80087ce:	7019      	strb	r1, [r3, #0]
 80087d0:	460b      	mov	r3, r1
 80087d2:	4618      	mov	r0, r3
 80087d4:	b00b      	add	sp, #44	; 0x2c
 80087d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087d8:	1e58      	subs	r0, r3, #1
 80087da:	4684      	mov	ip, r0
 80087dc:	fbb5 f7f2 	udiv	r7, r5, r2
 80087e0:	fb02 5617 	mls	r6, r2, r7, r5
 80087e4:	3628      	adds	r6, #40	; 0x28
 80087e6:	446e      	add	r6, sp
 80087e8:	460c      	mov	r4, r1
 80087ea:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80087ee:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80087f2:	462e      	mov	r6, r5
 80087f4:	42b2      	cmp	r2, r6
 80087f6:	f101 0101 	add.w	r1, r1, #1
 80087fa:	463d      	mov	r5, r7
 80087fc:	d9ee      	bls.n	80087dc <__utoa+0x40>
 80087fe:	2200      	movs	r2, #0
 8008800:	545a      	strb	r2, [r3, r1]
 8008802:	1919      	adds	r1, r3, r4
 8008804:	1aa5      	subs	r5, r4, r2
 8008806:	42aa      	cmp	r2, r5
 8008808:	dae3      	bge.n	80087d2 <__utoa+0x36>
 800880a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800880e:	780e      	ldrb	r6, [r1, #0]
 8008810:	7006      	strb	r6, [r0, #0]
 8008812:	3201      	adds	r2, #1
 8008814:	f801 5901 	strb.w	r5, [r1], #-1
 8008818:	e7f4      	b.n	8008804 <__utoa+0x68>
 800881a:	bf00      	nop
 800881c:	0800a0a4 	.word	0x0800a0a4

08008820 <__assert_func>:
 8008820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008822:	4614      	mov	r4, r2
 8008824:	461a      	mov	r2, r3
 8008826:	4b09      	ldr	r3, [pc, #36]	; (800884c <__assert_func+0x2c>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4605      	mov	r5, r0
 800882c:	68d8      	ldr	r0, [r3, #12]
 800882e:	b14c      	cbz	r4, 8008844 <__assert_func+0x24>
 8008830:	4b07      	ldr	r3, [pc, #28]	; (8008850 <__assert_func+0x30>)
 8008832:	9100      	str	r1, [sp, #0]
 8008834:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008838:	4906      	ldr	r1, [pc, #24]	; (8008854 <__assert_func+0x34>)
 800883a:	462b      	mov	r3, r5
 800883c:	f000 f80e 	bl	800885c <fiprintf>
 8008840:	f000 fe20 	bl	8009484 <abort>
 8008844:	4b04      	ldr	r3, [pc, #16]	; (8008858 <__assert_func+0x38>)
 8008846:	461c      	mov	r4, r3
 8008848:	e7f3      	b.n	8008832 <__assert_func+0x12>
 800884a:	bf00      	nop
 800884c:	200000f0 	.word	0x200000f0
 8008850:	0800a0c9 	.word	0x0800a0c9
 8008854:	0800a0d6 	.word	0x0800a0d6
 8008858:	0800a104 	.word	0x0800a104

0800885c <fiprintf>:
 800885c:	b40e      	push	{r1, r2, r3}
 800885e:	b503      	push	{r0, r1, lr}
 8008860:	4601      	mov	r1, r0
 8008862:	ab03      	add	r3, sp, #12
 8008864:	4805      	ldr	r0, [pc, #20]	; (800887c <fiprintf+0x20>)
 8008866:	f853 2b04 	ldr.w	r2, [r3], #4
 800886a:	6800      	ldr	r0, [r0, #0]
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	f000 fa75 	bl	8008d5c <_vfiprintf_r>
 8008872:	b002      	add	sp, #8
 8008874:	f85d eb04 	ldr.w	lr, [sp], #4
 8008878:	b003      	add	sp, #12
 800887a:	4770      	bx	lr
 800887c:	200000f0 	.word	0x200000f0

08008880 <malloc>:
 8008880:	4b02      	ldr	r3, [pc, #8]	; (800888c <malloc+0xc>)
 8008882:	4601      	mov	r1, r0
 8008884:	6818      	ldr	r0, [r3, #0]
 8008886:	f000 b86f 	b.w	8008968 <_malloc_r>
 800888a:	bf00      	nop
 800888c:	200000f0 	.word	0x200000f0

08008890 <_free_r>:
 8008890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008892:	2900      	cmp	r1, #0
 8008894:	d044      	beq.n	8008920 <_free_r+0x90>
 8008896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800889a:	9001      	str	r0, [sp, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	f1a1 0404 	sub.w	r4, r1, #4
 80088a2:	bfb8      	it	lt
 80088a4:	18e4      	addlt	r4, r4, r3
 80088a6:	f001 f83d 	bl	8009924 <__malloc_lock>
 80088aa:	4a1e      	ldr	r2, [pc, #120]	; (8008924 <_free_r+0x94>)
 80088ac:	9801      	ldr	r0, [sp, #4]
 80088ae:	6813      	ldr	r3, [r2, #0]
 80088b0:	b933      	cbnz	r3, 80088c0 <_free_r+0x30>
 80088b2:	6063      	str	r3, [r4, #4]
 80088b4:	6014      	str	r4, [r2, #0]
 80088b6:	b003      	add	sp, #12
 80088b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088bc:	f001 b838 	b.w	8009930 <__malloc_unlock>
 80088c0:	42a3      	cmp	r3, r4
 80088c2:	d908      	bls.n	80088d6 <_free_r+0x46>
 80088c4:	6825      	ldr	r5, [r4, #0]
 80088c6:	1961      	adds	r1, r4, r5
 80088c8:	428b      	cmp	r3, r1
 80088ca:	bf01      	itttt	eq
 80088cc:	6819      	ldreq	r1, [r3, #0]
 80088ce:	685b      	ldreq	r3, [r3, #4]
 80088d0:	1949      	addeq	r1, r1, r5
 80088d2:	6021      	streq	r1, [r4, #0]
 80088d4:	e7ed      	b.n	80088b2 <_free_r+0x22>
 80088d6:	461a      	mov	r2, r3
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	b10b      	cbz	r3, 80088e0 <_free_r+0x50>
 80088dc:	42a3      	cmp	r3, r4
 80088de:	d9fa      	bls.n	80088d6 <_free_r+0x46>
 80088e0:	6811      	ldr	r1, [r2, #0]
 80088e2:	1855      	adds	r5, r2, r1
 80088e4:	42a5      	cmp	r5, r4
 80088e6:	d10b      	bne.n	8008900 <_free_r+0x70>
 80088e8:	6824      	ldr	r4, [r4, #0]
 80088ea:	4421      	add	r1, r4
 80088ec:	1854      	adds	r4, r2, r1
 80088ee:	42a3      	cmp	r3, r4
 80088f0:	6011      	str	r1, [r2, #0]
 80088f2:	d1e0      	bne.n	80088b6 <_free_r+0x26>
 80088f4:	681c      	ldr	r4, [r3, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	6053      	str	r3, [r2, #4]
 80088fa:	4421      	add	r1, r4
 80088fc:	6011      	str	r1, [r2, #0]
 80088fe:	e7da      	b.n	80088b6 <_free_r+0x26>
 8008900:	d902      	bls.n	8008908 <_free_r+0x78>
 8008902:	230c      	movs	r3, #12
 8008904:	6003      	str	r3, [r0, #0]
 8008906:	e7d6      	b.n	80088b6 <_free_r+0x26>
 8008908:	6825      	ldr	r5, [r4, #0]
 800890a:	1961      	adds	r1, r4, r5
 800890c:	428b      	cmp	r3, r1
 800890e:	bf04      	itt	eq
 8008910:	6819      	ldreq	r1, [r3, #0]
 8008912:	685b      	ldreq	r3, [r3, #4]
 8008914:	6063      	str	r3, [r4, #4]
 8008916:	bf04      	itt	eq
 8008918:	1949      	addeq	r1, r1, r5
 800891a:	6021      	streq	r1, [r4, #0]
 800891c:	6054      	str	r4, [r2, #4]
 800891e:	e7ca      	b.n	80088b6 <_free_r+0x26>
 8008920:	b003      	add	sp, #12
 8008922:	bd30      	pop	{r4, r5, pc}
 8008924:	2000095c 	.word	0x2000095c

08008928 <sbrk_aligned>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	4e0e      	ldr	r6, [pc, #56]	; (8008964 <sbrk_aligned+0x3c>)
 800892c:	460c      	mov	r4, r1
 800892e:	6831      	ldr	r1, [r6, #0]
 8008930:	4605      	mov	r5, r0
 8008932:	b911      	cbnz	r1, 800893a <sbrk_aligned+0x12>
 8008934:	f000 fcd6 	bl	80092e4 <_sbrk_r>
 8008938:	6030      	str	r0, [r6, #0]
 800893a:	4621      	mov	r1, r4
 800893c:	4628      	mov	r0, r5
 800893e:	f000 fcd1 	bl	80092e4 <_sbrk_r>
 8008942:	1c43      	adds	r3, r0, #1
 8008944:	d00a      	beq.n	800895c <sbrk_aligned+0x34>
 8008946:	1cc4      	adds	r4, r0, #3
 8008948:	f024 0403 	bic.w	r4, r4, #3
 800894c:	42a0      	cmp	r0, r4
 800894e:	d007      	beq.n	8008960 <sbrk_aligned+0x38>
 8008950:	1a21      	subs	r1, r4, r0
 8008952:	4628      	mov	r0, r5
 8008954:	f000 fcc6 	bl	80092e4 <_sbrk_r>
 8008958:	3001      	adds	r0, #1
 800895a:	d101      	bne.n	8008960 <sbrk_aligned+0x38>
 800895c:	f04f 34ff 	mov.w	r4, #4294967295
 8008960:	4620      	mov	r0, r4
 8008962:	bd70      	pop	{r4, r5, r6, pc}
 8008964:	20000960 	.word	0x20000960

08008968 <_malloc_r>:
 8008968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800896c:	1ccd      	adds	r5, r1, #3
 800896e:	f025 0503 	bic.w	r5, r5, #3
 8008972:	3508      	adds	r5, #8
 8008974:	2d0c      	cmp	r5, #12
 8008976:	bf38      	it	cc
 8008978:	250c      	movcc	r5, #12
 800897a:	2d00      	cmp	r5, #0
 800897c:	4607      	mov	r7, r0
 800897e:	db01      	blt.n	8008984 <_malloc_r+0x1c>
 8008980:	42a9      	cmp	r1, r5
 8008982:	d905      	bls.n	8008990 <_malloc_r+0x28>
 8008984:	230c      	movs	r3, #12
 8008986:	603b      	str	r3, [r7, #0]
 8008988:	2600      	movs	r6, #0
 800898a:	4630      	mov	r0, r6
 800898c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008990:	4e2e      	ldr	r6, [pc, #184]	; (8008a4c <_malloc_r+0xe4>)
 8008992:	f000 ffc7 	bl	8009924 <__malloc_lock>
 8008996:	6833      	ldr	r3, [r6, #0]
 8008998:	461c      	mov	r4, r3
 800899a:	bb34      	cbnz	r4, 80089ea <_malloc_r+0x82>
 800899c:	4629      	mov	r1, r5
 800899e:	4638      	mov	r0, r7
 80089a0:	f7ff ffc2 	bl	8008928 <sbrk_aligned>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	4604      	mov	r4, r0
 80089a8:	d14d      	bne.n	8008a46 <_malloc_r+0xde>
 80089aa:	6834      	ldr	r4, [r6, #0]
 80089ac:	4626      	mov	r6, r4
 80089ae:	2e00      	cmp	r6, #0
 80089b0:	d140      	bne.n	8008a34 <_malloc_r+0xcc>
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	4631      	mov	r1, r6
 80089b6:	4638      	mov	r0, r7
 80089b8:	eb04 0803 	add.w	r8, r4, r3
 80089bc:	f000 fc92 	bl	80092e4 <_sbrk_r>
 80089c0:	4580      	cmp	r8, r0
 80089c2:	d13a      	bne.n	8008a3a <_malloc_r+0xd2>
 80089c4:	6821      	ldr	r1, [r4, #0]
 80089c6:	3503      	adds	r5, #3
 80089c8:	1a6d      	subs	r5, r5, r1
 80089ca:	f025 0503 	bic.w	r5, r5, #3
 80089ce:	3508      	adds	r5, #8
 80089d0:	2d0c      	cmp	r5, #12
 80089d2:	bf38      	it	cc
 80089d4:	250c      	movcc	r5, #12
 80089d6:	4629      	mov	r1, r5
 80089d8:	4638      	mov	r0, r7
 80089da:	f7ff ffa5 	bl	8008928 <sbrk_aligned>
 80089de:	3001      	adds	r0, #1
 80089e0:	d02b      	beq.n	8008a3a <_malloc_r+0xd2>
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	442b      	add	r3, r5
 80089e6:	6023      	str	r3, [r4, #0]
 80089e8:	e00e      	b.n	8008a08 <_malloc_r+0xa0>
 80089ea:	6822      	ldr	r2, [r4, #0]
 80089ec:	1b52      	subs	r2, r2, r5
 80089ee:	d41e      	bmi.n	8008a2e <_malloc_r+0xc6>
 80089f0:	2a0b      	cmp	r2, #11
 80089f2:	d916      	bls.n	8008a22 <_malloc_r+0xba>
 80089f4:	1961      	adds	r1, r4, r5
 80089f6:	42a3      	cmp	r3, r4
 80089f8:	6025      	str	r5, [r4, #0]
 80089fa:	bf18      	it	ne
 80089fc:	6059      	strne	r1, [r3, #4]
 80089fe:	6863      	ldr	r3, [r4, #4]
 8008a00:	bf08      	it	eq
 8008a02:	6031      	streq	r1, [r6, #0]
 8008a04:	5162      	str	r2, [r4, r5]
 8008a06:	604b      	str	r3, [r1, #4]
 8008a08:	4638      	mov	r0, r7
 8008a0a:	f104 060b 	add.w	r6, r4, #11
 8008a0e:	f000 ff8f 	bl	8009930 <__malloc_unlock>
 8008a12:	f026 0607 	bic.w	r6, r6, #7
 8008a16:	1d23      	adds	r3, r4, #4
 8008a18:	1af2      	subs	r2, r6, r3
 8008a1a:	d0b6      	beq.n	800898a <_malloc_r+0x22>
 8008a1c:	1b9b      	subs	r3, r3, r6
 8008a1e:	50a3      	str	r3, [r4, r2]
 8008a20:	e7b3      	b.n	800898a <_malloc_r+0x22>
 8008a22:	6862      	ldr	r2, [r4, #4]
 8008a24:	42a3      	cmp	r3, r4
 8008a26:	bf0c      	ite	eq
 8008a28:	6032      	streq	r2, [r6, #0]
 8008a2a:	605a      	strne	r2, [r3, #4]
 8008a2c:	e7ec      	b.n	8008a08 <_malloc_r+0xa0>
 8008a2e:	4623      	mov	r3, r4
 8008a30:	6864      	ldr	r4, [r4, #4]
 8008a32:	e7b2      	b.n	800899a <_malloc_r+0x32>
 8008a34:	4634      	mov	r4, r6
 8008a36:	6876      	ldr	r6, [r6, #4]
 8008a38:	e7b9      	b.n	80089ae <_malloc_r+0x46>
 8008a3a:	230c      	movs	r3, #12
 8008a3c:	603b      	str	r3, [r7, #0]
 8008a3e:	4638      	mov	r0, r7
 8008a40:	f000 ff76 	bl	8009930 <__malloc_unlock>
 8008a44:	e7a1      	b.n	800898a <_malloc_r+0x22>
 8008a46:	6025      	str	r5, [r4, #0]
 8008a48:	e7de      	b.n	8008a08 <_malloc_r+0xa0>
 8008a4a:	bf00      	nop
 8008a4c:	2000095c 	.word	0x2000095c

08008a50 <__ssputs_r>:
 8008a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a54:	688e      	ldr	r6, [r1, #8]
 8008a56:	429e      	cmp	r6, r3
 8008a58:	4682      	mov	sl, r0
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	4690      	mov	r8, r2
 8008a5e:	461f      	mov	r7, r3
 8008a60:	d838      	bhi.n	8008ad4 <__ssputs_r+0x84>
 8008a62:	898a      	ldrh	r2, [r1, #12]
 8008a64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a68:	d032      	beq.n	8008ad0 <__ssputs_r+0x80>
 8008a6a:	6825      	ldr	r5, [r4, #0]
 8008a6c:	6909      	ldr	r1, [r1, #16]
 8008a6e:	eba5 0901 	sub.w	r9, r5, r1
 8008a72:	6965      	ldr	r5, [r4, #20]
 8008a74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	444b      	add	r3, r9
 8008a80:	106d      	asrs	r5, r5, #1
 8008a82:	429d      	cmp	r5, r3
 8008a84:	bf38      	it	cc
 8008a86:	461d      	movcc	r5, r3
 8008a88:	0553      	lsls	r3, r2, #21
 8008a8a:	d531      	bpl.n	8008af0 <__ssputs_r+0xa0>
 8008a8c:	4629      	mov	r1, r5
 8008a8e:	f7ff ff6b 	bl	8008968 <_malloc_r>
 8008a92:	4606      	mov	r6, r0
 8008a94:	b950      	cbnz	r0, 8008aac <__ssputs_r+0x5c>
 8008a96:	230c      	movs	r3, #12
 8008a98:	f8ca 3000 	str.w	r3, [sl]
 8008a9c:	89a3      	ldrh	r3, [r4, #12]
 8008a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aa2:	81a3      	strh	r3, [r4, #12]
 8008aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aac:	6921      	ldr	r1, [r4, #16]
 8008aae:	464a      	mov	r2, r9
 8008ab0:	f000 ff10 	bl	80098d4 <memcpy>
 8008ab4:	89a3      	ldrh	r3, [r4, #12]
 8008ab6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008abe:	81a3      	strh	r3, [r4, #12]
 8008ac0:	6126      	str	r6, [r4, #16]
 8008ac2:	6165      	str	r5, [r4, #20]
 8008ac4:	444e      	add	r6, r9
 8008ac6:	eba5 0509 	sub.w	r5, r5, r9
 8008aca:	6026      	str	r6, [r4, #0]
 8008acc:	60a5      	str	r5, [r4, #8]
 8008ace:	463e      	mov	r6, r7
 8008ad0:	42be      	cmp	r6, r7
 8008ad2:	d900      	bls.n	8008ad6 <__ssputs_r+0x86>
 8008ad4:	463e      	mov	r6, r7
 8008ad6:	6820      	ldr	r0, [r4, #0]
 8008ad8:	4632      	mov	r2, r6
 8008ada:	4641      	mov	r1, r8
 8008adc:	f000 ff08 	bl	80098f0 <memmove>
 8008ae0:	68a3      	ldr	r3, [r4, #8]
 8008ae2:	1b9b      	subs	r3, r3, r6
 8008ae4:	60a3      	str	r3, [r4, #8]
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	4433      	add	r3, r6
 8008aea:	6023      	str	r3, [r4, #0]
 8008aec:	2000      	movs	r0, #0
 8008aee:	e7db      	b.n	8008aa8 <__ssputs_r+0x58>
 8008af0:	462a      	mov	r2, r5
 8008af2:	f000 ff23 	bl	800993c <_realloc_r>
 8008af6:	4606      	mov	r6, r0
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d1e1      	bne.n	8008ac0 <__ssputs_r+0x70>
 8008afc:	6921      	ldr	r1, [r4, #16]
 8008afe:	4650      	mov	r0, sl
 8008b00:	f7ff fec6 	bl	8008890 <_free_r>
 8008b04:	e7c7      	b.n	8008a96 <__ssputs_r+0x46>
	...

08008b08 <_svfiprintf_r>:
 8008b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0c:	4698      	mov	r8, r3
 8008b0e:	898b      	ldrh	r3, [r1, #12]
 8008b10:	061b      	lsls	r3, r3, #24
 8008b12:	b09d      	sub	sp, #116	; 0x74
 8008b14:	4607      	mov	r7, r0
 8008b16:	460d      	mov	r5, r1
 8008b18:	4614      	mov	r4, r2
 8008b1a:	d50e      	bpl.n	8008b3a <_svfiprintf_r+0x32>
 8008b1c:	690b      	ldr	r3, [r1, #16]
 8008b1e:	b963      	cbnz	r3, 8008b3a <_svfiprintf_r+0x32>
 8008b20:	2140      	movs	r1, #64	; 0x40
 8008b22:	f7ff ff21 	bl	8008968 <_malloc_r>
 8008b26:	6028      	str	r0, [r5, #0]
 8008b28:	6128      	str	r0, [r5, #16]
 8008b2a:	b920      	cbnz	r0, 8008b36 <_svfiprintf_r+0x2e>
 8008b2c:	230c      	movs	r3, #12
 8008b2e:	603b      	str	r3, [r7, #0]
 8008b30:	f04f 30ff 	mov.w	r0, #4294967295
 8008b34:	e0d1      	b.n	8008cda <_svfiprintf_r+0x1d2>
 8008b36:	2340      	movs	r3, #64	; 0x40
 8008b38:	616b      	str	r3, [r5, #20]
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b3e:	2320      	movs	r3, #32
 8008b40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b44:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b48:	2330      	movs	r3, #48	; 0x30
 8008b4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008cf4 <_svfiprintf_r+0x1ec>
 8008b4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b52:	f04f 0901 	mov.w	r9, #1
 8008b56:	4623      	mov	r3, r4
 8008b58:	469a      	mov	sl, r3
 8008b5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b5e:	b10a      	cbz	r2, 8008b64 <_svfiprintf_r+0x5c>
 8008b60:	2a25      	cmp	r2, #37	; 0x25
 8008b62:	d1f9      	bne.n	8008b58 <_svfiprintf_r+0x50>
 8008b64:	ebba 0b04 	subs.w	fp, sl, r4
 8008b68:	d00b      	beq.n	8008b82 <_svfiprintf_r+0x7a>
 8008b6a:	465b      	mov	r3, fp
 8008b6c:	4622      	mov	r2, r4
 8008b6e:	4629      	mov	r1, r5
 8008b70:	4638      	mov	r0, r7
 8008b72:	f7ff ff6d 	bl	8008a50 <__ssputs_r>
 8008b76:	3001      	adds	r0, #1
 8008b78:	f000 80aa 	beq.w	8008cd0 <_svfiprintf_r+0x1c8>
 8008b7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b7e:	445a      	add	r2, fp
 8008b80:	9209      	str	r2, [sp, #36]	; 0x24
 8008b82:	f89a 3000 	ldrb.w	r3, [sl]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 80a2 	beq.w	8008cd0 <_svfiprintf_r+0x1c8>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b96:	f10a 0a01 	add.w	sl, sl, #1
 8008b9a:	9304      	str	r3, [sp, #16]
 8008b9c:	9307      	str	r3, [sp, #28]
 8008b9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ba2:	931a      	str	r3, [sp, #104]	; 0x68
 8008ba4:	4654      	mov	r4, sl
 8008ba6:	2205      	movs	r2, #5
 8008ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bac:	4851      	ldr	r0, [pc, #324]	; (8008cf4 <_svfiprintf_r+0x1ec>)
 8008bae:	f7f7 fb17 	bl	80001e0 <memchr>
 8008bb2:	9a04      	ldr	r2, [sp, #16]
 8008bb4:	b9d8      	cbnz	r0, 8008bee <_svfiprintf_r+0xe6>
 8008bb6:	06d0      	lsls	r0, r2, #27
 8008bb8:	bf44      	itt	mi
 8008bba:	2320      	movmi	r3, #32
 8008bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bc0:	0711      	lsls	r1, r2, #28
 8008bc2:	bf44      	itt	mi
 8008bc4:	232b      	movmi	r3, #43	; 0x2b
 8008bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bca:	f89a 3000 	ldrb.w	r3, [sl]
 8008bce:	2b2a      	cmp	r3, #42	; 0x2a
 8008bd0:	d015      	beq.n	8008bfe <_svfiprintf_r+0xf6>
 8008bd2:	9a07      	ldr	r2, [sp, #28]
 8008bd4:	4654      	mov	r4, sl
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	f04f 0c0a 	mov.w	ip, #10
 8008bdc:	4621      	mov	r1, r4
 8008bde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008be2:	3b30      	subs	r3, #48	; 0x30
 8008be4:	2b09      	cmp	r3, #9
 8008be6:	d94e      	bls.n	8008c86 <_svfiprintf_r+0x17e>
 8008be8:	b1b0      	cbz	r0, 8008c18 <_svfiprintf_r+0x110>
 8008bea:	9207      	str	r2, [sp, #28]
 8008bec:	e014      	b.n	8008c18 <_svfiprintf_r+0x110>
 8008bee:	eba0 0308 	sub.w	r3, r0, r8
 8008bf2:	fa09 f303 	lsl.w	r3, r9, r3
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	9304      	str	r3, [sp, #16]
 8008bfa:	46a2      	mov	sl, r4
 8008bfc:	e7d2      	b.n	8008ba4 <_svfiprintf_r+0x9c>
 8008bfe:	9b03      	ldr	r3, [sp, #12]
 8008c00:	1d19      	adds	r1, r3, #4
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	9103      	str	r1, [sp, #12]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	bfbb      	ittet	lt
 8008c0a:	425b      	neglt	r3, r3
 8008c0c:	f042 0202 	orrlt.w	r2, r2, #2
 8008c10:	9307      	strge	r3, [sp, #28]
 8008c12:	9307      	strlt	r3, [sp, #28]
 8008c14:	bfb8      	it	lt
 8008c16:	9204      	strlt	r2, [sp, #16]
 8008c18:	7823      	ldrb	r3, [r4, #0]
 8008c1a:	2b2e      	cmp	r3, #46	; 0x2e
 8008c1c:	d10c      	bne.n	8008c38 <_svfiprintf_r+0x130>
 8008c1e:	7863      	ldrb	r3, [r4, #1]
 8008c20:	2b2a      	cmp	r3, #42	; 0x2a
 8008c22:	d135      	bne.n	8008c90 <_svfiprintf_r+0x188>
 8008c24:	9b03      	ldr	r3, [sp, #12]
 8008c26:	1d1a      	adds	r2, r3, #4
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	9203      	str	r2, [sp, #12]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	bfb8      	it	lt
 8008c30:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c34:	3402      	adds	r4, #2
 8008c36:	9305      	str	r3, [sp, #20]
 8008c38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d04 <_svfiprintf_r+0x1fc>
 8008c3c:	7821      	ldrb	r1, [r4, #0]
 8008c3e:	2203      	movs	r2, #3
 8008c40:	4650      	mov	r0, sl
 8008c42:	f7f7 facd 	bl	80001e0 <memchr>
 8008c46:	b140      	cbz	r0, 8008c5a <_svfiprintf_r+0x152>
 8008c48:	2340      	movs	r3, #64	; 0x40
 8008c4a:	eba0 000a 	sub.w	r0, r0, sl
 8008c4e:	fa03 f000 	lsl.w	r0, r3, r0
 8008c52:	9b04      	ldr	r3, [sp, #16]
 8008c54:	4303      	orrs	r3, r0
 8008c56:	3401      	adds	r4, #1
 8008c58:	9304      	str	r3, [sp, #16]
 8008c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c5e:	4826      	ldr	r0, [pc, #152]	; (8008cf8 <_svfiprintf_r+0x1f0>)
 8008c60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c64:	2206      	movs	r2, #6
 8008c66:	f7f7 fabb 	bl	80001e0 <memchr>
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	d038      	beq.n	8008ce0 <_svfiprintf_r+0x1d8>
 8008c6e:	4b23      	ldr	r3, [pc, #140]	; (8008cfc <_svfiprintf_r+0x1f4>)
 8008c70:	bb1b      	cbnz	r3, 8008cba <_svfiprintf_r+0x1b2>
 8008c72:	9b03      	ldr	r3, [sp, #12]
 8008c74:	3307      	adds	r3, #7
 8008c76:	f023 0307 	bic.w	r3, r3, #7
 8008c7a:	3308      	adds	r3, #8
 8008c7c:	9303      	str	r3, [sp, #12]
 8008c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c80:	4433      	add	r3, r6
 8008c82:	9309      	str	r3, [sp, #36]	; 0x24
 8008c84:	e767      	b.n	8008b56 <_svfiprintf_r+0x4e>
 8008c86:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	2001      	movs	r0, #1
 8008c8e:	e7a5      	b.n	8008bdc <_svfiprintf_r+0xd4>
 8008c90:	2300      	movs	r3, #0
 8008c92:	3401      	adds	r4, #1
 8008c94:	9305      	str	r3, [sp, #20]
 8008c96:	4619      	mov	r1, r3
 8008c98:	f04f 0c0a 	mov.w	ip, #10
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ca2:	3a30      	subs	r2, #48	; 0x30
 8008ca4:	2a09      	cmp	r2, #9
 8008ca6:	d903      	bls.n	8008cb0 <_svfiprintf_r+0x1a8>
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d0c5      	beq.n	8008c38 <_svfiprintf_r+0x130>
 8008cac:	9105      	str	r1, [sp, #20]
 8008cae:	e7c3      	b.n	8008c38 <_svfiprintf_r+0x130>
 8008cb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e7f0      	b.n	8008c9c <_svfiprintf_r+0x194>
 8008cba:	ab03      	add	r3, sp, #12
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	462a      	mov	r2, r5
 8008cc0:	4b0f      	ldr	r3, [pc, #60]	; (8008d00 <_svfiprintf_r+0x1f8>)
 8008cc2:	a904      	add	r1, sp, #16
 8008cc4:	4638      	mov	r0, r7
 8008cc6:	f3af 8000 	nop.w
 8008cca:	1c42      	adds	r2, r0, #1
 8008ccc:	4606      	mov	r6, r0
 8008cce:	d1d6      	bne.n	8008c7e <_svfiprintf_r+0x176>
 8008cd0:	89ab      	ldrh	r3, [r5, #12]
 8008cd2:	065b      	lsls	r3, r3, #25
 8008cd4:	f53f af2c 	bmi.w	8008b30 <_svfiprintf_r+0x28>
 8008cd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cda:	b01d      	add	sp, #116	; 0x74
 8008cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce0:	ab03      	add	r3, sp, #12
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	462a      	mov	r2, r5
 8008ce6:	4b06      	ldr	r3, [pc, #24]	; (8008d00 <_svfiprintf_r+0x1f8>)
 8008ce8:	a904      	add	r1, sp, #16
 8008cea:	4638      	mov	r0, r7
 8008cec:	f000 f9d4 	bl	8009098 <_printf_i>
 8008cf0:	e7eb      	b.n	8008cca <_svfiprintf_r+0x1c2>
 8008cf2:	bf00      	nop
 8008cf4:	0800a206 	.word	0x0800a206
 8008cf8:	0800a210 	.word	0x0800a210
 8008cfc:	00000000 	.word	0x00000000
 8008d00:	08008a51 	.word	0x08008a51
 8008d04:	0800a20c 	.word	0x0800a20c

08008d08 <__sfputc_r>:
 8008d08:	6893      	ldr	r3, [r2, #8]
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	b410      	push	{r4}
 8008d10:	6093      	str	r3, [r2, #8]
 8008d12:	da08      	bge.n	8008d26 <__sfputc_r+0x1e>
 8008d14:	6994      	ldr	r4, [r2, #24]
 8008d16:	42a3      	cmp	r3, r4
 8008d18:	db01      	blt.n	8008d1e <__sfputc_r+0x16>
 8008d1a:	290a      	cmp	r1, #10
 8008d1c:	d103      	bne.n	8008d26 <__sfputc_r+0x1e>
 8008d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d22:	f000 baef 	b.w	8009304 <__swbuf_r>
 8008d26:	6813      	ldr	r3, [r2, #0]
 8008d28:	1c58      	adds	r0, r3, #1
 8008d2a:	6010      	str	r0, [r2, #0]
 8008d2c:	7019      	strb	r1, [r3, #0]
 8008d2e:	4608      	mov	r0, r1
 8008d30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <__sfputs_r>:
 8008d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d38:	4606      	mov	r6, r0
 8008d3a:	460f      	mov	r7, r1
 8008d3c:	4614      	mov	r4, r2
 8008d3e:	18d5      	adds	r5, r2, r3
 8008d40:	42ac      	cmp	r4, r5
 8008d42:	d101      	bne.n	8008d48 <__sfputs_r+0x12>
 8008d44:	2000      	movs	r0, #0
 8008d46:	e007      	b.n	8008d58 <__sfputs_r+0x22>
 8008d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d4c:	463a      	mov	r2, r7
 8008d4e:	4630      	mov	r0, r6
 8008d50:	f7ff ffda 	bl	8008d08 <__sfputc_r>
 8008d54:	1c43      	adds	r3, r0, #1
 8008d56:	d1f3      	bne.n	8008d40 <__sfputs_r+0xa>
 8008d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d5c <_vfiprintf_r>:
 8008d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d60:	460d      	mov	r5, r1
 8008d62:	b09d      	sub	sp, #116	; 0x74
 8008d64:	4614      	mov	r4, r2
 8008d66:	4698      	mov	r8, r3
 8008d68:	4606      	mov	r6, r0
 8008d6a:	b118      	cbz	r0, 8008d74 <_vfiprintf_r+0x18>
 8008d6c:	6983      	ldr	r3, [r0, #24]
 8008d6e:	b90b      	cbnz	r3, 8008d74 <_vfiprintf_r+0x18>
 8008d70:	f000 fcaa 	bl	80096c8 <__sinit>
 8008d74:	4b89      	ldr	r3, [pc, #548]	; (8008f9c <_vfiprintf_r+0x240>)
 8008d76:	429d      	cmp	r5, r3
 8008d78:	d11b      	bne.n	8008db2 <_vfiprintf_r+0x56>
 8008d7a:	6875      	ldr	r5, [r6, #4]
 8008d7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d7e:	07d9      	lsls	r1, r3, #31
 8008d80:	d405      	bmi.n	8008d8e <_vfiprintf_r+0x32>
 8008d82:	89ab      	ldrh	r3, [r5, #12]
 8008d84:	059a      	lsls	r2, r3, #22
 8008d86:	d402      	bmi.n	8008d8e <_vfiprintf_r+0x32>
 8008d88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d8a:	f000 fd3b 	bl	8009804 <__retarget_lock_acquire_recursive>
 8008d8e:	89ab      	ldrh	r3, [r5, #12]
 8008d90:	071b      	lsls	r3, r3, #28
 8008d92:	d501      	bpl.n	8008d98 <_vfiprintf_r+0x3c>
 8008d94:	692b      	ldr	r3, [r5, #16]
 8008d96:	b9eb      	cbnz	r3, 8008dd4 <_vfiprintf_r+0x78>
 8008d98:	4629      	mov	r1, r5
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f000 fb04 	bl	80093a8 <__swsetup_r>
 8008da0:	b1c0      	cbz	r0, 8008dd4 <_vfiprintf_r+0x78>
 8008da2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008da4:	07dc      	lsls	r4, r3, #31
 8008da6:	d50e      	bpl.n	8008dc6 <_vfiprintf_r+0x6a>
 8008da8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dac:	b01d      	add	sp, #116	; 0x74
 8008dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db2:	4b7b      	ldr	r3, [pc, #492]	; (8008fa0 <_vfiprintf_r+0x244>)
 8008db4:	429d      	cmp	r5, r3
 8008db6:	d101      	bne.n	8008dbc <_vfiprintf_r+0x60>
 8008db8:	68b5      	ldr	r5, [r6, #8]
 8008dba:	e7df      	b.n	8008d7c <_vfiprintf_r+0x20>
 8008dbc:	4b79      	ldr	r3, [pc, #484]	; (8008fa4 <_vfiprintf_r+0x248>)
 8008dbe:	429d      	cmp	r5, r3
 8008dc0:	bf08      	it	eq
 8008dc2:	68f5      	ldreq	r5, [r6, #12]
 8008dc4:	e7da      	b.n	8008d7c <_vfiprintf_r+0x20>
 8008dc6:	89ab      	ldrh	r3, [r5, #12]
 8008dc8:	0598      	lsls	r0, r3, #22
 8008dca:	d4ed      	bmi.n	8008da8 <_vfiprintf_r+0x4c>
 8008dcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dce:	f000 fd1a 	bl	8009806 <__retarget_lock_release_recursive>
 8008dd2:	e7e9      	b.n	8008da8 <_vfiprintf_r+0x4c>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd8:	2320      	movs	r3, #32
 8008dda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dde:	f8cd 800c 	str.w	r8, [sp, #12]
 8008de2:	2330      	movs	r3, #48	; 0x30
 8008de4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008fa8 <_vfiprintf_r+0x24c>
 8008de8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dec:	f04f 0901 	mov.w	r9, #1
 8008df0:	4623      	mov	r3, r4
 8008df2:	469a      	mov	sl, r3
 8008df4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008df8:	b10a      	cbz	r2, 8008dfe <_vfiprintf_r+0xa2>
 8008dfa:	2a25      	cmp	r2, #37	; 0x25
 8008dfc:	d1f9      	bne.n	8008df2 <_vfiprintf_r+0x96>
 8008dfe:	ebba 0b04 	subs.w	fp, sl, r4
 8008e02:	d00b      	beq.n	8008e1c <_vfiprintf_r+0xc0>
 8008e04:	465b      	mov	r3, fp
 8008e06:	4622      	mov	r2, r4
 8008e08:	4629      	mov	r1, r5
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	f7ff ff93 	bl	8008d36 <__sfputs_r>
 8008e10:	3001      	adds	r0, #1
 8008e12:	f000 80aa 	beq.w	8008f6a <_vfiprintf_r+0x20e>
 8008e16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e18:	445a      	add	r2, fp
 8008e1a:	9209      	str	r2, [sp, #36]	; 0x24
 8008e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 80a2 	beq.w	8008f6a <_vfiprintf_r+0x20e>
 8008e26:	2300      	movs	r3, #0
 8008e28:	f04f 32ff 	mov.w	r2, #4294967295
 8008e2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e30:	f10a 0a01 	add.w	sl, sl, #1
 8008e34:	9304      	str	r3, [sp, #16]
 8008e36:	9307      	str	r3, [sp, #28]
 8008e38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e3c:	931a      	str	r3, [sp, #104]	; 0x68
 8008e3e:	4654      	mov	r4, sl
 8008e40:	2205      	movs	r2, #5
 8008e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e46:	4858      	ldr	r0, [pc, #352]	; (8008fa8 <_vfiprintf_r+0x24c>)
 8008e48:	f7f7 f9ca 	bl	80001e0 <memchr>
 8008e4c:	9a04      	ldr	r2, [sp, #16]
 8008e4e:	b9d8      	cbnz	r0, 8008e88 <_vfiprintf_r+0x12c>
 8008e50:	06d1      	lsls	r1, r2, #27
 8008e52:	bf44      	itt	mi
 8008e54:	2320      	movmi	r3, #32
 8008e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e5a:	0713      	lsls	r3, r2, #28
 8008e5c:	bf44      	itt	mi
 8008e5e:	232b      	movmi	r3, #43	; 0x2b
 8008e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e64:	f89a 3000 	ldrb.w	r3, [sl]
 8008e68:	2b2a      	cmp	r3, #42	; 0x2a
 8008e6a:	d015      	beq.n	8008e98 <_vfiprintf_r+0x13c>
 8008e6c:	9a07      	ldr	r2, [sp, #28]
 8008e6e:	4654      	mov	r4, sl
 8008e70:	2000      	movs	r0, #0
 8008e72:	f04f 0c0a 	mov.w	ip, #10
 8008e76:	4621      	mov	r1, r4
 8008e78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e7c:	3b30      	subs	r3, #48	; 0x30
 8008e7e:	2b09      	cmp	r3, #9
 8008e80:	d94e      	bls.n	8008f20 <_vfiprintf_r+0x1c4>
 8008e82:	b1b0      	cbz	r0, 8008eb2 <_vfiprintf_r+0x156>
 8008e84:	9207      	str	r2, [sp, #28]
 8008e86:	e014      	b.n	8008eb2 <_vfiprintf_r+0x156>
 8008e88:	eba0 0308 	sub.w	r3, r0, r8
 8008e8c:	fa09 f303 	lsl.w	r3, r9, r3
 8008e90:	4313      	orrs	r3, r2
 8008e92:	9304      	str	r3, [sp, #16]
 8008e94:	46a2      	mov	sl, r4
 8008e96:	e7d2      	b.n	8008e3e <_vfiprintf_r+0xe2>
 8008e98:	9b03      	ldr	r3, [sp, #12]
 8008e9a:	1d19      	adds	r1, r3, #4
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	9103      	str	r1, [sp, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	bfbb      	ittet	lt
 8008ea4:	425b      	neglt	r3, r3
 8008ea6:	f042 0202 	orrlt.w	r2, r2, #2
 8008eaa:	9307      	strge	r3, [sp, #28]
 8008eac:	9307      	strlt	r3, [sp, #28]
 8008eae:	bfb8      	it	lt
 8008eb0:	9204      	strlt	r2, [sp, #16]
 8008eb2:	7823      	ldrb	r3, [r4, #0]
 8008eb4:	2b2e      	cmp	r3, #46	; 0x2e
 8008eb6:	d10c      	bne.n	8008ed2 <_vfiprintf_r+0x176>
 8008eb8:	7863      	ldrb	r3, [r4, #1]
 8008eba:	2b2a      	cmp	r3, #42	; 0x2a
 8008ebc:	d135      	bne.n	8008f2a <_vfiprintf_r+0x1ce>
 8008ebe:	9b03      	ldr	r3, [sp, #12]
 8008ec0:	1d1a      	adds	r2, r3, #4
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	9203      	str	r2, [sp, #12]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	bfb8      	it	lt
 8008eca:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ece:	3402      	adds	r4, #2
 8008ed0:	9305      	str	r3, [sp, #20]
 8008ed2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008fb8 <_vfiprintf_r+0x25c>
 8008ed6:	7821      	ldrb	r1, [r4, #0]
 8008ed8:	2203      	movs	r2, #3
 8008eda:	4650      	mov	r0, sl
 8008edc:	f7f7 f980 	bl	80001e0 <memchr>
 8008ee0:	b140      	cbz	r0, 8008ef4 <_vfiprintf_r+0x198>
 8008ee2:	2340      	movs	r3, #64	; 0x40
 8008ee4:	eba0 000a 	sub.w	r0, r0, sl
 8008ee8:	fa03 f000 	lsl.w	r0, r3, r0
 8008eec:	9b04      	ldr	r3, [sp, #16]
 8008eee:	4303      	orrs	r3, r0
 8008ef0:	3401      	adds	r4, #1
 8008ef2:	9304      	str	r3, [sp, #16]
 8008ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef8:	482c      	ldr	r0, [pc, #176]	; (8008fac <_vfiprintf_r+0x250>)
 8008efa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008efe:	2206      	movs	r2, #6
 8008f00:	f7f7 f96e 	bl	80001e0 <memchr>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d03f      	beq.n	8008f88 <_vfiprintf_r+0x22c>
 8008f08:	4b29      	ldr	r3, [pc, #164]	; (8008fb0 <_vfiprintf_r+0x254>)
 8008f0a:	bb1b      	cbnz	r3, 8008f54 <_vfiprintf_r+0x1f8>
 8008f0c:	9b03      	ldr	r3, [sp, #12]
 8008f0e:	3307      	adds	r3, #7
 8008f10:	f023 0307 	bic.w	r3, r3, #7
 8008f14:	3308      	adds	r3, #8
 8008f16:	9303      	str	r3, [sp, #12]
 8008f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f1a:	443b      	add	r3, r7
 8008f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f1e:	e767      	b.n	8008df0 <_vfiprintf_r+0x94>
 8008f20:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f24:	460c      	mov	r4, r1
 8008f26:	2001      	movs	r0, #1
 8008f28:	e7a5      	b.n	8008e76 <_vfiprintf_r+0x11a>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	3401      	adds	r4, #1
 8008f2e:	9305      	str	r3, [sp, #20]
 8008f30:	4619      	mov	r1, r3
 8008f32:	f04f 0c0a 	mov.w	ip, #10
 8008f36:	4620      	mov	r0, r4
 8008f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f3c:	3a30      	subs	r2, #48	; 0x30
 8008f3e:	2a09      	cmp	r2, #9
 8008f40:	d903      	bls.n	8008f4a <_vfiprintf_r+0x1ee>
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d0c5      	beq.n	8008ed2 <_vfiprintf_r+0x176>
 8008f46:	9105      	str	r1, [sp, #20]
 8008f48:	e7c3      	b.n	8008ed2 <_vfiprintf_r+0x176>
 8008f4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f4e:	4604      	mov	r4, r0
 8008f50:	2301      	movs	r3, #1
 8008f52:	e7f0      	b.n	8008f36 <_vfiprintf_r+0x1da>
 8008f54:	ab03      	add	r3, sp, #12
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	462a      	mov	r2, r5
 8008f5a:	4b16      	ldr	r3, [pc, #88]	; (8008fb4 <_vfiprintf_r+0x258>)
 8008f5c:	a904      	add	r1, sp, #16
 8008f5e:	4630      	mov	r0, r6
 8008f60:	f3af 8000 	nop.w
 8008f64:	4607      	mov	r7, r0
 8008f66:	1c78      	adds	r0, r7, #1
 8008f68:	d1d6      	bne.n	8008f18 <_vfiprintf_r+0x1bc>
 8008f6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f6c:	07d9      	lsls	r1, r3, #31
 8008f6e:	d405      	bmi.n	8008f7c <_vfiprintf_r+0x220>
 8008f70:	89ab      	ldrh	r3, [r5, #12]
 8008f72:	059a      	lsls	r2, r3, #22
 8008f74:	d402      	bmi.n	8008f7c <_vfiprintf_r+0x220>
 8008f76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f78:	f000 fc45 	bl	8009806 <__retarget_lock_release_recursive>
 8008f7c:	89ab      	ldrh	r3, [r5, #12]
 8008f7e:	065b      	lsls	r3, r3, #25
 8008f80:	f53f af12 	bmi.w	8008da8 <_vfiprintf_r+0x4c>
 8008f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f86:	e711      	b.n	8008dac <_vfiprintf_r+0x50>
 8008f88:	ab03      	add	r3, sp, #12
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	462a      	mov	r2, r5
 8008f8e:	4b09      	ldr	r3, [pc, #36]	; (8008fb4 <_vfiprintf_r+0x258>)
 8008f90:	a904      	add	r1, sp, #16
 8008f92:	4630      	mov	r0, r6
 8008f94:	f000 f880 	bl	8009098 <_printf_i>
 8008f98:	e7e4      	b.n	8008f64 <_vfiprintf_r+0x208>
 8008f9a:	bf00      	nop
 8008f9c:	0800a25c 	.word	0x0800a25c
 8008fa0:	0800a27c 	.word	0x0800a27c
 8008fa4:	0800a23c 	.word	0x0800a23c
 8008fa8:	0800a206 	.word	0x0800a206
 8008fac:	0800a210 	.word	0x0800a210
 8008fb0:	00000000 	.word	0x00000000
 8008fb4:	08008d37 	.word	0x08008d37
 8008fb8:	0800a20c 	.word	0x0800a20c

08008fbc <_printf_common>:
 8008fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc0:	4616      	mov	r6, r2
 8008fc2:	4699      	mov	r9, r3
 8008fc4:	688a      	ldr	r2, [r1, #8]
 8008fc6:	690b      	ldr	r3, [r1, #16]
 8008fc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	bfb8      	it	lt
 8008fd0:	4613      	movlt	r3, r2
 8008fd2:	6033      	str	r3, [r6, #0]
 8008fd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fd8:	4607      	mov	r7, r0
 8008fda:	460c      	mov	r4, r1
 8008fdc:	b10a      	cbz	r2, 8008fe2 <_printf_common+0x26>
 8008fde:	3301      	adds	r3, #1
 8008fe0:	6033      	str	r3, [r6, #0]
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	0699      	lsls	r1, r3, #26
 8008fe6:	bf42      	ittt	mi
 8008fe8:	6833      	ldrmi	r3, [r6, #0]
 8008fea:	3302      	addmi	r3, #2
 8008fec:	6033      	strmi	r3, [r6, #0]
 8008fee:	6825      	ldr	r5, [r4, #0]
 8008ff0:	f015 0506 	ands.w	r5, r5, #6
 8008ff4:	d106      	bne.n	8009004 <_printf_common+0x48>
 8008ff6:	f104 0a19 	add.w	sl, r4, #25
 8008ffa:	68e3      	ldr	r3, [r4, #12]
 8008ffc:	6832      	ldr	r2, [r6, #0]
 8008ffe:	1a9b      	subs	r3, r3, r2
 8009000:	42ab      	cmp	r3, r5
 8009002:	dc26      	bgt.n	8009052 <_printf_common+0x96>
 8009004:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009008:	1e13      	subs	r3, r2, #0
 800900a:	6822      	ldr	r2, [r4, #0]
 800900c:	bf18      	it	ne
 800900e:	2301      	movne	r3, #1
 8009010:	0692      	lsls	r2, r2, #26
 8009012:	d42b      	bmi.n	800906c <_printf_common+0xb0>
 8009014:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009018:	4649      	mov	r1, r9
 800901a:	4638      	mov	r0, r7
 800901c:	47c0      	blx	r8
 800901e:	3001      	adds	r0, #1
 8009020:	d01e      	beq.n	8009060 <_printf_common+0xa4>
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	68e5      	ldr	r5, [r4, #12]
 8009026:	6832      	ldr	r2, [r6, #0]
 8009028:	f003 0306 	and.w	r3, r3, #6
 800902c:	2b04      	cmp	r3, #4
 800902e:	bf08      	it	eq
 8009030:	1aad      	subeq	r5, r5, r2
 8009032:	68a3      	ldr	r3, [r4, #8]
 8009034:	6922      	ldr	r2, [r4, #16]
 8009036:	bf0c      	ite	eq
 8009038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800903c:	2500      	movne	r5, #0
 800903e:	4293      	cmp	r3, r2
 8009040:	bfc4      	itt	gt
 8009042:	1a9b      	subgt	r3, r3, r2
 8009044:	18ed      	addgt	r5, r5, r3
 8009046:	2600      	movs	r6, #0
 8009048:	341a      	adds	r4, #26
 800904a:	42b5      	cmp	r5, r6
 800904c:	d11a      	bne.n	8009084 <_printf_common+0xc8>
 800904e:	2000      	movs	r0, #0
 8009050:	e008      	b.n	8009064 <_printf_common+0xa8>
 8009052:	2301      	movs	r3, #1
 8009054:	4652      	mov	r2, sl
 8009056:	4649      	mov	r1, r9
 8009058:	4638      	mov	r0, r7
 800905a:	47c0      	blx	r8
 800905c:	3001      	adds	r0, #1
 800905e:	d103      	bne.n	8009068 <_printf_common+0xac>
 8009060:	f04f 30ff 	mov.w	r0, #4294967295
 8009064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009068:	3501      	adds	r5, #1
 800906a:	e7c6      	b.n	8008ffa <_printf_common+0x3e>
 800906c:	18e1      	adds	r1, r4, r3
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	2030      	movs	r0, #48	; 0x30
 8009072:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009076:	4422      	add	r2, r4
 8009078:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800907c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009080:	3302      	adds	r3, #2
 8009082:	e7c7      	b.n	8009014 <_printf_common+0x58>
 8009084:	2301      	movs	r3, #1
 8009086:	4622      	mov	r2, r4
 8009088:	4649      	mov	r1, r9
 800908a:	4638      	mov	r0, r7
 800908c:	47c0      	blx	r8
 800908e:	3001      	adds	r0, #1
 8009090:	d0e6      	beq.n	8009060 <_printf_common+0xa4>
 8009092:	3601      	adds	r6, #1
 8009094:	e7d9      	b.n	800904a <_printf_common+0x8e>
	...

08009098 <_printf_i>:
 8009098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800909c:	7e0f      	ldrb	r7, [r1, #24]
 800909e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090a0:	2f78      	cmp	r7, #120	; 0x78
 80090a2:	4691      	mov	r9, r2
 80090a4:	4680      	mov	r8, r0
 80090a6:	460c      	mov	r4, r1
 80090a8:	469a      	mov	sl, r3
 80090aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090ae:	d807      	bhi.n	80090c0 <_printf_i+0x28>
 80090b0:	2f62      	cmp	r7, #98	; 0x62
 80090b2:	d80a      	bhi.n	80090ca <_printf_i+0x32>
 80090b4:	2f00      	cmp	r7, #0
 80090b6:	f000 80d8 	beq.w	800926a <_printf_i+0x1d2>
 80090ba:	2f58      	cmp	r7, #88	; 0x58
 80090bc:	f000 80a3 	beq.w	8009206 <_printf_i+0x16e>
 80090c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090c8:	e03a      	b.n	8009140 <_printf_i+0xa8>
 80090ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090ce:	2b15      	cmp	r3, #21
 80090d0:	d8f6      	bhi.n	80090c0 <_printf_i+0x28>
 80090d2:	a101      	add	r1, pc, #4	; (adr r1, 80090d8 <_printf_i+0x40>)
 80090d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090d8:	08009131 	.word	0x08009131
 80090dc:	08009145 	.word	0x08009145
 80090e0:	080090c1 	.word	0x080090c1
 80090e4:	080090c1 	.word	0x080090c1
 80090e8:	080090c1 	.word	0x080090c1
 80090ec:	080090c1 	.word	0x080090c1
 80090f0:	08009145 	.word	0x08009145
 80090f4:	080090c1 	.word	0x080090c1
 80090f8:	080090c1 	.word	0x080090c1
 80090fc:	080090c1 	.word	0x080090c1
 8009100:	080090c1 	.word	0x080090c1
 8009104:	08009251 	.word	0x08009251
 8009108:	08009175 	.word	0x08009175
 800910c:	08009233 	.word	0x08009233
 8009110:	080090c1 	.word	0x080090c1
 8009114:	080090c1 	.word	0x080090c1
 8009118:	08009273 	.word	0x08009273
 800911c:	080090c1 	.word	0x080090c1
 8009120:	08009175 	.word	0x08009175
 8009124:	080090c1 	.word	0x080090c1
 8009128:	080090c1 	.word	0x080090c1
 800912c:	0800923b 	.word	0x0800923b
 8009130:	682b      	ldr	r3, [r5, #0]
 8009132:	1d1a      	adds	r2, r3, #4
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	602a      	str	r2, [r5, #0]
 8009138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800913c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009140:	2301      	movs	r3, #1
 8009142:	e0a3      	b.n	800928c <_printf_i+0x1f4>
 8009144:	6820      	ldr	r0, [r4, #0]
 8009146:	6829      	ldr	r1, [r5, #0]
 8009148:	0606      	lsls	r6, r0, #24
 800914a:	f101 0304 	add.w	r3, r1, #4
 800914e:	d50a      	bpl.n	8009166 <_printf_i+0xce>
 8009150:	680e      	ldr	r6, [r1, #0]
 8009152:	602b      	str	r3, [r5, #0]
 8009154:	2e00      	cmp	r6, #0
 8009156:	da03      	bge.n	8009160 <_printf_i+0xc8>
 8009158:	232d      	movs	r3, #45	; 0x2d
 800915a:	4276      	negs	r6, r6
 800915c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009160:	485e      	ldr	r0, [pc, #376]	; (80092dc <_printf_i+0x244>)
 8009162:	230a      	movs	r3, #10
 8009164:	e019      	b.n	800919a <_printf_i+0x102>
 8009166:	680e      	ldr	r6, [r1, #0]
 8009168:	602b      	str	r3, [r5, #0]
 800916a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800916e:	bf18      	it	ne
 8009170:	b236      	sxthne	r6, r6
 8009172:	e7ef      	b.n	8009154 <_printf_i+0xbc>
 8009174:	682b      	ldr	r3, [r5, #0]
 8009176:	6820      	ldr	r0, [r4, #0]
 8009178:	1d19      	adds	r1, r3, #4
 800917a:	6029      	str	r1, [r5, #0]
 800917c:	0601      	lsls	r1, r0, #24
 800917e:	d501      	bpl.n	8009184 <_printf_i+0xec>
 8009180:	681e      	ldr	r6, [r3, #0]
 8009182:	e002      	b.n	800918a <_printf_i+0xf2>
 8009184:	0646      	lsls	r6, r0, #25
 8009186:	d5fb      	bpl.n	8009180 <_printf_i+0xe8>
 8009188:	881e      	ldrh	r6, [r3, #0]
 800918a:	4854      	ldr	r0, [pc, #336]	; (80092dc <_printf_i+0x244>)
 800918c:	2f6f      	cmp	r7, #111	; 0x6f
 800918e:	bf0c      	ite	eq
 8009190:	2308      	moveq	r3, #8
 8009192:	230a      	movne	r3, #10
 8009194:	2100      	movs	r1, #0
 8009196:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800919a:	6865      	ldr	r5, [r4, #4]
 800919c:	60a5      	str	r5, [r4, #8]
 800919e:	2d00      	cmp	r5, #0
 80091a0:	bfa2      	ittt	ge
 80091a2:	6821      	ldrge	r1, [r4, #0]
 80091a4:	f021 0104 	bicge.w	r1, r1, #4
 80091a8:	6021      	strge	r1, [r4, #0]
 80091aa:	b90e      	cbnz	r6, 80091b0 <_printf_i+0x118>
 80091ac:	2d00      	cmp	r5, #0
 80091ae:	d04d      	beq.n	800924c <_printf_i+0x1b4>
 80091b0:	4615      	mov	r5, r2
 80091b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80091b6:	fb03 6711 	mls	r7, r3, r1, r6
 80091ba:	5dc7      	ldrb	r7, [r0, r7]
 80091bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091c0:	4637      	mov	r7, r6
 80091c2:	42bb      	cmp	r3, r7
 80091c4:	460e      	mov	r6, r1
 80091c6:	d9f4      	bls.n	80091b2 <_printf_i+0x11a>
 80091c8:	2b08      	cmp	r3, #8
 80091ca:	d10b      	bne.n	80091e4 <_printf_i+0x14c>
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	07de      	lsls	r6, r3, #31
 80091d0:	d508      	bpl.n	80091e4 <_printf_i+0x14c>
 80091d2:	6923      	ldr	r3, [r4, #16]
 80091d4:	6861      	ldr	r1, [r4, #4]
 80091d6:	4299      	cmp	r1, r3
 80091d8:	bfde      	ittt	le
 80091da:	2330      	movle	r3, #48	; 0x30
 80091dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80091e4:	1b52      	subs	r2, r2, r5
 80091e6:	6122      	str	r2, [r4, #16]
 80091e8:	f8cd a000 	str.w	sl, [sp]
 80091ec:	464b      	mov	r3, r9
 80091ee:	aa03      	add	r2, sp, #12
 80091f0:	4621      	mov	r1, r4
 80091f2:	4640      	mov	r0, r8
 80091f4:	f7ff fee2 	bl	8008fbc <_printf_common>
 80091f8:	3001      	adds	r0, #1
 80091fa:	d14c      	bne.n	8009296 <_printf_i+0x1fe>
 80091fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009200:	b004      	add	sp, #16
 8009202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009206:	4835      	ldr	r0, [pc, #212]	; (80092dc <_printf_i+0x244>)
 8009208:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800920c:	6829      	ldr	r1, [r5, #0]
 800920e:	6823      	ldr	r3, [r4, #0]
 8009210:	f851 6b04 	ldr.w	r6, [r1], #4
 8009214:	6029      	str	r1, [r5, #0]
 8009216:	061d      	lsls	r5, r3, #24
 8009218:	d514      	bpl.n	8009244 <_printf_i+0x1ac>
 800921a:	07df      	lsls	r7, r3, #31
 800921c:	bf44      	itt	mi
 800921e:	f043 0320 	orrmi.w	r3, r3, #32
 8009222:	6023      	strmi	r3, [r4, #0]
 8009224:	b91e      	cbnz	r6, 800922e <_printf_i+0x196>
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	f023 0320 	bic.w	r3, r3, #32
 800922c:	6023      	str	r3, [r4, #0]
 800922e:	2310      	movs	r3, #16
 8009230:	e7b0      	b.n	8009194 <_printf_i+0xfc>
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	f043 0320 	orr.w	r3, r3, #32
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	2378      	movs	r3, #120	; 0x78
 800923c:	4828      	ldr	r0, [pc, #160]	; (80092e0 <_printf_i+0x248>)
 800923e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009242:	e7e3      	b.n	800920c <_printf_i+0x174>
 8009244:	0659      	lsls	r1, r3, #25
 8009246:	bf48      	it	mi
 8009248:	b2b6      	uxthmi	r6, r6
 800924a:	e7e6      	b.n	800921a <_printf_i+0x182>
 800924c:	4615      	mov	r5, r2
 800924e:	e7bb      	b.n	80091c8 <_printf_i+0x130>
 8009250:	682b      	ldr	r3, [r5, #0]
 8009252:	6826      	ldr	r6, [r4, #0]
 8009254:	6961      	ldr	r1, [r4, #20]
 8009256:	1d18      	adds	r0, r3, #4
 8009258:	6028      	str	r0, [r5, #0]
 800925a:	0635      	lsls	r5, r6, #24
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	d501      	bpl.n	8009264 <_printf_i+0x1cc>
 8009260:	6019      	str	r1, [r3, #0]
 8009262:	e002      	b.n	800926a <_printf_i+0x1d2>
 8009264:	0670      	lsls	r0, r6, #25
 8009266:	d5fb      	bpl.n	8009260 <_printf_i+0x1c8>
 8009268:	8019      	strh	r1, [r3, #0]
 800926a:	2300      	movs	r3, #0
 800926c:	6123      	str	r3, [r4, #16]
 800926e:	4615      	mov	r5, r2
 8009270:	e7ba      	b.n	80091e8 <_printf_i+0x150>
 8009272:	682b      	ldr	r3, [r5, #0]
 8009274:	1d1a      	adds	r2, r3, #4
 8009276:	602a      	str	r2, [r5, #0]
 8009278:	681d      	ldr	r5, [r3, #0]
 800927a:	6862      	ldr	r2, [r4, #4]
 800927c:	2100      	movs	r1, #0
 800927e:	4628      	mov	r0, r5
 8009280:	f7f6 ffae 	bl	80001e0 <memchr>
 8009284:	b108      	cbz	r0, 800928a <_printf_i+0x1f2>
 8009286:	1b40      	subs	r0, r0, r5
 8009288:	6060      	str	r0, [r4, #4]
 800928a:	6863      	ldr	r3, [r4, #4]
 800928c:	6123      	str	r3, [r4, #16]
 800928e:	2300      	movs	r3, #0
 8009290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009294:	e7a8      	b.n	80091e8 <_printf_i+0x150>
 8009296:	6923      	ldr	r3, [r4, #16]
 8009298:	462a      	mov	r2, r5
 800929a:	4649      	mov	r1, r9
 800929c:	4640      	mov	r0, r8
 800929e:	47d0      	blx	sl
 80092a0:	3001      	adds	r0, #1
 80092a2:	d0ab      	beq.n	80091fc <_printf_i+0x164>
 80092a4:	6823      	ldr	r3, [r4, #0]
 80092a6:	079b      	lsls	r3, r3, #30
 80092a8:	d413      	bmi.n	80092d2 <_printf_i+0x23a>
 80092aa:	68e0      	ldr	r0, [r4, #12]
 80092ac:	9b03      	ldr	r3, [sp, #12]
 80092ae:	4298      	cmp	r0, r3
 80092b0:	bfb8      	it	lt
 80092b2:	4618      	movlt	r0, r3
 80092b4:	e7a4      	b.n	8009200 <_printf_i+0x168>
 80092b6:	2301      	movs	r3, #1
 80092b8:	4632      	mov	r2, r6
 80092ba:	4649      	mov	r1, r9
 80092bc:	4640      	mov	r0, r8
 80092be:	47d0      	blx	sl
 80092c0:	3001      	adds	r0, #1
 80092c2:	d09b      	beq.n	80091fc <_printf_i+0x164>
 80092c4:	3501      	adds	r5, #1
 80092c6:	68e3      	ldr	r3, [r4, #12]
 80092c8:	9903      	ldr	r1, [sp, #12]
 80092ca:	1a5b      	subs	r3, r3, r1
 80092cc:	42ab      	cmp	r3, r5
 80092ce:	dcf2      	bgt.n	80092b6 <_printf_i+0x21e>
 80092d0:	e7eb      	b.n	80092aa <_printf_i+0x212>
 80092d2:	2500      	movs	r5, #0
 80092d4:	f104 0619 	add.w	r6, r4, #25
 80092d8:	e7f5      	b.n	80092c6 <_printf_i+0x22e>
 80092da:	bf00      	nop
 80092dc:	0800a217 	.word	0x0800a217
 80092e0:	0800a228 	.word	0x0800a228

080092e4 <_sbrk_r>:
 80092e4:	b538      	push	{r3, r4, r5, lr}
 80092e6:	4d06      	ldr	r5, [pc, #24]	; (8009300 <_sbrk_r+0x1c>)
 80092e8:	2300      	movs	r3, #0
 80092ea:	4604      	mov	r4, r0
 80092ec:	4608      	mov	r0, r1
 80092ee:	602b      	str	r3, [r5, #0]
 80092f0:	f7f9 fbc6 	bl	8002a80 <_sbrk>
 80092f4:	1c43      	adds	r3, r0, #1
 80092f6:	d102      	bne.n	80092fe <_sbrk_r+0x1a>
 80092f8:	682b      	ldr	r3, [r5, #0]
 80092fa:	b103      	cbz	r3, 80092fe <_sbrk_r+0x1a>
 80092fc:	6023      	str	r3, [r4, #0]
 80092fe:	bd38      	pop	{r3, r4, r5, pc}
 8009300:	20000968 	.word	0x20000968

08009304 <__swbuf_r>:
 8009304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009306:	460e      	mov	r6, r1
 8009308:	4614      	mov	r4, r2
 800930a:	4605      	mov	r5, r0
 800930c:	b118      	cbz	r0, 8009316 <__swbuf_r+0x12>
 800930e:	6983      	ldr	r3, [r0, #24]
 8009310:	b90b      	cbnz	r3, 8009316 <__swbuf_r+0x12>
 8009312:	f000 f9d9 	bl	80096c8 <__sinit>
 8009316:	4b21      	ldr	r3, [pc, #132]	; (800939c <__swbuf_r+0x98>)
 8009318:	429c      	cmp	r4, r3
 800931a:	d12b      	bne.n	8009374 <__swbuf_r+0x70>
 800931c:	686c      	ldr	r4, [r5, #4]
 800931e:	69a3      	ldr	r3, [r4, #24]
 8009320:	60a3      	str	r3, [r4, #8]
 8009322:	89a3      	ldrh	r3, [r4, #12]
 8009324:	071a      	lsls	r2, r3, #28
 8009326:	d52f      	bpl.n	8009388 <__swbuf_r+0x84>
 8009328:	6923      	ldr	r3, [r4, #16]
 800932a:	b36b      	cbz	r3, 8009388 <__swbuf_r+0x84>
 800932c:	6923      	ldr	r3, [r4, #16]
 800932e:	6820      	ldr	r0, [r4, #0]
 8009330:	1ac0      	subs	r0, r0, r3
 8009332:	6963      	ldr	r3, [r4, #20]
 8009334:	b2f6      	uxtb	r6, r6
 8009336:	4283      	cmp	r3, r0
 8009338:	4637      	mov	r7, r6
 800933a:	dc04      	bgt.n	8009346 <__swbuf_r+0x42>
 800933c:	4621      	mov	r1, r4
 800933e:	4628      	mov	r0, r5
 8009340:	f000 f92e 	bl	80095a0 <_fflush_r>
 8009344:	bb30      	cbnz	r0, 8009394 <__swbuf_r+0x90>
 8009346:	68a3      	ldr	r3, [r4, #8]
 8009348:	3b01      	subs	r3, #1
 800934a:	60a3      	str	r3, [r4, #8]
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	1c5a      	adds	r2, r3, #1
 8009350:	6022      	str	r2, [r4, #0]
 8009352:	701e      	strb	r6, [r3, #0]
 8009354:	6963      	ldr	r3, [r4, #20]
 8009356:	3001      	adds	r0, #1
 8009358:	4283      	cmp	r3, r0
 800935a:	d004      	beq.n	8009366 <__swbuf_r+0x62>
 800935c:	89a3      	ldrh	r3, [r4, #12]
 800935e:	07db      	lsls	r3, r3, #31
 8009360:	d506      	bpl.n	8009370 <__swbuf_r+0x6c>
 8009362:	2e0a      	cmp	r6, #10
 8009364:	d104      	bne.n	8009370 <__swbuf_r+0x6c>
 8009366:	4621      	mov	r1, r4
 8009368:	4628      	mov	r0, r5
 800936a:	f000 f919 	bl	80095a0 <_fflush_r>
 800936e:	b988      	cbnz	r0, 8009394 <__swbuf_r+0x90>
 8009370:	4638      	mov	r0, r7
 8009372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009374:	4b0a      	ldr	r3, [pc, #40]	; (80093a0 <__swbuf_r+0x9c>)
 8009376:	429c      	cmp	r4, r3
 8009378:	d101      	bne.n	800937e <__swbuf_r+0x7a>
 800937a:	68ac      	ldr	r4, [r5, #8]
 800937c:	e7cf      	b.n	800931e <__swbuf_r+0x1a>
 800937e:	4b09      	ldr	r3, [pc, #36]	; (80093a4 <__swbuf_r+0xa0>)
 8009380:	429c      	cmp	r4, r3
 8009382:	bf08      	it	eq
 8009384:	68ec      	ldreq	r4, [r5, #12]
 8009386:	e7ca      	b.n	800931e <__swbuf_r+0x1a>
 8009388:	4621      	mov	r1, r4
 800938a:	4628      	mov	r0, r5
 800938c:	f000 f80c 	bl	80093a8 <__swsetup_r>
 8009390:	2800      	cmp	r0, #0
 8009392:	d0cb      	beq.n	800932c <__swbuf_r+0x28>
 8009394:	f04f 37ff 	mov.w	r7, #4294967295
 8009398:	e7ea      	b.n	8009370 <__swbuf_r+0x6c>
 800939a:	bf00      	nop
 800939c:	0800a25c 	.word	0x0800a25c
 80093a0:	0800a27c 	.word	0x0800a27c
 80093a4:	0800a23c 	.word	0x0800a23c

080093a8 <__swsetup_r>:
 80093a8:	4b32      	ldr	r3, [pc, #200]	; (8009474 <__swsetup_r+0xcc>)
 80093aa:	b570      	push	{r4, r5, r6, lr}
 80093ac:	681d      	ldr	r5, [r3, #0]
 80093ae:	4606      	mov	r6, r0
 80093b0:	460c      	mov	r4, r1
 80093b2:	b125      	cbz	r5, 80093be <__swsetup_r+0x16>
 80093b4:	69ab      	ldr	r3, [r5, #24]
 80093b6:	b913      	cbnz	r3, 80093be <__swsetup_r+0x16>
 80093b8:	4628      	mov	r0, r5
 80093ba:	f000 f985 	bl	80096c8 <__sinit>
 80093be:	4b2e      	ldr	r3, [pc, #184]	; (8009478 <__swsetup_r+0xd0>)
 80093c0:	429c      	cmp	r4, r3
 80093c2:	d10f      	bne.n	80093e4 <__swsetup_r+0x3c>
 80093c4:	686c      	ldr	r4, [r5, #4]
 80093c6:	89a3      	ldrh	r3, [r4, #12]
 80093c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093cc:	0719      	lsls	r1, r3, #28
 80093ce:	d42c      	bmi.n	800942a <__swsetup_r+0x82>
 80093d0:	06dd      	lsls	r5, r3, #27
 80093d2:	d411      	bmi.n	80093f8 <__swsetup_r+0x50>
 80093d4:	2309      	movs	r3, #9
 80093d6:	6033      	str	r3, [r6, #0]
 80093d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093dc:	81a3      	strh	r3, [r4, #12]
 80093de:	f04f 30ff 	mov.w	r0, #4294967295
 80093e2:	e03e      	b.n	8009462 <__swsetup_r+0xba>
 80093e4:	4b25      	ldr	r3, [pc, #148]	; (800947c <__swsetup_r+0xd4>)
 80093e6:	429c      	cmp	r4, r3
 80093e8:	d101      	bne.n	80093ee <__swsetup_r+0x46>
 80093ea:	68ac      	ldr	r4, [r5, #8]
 80093ec:	e7eb      	b.n	80093c6 <__swsetup_r+0x1e>
 80093ee:	4b24      	ldr	r3, [pc, #144]	; (8009480 <__swsetup_r+0xd8>)
 80093f0:	429c      	cmp	r4, r3
 80093f2:	bf08      	it	eq
 80093f4:	68ec      	ldreq	r4, [r5, #12]
 80093f6:	e7e6      	b.n	80093c6 <__swsetup_r+0x1e>
 80093f8:	0758      	lsls	r0, r3, #29
 80093fa:	d512      	bpl.n	8009422 <__swsetup_r+0x7a>
 80093fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093fe:	b141      	cbz	r1, 8009412 <__swsetup_r+0x6a>
 8009400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009404:	4299      	cmp	r1, r3
 8009406:	d002      	beq.n	800940e <__swsetup_r+0x66>
 8009408:	4630      	mov	r0, r6
 800940a:	f7ff fa41 	bl	8008890 <_free_r>
 800940e:	2300      	movs	r3, #0
 8009410:	6363      	str	r3, [r4, #52]	; 0x34
 8009412:	89a3      	ldrh	r3, [r4, #12]
 8009414:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009418:	81a3      	strh	r3, [r4, #12]
 800941a:	2300      	movs	r3, #0
 800941c:	6063      	str	r3, [r4, #4]
 800941e:	6923      	ldr	r3, [r4, #16]
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	89a3      	ldrh	r3, [r4, #12]
 8009424:	f043 0308 	orr.w	r3, r3, #8
 8009428:	81a3      	strh	r3, [r4, #12]
 800942a:	6923      	ldr	r3, [r4, #16]
 800942c:	b94b      	cbnz	r3, 8009442 <__swsetup_r+0x9a>
 800942e:	89a3      	ldrh	r3, [r4, #12]
 8009430:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009438:	d003      	beq.n	8009442 <__swsetup_r+0x9a>
 800943a:	4621      	mov	r1, r4
 800943c:	4630      	mov	r0, r6
 800943e:	f000 fa09 	bl	8009854 <__smakebuf_r>
 8009442:	89a0      	ldrh	r0, [r4, #12]
 8009444:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009448:	f010 0301 	ands.w	r3, r0, #1
 800944c:	d00a      	beq.n	8009464 <__swsetup_r+0xbc>
 800944e:	2300      	movs	r3, #0
 8009450:	60a3      	str	r3, [r4, #8]
 8009452:	6963      	ldr	r3, [r4, #20]
 8009454:	425b      	negs	r3, r3
 8009456:	61a3      	str	r3, [r4, #24]
 8009458:	6923      	ldr	r3, [r4, #16]
 800945a:	b943      	cbnz	r3, 800946e <__swsetup_r+0xc6>
 800945c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009460:	d1ba      	bne.n	80093d8 <__swsetup_r+0x30>
 8009462:	bd70      	pop	{r4, r5, r6, pc}
 8009464:	0781      	lsls	r1, r0, #30
 8009466:	bf58      	it	pl
 8009468:	6963      	ldrpl	r3, [r4, #20]
 800946a:	60a3      	str	r3, [r4, #8]
 800946c:	e7f4      	b.n	8009458 <__swsetup_r+0xb0>
 800946e:	2000      	movs	r0, #0
 8009470:	e7f7      	b.n	8009462 <__swsetup_r+0xba>
 8009472:	bf00      	nop
 8009474:	200000f0 	.word	0x200000f0
 8009478:	0800a25c 	.word	0x0800a25c
 800947c:	0800a27c 	.word	0x0800a27c
 8009480:	0800a23c 	.word	0x0800a23c

08009484 <abort>:
 8009484:	b508      	push	{r3, lr}
 8009486:	2006      	movs	r0, #6
 8009488:	f000 fab0 	bl	80099ec <raise>
 800948c:	2001      	movs	r0, #1
 800948e:	f7f9 fa7f 	bl	8002990 <_exit>
	...

08009494 <__sflush_r>:
 8009494:	898a      	ldrh	r2, [r1, #12]
 8009496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800949a:	4605      	mov	r5, r0
 800949c:	0710      	lsls	r0, r2, #28
 800949e:	460c      	mov	r4, r1
 80094a0:	d458      	bmi.n	8009554 <__sflush_r+0xc0>
 80094a2:	684b      	ldr	r3, [r1, #4]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	dc05      	bgt.n	80094b4 <__sflush_r+0x20>
 80094a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	dc02      	bgt.n	80094b4 <__sflush_r+0x20>
 80094ae:	2000      	movs	r0, #0
 80094b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094b6:	2e00      	cmp	r6, #0
 80094b8:	d0f9      	beq.n	80094ae <__sflush_r+0x1a>
 80094ba:	2300      	movs	r3, #0
 80094bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094c0:	682f      	ldr	r7, [r5, #0]
 80094c2:	602b      	str	r3, [r5, #0]
 80094c4:	d032      	beq.n	800952c <__sflush_r+0x98>
 80094c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094c8:	89a3      	ldrh	r3, [r4, #12]
 80094ca:	075a      	lsls	r2, r3, #29
 80094cc:	d505      	bpl.n	80094da <__sflush_r+0x46>
 80094ce:	6863      	ldr	r3, [r4, #4]
 80094d0:	1ac0      	subs	r0, r0, r3
 80094d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094d4:	b10b      	cbz	r3, 80094da <__sflush_r+0x46>
 80094d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094d8:	1ac0      	subs	r0, r0, r3
 80094da:	2300      	movs	r3, #0
 80094dc:	4602      	mov	r2, r0
 80094de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094e0:	6a21      	ldr	r1, [r4, #32]
 80094e2:	4628      	mov	r0, r5
 80094e4:	47b0      	blx	r6
 80094e6:	1c43      	adds	r3, r0, #1
 80094e8:	89a3      	ldrh	r3, [r4, #12]
 80094ea:	d106      	bne.n	80094fa <__sflush_r+0x66>
 80094ec:	6829      	ldr	r1, [r5, #0]
 80094ee:	291d      	cmp	r1, #29
 80094f0:	d82c      	bhi.n	800954c <__sflush_r+0xb8>
 80094f2:	4a2a      	ldr	r2, [pc, #168]	; (800959c <__sflush_r+0x108>)
 80094f4:	40ca      	lsrs	r2, r1
 80094f6:	07d6      	lsls	r6, r2, #31
 80094f8:	d528      	bpl.n	800954c <__sflush_r+0xb8>
 80094fa:	2200      	movs	r2, #0
 80094fc:	6062      	str	r2, [r4, #4]
 80094fe:	04d9      	lsls	r1, r3, #19
 8009500:	6922      	ldr	r2, [r4, #16]
 8009502:	6022      	str	r2, [r4, #0]
 8009504:	d504      	bpl.n	8009510 <__sflush_r+0x7c>
 8009506:	1c42      	adds	r2, r0, #1
 8009508:	d101      	bne.n	800950e <__sflush_r+0x7a>
 800950a:	682b      	ldr	r3, [r5, #0]
 800950c:	b903      	cbnz	r3, 8009510 <__sflush_r+0x7c>
 800950e:	6560      	str	r0, [r4, #84]	; 0x54
 8009510:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009512:	602f      	str	r7, [r5, #0]
 8009514:	2900      	cmp	r1, #0
 8009516:	d0ca      	beq.n	80094ae <__sflush_r+0x1a>
 8009518:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800951c:	4299      	cmp	r1, r3
 800951e:	d002      	beq.n	8009526 <__sflush_r+0x92>
 8009520:	4628      	mov	r0, r5
 8009522:	f7ff f9b5 	bl	8008890 <_free_r>
 8009526:	2000      	movs	r0, #0
 8009528:	6360      	str	r0, [r4, #52]	; 0x34
 800952a:	e7c1      	b.n	80094b0 <__sflush_r+0x1c>
 800952c:	6a21      	ldr	r1, [r4, #32]
 800952e:	2301      	movs	r3, #1
 8009530:	4628      	mov	r0, r5
 8009532:	47b0      	blx	r6
 8009534:	1c41      	adds	r1, r0, #1
 8009536:	d1c7      	bne.n	80094c8 <__sflush_r+0x34>
 8009538:	682b      	ldr	r3, [r5, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d0c4      	beq.n	80094c8 <__sflush_r+0x34>
 800953e:	2b1d      	cmp	r3, #29
 8009540:	d001      	beq.n	8009546 <__sflush_r+0xb2>
 8009542:	2b16      	cmp	r3, #22
 8009544:	d101      	bne.n	800954a <__sflush_r+0xb6>
 8009546:	602f      	str	r7, [r5, #0]
 8009548:	e7b1      	b.n	80094ae <__sflush_r+0x1a>
 800954a:	89a3      	ldrh	r3, [r4, #12]
 800954c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009550:	81a3      	strh	r3, [r4, #12]
 8009552:	e7ad      	b.n	80094b0 <__sflush_r+0x1c>
 8009554:	690f      	ldr	r7, [r1, #16]
 8009556:	2f00      	cmp	r7, #0
 8009558:	d0a9      	beq.n	80094ae <__sflush_r+0x1a>
 800955a:	0793      	lsls	r3, r2, #30
 800955c:	680e      	ldr	r6, [r1, #0]
 800955e:	bf08      	it	eq
 8009560:	694b      	ldreq	r3, [r1, #20]
 8009562:	600f      	str	r7, [r1, #0]
 8009564:	bf18      	it	ne
 8009566:	2300      	movne	r3, #0
 8009568:	eba6 0807 	sub.w	r8, r6, r7
 800956c:	608b      	str	r3, [r1, #8]
 800956e:	f1b8 0f00 	cmp.w	r8, #0
 8009572:	dd9c      	ble.n	80094ae <__sflush_r+0x1a>
 8009574:	6a21      	ldr	r1, [r4, #32]
 8009576:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009578:	4643      	mov	r3, r8
 800957a:	463a      	mov	r2, r7
 800957c:	4628      	mov	r0, r5
 800957e:	47b0      	blx	r6
 8009580:	2800      	cmp	r0, #0
 8009582:	dc06      	bgt.n	8009592 <__sflush_r+0xfe>
 8009584:	89a3      	ldrh	r3, [r4, #12]
 8009586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800958a:	81a3      	strh	r3, [r4, #12]
 800958c:	f04f 30ff 	mov.w	r0, #4294967295
 8009590:	e78e      	b.n	80094b0 <__sflush_r+0x1c>
 8009592:	4407      	add	r7, r0
 8009594:	eba8 0800 	sub.w	r8, r8, r0
 8009598:	e7e9      	b.n	800956e <__sflush_r+0xda>
 800959a:	bf00      	nop
 800959c:	20400001 	.word	0x20400001

080095a0 <_fflush_r>:
 80095a0:	b538      	push	{r3, r4, r5, lr}
 80095a2:	690b      	ldr	r3, [r1, #16]
 80095a4:	4605      	mov	r5, r0
 80095a6:	460c      	mov	r4, r1
 80095a8:	b913      	cbnz	r3, 80095b0 <_fflush_r+0x10>
 80095aa:	2500      	movs	r5, #0
 80095ac:	4628      	mov	r0, r5
 80095ae:	bd38      	pop	{r3, r4, r5, pc}
 80095b0:	b118      	cbz	r0, 80095ba <_fflush_r+0x1a>
 80095b2:	6983      	ldr	r3, [r0, #24]
 80095b4:	b90b      	cbnz	r3, 80095ba <_fflush_r+0x1a>
 80095b6:	f000 f887 	bl	80096c8 <__sinit>
 80095ba:	4b14      	ldr	r3, [pc, #80]	; (800960c <_fflush_r+0x6c>)
 80095bc:	429c      	cmp	r4, r3
 80095be:	d11b      	bne.n	80095f8 <_fflush_r+0x58>
 80095c0:	686c      	ldr	r4, [r5, #4]
 80095c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d0ef      	beq.n	80095aa <_fflush_r+0xa>
 80095ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095cc:	07d0      	lsls	r0, r2, #31
 80095ce:	d404      	bmi.n	80095da <_fflush_r+0x3a>
 80095d0:	0599      	lsls	r1, r3, #22
 80095d2:	d402      	bmi.n	80095da <_fflush_r+0x3a>
 80095d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095d6:	f000 f915 	bl	8009804 <__retarget_lock_acquire_recursive>
 80095da:	4628      	mov	r0, r5
 80095dc:	4621      	mov	r1, r4
 80095de:	f7ff ff59 	bl	8009494 <__sflush_r>
 80095e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095e4:	07da      	lsls	r2, r3, #31
 80095e6:	4605      	mov	r5, r0
 80095e8:	d4e0      	bmi.n	80095ac <_fflush_r+0xc>
 80095ea:	89a3      	ldrh	r3, [r4, #12]
 80095ec:	059b      	lsls	r3, r3, #22
 80095ee:	d4dd      	bmi.n	80095ac <_fflush_r+0xc>
 80095f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095f2:	f000 f908 	bl	8009806 <__retarget_lock_release_recursive>
 80095f6:	e7d9      	b.n	80095ac <_fflush_r+0xc>
 80095f8:	4b05      	ldr	r3, [pc, #20]	; (8009610 <_fflush_r+0x70>)
 80095fa:	429c      	cmp	r4, r3
 80095fc:	d101      	bne.n	8009602 <_fflush_r+0x62>
 80095fe:	68ac      	ldr	r4, [r5, #8]
 8009600:	e7df      	b.n	80095c2 <_fflush_r+0x22>
 8009602:	4b04      	ldr	r3, [pc, #16]	; (8009614 <_fflush_r+0x74>)
 8009604:	429c      	cmp	r4, r3
 8009606:	bf08      	it	eq
 8009608:	68ec      	ldreq	r4, [r5, #12]
 800960a:	e7da      	b.n	80095c2 <_fflush_r+0x22>
 800960c:	0800a25c 	.word	0x0800a25c
 8009610:	0800a27c 	.word	0x0800a27c
 8009614:	0800a23c 	.word	0x0800a23c

08009618 <std>:
 8009618:	2300      	movs	r3, #0
 800961a:	b510      	push	{r4, lr}
 800961c:	4604      	mov	r4, r0
 800961e:	e9c0 3300 	strd	r3, r3, [r0]
 8009622:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009626:	6083      	str	r3, [r0, #8]
 8009628:	8181      	strh	r1, [r0, #12]
 800962a:	6643      	str	r3, [r0, #100]	; 0x64
 800962c:	81c2      	strh	r2, [r0, #14]
 800962e:	6183      	str	r3, [r0, #24]
 8009630:	4619      	mov	r1, r3
 8009632:	2208      	movs	r2, #8
 8009634:	305c      	adds	r0, #92	; 0x5c
 8009636:	f7fe ff69 	bl	800850c <memset>
 800963a:	4b05      	ldr	r3, [pc, #20]	; (8009650 <std+0x38>)
 800963c:	6263      	str	r3, [r4, #36]	; 0x24
 800963e:	4b05      	ldr	r3, [pc, #20]	; (8009654 <std+0x3c>)
 8009640:	62a3      	str	r3, [r4, #40]	; 0x28
 8009642:	4b05      	ldr	r3, [pc, #20]	; (8009658 <std+0x40>)
 8009644:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009646:	4b05      	ldr	r3, [pc, #20]	; (800965c <std+0x44>)
 8009648:	6224      	str	r4, [r4, #32]
 800964a:	6323      	str	r3, [r4, #48]	; 0x30
 800964c:	bd10      	pop	{r4, pc}
 800964e:	bf00      	nop
 8009650:	08009a25 	.word	0x08009a25
 8009654:	08009a47 	.word	0x08009a47
 8009658:	08009a7f 	.word	0x08009a7f
 800965c:	08009aa3 	.word	0x08009aa3

08009660 <_cleanup_r>:
 8009660:	4901      	ldr	r1, [pc, #4]	; (8009668 <_cleanup_r+0x8>)
 8009662:	f000 b8af 	b.w	80097c4 <_fwalk_reent>
 8009666:	bf00      	nop
 8009668:	080095a1 	.word	0x080095a1

0800966c <__sfmoreglue>:
 800966c:	b570      	push	{r4, r5, r6, lr}
 800966e:	2268      	movs	r2, #104	; 0x68
 8009670:	1e4d      	subs	r5, r1, #1
 8009672:	4355      	muls	r5, r2
 8009674:	460e      	mov	r6, r1
 8009676:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800967a:	f7ff f975 	bl	8008968 <_malloc_r>
 800967e:	4604      	mov	r4, r0
 8009680:	b140      	cbz	r0, 8009694 <__sfmoreglue+0x28>
 8009682:	2100      	movs	r1, #0
 8009684:	e9c0 1600 	strd	r1, r6, [r0]
 8009688:	300c      	adds	r0, #12
 800968a:	60a0      	str	r0, [r4, #8]
 800968c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009690:	f7fe ff3c 	bl	800850c <memset>
 8009694:	4620      	mov	r0, r4
 8009696:	bd70      	pop	{r4, r5, r6, pc}

08009698 <__sfp_lock_acquire>:
 8009698:	4801      	ldr	r0, [pc, #4]	; (80096a0 <__sfp_lock_acquire+0x8>)
 800969a:	f000 b8b3 	b.w	8009804 <__retarget_lock_acquire_recursive>
 800969e:	bf00      	nop
 80096a0:	20000965 	.word	0x20000965

080096a4 <__sfp_lock_release>:
 80096a4:	4801      	ldr	r0, [pc, #4]	; (80096ac <__sfp_lock_release+0x8>)
 80096a6:	f000 b8ae 	b.w	8009806 <__retarget_lock_release_recursive>
 80096aa:	bf00      	nop
 80096ac:	20000965 	.word	0x20000965

080096b0 <__sinit_lock_acquire>:
 80096b0:	4801      	ldr	r0, [pc, #4]	; (80096b8 <__sinit_lock_acquire+0x8>)
 80096b2:	f000 b8a7 	b.w	8009804 <__retarget_lock_acquire_recursive>
 80096b6:	bf00      	nop
 80096b8:	20000966 	.word	0x20000966

080096bc <__sinit_lock_release>:
 80096bc:	4801      	ldr	r0, [pc, #4]	; (80096c4 <__sinit_lock_release+0x8>)
 80096be:	f000 b8a2 	b.w	8009806 <__retarget_lock_release_recursive>
 80096c2:	bf00      	nop
 80096c4:	20000966 	.word	0x20000966

080096c8 <__sinit>:
 80096c8:	b510      	push	{r4, lr}
 80096ca:	4604      	mov	r4, r0
 80096cc:	f7ff fff0 	bl	80096b0 <__sinit_lock_acquire>
 80096d0:	69a3      	ldr	r3, [r4, #24]
 80096d2:	b11b      	cbz	r3, 80096dc <__sinit+0x14>
 80096d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096d8:	f7ff bff0 	b.w	80096bc <__sinit_lock_release>
 80096dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096e0:	6523      	str	r3, [r4, #80]	; 0x50
 80096e2:	4b13      	ldr	r3, [pc, #76]	; (8009730 <__sinit+0x68>)
 80096e4:	4a13      	ldr	r2, [pc, #76]	; (8009734 <__sinit+0x6c>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80096ea:	42a3      	cmp	r3, r4
 80096ec:	bf04      	itt	eq
 80096ee:	2301      	moveq	r3, #1
 80096f0:	61a3      	streq	r3, [r4, #24]
 80096f2:	4620      	mov	r0, r4
 80096f4:	f000 f820 	bl	8009738 <__sfp>
 80096f8:	6060      	str	r0, [r4, #4]
 80096fa:	4620      	mov	r0, r4
 80096fc:	f000 f81c 	bl	8009738 <__sfp>
 8009700:	60a0      	str	r0, [r4, #8]
 8009702:	4620      	mov	r0, r4
 8009704:	f000 f818 	bl	8009738 <__sfp>
 8009708:	2200      	movs	r2, #0
 800970a:	60e0      	str	r0, [r4, #12]
 800970c:	2104      	movs	r1, #4
 800970e:	6860      	ldr	r0, [r4, #4]
 8009710:	f7ff ff82 	bl	8009618 <std>
 8009714:	68a0      	ldr	r0, [r4, #8]
 8009716:	2201      	movs	r2, #1
 8009718:	2109      	movs	r1, #9
 800971a:	f7ff ff7d 	bl	8009618 <std>
 800971e:	68e0      	ldr	r0, [r4, #12]
 8009720:	2202      	movs	r2, #2
 8009722:	2112      	movs	r1, #18
 8009724:	f7ff ff78 	bl	8009618 <std>
 8009728:	2301      	movs	r3, #1
 800972a:	61a3      	str	r3, [r4, #24]
 800972c:	e7d2      	b.n	80096d4 <__sinit+0xc>
 800972e:	bf00      	nop
 8009730:	0800a02c 	.word	0x0800a02c
 8009734:	08009661 	.word	0x08009661

08009738 <__sfp>:
 8009738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973a:	4607      	mov	r7, r0
 800973c:	f7ff ffac 	bl	8009698 <__sfp_lock_acquire>
 8009740:	4b1e      	ldr	r3, [pc, #120]	; (80097bc <__sfp+0x84>)
 8009742:	681e      	ldr	r6, [r3, #0]
 8009744:	69b3      	ldr	r3, [r6, #24]
 8009746:	b913      	cbnz	r3, 800974e <__sfp+0x16>
 8009748:	4630      	mov	r0, r6
 800974a:	f7ff ffbd 	bl	80096c8 <__sinit>
 800974e:	3648      	adds	r6, #72	; 0x48
 8009750:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009754:	3b01      	subs	r3, #1
 8009756:	d503      	bpl.n	8009760 <__sfp+0x28>
 8009758:	6833      	ldr	r3, [r6, #0]
 800975a:	b30b      	cbz	r3, 80097a0 <__sfp+0x68>
 800975c:	6836      	ldr	r6, [r6, #0]
 800975e:	e7f7      	b.n	8009750 <__sfp+0x18>
 8009760:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009764:	b9d5      	cbnz	r5, 800979c <__sfp+0x64>
 8009766:	4b16      	ldr	r3, [pc, #88]	; (80097c0 <__sfp+0x88>)
 8009768:	60e3      	str	r3, [r4, #12]
 800976a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800976e:	6665      	str	r5, [r4, #100]	; 0x64
 8009770:	f000 f847 	bl	8009802 <__retarget_lock_init_recursive>
 8009774:	f7ff ff96 	bl	80096a4 <__sfp_lock_release>
 8009778:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800977c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009780:	6025      	str	r5, [r4, #0]
 8009782:	61a5      	str	r5, [r4, #24]
 8009784:	2208      	movs	r2, #8
 8009786:	4629      	mov	r1, r5
 8009788:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800978c:	f7fe febe 	bl	800850c <memset>
 8009790:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009794:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009798:	4620      	mov	r0, r4
 800979a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800979c:	3468      	adds	r4, #104	; 0x68
 800979e:	e7d9      	b.n	8009754 <__sfp+0x1c>
 80097a0:	2104      	movs	r1, #4
 80097a2:	4638      	mov	r0, r7
 80097a4:	f7ff ff62 	bl	800966c <__sfmoreglue>
 80097a8:	4604      	mov	r4, r0
 80097aa:	6030      	str	r0, [r6, #0]
 80097ac:	2800      	cmp	r0, #0
 80097ae:	d1d5      	bne.n	800975c <__sfp+0x24>
 80097b0:	f7ff ff78 	bl	80096a4 <__sfp_lock_release>
 80097b4:	230c      	movs	r3, #12
 80097b6:	603b      	str	r3, [r7, #0]
 80097b8:	e7ee      	b.n	8009798 <__sfp+0x60>
 80097ba:	bf00      	nop
 80097bc:	0800a02c 	.word	0x0800a02c
 80097c0:	ffff0001 	.word	0xffff0001

080097c4 <_fwalk_reent>:
 80097c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097c8:	4606      	mov	r6, r0
 80097ca:	4688      	mov	r8, r1
 80097cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097d0:	2700      	movs	r7, #0
 80097d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097d6:	f1b9 0901 	subs.w	r9, r9, #1
 80097da:	d505      	bpl.n	80097e8 <_fwalk_reent+0x24>
 80097dc:	6824      	ldr	r4, [r4, #0]
 80097de:	2c00      	cmp	r4, #0
 80097e0:	d1f7      	bne.n	80097d2 <_fwalk_reent+0xe>
 80097e2:	4638      	mov	r0, r7
 80097e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097e8:	89ab      	ldrh	r3, [r5, #12]
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d907      	bls.n	80097fe <_fwalk_reent+0x3a>
 80097ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097f2:	3301      	adds	r3, #1
 80097f4:	d003      	beq.n	80097fe <_fwalk_reent+0x3a>
 80097f6:	4629      	mov	r1, r5
 80097f8:	4630      	mov	r0, r6
 80097fa:	47c0      	blx	r8
 80097fc:	4307      	orrs	r7, r0
 80097fe:	3568      	adds	r5, #104	; 0x68
 8009800:	e7e9      	b.n	80097d6 <_fwalk_reent+0x12>

08009802 <__retarget_lock_init_recursive>:
 8009802:	4770      	bx	lr

08009804 <__retarget_lock_acquire_recursive>:
 8009804:	4770      	bx	lr

08009806 <__retarget_lock_release_recursive>:
 8009806:	4770      	bx	lr

08009808 <__swhatbuf_r>:
 8009808:	b570      	push	{r4, r5, r6, lr}
 800980a:	460e      	mov	r6, r1
 800980c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009810:	2900      	cmp	r1, #0
 8009812:	b096      	sub	sp, #88	; 0x58
 8009814:	4614      	mov	r4, r2
 8009816:	461d      	mov	r5, r3
 8009818:	da08      	bge.n	800982c <__swhatbuf_r+0x24>
 800981a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800981e:	2200      	movs	r2, #0
 8009820:	602a      	str	r2, [r5, #0]
 8009822:	061a      	lsls	r2, r3, #24
 8009824:	d410      	bmi.n	8009848 <__swhatbuf_r+0x40>
 8009826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800982a:	e00e      	b.n	800984a <__swhatbuf_r+0x42>
 800982c:	466a      	mov	r2, sp
 800982e:	f000 f95f 	bl	8009af0 <_fstat_r>
 8009832:	2800      	cmp	r0, #0
 8009834:	dbf1      	blt.n	800981a <__swhatbuf_r+0x12>
 8009836:	9a01      	ldr	r2, [sp, #4]
 8009838:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800983c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009840:	425a      	negs	r2, r3
 8009842:	415a      	adcs	r2, r3
 8009844:	602a      	str	r2, [r5, #0]
 8009846:	e7ee      	b.n	8009826 <__swhatbuf_r+0x1e>
 8009848:	2340      	movs	r3, #64	; 0x40
 800984a:	2000      	movs	r0, #0
 800984c:	6023      	str	r3, [r4, #0]
 800984e:	b016      	add	sp, #88	; 0x58
 8009850:	bd70      	pop	{r4, r5, r6, pc}
	...

08009854 <__smakebuf_r>:
 8009854:	898b      	ldrh	r3, [r1, #12]
 8009856:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009858:	079d      	lsls	r5, r3, #30
 800985a:	4606      	mov	r6, r0
 800985c:	460c      	mov	r4, r1
 800985e:	d507      	bpl.n	8009870 <__smakebuf_r+0x1c>
 8009860:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009864:	6023      	str	r3, [r4, #0]
 8009866:	6123      	str	r3, [r4, #16]
 8009868:	2301      	movs	r3, #1
 800986a:	6163      	str	r3, [r4, #20]
 800986c:	b002      	add	sp, #8
 800986e:	bd70      	pop	{r4, r5, r6, pc}
 8009870:	ab01      	add	r3, sp, #4
 8009872:	466a      	mov	r2, sp
 8009874:	f7ff ffc8 	bl	8009808 <__swhatbuf_r>
 8009878:	9900      	ldr	r1, [sp, #0]
 800987a:	4605      	mov	r5, r0
 800987c:	4630      	mov	r0, r6
 800987e:	f7ff f873 	bl	8008968 <_malloc_r>
 8009882:	b948      	cbnz	r0, 8009898 <__smakebuf_r+0x44>
 8009884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009888:	059a      	lsls	r2, r3, #22
 800988a:	d4ef      	bmi.n	800986c <__smakebuf_r+0x18>
 800988c:	f023 0303 	bic.w	r3, r3, #3
 8009890:	f043 0302 	orr.w	r3, r3, #2
 8009894:	81a3      	strh	r3, [r4, #12]
 8009896:	e7e3      	b.n	8009860 <__smakebuf_r+0xc>
 8009898:	4b0d      	ldr	r3, [pc, #52]	; (80098d0 <__smakebuf_r+0x7c>)
 800989a:	62b3      	str	r3, [r6, #40]	; 0x28
 800989c:	89a3      	ldrh	r3, [r4, #12]
 800989e:	6020      	str	r0, [r4, #0]
 80098a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098a4:	81a3      	strh	r3, [r4, #12]
 80098a6:	9b00      	ldr	r3, [sp, #0]
 80098a8:	6163      	str	r3, [r4, #20]
 80098aa:	9b01      	ldr	r3, [sp, #4]
 80098ac:	6120      	str	r0, [r4, #16]
 80098ae:	b15b      	cbz	r3, 80098c8 <__smakebuf_r+0x74>
 80098b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098b4:	4630      	mov	r0, r6
 80098b6:	f000 f92d 	bl	8009b14 <_isatty_r>
 80098ba:	b128      	cbz	r0, 80098c8 <__smakebuf_r+0x74>
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	f023 0303 	bic.w	r3, r3, #3
 80098c2:	f043 0301 	orr.w	r3, r3, #1
 80098c6:	81a3      	strh	r3, [r4, #12]
 80098c8:	89a0      	ldrh	r0, [r4, #12]
 80098ca:	4305      	orrs	r5, r0
 80098cc:	81a5      	strh	r5, [r4, #12]
 80098ce:	e7cd      	b.n	800986c <__smakebuf_r+0x18>
 80098d0:	08009661 	.word	0x08009661

080098d4 <memcpy>:
 80098d4:	440a      	add	r2, r1
 80098d6:	4291      	cmp	r1, r2
 80098d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80098dc:	d100      	bne.n	80098e0 <memcpy+0xc>
 80098de:	4770      	bx	lr
 80098e0:	b510      	push	{r4, lr}
 80098e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098ea:	4291      	cmp	r1, r2
 80098ec:	d1f9      	bne.n	80098e2 <memcpy+0xe>
 80098ee:	bd10      	pop	{r4, pc}

080098f0 <memmove>:
 80098f0:	4288      	cmp	r0, r1
 80098f2:	b510      	push	{r4, lr}
 80098f4:	eb01 0402 	add.w	r4, r1, r2
 80098f8:	d902      	bls.n	8009900 <memmove+0x10>
 80098fa:	4284      	cmp	r4, r0
 80098fc:	4623      	mov	r3, r4
 80098fe:	d807      	bhi.n	8009910 <memmove+0x20>
 8009900:	1e43      	subs	r3, r0, #1
 8009902:	42a1      	cmp	r1, r4
 8009904:	d008      	beq.n	8009918 <memmove+0x28>
 8009906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800990a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800990e:	e7f8      	b.n	8009902 <memmove+0x12>
 8009910:	4402      	add	r2, r0
 8009912:	4601      	mov	r1, r0
 8009914:	428a      	cmp	r2, r1
 8009916:	d100      	bne.n	800991a <memmove+0x2a>
 8009918:	bd10      	pop	{r4, pc}
 800991a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800991e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009922:	e7f7      	b.n	8009914 <memmove+0x24>

08009924 <__malloc_lock>:
 8009924:	4801      	ldr	r0, [pc, #4]	; (800992c <__malloc_lock+0x8>)
 8009926:	f7ff bf6d 	b.w	8009804 <__retarget_lock_acquire_recursive>
 800992a:	bf00      	nop
 800992c:	20000964 	.word	0x20000964

08009930 <__malloc_unlock>:
 8009930:	4801      	ldr	r0, [pc, #4]	; (8009938 <__malloc_unlock+0x8>)
 8009932:	f7ff bf68 	b.w	8009806 <__retarget_lock_release_recursive>
 8009936:	bf00      	nop
 8009938:	20000964 	.word	0x20000964

0800993c <_realloc_r>:
 800993c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009940:	4680      	mov	r8, r0
 8009942:	4614      	mov	r4, r2
 8009944:	460e      	mov	r6, r1
 8009946:	b921      	cbnz	r1, 8009952 <_realloc_r+0x16>
 8009948:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800994c:	4611      	mov	r1, r2
 800994e:	f7ff b80b 	b.w	8008968 <_malloc_r>
 8009952:	b92a      	cbnz	r2, 8009960 <_realloc_r+0x24>
 8009954:	f7fe ff9c 	bl	8008890 <_free_r>
 8009958:	4625      	mov	r5, r4
 800995a:	4628      	mov	r0, r5
 800995c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009960:	f000 f8fa 	bl	8009b58 <_malloc_usable_size_r>
 8009964:	4284      	cmp	r4, r0
 8009966:	4607      	mov	r7, r0
 8009968:	d802      	bhi.n	8009970 <_realloc_r+0x34>
 800996a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800996e:	d812      	bhi.n	8009996 <_realloc_r+0x5a>
 8009970:	4621      	mov	r1, r4
 8009972:	4640      	mov	r0, r8
 8009974:	f7fe fff8 	bl	8008968 <_malloc_r>
 8009978:	4605      	mov	r5, r0
 800997a:	2800      	cmp	r0, #0
 800997c:	d0ed      	beq.n	800995a <_realloc_r+0x1e>
 800997e:	42bc      	cmp	r4, r7
 8009980:	4622      	mov	r2, r4
 8009982:	4631      	mov	r1, r6
 8009984:	bf28      	it	cs
 8009986:	463a      	movcs	r2, r7
 8009988:	f7ff ffa4 	bl	80098d4 <memcpy>
 800998c:	4631      	mov	r1, r6
 800998e:	4640      	mov	r0, r8
 8009990:	f7fe ff7e 	bl	8008890 <_free_r>
 8009994:	e7e1      	b.n	800995a <_realloc_r+0x1e>
 8009996:	4635      	mov	r5, r6
 8009998:	e7df      	b.n	800995a <_realloc_r+0x1e>

0800999a <_raise_r>:
 800999a:	291f      	cmp	r1, #31
 800999c:	b538      	push	{r3, r4, r5, lr}
 800999e:	4604      	mov	r4, r0
 80099a0:	460d      	mov	r5, r1
 80099a2:	d904      	bls.n	80099ae <_raise_r+0x14>
 80099a4:	2316      	movs	r3, #22
 80099a6:	6003      	str	r3, [r0, #0]
 80099a8:	f04f 30ff 	mov.w	r0, #4294967295
 80099ac:	bd38      	pop	{r3, r4, r5, pc}
 80099ae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80099b0:	b112      	cbz	r2, 80099b8 <_raise_r+0x1e>
 80099b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099b6:	b94b      	cbnz	r3, 80099cc <_raise_r+0x32>
 80099b8:	4620      	mov	r0, r4
 80099ba:	f000 f831 	bl	8009a20 <_getpid_r>
 80099be:	462a      	mov	r2, r5
 80099c0:	4601      	mov	r1, r0
 80099c2:	4620      	mov	r0, r4
 80099c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099c8:	f000 b818 	b.w	80099fc <_kill_r>
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d00a      	beq.n	80099e6 <_raise_r+0x4c>
 80099d0:	1c59      	adds	r1, r3, #1
 80099d2:	d103      	bne.n	80099dc <_raise_r+0x42>
 80099d4:	2316      	movs	r3, #22
 80099d6:	6003      	str	r3, [r0, #0]
 80099d8:	2001      	movs	r0, #1
 80099da:	e7e7      	b.n	80099ac <_raise_r+0x12>
 80099dc:	2400      	movs	r4, #0
 80099de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80099e2:	4628      	mov	r0, r5
 80099e4:	4798      	blx	r3
 80099e6:	2000      	movs	r0, #0
 80099e8:	e7e0      	b.n	80099ac <_raise_r+0x12>
	...

080099ec <raise>:
 80099ec:	4b02      	ldr	r3, [pc, #8]	; (80099f8 <raise+0xc>)
 80099ee:	4601      	mov	r1, r0
 80099f0:	6818      	ldr	r0, [r3, #0]
 80099f2:	f7ff bfd2 	b.w	800999a <_raise_r>
 80099f6:	bf00      	nop
 80099f8:	200000f0 	.word	0x200000f0

080099fc <_kill_r>:
 80099fc:	b538      	push	{r3, r4, r5, lr}
 80099fe:	4d07      	ldr	r5, [pc, #28]	; (8009a1c <_kill_r+0x20>)
 8009a00:	2300      	movs	r3, #0
 8009a02:	4604      	mov	r4, r0
 8009a04:	4608      	mov	r0, r1
 8009a06:	4611      	mov	r1, r2
 8009a08:	602b      	str	r3, [r5, #0]
 8009a0a:	f7f8 ffb1 	bl	8002970 <_kill>
 8009a0e:	1c43      	adds	r3, r0, #1
 8009a10:	d102      	bne.n	8009a18 <_kill_r+0x1c>
 8009a12:	682b      	ldr	r3, [r5, #0]
 8009a14:	b103      	cbz	r3, 8009a18 <_kill_r+0x1c>
 8009a16:	6023      	str	r3, [r4, #0]
 8009a18:	bd38      	pop	{r3, r4, r5, pc}
 8009a1a:	bf00      	nop
 8009a1c:	20000968 	.word	0x20000968

08009a20 <_getpid_r>:
 8009a20:	f7f8 bf9e 	b.w	8002960 <_getpid>

08009a24 <__sread>:
 8009a24:	b510      	push	{r4, lr}
 8009a26:	460c      	mov	r4, r1
 8009a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a2c:	f000 f89c 	bl	8009b68 <_read_r>
 8009a30:	2800      	cmp	r0, #0
 8009a32:	bfab      	itete	ge
 8009a34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a36:	89a3      	ldrhlt	r3, [r4, #12]
 8009a38:	181b      	addge	r3, r3, r0
 8009a3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a3e:	bfac      	ite	ge
 8009a40:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a42:	81a3      	strhlt	r3, [r4, #12]
 8009a44:	bd10      	pop	{r4, pc}

08009a46 <__swrite>:
 8009a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a4a:	461f      	mov	r7, r3
 8009a4c:	898b      	ldrh	r3, [r1, #12]
 8009a4e:	05db      	lsls	r3, r3, #23
 8009a50:	4605      	mov	r5, r0
 8009a52:	460c      	mov	r4, r1
 8009a54:	4616      	mov	r6, r2
 8009a56:	d505      	bpl.n	8009a64 <__swrite+0x1e>
 8009a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f000 f868 	bl	8009b34 <_lseek_r>
 8009a64:	89a3      	ldrh	r3, [r4, #12]
 8009a66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a6e:	81a3      	strh	r3, [r4, #12]
 8009a70:	4632      	mov	r2, r6
 8009a72:	463b      	mov	r3, r7
 8009a74:	4628      	mov	r0, r5
 8009a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a7a:	f000 b817 	b.w	8009aac <_write_r>

08009a7e <__sseek>:
 8009a7e:	b510      	push	{r4, lr}
 8009a80:	460c      	mov	r4, r1
 8009a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a86:	f000 f855 	bl	8009b34 <_lseek_r>
 8009a8a:	1c43      	adds	r3, r0, #1
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	bf15      	itete	ne
 8009a90:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a9a:	81a3      	strheq	r3, [r4, #12]
 8009a9c:	bf18      	it	ne
 8009a9e:	81a3      	strhne	r3, [r4, #12]
 8009aa0:	bd10      	pop	{r4, pc}

08009aa2 <__sclose>:
 8009aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa6:	f000 b813 	b.w	8009ad0 <_close_r>
	...

08009aac <_write_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	4d07      	ldr	r5, [pc, #28]	; (8009acc <_write_r+0x20>)
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	4608      	mov	r0, r1
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	602a      	str	r2, [r5, #0]
 8009aba:	461a      	mov	r2, r3
 8009abc:	f7f8 ff8f 	bl	80029de <_write>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d102      	bne.n	8009aca <_write_r+0x1e>
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	b103      	cbz	r3, 8009aca <_write_r+0x1e>
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	20000968 	.word	0x20000968

08009ad0 <_close_r>:
 8009ad0:	b538      	push	{r3, r4, r5, lr}
 8009ad2:	4d06      	ldr	r5, [pc, #24]	; (8009aec <_close_r+0x1c>)
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	4608      	mov	r0, r1
 8009ada:	602b      	str	r3, [r5, #0]
 8009adc:	f7f8 ff9b 	bl	8002a16 <_close>
 8009ae0:	1c43      	adds	r3, r0, #1
 8009ae2:	d102      	bne.n	8009aea <_close_r+0x1a>
 8009ae4:	682b      	ldr	r3, [r5, #0]
 8009ae6:	b103      	cbz	r3, 8009aea <_close_r+0x1a>
 8009ae8:	6023      	str	r3, [r4, #0]
 8009aea:	bd38      	pop	{r3, r4, r5, pc}
 8009aec:	20000968 	.word	0x20000968

08009af0 <_fstat_r>:
 8009af0:	b538      	push	{r3, r4, r5, lr}
 8009af2:	4d07      	ldr	r5, [pc, #28]	; (8009b10 <_fstat_r+0x20>)
 8009af4:	2300      	movs	r3, #0
 8009af6:	4604      	mov	r4, r0
 8009af8:	4608      	mov	r0, r1
 8009afa:	4611      	mov	r1, r2
 8009afc:	602b      	str	r3, [r5, #0]
 8009afe:	f7f8 ff96 	bl	8002a2e <_fstat>
 8009b02:	1c43      	adds	r3, r0, #1
 8009b04:	d102      	bne.n	8009b0c <_fstat_r+0x1c>
 8009b06:	682b      	ldr	r3, [r5, #0]
 8009b08:	b103      	cbz	r3, 8009b0c <_fstat_r+0x1c>
 8009b0a:	6023      	str	r3, [r4, #0]
 8009b0c:	bd38      	pop	{r3, r4, r5, pc}
 8009b0e:	bf00      	nop
 8009b10:	20000968 	.word	0x20000968

08009b14 <_isatty_r>:
 8009b14:	b538      	push	{r3, r4, r5, lr}
 8009b16:	4d06      	ldr	r5, [pc, #24]	; (8009b30 <_isatty_r+0x1c>)
 8009b18:	2300      	movs	r3, #0
 8009b1a:	4604      	mov	r4, r0
 8009b1c:	4608      	mov	r0, r1
 8009b1e:	602b      	str	r3, [r5, #0]
 8009b20:	f7f8 ff95 	bl	8002a4e <_isatty>
 8009b24:	1c43      	adds	r3, r0, #1
 8009b26:	d102      	bne.n	8009b2e <_isatty_r+0x1a>
 8009b28:	682b      	ldr	r3, [r5, #0]
 8009b2a:	b103      	cbz	r3, 8009b2e <_isatty_r+0x1a>
 8009b2c:	6023      	str	r3, [r4, #0]
 8009b2e:	bd38      	pop	{r3, r4, r5, pc}
 8009b30:	20000968 	.word	0x20000968

08009b34 <_lseek_r>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	4d07      	ldr	r5, [pc, #28]	; (8009b54 <_lseek_r+0x20>)
 8009b38:	4604      	mov	r4, r0
 8009b3a:	4608      	mov	r0, r1
 8009b3c:	4611      	mov	r1, r2
 8009b3e:	2200      	movs	r2, #0
 8009b40:	602a      	str	r2, [r5, #0]
 8009b42:	461a      	mov	r2, r3
 8009b44:	f7f8 ff8e 	bl	8002a64 <_lseek>
 8009b48:	1c43      	adds	r3, r0, #1
 8009b4a:	d102      	bne.n	8009b52 <_lseek_r+0x1e>
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	b103      	cbz	r3, 8009b52 <_lseek_r+0x1e>
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	bd38      	pop	{r3, r4, r5, pc}
 8009b54:	20000968 	.word	0x20000968

08009b58 <_malloc_usable_size_r>:
 8009b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b5c:	1f18      	subs	r0, r3, #4
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	bfbc      	itt	lt
 8009b62:	580b      	ldrlt	r3, [r1, r0]
 8009b64:	18c0      	addlt	r0, r0, r3
 8009b66:	4770      	bx	lr

08009b68 <_read_r>:
 8009b68:	b538      	push	{r3, r4, r5, lr}
 8009b6a:	4d07      	ldr	r5, [pc, #28]	; (8009b88 <_read_r+0x20>)
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	4608      	mov	r0, r1
 8009b70:	4611      	mov	r1, r2
 8009b72:	2200      	movs	r2, #0
 8009b74:	602a      	str	r2, [r5, #0]
 8009b76:	461a      	mov	r2, r3
 8009b78:	f7f8 ff14 	bl	80029a4 <_read>
 8009b7c:	1c43      	adds	r3, r0, #1
 8009b7e:	d102      	bne.n	8009b86 <_read_r+0x1e>
 8009b80:	682b      	ldr	r3, [r5, #0]
 8009b82:	b103      	cbz	r3, 8009b86 <_read_r+0x1e>
 8009b84:	6023      	str	r3, [r4, #0]
 8009b86:	bd38      	pop	{r3, r4, r5, pc}
 8009b88:	20000968 	.word	0x20000968

08009b8c <_init>:
 8009b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b8e:	bf00      	nop
 8009b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b92:	bc08      	pop	{r3}
 8009b94:	469e      	mov	lr, r3
 8009b96:	4770      	bx	lr

08009b98 <_fini>:
 8009b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b9a:	bf00      	nop
 8009b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b9e:	bc08      	pop	{r3}
 8009ba0:	469e      	mov	lr, r3
 8009ba2:	4770      	bx	lr
