
river_sense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005320  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  080054b0  080054b0  000154b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005678  08005678  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005680  08005680  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005680  08005680  00015680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  20000074  080056fc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  080056fc  000206bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129c3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002628  00000000  00000000  00032a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00035090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  00036088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002192c  00000000  00000000  00036f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012beb  00000000  00000000  000588b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbfbf  00000000  00000000  0006b49f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013745e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a0  00000000  00000000  001374b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005498 	.word	0x08005498

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005498 	.word	0x08005498

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HAL_UART_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// UART Transmit Callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <HAL_UART_RxCpltCallback>:

// UART Receive Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <HAL_UART_RxCpltCallback+0x30>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d109      	bne.n	80005be <HAL_UART_RxCpltCallback+0x26>
//      rx_buffer[rx_index++]=rx_data;
//    }
//
//    data_received[data_index++] = serialRX_Data;

    SIM_serialRX_Handler(serialRX_Data);
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <HAL_UART_RxCpltCallback+0x34>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f9a6 	bl	8000900 <SIM_serialRX_Handler>
//    if (data_index > 2) {
////    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
//    }

    // Enabling interrupt receive again
    HAL_UART_Receive_IT(&huart1, &serialRX_Data, 1); // receive data (one character only)
 80005b4:	2201      	movs	r2, #1
 80005b6:	4905      	ldr	r1, [pc, #20]	; (80005cc <HAL_UART_RxCpltCallback+0x34>)
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <HAL_UART_RxCpltCallback+0x38>)
 80005ba:	f002 fff9 	bl	80035b0 <HAL_UART_Receive_IT>
  }
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40013800 	.word	0x40013800
 80005cc:	200002b3 	.word	0x200002b3
 80005d0:	200000dc 	.word	0x200000dc

080005d4 <HAL_TIM_PeriodElapsedCallback>:

// TIM Callback (200ms)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

	// Toggle LED; Just for fun
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80005dc:	2108      	movs	r1, #8
 80005de:	4804      	ldr	r0, [pc, #16]	; (80005f0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80005e0:	f001 f92e 	bl	8001840 <HAL_GPIO_TogglePin>

	// Call SIM Module handler
	SIM_Handler();
 80005e4:	f000 f970 	bl	80008c8 <SIM_Handler>

}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	48000400 	.word	0x48000400

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fd77 	bl	80010ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f822 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f900 	bl	8000804 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000604:	f000 f8ce 	bl	80007a4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000608:	f000 f87e 	bl	8000708 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  // Transmit to SIM Module to set up communication (think this is needed because of auto
  // baud rate); Delay is necessary
  HAL_UART_Transmit_IT(&huart1, (uint8_t *) "AT\r\n", strlen("AT\r\n"));
 800060c:	2204      	movs	r2, #4
 800060e:	490a      	ldr	r1, [pc, #40]	; (8000638 <main+0x44>)
 8000610:	480a      	ldr	r0, [pc, #40]	; (800063c <main+0x48>)
 8000612:	f002 ff5f 	bl	80034d4 <HAL_UART_Transmit_IT>
  HAL_Delay(1000);
 8000616:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061a:	f000 fddb 	bl	80011d4 <HAL_Delay>
  HAL_UART_Transmit_IT(&huart1, (uint8_t *) "AT\r\n", strlen("AT\r\n"));
 800061e:	2204      	movs	r2, #4
 8000620:	4905      	ldr	r1, [pc, #20]	; (8000638 <main+0x44>)
 8000622:	4806      	ldr	r0, [pc, #24]	; (800063c <main+0x48>)
 8000624:	f002 ff56 	bl	80034d4 <HAL_UART_Transmit_IT>
  HAL_Delay(1000);
 8000628:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800062c:	f000 fdd2 	bl	80011d4 <HAL_Delay>




  // Enable Timer(s)
  HAL_TIM_Base_Start_IT(&htim2);
 8000630:	4803      	ldr	r0, [pc, #12]	; (8000640 <main+0x4c>)
 8000632:	f002 fb1b 	bl	8002c6c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000636:	e7fe      	b.n	8000636 <main+0x42>
 8000638:	080054b0 	.word	0x080054b0
 800063c:	200000dc 	.word	0x200000dc
 8000640:	20000090 	.word	0x20000090

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b096      	sub	sp, #88	; 0x58
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	2244      	movs	r2, #68	; 0x44
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f004 fa94 	bl	8004b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	463b      	mov	r3, r7
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000666:	f44f 7000 	mov.w	r0, #512	; 0x200
 800066a:	f001 f921 	bl	80018b0 <HAL_PWREx_ControlVoltageScaling>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000674:	f000 f922 	bl	80008bc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000678:	f001 f8fc 	bl	8001874 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800067c:	4b21      	ldr	r3, [pc, #132]	; (8000704 <SystemClock_Config+0xc0>)
 800067e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000682:	4a20      	ldr	r2, [pc, #128]	; (8000704 <SystemClock_Config+0xc0>)
 8000684:	f023 0318 	bic.w	r3, r3, #24
 8000688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800068c:	2314      	movs	r3, #20
 800068e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800069c:	2360      	movs	r3, #96	; 0x60
 800069e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006a4:	2301      	movs	r3, #1
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006ac:	2310      	movs	r3, #16
 80006ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006b0:	2307      	movs	r3, #7
 80006b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4618      	mov	r0, r3
 80006c2:	f001 f94b 	bl	800195c <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006cc:	f000 f8f6 	bl	80008bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2303      	movs	r3, #3
 80006d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	2101      	movs	r1, #1
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 fd4b 	bl	8002184 <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006f4:	f000 f8e2 	bl	80008bc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006f8:	f002 f95e 	bl	80029b8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006fc:	bf00      	nop
 80006fe:	3758      	adds	r7, #88	; 0x58
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40021000 	.word	0x40021000

08000708 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070e:	f107 0310 	add.w	r3, r7, #16
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <MX_TIM2_Init+0x98>)
 8000728:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800072c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_TIM2_Init+0x98>)
 8000730:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000734:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_TIM2_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_TIM2_Init+0x98>)
 800073e:	2264      	movs	r2, #100	; 0x64
 8000740:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_TIM2_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_TIM2_Init+0x98>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800074e:	4814      	ldr	r0, [pc, #80]	; (80007a0 <MX_TIM2_Init+0x98>)
 8000750:	f002 fa34 	bl	8002bbc <HAL_TIM_Base_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800075a:	f000 f8af 	bl	80008bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800075e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000762:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	4619      	mov	r1, r3
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <MX_TIM2_Init+0x98>)
 800076c:	f002 fbf1 	bl	8002f52 <HAL_TIM_ConfigClockSource>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000776:	f000 f8a1 	bl	80008bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4619      	mov	r1, r3
 8000786:	4806      	ldr	r0, [pc, #24]	; (80007a0 <MX_TIM2_Init+0x98>)
 8000788:	f002 fdd2 	bl	8003330 <HAL_TIMEx_MasterConfigSynchronization>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000792:	f000 f893 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	3720      	adds	r7, #32
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000090 	.word	0x20000090

080007a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <MX_USART1_UART_Init+0x5c>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007e8:	f002 fe26 	bl	8003438 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007f2:	f000 f863 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200000dc 	.word	0x200000dc
 8000800:	40013800 	.word	0x40013800

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <MX_GPIO_Init+0xb0>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	4a25      	ldr	r2, [pc, #148]	; (80008b4 <MX_GPIO_Init+0xb0>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <MX_GPIO_Init+0xb0>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <MX_GPIO_Init+0xb0>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a1f      	ldr	r2, [pc, #124]	; (80008b4 <MX_GPIO_Init+0xb0>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_GPIO_Init+0xb0>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_GPIO_Init+0xb0>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a19      	ldr	r2, [pc, #100]	; (80008b4 <MX_GPIO_Init+0xb0>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_GPIO_Init+0xb0>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2108      	movs	r1, #8
 8000866:	4814      	ldr	r0, [pc, #80]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000868:	f000 ffd2 	bl	8001810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 800086c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800087e:	2303      	movs	r3, #3
 8000880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	4619      	mov	r1, r3
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f000 fe56 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000890:	2308      	movs	r3, #8
 8000892:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	4619      	mov	r1, r3
 80008a6:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_GPIO_Init+0xb4>)
 80008a8:	f000 fe48 	bl	800153c <HAL_GPIO_Init>

}
 80008ac:	bf00      	nop
 80008ae:	3720      	adds	r7, #32
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40021000 	.word	0x40021000
 80008b8:	48000400 	.word	0x48000400

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c0:	b672      	cpsid	i
}
 80008c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <Error_Handler+0x8>
	...

080008c8 <SIM_Handler>:


uint8_t allRX_Data[1000] = {0};
uint8_t allRX_Data_Index = 0;

void SIM_Handler(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0

	switch (simState) {
 80008cc:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <SIM_Handler+0x34>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d00c      	beq.n	80008ee <SIM_Handler+0x26>
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	dc0d      	bgt.n	80008f4 <SIM_Handler+0x2c>
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d002      	beq.n	80008e2 <SIM_Handler+0x1a>
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d003      	beq.n	80008e8 <SIM_Handler+0x20>
			break;
		case SIM_PDN_ACTIVATION:
			SIM_PDN_Activation();
			break;
		default:
			break;
 80008e0:	e008      	b.n	80008f4 <SIM_Handler+0x2c>
			SIM_Init_Handler();
 80008e2:	f000 f849 	bl	8000978 <SIM_Init_Handler>
			break;
 80008e6:	e006      	b.n	80008f6 <SIM_Handler+0x2e>
			SIM_UE_Check_Handler();
 80008e8:	f000 f8e8 	bl	8000abc <SIM_UE_Check_Handler>
			break;
 80008ec:	e003      	b.n	80008f6 <SIM_Handler+0x2e>
			SIM_PDN_Activation();
 80008ee:	f000 f967 	bl	8000bc0 <SIM_PDN_Activation>
			break;
 80008f2:	e000      	b.n	80008f6 <SIM_Handler+0x2e>
			break;
 80008f4:	bf00      	nop
	}


	return;
 80008f6:	bf00      	nop
}
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000160 	.word	0x20000160

08000900 <SIM_serialRX_Handler>:


void SIM_serialRX_Handler(uint8_t charReceived) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]

	serialRX_Buffer[serialRX_BufferIndex++] = charReceived;
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <SIM_serialRX_Handler+0x64>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	b2d1      	uxtb	r1, r2
 8000912:	4a14      	ldr	r2, [pc, #80]	; (8000964 <SIM_serialRX_Handler+0x64>)
 8000914:	7011      	strb	r1, [r2, #0]
 8000916:	4619      	mov	r1, r3
 8000918:	4a13      	ldr	r2, [pc, #76]	; (8000968 <SIM_serialRX_Handler+0x68>)
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	5453      	strb	r3, [r2, r1]

	// Remove later; Just for tracking
	allRX_Data[allRX_Data_Index++] = charReceived;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <SIM_serialRX_Handler+0x6c>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	b2d1      	uxtb	r1, r2
 8000926:	4a11      	ldr	r2, [pc, #68]	; (800096c <SIM_serialRX_Handler+0x6c>)
 8000928:	7011      	strb	r1, [r2, #0]
 800092a:	4619      	mov	r1, r3
 800092c:	4a10      	ldr	r2, [pc, #64]	; (8000970 <SIM_serialRX_Handler+0x70>)
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	5453      	strb	r3, [r2, r1]



	if ((charReceived == (uint8_t)'\n')) {
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b0a      	cmp	r3, #10
 8000936:	d101      	bne.n	800093c <SIM_serialRX_Handler+0x3c>
		SIM_Handler();
 8000938:	f7ff ffc6 	bl	80008c8 <SIM_Handler>
	}


	if (clearBuffer) { // reset index and clear buffer
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <SIM_serialRX_Handler+0x74>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d00b      	beq.n	800095c <SIM_serialRX_Handler+0x5c>
		serialRX_BufferIndex = 0;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <SIM_serialRX_Handler+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
		memset(serialRX_Buffer, 0, sizeof(serialRX_Buffer));
 800094a:	22fa      	movs	r2, #250	; 0xfa
 800094c:	2100      	movs	r1, #0
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <SIM_serialRX_Handler+0x68>)
 8000950:	f004 f916 	bl	8004b80 <memset>
		clearBuffer = 0;
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <SIM_serialRX_Handler+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
	}


	return;
 800095a:	bf00      	nop
 800095c:	bf00      	nop
}
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200002b2 	.word	0x200002b2
 8000968:	200001b8 	.word	0x200001b8
 800096c:	200006a0 	.word	0x200006a0
 8000970:	200002b8 	.word	0x200002b8
 8000974:	200002b4 	.word	0x200002b4

08000978 <SIM_Init_Handler>:


void SIM_Init_Handler(void) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
	// ---------------------------- TX ------------------------------- //
	// 0: AT
	// 1: AT+CPIN?
	// All good state change: SIM_INIT to SIM_UE_CHECK

	uint8_t maxCommand = 1;
 800097e:	2301      	movs	r3, #1
 8000980:	71bb      	strb	r3, [r7, #6]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 8000982:	4b41      	ldr	r3, [pc, #260]	; (8000a88 <SIM_Init_Handler+0x110>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d031      	beq.n	80009ee <SIM_Init_Handler+0x76>
 800098a:	4b40      	ldr	r3, [pc, #256]	; (8000a8c <SIM_Init_Handler+0x114>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	79ba      	ldrb	r2, [r7, #6]
 8000990:	429a      	cmp	r2, r3
 8000992:	d32c      	bcc.n	80009ee <SIM_Init_Handler+0x76>
		// Next command should be transmitted

		switch (commandIndex) {
 8000994:	4b3d      	ldr	r3, [pc, #244]	; (8000a8c <SIM_Init_Handler+0x114>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d002      	beq.n	80009a2 <SIM_Init_Handler+0x2a>
 800099c:	2b01      	cmp	r3, #1
 800099e:	d014      	beq.n	80009ca <SIM_Init_Handler+0x52>
				// Check SIM card status
				sprintf(ATcommand, "AT+CPIN?\r\n");
				HAL_UART_Transmit_IT(&huart1, (uint8_t*) ATcommand, strlen(ATcommand));
				break;
			default:
				break;
 80009a0:	e022      	b.n	80009e8 <SIM_Init_Handler+0x70>
				sprintf(ATcommand, "AT\r\n");
 80009a2:	493b      	ldr	r1, [pc, #236]	; (8000a90 <SIM_Init_Handler+0x118>)
 80009a4:	483b      	ldr	r0, [pc, #236]	; (8000a94 <SIM_Init_Handler+0x11c>)
 80009a6:	f004 f8f3 	bl	8004b90 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 80009aa:	483a      	ldr	r0, [pc, #232]	; (8000a94 <SIM_Init_Handler+0x11c>)
 80009ac:	f7ff fc10 	bl	80001d0 <strlen>
 80009b0:	4603      	mov	r3, r0
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	461a      	mov	r2, r3
 80009b6:	4937      	ldr	r1, [pc, #220]	; (8000a94 <SIM_Init_Handler+0x11c>)
 80009b8:	4837      	ldr	r0, [pc, #220]	; (8000a98 <SIM_Init_Handler+0x120>)
 80009ba:	f002 fd8b 	bl	80034d4 <HAL_UART_Transmit_IT>
				HAL_UART_Receive_IT(&huart1, &serialRX_Data, 1);
 80009be:	2201      	movs	r2, #1
 80009c0:	4936      	ldr	r1, [pc, #216]	; (8000a9c <SIM_Init_Handler+0x124>)
 80009c2:	4835      	ldr	r0, [pc, #212]	; (8000a98 <SIM_Init_Handler+0x120>)
 80009c4:	f002 fdf4 	bl	80035b0 <HAL_UART_Receive_IT>
				break;
 80009c8:	e00e      	b.n	80009e8 <SIM_Init_Handler+0x70>
				sprintf(ATcommand, "AT+CPIN?\r\n");
 80009ca:	4935      	ldr	r1, [pc, #212]	; (8000aa0 <SIM_Init_Handler+0x128>)
 80009cc:	4831      	ldr	r0, [pc, #196]	; (8000a94 <SIM_Init_Handler+0x11c>)
 80009ce:	f004 f8df 	bl	8004b90 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t*) ATcommand, strlen(ATcommand));
 80009d2:	4830      	ldr	r0, [pc, #192]	; (8000a94 <SIM_Init_Handler+0x11c>)
 80009d4:	f7ff fbfc 	bl	80001d0 <strlen>
 80009d8:	4603      	mov	r3, r0
 80009da:	b29b      	uxth	r3, r3
 80009dc:	461a      	mov	r2, r3
 80009de:	492d      	ldr	r1, [pc, #180]	; (8000a94 <SIM_Init_Handler+0x11c>)
 80009e0:	482d      	ldr	r0, [pc, #180]	; (8000a98 <SIM_Init_Handler+0x120>)
 80009e2:	f002 fd77 	bl	80034d4 <HAL_UART_Transmit_IT>
				break;
 80009e6:	bf00      	nop
		}

		shouldTransmit = 0; // no transmission until response has been read
 80009e8:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <SIM_Init_Handler+0x110>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]

	} // if shouldTransmit
	// --------------------------------------------------------------- //

	// ---------------------------- RX ------------------------------- //
	uint8_t isIncrementCommand = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	71fb      	strb	r3, [r7, #7]

	switch (commandIndex) {
 80009f2:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <SIM_Init_Handler+0x114>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d002      	beq.n	8000a00 <SIM_Init_Handler+0x88>
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d00a      	beq.n	8000a14 <SIM_Init_Handler+0x9c>
				isStateChanged = 1;
			}

			break;
		default:
			break;
 80009fe:	e01c      	b.n	8000a3a <SIM_Init_Handler+0xc2>
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8000a00:	4928      	ldr	r1, [pc, #160]	; (8000aa4 <SIM_Init_Handler+0x12c>)
 8000a02:	4829      	ldr	r0, [pc, #164]	; (8000aa8 <SIM_Init_Handler+0x130>)
 8000a04:	f004 f8e4 	bl	8004bd0 <strstr>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d012      	beq.n	8000a34 <SIM_Init_Handler+0xbc>
				isIncrementCommand = 1; // Increment to go to next command
 8000a0e:	2301      	movs	r3, #1
 8000a10:	71fb      	strb	r3, [r7, #7]
			break;
 8000a12:	e00f      	b.n	8000a34 <SIM_Init_Handler+0xbc>
			if (strstr((char*) serialRX_Buffer, "+CPIN: READY\r\n\r\nOK\r\n")) {
 8000a14:	4925      	ldr	r1, [pc, #148]	; (8000aac <SIM_Init_Handler+0x134>)
 8000a16:	4824      	ldr	r0, [pc, #144]	; (8000aa8 <SIM_Init_Handler+0x130>)
 8000a18:	f004 f8da 	bl	8004bd0 <strstr>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d00a      	beq.n	8000a38 <SIM_Init_Handler+0xc0>
				isIncrementCommand = 1; // Increment to go to next command
 8000a22:	2301      	movs	r3, #1
 8000a24:	71fb      	strb	r3, [r7, #7]
				simState = SIM_UE_CHECK;
 8000a26:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <SIM_Init_Handler+0x138>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	701a      	strb	r2, [r3, #0]
				isStateChanged = 1;
 8000a2c:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <SIM_Init_Handler+0x13c>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
			break;
 8000a32:	e001      	b.n	8000a38 <SIM_Init_Handler+0xc0>
			break;
 8000a34:	bf00      	nop
 8000a36:	e000      	b.n	8000a3a <SIM_Init_Handler+0xc2>
			break;
 8000a38:	bf00      	nop
	}

	if (isIncrementCommand) {
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d00d      	beq.n	8000a5c <SIM_Init_Handler+0xe4>
		++commandIndex; // Next command
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <SIM_Init_Handler+0x114>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	3301      	adds	r3, #1
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <SIM_Init_Handler+0x114>)
 8000a4a:	701a      	strb	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <SIM_Init_Handler+0x140>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <SIM_Init_Handler+0x110>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	71fb      	strb	r3, [r7, #7]
	}

	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <SIM_Init_Handler+0x114>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	79ba      	ldrb	r2, [r7, #6]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d304      	bcc.n	8000a70 <SIM_Init_Handler+0xf8>
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <SIM_Init_Handler+0x13c>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d006      	beq.n	8000a7e <SIM_Init_Handler+0x106>
		commandIndex = 0;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <SIM_Init_Handler+0x114>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
		isStateChanged = 0;
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <SIM_Init_Handler+0x13c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
	}


	return;
 8000a7c:	bf00      	nop
 8000a7e:	bf00      	nop
}
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	200001b4 	.word	0x200001b4
 8000a90:	080054b8 	.word	0x080054b8
 8000a94:	20000164 	.word	0x20000164
 8000a98:	200000dc 	.word	0x200000dc
 8000a9c:	200002b3 	.word	0x200002b3
 8000aa0:	080054c0 	.word	0x080054c0
 8000aa4:	080054cc 	.word	0x080054cc
 8000aa8:	200001b8 	.word	0x200001b8
 8000aac:	080054d4 	.word	0x080054d4
 8000ab0:	20000160 	.word	0x20000160
 8000ab4:	200001b5 	.word	0x200001b5
 8000ab8:	200002b4 	.word	0x200002b4

08000abc <SIM_UE_Check_Handler>:


void SIM_UE_Check_Handler(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0

	// ---------------------------- TX ------------------------------- //
	// 0: AT+CPSI?

	uint8_t maxCommand = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	71bb      	strb	r3, [r7, #6]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 8000ac6:	4b33      	ldr	r3, [pc, #204]	; (8000b94 <SIM_UE_Check_Handler+0xd8>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d01b      	beq.n	8000b06 <SIM_UE_Check_Handler+0x4a>
 8000ace:	4b32      	ldr	r3, [pc, #200]	; (8000b98 <SIM_UE_Check_Handler+0xdc>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	79ba      	ldrb	r2, [r7, #6]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d316      	bcc.n	8000b06 <SIM_UE_Check_Handler+0x4a>
		// Next command should be transmitted
		switch (commandIndex) {
 8000ad8:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <SIM_UE_Check_Handler+0xdc>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d10e      	bne.n	8000afe <SIM_UE_Check_Handler+0x42>
			case 0:
				// Inquire UE system information
				sprintf(ATcommand, "AT+CPSI?\r\n");
 8000ae0:	492e      	ldr	r1, [pc, #184]	; (8000b9c <SIM_UE_Check_Handler+0xe0>)
 8000ae2:	482f      	ldr	r0, [pc, #188]	; (8000ba0 <SIM_UE_Check_Handler+0xe4>)
 8000ae4:	f004 f854 	bl	8004b90 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8000ae8:	482d      	ldr	r0, [pc, #180]	; (8000ba0 <SIM_UE_Check_Handler+0xe4>)
 8000aea:	f7ff fb71 	bl	80001d0 <strlen>
 8000aee:	4603      	mov	r3, r0
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	461a      	mov	r2, r3
 8000af4:	492a      	ldr	r1, [pc, #168]	; (8000ba0 <SIM_UE_Check_Handler+0xe4>)
 8000af6:	482b      	ldr	r0, [pc, #172]	; (8000ba4 <SIM_UE_Check_Handler+0xe8>)
 8000af8:	f002 fcec 	bl	80034d4 <HAL_UART_Transmit_IT>
				break;
 8000afc:	e000      	b.n	8000b00 <SIM_UE_Check_Handler+0x44>
			default:
				break;
 8000afe:	bf00      	nop
		}
		shouldTransmit = 0;
 8000b00:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <SIM_UE_Check_Handler+0xd8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]


	// ---------------------------- RX ------------------------------- //
	// If NB-IoT is online, change from SIM_UE_CHECK to SIM_PDN_ACTIVATION
	// If NB-IoT is NOT online, change from SIM_UE_CHECK to SIM_CONNECT_NBIOT
	uint8_t isIncrementCommand = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	71fb      	strb	r3, [r7, #7]

	switch (commandIndex) {
 8000b0a:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <SIM_UE_Check_Handler+0xdc>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d116      	bne.n	8000b40 <SIM_UE_Check_Handler+0x84>
			case 0:
				// OK should be received
				// +CPSI: LTE NB-IOT,Online should be received
				if ((strstr((char*) serialRX_Buffer, "\nOK\r\n")) && (strstr((char*) serialRX_Buffer, "+CPSI: LTE NB-IOT,Online"))) {
 8000b12:	4925      	ldr	r1, [pc, #148]	; (8000ba8 <SIM_UE_Check_Handler+0xec>)
 8000b14:	4825      	ldr	r0, [pc, #148]	; (8000bac <SIM_UE_Check_Handler+0xf0>)
 8000b16:	f004 f85b 	bl	8004bd0 <strstr>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d011      	beq.n	8000b44 <SIM_UE_Check_Handler+0x88>
 8000b20:	4923      	ldr	r1, [pc, #140]	; (8000bb0 <SIM_UE_Check_Handler+0xf4>)
 8000b22:	4822      	ldr	r0, [pc, #136]	; (8000bac <SIM_UE_Check_Handler+0xf0>)
 8000b24:	f004 f854 	bl	8004bd0 <strstr>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d00a      	beq.n	8000b44 <SIM_UE_Check_Handler+0x88>
					isIncrementCommand = 1; // Increment to go to next command
 8000b2e:	2301      	movs	r3, #1
 8000b30:	71fb      	strb	r3, [r7, #7]
					simState = SIM_PDN_ACTIVATION;
 8000b32:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <SIM_UE_Check_Handler+0xf8>)
 8000b34:	2202      	movs	r2, #2
 8000b36:	701a      	strb	r2, [r3, #0]
					isStateChanged = 1;
 8000b38:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <SIM_UE_Check_Handler+0xfc>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	701a      	strb	r2, [r3, #0]
				}

				// TODO: If NB-IoT is not online

				break;
 8000b3e:	e001      	b.n	8000b44 <SIM_UE_Check_Handler+0x88>
			default:
				break;
 8000b40:	bf00      	nop
 8000b42:	e000      	b.n	8000b46 <SIM_UE_Check_Handler+0x8a>
				break;
 8000b44:	bf00      	nop
		}

	if (isIncrementCommand) {
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d00d      	beq.n	8000b68 <SIM_UE_Check_Handler+0xac>
		++commandIndex; // Next command
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <SIM_UE_Check_Handler+0xdc>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	3301      	adds	r3, #1
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <SIM_UE_Check_Handler+0xdc>)
 8000b56:	701a      	strb	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 8000b58:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <SIM_UE_Check_Handler+0x100>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <SIM_UE_Check_Handler+0xd8>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	71fb      	strb	r3, [r7, #7]
	}
	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <SIM_UE_Check_Handler+0xdc>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	79ba      	ldrb	r2, [r7, #6]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d304      	bcc.n	8000b7c <SIM_UE_Check_Handler+0xc0>
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <SIM_UE_Check_Handler+0xfc>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d006      	beq.n	8000b8a <SIM_UE_Check_Handler+0xce>
		commandIndex = 0;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <SIM_UE_Check_Handler+0xdc>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
		isStateChanged = 0;
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <SIM_UE_Check_Handler+0xfc>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
	}


	return;
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
}
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000000 	.word	0x20000000
 8000b98:	200001b4 	.word	0x200001b4
 8000b9c:	080054ec 	.word	0x080054ec
 8000ba0:	20000164 	.word	0x20000164
 8000ba4:	200000dc 	.word	0x200000dc
 8000ba8:	080054cc 	.word	0x080054cc
 8000bac:	200001b8 	.word	0x200001b8
 8000bb0:	080054f8 	.word	0x080054f8
 8000bb4:	20000160 	.word	0x20000160
 8000bb8:	200001b5 	.word	0x200001b5
 8000bbc:	200002b4 	.word	0x200002b4

08000bc0 <SIM_PDN_Activation>:



void SIM_PDN_Activation(void) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
	// 1: AT+COPS? - Network information, operator and network
	// 2: AT+CGNAPN - Query APN delivered by the network
	// 3: AT+CNACT? - Get local IP
	// 4: AT+CNACT=0,1 - Activate 0th PDP

	uint8_t maxCommand = 4;
 8000bc6:	2304      	movs	r3, #4
 8000bc8:	71bb      	strb	r3, [r7, #6]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 8000bca:	4b88      	ldr	r3, [pc, #544]	; (8000dec <SIM_PDN_Activation+0x22c>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d065      	beq.n	8000c9e <SIM_PDN_Activation+0xde>
 8000bd2:	4b87      	ldr	r3, [pc, #540]	; (8000df0 <SIM_PDN_Activation+0x230>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	79ba      	ldrb	r2, [r7, #6]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d360      	bcc.n	8000c9e <SIM_PDN_Activation+0xde>
		// Next command should be transmitted
		switch (commandIndex) {
 8000bdc:	4b84      	ldr	r3, [pc, #528]	; (8000df0 <SIM_PDN_Activation+0x230>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	d858      	bhi.n	8000c96 <SIM_PDN_Activation+0xd6>
 8000be4:	a201      	add	r2, pc, #4	; (adr r2, 8000bec <SIM_PDN_Activation+0x2c>)
 8000be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bea:	bf00      	nop
 8000bec:	08000c01 	.word	0x08000c01
 8000bf0:	08000c1f 	.word	0x08000c1f
 8000bf4:	08000c3d 	.word	0x08000c3d
 8000bf8:	08000c5b 	.word	0x08000c5b
 8000bfc:	08000c79 	.word	0x08000c79
			case 0:
				// Check PS service
				sprintf(ATcommand, "AT+CGATT?\r\n");
 8000c00:	497c      	ldr	r1, [pc, #496]	; (8000df4 <SIM_PDN_Activation+0x234>)
 8000c02:	487d      	ldr	r0, [pc, #500]	; (8000df8 <SIM_PDN_Activation+0x238>)
 8000c04:	f003 ffc4 	bl	8004b90 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8000c08:	487b      	ldr	r0, [pc, #492]	; (8000df8 <SIM_PDN_Activation+0x238>)
 8000c0a:	f7ff fae1 	bl	80001d0 <strlen>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	461a      	mov	r2, r3
 8000c14:	4978      	ldr	r1, [pc, #480]	; (8000df8 <SIM_PDN_Activation+0x238>)
 8000c16:	4879      	ldr	r0, [pc, #484]	; (8000dfc <SIM_PDN_Activation+0x23c>)
 8000c18:	f002 fc5c 	bl	80034d4 <HAL_UART_Transmit_IT>
				break;
 8000c1c:	e03c      	b.n	8000c98 <SIM_PDN_Activation+0xd8>

			case 1:
				// Network information
				sprintf(ATcommand, "AT+COPS?\r\n");
 8000c1e:	4978      	ldr	r1, [pc, #480]	; (8000e00 <SIM_PDN_Activation+0x240>)
 8000c20:	4875      	ldr	r0, [pc, #468]	; (8000df8 <SIM_PDN_Activation+0x238>)
 8000c22:	f003 ffb5 	bl	8004b90 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8000c26:	4874      	ldr	r0, [pc, #464]	; (8000df8 <SIM_PDN_Activation+0x238>)
 8000c28:	f7ff fad2 	bl	80001d0 <strlen>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	461a      	mov	r2, r3
 8000c32:	4971      	ldr	r1, [pc, #452]	; (8000df8 <SIM_PDN_Activation+0x238>)
 8000c34:	4871      	ldr	r0, [pc, #452]	; (8000dfc <SIM_PDN_Activation+0x23c>)
 8000c36:	f002 fc4d 	bl	80034d4 <HAL_UART_Transmit_IT>
				break;
 8000c3a:	e02d      	b.n	8000c98 <SIM_PDN_Activation+0xd8>

			case 2:
				// Network APN
				sprintf(ATcommand, "AT+CGNAPN\r\n");
 8000c3c:	4971      	ldr	r1, [pc, #452]	; (8000e04 <SIM_PDN_Activation+0x244>)
 8000c3e:	486e      	ldr	r0, [pc, #440]	; (8000df8 <SIM_PDN_Activation+0x238>)
 8000c40:	f003 ffa6 	bl	8004b90 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8000c44:	486c      	ldr	r0, [pc, #432]	; (8000df8 <SIM_PDN_Activation+0x238>)
 8000c46:	f7ff fac3 	bl	80001d0 <strlen>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4969      	ldr	r1, [pc, #420]	; (8000df8 <SIM_PDN_Activation+0x238>)
 8000c52:	486a      	ldr	r0, [pc, #424]	; (8000dfc <SIM_PDN_Activation+0x23c>)
 8000c54:	f002 fc3e 	bl	80034d4 <HAL_UART_Transmit_IT>
				break;
 8000c58:	e01e      	b.n	8000c98 <SIM_PDN_Activation+0xd8>

			case 3:
				// Local IP (to check if need to activate network)
				sprintf(ATcommand, "AT+CNACT?\r\n");
 8000c5a:	496b      	ldr	r1, [pc, #428]	; (8000e08 <SIM_PDN_Activation+0x248>)
 8000c5c:	4866      	ldr	r0, [pc, #408]	; (8000df8 <SIM_PDN_Activation+0x238>)
 8000c5e:	f003 ff97 	bl	8004b90 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8000c62:	4865      	ldr	r0, [pc, #404]	; (8000df8 <SIM_PDN_Activation+0x238>)
 8000c64:	f7ff fab4 	bl	80001d0 <strlen>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4962      	ldr	r1, [pc, #392]	; (8000df8 <SIM_PDN_Activation+0x238>)
 8000c70:	4862      	ldr	r0, [pc, #392]	; (8000dfc <SIM_PDN_Activation+0x23c>)
 8000c72:	f002 fc2f 	bl	80034d4 <HAL_UART_Transmit_IT>
				break;
 8000c76:	e00f      	b.n	8000c98 <SIM_PDN_Activation+0xd8>

			case 4:
				// Activate network, Activate 0th PDP.
				sprintf(ATcommand, "AT+CNACT=0,1\r\n");
 8000c78:	4964      	ldr	r1, [pc, #400]	; (8000e0c <SIM_PDN_Activation+0x24c>)
 8000c7a:	485f      	ldr	r0, [pc, #380]	; (8000df8 <SIM_PDN_Activation+0x238>)
 8000c7c:	f003 ff88 	bl	8004b90 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8000c80:	485d      	ldr	r0, [pc, #372]	; (8000df8 <SIM_PDN_Activation+0x238>)
 8000c82:	f7ff faa5 	bl	80001d0 <strlen>
 8000c86:	4603      	mov	r3, r0
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	495a      	ldr	r1, [pc, #360]	; (8000df8 <SIM_PDN_Activation+0x238>)
 8000c8e:	485b      	ldr	r0, [pc, #364]	; (8000dfc <SIM_PDN_Activation+0x23c>)
 8000c90:	f002 fc20 	bl	80034d4 <HAL_UART_Transmit_IT>
				break;
 8000c94:	e000      	b.n	8000c98 <SIM_PDN_Activation+0xd8>


			default:
				break;
 8000c96:	bf00      	nop
		}
		shouldTransmit = 0;
 8000c98:	4b54      	ldr	r3, [pc, #336]	; (8000dec <SIM_PDN_Activation+0x22c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]



	// ---------------------------- RX ------------------------------- //

	uint8_t isIncrementCommand = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	71fb      	strb	r3, [r7, #7]

	switch (commandIndex) {
 8000ca2:	4b53      	ldr	r3, [pc, #332]	; (8000df0 <SIM_PDN_Activation+0x230>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	d870      	bhi.n	8000d8c <SIM_PDN_Activation+0x1cc>
 8000caa:	a201      	add	r2, pc, #4	; (adr r2, 8000cb0 <SIM_PDN_Activation+0xf0>)
 8000cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb0:	08000cc5 	.word	0x08000cc5
 8000cb4:	08000cd9 	.word	0x08000cd9
 8000cb8:	08000ced 	.word	0x08000ced
 8000cbc:	08000cff 	.word	0x08000cff
 8000cc0:	08000d65 	.word	0x08000d65
			case 0:
				// CGATT: 1\r\n\r\nOK\r\n - Has attached
				if ( strstr((char*) serialRX_Buffer, "CGATT: 1\r\n\r\nOK\r\n") ) {
 8000cc4:	4952      	ldr	r1, [pc, #328]	; (8000e10 <SIM_PDN_Activation+0x250>)
 8000cc6:	4853      	ldr	r0, [pc, #332]	; (8000e14 <SIM_PDN_Activation+0x254>)
 8000cc8:	f003 ff82 	bl	8004bd0 <strstr>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d05e      	beq.n	8000d90 <SIM_PDN_Activation+0x1d0>
					isIncrementCommand = 1; // Increment to go to next command
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	71fb      	strb	r3, [r7, #7]
				}

				// TODO: If not attached to PS service
				break;
 8000cd6:	e05b      	b.n	8000d90 <SIM_PDN_Activation+0x1d0>

			case 1:
				// +COPS?\r\r\n+COPS: 1,0,\"VodaCom-SA\",9\r\n\r\nOK\r\n - 9: NB-IoT Network
				if (strstr((char*) serialRX_Buffer, "+COPS?\r\r\n+COPS: 1,0,\"VodaCom-SA\",9\r\n\r\nOK\r\n") ) {
 8000cd8:	494f      	ldr	r1, [pc, #316]	; (8000e18 <SIM_PDN_Activation+0x258>)
 8000cda:	484e      	ldr	r0, [pc, #312]	; (8000e14 <SIM_PDN_Activation+0x254>)
 8000cdc:	f003 ff78 	bl	8004bd0 <strstr>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d056      	beq.n	8000d94 <SIM_PDN_Activation+0x1d4>
					isIncrementCommand = 1;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	71fb      	strb	r3, [r7, #7]
				}

				// TODO: If network information is wrong
				break;
 8000cea:	e053      	b.n	8000d94 <SIM_PDN_Activation+0x1d4>

			case 2:
				// +CGNAPN: 1,\"internet\"\r\n\r\nOK\r\n
				if ( strstr((char*) serialRX_Buffer, "+CGNAPN: 1,\"internet\"\r\n\r\nOK\r\n") ) {
 8000cec:	494b      	ldr	r1, [pc, #300]	; (8000e1c <SIM_PDN_Activation+0x25c>)
 8000cee:	4849      	ldr	r0, [pc, #292]	; (8000e14 <SIM_PDN_Activation+0x254>)
 8000cf0:	f003 ff6e 	bl	8004bd0 <strstr>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SIM_PDN_Activation+0x13e>
					isIncrementCommand = 1;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	71fb      	strb	r3, [r7, #7]
				}

			case 3:
				// +CNACT: 0,0,\"0.0.0.0\" - Not activated
				// \r\nOK\r\n - End of response
				if ( (strstr((char*) serialRX_Buffer, "+CNACT: 0,0,\"0.0.0.0\"")) && (strstr((char*) serialRX_Buffer, "\r\nOK\r\n")) ) {
 8000cfe:	4948      	ldr	r1, [pc, #288]	; (8000e20 <SIM_PDN_Activation+0x260>)
 8000d00:	4844      	ldr	r0, [pc, #272]	; (8000e14 <SIM_PDN_Activation+0x254>)
 8000d02:	f003 ff65 	bl	8004bd0 <strstr>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d010      	beq.n	8000d2e <SIM_PDN_Activation+0x16e>
 8000d0c:	4945      	ldr	r1, [pc, #276]	; (8000e24 <SIM_PDN_Activation+0x264>)
 8000d0e:	4841      	ldr	r0, [pc, #260]	; (8000e14 <SIM_PDN_Activation+0x254>)
 8000d10:	f003 ff5e 	bl	8004bd0 <strstr>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d009      	beq.n	8000d2e <SIM_PDN_Activation+0x16e>
					// Set to correct command for activation; Clear buffer; Enable transmit next command
					commandIndex = 4;
 8000d1a:	4b35      	ldr	r3, [pc, #212]	; (8000df0 <SIM_PDN_Activation+0x230>)
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	701a      	strb	r2, [r3, #0]
					clearBuffer = 1;
 8000d20:	4b41      	ldr	r3, [pc, #260]	; (8000e28 <SIM_PDN_Activation+0x268>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
					shouldTransmit = 1;
 8000d26:	4b31      	ldr	r3, [pc, #196]	; (8000dec <SIM_PDN_Activation+0x22c>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	701a      	strb	r2, [r3, #0]
					simState = SIM_HTTP_BUILD;
					isStateChanged = 1;
					clearBuffer = 1;
					shouldTransmit = 1;
				}
				break;
 8000d2c:	e034      	b.n	8000d98 <SIM_PDN_Activation+0x1d8>
				else if ( (strstr((char*) serialRX_Buffer, "\r\n+CNACT: 0,1,")) && (strstr((char*) serialRX_Buffer, "\r\nOK\r\n"))) {
 8000d2e:	493f      	ldr	r1, [pc, #252]	; (8000e2c <SIM_PDN_Activation+0x26c>)
 8000d30:	4838      	ldr	r0, [pc, #224]	; (8000e14 <SIM_PDN_Activation+0x254>)
 8000d32:	f003 ff4d 	bl	8004bd0 <strstr>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d02d      	beq.n	8000d98 <SIM_PDN_Activation+0x1d8>
 8000d3c:	4939      	ldr	r1, [pc, #228]	; (8000e24 <SIM_PDN_Activation+0x264>)
 8000d3e:	4835      	ldr	r0, [pc, #212]	; (8000e14 <SIM_PDN_Activation+0x254>)
 8000d40:	f003 ff46 	bl	8004bd0 <strstr>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d026      	beq.n	8000d98 <SIM_PDN_Activation+0x1d8>
					simState = SIM_HTTP_BUILD;
 8000d4a:	4b39      	ldr	r3, [pc, #228]	; (8000e30 <SIM_PDN_Activation+0x270>)
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	701a      	strb	r2, [r3, #0]
					isStateChanged = 1;
 8000d50:	4b38      	ldr	r3, [pc, #224]	; (8000e34 <SIM_PDN_Activation+0x274>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	701a      	strb	r2, [r3, #0]
					clearBuffer = 1;
 8000d56:	4b34      	ldr	r3, [pc, #208]	; (8000e28 <SIM_PDN_Activation+0x268>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	701a      	strb	r2, [r3, #0]
					shouldTransmit = 1;
 8000d5c:	4b23      	ldr	r3, [pc, #140]	; (8000dec <SIM_PDN_Activation+0x22c>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
				break;
 8000d62:	e019      	b.n	8000d98 <SIM_PDN_Activation+0x1d8>

			case 4:
				// +APP PDP: 0,ACTIVE\r\n - Activated
				if ( strstr((char*) serialRX_Buffer, "+APP PDP: 0,ACTIVE\r\n") ) {
 8000d64:	4934      	ldr	r1, [pc, #208]	; (8000e38 <SIM_PDN_Activation+0x278>)
 8000d66:	482b      	ldr	r0, [pc, #172]	; (8000e14 <SIM_PDN_Activation+0x254>)
 8000d68:	f003 ff32 	bl	8004bd0 <strstr>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d014      	beq.n	8000d9c <SIM_PDN_Activation+0x1dc>
					// Successful network activation
					// Change state; Clear buffer; Enable transmit
					simState = SIM_HTTP_BUILD;
 8000d72:	4b2f      	ldr	r3, [pc, #188]	; (8000e30 <SIM_PDN_Activation+0x270>)
 8000d74:	2203      	movs	r2, #3
 8000d76:	701a      	strb	r2, [r3, #0]
					isStateChanged = 1;
 8000d78:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <SIM_PDN_Activation+0x274>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
					clearBuffer = 1;
 8000d7e:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <SIM_PDN_Activation+0x268>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
					shouldTransmit = 1;
 8000d84:	4b19      	ldr	r3, [pc, #100]	; (8000dec <SIM_PDN_Activation+0x22c>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000d8a:	e007      	b.n	8000d9c <SIM_PDN_Activation+0x1dc>

			default:
				break;
 8000d8c:	bf00      	nop
 8000d8e:	e006      	b.n	8000d9e <SIM_PDN_Activation+0x1de>
				break;
 8000d90:	bf00      	nop
 8000d92:	e004      	b.n	8000d9e <SIM_PDN_Activation+0x1de>
				break;
 8000d94:	bf00      	nop
 8000d96:	e002      	b.n	8000d9e <SIM_PDN_Activation+0x1de>
				break;
 8000d98:	bf00      	nop
 8000d9a:	e000      	b.n	8000d9e <SIM_PDN_Activation+0x1de>
				break;
 8000d9c:	bf00      	nop
		}

	if (isIncrementCommand) {
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d00d      	beq.n	8000dc0 <SIM_PDN_Activation+0x200>
		++commandIndex; // Next command
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <SIM_PDN_Activation+0x230>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	3301      	adds	r3, #1
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <SIM_PDN_Activation+0x230>)
 8000dae:	701a      	strb	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 8000db0:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <SIM_PDN_Activation+0x268>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <SIM_PDN_Activation+0x22c>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	71fb      	strb	r3, [r7, #7]
	}
	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <SIM_PDN_Activation+0x230>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	79ba      	ldrb	r2, [r7, #6]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d304      	bcc.n	8000dd4 <SIM_PDN_Activation+0x214>
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <SIM_PDN_Activation+0x274>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d006      	beq.n	8000de2 <SIM_PDN_Activation+0x222>
		commandIndex = 0;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <SIM_PDN_Activation+0x230>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
		isStateChanged = 0;
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <SIM_PDN_Activation+0x274>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
	}


	return;
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
}
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000000 	.word	0x20000000
 8000df0:	200001b4 	.word	0x200001b4
 8000df4:	08005514 	.word	0x08005514
 8000df8:	20000164 	.word	0x20000164
 8000dfc:	200000dc 	.word	0x200000dc
 8000e00:	08005520 	.word	0x08005520
 8000e04:	0800552c 	.word	0x0800552c
 8000e08:	08005538 	.word	0x08005538
 8000e0c:	08005544 	.word	0x08005544
 8000e10:	08005554 	.word	0x08005554
 8000e14:	200001b8 	.word	0x200001b8
 8000e18:	08005568 	.word	0x08005568
 8000e1c:	08005594 	.word	0x08005594
 8000e20:	080055b4 	.word	0x080055b4
 8000e24:	080055cc 	.word	0x080055cc
 8000e28:	200002b4 	.word	0x200002b4
 8000e2c:	080055d4 	.word	0x080055d4
 8000e30:	20000160 	.word	0x20000160
 8000e34:	200001b5 	.word	0x200001b5
 8000e38:	080055e4 	.word	0x080055e4

08000e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <HAL_MspInit+0x44>)
 8000e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e46:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <HAL_MspInit+0x44>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_MspInit+0x44>)
 8000e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <HAL_MspInit+0x44>)
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5e:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <HAL_MspInit+0x44>)
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e64:	6593      	str	r3, [r2, #88]	; 0x58
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_MspInit+0x44>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000

08000e84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e94:	d113      	bne.n	8000ebe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <HAL_TIM_Base_MspInit+0x44>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <HAL_TIM_Base_MspInit+0x44>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <HAL_TIM_Base_MspInit+0x44>)
 8000ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	201c      	movs	r0, #28
 8000eb4:	f000 fa8d 	bl	80013d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000eb8:	201c      	movs	r0, #28
 8000eba:	f000 faa6 	bl	800140a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40021000 	.word	0x40021000

08000ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b09e      	sub	sp, #120	; 0x78
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	2254      	movs	r2, #84	; 0x54
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f003 fe47 	bl	8004b80 <memset>
  if(huart->Instance==USART1)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a23      	ldr	r2, [pc, #140]	; (8000f84 <HAL_UART_MspInit+0xb8>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d13f      	bne.n	8000f7c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000efc:	2301      	movs	r3, #1
 8000efe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f00:	2300      	movs	r3, #0
 8000f02:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 fb5f 	bl	80025cc <HAL_RCCEx_PeriphCLKConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f14:	f7ff fcd2 	bl	80008bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <HAL_UART_MspInit+0xbc>)
 8000f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1c:	4a1a      	ldr	r2, [pc, #104]	; (8000f88 <HAL_UART_MspInit+0xbc>)
 8000f1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f22:	6613      	str	r3, [r2, #96]	; 0x60
 8000f24:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <HAL_UART_MspInit+0xbc>)
 8000f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_UART_MspInit+0xbc>)
 8000f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f34:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <HAL_UART_MspInit+0xbc>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_UART_MspInit+0xbc>)
 8000f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_SIM_Pin|UART_RX_SIM_Pin;
 8000f48:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f4c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f62:	4619      	mov	r1, r3
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f68:	f000 fae8 	bl	800153c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2025      	movs	r0, #37	; 0x25
 8000f72:	f000 fa2e 	bl	80013d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f76:	2025      	movs	r0, #37	; 0x25
 8000f78:	f000 fa47 	bl	800140a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f7c:	bf00      	nop
 8000f7e:	3778      	adds	r7, #120	; 0x78
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40013800 	.word	0x40013800
 8000f88:	40021000 	.word	0x40021000

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <NMI_Handler+0x4>

08000f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <MemManage_Handler+0x4>

08000f9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd8:	f000 f8dc 	bl	8001194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <TIM2_IRQHandler+0x10>)
 8000fe6:	f001 fe95 	bl	8002d14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000090 	.word	0x20000090

08000ff4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <USART1_IRQHandler+0x10>)
 8000ffa:	f002 fb2f 	bl	800365c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200000dc 	.word	0x200000dc

08001008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001010:	4a14      	ldr	r2, [pc, #80]	; (8001064 <_sbrk+0x5c>)
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <_sbrk+0x60>)
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <_sbrk+0x64>)
 8001026:	4a12      	ldr	r2, [pc, #72]	; (8001070 <_sbrk+0x68>)
 8001028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	429a      	cmp	r2, r3
 8001036:	d207      	bcs.n	8001048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001038:	f003 fd78 	bl	8004b2c <__errno>
 800103c:	4603      	mov	r3, r0
 800103e:	220c      	movs	r2, #12
 8001040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	e009      	b.n	800105c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <_sbrk+0x64>)
 8001058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20010000 	.word	0x20010000
 8001068:	00000400 	.word	0x00000400
 800106c:	200006a4 	.word	0x200006a4
 8001070:	200006c0 	.word	0x200006c0

08001074 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <SystemInit+0x20>)
 800107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107e:	4a05      	ldr	r2, [pc, #20]	; (8001094 <SystemInit+0x20>)
 8001080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800109c:	f7ff ffea 	bl	8001074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80010a2:	490d      	ldr	r1, [pc, #52]	; (80010d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <LoopForever+0xe>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b8:	4c0a      	ldr	r4, [pc, #40]	; (80010e4 <LoopForever+0x16>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c6:	f003 fd37 	bl	8004b38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ca:	f7ff fa93 	bl	80005f4 <main>

080010ce <LoopForever>:

LoopForever:
    b LoopForever
 80010ce:	e7fe      	b.n	80010ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010dc:	08005688 	.word	0x08005688
  ldr r2, =_sbss
 80010e0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80010e4:	200006bc 	.word	0x200006bc

080010e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC1_IRQHandler>

080010ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f000 f961 	bl	80013bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 f80e 	bl	800111c <HAL_InitTick>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	71fb      	strb	r3, [r7, #7]
 800110a:	e001      	b.n	8001110 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800110c:	f7ff fe96 	bl	8000e3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001110:	79fb      	ldrb	r3, [r7, #7]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_InitTick+0x6c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d023      	beq.n	8001178 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <HAL_InitTick+0x70>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <HAL_InitTick+0x6c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4619      	mov	r1, r3
 800113a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001142:	fbb2 f3f3 	udiv	r3, r2, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f000 f96d 	bl	8001426 <HAL_SYSTICK_Config>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d10f      	bne.n	8001172 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b0f      	cmp	r3, #15
 8001156:	d809      	bhi.n	800116c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001158:	2200      	movs	r2, #0
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f000 f937 	bl	80013d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001164:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <HAL_InitTick+0x74>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e007      	b.n	800117c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e004      	b.n	800117c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	e001      	b.n	800117c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000000c 	.word	0x2000000c
 800118c:	20000004 	.word	0x20000004
 8001190:	20000008 	.word	0x20000008

08001194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x20>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_IncTick+0x24>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <HAL_IncTick+0x24>)
 80011a6:	6013      	str	r3, [r2, #0]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	2000000c 	.word	0x2000000c
 80011b8:	200006a8 	.word	0x200006a8

080011bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <HAL_GetTick+0x14>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	200006a8 	.word	0x200006a8

080011d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff ffee 	bl	80011bc <HAL_GetTick>
 80011e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ec:	d005      	beq.n	80011fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_Delay+0x44>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011fa:	bf00      	nop
 80011fc:	f7ff ffde 	bl	80011bc <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	429a      	cmp	r2, r3
 800120a:	d8f7      	bhi.n	80011fc <HAL_Delay+0x28>
  {
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000000c 	.word	0x2000000c

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db0b      	blt.n	80012aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f003 021f 	and.w	r2, r3, #31
 8001298:	4907      	ldr	r1, [pc, #28]	; (80012b8 <__NVIC_EnableIRQ+0x38>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2001      	movs	r0, #1
 80012a2:	fa00 f202 	lsl.w	r2, r0, r2
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e100 	.word	0xe000e100

080012bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db0a      	blt.n	80012e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	490c      	ldr	r1, [pc, #48]	; (8001308 <__NVIC_SetPriority+0x4c>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	440b      	add	r3, r1
 80012e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e4:	e00a      	b.n	80012fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4908      	ldr	r1, [pc, #32]	; (800130c <__NVIC_SetPriority+0x50>)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	3b04      	subs	r3, #4
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	440b      	add	r3, r1
 80012fa:	761a      	strb	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	; 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f1c3 0307 	rsb	r3, r3, #7
 800132a:	2b04      	cmp	r3, #4
 800132c:	bf28      	it	cs
 800132e:	2304      	movcs	r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3304      	adds	r3, #4
 8001336:	2b06      	cmp	r3, #6
 8001338:	d902      	bls.n	8001340 <NVIC_EncodePriority+0x30>
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3b03      	subs	r3, #3
 800133e:	e000      	b.n	8001342 <NVIC_EncodePriority+0x32>
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	f04f 32ff 	mov.w	r2, #4294967295
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43d9      	mvns	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	4313      	orrs	r3, r2
         );
}
 800136a:	4618      	mov	r0, r3
 800136c:	3724      	adds	r7, #36	; 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001388:	d301      	bcc.n	800138e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138a:	2301      	movs	r3, #1
 800138c:	e00f      	b.n	80013ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <SysTick_Config+0x40>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001396:	210f      	movs	r1, #15
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f7ff ff8e 	bl	80012bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <SysTick_Config+0x40>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a6:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <SysTick_Config+0x40>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	e000e010 	.word	0xe000e010

080013bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff29 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013e4:	f7ff ff3e 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	6978      	ldr	r0, [r7, #20]
 80013f0:	f7ff ff8e 	bl	8001310 <NVIC_EncodePriority>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff5d 	bl	80012bc <__NVIC_SetPriority>
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff31 	bl	8001280 <__NVIC_EnableIRQ>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffa2 	bl	8001378 <SysTick_Config>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800143e:	b480      	push	{r7}
 8001440:	b085      	sub	sp, #20
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d008      	beq.n	8001468 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2204      	movs	r2, #4
 800145a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e022      	b.n	80014ae <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 020e 	bic.w	r2, r2, #14
 8001476:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0201 	bic.w	r2, r2, #1
 8001486:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148c:	f003 021c 	and.w	r2, r3, #28
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	2101      	movs	r1, #1
 8001496:	fa01 f202 	lsl.w	r2, r1, r2
 800149a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d005      	beq.n	80014de <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2204      	movs	r2, #4
 80014d6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	e029      	b.n	8001532 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 020e 	bic.w	r2, r2, #14
 80014ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0201 	bic.w	r2, r2, #1
 80014fc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f003 021c 	and.w	r2, r3, #28
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	2101      	movs	r1, #1
 800150c:	fa01 f202 	lsl.w	r2, r1, r2
 8001510:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	4798      	blx	r3
    }
  }
  return status;
 8001532:	7bfb      	ldrb	r3, [r7, #15]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800153c:	b480      	push	{r7}
 800153e:	b087      	sub	sp, #28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154a:	e148      	b.n	80017de <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	2101      	movs	r1, #1
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	4013      	ands	r3, r2
 800155a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 813a 	beq.w	80017d8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b01      	cmp	r3, #1
 800156e:	d005      	beq.n	800157c <HAL_GPIO_Init+0x40>
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d130      	bne.n	80015de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	2203      	movs	r2, #3
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68da      	ldr	r2, [r3, #12]
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015b2:	2201      	movs	r2, #1
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	091b      	lsrs	r3, r3, #4
 80015c8:	f003 0201 	and.w	r2, r3, #1
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d017      	beq.n	800161a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	2203      	movs	r2, #3
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d123      	bne.n	800166e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	08da      	lsrs	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3208      	adds	r2, #8
 800162e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001632:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	220f      	movs	r2, #15
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	691a      	ldr	r2, [r3, #16]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	08da      	lsrs	r2, r3, #3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3208      	adds	r2, #8
 8001668:	6939      	ldr	r1, [r7, #16]
 800166a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	2203      	movs	r2, #3
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 0203 	and.w	r2, r3, #3
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 8094 	beq.w	80017d8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b0:	4b52      	ldr	r3, [pc, #328]	; (80017fc <HAL_GPIO_Init+0x2c0>)
 80016b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016b4:	4a51      	ldr	r2, [pc, #324]	; (80017fc <HAL_GPIO_Init+0x2c0>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6613      	str	r3, [r2, #96]	; 0x60
 80016bc:	4b4f      	ldr	r3, [pc, #316]	; (80017fc <HAL_GPIO_Init+0x2c0>)
 80016be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016c8:	4a4d      	ldr	r2, [pc, #308]	; (8001800 <HAL_GPIO_Init+0x2c4>)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	3302      	adds	r3, #2
 80016d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	220f      	movs	r2, #15
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016f2:	d00d      	beq.n	8001710 <HAL_GPIO_Init+0x1d4>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a43      	ldr	r2, [pc, #268]	; (8001804 <HAL_GPIO_Init+0x2c8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d007      	beq.n	800170c <HAL_GPIO_Init+0x1d0>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a42      	ldr	r2, [pc, #264]	; (8001808 <HAL_GPIO_Init+0x2cc>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d101      	bne.n	8001708 <HAL_GPIO_Init+0x1cc>
 8001704:	2302      	movs	r3, #2
 8001706:	e004      	b.n	8001712 <HAL_GPIO_Init+0x1d6>
 8001708:	2307      	movs	r3, #7
 800170a:	e002      	b.n	8001712 <HAL_GPIO_Init+0x1d6>
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <HAL_GPIO_Init+0x1d6>
 8001710:	2300      	movs	r3, #0
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	f002 0203 	and.w	r2, r2, #3
 8001718:	0092      	lsls	r2, r2, #2
 800171a:	4093      	lsls	r3, r2
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4313      	orrs	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001722:	4937      	ldr	r1, [pc, #220]	; (8001800 <HAL_GPIO_Init+0x2c4>)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	3302      	adds	r3, #2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001730:	4b36      	ldr	r3, [pc, #216]	; (800180c <HAL_GPIO_Init+0x2d0>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	43db      	mvns	r3, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001754:	4a2d      	ldr	r2, [pc, #180]	; (800180c <HAL_GPIO_Init+0x2d0>)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800175a:	4b2c      	ldr	r3, [pc, #176]	; (800180c <HAL_GPIO_Init+0x2d0>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	43db      	mvns	r3, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4313      	orrs	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800177e:	4a23      	ldr	r2, [pc, #140]	; (800180c <HAL_GPIO_Init+0x2d0>)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001784:	4b21      	ldr	r3, [pc, #132]	; (800180c <HAL_GPIO_Init+0x2d0>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	43db      	mvns	r3, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017a8:	4a18      	ldr	r2, [pc, #96]	; (800180c <HAL_GPIO_Init+0x2d0>)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <HAL_GPIO_Init+0x2d0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017d2:	4a0e      	ldr	r2, [pc, #56]	; (800180c <HAL_GPIO_Init+0x2d0>)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	3301      	adds	r3, #1
 80017dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	fa22 f303 	lsr.w	r3, r2, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f47f aeaf 	bne.w	800154c <HAL_GPIO_Init+0x10>
  }
}
 80017ee:	bf00      	nop
 80017f0:	bf00      	nop
 80017f2:	371c      	adds	r7, #28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010000 	.word	0x40010000
 8001804:	48000400 	.word	0x48000400
 8001808:	48000800 	.word	0x48000800
 800180c:	40010400 	.word	0x40010400

08001810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	807b      	strh	r3, [r7, #2]
 800181c:	4613      	mov	r3, r2
 800181e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001820:	787b      	ldrb	r3, [r7, #1]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800182c:	e002      	b.n	8001834 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800182e:	887a      	ldrh	r2, [r7, #2]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4013      	ands	r3, r2
 8001858:	041a      	lsls	r2, r3, #16
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	43d9      	mvns	r1, r3
 800185e:	887b      	ldrh	r3, [r7, #2]
 8001860:	400b      	ands	r3, r1
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	619a      	str	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800187e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40007000 	.word	0x40007000

08001894 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <HAL_PWREx_GetVoltageRange+0x18>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40007000 	.word	0x40007000

080018b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018be:	d130      	bne.n	8001922 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018c0:	4b23      	ldr	r3, [pc, #140]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018cc:	d038      	beq.n	8001940 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018d6:	4a1e      	ldr	r2, [pc, #120]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018de:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2232      	movs	r2, #50	; 0x32
 80018e4:	fb02 f303 	mul.w	r3, r2, r3
 80018e8:	4a1b      	ldr	r2, [pc, #108]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018ea:	fba2 2303 	umull	r2, r3, r2, r3
 80018ee:	0c9b      	lsrs	r3, r3, #18
 80018f0:	3301      	adds	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018f4:	e002      	b.n	80018fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	3b01      	subs	r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001908:	d102      	bne.n	8001910 <HAL_PWREx_ControlVoltageScaling+0x60>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f2      	bne.n	80018f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800191c:	d110      	bne.n	8001940 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e00f      	b.n	8001942 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800192a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800192e:	d007      	beq.n	8001940 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001930:	4b07      	ldr	r3, [pc, #28]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001938:	4a05      	ldr	r2, [pc, #20]	; (8001950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800193a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800193e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40007000 	.word	0x40007000
 8001954:	20000004 	.word	0x20000004
 8001958:	431bde83 	.word	0x431bde83

0800195c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d102      	bne.n	8001970 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	f000 bc02 	b.w	8002174 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001970:	4b96      	ldr	r3, [pc, #600]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 030c 	and.w	r3, r3, #12
 8001978:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800197a:	4b94      	ldr	r3, [pc, #592]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80e4 	beq.w	8001b5a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d007      	beq.n	80019a8 <HAL_RCC_OscConfig+0x4c>
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2b0c      	cmp	r3, #12
 800199c:	f040 808b 	bne.w	8001ab6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	f040 8087 	bne.w	8001ab6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019a8:	4b88      	ldr	r3, [pc, #544]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <HAL_RCC_OscConfig+0x64>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e3d9      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1a      	ldr	r2, [r3, #32]
 80019c4:	4b81      	ldr	r3, [pc, #516]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d004      	beq.n	80019da <HAL_RCC_OscConfig+0x7e>
 80019d0:	4b7e      	ldr	r3, [pc, #504]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019d8:	e005      	b.n	80019e6 <HAL_RCC_OscConfig+0x8a>
 80019da:	4b7c      	ldr	r3, [pc, #496]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 80019dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e0:	091b      	lsrs	r3, r3, #4
 80019e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d223      	bcs.n	8001a32 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 fd8c 	bl	800250c <RCC_SetFlashLatencyFromMSIRange>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e3ba      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019fe:	4b73      	ldr	r3, [pc, #460]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a72      	ldr	r2, [pc, #456]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a04:	f043 0308 	orr.w	r3, r3, #8
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b70      	ldr	r3, [pc, #448]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	496d      	ldr	r1, [pc, #436]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a1c:	4b6b      	ldr	r3, [pc, #428]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	021b      	lsls	r3, r3, #8
 8001a2a:	4968      	ldr	r1, [pc, #416]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
 8001a30:	e025      	b.n	8001a7e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a32:	4b66      	ldr	r3, [pc, #408]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a65      	ldr	r2, [pc, #404]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a38:	f043 0308 	orr.w	r3, r3, #8
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	4b63      	ldr	r3, [pc, #396]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	4960      	ldr	r1, [pc, #384]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a50:	4b5e      	ldr	r3, [pc, #376]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	495b      	ldr	r1, [pc, #364]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d109      	bne.n	8001a7e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 fd4c 	bl	800250c <RCC_SetFlashLatencyFromMSIRange>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e37a      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a7e:	f000 fc81 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 8001a82:	4602      	mov	r2, r0
 8001a84:	4b51      	ldr	r3, [pc, #324]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	091b      	lsrs	r3, r3, #4
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	4950      	ldr	r1, [pc, #320]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001a90:	5ccb      	ldrb	r3, [r1, r3]
 8001a92:	f003 031f 	and.w	r3, r3, #31
 8001a96:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9a:	4a4e      	ldr	r2, [pc, #312]	; (8001bd4 <HAL_RCC_OscConfig+0x278>)
 8001a9c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a9e:	4b4e      	ldr	r3, [pc, #312]	; (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fb3a 	bl	800111c <HAL_InitTick>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d052      	beq.n	8001b58 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	e35e      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d032      	beq.n	8001b24 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001abe:	4b43      	ldr	r3, [pc, #268]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a42      	ldr	r2, [pc, #264]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001aca:	f7ff fb77 	bl	80011bc <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ad2:	f7ff fb73 	bl	80011bc <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e347      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ae4:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001af0:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a35      	ldr	r2, [pc, #212]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001af6:	f043 0308 	orr.w	r3, r3, #8
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	4b33      	ldr	r3, [pc, #204]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	4930      	ldr	r1, [pc, #192]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b0e:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	492b      	ldr	r1, [pc, #172]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	604b      	str	r3, [r1, #4]
 8001b22:	e01a      	b.n	8001b5a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b24:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a28      	ldr	r2, [pc, #160]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b2a:	f023 0301 	bic.w	r3, r3, #1
 8001b2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b30:	f7ff fb44 	bl	80011bc <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b38:	f7ff fb40 	bl	80011bc <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e314      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b4a:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x1dc>
 8001b56:	e000      	b.n	8001b5a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d073      	beq.n	8001c4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d005      	beq.n	8001b78 <HAL_RCC_OscConfig+0x21c>
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2b0c      	cmp	r3, #12
 8001b70:	d10e      	bne.n	8001b90 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	d10b      	bne.n	8001b90 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d063      	beq.n	8001c4c <HAL_RCC_OscConfig+0x2f0>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d15f      	bne.n	8001c4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e2f1      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b98:	d106      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x24c>
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a0b      	ldr	r2, [pc, #44]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e025      	b.n	8001bf4 <HAL_RCC_OscConfig+0x298>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bb0:	d114      	bne.n	8001bdc <HAL_RCC_OscConfig+0x280>
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a02      	ldr	r2, [pc, #8]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e013      	b.n	8001bf4 <HAL_RCC_OscConfig+0x298>
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	080055fc 	.word	0x080055fc
 8001bd4:	20000004 	.word	0x20000004
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	4ba0      	ldr	r3, [pc, #640]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a9f      	ldr	r2, [pc, #636]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b9d      	ldr	r3, [pc, #628]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a9c      	ldr	r2, [pc, #624]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d013      	beq.n	8001c24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fade 	bl	80011bc <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff fada 	bl	80011bc <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e2ae      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c16:	4b92      	ldr	r3, [pc, #584]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0x2a8>
 8001c22:	e014      	b.n	8001c4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7ff faca 	bl	80011bc <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c2c:	f7ff fac6 	bl	80011bc <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	; 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e29a      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c3e:	4b88      	ldr	r3, [pc, #544]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x2d0>
 8001c4a:	e000      	b.n	8001c4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d060      	beq.n	8001d1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_OscConfig+0x310>
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	2b0c      	cmp	r3, #12
 8001c64:	d119      	bne.n	8001c9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d116      	bne.n	8001c9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c6c:	4b7c      	ldr	r3, [pc, #496]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_OscConfig+0x328>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e277      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c84:	4b76      	ldr	r3, [pc, #472]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	061b      	lsls	r3, r3, #24
 8001c92:	4973      	ldr	r1, [pc, #460]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c98:	e040      	b.n	8001d1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d023      	beq.n	8001cea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca2:	4b6f      	ldr	r3, [pc, #444]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a6e      	ldr	r2, [pc, #440]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cae:	f7ff fa85 	bl	80011bc <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb6:	f7ff fa81 	bl	80011bc <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e255      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc8:	4b65      	ldr	r3, [pc, #404]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd4:	4b62      	ldr	r3, [pc, #392]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	061b      	lsls	r3, r3, #24
 8001ce2:	495f      	ldr	r1, [pc, #380]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
 8001ce8:	e018      	b.n	8001d1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cea:	4b5d      	ldr	r3, [pc, #372]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a5c      	ldr	r2, [pc, #368]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf6:	f7ff fa61 	bl	80011bc <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfe:	f7ff fa5d 	bl	80011bc <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e231      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d10:	4b53      	ldr	r3, [pc, #332]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1f0      	bne.n	8001cfe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d03c      	beq.n	8001da2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01c      	beq.n	8001d6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d30:	4b4b      	ldr	r3, [pc, #300]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d36:	4a4a      	ldr	r2, [pc, #296]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d40:	f7ff fa3c 	bl	80011bc <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d48:	f7ff fa38 	bl	80011bc <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e20c      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d5a:	4b41      	ldr	r3, [pc, #260]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0ef      	beq.n	8001d48 <HAL_RCC_OscConfig+0x3ec>
 8001d68:	e01b      	b.n	8001da2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d6a:	4b3d      	ldr	r3, [pc, #244]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d70:	4a3b      	ldr	r2, [pc, #236]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001d72:	f023 0301 	bic.w	r3, r3, #1
 8001d76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7a:	f7ff fa1f 	bl	80011bc <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d82:	f7ff fa1b 	bl	80011bc <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e1ef      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d94:	4b32      	ldr	r3, [pc, #200]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1ef      	bne.n	8001d82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 80a6 	beq.w	8001efc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db0:	2300      	movs	r3, #0
 8001db2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001db4:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10d      	bne.n	8001ddc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc0:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc4:	4a26      	ldr	r2, [pc, #152]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dca:	6593      	str	r3, [r2, #88]	; 0x58
 8001dcc:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ddc:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <HAL_RCC_OscConfig+0x508>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d118      	bne.n	8001e1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001de8:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <HAL_RCC_OscConfig+0x508>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1d      	ldr	r2, [pc, #116]	; (8001e64 <HAL_RCC_OscConfig+0x508>)
 8001dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df4:	f7ff f9e2 	bl	80011bc <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dfc:	f7ff f9de 	bl	80011bc <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e1b2      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <HAL_RCC_OscConfig+0x508>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d108      	bne.n	8001e34 <HAL_RCC_OscConfig+0x4d8>
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e28:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e32:	e029      	b.n	8001e88 <HAL_RCC_OscConfig+0x52c>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2b05      	cmp	r3, #5
 8001e3a:	d115      	bne.n	8001e68 <HAL_RCC_OscConfig+0x50c>
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e42:	4a07      	ldr	r2, [pc, #28]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e52:	4a03      	ldr	r2, [pc, #12]	; (8001e60 <HAL_RCC_OscConfig+0x504>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e5c:	e014      	b.n	8001e88 <HAL_RCC_OscConfig+0x52c>
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40007000 	.word	0x40007000
 8001e68:	4b9a      	ldr	r3, [pc, #616]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 8001e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6e:	4a99      	ldr	r2, [pc, #612]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e78:	4b96      	ldr	r3, [pc, #600]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 8001e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7e:	4a95      	ldr	r2, [pc, #596]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 8001e80:	f023 0304 	bic.w	r3, r3, #4
 8001e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d016      	beq.n	8001ebe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e90:	f7ff f994 	bl	80011bc <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e96:	e00a      	b.n	8001eae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e98:	f7ff f990 	bl	80011bc <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e162      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eae:	4b89      	ldr	r3, [pc, #548]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 8001eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0ed      	beq.n	8001e98 <HAL_RCC_OscConfig+0x53c>
 8001ebc:	e015      	b.n	8001eea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebe:	f7ff f97d 	bl	80011bc <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ec4:	e00a      	b.n	8001edc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec6:	f7ff f979 	bl	80011bc <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e14b      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001edc:	4b7d      	ldr	r3, [pc, #500]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1ed      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eea:	7ffb      	ldrb	r3, [r7, #31]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d105      	bne.n	8001efc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef0:	4b78      	ldr	r3, [pc, #480]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	4a77      	ldr	r2, [pc, #476]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 8001ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001efa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0320 	and.w	r3, r3, #32
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d03c      	beq.n	8001f82 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d01c      	beq.n	8001f4a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f10:	4b70      	ldr	r3, [pc, #448]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 8001f12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f16:	4a6f      	ldr	r2, [pc, #444]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f20:	f7ff f94c 	bl	80011bc <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f28:	f7ff f948 	bl	80011bc <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e11c      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f3a:	4b66      	ldr	r3, [pc, #408]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 8001f3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0ef      	beq.n	8001f28 <HAL_RCC_OscConfig+0x5cc>
 8001f48:	e01b      	b.n	8001f82 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f4a:	4b62      	ldr	r3, [pc, #392]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 8001f4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f50:	4a60      	ldr	r2, [pc, #384]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5a:	f7ff f92f 	bl	80011bc <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f62:	f7ff f92b 	bl	80011bc <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e0ff      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f74:	4b57      	ldr	r3, [pc, #348]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 8001f76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1ef      	bne.n	8001f62 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 80f3 	beq.w	8002172 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	f040 80c9 	bne.w	8002128 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f96:	4b4f      	ldr	r3, [pc, #316]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f003 0203 	and.w	r2, r3, #3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d12c      	bne.n	8002004 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d123      	bne.n	8002004 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d11b      	bne.n	8002004 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d113      	bne.n	8002004 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe6:	085b      	lsrs	r3, r3, #1
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d109      	bne.n	8002004 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	085b      	lsrs	r3, r3, #1
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002000:	429a      	cmp	r2, r3
 8002002:	d06b      	beq.n	80020dc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2b0c      	cmp	r3, #12
 8002008:	d062      	beq.n	80020d0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800200a:	4b32      	ldr	r3, [pc, #200]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e0ac      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800201a:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a2d      	ldr	r2, [pc, #180]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 8002020:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002024:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002026:	f7ff f8c9 	bl	80011bc <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202e:	f7ff f8c5 	bl	80011bc <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e099      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002040:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f0      	bne.n	800202e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800204c:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	4b21      	ldr	r3, [pc, #132]	; (80020d8 <HAL_RCC_OscConfig+0x77c>)
 8002052:	4013      	ands	r3, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800205c:	3a01      	subs	r2, #1
 800205e:	0112      	lsls	r2, r2, #4
 8002060:	4311      	orrs	r1, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002066:	0212      	lsls	r2, r2, #8
 8002068:	4311      	orrs	r1, r2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800206e:	0852      	lsrs	r2, r2, #1
 8002070:	3a01      	subs	r2, #1
 8002072:	0552      	lsls	r2, r2, #21
 8002074:	4311      	orrs	r1, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800207a:	0852      	lsrs	r2, r2, #1
 800207c:	3a01      	subs	r2, #1
 800207e:	0652      	lsls	r2, r2, #25
 8002080:	4311      	orrs	r1, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002086:	06d2      	lsls	r2, r2, #27
 8002088:	430a      	orrs	r2, r1
 800208a:	4912      	ldr	r1, [pc, #72]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 800208c:	4313      	orrs	r3, r2
 800208e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002090:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0f      	ldr	r2, [pc, #60]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 8002096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800209a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800209c:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4a0c      	ldr	r2, [pc, #48]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 80020a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020a8:	f7ff f888 	bl	80011bc <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b0:	f7ff f884 	bl	80011bc <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e058      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c2:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <HAL_RCC_OscConfig+0x778>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ce:	e050      	b.n	8002172 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e04f      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
 80020d4:	40021000 	.word	0x40021000
 80020d8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020dc:	4b27      	ldr	r3, [pc, #156]	; (800217c <HAL_RCC_OscConfig+0x820>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d144      	bne.n	8002172 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020e8:	4b24      	ldr	r3, [pc, #144]	; (800217c <HAL_RCC_OscConfig+0x820>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a23      	ldr	r2, [pc, #140]	; (800217c <HAL_RCC_OscConfig+0x820>)
 80020ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020f4:	4b21      	ldr	r3, [pc, #132]	; (800217c <HAL_RCC_OscConfig+0x820>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4a20      	ldr	r2, [pc, #128]	; (800217c <HAL_RCC_OscConfig+0x820>)
 80020fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002100:	f7ff f85c 	bl	80011bc <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002108:	f7ff f858 	bl	80011bc <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e02c      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211a:	4b18      	ldr	r3, [pc, #96]	; (800217c <HAL_RCC_OscConfig+0x820>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x7ac>
 8002126:	e024      	b.n	8002172 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	2b0c      	cmp	r3, #12
 800212c:	d01f      	beq.n	800216e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <HAL_RCC_OscConfig+0x820>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a12      	ldr	r2, [pc, #72]	; (800217c <HAL_RCC_OscConfig+0x820>)
 8002134:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213a:	f7ff f83f 	bl	80011bc <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002142:	f7ff f83b 	bl	80011bc <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e00f      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <HAL_RCC_OscConfig+0x820>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f0      	bne.n	8002142 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_RCC_OscConfig+0x820>)
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	4905      	ldr	r1, [pc, #20]	; (800217c <HAL_RCC_OscConfig+0x820>)
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_RCC_OscConfig+0x824>)
 8002168:	4013      	ands	r3, r2
 800216a:	60cb      	str	r3, [r1, #12]
 800216c:	e001      	b.n	8002172 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3720      	adds	r7, #32
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000
 8002180:	feeefffc 	.word	0xfeeefffc

08002184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0e7      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002198:	4b75      	ldr	r3, [pc, #468]	; (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d910      	bls.n	80021c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a6:	4b72      	ldr	r3, [pc, #456]	; (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 0207 	bic.w	r2, r3, #7
 80021ae:	4970      	ldr	r1, [pc, #448]	; (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b6e      	ldr	r3, [pc, #440]	; (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0cf      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d010      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	4b66      	ldr	r3, [pc, #408]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d908      	bls.n	80021f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e4:	4b63      	ldr	r3, [pc, #396]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4960      	ldr	r1, [pc, #384]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d04c      	beq.n	800229c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b03      	cmp	r3, #3
 8002208:	d107      	bne.n	800221a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220a:	4b5a      	ldr	r3, [pc, #360]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d121      	bne.n	800225a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e0a6      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d107      	bne.n	8002232 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002222:	4b54      	ldr	r3, [pc, #336]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d115      	bne.n	800225a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e09a      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d107      	bne.n	800224a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800223a:	4b4e      	ldr	r3, [pc, #312]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e08e      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800224a:	4b4a      	ldr	r3, [pc, #296]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e086      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800225a:	4b46      	ldr	r3, [pc, #280]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f023 0203 	bic.w	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4943      	ldr	r1, [pc, #268]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 8002268:	4313      	orrs	r3, r2
 800226a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800226c:	f7fe ffa6 	bl	80011bc <HAL_GetTick>
 8002270:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002272:	e00a      	b.n	800228a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002274:	f7fe ffa2 	bl	80011bc <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e06e      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	4b3a      	ldr	r3, [pc, #232]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 020c 	and.w	r2, r3, #12
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	429a      	cmp	r2, r3
 800229a:	d1eb      	bne.n	8002274 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d010      	beq.n	80022ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	4b31      	ldr	r3, [pc, #196]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d208      	bcs.n	80022ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b8:	4b2e      	ldr	r3, [pc, #184]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	492b      	ldr	r1, [pc, #172]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ca:	4b29      	ldr	r3, [pc, #164]	; (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d210      	bcs.n	80022fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d8:	4b25      	ldr	r3, [pc, #148]	; (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 0207 	bic.w	r2, r3, #7
 80022e0:	4923      	ldr	r1, [pc, #140]	; (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e8:	4b21      	ldr	r3, [pc, #132]	; (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d001      	beq.n	80022fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e036      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	2b00      	cmp	r3, #0
 8002304:	d008      	beq.n	8002318 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002306:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	4918      	ldr	r1, [pc, #96]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 8002314:	4313      	orrs	r3, r2
 8002316:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d009      	beq.n	8002338 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4910      	ldr	r1, [pc, #64]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 8002334:	4313      	orrs	r3, r2
 8002336:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002338:	f000 f824 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 800233c:	4602      	mov	r2, r0
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	091b      	lsrs	r3, r3, #4
 8002344:	f003 030f 	and.w	r3, r3, #15
 8002348:	490b      	ldr	r1, [pc, #44]	; (8002378 <HAL_RCC_ClockConfig+0x1f4>)
 800234a:	5ccb      	ldrb	r3, [r1, r3]
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	fa22 f303 	lsr.w	r3, r2, r3
 8002354:	4a09      	ldr	r2, [pc, #36]	; (800237c <HAL_RCC_ClockConfig+0x1f8>)
 8002356:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002358:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_RCC_ClockConfig+0x1fc>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe fedd 	bl	800111c <HAL_InitTick>
 8002362:	4603      	mov	r3, r0
 8002364:	72fb      	strb	r3, [r7, #11]

  return status;
 8002366:	7afb      	ldrb	r3, [r7, #11]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40022000 	.word	0x40022000
 8002374:	40021000 	.word	0x40021000
 8002378:	080055fc 	.word	0x080055fc
 800237c:	20000004 	.word	0x20000004
 8002380:	20000008 	.word	0x20000008

08002384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002384:	b480      	push	{r7}
 8002386:	b089      	sub	sp, #36	; 0x24
 8002388:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002392:	4b3e      	ldr	r3, [pc, #248]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800239c:	4b3b      	ldr	r3, [pc, #236]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x34>
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	2b0c      	cmp	r3, #12
 80023b0:	d121      	bne.n	80023f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d11e      	bne.n	80023f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023b8:	4b34      	ldr	r3, [pc, #208]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d107      	bne.n	80023d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023c4:	4b31      	ldr	r3, [pc, #196]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 80023c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	e005      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023d4:	4b2d      	ldr	r3, [pc, #180]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023e0:	4a2b      	ldr	r2, [pc, #172]	; (8002490 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10d      	bne.n	800240c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023f4:	e00a      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d102      	bne.n	8002402 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023fc:	4b25      	ldr	r3, [pc, #148]	; (8002494 <HAL_RCC_GetSysClockFreq+0x110>)
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	e004      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	2b08      	cmp	r3, #8
 8002406:	d101      	bne.n	800240c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002408:	4b23      	ldr	r3, [pc, #140]	; (8002498 <HAL_RCC_GetSysClockFreq+0x114>)
 800240a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	2b0c      	cmp	r3, #12
 8002410:	d134      	bne.n	800247c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002412:	4b1e      	ldr	r3, [pc, #120]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d003      	beq.n	800242a <HAL_RCC_GetSysClockFreq+0xa6>
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d003      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0xac>
 8002428:	e005      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800242a:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <HAL_RCC_GetSysClockFreq+0x110>)
 800242c:	617b      	str	r3, [r7, #20]
      break;
 800242e:	e005      	b.n	800243c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <HAL_RCC_GetSysClockFreq+0x114>)
 8002432:	617b      	str	r3, [r7, #20]
      break;
 8002434:	e002      	b.n	800243c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	617b      	str	r3, [r7, #20]
      break;
 800243a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	3301      	adds	r3, #1
 8002448:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	0a1b      	lsrs	r3, r3, #8
 8002450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	fb03 f202 	mul.w	r2, r3, r2
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002460:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002462:	4b0a      	ldr	r3, [pc, #40]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	0e5b      	lsrs	r3, r3, #25
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	3301      	adds	r3, #1
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	fbb2 f3f3 	udiv	r3, r2, r3
 800247a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800247c:	69bb      	ldr	r3, [r7, #24]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3724      	adds	r7, #36	; 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
 8002490:	08005614 	.word	0x08005614
 8002494:	00f42400 	.word	0x00f42400
 8002498:	007a1200 	.word	0x007a1200

0800249c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024a2:	681b      	ldr	r3, [r3, #0]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000004 	.word	0x20000004

080024b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024b8:	f7ff fff0 	bl	800249c <HAL_RCC_GetHCLKFreq>
 80024bc:	4602      	mov	r2, r0
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	0a1b      	lsrs	r3, r3, #8
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	4904      	ldr	r1, [pc, #16]	; (80024dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80024ca:	5ccb      	ldrb	r3, [r1, r3]
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	0800560c 	.word	0x0800560c

080024e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024e4:	f7ff ffda 	bl	800249c <HAL_RCC_GetHCLKFreq>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	0adb      	lsrs	r3, r3, #11
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	4904      	ldr	r1, [pc, #16]	; (8002508 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024f6:	5ccb      	ldrb	r3, [r1, r3]
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40021000 	.word	0x40021000
 8002508:	0800560c 	.word	0x0800560c

0800250c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002514:	2300      	movs	r3, #0
 8002516:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002518:	4b2a      	ldr	r3, [pc, #168]	; (80025c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002524:	f7ff f9b6 	bl	8001894 <HAL_PWREx_GetVoltageRange>
 8002528:	6178      	str	r0, [r7, #20]
 800252a:	e014      	b.n	8002556 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800252c:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002530:	4a24      	ldr	r2, [pc, #144]	; (80025c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002536:	6593      	str	r3, [r2, #88]	; 0x58
 8002538:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800253a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002544:	f7ff f9a6 	bl	8001894 <HAL_PWREx_GetVoltageRange>
 8002548:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800254a:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800254c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254e:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002554:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800255c:	d10b      	bne.n	8002576 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b80      	cmp	r3, #128	; 0x80
 8002562:	d919      	bls.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2ba0      	cmp	r3, #160	; 0xa0
 8002568:	d902      	bls.n	8002570 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800256a:	2302      	movs	r3, #2
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	e013      	b.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002570:	2301      	movs	r3, #1
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	e010      	b.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b80      	cmp	r3, #128	; 0x80
 800257a:	d902      	bls.n	8002582 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800257c:	2303      	movs	r3, #3
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	e00a      	b.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b80      	cmp	r3, #128	; 0x80
 8002586:	d102      	bne.n	800258e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002588:	2302      	movs	r3, #2
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	e004      	b.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b70      	cmp	r3, #112	; 0x70
 8002592:	d101      	bne.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002594:	2301      	movs	r3, #1
 8002596:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f023 0207 	bic.w	r2, r3, #7
 80025a0:	4909      	ldr	r1, [pc, #36]	; (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025a8:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d001      	beq.n	80025ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40022000 	.word	0x40022000

080025cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025d4:	2300      	movs	r3, #0
 80025d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025d8:	2300      	movs	r3, #0
 80025da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d031      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025f0:	d01a      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80025f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025f6:	d814      	bhi.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d009      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002600:	d10f      	bne.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002602:	4b5d      	ldr	r3, [pc, #372]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	4a5c      	ldr	r2, [pc, #368]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800260e:	e00c      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3304      	adds	r3, #4
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f000 f9de 	bl	80029d8 <RCCEx_PLLSAI1_Config>
 800261c:	4603      	mov	r3, r0
 800261e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002620:	e003      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	74fb      	strb	r3, [r7, #19]
      break;
 8002626:	e000      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002628:	bf00      	nop
    }

    if(ret == HAL_OK)
 800262a:	7cfb      	ldrb	r3, [r7, #19]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10b      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002630:	4b51      	ldr	r3, [pc, #324]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002636:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263e:	494e      	ldr	r1, [pc, #312]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002646:	e001      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002648:	7cfb      	ldrb	r3, [r7, #19]
 800264a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 809e 	beq.w	8002796 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265a:	2300      	movs	r3, #0
 800265c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800265e:	4b46      	ldr	r3, [pc, #280]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800266e:	2300      	movs	r3, #0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00d      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002674:	4b40      	ldr	r3, [pc, #256]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002678:	4a3f      	ldr	r2, [pc, #252]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800267a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267e:	6593      	str	r3, [r2, #88]	; 0x58
 8002680:	4b3d      	ldr	r3, [pc, #244]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268c:	2301      	movs	r3, #1
 800268e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002690:	4b3a      	ldr	r3, [pc, #232]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a39      	ldr	r2, [pc, #228]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800269c:	f7fe fd8e 	bl	80011bc <HAL_GetTick>
 80026a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026a2:	e009      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a4:	f7fe fd8a 	bl	80011bc <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d902      	bls.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	74fb      	strb	r3, [r7, #19]
        break;
 80026b6:	e005      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026b8:	4b30      	ldr	r3, [pc, #192]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0ef      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80026c4:	7cfb      	ldrb	r3, [r7, #19]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d15a      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026ca:	4b2b      	ldr	r3, [pc, #172]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01e      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d019      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026e6:	4b24      	ldr	r3, [pc, #144]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026f2:	4b21      	ldr	r3, [pc, #132]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f8:	4a1f      	ldr	r2, [pc, #124]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002702:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	4a1b      	ldr	r2, [pc, #108]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800270a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002712:	4a19      	ldr	r2, [pc, #100]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d016      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002724:	f7fe fd4a 	bl	80011bc <HAL_GetTick>
 8002728:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800272a:	e00b      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272c:	f7fe fd46 	bl	80011bc <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	; 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d902      	bls.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	74fb      	strb	r3, [r7, #19]
            break;
 8002742:	e006      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0ec      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10b      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002766:	4904      	ldr	r1, [pc, #16]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800276e:	e009      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002770:	7cfb      	ldrb	r3, [r7, #19]
 8002772:	74bb      	strb	r3, [r7, #18]
 8002774:	e006      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002780:	7cfb      	ldrb	r3, [r7, #19]
 8002782:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002784:	7c7b      	ldrb	r3, [r7, #17]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d105      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278a:	4b8a      	ldr	r3, [pc, #552]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800278c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278e:	4a89      	ldr	r2, [pc, #548]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002794:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00a      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027a2:	4b84      	ldr	r3, [pc, #528]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a8:	f023 0203 	bic.w	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	4980      	ldr	r1, [pc, #512]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00a      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027c4:	4b7b      	ldr	r3, [pc, #492]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ca:	f023 020c 	bic.w	r2, r3, #12
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	4978      	ldr	r1, [pc, #480]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00a      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027e6:	4b73      	ldr	r3, [pc, #460]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	496f      	ldr	r1, [pc, #444]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002808:	4b6a      	ldr	r3, [pc, #424]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002816:	4967      	ldr	r1, [pc, #412]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800282a:	4b62      	ldr	r3, [pc, #392]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800282c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002830:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002838:	495e      	ldr	r1, [pc, #376]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00a      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800284c:	4b59      	ldr	r3, [pc, #356]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002852:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	4956      	ldr	r1, [pc, #344]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800286e:	4b51      	ldr	r3, [pc, #324]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002874:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	494d      	ldr	r1, [pc, #308]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800287e:	4313      	orrs	r3, r2
 8002880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d028      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002890:	4b48      	ldr	r3, [pc, #288]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002896:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	4945      	ldr	r1, [pc, #276]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ae:	d106      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028b0:	4b40      	ldr	r3, [pc, #256]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4a3f      	ldr	r2, [pc, #252]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ba:	60d3      	str	r3, [r2, #12]
 80028bc:	e011      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028c6:	d10c      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3304      	adds	r3, #4
 80028cc:	2101      	movs	r1, #1
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 f882 	bl	80029d8 <RCCEx_PLLSAI1_Config>
 80028d4:	4603      	mov	r3, r0
 80028d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028d8:	7cfb      	ldrb	r3, [r7, #19]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80028de:	7cfb      	ldrb	r3, [r7, #19]
 80028e0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d028      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028ee:	4b31      	ldr	r3, [pc, #196]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fc:	492d      	ldr	r1, [pc, #180]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002908:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800290c:	d106      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800290e:	4b29      	ldr	r3, [pc, #164]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	4a28      	ldr	r2, [pc, #160]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002918:	60d3      	str	r3, [r2, #12]
 800291a:	e011      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002920:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002924:	d10c      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3304      	adds	r3, #4
 800292a:	2101      	movs	r1, #1
 800292c:	4618      	mov	r0, r3
 800292e:	f000 f853 	bl	80029d8 <RCCEx_PLLSAI1_Config>
 8002932:	4603      	mov	r3, r0
 8002934:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002936:	7cfb      	ldrb	r3, [r7, #19]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800293c:	7cfb      	ldrb	r3, [r7, #19]
 800293e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01c      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800294c:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295a:	4916      	ldr	r1, [pc, #88]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002966:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800296a:	d10c      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3304      	adds	r3, #4
 8002970:	2102      	movs	r1, #2
 8002972:	4618      	mov	r0, r3
 8002974:	f000 f830 	bl	80029d8 <RCCEx_PLLSAI1_Config>
 8002978:	4603      	mov	r3, r0
 800297a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800297c:	7cfb      	ldrb	r3, [r7, #19]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002982:	7cfb      	ldrb	r3, [r7, #19]
 8002984:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002992:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002998:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a0:	4904      	ldr	r1, [pc, #16]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000

080029b8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a04      	ldr	r2, [pc, #16]	; (80029d4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80029c2:	f043 0304 	orr.w	r3, r3, #4
 80029c6:	6013      	str	r3, [r2, #0]
}
 80029c8:	bf00      	nop
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000

080029d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029e6:	4b74      	ldr	r3, [pc, #464]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d018      	beq.n	8002a24 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029f2:	4b71      	ldr	r3, [pc, #452]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f003 0203 	and.w	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d10d      	bne.n	8002a1e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
       ||
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d009      	beq.n	8002a1e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a0a:	4b6b      	ldr	r3, [pc, #428]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	091b      	lsrs	r3, r3, #4
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
       ||
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d047      	beq.n	8002aae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
 8002a22:	e044      	b.n	8002aae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d018      	beq.n	8002a5e <RCCEx_PLLSAI1_Config+0x86>
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d825      	bhi.n	8002a7c <RCCEx_PLLSAI1_Config+0xa4>
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d002      	beq.n	8002a3a <RCCEx_PLLSAI1_Config+0x62>
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d009      	beq.n	8002a4c <RCCEx_PLLSAI1_Config+0x74>
 8002a38:	e020      	b.n	8002a7c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a3a:	4b5f      	ldr	r3, [pc, #380]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d11d      	bne.n	8002a82 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a4a:	e01a      	b.n	8002a82 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a4c:	4b5a      	ldr	r3, [pc, #360]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d116      	bne.n	8002a86 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a5c:	e013      	b.n	8002a86 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a5e:	4b56      	ldr	r3, [pc, #344]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10f      	bne.n	8002a8a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a6a:	4b53      	ldr	r3, [pc, #332]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a7a:	e006      	b.n	8002a8a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a80:	e004      	b.n	8002a8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a82:	bf00      	nop
 8002a84:	e002      	b.n	8002a8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a86:	bf00      	nop
 8002a88:	e000      	b.n	8002a8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10d      	bne.n	8002aae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a92:	4b49      	ldr	r3, [pc, #292]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6819      	ldr	r1, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	430b      	orrs	r3, r1
 8002aa8:	4943      	ldr	r1, [pc, #268]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d17c      	bne.n	8002bae <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ab4:	4b40      	ldr	r3, [pc, #256]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a3f      	ldr	r2, [pc, #252]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002abe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac0:	f7fe fb7c 	bl	80011bc <HAL_GetTick>
 8002ac4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ac6:	e009      	b.n	8002adc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ac8:	f7fe fb78 	bl	80011bc <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d902      	bls.n	8002adc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	73fb      	strb	r3, [r7, #15]
        break;
 8002ada:	e005      	b.n	8002ae8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002adc:	4b36      	ldr	r3, [pc, #216]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1ef      	bne.n	8002ac8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d15f      	bne.n	8002bae <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d110      	bne.n	8002b16 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002af4:	4b30      	ldr	r3, [pc, #192]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002afc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6892      	ldr	r2, [r2, #8]
 8002b04:	0211      	lsls	r1, r2, #8
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68d2      	ldr	r2, [r2, #12]
 8002b0a:	06d2      	lsls	r2, r2, #27
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	492a      	ldr	r1, [pc, #168]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	610b      	str	r3, [r1, #16]
 8002b14:	e027      	b.n	8002b66 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d112      	bne.n	8002b42 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b1c:	4b26      	ldr	r3, [pc, #152]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6892      	ldr	r2, [r2, #8]
 8002b2c:	0211      	lsls	r1, r2, #8
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6912      	ldr	r2, [r2, #16]
 8002b32:	0852      	lsrs	r2, r2, #1
 8002b34:	3a01      	subs	r2, #1
 8002b36:	0552      	lsls	r2, r2, #21
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	491f      	ldr	r1, [pc, #124]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	610b      	str	r3, [r1, #16]
 8002b40:	e011      	b.n	8002b66 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b42:	4b1d      	ldr	r3, [pc, #116]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b4a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6892      	ldr	r2, [r2, #8]
 8002b52:	0211      	lsls	r1, r2, #8
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6952      	ldr	r2, [r2, #20]
 8002b58:	0852      	lsrs	r2, r2, #1
 8002b5a:	3a01      	subs	r2, #1
 8002b5c:	0652      	lsls	r2, r2, #25
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	4915      	ldr	r1, [pc, #84]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b66:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a13      	ldr	r2, [pc, #76]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b70:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b72:	f7fe fb23 	bl	80011bc <HAL_GetTick>
 8002b76:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b78:	e009      	b.n	8002b8e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b7a:	f7fe fb1f 	bl	80011bc <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d902      	bls.n	8002b8e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	73fb      	strb	r3, [r7, #15]
          break;
 8002b8c:	e005      	b.n	8002b9a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0ef      	beq.n	8002b7a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d106      	bne.n	8002bae <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	4903      	ldr	r1, [pc, #12]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40021000 	.word	0x40021000

08002bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e049      	b.n	8002c62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d106      	bne.n	8002be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7fe f94e 	bl	8000e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3304      	adds	r3, #4
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	f000 fa9a 	bl	8003134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d001      	beq.n	8002c84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e03b      	b.n	8002cfc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a19      	ldr	r2, [pc, #100]	; (8002d08 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d009      	beq.n	8002cba <HAL_TIM_Base_Start_IT+0x4e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cae:	d004      	beq.n	8002cba <HAL_TIM_Base_Start_IT+0x4e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a15      	ldr	r2, [pc, #84]	; (8002d0c <HAL_TIM_Base_Start_IT+0xa0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d115      	bne.n	8002ce6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <HAL_TIM_Base_Start_IT+0xa4>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b06      	cmp	r3, #6
 8002cca:	d015      	beq.n	8002cf8 <HAL_TIM_Base_Start_IT+0x8c>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd2:	d011      	beq.n	8002cf8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce4:	e008      	b.n	8002cf8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0201 	orr.w	r2, r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	e000      	b.n	8002cfa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	40012c00 	.word	0x40012c00
 8002d0c:	40014000 	.word	0x40014000
 8002d10:	00010007 	.word	0x00010007

08002d14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d122      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d11b      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f06f 0202 	mvn.w	r2, #2
 8002d40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f9ce 	bl	80030f8 <HAL_TIM_IC_CaptureCallback>
 8002d5c:	e005      	b.n	8002d6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f9c0 	bl	80030e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f9d1 	bl	800310c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d122      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d11b      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 0204 	mvn.w	r2, #4
 8002d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f9a4 	bl	80030f8 <HAL_TIM_IC_CaptureCallback>
 8002db0:	e005      	b.n	8002dbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f996 	bl	80030e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f9a7 	bl	800310c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d122      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d11b      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f06f 0208 	mvn.w	r2, #8
 8002de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2204      	movs	r2, #4
 8002dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f97a 	bl	80030f8 <HAL_TIM_IC_CaptureCallback>
 8002e04:	e005      	b.n	8002e12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f96c 	bl	80030e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f97d 	bl	800310c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b10      	cmp	r3, #16
 8002e24:	d122      	bne.n	8002e6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d11b      	bne.n	8002e6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0210 	mvn.w	r2, #16
 8002e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2208      	movs	r2, #8
 8002e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f950 	bl	80030f8 <HAL_TIM_IC_CaptureCallback>
 8002e58:	e005      	b.n	8002e66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f942 	bl	80030e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f953 	bl	800310c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d10e      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d107      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f06f 0201 	mvn.w	r2, #1
 8002e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fd fb9e 	bl	80005d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea2:	2b80      	cmp	r3, #128	; 0x80
 8002ea4:	d10e      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb0:	2b80      	cmp	r3, #128	; 0x80
 8002eb2:	d107      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 faa6 	bl	8003410 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ed2:	d10e      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ede:	2b80      	cmp	r3, #128	; 0x80
 8002ee0:	d107      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fa99 	bl	8003424 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efc:	2b40      	cmp	r3, #64	; 0x40
 8002efe:	d10e      	bne.n	8002f1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0a:	2b40      	cmp	r3, #64	; 0x40
 8002f0c:	d107      	bne.n	8002f1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f901 	bl	8003120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d10e      	bne.n	8002f4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	2b20      	cmp	r3, #32
 8002f38:	d107      	bne.n	8002f4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f06f 0220 	mvn.w	r2, #32
 8002f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fa59 	bl	80033fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_TIM_ConfigClockSource+0x1c>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e0b6      	b.n	80030dc <HAL_TIM_ConfigClockSource+0x18a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2202      	movs	r2, #2
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f90:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f98:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002faa:	d03e      	beq.n	800302a <HAL_TIM_ConfigClockSource+0xd8>
 8002fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb0:	f200 8087 	bhi.w	80030c2 <HAL_TIM_ConfigClockSource+0x170>
 8002fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb8:	f000 8086 	beq.w	80030c8 <HAL_TIM_ConfigClockSource+0x176>
 8002fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc0:	d87f      	bhi.n	80030c2 <HAL_TIM_ConfigClockSource+0x170>
 8002fc2:	2b70      	cmp	r3, #112	; 0x70
 8002fc4:	d01a      	beq.n	8002ffc <HAL_TIM_ConfigClockSource+0xaa>
 8002fc6:	2b70      	cmp	r3, #112	; 0x70
 8002fc8:	d87b      	bhi.n	80030c2 <HAL_TIM_ConfigClockSource+0x170>
 8002fca:	2b60      	cmp	r3, #96	; 0x60
 8002fcc:	d050      	beq.n	8003070 <HAL_TIM_ConfigClockSource+0x11e>
 8002fce:	2b60      	cmp	r3, #96	; 0x60
 8002fd0:	d877      	bhi.n	80030c2 <HAL_TIM_ConfigClockSource+0x170>
 8002fd2:	2b50      	cmp	r3, #80	; 0x50
 8002fd4:	d03c      	beq.n	8003050 <HAL_TIM_ConfigClockSource+0xfe>
 8002fd6:	2b50      	cmp	r3, #80	; 0x50
 8002fd8:	d873      	bhi.n	80030c2 <HAL_TIM_ConfigClockSource+0x170>
 8002fda:	2b40      	cmp	r3, #64	; 0x40
 8002fdc:	d058      	beq.n	8003090 <HAL_TIM_ConfigClockSource+0x13e>
 8002fde:	2b40      	cmp	r3, #64	; 0x40
 8002fe0:	d86f      	bhi.n	80030c2 <HAL_TIM_ConfigClockSource+0x170>
 8002fe2:	2b30      	cmp	r3, #48	; 0x30
 8002fe4:	d064      	beq.n	80030b0 <HAL_TIM_ConfigClockSource+0x15e>
 8002fe6:	2b30      	cmp	r3, #48	; 0x30
 8002fe8:	d86b      	bhi.n	80030c2 <HAL_TIM_ConfigClockSource+0x170>
 8002fea:	2b20      	cmp	r3, #32
 8002fec:	d060      	beq.n	80030b0 <HAL_TIM_ConfigClockSource+0x15e>
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	d867      	bhi.n	80030c2 <HAL_TIM_ConfigClockSource+0x170>
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d05c      	beq.n	80030b0 <HAL_TIM_ConfigClockSource+0x15e>
 8002ff6:	2b10      	cmp	r3, #16
 8002ff8:	d05a      	beq.n	80030b0 <HAL_TIM_ConfigClockSource+0x15e>
 8002ffa:	e062      	b.n	80030c2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	6899      	ldr	r1, [r3, #8]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f000 f970 	bl	80032f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800301e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	609a      	str	r2, [r3, #8]
      break;
 8003028:	e04f      	b.n	80030ca <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	6899      	ldr	r1, [r3, #8]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f000 f959 	bl	80032f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800304c:	609a      	str	r2, [r3, #8]
      break;
 800304e:	e03c      	b.n	80030ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	6859      	ldr	r1, [r3, #4]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	461a      	mov	r2, r3
 800305e:	f000 f8cd 	bl	80031fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2150      	movs	r1, #80	; 0x50
 8003068:	4618      	mov	r0, r3
 800306a:	f000 f926 	bl	80032ba <TIM_ITRx_SetConfig>
      break;
 800306e:	e02c      	b.n	80030ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	461a      	mov	r2, r3
 800307e:	f000 f8ec 	bl	800325a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2160      	movs	r1, #96	; 0x60
 8003088:	4618      	mov	r0, r3
 800308a:	f000 f916 	bl	80032ba <TIM_ITRx_SetConfig>
      break;
 800308e:	e01c      	b.n	80030ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	6859      	ldr	r1, [r3, #4]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	461a      	mov	r2, r3
 800309e:	f000 f8ad 	bl	80031fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2140      	movs	r1, #64	; 0x40
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 f906 	bl	80032ba <TIM_ITRx_SetConfig>
      break;
 80030ae:	e00c      	b.n	80030ca <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4619      	mov	r1, r3
 80030ba:	4610      	mov	r0, r2
 80030bc:	f000 f8fd 	bl	80032ba <TIM_ITRx_SetConfig>
      break;
 80030c0:	e003      	b.n	80030ca <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
      break;
 80030c6:	e000      	b.n	80030ca <HAL_TIM_ConfigClockSource+0x178>
      break;
 80030c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030da:	7bfb      	ldrb	r3, [r7, #15]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a2a      	ldr	r2, [pc, #168]	; (80031f0 <TIM_Base_SetConfig+0xbc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d003      	beq.n	8003154 <TIM_Base_SetConfig+0x20>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003152:	d108      	bne.n	8003166 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a21      	ldr	r2, [pc, #132]	; (80031f0 <TIM_Base_SetConfig+0xbc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00b      	beq.n	8003186 <TIM_Base_SetConfig+0x52>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003174:	d007      	beq.n	8003186 <TIM_Base_SetConfig+0x52>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a1e      	ldr	r2, [pc, #120]	; (80031f4 <TIM_Base_SetConfig+0xc0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d003      	beq.n	8003186 <TIM_Base_SetConfig+0x52>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a1d      	ldr	r2, [pc, #116]	; (80031f8 <TIM_Base_SetConfig+0xc4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d108      	bne.n	8003198 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800318c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4313      	orrs	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a0c      	ldr	r2, [pc, #48]	; (80031f0 <TIM_Base_SetConfig+0xbc>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d007      	beq.n	80031d4 <TIM_Base_SetConfig+0xa0>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a0b      	ldr	r2, [pc, #44]	; (80031f4 <TIM_Base_SetConfig+0xc0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d003      	beq.n	80031d4 <TIM_Base_SetConfig+0xa0>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <TIM_Base_SetConfig+0xc4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d103      	bne.n	80031dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	615a      	str	r2, [r3, #20]
}
 80031e2:	bf00      	nop
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40012c00 	.word	0x40012c00
 80031f4:	40014000 	.word	0x40014000
 80031f8:	40014400 	.word	0x40014400

080031fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	f023 0201 	bic.w	r2, r3, #1
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f023 030a 	bic.w	r3, r3, #10
 8003238:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4313      	orrs	r3, r2
 8003240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	621a      	str	r2, [r3, #32]
}
 800324e:	bf00      	nop
 8003250:	371c      	adds	r7, #28
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800325a:	b480      	push	{r7}
 800325c:	b087      	sub	sp, #28
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	f023 0210 	bic.w	r2, r3, #16
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003284:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	031b      	lsls	r3, r3, #12
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4313      	orrs	r3, r2
 800328e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003296:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	621a      	str	r2, [r3, #32]
}
 80032ae:	bf00      	nop
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b085      	sub	sp, #20
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
 80032c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f043 0307 	orr.w	r3, r3, #7
 80032dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	609a      	str	r2, [r3, #8]
}
 80032e4:	bf00      	nop
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800330a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	021a      	lsls	r2, r3, #8
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	431a      	orrs	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4313      	orrs	r3, r2
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	4313      	orrs	r3, r2
 800331c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	609a      	str	r2, [r3, #8]
}
 8003324:	bf00      	nop
 8003326:	371c      	adds	r7, #28
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003344:	2302      	movs	r3, #2
 8003346:	e04f      	b.n	80033e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a21      	ldr	r2, [pc, #132]	; (80033f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d108      	bne.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003378:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a14      	ldr	r2, [pc, #80]	; (80033f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d009      	beq.n	80033bc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b0:	d004      	beq.n	80033bc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a10      	ldr	r2, [pc, #64]	; (80033f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d10c      	bne.n	80033d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	40012c00 	.word	0x40012c00
 80033f8:	40014000 	.word	0x40014000

080033fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e040      	b.n	80034cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800344e:	2b00      	cmp	r3, #0
 8003450:	d106      	bne.n	8003460 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7fd fd36 	bl	8000ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2224      	movs	r2, #36	; 0x24
 8003464:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0201 	bic.w	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fbe8 	bl	8003c4c <UART_SetConfig>
 800347c:	4603      	mov	r3, r0
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e022      	b.n	80034cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fe08 	bl	80040a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fe8f 	bl	80041e8 <UART_CheckIdleState>
 80034ca:	4603      	mov	r3, r0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b08b      	sub	sp, #44	; 0x2c
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	4613      	mov	r3, r2
 80034e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d156      	bne.n	8003598 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <HAL_UART_Transmit_IT+0x22>
 80034f0:	88fb      	ldrh	r3, [r7, #6]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e04f      	b.n	800359a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_UART_Transmit_IT+0x34>
 8003504:	2302      	movs	r3, #2
 8003506:	e048      	b.n	800359a <HAL_UART_Transmit_IT+0xc6>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	88fa      	ldrh	r2, [r7, #6]
 800351a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	88fa      	ldrh	r2, [r7, #6]
 8003522:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2221      	movs	r2, #33	; 0x21
 8003538:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003542:	d107      	bne.n	8003554 <HAL_UART_Transmit_IT+0x80>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d103      	bne.n	8003554 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4a16      	ldr	r2, [pc, #88]	; (80035a8 <HAL_UART_Transmit_IT+0xd4>)
 8003550:	669a      	str	r2, [r3, #104]	; 0x68
 8003552:	e002      	b.n	800355a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4a15      	ldr	r2, [pc, #84]	; (80035ac <HAL_UART_Transmit_IT+0xd8>)
 8003558:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	e853 3f00 	ldrex	r3, [r3]
 800356e:	613b      	str	r3, [r7, #16]
   return(result);
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	623b      	str	r3, [r7, #32]
 8003582:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003584:	69f9      	ldr	r1, [r7, #28]
 8003586:	6a3a      	ldr	r2, [r7, #32]
 8003588:	e841 2300 	strex	r3, r2, [r1]
 800358c:	61bb      	str	r3, [r7, #24]
   return(result);
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1e6      	bne.n	8003562 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	e000      	b.n	800359a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003598:	2302      	movs	r3, #2
  }
}
 800359a:	4618      	mov	r0, r3
 800359c:	372c      	adds	r7, #44	; 0x2c
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	08004743 	.word	0x08004743
 80035ac:	0800468b 	.word	0x0800468b

080035b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08a      	sub	sp, #40	; 0x28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	4613      	mov	r3, r2
 80035bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	d142      	bne.n	800364c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_UART_Receive_IT+0x22>
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e03b      	b.n	800364e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_UART_Receive_IT+0x34>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e034      	b.n	800364e <HAL_UART_Receive_IT+0x9e>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a18      	ldr	r2, [pc, #96]	; (8003658 <HAL_UART_Receive_IT+0xa8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d01f      	beq.n	800363c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d018      	beq.n	800363c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	e853 3f00 	ldrex	r3, [r3]
 8003616:	613b      	str	r3, [r7, #16]
   return(result);
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	461a      	mov	r2, r3
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	623b      	str	r3, [r7, #32]
 800362a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362c:	69f9      	ldr	r1, [r7, #28]
 800362e:	6a3a      	ldr	r2, [r7, #32]
 8003630:	e841 2300 	strex	r3, r2, [r1]
 8003634:	61bb      	str	r3, [r7, #24]
   return(result);
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1e6      	bne.n	800360a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800363c:	88fb      	ldrh	r3, [r7, #6]
 800363e:	461a      	mov	r2, r3
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fede 	bl	8004404 <UART_Start_Receive_IT>
 8003648:	4603      	mov	r3, r0
 800364a:	e000      	b.n	800364e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800364c:	2302      	movs	r3, #2
  }
}
 800364e:	4618      	mov	r0, r3
 8003650:	3728      	adds	r7, #40	; 0x28
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40008000 	.word	0x40008000

0800365c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b0ba      	sub	sp, #232	; 0xe8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003682:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003686:	f640 030f 	movw	r3, #2063	; 0x80f
 800368a:	4013      	ands	r3, r2
 800368c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003690:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d115      	bne.n	80036c4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00f      	beq.n	80036c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d009      	beq.n	80036c4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 82a6 	beq.w	8003c06 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	4798      	blx	r3
      }
      return;
 80036c2:	e2a0      	b.n	8003c06 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80036c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8117 	beq.w	80038fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80036ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80036da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80036de:	4b85      	ldr	r3, [pc, #532]	; (80038f4 <HAL_UART_IRQHandler+0x298>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 810a 	beq.w	80038fc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d011      	beq.n	8003718 <HAL_UART_IRQHandler+0xbc>
 80036f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00b      	beq.n	8003718 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2201      	movs	r2, #1
 8003706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800370e:	f043 0201 	orr.w	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d011      	beq.n	8003748 <HAL_UART_IRQHandler+0xec>
 8003724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00b      	beq.n	8003748 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2202      	movs	r2, #2
 8003736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800373e:	f043 0204 	orr.w	r2, r3, #4
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d011      	beq.n	8003778 <HAL_UART_IRQHandler+0x11c>
 8003754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00b      	beq.n	8003778 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2204      	movs	r2, #4
 8003766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800376e:	f043 0202 	orr.w	r2, r3, #2
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d017      	beq.n	80037b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b00      	cmp	r3, #0
 800378e:	d105      	bne.n	800379c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003794:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00b      	beq.n	80037b4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2208      	movs	r2, #8
 80037a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037aa:	f043 0208 	orr.w	r2, r3, #8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d012      	beq.n	80037e6 <HAL_UART_IRQHandler+0x18a>
 80037c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00c      	beq.n	80037e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037dc:	f043 0220 	orr.w	r2, r3, #32
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 820c 	beq.w	8003c0a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00d      	beq.n	800381a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003820:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	d005      	beq.n	800383e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003836:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800383a:	2b00      	cmp	r3, #0
 800383c:	d04f      	beq.n	80038de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 feaa 	bl	8004598 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b40      	cmp	r3, #64	; 0x40
 8003850:	d141      	bne.n	80038d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3308      	adds	r3, #8
 8003858:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003868:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800386c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003870:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3308      	adds	r3, #8
 800387a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800387e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003882:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800388a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800388e:	e841 2300 	strex	r3, r2, [r1]
 8003892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003896:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1d9      	bne.n	8003852 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d013      	beq.n	80038ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	4a13      	ldr	r2, [pc, #76]	; (80038f8 <HAL_UART_IRQHandler+0x29c>)
 80038ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fd fe01 	bl	80014ba <HAL_DMA_Abort_IT>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d017      	beq.n	80038ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80038c8:	4610      	mov	r0, r2
 80038ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038cc:	e00f      	b.n	80038ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f9a6 	bl	8003c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d4:	e00b      	b.n	80038ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f9a2 	bl	8003c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038dc:	e007      	b.n	80038ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f99e 	bl	8003c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80038ec:	e18d      	b.n	8003c0a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ee:	bf00      	nop
    return;
 80038f0:	e18b      	b.n	8003c0a <HAL_UART_IRQHandler+0x5ae>
 80038f2:	bf00      	nop
 80038f4:	04000120 	.word	0x04000120
 80038f8:	0800465f 	.word	0x0800465f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003900:	2b01      	cmp	r3, #1
 8003902:	f040 8146 	bne.w	8003b92 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 813f 	beq.w	8003b92 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 8138 	beq.w	8003b92 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2210      	movs	r2, #16
 8003928:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003934:	2b40      	cmp	r3, #64	; 0x40
 8003936:	f040 80b4 	bne.w	8003aa2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003946:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 815f 	beq.w	8003c0e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003956:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800395a:	429a      	cmp	r2, r3
 800395c:	f080 8157 	bcs.w	8003c0e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003966:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b00      	cmp	r3, #0
 8003978:	f040 8085 	bne.w	8003a86 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003984:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003988:	e853 3f00 	ldrex	r3, [r3]
 800398c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003990:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003998:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	461a      	mov	r2, r3
 80039a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80039a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80039aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039b6:	e841 2300 	strex	r3, r2, [r1]
 80039ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1da      	bne.n	800397c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3308      	adds	r3, #8
 80039cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039d0:	e853 3f00 	ldrex	r3, [r3]
 80039d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039d8:	f023 0301 	bic.w	r3, r3, #1
 80039dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3308      	adds	r3, #8
 80039e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039f6:	e841 2300 	strex	r3, r2, [r1]
 80039fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1e1      	bne.n	80039c6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3308      	adds	r3, #8
 8003a08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a0c:	e853 3f00 	ldrex	r3, [r3]
 8003a10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3308      	adds	r3, #8
 8003a22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e3      	bne.n	8003a02 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a4e:	e853 3f00 	ldrex	r3, [r3]
 8003a52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a56:	f023 0310 	bic.w	r3, r3, #16
 8003a5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a68:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a6a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a70:	e841 2300 	strex	r3, r2, [r1]
 8003a74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1e4      	bne.n	8003a46 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fd fcdc 	bl	800143e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	4619      	mov	r1, r3
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f8ca 	bl	8003c34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003aa0:	e0b5      	b.n	8003c0e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 80a7 	beq.w	8003c12 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003ac4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80a2 	beq.w	8003c12 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad6:	e853 3f00 	ldrex	r3, [r3]
 8003ada:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ade:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ae2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003af0:	647b      	str	r3, [r7, #68]	; 0x44
 8003af2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003af6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003af8:	e841 2300 	strex	r3, r2, [r1]
 8003afc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1e4      	bne.n	8003ace <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3308      	adds	r3, #8
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	e853 3f00 	ldrex	r3, [r3]
 8003b12:	623b      	str	r3, [r7, #32]
   return(result);
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	f023 0301 	bic.w	r3, r3, #1
 8003b1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3308      	adds	r3, #8
 8003b24:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b28:	633a      	str	r2, [r7, #48]	; 0x30
 8003b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b30:	e841 2300 	strex	r3, r2, [r1]
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e3      	bne.n	8003b04 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0310 	bic.w	r3, r3, #16
 8003b62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b74:	69b9      	ldr	r1, [r7, #24]
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	e841 2300 	strex	r3, r2, [r1]
 8003b7c:	617b      	str	r3, [r7, #20]
   return(result);
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1e4      	bne.n	8003b4e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b88:	4619      	mov	r1, r3
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f852 	bl	8003c34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b90:	e03f      	b.n	8003c12 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00e      	beq.n	8003bbc <HAL_UART_IRQHandler+0x560>
 8003b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d008      	beq.n	8003bbc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003bb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 ffae 	bl	8004b16 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bba:	e02d      	b.n	8003c18 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00e      	beq.n	8003be6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01c      	beq.n	8003c16 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	4798      	blx	r3
    }
    return;
 8003be4:	e017      	b.n	8003c16 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d012      	beq.n	8003c18 <HAL_UART_IRQHandler+0x5bc>
 8003bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00c      	beq.n	8003c18 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fdff 	bl	8004802 <UART_EndTransmit_IT>
    return;
 8003c04:	e008      	b.n	8003c18 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003c06:	bf00      	nop
 8003c08:	e006      	b.n	8003c18 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003c0a:	bf00      	nop
 8003c0c:	e004      	b.n	8003c18 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003c0e:	bf00      	nop
 8003c10:	e002      	b.n	8003c18 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003c12:	bf00      	nop
 8003c14:	e000      	b.n	8003c18 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003c16:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003c18:	37e8      	adds	r7, #232	; 0xe8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop

08003c20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c50:	b08a      	sub	sp, #40	; 0x28
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	431a      	orrs	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	4bb4      	ldr	r3, [pc, #720]	; (8003f4c <UART_SetConfig+0x300>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	6812      	ldr	r2, [r2, #0]
 8003c82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c84:	430b      	orrs	r3, r1
 8003c86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4aa9      	ldr	r2, [pc, #676]	; (8003f50 <UART_SetConfig+0x304>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d004      	beq.n	8003cb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4aa0      	ldr	r2, [pc, #640]	; (8003f54 <UART_SetConfig+0x308>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d126      	bne.n	8003d24 <UART_SetConfig+0xd8>
 8003cd6:	4ba0      	ldr	r3, [pc, #640]	; (8003f58 <UART_SetConfig+0x30c>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d81b      	bhi.n	8003d1c <UART_SetConfig+0xd0>
 8003ce4:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <UART_SetConfig+0xa0>)
 8003ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cea:	bf00      	nop
 8003cec:	08003cfd 	.word	0x08003cfd
 8003cf0:	08003d0d 	.word	0x08003d0d
 8003cf4:	08003d05 	.word	0x08003d05
 8003cf8:	08003d15 	.word	0x08003d15
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d02:	e080      	b.n	8003e06 <UART_SetConfig+0x1ba>
 8003d04:	2302      	movs	r3, #2
 8003d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d0a:	e07c      	b.n	8003e06 <UART_SetConfig+0x1ba>
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d12:	e078      	b.n	8003e06 <UART_SetConfig+0x1ba>
 8003d14:	2308      	movs	r3, #8
 8003d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d1a:	e074      	b.n	8003e06 <UART_SetConfig+0x1ba>
 8003d1c:	2310      	movs	r3, #16
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d22:	e070      	b.n	8003e06 <UART_SetConfig+0x1ba>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a8c      	ldr	r2, [pc, #560]	; (8003f5c <UART_SetConfig+0x310>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d138      	bne.n	8003da0 <UART_SetConfig+0x154>
 8003d2e:	4b8a      	ldr	r3, [pc, #552]	; (8003f58 <UART_SetConfig+0x30c>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d34:	f003 030c 	and.w	r3, r3, #12
 8003d38:	2b0c      	cmp	r3, #12
 8003d3a:	d82d      	bhi.n	8003d98 <UART_SetConfig+0x14c>
 8003d3c:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <UART_SetConfig+0xf8>)
 8003d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d42:	bf00      	nop
 8003d44:	08003d79 	.word	0x08003d79
 8003d48:	08003d99 	.word	0x08003d99
 8003d4c:	08003d99 	.word	0x08003d99
 8003d50:	08003d99 	.word	0x08003d99
 8003d54:	08003d89 	.word	0x08003d89
 8003d58:	08003d99 	.word	0x08003d99
 8003d5c:	08003d99 	.word	0x08003d99
 8003d60:	08003d99 	.word	0x08003d99
 8003d64:	08003d81 	.word	0x08003d81
 8003d68:	08003d99 	.word	0x08003d99
 8003d6c:	08003d99 	.word	0x08003d99
 8003d70:	08003d99 	.word	0x08003d99
 8003d74:	08003d91 	.word	0x08003d91
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7e:	e042      	b.n	8003e06 <UART_SetConfig+0x1ba>
 8003d80:	2302      	movs	r3, #2
 8003d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d86:	e03e      	b.n	8003e06 <UART_SetConfig+0x1ba>
 8003d88:	2304      	movs	r3, #4
 8003d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8e:	e03a      	b.n	8003e06 <UART_SetConfig+0x1ba>
 8003d90:	2308      	movs	r3, #8
 8003d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d96:	e036      	b.n	8003e06 <UART_SetConfig+0x1ba>
 8003d98:	2310      	movs	r3, #16
 8003d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d9e:	e032      	b.n	8003e06 <UART_SetConfig+0x1ba>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a6a      	ldr	r2, [pc, #424]	; (8003f50 <UART_SetConfig+0x304>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d12a      	bne.n	8003e00 <UART_SetConfig+0x1b4>
 8003daa:	4b6b      	ldr	r3, [pc, #428]	; (8003f58 <UART_SetConfig+0x30c>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003db4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003db8:	d01a      	beq.n	8003df0 <UART_SetConfig+0x1a4>
 8003dba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dbe:	d81b      	bhi.n	8003df8 <UART_SetConfig+0x1ac>
 8003dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc4:	d00c      	beq.n	8003de0 <UART_SetConfig+0x194>
 8003dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dca:	d815      	bhi.n	8003df8 <UART_SetConfig+0x1ac>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <UART_SetConfig+0x18c>
 8003dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd4:	d008      	beq.n	8003de8 <UART_SetConfig+0x19c>
 8003dd6:	e00f      	b.n	8003df8 <UART_SetConfig+0x1ac>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dde:	e012      	b.n	8003e06 <UART_SetConfig+0x1ba>
 8003de0:	2302      	movs	r3, #2
 8003de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de6:	e00e      	b.n	8003e06 <UART_SetConfig+0x1ba>
 8003de8:	2304      	movs	r3, #4
 8003dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dee:	e00a      	b.n	8003e06 <UART_SetConfig+0x1ba>
 8003df0:	2308      	movs	r3, #8
 8003df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003df6:	e006      	b.n	8003e06 <UART_SetConfig+0x1ba>
 8003df8:	2310      	movs	r3, #16
 8003dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dfe:	e002      	b.n	8003e06 <UART_SetConfig+0x1ba>
 8003e00:	2310      	movs	r3, #16
 8003e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a51      	ldr	r2, [pc, #324]	; (8003f50 <UART_SetConfig+0x304>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d17a      	bne.n	8003f06 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d824      	bhi.n	8003e62 <UART_SetConfig+0x216>
 8003e18:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <UART_SetConfig+0x1d4>)
 8003e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1e:	bf00      	nop
 8003e20:	08003e45 	.word	0x08003e45
 8003e24:	08003e63 	.word	0x08003e63
 8003e28:	08003e4d 	.word	0x08003e4d
 8003e2c:	08003e63 	.word	0x08003e63
 8003e30:	08003e53 	.word	0x08003e53
 8003e34:	08003e63 	.word	0x08003e63
 8003e38:	08003e63 	.word	0x08003e63
 8003e3c:	08003e63 	.word	0x08003e63
 8003e40:	08003e5b 	.word	0x08003e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e44:	f7fe fb36 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 8003e48:	61f8      	str	r0, [r7, #28]
        break;
 8003e4a:	e010      	b.n	8003e6e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e4c:	4b44      	ldr	r3, [pc, #272]	; (8003f60 <UART_SetConfig+0x314>)
 8003e4e:	61fb      	str	r3, [r7, #28]
        break;
 8003e50:	e00d      	b.n	8003e6e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e52:	f7fe fa97 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 8003e56:	61f8      	str	r0, [r7, #28]
        break;
 8003e58:	e009      	b.n	8003e6e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e5e:	61fb      	str	r3, [r7, #28]
        break;
 8003e60:	e005      	b.n	8003e6e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 8107 	beq.w	8004084 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	4413      	add	r3, r2
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d305      	bcc.n	8003e92 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e8c:	69fa      	ldr	r2, [r7, #28]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d903      	bls.n	8003e9a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e98:	e0f4      	b.n	8004084 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	461c      	mov	r4, r3
 8003ea0:	4615      	mov	r5, r2
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	f04f 0300 	mov.w	r3, #0
 8003eaa:	022b      	lsls	r3, r5, #8
 8003eac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003eb0:	0222      	lsls	r2, r4, #8
 8003eb2:	68f9      	ldr	r1, [r7, #12]
 8003eb4:	6849      	ldr	r1, [r1, #4]
 8003eb6:	0849      	lsrs	r1, r1, #1
 8003eb8:	2000      	movs	r0, #0
 8003eba:	4688      	mov	r8, r1
 8003ebc:	4681      	mov	r9, r0
 8003ebe:	eb12 0a08 	adds.w	sl, r2, r8
 8003ec2:	eb43 0b09 	adc.w	fp, r3, r9
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	603b      	str	r3, [r7, #0]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ed4:	4650      	mov	r0, sl
 8003ed6:	4659      	mov	r1, fp
 8003ed8:	f7fc f9d2 	bl	8000280 <__aeabi_uldivmod>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eea:	d308      	bcc.n	8003efe <UART_SetConfig+0x2b2>
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ef2:	d204      	bcs.n	8003efe <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	60da      	str	r2, [r3, #12]
 8003efc:	e0c2      	b.n	8004084 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f04:	e0be      	b.n	8004084 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f0e:	d16a      	bne.n	8003fe6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003f10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d834      	bhi.n	8003f82 <UART_SetConfig+0x336>
 8003f18:	a201      	add	r2, pc, #4	; (adr r2, 8003f20 <UART_SetConfig+0x2d4>)
 8003f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1e:	bf00      	nop
 8003f20:	08003f45 	.word	0x08003f45
 8003f24:	08003f65 	.word	0x08003f65
 8003f28:	08003f6d 	.word	0x08003f6d
 8003f2c:	08003f83 	.word	0x08003f83
 8003f30:	08003f73 	.word	0x08003f73
 8003f34:	08003f83 	.word	0x08003f83
 8003f38:	08003f83 	.word	0x08003f83
 8003f3c:	08003f83 	.word	0x08003f83
 8003f40:	08003f7b 	.word	0x08003f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f44:	f7fe fab6 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 8003f48:	61f8      	str	r0, [r7, #28]
        break;
 8003f4a:	e020      	b.n	8003f8e <UART_SetConfig+0x342>
 8003f4c:	efff69f3 	.word	0xefff69f3
 8003f50:	40008000 	.word	0x40008000
 8003f54:	40013800 	.word	0x40013800
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	40004400 	.word	0x40004400
 8003f60:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f64:	f7fe fabc 	bl	80024e0 <HAL_RCC_GetPCLK2Freq>
 8003f68:	61f8      	str	r0, [r7, #28]
        break;
 8003f6a:	e010      	b.n	8003f8e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f6c:	4b4c      	ldr	r3, [pc, #304]	; (80040a0 <UART_SetConfig+0x454>)
 8003f6e:	61fb      	str	r3, [r7, #28]
        break;
 8003f70:	e00d      	b.n	8003f8e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f72:	f7fe fa07 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 8003f76:	61f8      	str	r0, [r7, #28]
        break;
 8003f78:	e009      	b.n	8003f8e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f7e:	61fb      	str	r3, [r7, #28]
        break;
 8003f80:	e005      	b.n	8003f8e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d077      	beq.n	8004084 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	005a      	lsls	r2, r3, #1
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	085b      	lsrs	r3, r3, #1
 8003f9e:	441a      	add	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	2b0f      	cmp	r3, #15
 8003fae:	d916      	bls.n	8003fde <UART_SetConfig+0x392>
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb6:	d212      	bcs.n	8003fde <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	f023 030f 	bic.w	r3, r3, #15
 8003fc0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	085b      	lsrs	r3, r3, #1
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	8afb      	ldrh	r3, [r7, #22]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	8afa      	ldrh	r2, [r7, #22]
 8003fda:	60da      	str	r2, [r3, #12]
 8003fdc:	e052      	b.n	8004084 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fe4:	e04e      	b.n	8004084 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fe6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d827      	bhi.n	800403e <UART_SetConfig+0x3f2>
 8003fee:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <UART_SetConfig+0x3a8>)
 8003ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff4:	08004019 	.word	0x08004019
 8003ff8:	08004021 	.word	0x08004021
 8003ffc:	08004029 	.word	0x08004029
 8004000:	0800403f 	.word	0x0800403f
 8004004:	0800402f 	.word	0x0800402f
 8004008:	0800403f 	.word	0x0800403f
 800400c:	0800403f 	.word	0x0800403f
 8004010:	0800403f 	.word	0x0800403f
 8004014:	08004037 	.word	0x08004037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004018:	f7fe fa4c 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 800401c:	61f8      	str	r0, [r7, #28]
        break;
 800401e:	e014      	b.n	800404a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004020:	f7fe fa5e 	bl	80024e0 <HAL_RCC_GetPCLK2Freq>
 8004024:	61f8      	str	r0, [r7, #28]
        break;
 8004026:	e010      	b.n	800404a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004028:	4b1d      	ldr	r3, [pc, #116]	; (80040a0 <UART_SetConfig+0x454>)
 800402a:	61fb      	str	r3, [r7, #28]
        break;
 800402c:	e00d      	b.n	800404a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800402e:	f7fe f9a9 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 8004032:	61f8      	str	r0, [r7, #28]
        break;
 8004034:	e009      	b.n	800404a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800403a:	61fb      	str	r3, [r7, #28]
        break;
 800403c:	e005      	b.n	800404a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004048:	bf00      	nop
    }

    if (pclk != 0U)
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d019      	beq.n	8004084 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	085a      	lsrs	r2, r3, #1
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	441a      	add	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004062:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2b0f      	cmp	r3, #15
 8004068:	d909      	bls.n	800407e <UART_SetConfig+0x432>
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004070:	d205      	bcs.n	800407e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	60da      	str	r2, [r3, #12]
 800407c:	e002      	b.n	8004084 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004090:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004094:	4618      	mov	r0, r3
 8004096:	3728      	adds	r7, #40	; 0x28
 8004098:	46bd      	mov	sp, r7
 800409a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800409e:	bf00      	nop
 80040a0:	00f42400 	.word	0x00f42400

080040a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	f003 0310 	and.w	r3, r3, #16
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d01a      	beq.n	80041ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041a2:	d10a      	bne.n	80041ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	605a      	str	r2, [r3, #4]
  }
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041f8:	f7fc ffe0 	bl	80011bc <HAL_GetTick>
 80041fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0308 	and.w	r3, r3, #8
 8004208:	2b08      	cmp	r3, #8
 800420a:	d10e      	bne.n	800422a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800420c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f82d 	bl	800427a <UART_WaitOnFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e023      	b.n	8004272 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b04      	cmp	r3, #4
 8004236:	d10e      	bne.n	8004256 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004238:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f817 	bl	800427a <UART_WaitOnFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e00d      	b.n	8004272 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b09c      	sub	sp, #112	; 0x70
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	603b      	str	r3, [r7, #0]
 8004286:	4613      	mov	r3, r2
 8004288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800428a:	e0a5      	b.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800428c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800428e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004292:	f000 80a1 	beq.w	80043d8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004296:	f7fc ff91 	bl	80011bc <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d302      	bcc.n	80042ac <UART_WaitOnFlagUntilTimeout+0x32>
 80042a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d13e      	bne.n	800432a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042b4:	e853 3f00 	ldrex	r3, [r3]
 80042b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042c0:	667b      	str	r3, [r7, #100]	; 0x64
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042cc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042d2:	e841 2300 	strex	r3, r2, [r1]
 80042d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1e6      	bne.n	80042ac <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3308      	adds	r3, #8
 80042e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e8:	e853 3f00 	ldrex	r3, [r3]
 80042ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f0:	f023 0301 	bic.w	r3, r3, #1
 80042f4:	663b      	str	r3, [r7, #96]	; 0x60
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3308      	adds	r3, #8
 80042fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004300:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004302:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004304:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004306:	e841 2300 	strex	r3, r2, [r1]
 800430a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800430c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1e5      	bne.n	80042de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2220      	movs	r2, #32
 8004316:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e067      	b.n	80043fa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d04f      	beq.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004346:	d147      	bne.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004350:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004366:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004370:	637b      	str	r3, [r7, #52]	; 0x34
 8004372:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004374:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004378:	e841 2300 	strex	r3, r2, [r1]
 800437c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e6      	bne.n	8004352 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3308      	adds	r3, #8
 800438a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	e853 3f00 	ldrex	r3, [r3]
 8004392:	613b      	str	r3, [r7, #16]
   return(result);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f023 0301 	bic.w	r3, r3, #1
 800439a:	66bb      	str	r3, [r7, #104]	; 0x68
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3308      	adds	r3, #8
 80043a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043a4:	623a      	str	r2, [r7, #32]
 80043a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a8:	69f9      	ldr	r1, [r7, #28]
 80043aa:	6a3a      	ldr	r2, [r7, #32]
 80043ac:	e841 2300 	strex	r3, r2, [r1]
 80043b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e5      	bne.n	8004384 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e010      	b.n	80043fa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	69da      	ldr	r2, [r3, #28]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4013      	ands	r3, r2
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	79fb      	ldrb	r3, [r7, #7]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	f43f af4a 	beq.w	800428c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3770      	adds	r7, #112	; 0x70
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004404:	b480      	push	{r7}
 8004406:	b097      	sub	sp, #92	; 0x5c
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	4613      	mov	r3, r2
 8004410:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	88fa      	ldrh	r2, [r7, #6]
 800441c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	88fa      	ldrh	r2, [r7, #6]
 8004424:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004436:	d10e      	bne.n	8004456 <UART_Start_Receive_IT+0x52>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d105      	bne.n	800444c <UART_Start_Receive_IT+0x48>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004446:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800444a:	e02d      	b.n	80044a8 <UART_Start_Receive_IT+0xa4>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	22ff      	movs	r2, #255	; 0xff
 8004450:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004454:	e028      	b.n	80044a8 <UART_Start_Receive_IT+0xa4>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10d      	bne.n	800447a <UART_Start_Receive_IT+0x76>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d104      	bne.n	8004470 <UART_Start_Receive_IT+0x6c>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	22ff      	movs	r2, #255	; 0xff
 800446a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800446e:	e01b      	b.n	80044a8 <UART_Start_Receive_IT+0xa4>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	227f      	movs	r2, #127	; 0x7f
 8004474:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004478:	e016      	b.n	80044a8 <UART_Start_Receive_IT+0xa4>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004482:	d10d      	bne.n	80044a0 <UART_Start_Receive_IT+0x9c>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d104      	bne.n	8004496 <UART_Start_Receive_IT+0x92>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	227f      	movs	r2, #127	; 0x7f
 8004490:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004494:	e008      	b.n	80044a8 <UART_Start_Receive_IT+0xa4>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	223f      	movs	r2, #63	; 0x3f
 800449a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800449e:	e003      	b.n	80044a8 <UART_Start_Receive_IT+0xa4>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2222      	movs	r2, #34	; 0x22
 80044b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3308      	adds	r3, #8
 80044bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	657b      	str	r3, [r7, #84]	; 0x54
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3308      	adds	r3, #8
 80044d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80044d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80044e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e5      	bne.n	80044b6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f2:	d107      	bne.n	8004504 <UART_Start_Receive_IT+0x100>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d103      	bne.n	8004504 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4a24      	ldr	r2, [pc, #144]	; (8004590 <UART_Start_Receive_IT+0x18c>)
 8004500:	665a      	str	r2, [r3, #100]	; 0x64
 8004502:	e002      	b.n	800450a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4a23      	ldr	r2, [pc, #140]	; (8004594 <UART_Start_Receive_IT+0x190>)
 8004508:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d019      	beq.n	800454e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800452e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004538:	637b      	str	r3, [r7, #52]	; 0x34
 800453a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800453e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e6      	bne.n	800451a <UART_Start_Receive_IT+0x116>
 800454c:	e018      	b.n	8004580 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	e853 3f00 	ldrex	r3, [r3]
 800455a:	613b      	str	r3, [r7, #16]
   return(result);
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f043 0320 	orr.w	r3, r3, #32
 8004562:	653b      	str	r3, [r7, #80]	; 0x50
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800456c:	623b      	str	r3, [r7, #32]
 800456e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004570:	69f9      	ldr	r1, [r7, #28]
 8004572:	6a3a      	ldr	r2, [r7, #32]
 8004574:	e841 2300 	strex	r3, r2, [r1]
 8004578:	61bb      	str	r3, [r7, #24]
   return(result);
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e6      	bne.n	800454e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	375c      	adds	r7, #92	; 0x5c
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	080049b7 	.word	0x080049b7
 8004594:	08004857 	.word	0x08004857

08004598 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004598:	b480      	push	{r7}
 800459a:	b095      	sub	sp, #84	; 0x54
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a8:	e853 3f00 	ldrex	r3, [r3]
 80045ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045be:	643b      	str	r3, [r7, #64]	; 0x40
 80045c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045c6:	e841 2300 	strex	r3, r2, [r1]
 80045ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1e6      	bne.n	80045a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3308      	adds	r3, #8
 80045d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3308      	adds	r3, #8
 80045f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1e5      	bne.n	80045d2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800460a:	2b01      	cmp	r3, #1
 800460c:	d118      	bne.n	8004640 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	e853 3f00 	ldrex	r3, [r3]
 800461a:	60bb      	str	r3, [r7, #8]
   return(result);
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f023 0310 	bic.w	r3, r3, #16
 8004622:	647b      	str	r3, [r7, #68]	; 0x44
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004630:	6979      	ldr	r1, [r7, #20]
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	e841 2300 	strex	r3, r2, [r1]
 8004638:	613b      	str	r3, [r7, #16]
   return(result);
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e6      	bne.n	800460e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004652:	bf00      	nop
 8004654:	3754      	adds	r7, #84	; 0x54
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b084      	sub	sp, #16
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f7ff facf 	bl	8003c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004682:	bf00      	nop
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800468a:	b480      	push	{r7}
 800468c:	b08f      	sub	sp, #60	; 0x3c
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004696:	2b21      	cmp	r3, #33	; 0x21
 8004698:	d14d      	bne.n	8004736 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d132      	bne.n	800470c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	e853 3f00 	ldrex	r3, [r3]
 80046b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046ba:	637b      	str	r3, [r7, #52]	; 0x34
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046c6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e6      	bne.n	80046a6 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	e853 3f00 	ldrex	r3, [r3]
 80046e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ec:	633b      	str	r3, [r7, #48]	; 0x30
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f6:	61bb      	str	r3, [r7, #24]
 80046f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	6979      	ldr	r1, [r7, #20]
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	613b      	str	r3, [r7, #16]
   return(result);
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e6      	bne.n	80046d8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800470a:	e014      	b.n	8004736 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004710:	781a      	ldrb	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	b292      	uxth	r2, r2
 8004718:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800472a:	b29b      	uxth	r3, r3
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004736:	bf00      	nop
 8004738:	373c      	adds	r7, #60	; 0x3c
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004742:	b480      	push	{r7}
 8004744:	b091      	sub	sp, #68	; 0x44
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800474e:	2b21      	cmp	r3, #33	; 0x21
 8004750:	d151      	bne.n	80047f6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d132      	bne.n	80047c4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	e853 3f00 	ldrex	r3, [r3]
 800476a:	623b      	str	r3, [r7, #32]
   return(result);
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004772:	63bb      	str	r3, [r7, #56]	; 0x38
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	461a      	mov	r2, r3
 800477a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477c:	633b      	str	r3, [r7, #48]	; 0x30
 800477e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004780:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004784:	e841 2300 	strex	r3, r2, [r1]
 8004788:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e6      	bne.n	800475e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	e853 3f00 	ldrex	r3, [r3]
 800479c:	60fb      	str	r3, [r7, #12]
   return(result);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047a4:	637b      	str	r3, [r7, #52]	; 0x34
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ae:	61fb      	str	r3, [r7, #28]
 80047b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b2:	69b9      	ldr	r1, [r7, #24]
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	e841 2300 	strex	r3, r2, [r1]
 80047ba:	617b      	str	r3, [r7, #20]
   return(result);
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1e6      	bne.n	8004790 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80047c2:	e018      	b.n	80047f6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80047ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047cc:	881a      	ldrh	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047d6:	b292      	uxth	r2, r2
 80047d8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047de:	1c9a      	adds	r2, r3, #2
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80047f6:	bf00      	nop
 80047f8:	3744      	adds	r7, #68	; 0x44
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b088      	sub	sp, #32
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	e853 3f00 	ldrex	r3, [r3]
 8004816:	60bb      	str	r3, [r7, #8]
   return(result);
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800481e:	61fb      	str	r3, [r7, #28]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	461a      	mov	r2, r3
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	61bb      	str	r3, [r7, #24]
 800482a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482c:	6979      	ldr	r1, [r7, #20]
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	e841 2300 	strex	r3, r2, [r1]
 8004834:	613b      	str	r3, [r7, #16]
   return(result);
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1e6      	bne.n	800480a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2220      	movs	r2, #32
 8004840:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7fb fe9b 	bl	8000584 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800484e:	bf00      	nop
 8004850:	3720      	adds	r7, #32
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b096      	sub	sp, #88	; 0x58
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004864:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800486c:	2b22      	cmp	r3, #34	; 0x22
 800486e:	f040 8094 	bne.w	800499a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004878:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800487c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004880:	b2d9      	uxtb	r1, r3
 8004882:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004886:	b2da      	uxtb	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488c:	400a      	ands	r2, r1
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d179      	bne.n	80049ae <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048ce:	653b      	str	r3, [r7, #80]	; 0x50
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d8:	647b      	str	r3, [r7, #68]	; 0x44
 80048da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048e0:	e841 2300 	strex	r3, r2, [r1]
 80048e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e6      	bne.n	80048ba <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3308      	adds	r3, #8
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	623b      	str	r3, [r7, #32]
   return(result);
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	f023 0301 	bic.w	r3, r3, #1
 8004902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3308      	adds	r3, #8
 800490a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800490c:	633a      	str	r2, [r7, #48]	; 0x30
 800490e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800491a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e5      	bne.n	80048ec <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004930:	2b01      	cmp	r3, #1
 8004932:	d12e      	bne.n	8004992 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	e853 3f00 	ldrex	r3, [r3]
 8004946:	60fb      	str	r3, [r7, #12]
   return(result);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0310 	bic.w	r3, r3, #16
 800494e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	461a      	mov	r2, r3
 8004956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004958:	61fb      	str	r3, [r7, #28]
 800495a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495c:	69b9      	ldr	r1, [r7, #24]
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	e841 2300 	strex	r3, r2, [r1]
 8004964:	617b      	str	r3, [r7, #20]
   return(result);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1e6      	bne.n	800493a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	2b10      	cmp	r3, #16
 8004978:	d103      	bne.n	8004982 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2210      	movs	r2, #16
 8004980:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004988:	4619      	mov	r1, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff f952 	bl	8003c34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004990:	e00d      	b.n	80049ae <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7fb fe00 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 8004998:	e009      	b.n	80049ae <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	8b1b      	ldrh	r3, [r3, #24]
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0208 	orr.w	r2, r2, #8
 80049aa:	b292      	uxth	r2, r2
 80049ac:	831a      	strh	r2, [r3, #24]
}
 80049ae:	bf00      	nop
 80049b0:	3758      	adds	r7, #88	; 0x58
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b096      	sub	sp, #88	; 0x58
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80049c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049cc:	2b22      	cmp	r3, #34	; 0x22
 80049ce:	f040 8094 	bne.w	8004afa <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80049d8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80049e2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80049e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80049ea:	4013      	ands	r3, r2
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f6:	1c9a      	adds	r2, r3, #2
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d179      	bne.n	8004b0e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a22:	e853 3f00 	ldrex	r3, [r3]
 8004a26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a38:	643b      	str	r3, [r7, #64]	; 0x40
 8004a3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a40:	e841 2300 	strex	r3, r2, [r1]
 8004a44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e6      	bne.n	8004a1a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3308      	adds	r3, #8
 8004a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f023 0301 	bic.w	r3, r3, #1
 8004a62:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3308      	adds	r3, #8
 8004a6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e5      	bne.n	8004a4c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2220      	movs	r2, #32
 8004a84:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d12e      	bne.n	8004af2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f023 0310 	bic.w	r3, r3, #16
 8004aae:	647b      	str	r3, [r7, #68]	; 0x44
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ab8:	61bb      	str	r3, [r7, #24]
 8004aba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6979      	ldr	r1, [r7, #20]
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e6      	bne.n	8004a9a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	f003 0310 	and.w	r3, r3, #16
 8004ad6:	2b10      	cmp	r3, #16
 8004ad8:	d103      	bne.n	8004ae2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2210      	movs	r2, #16
 8004ae0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ae8:	4619      	mov	r1, r3
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff f8a2 	bl	8003c34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004af0:	e00d      	b.n	8004b0e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fb fd50 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 8004af8:	e009      	b.n	8004b0e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	8b1b      	ldrh	r3, [r3, #24]
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0208 	orr.w	r2, r2, #8
 8004b0a:	b292      	uxth	r2, r2
 8004b0c:	831a      	strh	r2, [r3, #24]
}
 8004b0e:	bf00      	nop
 8004b10:	3758      	adds	r7, #88	; 0x58
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
	...

08004b2c <__errno>:
 8004b2c:	4b01      	ldr	r3, [pc, #4]	; (8004b34 <__errno+0x8>)
 8004b2e:	6818      	ldr	r0, [r3, #0]
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	20000010 	.word	0x20000010

08004b38 <__libc_init_array>:
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	4d0d      	ldr	r5, [pc, #52]	; (8004b70 <__libc_init_array+0x38>)
 8004b3c:	4c0d      	ldr	r4, [pc, #52]	; (8004b74 <__libc_init_array+0x3c>)
 8004b3e:	1b64      	subs	r4, r4, r5
 8004b40:	10a4      	asrs	r4, r4, #2
 8004b42:	2600      	movs	r6, #0
 8004b44:	42a6      	cmp	r6, r4
 8004b46:	d109      	bne.n	8004b5c <__libc_init_array+0x24>
 8004b48:	4d0b      	ldr	r5, [pc, #44]	; (8004b78 <__libc_init_array+0x40>)
 8004b4a:	4c0c      	ldr	r4, [pc, #48]	; (8004b7c <__libc_init_array+0x44>)
 8004b4c:	f000 fca4 	bl	8005498 <_init>
 8004b50:	1b64      	subs	r4, r4, r5
 8004b52:	10a4      	asrs	r4, r4, #2
 8004b54:	2600      	movs	r6, #0
 8004b56:	42a6      	cmp	r6, r4
 8004b58:	d105      	bne.n	8004b66 <__libc_init_array+0x2e>
 8004b5a:	bd70      	pop	{r4, r5, r6, pc}
 8004b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b60:	4798      	blx	r3
 8004b62:	3601      	adds	r6, #1
 8004b64:	e7ee      	b.n	8004b44 <__libc_init_array+0xc>
 8004b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b6a:	4798      	blx	r3
 8004b6c:	3601      	adds	r6, #1
 8004b6e:	e7f2      	b.n	8004b56 <__libc_init_array+0x1e>
 8004b70:	08005680 	.word	0x08005680
 8004b74:	08005680 	.word	0x08005680
 8004b78:	08005680 	.word	0x08005680
 8004b7c:	08005684 	.word	0x08005684

08004b80 <memset>:
 8004b80:	4402      	add	r2, r0
 8004b82:	4603      	mov	r3, r0
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d100      	bne.n	8004b8a <memset+0xa>
 8004b88:	4770      	bx	lr
 8004b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b8e:	e7f9      	b.n	8004b84 <memset+0x4>

08004b90 <siprintf>:
 8004b90:	b40e      	push	{r1, r2, r3}
 8004b92:	b500      	push	{lr}
 8004b94:	b09c      	sub	sp, #112	; 0x70
 8004b96:	ab1d      	add	r3, sp, #116	; 0x74
 8004b98:	9002      	str	r0, [sp, #8]
 8004b9a:	9006      	str	r0, [sp, #24]
 8004b9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ba0:	4809      	ldr	r0, [pc, #36]	; (8004bc8 <siprintf+0x38>)
 8004ba2:	9107      	str	r1, [sp, #28]
 8004ba4:	9104      	str	r1, [sp, #16]
 8004ba6:	4909      	ldr	r1, [pc, #36]	; (8004bcc <siprintf+0x3c>)
 8004ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bac:	9105      	str	r1, [sp, #20]
 8004bae:	6800      	ldr	r0, [r0, #0]
 8004bb0:	9301      	str	r3, [sp, #4]
 8004bb2:	a902      	add	r1, sp, #8
 8004bb4:	f000 f87e 	bl	8004cb4 <_svfiprintf_r>
 8004bb8:	9b02      	ldr	r3, [sp, #8]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	701a      	strb	r2, [r3, #0]
 8004bbe:	b01c      	add	sp, #112	; 0x70
 8004bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bc4:	b003      	add	sp, #12
 8004bc6:	4770      	bx	lr
 8004bc8:	20000010 	.word	0x20000010
 8004bcc:	ffff0208 	.word	0xffff0208

08004bd0 <strstr>:
 8004bd0:	780a      	ldrb	r2, [r1, #0]
 8004bd2:	b570      	push	{r4, r5, r6, lr}
 8004bd4:	b96a      	cbnz	r2, 8004bf2 <strstr+0x22>
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d109      	bne.n	8004bf0 <strstr+0x20>
 8004bdc:	460c      	mov	r4, r1
 8004bde:	4605      	mov	r5, r0
 8004be0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0f6      	beq.n	8004bd6 <strstr+0x6>
 8004be8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004bec:	429e      	cmp	r6, r3
 8004bee:	d0f7      	beq.n	8004be0 <strstr+0x10>
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	7803      	ldrb	r3, [r0, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1ef      	bne.n	8004bd8 <strstr+0x8>
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	e7ec      	b.n	8004bd6 <strstr+0x6>

08004bfc <__ssputs_r>:
 8004bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c00:	688e      	ldr	r6, [r1, #8]
 8004c02:	429e      	cmp	r6, r3
 8004c04:	4682      	mov	sl, r0
 8004c06:	460c      	mov	r4, r1
 8004c08:	4690      	mov	r8, r2
 8004c0a:	461f      	mov	r7, r3
 8004c0c:	d838      	bhi.n	8004c80 <__ssputs_r+0x84>
 8004c0e:	898a      	ldrh	r2, [r1, #12]
 8004c10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c14:	d032      	beq.n	8004c7c <__ssputs_r+0x80>
 8004c16:	6825      	ldr	r5, [r4, #0]
 8004c18:	6909      	ldr	r1, [r1, #16]
 8004c1a:	eba5 0901 	sub.w	r9, r5, r1
 8004c1e:	6965      	ldr	r5, [r4, #20]
 8004c20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c28:	3301      	adds	r3, #1
 8004c2a:	444b      	add	r3, r9
 8004c2c:	106d      	asrs	r5, r5, #1
 8004c2e:	429d      	cmp	r5, r3
 8004c30:	bf38      	it	cc
 8004c32:	461d      	movcc	r5, r3
 8004c34:	0553      	lsls	r3, r2, #21
 8004c36:	d531      	bpl.n	8004c9c <__ssputs_r+0xa0>
 8004c38:	4629      	mov	r1, r5
 8004c3a:	f000 fb63 	bl	8005304 <_malloc_r>
 8004c3e:	4606      	mov	r6, r0
 8004c40:	b950      	cbnz	r0, 8004c58 <__ssputs_r+0x5c>
 8004c42:	230c      	movs	r3, #12
 8004c44:	f8ca 3000 	str.w	r3, [sl]
 8004c48:	89a3      	ldrh	r3, [r4, #12]
 8004c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c4e:	81a3      	strh	r3, [r4, #12]
 8004c50:	f04f 30ff 	mov.w	r0, #4294967295
 8004c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c58:	6921      	ldr	r1, [r4, #16]
 8004c5a:	464a      	mov	r2, r9
 8004c5c:	f000 fabe 	bl	80051dc <memcpy>
 8004c60:	89a3      	ldrh	r3, [r4, #12]
 8004c62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c6a:	81a3      	strh	r3, [r4, #12]
 8004c6c:	6126      	str	r6, [r4, #16]
 8004c6e:	6165      	str	r5, [r4, #20]
 8004c70:	444e      	add	r6, r9
 8004c72:	eba5 0509 	sub.w	r5, r5, r9
 8004c76:	6026      	str	r6, [r4, #0]
 8004c78:	60a5      	str	r5, [r4, #8]
 8004c7a:	463e      	mov	r6, r7
 8004c7c:	42be      	cmp	r6, r7
 8004c7e:	d900      	bls.n	8004c82 <__ssputs_r+0x86>
 8004c80:	463e      	mov	r6, r7
 8004c82:	6820      	ldr	r0, [r4, #0]
 8004c84:	4632      	mov	r2, r6
 8004c86:	4641      	mov	r1, r8
 8004c88:	f000 fab6 	bl	80051f8 <memmove>
 8004c8c:	68a3      	ldr	r3, [r4, #8]
 8004c8e:	1b9b      	subs	r3, r3, r6
 8004c90:	60a3      	str	r3, [r4, #8]
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	4433      	add	r3, r6
 8004c96:	6023      	str	r3, [r4, #0]
 8004c98:	2000      	movs	r0, #0
 8004c9a:	e7db      	b.n	8004c54 <__ssputs_r+0x58>
 8004c9c:	462a      	mov	r2, r5
 8004c9e:	f000 fba5 	bl	80053ec <_realloc_r>
 8004ca2:	4606      	mov	r6, r0
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	d1e1      	bne.n	8004c6c <__ssputs_r+0x70>
 8004ca8:	6921      	ldr	r1, [r4, #16]
 8004caa:	4650      	mov	r0, sl
 8004cac:	f000 fabe 	bl	800522c <_free_r>
 8004cb0:	e7c7      	b.n	8004c42 <__ssputs_r+0x46>
	...

08004cb4 <_svfiprintf_r>:
 8004cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb8:	4698      	mov	r8, r3
 8004cba:	898b      	ldrh	r3, [r1, #12]
 8004cbc:	061b      	lsls	r3, r3, #24
 8004cbe:	b09d      	sub	sp, #116	; 0x74
 8004cc0:	4607      	mov	r7, r0
 8004cc2:	460d      	mov	r5, r1
 8004cc4:	4614      	mov	r4, r2
 8004cc6:	d50e      	bpl.n	8004ce6 <_svfiprintf_r+0x32>
 8004cc8:	690b      	ldr	r3, [r1, #16]
 8004cca:	b963      	cbnz	r3, 8004ce6 <_svfiprintf_r+0x32>
 8004ccc:	2140      	movs	r1, #64	; 0x40
 8004cce:	f000 fb19 	bl	8005304 <_malloc_r>
 8004cd2:	6028      	str	r0, [r5, #0]
 8004cd4:	6128      	str	r0, [r5, #16]
 8004cd6:	b920      	cbnz	r0, 8004ce2 <_svfiprintf_r+0x2e>
 8004cd8:	230c      	movs	r3, #12
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce0:	e0d1      	b.n	8004e86 <_svfiprintf_r+0x1d2>
 8004ce2:	2340      	movs	r3, #64	; 0x40
 8004ce4:	616b      	str	r3, [r5, #20]
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8004cea:	2320      	movs	r3, #32
 8004cec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cf4:	2330      	movs	r3, #48	; 0x30
 8004cf6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ea0 <_svfiprintf_r+0x1ec>
 8004cfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cfe:	f04f 0901 	mov.w	r9, #1
 8004d02:	4623      	mov	r3, r4
 8004d04:	469a      	mov	sl, r3
 8004d06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d0a:	b10a      	cbz	r2, 8004d10 <_svfiprintf_r+0x5c>
 8004d0c:	2a25      	cmp	r2, #37	; 0x25
 8004d0e:	d1f9      	bne.n	8004d04 <_svfiprintf_r+0x50>
 8004d10:	ebba 0b04 	subs.w	fp, sl, r4
 8004d14:	d00b      	beq.n	8004d2e <_svfiprintf_r+0x7a>
 8004d16:	465b      	mov	r3, fp
 8004d18:	4622      	mov	r2, r4
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	4638      	mov	r0, r7
 8004d1e:	f7ff ff6d 	bl	8004bfc <__ssputs_r>
 8004d22:	3001      	adds	r0, #1
 8004d24:	f000 80aa 	beq.w	8004e7c <_svfiprintf_r+0x1c8>
 8004d28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d2a:	445a      	add	r2, fp
 8004d2c:	9209      	str	r2, [sp, #36]	; 0x24
 8004d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 80a2 	beq.w	8004e7c <_svfiprintf_r+0x1c8>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d42:	f10a 0a01 	add.w	sl, sl, #1
 8004d46:	9304      	str	r3, [sp, #16]
 8004d48:	9307      	str	r3, [sp, #28]
 8004d4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d4e:	931a      	str	r3, [sp, #104]	; 0x68
 8004d50:	4654      	mov	r4, sl
 8004d52:	2205      	movs	r2, #5
 8004d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d58:	4851      	ldr	r0, [pc, #324]	; (8004ea0 <_svfiprintf_r+0x1ec>)
 8004d5a:	f7fb fa41 	bl	80001e0 <memchr>
 8004d5e:	9a04      	ldr	r2, [sp, #16]
 8004d60:	b9d8      	cbnz	r0, 8004d9a <_svfiprintf_r+0xe6>
 8004d62:	06d0      	lsls	r0, r2, #27
 8004d64:	bf44      	itt	mi
 8004d66:	2320      	movmi	r3, #32
 8004d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d6c:	0711      	lsls	r1, r2, #28
 8004d6e:	bf44      	itt	mi
 8004d70:	232b      	movmi	r3, #43	; 0x2b
 8004d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d76:	f89a 3000 	ldrb.w	r3, [sl]
 8004d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d7c:	d015      	beq.n	8004daa <_svfiprintf_r+0xf6>
 8004d7e:	9a07      	ldr	r2, [sp, #28]
 8004d80:	4654      	mov	r4, sl
 8004d82:	2000      	movs	r0, #0
 8004d84:	f04f 0c0a 	mov.w	ip, #10
 8004d88:	4621      	mov	r1, r4
 8004d8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d8e:	3b30      	subs	r3, #48	; 0x30
 8004d90:	2b09      	cmp	r3, #9
 8004d92:	d94e      	bls.n	8004e32 <_svfiprintf_r+0x17e>
 8004d94:	b1b0      	cbz	r0, 8004dc4 <_svfiprintf_r+0x110>
 8004d96:	9207      	str	r2, [sp, #28]
 8004d98:	e014      	b.n	8004dc4 <_svfiprintf_r+0x110>
 8004d9a:	eba0 0308 	sub.w	r3, r0, r8
 8004d9e:	fa09 f303 	lsl.w	r3, r9, r3
 8004da2:	4313      	orrs	r3, r2
 8004da4:	9304      	str	r3, [sp, #16]
 8004da6:	46a2      	mov	sl, r4
 8004da8:	e7d2      	b.n	8004d50 <_svfiprintf_r+0x9c>
 8004daa:	9b03      	ldr	r3, [sp, #12]
 8004dac:	1d19      	adds	r1, r3, #4
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	9103      	str	r1, [sp, #12]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	bfbb      	ittet	lt
 8004db6:	425b      	neglt	r3, r3
 8004db8:	f042 0202 	orrlt.w	r2, r2, #2
 8004dbc:	9307      	strge	r3, [sp, #28]
 8004dbe:	9307      	strlt	r3, [sp, #28]
 8004dc0:	bfb8      	it	lt
 8004dc2:	9204      	strlt	r2, [sp, #16]
 8004dc4:	7823      	ldrb	r3, [r4, #0]
 8004dc6:	2b2e      	cmp	r3, #46	; 0x2e
 8004dc8:	d10c      	bne.n	8004de4 <_svfiprintf_r+0x130>
 8004dca:	7863      	ldrb	r3, [r4, #1]
 8004dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8004dce:	d135      	bne.n	8004e3c <_svfiprintf_r+0x188>
 8004dd0:	9b03      	ldr	r3, [sp, #12]
 8004dd2:	1d1a      	adds	r2, r3, #4
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	9203      	str	r2, [sp, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	bfb8      	it	lt
 8004ddc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004de0:	3402      	adds	r4, #2
 8004de2:	9305      	str	r3, [sp, #20]
 8004de4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004eb0 <_svfiprintf_r+0x1fc>
 8004de8:	7821      	ldrb	r1, [r4, #0]
 8004dea:	2203      	movs	r2, #3
 8004dec:	4650      	mov	r0, sl
 8004dee:	f7fb f9f7 	bl	80001e0 <memchr>
 8004df2:	b140      	cbz	r0, 8004e06 <_svfiprintf_r+0x152>
 8004df4:	2340      	movs	r3, #64	; 0x40
 8004df6:	eba0 000a 	sub.w	r0, r0, sl
 8004dfa:	fa03 f000 	lsl.w	r0, r3, r0
 8004dfe:	9b04      	ldr	r3, [sp, #16]
 8004e00:	4303      	orrs	r3, r0
 8004e02:	3401      	adds	r4, #1
 8004e04:	9304      	str	r3, [sp, #16]
 8004e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e0a:	4826      	ldr	r0, [pc, #152]	; (8004ea4 <_svfiprintf_r+0x1f0>)
 8004e0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e10:	2206      	movs	r2, #6
 8004e12:	f7fb f9e5 	bl	80001e0 <memchr>
 8004e16:	2800      	cmp	r0, #0
 8004e18:	d038      	beq.n	8004e8c <_svfiprintf_r+0x1d8>
 8004e1a:	4b23      	ldr	r3, [pc, #140]	; (8004ea8 <_svfiprintf_r+0x1f4>)
 8004e1c:	bb1b      	cbnz	r3, 8004e66 <_svfiprintf_r+0x1b2>
 8004e1e:	9b03      	ldr	r3, [sp, #12]
 8004e20:	3307      	adds	r3, #7
 8004e22:	f023 0307 	bic.w	r3, r3, #7
 8004e26:	3308      	adds	r3, #8
 8004e28:	9303      	str	r3, [sp, #12]
 8004e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e2c:	4433      	add	r3, r6
 8004e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e30:	e767      	b.n	8004d02 <_svfiprintf_r+0x4e>
 8004e32:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e36:	460c      	mov	r4, r1
 8004e38:	2001      	movs	r0, #1
 8004e3a:	e7a5      	b.n	8004d88 <_svfiprintf_r+0xd4>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	3401      	adds	r4, #1
 8004e40:	9305      	str	r3, [sp, #20]
 8004e42:	4619      	mov	r1, r3
 8004e44:	f04f 0c0a 	mov.w	ip, #10
 8004e48:	4620      	mov	r0, r4
 8004e4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e4e:	3a30      	subs	r2, #48	; 0x30
 8004e50:	2a09      	cmp	r2, #9
 8004e52:	d903      	bls.n	8004e5c <_svfiprintf_r+0x1a8>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0c5      	beq.n	8004de4 <_svfiprintf_r+0x130>
 8004e58:	9105      	str	r1, [sp, #20]
 8004e5a:	e7c3      	b.n	8004de4 <_svfiprintf_r+0x130>
 8004e5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e60:	4604      	mov	r4, r0
 8004e62:	2301      	movs	r3, #1
 8004e64:	e7f0      	b.n	8004e48 <_svfiprintf_r+0x194>
 8004e66:	ab03      	add	r3, sp, #12
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	462a      	mov	r2, r5
 8004e6c:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <_svfiprintf_r+0x1f8>)
 8004e6e:	a904      	add	r1, sp, #16
 8004e70:	4638      	mov	r0, r7
 8004e72:	f3af 8000 	nop.w
 8004e76:	1c42      	adds	r2, r0, #1
 8004e78:	4606      	mov	r6, r0
 8004e7a:	d1d6      	bne.n	8004e2a <_svfiprintf_r+0x176>
 8004e7c:	89ab      	ldrh	r3, [r5, #12]
 8004e7e:	065b      	lsls	r3, r3, #25
 8004e80:	f53f af2c 	bmi.w	8004cdc <_svfiprintf_r+0x28>
 8004e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e86:	b01d      	add	sp, #116	; 0x74
 8004e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e8c:	ab03      	add	r3, sp, #12
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	462a      	mov	r2, r5
 8004e92:	4b06      	ldr	r3, [pc, #24]	; (8004eac <_svfiprintf_r+0x1f8>)
 8004e94:	a904      	add	r1, sp, #16
 8004e96:	4638      	mov	r0, r7
 8004e98:	f000 f87a 	bl	8004f90 <_printf_i>
 8004e9c:	e7eb      	b.n	8004e76 <_svfiprintf_r+0x1c2>
 8004e9e:	bf00      	nop
 8004ea0:	08005644 	.word	0x08005644
 8004ea4:	0800564e 	.word	0x0800564e
 8004ea8:	00000000 	.word	0x00000000
 8004eac:	08004bfd 	.word	0x08004bfd
 8004eb0:	0800564a 	.word	0x0800564a

08004eb4 <_printf_common>:
 8004eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb8:	4616      	mov	r6, r2
 8004eba:	4699      	mov	r9, r3
 8004ebc:	688a      	ldr	r2, [r1, #8]
 8004ebe:	690b      	ldr	r3, [r1, #16]
 8004ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	bfb8      	it	lt
 8004ec8:	4613      	movlt	r3, r2
 8004eca:	6033      	str	r3, [r6, #0]
 8004ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ed0:	4607      	mov	r7, r0
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	b10a      	cbz	r2, 8004eda <_printf_common+0x26>
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	6033      	str	r3, [r6, #0]
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	0699      	lsls	r1, r3, #26
 8004ede:	bf42      	ittt	mi
 8004ee0:	6833      	ldrmi	r3, [r6, #0]
 8004ee2:	3302      	addmi	r3, #2
 8004ee4:	6033      	strmi	r3, [r6, #0]
 8004ee6:	6825      	ldr	r5, [r4, #0]
 8004ee8:	f015 0506 	ands.w	r5, r5, #6
 8004eec:	d106      	bne.n	8004efc <_printf_common+0x48>
 8004eee:	f104 0a19 	add.w	sl, r4, #25
 8004ef2:	68e3      	ldr	r3, [r4, #12]
 8004ef4:	6832      	ldr	r2, [r6, #0]
 8004ef6:	1a9b      	subs	r3, r3, r2
 8004ef8:	42ab      	cmp	r3, r5
 8004efa:	dc26      	bgt.n	8004f4a <_printf_common+0x96>
 8004efc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f00:	1e13      	subs	r3, r2, #0
 8004f02:	6822      	ldr	r2, [r4, #0]
 8004f04:	bf18      	it	ne
 8004f06:	2301      	movne	r3, #1
 8004f08:	0692      	lsls	r2, r2, #26
 8004f0a:	d42b      	bmi.n	8004f64 <_printf_common+0xb0>
 8004f0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f10:	4649      	mov	r1, r9
 8004f12:	4638      	mov	r0, r7
 8004f14:	47c0      	blx	r8
 8004f16:	3001      	adds	r0, #1
 8004f18:	d01e      	beq.n	8004f58 <_printf_common+0xa4>
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	68e5      	ldr	r5, [r4, #12]
 8004f1e:	6832      	ldr	r2, [r6, #0]
 8004f20:	f003 0306 	and.w	r3, r3, #6
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	bf08      	it	eq
 8004f28:	1aad      	subeq	r5, r5, r2
 8004f2a:	68a3      	ldr	r3, [r4, #8]
 8004f2c:	6922      	ldr	r2, [r4, #16]
 8004f2e:	bf0c      	ite	eq
 8004f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f34:	2500      	movne	r5, #0
 8004f36:	4293      	cmp	r3, r2
 8004f38:	bfc4      	itt	gt
 8004f3a:	1a9b      	subgt	r3, r3, r2
 8004f3c:	18ed      	addgt	r5, r5, r3
 8004f3e:	2600      	movs	r6, #0
 8004f40:	341a      	adds	r4, #26
 8004f42:	42b5      	cmp	r5, r6
 8004f44:	d11a      	bne.n	8004f7c <_printf_common+0xc8>
 8004f46:	2000      	movs	r0, #0
 8004f48:	e008      	b.n	8004f5c <_printf_common+0xa8>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	4652      	mov	r2, sl
 8004f4e:	4649      	mov	r1, r9
 8004f50:	4638      	mov	r0, r7
 8004f52:	47c0      	blx	r8
 8004f54:	3001      	adds	r0, #1
 8004f56:	d103      	bne.n	8004f60 <_printf_common+0xac>
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f60:	3501      	adds	r5, #1
 8004f62:	e7c6      	b.n	8004ef2 <_printf_common+0x3e>
 8004f64:	18e1      	adds	r1, r4, r3
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	2030      	movs	r0, #48	; 0x30
 8004f6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f6e:	4422      	add	r2, r4
 8004f70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f78:	3302      	adds	r3, #2
 8004f7a:	e7c7      	b.n	8004f0c <_printf_common+0x58>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	4622      	mov	r2, r4
 8004f80:	4649      	mov	r1, r9
 8004f82:	4638      	mov	r0, r7
 8004f84:	47c0      	blx	r8
 8004f86:	3001      	adds	r0, #1
 8004f88:	d0e6      	beq.n	8004f58 <_printf_common+0xa4>
 8004f8a:	3601      	adds	r6, #1
 8004f8c:	e7d9      	b.n	8004f42 <_printf_common+0x8e>
	...

08004f90 <_printf_i>:
 8004f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f94:	7e0f      	ldrb	r7, [r1, #24]
 8004f96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f98:	2f78      	cmp	r7, #120	; 0x78
 8004f9a:	4691      	mov	r9, r2
 8004f9c:	4680      	mov	r8, r0
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	469a      	mov	sl, r3
 8004fa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fa6:	d807      	bhi.n	8004fb8 <_printf_i+0x28>
 8004fa8:	2f62      	cmp	r7, #98	; 0x62
 8004faa:	d80a      	bhi.n	8004fc2 <_printf_i+0x32>
 8004fac:	2f00      	cmp	r7, #0
 8004fae:	f000 80d8 	beq.w	8005162 <_printf_i+0x1d2>
 8004fb2:	2f58      	cmp	r7, #88	; 0x58
 8004fb4:	f000 80a3 	beq.w	80050fe <_printf_i+0x16e>
 8004fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fc0:	e03a      	b.n	8005038 <_printf_i+0xa8>
 8004fc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fc6:	2b15      	cmp	r3, #21
 8004fc8:	d8f6      	bhi.n	8004fb8 <_printf_i+0x28>
 8004fca:	a101      	add	r1, pc, #4	; (adr r1, 8004fd0 <_printf_i+0x40>)
 8004fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fd0:	08005029 	.word	0x08005029
 8004fd4:	0800503d 	.word	0x0800503d
 8004fd8:	08004fb9 	.word	0x08004fb9
 8004fdc:	08004fb9 	.word	0x08004fb9
 8004fe0:	08004fb9 	.word	0x08004fb9
 8004fe4:	08004fb9 	.word	0x08004fb9
 8004fe8:	0800503d 	.word	0x0800503d
 8004fec:	08004fb9 	.word	0x08004fb9
 8004ff0:	08004fb9 	.word	0x08004fb9
 8004ff4:	08004fb9 	.word	0x08004fb9
 8004ff8:	08004fb9 	.word	0x08004fb9
 8004ffc:	08005149 	.word	0x08005149
 8005000:	0800506d 	.word	0x0800506d
 8005004:	0800512b 	.word	0x0800512b
 8005008:	08004fb9 	.word	0x08004fb9
 800500c:	08004fb9 	.word	0x08004fb9
 8005010:	0800516b 	.word	0x0800516b
 8005014:	08004fb9 	.word	0x08004fb9
 8005018:	0800506d 	.word	0x0800506d
 800501c:	08004fb9 	.word	0x08004fb9
 8005020:	08004fb9 	.word	0x08004fb9
 8005024:	08005133 	.word	0x08005133
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	1d1a      	adds	r2, r3, #4
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	602a      	str	r2, [r5, #0]
 8005030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005038:	2301      	movs	r3, #1
 800503a:	e0a3      	b.n	8005184 <_printf_i+0x1f4>
 800503c:	6820      	ldr	r0, [r4, #0]
 800503e:	6829      	ldr	r1, [r5, #0]
 8005040:	0606      	lsls	r6, r0, #24
 8005042:	f101 0304 	add.w	r3, r1, #4
 8005046:	d50a      	bpl.n	800505e <_printf_i+0xce>
 8005048:	680e      	ldr	r6, [r1, #0]
 800504a:	602b      	str	r3, [r5, #0]
 800504c:	2e00      	cmp	r6, #0
 800504e:	da03      	bge.n	8005058 <_printf_i+0xc8>
 8005050:	232d      	movs	r3, #45	; 0x2d
 8005052:	4276      	negs	r6, r6
 8005054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005058:	485e      	ldr	r0, [pc, #376]	; (80051d4 <_printf_i+0x244>)
 800505a:	230a      	movs	r3, #10
 800505c:	e019      	b.n	8005092 <_printf_i+0x102>
 800505e:	680e      	ldr	r6, [r1, #0]
 8005060:	602b      	str	r3, [r5, #0]
 8005062:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005066:	bf18      	it	ne
 8005068:	b236      	sxthne	r6, r6
 800506a:	e7ef      	b.n	800504c <_printf_i+0xbc>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	6820      	ldr	r0, [r4, #0]
 8005070:	1d19      	adds	r1, r3, #4
 8005072:	6029      	str	r1, [r5, #0]
 8005074:	0601      	lsls	r1, r0, #24
 8005076:	d501      	bpl.n	800507c <_printf_i+0xec>
 8005078:	681e      	ldr	r6, [r3, #0]
 800507a:	e002      	b.n	8005082 <_printf_i+0xf2>
 800507c:	0646      	lsls	r6, r0, #25
 800507e:	d5fb      	bpl.n	8005078 <_printf_i+0xe8>
 8005080:	881e      	ldrh	r6, [r3, #0]
 8005082:	4854      	ldr	r0, [pc, #336]	; (80051d4 <_printf_i+0x244>)
 8005084:	2f6f      	cmp	r7, #111	; 0x6f
 8005086:	bf0c      	ite	eq
 8005088:	2308      	moveq	r3, #8
 800508a:	230a      	movne	r3, #10
 800508c:	2100      	movs	r1, #0
 800508e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005092:	6865      	ldr	r5, [r4, #4]
 8005094:	60a5      	str	r5, [r4, #8]
 8005096:	2d00      	cmp	r5, #0
 8005098:	bfa2      	ittt	ge
 800509a:	6821      	ldrge	r1, [r4, #0]
 800509c:	f021 0104 	bicge.w	r1, r1, #4
 80050a0:	6021      	strge	r1, [r4, #0]
 80050a2:	b90e      	cbnz	r6, 80050a8 <_printf_i+0x118>
 80050a4:	2d00      	cmp	r5, #0
 80050a6:	d04d      	beq.n	8005144 <_printf_i+0x1b4>
 80050a8:	4615      	mov	r5, r2
 80050aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80050ae:	fb03 6711 	mls	r7, r3, r1, r6
 80050b2:	5dc7      	ldrb	r7, [r0, r7]
 80050b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050b8:	4637      	mov	r7, r6
 80050ba:	42bb      	cmp	r3, r7
 80050bc:	460e      	mov	r6, r1
 80050be:	d9f4      	bls.n	80050aa <_printf_i+0x11a>
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d10b      	bne.n	80050dc <_printf_i+0x14c>
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	07de      	lsls	r6, r3, #31
 80050c8:	d508      	bpl.n	80050dc <_printf_i+0x14c>
 80050ca:	6923      	ldr	r3, [r4, #16]
 80050cc:	6861      	ldr	r1, [r4, #4]
 80050ce:	4299      	cmp	r1, r3
 80050d0:	bfde      	ittt	le
 80050d2:	2330      	movle	r3, #48	; 0x30
 80050d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050dc:	1b52      	subs	r2, r2, r5
 80050de:	6122      	str	r2, [r4, #16]
 80050e0:	f8cd a000 	str.w	sl, [sp]
 80050e4:	464b      	mov	r3, r9
 80050e6:	aa03      	add	r2, sp, #12
 80050e8:	4621      	mov	r1, r4
 80050ea:	4640      	mov	r0, r8
 80050ec:	f7ff fee2 	bl	8004eb4 <_printf_common>
 80050f0:	3001      	adds	r0, #1
 80050f2:	d14c      	bne.n	800518e <_printf_i+0x1fe>
 80050f4:	f04f 30ff 	mov.w	r0, #4294967295
 80050f8:	b004      	add	sp, #16
 80050fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050fe:	4835      	ldr	r0, [pc, #212]	; (80051d4 <_printf_i+0x244>)
 8005100:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005104:	6829      	ldr	r1, [r5, #0]
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	f851 6b04 	ldr.w	r6, [r1], #4
 800510c:	6029      	str	r1, [r5, #0]
 800510e:	061d      	lsls	r5, r3, #24
 8005110:	d514      	bpl.n	800513c <_printf_i+0x1ac>
 8005112:	07df      	lsls	r7, r3, #31
 8005114:	bf44      	itt	mi
 8005116:	f043 0320 	orrmi.w	r3, r3, #32
 800511a:	6023      	strmi	r3, [r4, #0]
 800511c:	b91e      	cbnz	r6, 8005126 <_printf_i+0x196>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	f023 0320 	bic.w	r3, r3, #32
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	2310      	movs	r3, #16
 8005128:	e7b0      	b.n	800508c <_printf_i+0xfc>
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	f043 0320 	orr.w	r3, r3, #32
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	2378      	movs	r3, #120	; 0x78
 8005134:	4828      	ldr	r0, [pc, #160]	; (80051d8 <_printf_i+0x248>)
 8005136:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800513a:	e7e3      	b.n	8005104 <_printf_i+0x174>
 800513c:	0659      	lsls	r1, r3, #25
 800513e:	bf48      	it	mi
 8005140:	b2b6      	uxthmi	r6, r6
 8005142:	e7e6      	b.n	8005112 <_printf_i+0x182>
 8005144:	4615      	mov	r5, r2
 8005146:	e7bb      	b.n	80050c0 <_printf_i+0x130>
 8005148:	682b      	ldr	r3, [r5, #0]
 800514a:	6826      	ldr	r6, [r4, #0]
 800514c:	6961      	ldr	r1, [r4, #20]
 800514e:	1d18      	adds	r0, r3, #4
 8005150:	6028      	str	r0, [r5, #0]
 8005152:	0635      	lsls	r5, r6, #24
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	d501      	bpl.n	800515c <_printf_i+0x1cc>
 8005158:	6019      	str	r1, [r3, #0]
 800515a:	e002      	b.n	8005162 <_printf_i+0x1d2>
 800515c:	0670      	lsls	r0, r6, #25
 800515e:	d5fb      	bpl.n	8005158 <_printf_i+0x1c8>
 8005160:	8019      	strh	r1, [r3, #0]
 8005162:	2300      	movs	r3, #0
 8005164:	6123      	str	r3, [r4, #16]
 8005166:	4615      	mov	r5, r2
 8005168:	e7ba      	b.n	80050e0 <_printf_i+0x150>
 800516a:	682b      	ldr	r3, [r5, #0]
 800516c:	1d1a      	adds	r2, r3, #4
 800516e:	602a      	str	r2, [r5, #0]
 8005170:	681d      	ldr	r5, [r3, #0]
 8005172:	6862      	ldr	r2, [r4, #4]
 8005174:	2100      	movs	r1, #0
 8005176:	4628      	mov	r0, r5
 8005178:	f7fb f832 	bl	80001e0 <memchr>
 800517c:	b108      	cbz	r0, 8005182 <_printf_i+0x1f2>
 800517e:	1b40      	subs	r0, r0, r5
 8005180:	6060      	str	r0, [r4, #4]
 8005182:	6863      	ldr	r3, [r4, #4]
 8005184:	6123      	str	r3, [r4, #16]
 8005186:	2300      	movs	r3, #0
 8005188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800518c:	e7a8      	b.n	80050e0 <_printf_i+0x150>
 800518e:	6923      	ldr	r3, [r4, #16]
 8005190:	462a      	mov	r2, r5
 8005192:	4649      	mov	r1, r9
 8005194:	4640      	mov	r0, r8
 8005196:	47d0      	blx	sl
 8005198:	3001      	adds	r0, #1
 800519a:	d0ab      	beq.n	80050f4 <_printf_i+0x164>
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	079b      	lsls	r3, r3, #30
 80051a0:	d413      	bmi.n	80051ca <_printf_i+0x23a>
 80051a2:	68e0      	ldr	r0, [r4, #12]
 80051a4:	9b03      	ldr	r3, [sp, #12]
 80051a6:	4298      	cmp	r0, r3
 80051a8:	bfb8      	it	lt
 80051aa:	4618      	movlt	r0, r3
 80051ac:	e7a4      	b.n	80050f8 <_printf_i+0x168>
 80051ae:	2301      	movs	r3, #1
 80051b0:	4632      	mov	r2, r6
 80051b2:	4649      	mov	r1, r9
 80051b4:	4640      	mov	r0, r8
 80051b6:	47d0      	blx	sl
 80051b8:	3001      	adds	r0, #1
 80051ba:	d09b      	beq.n	80050f4 <_printf_i+0x164>
 80051bc:	3501      	adds	r5, #1
 80051be:	68e3      	ldr	r3, [r4, #12]
 80051c0:	9903      	ldr	r1, [sp, #12]
 80051c2:	1a5b      	subs	r3, r3, r1
 80051c4:	42ab      	cmp	r3, r5
 80051c6:	dcf2      	bgt.n	80051ae <_printf_i+0x21e>
 80051c8:	e7eb      	b.n	80051a2 <_printf_i+0x212>
 80051ca:	2500      	movs	r5, #0
 80051cc:	f104 0619 	add.w	r6, r4, #25
 80051d0:	e7f5      	b.n	80051be <_printf_i+0x22e>
 80051d2:	bf00      	nop
 80051d4:	08005655 	.word	0x08005655
 80051d8:	08005666 	.word	0x08005666

080051dc <memcpy>:
 80051dc:	440a      	add	r2, r1
 80051de:	4291      	cmp	r1, r2
 80051e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80051e4:	d100      	bne.n	80051e8 <memcpy+0xc>
 80051e6:	4770      	bx	lr
 80051e8:	b510      	push	{r4, lr}
 80051ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051f2:	4291      	cmp	r1, r2
 80051f4:	d1f9      	bne.n	80051ea <memcpy+0xe>
 80051f6:	bd10      	pop	{r4, pc}

080051f8 <memmove>:
 80051f8:	4288      	cmp	r0, r1
 80051fa:	b510      	push	{r4, lr}
 80051fc:	eb01 0402 	add.w	r4, r1, r2
 8005200:	d902      	bls.n	8005208 <memmove+0x10>
 8005202:	4284      	cmp	r4, r0
 8005204:	4623      	mov	r3, r4
 8005206:	d807      	bhi.n	8005218 <memmove+0x20>
 8005208:	1e43      	subs	r3, r0, #1
 800520a:	42a1      	cmp	r1, r4
 800520c:	d008      	beq.n	8005220 <memmove+0x28>
 800520e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005212:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005216:	e7f8      	b.n	800520a <memmove+0x12>
 8005218:	4402      	add	r2, r0
 800521a:	4601      	mov	r1, r0
 800521c:	428a      	cmp	r2, r1
 800521e:	d100      	bne.n	8005222 <memmove+0x2a>
 8005220:	bd10      	pop	{r4, pc}
 8005222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800522a:	e7f7      	b.n	800521c <memmove+0x24>

0800522c <_free_r>:
 800522c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800522e:	2900      	cmp	r1, #0
 8005230:	d044      	beq.n	80052bc <_free_r+0x90>
 8005232:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005236:	9001      	str	r0, [sp, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	f1a1 0404 	sub.w	r4, r1, #4
 800523e:	bfb8      	it	lt
 8005240:	18e4      	addlt	r4, r4, r3
 8005242:	f000 f913 	bl	800546c <__malloc_lock>
 8005246:	4a1e      	ldr	r2, [pc, #120]	; (80052c0 <_free_r+0x94>)
 8005248:	9801      	ldr	r0, [sp, #4]
 800524a:	6813      	ldr	r3, [r2, #0]
 800524c:	b933      	cbnz	r3, 800525c <_free_r+0x30>
 800524e:	6063      	str	r3, [r4, #4]
 8005250:	6014      	str	r4, [r2, #0]
 8005252:	b003      	add	sp, #12
 8005254:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005258:	f000 b90e 	b.w	8005478 <__malloc_unlock>
 800525c:	42a3      	cmp	r3, r4
 800525e:	d908      	bls.n	8005272 <_free_r+0x46>
 8005260:	6825      	ldr	r5, [r4, #0]
 8005262:	1961      	adds	r1, r4, r5
 8005264:	428b      	cmp	r3, r1
 8005266:	bf01      	itttt	eq
 8005268:	6819      	ldreq	r1, [r3, #0]
 800526a:	685b      	ldreq	r3, [r3, #4]
 800526c:	1949      	addeq	r1, r1, r5
 800526e:	6021      	streq	r1, [r4, #0]
 8005270:	e7ed      	b.n	800524e <_free_r+0x22>
 8005272:	461a      	mov	r2, r3
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	b10b      	cbz	r3, 800527c <_free_r+0x50>
 8005278:	42a3      	cmp	r3, r4
 800527a:	d9fa      	bls.n	8005272 <_free_r+0x46>
 800527c:	6811      	ldr	r1, [r2, #0]
 800527e:	1855      	adds	r5, r2, r1
 8005280:	42a5      	cmp	r5, r4
 8005282:	d10b      	bne.n	800529c <_free_r+0x70>
 8005284:	6824      	ldr	r4, [r4, #0]
 8005286:	4421      	add	r1, r4
 8005288:	1854      	adds	r4, r2, r1
 800528a:	42a3      	cmp	r3, r4
 800528c:	6011      	str	r1, [r2, #0]
 800528e:	d1e0      	bne.n	8005252 <_free_r+0x26>
 8005290:	681c      	ldr	r4, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	6053      	str	r3, [r2, #4]
 8005296:	4421      	add	r1, r4
 8005298:	6011      	str	r1, [r2, #0]
 800529a:	e7da      	b.n	8005252 <_free_r+0x26>
 800529c:	d902      	bls.n	80052a4 <_free_r+0x78>
 800529e:	230c      	movs	r3, #12
 80052a0:	6003      	str	r3, [r0, #0]
 80052a2:	e7d6      	b.n	8005252 <_free_r+0x26>
 80052a4:	6825      	ldr	r5, [r4, #0]
 80052a6:	1961      	adds	r1, r4, r5
 80052a8:	428b      	cmp	r3, r1
 80052aa:	bf04      	itt	eq
 80052ac:	6819      	ldreq	r1, [r3, #0]
 80052ae:	685b      	ldreq	r3, [r3, #4]
 80052b0:	6063      	str	r3, [r4, #4]
 80052b2:	bf04      	itt	eq
 80052b4:	1949      	addeq	r1, r1, r5
 80052b6:	6021      	streq	r1, [r4, #0]
 80052b8:	6054      	str	r4, [r2, #4]
 80052ba:	e7ca      	b.n	8005252 <_free_r+0x26>
 80052bc:	b003      	add	sp, #12
 80052be:	bd30      	pop	{r4, r5, pc}
 80052c0:	200006ac 	.word	0x200006ac

080052c4 <sbrk_aligned>:
 80052c4:	b570      	push	{r4, r5, r6, lr}
 80052c6:	4e0e      	ldr	r6, [pc, #56]	; (8005300 <sbrk_aligned+0x3c>)
 80052c8:	460c      	mov	r4, r1
 80052ca:	6831      	ldr	r1, [r6, #0]
 80052cc:	4605      	mov	r5, r0
 80052ce:	b911      	cbnz	r1, 80052d6 <sbrk_aligned+0x12>
 80052d0:	f000 f8bc 	bl	800544c <_sbrk_r>
 80052d4:	6030      	str	r0, [r6, #0]
 80052d6:	4621      	mov	r1, r4
 80052d8:	4628      	mov	r0, r5
 80052da:	f000 f8b7 	bl	800544c <_sbrk_r>
 80052de:	1c43      	adds	r3, r0, #1
 80052e0:	d00a      	beq.n	80052f8 <sbrk_aligned+0x34>
 80052e2:	1cc4      	adds	r4, r0, #3
 80052e4:	f024 0403 	bic.w	r4, r4, #3
 80052e8:	42a0      	cmp	r0, r4
 80052ea:	d007      	beq.n	80052fc <sbrk_aligned+0x38>
 80052ec:	1a21      	subs	r1, r4, r0
 80052ee:	4628      	mov	r0, r5
 80052f0:	f000 f8ac 	bl	800544c <_sbrk_r>
 80052f4:	3001      	adds	r0, #1
 80052f6:	d101      	bne.n	80052fc <sbrk_aligned+0x38>
 80052f8:	f04f 34ff 	mov.w	r4, #4294967295
 80052fc:	4620      	mov	r0, r4
 80052fe:	bd70      	pop	{r4, r5, r6, pc}
 8005300:	200006b0 	.word	0x200006b0

08005304 <_malloc_r>:
 8005304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005308:	1ccd      	adds	r5, r1, #3
 800530a:	f025 0503 	bic.w	r5, r5, #3
 800530e:	3508      	adds	r5, #8
 8005310:	2d0c      	cmp	r5, #12
 8005312:	bf38      	it	cc
 8005314:	250c      	movcc	r5, #12
 8005316:	2d00      	cmp	r5, #0
 8005318:	4607      	mov	r7, r0
 800531a:	db01      	blt.n	8005320 <_malloc_r+0x1c>
 800531c:	42a9      	cmp	r1, r5
 800531e:	d905      	bls.n	800532c <_malloc_r+0x28>
 8005320:	230c      	movs	r3, #12
 8005322:	603b      	str	r3, [r7, #0]
 8005324:	2600      	movs	r6, #0
 8005326:	4630      	mov	r0, r6
 8005328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800532c:	4e2e      	ldr	r6, [pc, #184]	; (80053e8 <_malloc_r+0xe4>)
 800532e:	f000 f89d 	bl	800546c <__malloc_lock>
 8005332:	6833      	ldr	r3, [r6, #0]
 8005334:	461c      	mov	r4, r3
 8005336:	bb34      	cbnz	r4, 8005386 <_malloc_r+0x82>
 8005338:	4629      	mov	r1, r5
 800533a:	4638      	mov	r0, r7
 800533c:	f7ff ffc2 	bl	80052c4 <sbrk_aligned>
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	4604      	mov	r4, r0
 8005344:	d14d      	bne.n	80053e2 <_malloc_r+0xde>
 8005346:	6834      	ldr	r4, [r6, #0]
 8005348:	4626      	mov	r6, r4
 800534a:	2e00      	cmp	r6, #0
 800534c:	d140      	bne.n	80053d0 <_malloc_r+0xcc>
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	4631      	mov	r1, r6
 8005352:	4638      	mov	r0, r7
 8005354:	eb04 0803 	add.w	r8, r4, r3
 8005358:	f000 f878 	bl	800544c <_sbrk_r>
 800535c:	4580      	cmp	r8, r0
 800535e:	d13a      	bne.n	80053d6 <_malloc_r+0xd2>
 8005360:	6821      	ldr	r1, [r4, #0]
 8005362:	3503      	adds	r5, #3
 8005364:	1a6d      	subs	r5, r5, r1
 8005366:	f025 0503 	bic.w	r5, r5, #3
 800536a:	3508      	adds	r5, #8
 800536c:	2d0c      	cmp	r5, #12
 800536e:	bf38      	it	cc
 8005370:	250c      	movcc	r5, #12
 8005372:	4629      	mov	r1, r5
 8005374:	4638      	mov	r0, r7
 8005376:	f7ff ffa5 	bl	80052c4 <sbrk_aligned>
 800537a:	3001      	adds	r0, #1
 800537c:	d02b      	beq.n	80053d6 <_malloc_r+0xd2>
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	442b      	add	r3, r5
 8005382:	6023      	str	r3, [r4, #0]
 8005384:	e00e      	b.n	80053a4 <_malloc_r+0xa0>
 8005386:	6822      	ldr	r2, [r4, #0]
 8005388:	1b52      	subs	r2, r2, r5
 800538a:	d41e      	bmi.n	80053ca <_malloc_r+0xc6>
 800538c:	2a0b      	cmp	r2, #11
 800538e:	d916      	bls.n	80053be <_malloc_r+0xba>
 8005390:	1961      	adds	r1, r4, r5
 8005392:	42a3      	cmp	r3, r4
 8005394:	6025      	str	r5, [r4, #0]
 8005396:	bf18      	it	ne
 8005398:	6059      	strne	r1, [r3, #4]
 800539a:	6863      	ldr	r3, [r4, #4]
 800539c:	bf08      	it	eq
 800539e:	6031      	streq	r1, [r6, #0]
 80053a0:	5162      	str	r2, [r4, r5]
 80053a2:	604b      	str	r3, [r1, #4]
 80053a4:	4638      	mov	r0, r7
 80053a6:	f104 060b 	add.w	r6, r4, #11
 80053aa:	f000 f865 	bl	8005478 <__malloc_unlock>
 80053ae:	f026 0607 	bic.w	r6, r6, #7
 80053b2:	1d23      	adds	r3, r4, #4
 80053b4:	1af2      	subs	r2, r6, r3
 80053b6:	d0b6      	beq.n	8005326 <_malloc_r+0x22>
 80053b8:	1b9b      	subs	r3, r3, r6
 80053ba:	50a3      	str	r3, [r4, r2]
 80053bc:	e7b3      	b.n	8005326 <_malloc_r+0x22>
 80053be:	6862      	ldr	r2, [r4, #4]
 80053c0:	42a3      	cmp	r3, r4
 80053c2:	bf0c      	ite	eq
 80053c4:	6032      	streq	r2, [r6, #0]
 80053c6:	605a      	strne	r2, [r3, #4]
 80053c8:	e7ec      	b.n	80053a4 <_malloc_r+0xa0>
 80053ca:	4623      	mov	r3, r4
 80053cc:	6864      	ldr	r4, [r4, #4]
 80053ce:	e7b2      	b.n	8005336 <_malloc_r+0x32>
 80053d0:	4634      	mov	r4, r6
 80053d2:	6876      	ldr	r6, [r6, #4]
 80053d4:	e7b9      	b.n	800534a <_malloc_r+0x46>
 80053d6:	230c      	movs	r3, #12
 80053d8:	603b      	str	r3, [r7, #0]
 80053da:	4638      	mov	r0, r7
 80053dc:	f000 f84c 	bl	8005478 <__malloc_unlock>
 80053e0:	e7a1      	b.n	8005326 <_malloc_r+0x22>
 80053e2:	6025      	str	r5, [r4, #0]
 80053e4:	e7de      	b.n	80053a4 <_malloc_r+0xa0>
 80053e6:	bf00      	nop
 80053e8:	200006ac 	.word	0x200006ac

080053ec <_realloc_r>:
 80053ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053f0:	4680      	mov	r8, r0
 80053f2:	4614      	mov	r4, r2
 80053f4:	460e      	mov	r6, r1
 80053f6:	b921      	cbnz	r1, 8005402 <_realloc_r+0x16>
 80053f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053fc:	4611      	mov	r1, r2
 80053fe:	f7ff bf81 	b.w	8005304 <_malloc_r>
 8005402:	b92a      	cbnz	r2, 8005410 <_realloc_r+0x24>
 8005404:	f7ff ff12 	bl	800522c <_free_r>
 8005408:	4625      	mov	r5, r4
 800540a:	4628      	mov	r0, r5
 800540c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005410:	f000 f838 	bl	8005484 <_malloc_usable_size_r>
 8005414:	4284      	cmp	r4, r0
 8005416:	4607      	mov	r7, r0
 8005418:	d802      	bhi.n	8005420 <_realloc_r+0x34>
 800541a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800541e:	d812      	bhi.n	8005446 <_realloc_r+0x5a>
 8005420:	4621      	mov	r1, r4
 8005422:	4640      	mov	r0, r8
 8005424:	f7ff ff6e 	bl	8005304 <_malloc_r>
 8005428:	4605      	mov	r5, r0
 800542a:	2800      	cmp	r0, #0
 800542c:	d0ed      	beq.n	800540a <_realloc_r+0x1e>
 800542e:	42bc      	cmp	r4, r7
 8005430:	4622      	mov	r2, r4
 8005432:	4631      	mov	r1, r6
 8005434:	bf28      	it	cs
 8005436:	463a      	movcs	r2, r7
 8005438:	f7ff fed0 	bl	80051dc <memcpy>
 800543c:	4631      	mov	r1, r6
 800543e:	4640      	mov	r0, r8
 8005440:	f7ff fef4 	bl	800522c <_free_r>
 8005444:	e7e1      	b.n	800540a <_realloc_r+0x1e>
 8005446:	4635      	mov	r5, r6
 8005448:	e7df      	b.n	800540a <_realloc_r+0x1e>
	...

0800544c <_sbrk_r>:
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	4d06      	ldr	r5, [pc, #24]	; (8005468 <_sbrk_r+0x1c>)
 8005450:	2300      	movs	r3, #0
 8005452:	4604      	mov	r4, r0
 8005454:	4608      	mov	r0, r1
 8005456:	602b      	str	r3, [r5, #0]
 8005458:	f7fb fdd6 	bl	8001008 <_sbrk>
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	d102      	bne.n	8005466 <_sbrk_r+0x1a>
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	b103      	cbz	r3, 8005466 <_sbrk_r+0x1a>
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	bd38      	pop	{r3, r4, r5, pc}
 8005468:	200006b4 	.word	0x200006b4

0800546c <__malloc_lock>:
 800546c:	4801      	ldr	r0, [pc, #4]	; (8005474 <__malloc_lock+0x8>)
 800546e:	f000 b811 	b.w	8005494 <__retarget_lock_acquire_recursive>
 8005472:	bf00      	nop
 8005474:	200006b8 	.word	0x200006b8

08005478 <__malloc_unlock>:
 8005478:	4801      	ldr	r0, [pc, #4]	; (8005480 <__malloc_unlock+0x8>)
 800547a:	f000 b80c 	b.w	8005496 <__retarget_lock_release_recursive>
 800547e:	bf00      	nop
 8005480:	200006b8 	.word	0x200006b8

08005484 <_malloc_usable_size_r>:
 8005484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005488:	1f18      	subs	r0, r3, #4
 800548a:	2b00      	cmp	r3, #0
 800548c:	bfbc      	itt	lt
 800548e:	580b      	ldrlt	r3, [r1, r0]
 8005490:	18c0      	addlt	r0, r0, r3
 8005492:	4770      	bx	lr

08005494 <__retarget_lock_acquire_recursive>:
 8005494:	4770      	bx	lr

08005496 <__retarget_lock_release_recursive>:
 8005496:	4770      	bx	lr

08005498 <_init>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	bf00      	nop
 800549c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549e:	bc08      	pop	{r3}
 80054a0:	469e      	mov	lr, r3
 80054a2:	4770      	bx	lr

080054a4 <_fini>:
 80054a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a6:	bf00      	nop
 80054a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054aa:	bc08      	pop	{r3}
 80054ac:	469e      	mov	lr, r3
 80054ae:	4770      	bx	lr
