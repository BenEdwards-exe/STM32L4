
river_sense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f020  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c0  0800f1b0  0800f1b0  0001f1b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb70  0800fb70  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb70  0800fb70  0001fb70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb78  0800fb78  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb78  0800fb78  0001fb78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb7c  0800fb7c  0001fb7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800fb80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002824  20000208  0800fd88  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a2c  0800fd88  00022a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e440  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c20  00000000  00000000  0003e678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a10  00000000  00000000  00042298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001878  00000000  00000000  00043ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a0a  00000000  00000000  00045520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ee65  00000000  00000000  0006bf2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e76b5  00000000  00000000  0008ad8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00172444  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085dc  00000000  00000000  00172494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f198 	.word	0x0800f198

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800f198 	.word	0x0800f198

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 0 */



// ADC Callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	// TODO: unpack ADC data
	TDS_value = adcResultsDMA[0];
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <HAL_ADC_ConvCpltCallback+0x28>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	b29b      	uxth	r3, r3
 8001006:	ee07 3a90 	vmov	s15, r3
 800100a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800100e:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001010:	edc3 7a00 	vstr	s15, [r3]

}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	20002390 	.word	0x20002390
 8001024:	20002398 	.word	0x20002398

08001028 <HAL_UART_TxCpltCallback>:


// UART Transmit Callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <HAL_UART_RxCpltCallback>:

// UART Receive Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1) {
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a08      	ldr	r2, [pc, #32]	; (800106c <HAL_UART_RxCpltCallback+0x30>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d109      	bne.n	8001062 <HAL_UART_RxCpltCallback+0x26>
		SIM_serialRX_Handler(serialRX_Data);
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <HAL_UART_RxCpltCallback+0x34>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f000 fdec 	bl	8001c30 <SIM_serialRX_Handler>
		// Enabling interrupt receive again
		HAL_UART_Receive_IT(&huart1, &serialRX_Data, 1); // receive data (one character only)
 8001058:	2201      	movs	r2, #1
 800105a:	4905      	ldr	r1, [pc, #20]	; (8001070 <HAL_UART_RxCpltCallback+0x34>)
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <HAL_UART_RxCpltCallback+0x38>)
 800105e:	f007 fa9b 	bl	8008598 <HAL_UART_Receive_IT>
  }

}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40013800 	.word	0x40013800
 8001070:	200024ff 	.word	0x200024ff
 8001074:	200003a4 	.word	0x200003a4

08001078 <HAL_TIM_PeriodElapsedCallback>:

// TIM Callback (100ms)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

	// Toggle LED; Just for fun
	if (isLD3_Flicker) {
 8001080:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d004      	beq.n	8001094 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800108a:	2108      	movs	r1, #8
 800108c:	480e      	ldr	r0, [pc, #56]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800108e:	f004 facb 	bl	8005628 <HAL_GPIO_TogglePin>
 8001092:	e004      	b.n	800109e <HAL_TIM_PeriodElapsedCallback+0x26>
	}
	else {
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	2108      	movs	r1, #8
 8001098:	480b      	ldr	r0, [pc, #44]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800109a:	f004 faad 	bl	80055f8 <HAL_GPIO_WritePin>
	}

	// Call SIM Module handler
	if (sim_flag) {
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d008      	beq.n	80010ba <HAL_TIM_PeriodElapsedCallback+0x42>
		if (simState == SIM_STANDBY) {
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b07      	cmp	r3, #7
 80010ae:	d102      	bne.n	80010b6 <HAL_TIM_PeriodElapsedCallback+0x3e>
			simState = SIM_INIT;
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
		}
		SIM_Handler();
 80010b6:	f000 fd7b 	bl	8001bb0 <SIM_Handler>
	}
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000000 	.word	0x20000000
 80010c8:	48000400 	.word	0x48000400
 80010cc:	20000429 	.word	0x20000429
 80010d0:	2000000c 	.word	0x2000000c

080010d4 <HAL_RTC_AlarmAEventCallback>:


// Alarm A callback function (for reading data from sensors)
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80010d4:	b5b0      	push	{r4, r5, r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af02      	add	r7, sp, #8
 80010da:	6078      	str	r0, [r7, #4]
	get_time(currentTime);
 80010dc:	482d      	ldr	r0, [pc, #180]	; (8001194 <HAL_RTC_AlarmAEventCallback+0xc0>)
 80010de:	f000 fbfd 	bl	80018dc <get_time>
	// TODO: write ADC data to forms
	if (currentFormArr==0) {
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <HAL_RTC_AlarmAEventCallback+0xc4>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d121      	bne.n	800112e <HAL_RTC_AlarmAEventCallback+0x5a>
		sprintf(formsToPost_0[formsToPost_0_Index], "\"batt_%d\",\"%s,%.2f\"",formsToPost_0_Index,currentTime,TDS_value);
 80010ea:	4b2c      	ldr	r3, [pc, #176]	; (800119c <HAL_RTC_AlarmAEventCallback+0xc8>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	4a29      	ldr	r2, [pc, #164]	; (80011a0 <HAL_RTC_AlarmAEventCallback+0xcc>)
 80010fa:	189c      	adds	r4, r3, r2
 80010fc:	4b27      	ldr	r3, [pc, #156]	; (800119c <HAL_RTC_AlarmAEventCallback+0xc8>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	461d      	mov	r5, r3
 8001102:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <HAL_RTC_AlarmAEventCallback+0xd0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fa1e 	bl	8000548 <__aeabi_f2d>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	e9cd 2300 	strd	r2, r3, [sp]
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <HAL_RTC_AlarmAEventCallback+0xc0>)
 8001116:	462a      	mov	r2, r5
 8001118:	4923      	ldr	r1, [pc, #140]	; (80011a8 <HAL_RTC_AlarmAEventCallback+0xd4>)
 800111a:	4620      	mov	r0, r4
 800111c:	f00a fa64 	bl	800b5e8 <siprintf>
		++formsToPost_0_Index;
 8001120:	4b1e      	ldr	r3, [pc, #120]	; (800119c <HAL_RTC_AlarmAEventCallback+0xc8>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <HAL_RTC_AlarmAEventCallback+0xc8>)
 800112a:	801a      	strh	r2, [r3, #0]
 800112c:	e024      	b.n	8001178 <HAL_RTC_AlarmAEventCallback+0xa4>
	}
	else if (currentFormArr==1) {
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <HAL_RTC_AlarmAEventCallback+0xc4>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d120      	bne.n	8001178 <HAL_RTC_AlarmAEventCallback+0xa4>
		sprintf(formsToPost_1[formsToPost_1_Index], "\"batt_%d\",\"%s,%.2f\"",formsToPost_1_Index,currentTime,TDS_value);
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <HAL_RTC_AlarmAEventCallback+0xd8>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	4613      	mov	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	4a1a      	ldr	r2, [pc, #104]	; (80011b0 <HAL_RTC_AlarmAEventCallback+0xdc>)
 8001146:	189c      	adds	r4, r3, r2
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_RTC_AlarmAEventCallback+0xd8>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	461d      	mov	r5, r3
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_RTC_AlarmAEventCallback+0xd0>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff f9f8 	bl	8000548 <__aeabi_f2d>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	e9cd 2300 	strd	r2, r3, [sp]
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <HAL_RTC_AlarmAEventCallback+0xc0>)
 8001162:	462a      	mov	r2, r5
 8001164:	4910      	ldr	r1, [pc, #64]	; (80011a8 <HAL_RTC_AlarmAEventCallback+0xd4>)
 8001166:	4620      	mov	r0, r4
 8001168:	f00a fa3e 	bl	800b5e8 <siprintf>
		++formsToPost_1_Index;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_RTC_AlarmAEventCallback+0xd8>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	3301      	adds	r3, #1
 8001172:	b29a      	uxth	r2, r3
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <HAL_RTC_AlarmAEventCallback+0xd8>)
 8001176:	801a      	strh	r2, [r3, #0]
	}
	// TODO: write ADC data to SD card


	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, 4); // Start DMA for ADC
 8001178:	2204      	movs	r2, #4
 800117a:	490e      	ldr	r1, [pc, #56]	; (80011b4 <HAL_RTC_AlarmAEventCallback+0xe0>)
 800117c:	480e      	ldr	r0, [pc, #56]	; (80011b8 <HAL_RTC_AlarmAEventCallback+0xe4>)
 800117e:	f002 fdc7 	bl	8003d10 <HAL_ADC_Start_DMA>
	set_alarm_A(alarmA_SecondsOffset);
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_RTC_AlarmAEventCallback+0xe8>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f000 fbd6 	bl	8001938 <set_alarm_A>
	return;
 800118c:	bf00      	nop
}
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bdb0      	pop	{r4, r5, r7, pc}
 8001194:	2000237c 	.word	0x2000237c
 8001198:	20002370 	.word	0x20002370
 800119c:	2000236c 	.word	0x2000236c
 80011a0:	2000042c 	.word	0x2000042c
 80011a4:	20002398 	.word	0x20002398
 80011a8:	0800f1b0 	.word	0x0800f1b0
 80011ac:	2000236e 	.word	0x2000236e
 80011b0:	200013cc 	.word	0x200013cc
 80011b4:	20002390 	.word	0x20002390
 80011b8:	20000224 	.word	0x20000224
 80011bc:	20000004 	.word	0x20000004

080011c0 <HAL_RTCEx_AlarmBEventCallback>:

// Alarm B callback function (for posting data to RiverSense)
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	make_post_flag = 1;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_RTCEx_AlarmBEventCallback+0x3c>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
	sim_flag = 1;
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <HAL_RTCEx_AlarmBEventCallback+0x40>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
	currentFormArr = !currentFormArr; // Switch between forms
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_RTCEx_AlarmBEventCallback+0x44>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	bf0c      	ite	eq
 80011dc:	2301      	moveq	r3, #1
 80011de:	2300      	movne	r3, #0
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b07      	ldr	r3, [pc, #28]	; (8001204 <HAL_RTCEx_AlarmBEventCallback+0x44>)
 80011e6:	701a      	strb	r2, [r3, #0]
	set_alarm_B(alarmB_SecondsOffset);
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <HAL_RTCEx_AlarmBEventCallback+0x48>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 fc3f 	bl	8001a70 <set_alarm_B>
	return;
 80011f2:	bf00      	nop
}
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2000042a 	.word	0x2000042a
 8001200:	20000429 	.word	0x20000429
 8001204:	20002370 	.word	0x20002370
 8001208:	20000008 	.word	0x20000008

0800120c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001210:	f002 f9c3 	bl	800359a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001214:	f000 f846 	bl	80012a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001218:	f000 faba 	bl	8001790 <MX_GPIO_Init>
  MX_DMA_Init();
 800121c:	f000 fa9a 	bl	8001754 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001220:	f000 fa68 	bl	80016f4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001224:	f000 fa18 	bl	8001658 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001228:	f000 f9d8 	bl	80015dc <MX_SPI1_Init>
  MX_FATFS_Init();
 800122c:	f008 fc72 	bl	8009b14 <MX_FATFS_Init>
  MX_RTC_Init();
 8001230:	f000 f92e 	bl	8001490 <MX_RTC_Init>
  MX_ADC1_Init();
 8001234:	f000 f898 	bl	8001368 <MX_ADC1_Init>


  // Baud rate synchronization
  // SIM7000 Series_UART_ApplicationNote_V1.01 p11
  // TODO: incorporate this in a state
  HAL_UART_Transmit_IT(&huart1, (uint8_t *) "AT\r\n", strlen("AT\r\n"));
 8001238:	2204      	movs	r2, #4
 800123a:	4912      	ldr	r1, [pc, #72]	; (8001284 <main+0x78>)
 800123c:	4812      	ldr	r0, [pc, #72]	; (8001288 <main+0x7c>)
 800123e:	f007 f93d 	bl	80084bc <HAL_UART_Transmit_IT>
  HAL_Delay(1000);
 8001242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001246:	f002 fa1d 	bl	8003684 <HAL_Delay>
  HAL_UART_Transmit_IT(&huart1, (uint8_t *) "AT\r\n", strlen("AT\r\n"));
 800124a:	2204      	movs	r2, #4
 800124c:	490d      	ldr	r1, [pc, #52]	; (8001284 <main+0x78>)
 800124e:	480e      	ldr	r0, [pc, #56]	; (8001288 <main+0x7c>)
 8001250:	f007 f934 	bl	80084bc <HAL_UART_Transmit_IT>
  HAL_Delay(1000);
 8001254:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001258:	f002 fa14 	bl	8003684 <HAL_Delay>


  // Enable Timer(s)
  HAL_TIM_Base_Start_IT(&htim2);
 800125c:	480b      	ldr	r0, [pc, #44]	; (800128c <main+0x80>)
 800125e:	f006 fcf9 	bl	8007c54 <HAL_TIM_Base_Start_IT>

  // Start ADC from DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, 4);
 8001262:	2204      	movs	r2, #4
 8001264:	490a      	ldr	r1, [pc, #40]	; (8001290 <main+0x84>)
 8001266:	480b      	ldr	r0, [pc, #44]	; (8001294 <main+0x88>)
 8001268:	f002 fd52 	bl	8003d10 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  if (!time_synced_flag) { // Time should be sync from web server
 800126c:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <main+0x8c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1fb      	bne.n	800126c <main+0x60>
		  sim_flag = 1; // SIM operations should commence
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <main+0x90>)
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
		  make_post_flag = 0; // No POST should be made
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <main+0x94>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
	  if (!time_synced_flag) { // Time should be sync from web server
 8001280:	e7f4      	b.n	800126c <main+0x60>
 8001282:	bf00      	nop
 8001284:	0800f1c4 	.word	0x0800f1c4
 8001288:	200003a4 	.word	0x200003a4
 800128c:	20000358 	.word	0x20000358
 8001290:	20002390 	.word	0x20002390
 8001294:	20000224 	.word	0x20000224
 8001298:	20000428 	.word	0x20000428
 800129c:	20000429 	.word	0x20000429
 80012a0:	2000042a 	.word	0x2000042a

080012a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b096      	sub	sp, #88	; 0x58
 80012a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	2244      	movs	r2, #68	; 0x44
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f009 fa20 	bl	800a6f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b8:	463b      	mov	r3, r7
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012ca:	f004 f9e5 	bl	8005698 <HAL_PWREx_ControlVoltageScaling>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012d4:	f000 fc66 	bl	8001ba4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012d8:	f004 f9c0 	bl	800565c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012dc:	4b21      	ldr	r3, [pc, #132]	; (8001364 <SystemClock_Config+0xc0>)
 80012de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012e2:	4a20      	ldr	r2, [pc, #128]	; (8001364 <SystemClock_Config+0xc0>)
 80012e4:	f023 0318 	bic.w	r3, r3, #24
 80012e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80012ec:	2314      	movs	r3, #20
 80012ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012f0:	2301      	movs	r3, #1
 80012f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012f4:	2301      	movs	r3, #1
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012fc:	2360      	movs	r3, #96	; 0x60
 80012fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001300:	2302      	movs	r3, #2
 8001302:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001304:	2301      	movs	r3, #1
 8001306:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001308:	2301      	movs	r3, #1
 800130a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800130c:	2310      	movs	r3, #16
 800130e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001310:	2307      	movs	r3, #7
 8001312:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001314:	2302      	movs	r3, #2
 8001316:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001318:	2302      	movs	r3, #2
 800131a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4618      	mov	r0, r3
 8001322:	f004 fa0f 	bl	8005744 <HAL_RCC_OscConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800132c:	f000 fc3a 	bl	8001ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001330:	230f      	movs	r3, #15
 8001332:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001334:	2303      	movs	r3, #3
 8001336:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001344:	463b      	mov	r3, r7
 8001346:	2101      	movs	r1, #1
 8001348:	4618      	mov	r0, r3
 800134a:	f004 fe0f 	bl	8005f6c <HAL_RCC_ClockConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001354:	f000 fc26 	bl	8001ba4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001358:	f005 fa22 	bl	80067a0 <HAL_RCCEx_EnableMSIPLLMode>
}
 800135c:	bf00      	nop
 800135e:	3758      	adds	r7, #88	; 0x58
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40021000 	.word	0x40021000

08001368 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800136e:	463b      	mov	r3, r7
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
 800137c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800137e:	4b3e      	ldr	r3, [pc, #248]	; (8001478 <MX_ADC1_Init+0x110>)
 8001380:	4a3e      	ldr	r2, [pc, #248]	; (800147c <MX_ADC1_Init+0x114>)
 8001382:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001384:	4b3c      	ldr	r3, [pc, #240]	; (8001478 <MX_ADC1_Init+0x110>)
 8001386:	2200      	movs	r2, #0
 8001388:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <MX_ADC1_Init+0x110>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001390:	4b39      	ldr	r3, [pc, #228]	; (8001478 <MX_ADC1_Init+0x110>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001396:	4b38      	ldr	r3, [pc, #224]	; (8001478 <MX_ADC1_Init+0x110>)
 8001398:	2201      	movs	r2, #1
 800139a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800139c:	4b36      	ldr	r3, [pc, #216]	; (8001478 <MX_ADC1_Init+0x110>)
 800139e:	2204      	movs	r2, #4
 80013a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013a2:	4b35      	ldr	r3, [pc, #212]	; (8001478 <MX_ADC1_Init+0x110>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013a8:	4b33      	ldr	r3, [pc, #204]	; (8001478 <MX_ADC1_Init+0x110>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 80013ae:	4b32      	ldr	r3, [pc, #200]	; (8001478 <MX_ADC1_Init+0x110>)
 80013b0:	2204      	movs	r2, #4
 80013b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013b4:	4b30      	ldr	r3, [pc, #192]	; (8001478 <MX_ADC1_Init+0x110>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013bc:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <MX_ADC1_Init+0x110>)
 80013be:	2200      	movs	r2, #0
 80013c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013c2:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <MX_ADC1_Init+0x110>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013c8:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <MX_ADC1_Init+0x110>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013d0:	4b29      	ldr	r3, [pc, #164]	; (8001478 <MX_ADC1_Init+0x110>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013d6:	4b28      	ldr	r3, [pc, #160]	; (8001478 <MX_ADC1_Init+0x110>)
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013de:	4826      	ldr	r0, [pc, #152]	; (8001478 <MX_ADC1_Init+0x110>)
 80013e0:	f002 fb4e 	bl	8003a80 <HAL_ADC_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80013ea:	f000 fbdb 	bl	8001ba4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80013ee:	4b24      	ldr	r3, [pc, #144]	; (8001480 <MX_ADC1_Init+0x118>)
 80013f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013f2:	2306      	movs	r3, #6
 80013f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80013f6:	2302      	movs	r3, #2
 80013f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013fa:	237f      	movs	r3, #127	; 0x7f
 80013fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013fe:	2304      	movs	r3, #4
 8001400:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001406:	463b      	mov	r3, r7
 8001408:	4619      	mov	r1, r3
 800140a:	481b      	ldr	r0, [pc, #108]	; (8001478 <MX_ADC1_Init+0x110>)
 800140c:	f002 fed6 	bl	80041bc <HAL_ADC_ConfigChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001416:	f000 fbc5 	bl	8001ba4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_ADC1_Init+0x11c>)
 800141c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800141e:	230c      	movs	r3, #12
 8001420:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001422:	463b      	mov	r3, r7
 8001424:	4619      	mov	r1, r3
 8001426:	4814      	ldr	r0, [pc, #80]	; (8001478 <MX_ADC1_Init+0x110>)
 8001428:	f002 fec8 	bl	80041bc <HAL_ADC_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001432:	f000 fbb7 	bl	8001ba4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001436:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MX_ADC1_Init+0x120>)
 8001438:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800143a:	2312      	movs	r3, #18
 800143c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143e:	463b      	mov	r3, r7
 8001440:	4619      	mov	r1, r3
 8001442:	480d      	ldr	r0, [pc, #52]	; (8001478 <MX_ADC1_Init+0x110>)
 8001444:	f002 feba 	bl	80041bc <HAL_ADC_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 800144e:	f000 fba9 	bl	8001ba4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_ADC1_Init+0x124>)
 8001454:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001456:	2318      	movs	r3, #24
 8001458:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145a:	463b      	mov	r3, r7
 800145c:	4619      	mov	r1, r3
 800145e:	4806      	ldr	r0, [pc, #24]	; (8001478 <MX_ADC1_Init+0x110>)
 8001460:	f002 feac 	bl	80041bc <HAL_ADC_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800146a:	f000 fb9b 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000224 	.word	0x20000224
 800147c:	50040000 	.word	0x50040000
 8001480:	1d500080 	.word	0x1d500080
 8001484:	21800100 	.word	0x21800100
 8001488:	25b00200 	.word	0x25b00200
 800148c:	2e300800 	.word	0x2e300800

08001490 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b092      	sub	sp, #72	; 0x48
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001496:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80014a6:	2300      	movs	r3, #0
 80014a8:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	222c      	movs	r2, #44	; 0x2c
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f009 f921 	bl	800a6f8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014b6:	4b47      	ldr	r3, [pc, #284]	; (80015d4 <MX_RTC_Init+0x144>)
 80014b8:	4a47      	ldr	r2, [pc, #284]	; (80015d8 <MX_RTC_Init+0x148>)
 80014ba:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014bc:	4b45      	ldr	r3, [pc, #276]	; (80015d4 <MX_RTC_Init+0x144>)
 80014be:	2200      	movs	r2, #0
 80014c0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80014c2:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <MX_RTC_Init+0x144>)
 80014c4:	227f      	movs	r2, #127	; 0x7f
 80014c6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80014c8:	4b42      	ldr	r3, [pc, #264]	; (80015d4 <MX_RTC_Init+0x144>)
 80014ca:	22ff      	movs	r2, #255	; 0xff
 80014cc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014ce:	4b41      	ldr	r3, [pc, #260]	; (80015d4 <MX_RTC_Init+0x144>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80014d4:	4b3f      	ldr	r3, [pc, #252]	; (80015d4 <MX_RTC_Init+0x144>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014da:	4b3e      	ldr	r3, [pc, #248]	; (80015d4 <MX_RTC_Init+0x144>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014e0:	4b3c      	ldr	r3, [pc, #240]	; (80015d4 <MX_RTC_Init+0x144>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014e6:	483b      	ldr	r0, [pc, #236]	; (80015d4 <MX_RTC_Init+0x144>)
 80014e8:	f005 fa5c 	bl	80069a4 <HAL_RTC_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80014f2:	f000 fb57 	bl	8001ba4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x13;
 80014f6:	2313      	movs	r3, #19
 80014f8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x15;
 80014fc:	2315      	movs	r3, #21
 80014fe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x30;
 8001502:	2330      	movs	r3, #48	; 0x30
 8001504:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001508:	2300      	movs	r3, #0
 800150a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001510:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001514:	2201      	movs	r2, #1
 8001516:	4619      	mov	r1, r3
 8001518:	482e      	ldr	r0, [pc, #184]	; (80015d4 <MX_RTC_Init+0x144>)
 800151a:	f005 fabe 	bl	8006a9a <HAL_RTC_SetTime>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001524:	f000 fb3e 	bl	8001ba4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001528:	2302      	movs	r3, #2
 800152a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_AUGUST;
 800152e:	2308      	movs	r3, #8
 8001530:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x12;
 8001534:	2312      	movs	r3, #18
 8001536:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x97;
 800153a:	2397      	movs	r3, #151	; 0x97
 800153c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001540:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001544:	2201      	movs	r2, #1
 8001546:	4619      	mov	r1, r3
 8001548:	4822      	ldr	r0, [pc, #136]	; (80015d4 <MX_RTC_Init+0x144>)
 800154a:	f005 fb9f 	bl	8006c8c <HAL_RTC_SetDate>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001554:	f000 fb26 	bl	8001ba4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x10;
 8001558:	2310      	movs	r3, #16
 800155a:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x10;
 800155c:	2310      	movs	r3, #16
 800155e:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x10;
 8001560:	2310      	movs	r3, #16
 8001562:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x10;
 8001564:	2310      	movs	r3, #16
 8001566:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001568:	2300      	movs	r3, #0
 800156a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001570:	2300      	movs	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 800157c:	2301      	movs	r3, #1
 800157e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001582:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	2201      	movs	r2, #1
 800158c:	4619      	mov	r1, r3
 800158e:	4811      	ldr	r0, [pc, #68]	; (80015d4 <MX_RTC_Init+0x144>)
 8001590:	f005 fc50 	bl	8006e34 <HAL_RTC_SetAlarm_IT>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 800159a:	f000 fb03 	bl	8001ba4 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800159e:	2300      	movs	r3, #0
 80015a0:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
  sAlarm.Alarm = RTC_ALARM_B;
 80015ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	2201      	movs	r2, #1
 80015b8:	4619      	mov	r1, r3
 80015ba:	4806      	ldr	r0, [pc, #24]	; (80015d4 <MX_RTC_Init+0x144>)
 80015bc:	f005 fc3a 	bl	8006e34 <HAL_RTC_SetAlarm_IT>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 80015c6:	f000 faed 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	3748      	adds	r7, #72	; 0x48
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200002d0 	.word	0x200002d0
 80015d8:	40002800 	.word	0x40002800

080015dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <MX_SPI1_Init+0x74>)
 80015e2:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <MX_SPI1_Init+0x78>)
 80015e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015e6:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_SPI1_Init+0x74>)
 80015e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <MX_SPI1_Init+0x74>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <MX_SPI1_Init+0x74>)
 80015f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_SPI1_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_SPI1_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_SPI1_Init+0x74>)
 800160a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_SPI1_Init+0x74>)
 8001612:	2230      	movs	r2, #48	; 0x30
 8001614:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_SPI1_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_SPI1_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_SPI1_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_SPI1_Init+0x74>)
 800162a:	2207      	movs	r2, #7
 800162c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_SPI1_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_SPI1_Init+0x74>)
 8001636:	2208      	movs	r2, #8
 8001638:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_SPI1_Init+0x74>)
 800163c:	f005 fe97 	bl	800736e <HAL_SPI_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001646:	f000 faad 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200002f4 	.word	0x200002f4
 8001654:	40013000 	.word	0x40013000

08001658 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165e:	f107 0310 	add.w	r3, r7, #16
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001676:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <MX_TIM2_Init+0x98>)
 8001678:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800167c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 319;
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <MX_TIM2_Init+0x98>)
 8001680:	f240 123f 	movw	r2, #319	; 0x13f
 8001684:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001686:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <MX_TIM2_Init+0x98>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <MX_TIM2_Init+0x98>)
 800168e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001692:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <MX_TIM2_Init+0x98>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_TIM2_Init+0x98>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016a0:	4813      	ldr	r0, [pc, #76]	; (80016f0 <MX_TIM2_Init+0x98>)
 80016a2:	f006 fa7f 	bl	8007ba4 <HAL_TIM_Base_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80016ac:	f000 fa7a 	bl	8001ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016b6:	f107 0310 	add.w	r3, r7, #16
 80016ba:	4619      	mov	r1, r3
 80016bc:	480c      	ldr	r0, [pc, #48]	; (80016f0 <MX_TIM2_Init+0x98>)
 80016be:	f006 fc3c 	bl	8007f3a <HAL_TIM_ConfigClockSource>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80016c8:	f000 fa6c 	bl	8001ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_TIM2_Init+0x98>)
 80016da:	f006 fe1d 	bl	8008318 <HAL_TIMEx_MasterConfigSynchronization>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80016e4:	f000 fa5e 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000358 	.word	0x20000358

080016f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_USART1_UART_Init+0x58>)
 80016fa:	4a15      	ldr	r2, [pc, #84]	; (8001750 <MX_USART1_UART_Init+0x5c>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <MX_USART1_UART_Init+0x58>)
 8001700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001704:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_USART1_UART_Init+0x58>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_USART1_UART_Init+0x58>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_USART1_UART_Init+0x58>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_USART1_UART_Init+0x58>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <MX_USART1_UART_Init+0x58>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_USART1_UART_Init+0x58>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <MX_USART1_UART_Init+0x58>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_USART1_UART_Init+0x58>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_USART1_UART_Init+0x58>)
 8001738:	f006 fe72 	bl	8008420 <HAL_UART_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001742:	f000 fa2f 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200003a4 	.word	0x200003a4
 8001750:	40013800 	.word	0x40013800

08001754 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_DMA_Init+0x38>)
 800175c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <MX_DMA_Init+0x38>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6493      	str	r3, [r2, #72]	; 0x48
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_DMA_Init+0x38>)
 8001768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	200b      	movs	r0, #11
 8001778:	f003 fb27 	bl	8004dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800177c:	200b      	movs	r0, #11
 800177e:	f003 fb40 	bl	8004e02 <HAL_NVIC_EnableIRQ>

}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000

08001790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	4b31      	ldr	r3, [pc, #196]	; (800186c <MX_GPIO_Init+0xdc>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	4a30      	ldr	r2, [pc, #192]	; (800186c <MX_GPIO_Init+0xdc>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b2:	4b2e      	ldr	r3, [pc, #184]	; (800186c <MX_GPIO_Init+0xdc>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	4b2b      	ldr	r3, [pc, #172]	; (800186c <MX_GPIO_Init+0xdc>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	4a2a      	ldr	r2, [pc, #168]	; (800186c <MX_GPIO_Init+0xdc>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ca:	4b28      	ldr	r3, [pc, #160]	; (800186c <MX_GPIO_Init+0xdc>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	4b25      	ldr	r3, [pc, #148]	; (800186c <MX_GPIO_Init+0xdc>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	4a24      	ldr	r2, [pc, #144]	; (800186c <MX_GPIO_Init+0xdc>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e2:	4b22      	ldr	r3, [pc, #136]	; (800186c <MX_GPIO_Init+0xdc>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2120      	movs	r1, #32
 80017f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f6:	f003 feff 	bl	80055f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2108      	movs	r1, #8
 80017fe:	481c      	ldr	r0, [pc, #112]	; (8001870 <MX_GPIO_Init+0xe0>)
 8001800:	f003 fefa 	bl	80055f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001804:	2320      	movs	r3, #32
 8001806:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001808:	2301      	movs	r3, #1
 800180a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	4619      	mov	r1, r3
 800181a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181e:	f003 fd81 	bl	8005324 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001826:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001830:	2303      	movs	r3, #3
 8001832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001834:	2303      	movs	r3, #3
 8001836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	4619      	mov	r1, r3
 800183e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001842:	f003 fd6f 	bl	8005324 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001846:	2308      	movs	r3, #8
 8001848:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	2301      	movs	r3, #1
 800184c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	4619      	mov	r1, r3
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <MX_GPIO_Init+0xe0>)
 800185e:	f003 fd61 	bl	8005324 <HAL_GPIO_Init>

}
 8001862:	bf00      	nop
 8001864:	3720      	adds	r7, #32
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000
 8001870:	48000400 	.word	0x48000400

08001874 <set_time>:

/* USER CODE BEGIN 4 */

// Set time of RTC
void set_time(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	sDate.Year = currentDateTime[0]; // For some reason the date is off by 8 years (TODO: Fix)
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <set_time+0x60>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	70fb      	strb	r3, [r7, #3]
	sDate.Month = currentDateTime[1];
 8001880:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <set_time+0x60>)
 8001882:	785b      	ldrb	r3, [r3, #1]
 8001884:	707b      	strb	r3, [r7, #1]
	sDate.Date = currentDateTime[2];
 8001886:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <set_time+0x60>)
 8001888:	789b      	ldrb	r3, [r3, #2]
 800188a:	70bb      	strb	r3, [r7, #2]
	sTime.Hours = currentDateTime[3];
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <set_time+0x60>)
 800188e:	78db      	ldrb	r3, [r3, #3]
 8001890:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = currentDateTime[4];
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <set_time+0x60>)
 8001894:	791b      	ldrb	r3, [r3, #4]
 8001896:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = currentDateTime[5];
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <set_time+0x60>)
 800189a:	795b      	ldrb	r3, [r3, #5]
 800189c:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
//	sDate.WeekDay = RTC_WEEKDAY_THURSDAY; // day
//	sDate.Month = RTC_MONTH_AUGUST; // month

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	2200      	movs	r2, #0
 80018aa:	4619      	mov	r1, r3
 80018ac:	480a      	ldr	r0, [pc, #40]	; (80018d8 <set_time+0x64>)
 80018ae:	f005 f8f4 	bl	8006a9a <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80018b2:	463b      	mov	r3, r7
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	4807      	ldr	r0, [pc, #28]	; (80018d8 <set_time+0x64>)
 80018ba:	f005 f9e7 	bl	8006c8c <HAL_RTC_SetDate>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register (random value being written now)
 80018be:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80018c2:	2101      	movs	r1, #1
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <set_time+0x64>)
 80018c6:	f005 fd39 	bl	800733c <HAL_RTCEx_BKUPWrite>
	return;
 80018ca:	bf00      	nop
}
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20002374 	.word	0x20002374
 80018d8:	200002d0 	.word	0x200002d0

080018dc <get_time>:

// Get time of RTC
void get_time(char* currentTime) {
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b08d      	sub	sp, #52	; 0x34
 80018e0:	af04      	add	r7, sp, #16
 80018e2:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;
	// Get the RTC current Time
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80018e4:	f107 0308 	add.w	r3, r7, #8
 80018e8:	2200      	movs	r2, #0
 80018ea:	4619      	mov	r1, r3
 80018ec:	480f      	ldr	r0, [pc, #60]	; (800192c <get_time+0x50>)
 80018ee:	f005 f971 	bl	8006bd4 <HAL_RTC_GetTime>
	//  Get the RTC current Date
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	2200      	movs	r2, #0
 80018f8:	4619      	mov	r1, r3
 80018fa:	480c      	ldr	r0, [pc, #48]	; (800192c <get_time+0x50>)
 80018fc:	f005 fa4d 	bl	8006d9a <HAL_RTC_GetDate>

//	sprintf(currentTime, "%d-%02d-%02d %02d:%02d:%02d", 2000+gDate.Year, gDate.Month, gDate.Date, gTime.Hours, gTime.Minutes, gTime.Seconds);
	sprintf(currentTime, "%d-%02d-%02d %02d:%02d:%02d", 2022, gDate.Month, gDate.Date, gTime.Hours, gTime.Minutes, gTime.Seconds);
 8001900:	7f7b      	ldrb	r3, [r7, #29]
 8001902:	461c      	mov	r4, r3
 8001904:	7fbb      	ldrb	r3, [r7, #30]
 8001906:	7a3a      	ldrb	r2, [r7, #8]
 8001908:	7a79      	ldrb	r1, [r7, #9]
 800190a:	7ab8      	ldrb	r0, [r7, #10]
 800190c:	9003      	str	r0, [sp, #12]
 800190e:	9102      	str	r1, [sp, #8]
 8001910:	9201      	str	r2, [sp, #4]
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	4623      	mov	r3, r4
 8001916:	f240 72e6 	movw	r2, #2022	; 0x7e6
 800191a:	4905      	ldr	r1, [pc, #20]	; (8001930 <get_time+0x54>)
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f009 fe63 	bl	800b5e8 <siprintf>
	return;
 8001922:	bf00      	nop
}
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	200002d0 	.word	0x200002d0
 8001930:	0800f1cc 	.word	0x0800f1cc
 8001934:	00000000 	.word	0x00000000

08001938 <set_alarm_A>:


// Set Alarm A
void set_alarm_A(uint32_t secondsOffset) {
 8001938:	b5b0      	push	{r4, r5, r7, lr}
 800193a:	b094      	sub	sp, #80	; 0x50
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef cDate;
	RTC_TimeTypeDef cTime;
	RTC_AlarmTypeDef sAlarm;

	// Get RTC current date and time
	HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BIN);
 8001940:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001944:	2200      	movs	r2, #0
 8001946:	4619      	mov	r1, r3
 8001948:	4845      	ldr	r0, [pc, #276]	; (8001a60 <set_alarm_A+0x128>)
 800194a:	f005 f943 	bl	8006bd4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BIN);
 800194e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001952:	2200      	movs	r2, #0
 8001954:	4619      	mov	r1, r3
 8001956:	4842      	ldr	r0, [pc, #264]	; (8001a60 <set_alarm_A+0x128>)
 8001958:	f005 fa1f 	bl	8006d9a <HAL_RTC_GetDate>

	// Convert secondsOffset to hours, minutes, seconds according to current time
	secondsOffset += cTime.Hours*3600 + cTime.Minutes*60 + cTime.Seconds;
 800195c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001960:	461a      	mov	r2, r3
 8001962:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001966:	fb03 f202 	mul.w	r2, r3, r2
 800196a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800196e:	4619      	mov	r1, r3
 8001970:	460b      	mov	r3, r1
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	1a5b      	subs	r3, r3, r1
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800197e:	4413      	add	r3, r2
 8001980:	461a      	mov	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	607b      	str	r3, [r7, #4]
	uint8_t hr_offset = (uint8_t) (secondsOffset/3600);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a36      	ldr	r2, [pc, #216]	; (8001a64 <set_alarm_A+0x12c>)
 800198c:	fba2 2303 	umull	r2, r3, r2, r3
 8001990:	0adb      	lsrs	r3, r3, #11
 8001992:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t min_offset = (uint8_t) ((secondsOffset-3600.0*hr_offset)/60.0);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7fe fdb4 	bl	8000504 <__aeabi_ui2d>
 800199c:	4604      	mov	r4, r0
 800199e:	460d      	mov	r5, r1
 80019a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fdbd 	bl	8000524 <__aeabi_i2d>
 80019aa:	a32b      	add	r3, pc, #172	; (adr r3, 8001a58 <set_alarm_A+0x120>)
 80019ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b0:	f7fe fe22 	bl	80005f8 <__aeabi_dmul>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4620      	mov	r0, r4
 80019ba:	4629      	mov	r1, r5
 80019bc:	f7fe fc64 	bl	8000288 <__aeabi_dsub>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <set_alarm_A+0x130>)
 80019ce:	f7fe ff3d 	bl	800084c <__aeabi_ddiv>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	f7ff f8e5 	bl	8000ba8 <__aeabi_d2uiz>
 80019de:	4603      	mov	r3, r0
 80019e0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t sec_offset = (uint8_t) (secondsOffset-3600*hr_offset-60*min_offset);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80019f8:	4619      	mov	r1, r3
 80019fa:	0109      	lsls	r1, r1, #4
 80019fc:	1acb      	subs	r3, r1, r3
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	// TODO: adjust time for going into next date as well

	// Set alarm A to current date and time + offset provided
	sAlarm.AlarmTime.Hours = hr_offset;
 8001a08:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a0c:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = min_offset;
 8001a0e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001a12:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = sec_offset;
 8001a14:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a18:	72bb      	strb	r3, [r7, #10]
	sAlarm.AlarmTime.SubSeconds = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
	sAlarm.AlarmDateWeekDay = cDate.Date;
 8001a32:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001a36:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sAlarm.Alarm = RTC_ALARM_A;
 8001a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8001a40:	f107 0308 	add.w	r3, r7, #8
 8001a44:	2200      	movs	r2, #0
 8001a46:	4619      	mov	r1, r3
 8001a48:	4805      	ldr	r0, [pc, #20]	; (8001a60 <set_alarm_A+0x128>)
 8001a4a:	f005 f9f3 	bl	8006e34 <HAL_RTC_SetAlarm_IT>

	return;
 8001a4e:	bf00      	nop
}
 8001a50:	3750      	adds	r7, #80	; 0x50
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bdb0      	pop	{r4, r5, r7, pc}
 8001a56:	bf00      	nop
 8001a58:	00000000 	.word	0x00000000
 8001a5c:	40ac2000 	.word	0x40ac2000
 8001a60:	200002d0 	.word	0x200002d0
 8001a64:	91a2b3c5 	.word	0x91a2b3c5
 8001a68:	404e0000 	.word	0x404e0000
 8001a6c:	00000000 	.word	0x00000000

08001a70 <set_alarm_B>:

// Set Alarm B
void set_alarm_B(uint32_t secondsOffset) {
 8001a70:	b5b0      	push	{r4, r5, r7, lr}
 8001a72:	b094      	sub	sp, #80	; 0x50
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef cDate;
	RTC_TimeTypeDef cTime;
	RTC_AlarmTypeDef sAlarm;

	// Get RTC current date and time
	HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BIN);
 8001a78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4845      	ldr	r0, [pc, #276]	; (8001b98 <set_alarm_B+0x128>)
 8001a82:	f005 f8a7 	bl	8006bd4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BIN);
 8001a86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4842      	ldr	r0, [pc, #264]	; (8001b98 <set_alarm_B+0x128>)
 8001a90:	f005 f983 	bl	8006d9a <HAL_RTC_GetDate>

	// Convert secondsOffset to hours, minutes, seconds according to current time
	secondsOffset += cTime.Hours*3600 + cTime.Minutes*60 + cTime.Seconds;
 8001a94:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001a98:	461a      	mov	r2, r3
 8001a9a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001a9e:	fb03 f202 	mul.w	r2, r3, r2
 8001aa2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	1a5b      	subs	r3, r3, r1
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001ab6:	4413      	add	r3, r2
 8001ab8:	461a      	mov	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	607b      	str	r3, [r7, #4]
	uint8_t hr_offset = (uint8_t) (secondsOffset/3600);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a36      	ldr	r2, [pc, #216]	; (8001b9c <set_alarm_B+0x12c>)
 8001ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac8:	0adb      	lsrs	r3, r3, #11
 8001aca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t min_offset = (uint8_t) ((secondsOffset-3600.0*hr_offset)/60.0);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7fe fd18 	bl	8000504 <__aeabi_ui2d>
 8001ad4:	4604      	mov	r4, r0
 8001ad6:	460d      	mov	r5, r1
 8001ad8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fd21 	bl	8000524 <__aeabi_i2d>
 8001ae2:	a32b      	add	r3, pc, #172	; (adr r3, 8001b90 <set_alarm_B+0x120>)
 8001ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae8:	f7fe fd86 	bl	80005f8 <__aeabi_dmul>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4620      	mov	r0, r4
 8001af2:	4629      	mov	r1, r5
 8001af4:	f7fe fbc8 	bl	8000288 <__aeabi_dsub>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <set_alarm_B+0x130>)
 8001b06:	f7fe fea1 	bl	800084c <__aeabi_ddiv>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	f7ff f849 	bl	8000ba8 <__aeabi_d2uiz>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t sec_offset = (uint8_t) (secondsOffset-3600*hr_offset-60*min_offset);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001b30:	4619      	mov	r1, r3
 8001b32:	0109      	lsls	r1, r1, #4
 8001b34:	1acb      	subs	r3, r1, r3
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	// TODO: adjust time for going into next date as well

	// Set alarm B to current date and time + offset provided
	sAlarm.AlarmTime.Hours = hr_offset;
 8001b40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b44:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = min_offset;
 8001b46:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001b4a:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = sec_offset;
 8001b4c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b50:	72bb      	strb	r3, [r7, #10]
	sAlarm.AlarmTime.SubSeconds = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
	sAlarm.AlarmDateWeekDay = cDate.Date;
 8001b6a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001b6e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sAlarm.Alarm = RTC_ALARM_B;
 8001b72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b76:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8001b78:	f107 0308 	add.w	r3, r7, #8
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4805      	ldr	r0, [pc, #20]	; (8001b98 <set_alarm_B+0x128>)
 8001b82:	f005 f957 	bl	8006e34 <HAL_RTC_SetAlarm_IT>

	return;
 8001b86:	bf00      	nop
}
 8001b88:	3750      	adds	r7, #80	; 0x50
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	00000000 	.word	0x00000000
 8001b94:	40ac2000 	.word	0x40ac2000
 8001b98:	200002d0 	.word	0x200002d0
 8001b9c:	91a2b3c5 	.word	0x91a2b3c5
 8001ba0:	404e0000 	.word	0x404e0000

08001ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba8:	b672      	cpsid	i
}
 8001baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bac:	e7fe      	b.n	8001bac <Error_Handler+0x8>
	...

08001bb0 <SIM_Handler>:
// Buffer to store all data. TODO: remove later
uint8_t allRX_Data[1000] = {0};
uint8_t allRX_Data_Index = 0;


void SIM_Handler(void) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0

	switch (simState) {
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <SIM_Handler+0x74>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b05      	cmp	r3, #5
 8001bbc:	d82d      	bhi.n	8001c1a <SIM_Handler+0x6a>
 8001bbe:	a201      	add	r2, pc, #4	; (adr r2, 8001bc4 <SIM_Handler+0x14>)
 8001bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc4:	08001bdd 	.word	0x08001bdd
 8001bc8:	08001be3 	.word	0x08001be3
 8001bcc:	08001be9 	.word	0x08001be9
 8001bd0:	08001bef 	.word	0x08001bef
 8001bd4:	08001c11 	.word	0x08001c11
 8001bd8:	08001c17 	.word	0x08001c17
		case SIM_INIT:
			SIM_Init();
 8001bdc:	f000 f864 	bl	8001ca8 <SIM_Init>
			break;
 8001be0:	e01e      	b.n	8001c20 <SIM_Handler+0x70>
		case SIM_UE_CHECK:
			SIM_UE_Check();
 8001be2:	f000 f909 	bl	8001df8 <SIM_UE_Check>
			break;
 8001be6:	e01b      	b.n	8001c20 <SIM_Handler+0x70>
		case SIM_PDN_ACTIVATION:
			SIM_PDN_Activation();
 8001be8:	f000 f98e 	bl	8001f08 <SIM_PDN_Activation>
			break;
 8001bec:	e018      	b.n	8001c20 <SIM_Handler+0x70>
		case SIM_HTTP_BUILD:
			if (!time_synced_flag) {
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <SIM_Handler+0x78>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d103      	bne.n	8001bfe <SIM_Handler+0x4e>
				SIM_HTTP_Build(SIM_HTTP_MAKE_GET);
 8001bf6:	2005      	movs	r0, #5
 8001bf8:	f000 faca 	bl	8002190 <SIM_HTTP_Build>
			} else if (make_post_flag) {
				SIM_HTTP_Build(SIM_HTTP_MAKE_POST);
			}
			break;
 8001bfc:	e00f      	b.n	8001c1e <SIM_Handler+0x6e>
			} else if (make_post_flag) {
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <SIM_Handler+0x7c>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00a      	beq.n	8001c1e <SIM_Handler+0x6e>
				SIM_HTTP_Build(SIM_HTTP_MAKE_POST);
 8001c08:	2004      	movs	r0, #4
 8001c0a:	f000 fac1 	bl	8002190 <SIM_HTTP_Build>
			break;
 8001c0e:	e006      	b.n	8001c1e <SIM_Handler+0x6e>
		case SIM_HTTP_MAKE_POST:
			SIM_HTTP_Make_Post();
 8001c10:	f000 fc2a 	bl	8002468 <SIM_HTTP_Make_Post>
			break;
 8001c14:	e004      	b.n	8001c20 <SIM_Handler+0x70>
		case SIM_HTTP_MAKE_GET:
			SIM_HTTP_Make_Get();
 8001c16:	f000 fee9 	bl	80029ec <SIM_HTTP_Make_Get>
		default:
			break;
 8001c1a:	bf00      	nop
 8001c1c:	e000      	b.n	8001c20 <SIM_Handler+0x70>
			break;
 8001c1e:	bf00      	nop
	}


	return;
 8001c20:	bf00      	nop
}
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	2000000c 	.word	0x2000000c
 8001c28:	20000428 	.word	0x20000428
 8001c2c:	2000042a 	.word	0x2000042a

08001c30 <SIM_serialRX_Handler>:


void SIM_serialRX_Handler(uint8_t charReceived) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]

	serialRX_Buffer[serialRX_BufferIndex++] = charReceived;
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <SIM_serialRX_Handler+0x64>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	b2d1      	uxtb	r1, r2
 8001c42:	4a14      	ldr	r2, [pc, #80]	; (8001c94 <SIM_serialRX_Handler+0x64>)
 8001c44:	7011      	strb	r1, [r2, #0]
 8001c46:	4619      	mov	r1, r3
 8001c48:	4a13      	ldr	r2, [pc, #76]	; (8001c98 <SIM_serialRX_Handler+0x68>)
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	5453      	strb	r3, [r2, r1]

	//TODO: Remove later; Just for tracking
	allRX_Data[allRX_Data_Index++] = charReceived;
 8001c4e:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <SIM_serialRX_Handler+0x6c>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	b2d1      	uxtb	r1, r2
 8001c56:	4a11      	ldr	r2, [pc, #68]	; (8001c9c <SIM_serialRX_Handler+0x6c>)
 8001c58:	7011      	strb	r1, [r2, #0]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <SIM_serialRX_Handler+0x70>)
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	5453      	strb	r3, [r2, r1]

	if ((charReceived == (uint8_t)'\n')) {
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	2b0a      	cmp	r3, #10
 8001c66:	d101      	bne.n	8001c6c <SIM_serialRX_Handler+0x3c>
		SIM_Handler();
 8001c68:	f7ff ffa2 	bl	8001bb0 <SIM_Handler>
	}

	if (clearBuffer) { // reset index and clear buffer
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <SIM_serialRX_Handler+0x74>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00b      	beq.n	8001c8c <SIM_serialRX_Handler+0x5c>
		serialRX_BufferIndex = 0;
 8001c74:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <SIM_serialRX_Handler+0x64>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
		memset(serialRX_Buffer, 0, sizeof(serialRX_Buffer));
 8001c7a:	22fa      	movs	r2, #250	; 0xfa
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4806      	ldr	r0, [pc, #24]	; (8001c98 <SIM_serialRX_Handler+0x68>)
 8001c80:	f008 fd3a 	bl	800a6f8 <memset>
		clearBuffer = 0;
 8001c84:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <SIM_serialRX_Handler+0x74>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
	}


	return;
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
}
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	200024fe 	.word	0x200024fe
 8001c98:	20002404 	.word	0x20002404
 8001c9c:	200029f0 	.word	0x200029f0
 8001ca0:	20002608 	.word	0x20002608
 8001ca4:	20002500 	.word	0x20002500

08001ca8 <SIM_Init>:


void SIM_Init(void) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
	// ---------------------------- TX ------------------------------- //
	// 0: AT
	// 1: AT+CPIN?
	// All good state change: SIM_INIT to SIM_UE_CHECK

	uint8_t maxCommand = 1;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	71bb      	strb	r3, [r7, #6]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 8001cb2:	4b44      	ldr	r3, [pc, #272]	; (8001dc4 <SIM_Init+0x11c>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d034      	beq.n	8001d24 <SIM_Init+0x7c>
 8001cba:	79bb      	ldrb	r3, [r7, #6]
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	4b42      	ldr	r3, [pc, #264]	; (8001dc8 <SIM_Init+0x120>)
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d32d      	bcc.n	8001d24 <SIM_Init+0x7c>
		// Next command should be transmitted

		switch (commandIndex) {
 8001cc8:	4b3f      	ldr	r3, [pc, #252]	; (8001dc8 <SIM_Init+0x120>)
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d002      	beq.n	8001cd8 <SIM_Init+0x30>
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d014      	beq.n	8001d00 <SIM_Init+0x58>
				// Check SIM card status
				sprintf(ATcommand, "AT+CPIN?\r\n");
				HAL_UART_Transmit_IT(&huart1, (uint8_t*) ATcommand, strlen(ATcommand));
				break;
			default:
				break;
 8001cd6:	e022      	b.n	8001d1e <SIM_Init+0x76>
				sprintf(ATcommand, "AT\r\n");
 8001cd8:	493c      	ldr	r1, [pc, #240]	; (8001dcc <SIM_Init+0x124>)
 8001cda:	483d      	ldr	r0, [pc, #244]	; (8001dd0 <SIM_Init+0x128>)
 8001cdc:	f009 fc84 	bl	800b5e8 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8001ce0:	483b      	ldr	r0, [pc, #236]	; (8001dd0 <SIM_Init+0x128>)
 8001ce2:	f7fe fa75 	bl	80001d0 <strlen>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	4938      	ldr	r1, [pc, #224]	; (8001dd0 <SIM_Init+0x128>)
 8001cee:	4839      	ldr	r0, [pc, #228]	; (8001dd4 <SIM_Init+0x12c>)
 8001cf0:	f006 fbe4 	bl	80084bc <HAL_UART_Transmit_IT>
				HAL_UART_Receive_IT(&huart1, &serialRX_Data, 1);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	4938      	ldr	r1, [pc, #224]	; (8001dd8 <SIM_Init+0x130>)
 8001cf8:	4836      	ldr	r0, [pc, #216]	; (8001dd4 <SIM_Init+0x12c>)
 8001cfa:	f006 fc4d 	bl	8008598 <HAL_UART_Receive_IT>
				break;
 8001cfe:	e00e      	b.n	8001d1e <SIM_Init+0x76>
				sprintf(ATcommand, "AT+CPIN?\r\n");
 8001d00:	4936      	ldr	r1, [pc, #216]	; (8001ddc <SIM_Init+0x134>)
 8001d02:	4833      	ldr	r0, [pc, #204]	; (8001dd0 <SIM_Init+0x128>)
 8001d04:	f009 fc70 	bl	800b5e8 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t*) ATcommand, strlen(ATcommand));
 8001d08:	4831      	ldr	r0, [pc, #196]	; (8001dd0 <SIM_Init+0x128>)
 8001d0a:	f7fe fa61 	bl	80001d0 <strlen>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	492e      	ldr	r1, [pc, #184]	; (8001dd0 <SIM_Init+0x128>)
 8001d16:	482f      	ldr	r0, [pc, #188]	; (8001dd4 <SIM_Init+0x12c>)
 8001d18:	f006 fbd0 	bl	80084bc <HAL_UART_Transmit_IT>
				break;
 8001d1c:	bf00      	nop
		}

		shouldTransmit = 0; // no transmission until response has been read
 8001d1e:	4b29      	ldr	r3, [pc, #164]	; (8001dc4 <SIM_Init+0x11c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]

	} // if shouldTransmit
	// --------------------------------------------------------------- //

	// ---------------------------- RX ------------------------------- //
	uint8_t isIncrementCommand = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	71fb      	strb	r3, [r7, #7]

	switch (commandIndex) {
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <SIM_Init+0x120>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <SIM_Init+0x90>
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d00a      	beq.n	8001d4c <SIM_Init+0xa4>
				isStateChanged = 1;
			}

			break;
		default:
			break;
 8001d36:	e01c      	b.n	8001d72 <SIM_Init+0xca>
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8001d38:	4929      	ldr	r1, [pc, #164]	; (8001de0 <SIM_Init+0x138>)
 8001d3a:	482a      	ldr	r0, [pc, #168]	; (8001de4 <SIM_Init+0x13c>)
 8001d3c:	f009 fc96 	bl	800b66c <strstr>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d012      	beq.n	8001d6c <SIM_Init+0xc4>
				isIncrementCommand = 1; // Increment to go to next command
 8001d46:	2301      	movs	r3, #1
 8001d48:	71fb      	strb	r3, [r7, #7]
			break;
 8001d4a:	e00f      	b.n	8001d6c <SIM_Init+0xc4>
			if (strstr((char*) serialRX_Buffer, "+CPIN: READY\r\n\r\nOK\r\n")) {
 8001d4c:	4926      	ldr	r1, [pc, #152]	; (8001de8 <SIM_Init+0x140>)
 8001d4e:	4825      	ldr	r0, [pc, #148]	; (8001de4 <SIM_Init+0x13c>)
 8001d50:	f009 fc8c 	bl	800b66c <strstr>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00a      	beq.n	8001d70 <SIM_Init+0xc8>
				isIncrementCommand = 1; // Increment to go to next command
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	71fb      	strb	r3, [r7, #7]
				simState = SIM_UE_CHECK;
 8001d5e:	4b23      	ldr	r3, [pc, #140]	; (8001dec <SIM_Init+0x144>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
				isStateChanged = 1;
 8001d64:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <SIM_Init+0x148>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
			break;
 8001d6a:	e001      	b.n	8001d70 <SIM_Init+0xc8>
			break;
 8001d6c:	bf00      	nop
 8001d6e:	e000      	b.n	8001d72 <SIM_Init+0xca>
			break;
 8001d70:	bf00      	nop
	}

	if (isIncrementCommand) {
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00e      	beq.n	8001d96 <SIM_Init+0xee>
		++commandIndex; // Next command
 8001d78:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <SIM_Init+0x120>)
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <SIM_Init+0x120>)
 8001d84:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 8001d86:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <SIM_Init+0x14c>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <SIM_Init+0x11c>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	71fb      	strb	r3, [r7, #7]
	}

	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 8001d96:	79bb      	ldrb	r3, [r7, #6]
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <SIM_Init+0x120>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d304      	bcc.n	8001dae <SIM_Init+0x106>
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <SIM_Init+0x148>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d006      	beq.n	8001dbc <SIM_Init+0x114>
		commandIndex = 0;
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <SIM_Init+0x120>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 8001db4:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <SIM_Init+0x148>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
	}


	return;
 8001dba:	bf00      	nop
 8001dbc:	bf00      	nop
}
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	2000000d 	.word	0x2000000d
 8001dc8:	20002400 	.word	0x20002400
 8001dcc:	0800f1e8 	.word	0x0800f1e8
 8001dd0:	2000239c 	.word	0x2000239c
 8001dd4:	200003a4 	.word	0x200003a4
 8001dd8:	200024ff 	.word	0x200024ff
 8001ddc:	0800f1f0 	.word	0x0800f1f0
 8001de0:	0800f1fc 	.word	0x0800f1fc
 8001de4:	20002404 	.word	0x20002404
 8001de8:	0800f204 	.word	0x0800f204
 8001dec:	2000000c 	.word	0x2000000c
 8001df0:	20002402 	.word	0x20002402
 8001df4:	20002500 	.word	0x20002500

08001df8 <SIM_UE_Check>:


void SIM_UE_Check(void) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0

	// ---------------------------- TX ------------------------------- //
	// 0: AT+CPSI?

	uint8_t maxCommand = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	71bb      	strb	r3, [r7, #6]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 8001e02:	4b36      	ldr	r3, [pc, #216]	; (8001edc <SIM_UE_Check+0xe4>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d01e      	beq.n	8001e48 <SIM_UE_Check+0x50>
 8001e0a:	79bb      	ldrb	r3, [r7, #6]
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <SIM_UE_Check+0xe8>)
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d317      	bcc.n	8001e48 <SIM_UE_Check+0x50>
		// Next command should be transmitted
		switch (commandIndex) {
 8001e18:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <SIM_UE_Check+0xe8>)
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10e      	bne.n	8001e40 <SIM_UE_Check+0x48>
			case 0:
				// Inquire UE system information
				sprintf(ATcommand, "AT+CPSI?\r\n");
 8001e22:	4930      	ldr	r1, [pc, #192]	; (8001ee4 <SIM_UE_Check+0xec>)
 8001e24:	4830      	ldr	r0, [pc, #192]	; (8001ee8 <SIM_UE_Check+0xf0>)
 8001e26:	f009 fbdf 	bl	800b5e8 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8001e2a:	482f      	ldr	r0, [pc, #188]	; (8001ee8 <SIM_UE_Check+0xf0>)
 8001e2c:	f7fe f9d0 	bl	80001d0 <strlen>
 8001e30:	4603      	mov	r3, r0
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	461a      	mov	r2, r3
 8001e36:	492c      	ldr	r1, [pc, #176]	; (8001ee8 <SIM_UE_Check+0xf0>)
 8001e38:	482c      	ldr	r0, [pc, #176]	; (8001eec <SIM_UE_Check+0xf4>)
 8001e3a:	f006 fb3f 	bl	80084bc <HAL_UART_Transmit_IT>
				break;
 8001e3e:	e000      	b.n	8001e42 <SIM_UE_Check+0x4a>
			default:
				break;
 8001e40:	bf00      	nop
		}
		shouldTransmit = 0;
 8001e42:	4b26      	ldr	r3, [pc, #152]	; (8001edc <SIM_UE_Check+0xe4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]


	// ---------------------------- RX ------------------------------- //
	// If NB-IoT is online, change from SIM_UE_CHECK to SIM_PDN_ACTIVATION
	// If NB-IoT is NOT online, change from SIM_UE_CHECK to SIM_CONNECT_NBIOT
	uint8_t isIncrementCommand = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	71fb      	strb	r3, [r7, #7]

	switch (commandIndex) {
 8001e4c:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <SIM_UE_Check+0xe8>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d116      	bne.n	8001e84 <SIM_UE_Check+0x8c>
			case 0:
				// OK should be received
				// +CPSI: LTE NB-IOT,Online should be received
				if ((strstr((char*) serialRX_Buffer, "\nOK\r\n")) && (strstr((char*) serialRX_Buffer, "+CPSI: LTE NB-IOT,Online"))) {
 8001e56:	4926      	ldr	r1, [pc, #152]	; (8001ef0 <SIM_UE_Check+0xf8>)
 8001e58:	4826      	ldr	r0, [pc, #152]	; (8001ef4 <SIM_UE_Check+0xfc>)
 8001e5a:	f009 fc07 	bl	800b66c <strstr>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d011      	beq.n	8001e88 <SIM_UE_Check+0x90>
 8001e64:	4924      	ldr	r1, [pc, #144]	; (8001ef8 <SIM_UE_Check+0x100>)
 8001e66:	4823      	ldr	r0, [pc, #140]	; (8001ef4 <SIM_UE_Check+0xfc>)
 8001e68:	f009 fc00 	bl	800b66c <strstr>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00a      	beq.n	8001e88 <SIM_UE_Check+0x90>
					isIncrementCommand = 1; // Increment to go to next command
 8001e72:	2301      	movs	r3, #1
 8001e74:	71fb      	strb	r3, [r7, #7]
					simState = SIM_PDN_ACTIVATION;
 8001e76:	4b21      	ldr	r3, [pc, #132]	; (8001efc <SIM_UE_Check+0x104>)
 8001e78:	2202      	movs	r2, #2
 8001e7a:	701a      	strb	r2, [r3, #0]
					isStateChanged = 1;
 8001e7c:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <SIM_UE_Check+0x108>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
				// TODO: If NB-IoT is not online
//				[16:37:45.613] +CPSI: NO SERVICE,Online
//				[16:37:45.613]
//				[16:37:45.613] OK

				break;
 8001e82:	e001      	b.n	8001e88 <SIM_UE_Check+0x90>
			default:
				break;
 8001e84:	bf00      	nop
 8001e86:	e000      	b.n	8001e8a <SIM_UE_Check+0x92>
				break;
 8001e88:	bf00      	nop
		}

	if (isIncrementCommand) {
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00e      	beq.n	8001eae <SIM_UE_Check+0xb6>
		++commandIndex; // Next command
 8001e90:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <SIM_UE_Check+0xe8>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	3301      	adds	r3, #1
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <SIM_UE_Check+0xe8>)
 8001e9c:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <SIM_UE_Check+0x10c>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <SIM_UE_Check+0xe4>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	71fb      	strb	r3, [r7, #7]
	}
	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 8001eae:	79bb      	ldrb	r3, [r7, #6]
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <SIM_UE_Check+0xe8>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d304      	bcc.n	8001ec6 <SIM_UE_Check+0xce>
 8001ebc:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <SIM_UE_Check+0x108>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d006      	beq.n	8001ed4 <SIM_UE_Check+0xdc>
		commandIndex = 0;
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <SIM_UE_Check+0xe8>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <SIM_UE_Check+0x108>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
	}


	return;
 8001ed2:	bf00      	nop
 8001ed4:	bf00      	nop
}
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	2000000d 	.word	0x2000000d
 8001ee0:	20002400 	.word	0x20002400
 8001ee4:	0800f21c 	.word	0x0800f21c
 8001ee8:	2000239c 	.word	0x2000239c
 8001eec:	200003a4 	.word	0x200003a4
 8001ef0:	0800f1fc 	.word	0x0800f1fc
 8001ef4:	20002404 	.word	0x20002404
 8001ef8:	0800f228 	.word	0x0800f228
 8001efc:	2000000c 	.word	0x2000000c
 8001f00:	20002402 	.word	0x20002402
 8001f04:	20002500 	.word	0x20002500

08001f08 <SIM_PDN_Activation>:



void SIM_PDN_Activation(void) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
	// 1: AT+COPS? - Network information, operator and network
	// 2: AT+CGNAPN - Query APN delivered by the network
	// 3: AT+CNACT? - Get local IP
	// 4: AT+CNACT=0,1 - Activate 0th PDP

	uint8_t maxCommand = 4;
 8001f0e:	2304      	movs	r3, #4
 8001f10:	71bb      	strb	r3, [r7, #6]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 8001f12:	4b8b      	ldr	r3, [pc, #556]	; (8002140 <SIM_PDN_Activation+0x238>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d067      	beq.n	8001fea <SIM_PDN_Activation+0xe2>
 8001f1a:	79bb      	ldrb	r3, [r7, #6]
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	4b89      	ldr	r3, [pc, #548]	; (8002144 <SIM_PDN_Activation+0x23c>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d360      	bcc.n	8001fea <SIM_PDN_Activation+0xe2>
		// Next command should be transmitted
		switch (commandIndex) {
 8001f28:	4b86      	ldr	r3, [pc, #536]	; (8002144 <SIM_PDN_Activation+0x23c>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d857      	bhi.n	8001fe2 <SIM_PDN_Activation+0xda>
 8001f32:	a201      	add	r2, pc, #4	; (adr r2, 8001f38 <SIM_PDN_Activation+0x30>)
 8001f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f38:	08001f4d 	.word	0x08001f4d
 8001f3c:	08001f6b 	.word	0x08001f6b
 8001f40:	08001f89 	.word	0x08001f89
 8001f44:	08001fa7 	.word	0x08001fa7
 8001f48:	08001fc5 	.word	0x08001fc5
			case 0:
				// Check PS service
				sprintf(ATcommand, "AT+CGATT?\r\n");
 8001f4c:	497e      	ldr	r1, [pc, #504]	; (8002148 <SIM_PDN_Activation+0x240>)
 8001f4e:	487f      	ldr	r0, [pc, #508]	; (800214c <SIM_PDN_Activation+0x244>)
 8001f50:	f009 fb4a 	bl	800b5e8 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8001f54:	487d      	ldr	r0, [pc, #500]	; (800214c <SIM_PDN_Activation+0x244>)
 8001f56:	f7fe f93b 	bl	80001d0 <strlen>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	497a      	ldr	r1, [pc, #488]	; (800214c <SIM_PDN_Activation+0x244>)
 8001f62:	487b      	ldr	r0, [pc, #492]	; (8002150 <SIM_PDN_Activation+0x248>)
 8001f64:	f006 faaa 	bl	80084bc <HAL_UART_Transmit_IT>
				break;
 8001f68:	e03c      	b.n	8001fe4 <SIM_PDN_Activation+0xdc>

			case 1:
				// Network information
				sprintf(ATcommand, "AT+COPS?\r\n");
 8001f6a:	497a      	ldr	r1, [pc, #488]	; (8002154 <SIM_PDN_Activation+0x24c>)
 8001f6c:	4877      	ldr	r0, [pc, #476]	; (800214c <SIM_PDN_Activation+0x244>)
 8001f6e:	f009 fb3b 	bl	800b5e8 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8001f72:	4876      	ldr	r0, [pc, #472]	; (800214c <SIM_PDN_Activation+0x244>)
 8001f74:	f7fe f92c 	bl	80001d0 <strlen>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4973      	ldr	r1, [pc, #460]	; (800214c <SIM_PDN_Activation+0x244>)
 8001f80:	4873      	ldr	r0, [pc, #460]	; (8002150 <SIM_PDN_Activation+0x248>)
 8001f82:	f006 fa9b 	bl	80084bc <HAL_UART_Transmit_IT>
				break;
 8001f86:	e02d      	b.n	8001fe4 <SIM_PDN_Activation+0xdc>

			case 2:
				// Network APN
				sprintf(ATcommand, "AT+CGNAPN\r\n");
 8001f88:	4973      	ldr	r1, [pc, #460]	; (8002158 <SIM_PDN_Activation+0x250>)
 8001f8a:	4870      	ldr	r0, [pc, #448]	; (800214c <SIM_PDN_Activation+0x244>)
 8001f8c:	f009 fb2c 	bl	800b5e8 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8001f90:	486e      	ldr	r0, [pc, #440]	; (800214c <SIM_PDN_Activation+0x244>)
 8001f92:	f7fe f91d 	bl	80001d0 <strlen>
 8001f96:	4603      	mov	r3, r0
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	496b      	ldr	r1, [pc, #428]	; (800214c <SIM_PDN_Activation+0x244>)
 8001f9e:	486c      	ldr	r0, [pc, #432]	; (8002150 <SIM_PDN_Activation+0x248>)
 8001fa0:	f006 fa8c 	bl	80084bc <HAL_UART_Transmit_IT>
				break;
 8001fa4:	e01e      	b.n	8001fe4 <SIM_PDN_Activation+0xdc>

			case 3:
				// Local IP (to check if need to activate network)
				sprintf(ATcommand, "AT+CNACT?\r\n");
 8001fa6:	496d      	ldr	r1, [pc, #436]	; (800215c <SIM_PDN_Activation+0x254>)
 8001fa8:	4868      	ldr	r0, [pc, #416]	; (800214c <SIM_PDN_Activation+0x244>)
 8001faa:	f009 fb1d 	bl	800b5e8 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8001fae:	4867      	ldr	r0, [pc, #412]	; (800214c <SIM_PDN_Activation+0x244>)
 8001fb0:	f7fe f90e 	bl	80001d0 <strlen>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4964      	ldr	r1, [pc, #400]	; (800214c <SIM_PDN_Activation+0x244>)
 8001fbc:	4864      	ldr	r0, [pc, #400]	; (8002150 <SIM_PDN_Activation+0x248>)
 8001fbe:	f006 fa7d 	bl	80084bc <HAL_UART_Transmit_IT>
				break;
 8001fc2:	e00f      	b.n	8001fe4 <SIM_PDN_Activation+0xdc>

			case 4:
				// Activate network, Activate 0th PDP.
				sprintf(ATcommand, "AT+CNACT=0,1\r\n");
 8001fc4:	4966      	ldr	r1, [pc, #408]	; (8002160 <SIM_PDN_Activation+0x258>)
 8001fc6:	4861      	ldr	r0, [pc, #388]	; (800214c <SIM_PDN_Activation+0x244>)
 8001fc8:	f009 fb0e 	bl	800b5e8 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8001fcc:	485f      	ldr	r0, [pc, #380]	; (800214c <SIM_PDN_Activation+0x244>)
 8001fce:	f7fe f8ff 	bl	80001d0 <strlen>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	495c      	ldr	r1, [pc, #368]	; (800214c <SIM_PDN_Activation+0x244>)
 8001fda:	485d      	ldr	r0, [pc, #372]	; (8002150 <SIM_PDN_Activation+0x248>)
 8001fdc:	f006 fa6e 	bl	80084bc <HAL_UART_Transmit_IT>
				break;
 8001fe0:	e000      	b.n	8001fe4 <SIM_PDN_Activation+0xdc>


			default:
				break;
 8001fe2:	bf00      	nop
		}
		shouldTransmit = 0;
 8001fe4:	4b56      	ldr	r3, [pc, #344]	; (8002140 <SIM_PDN_Activation+0x238>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]



	// ---------------------------- RX ------------------------------- //

	uint8_t isIncrementCommand = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	71fb      	strb	r3, [r7, #7]

	switch (commandIndex) {
 8001fee:	4b55      	ldr	r3, [pc, #340]	; (8002144 <SIM_PDN_Activation+0x23c>)
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d871      	bhi.n	80020dc <SIM_PDN_Activation+0x1d4>
 8001ff8:	a201      	add	r2, pc, #4	; (adr r2, 8002000 <SIM_PDN_Activation+0xf8>)
 8001ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffe:	bf00      	nop
 8002000:	08002015 	.word	0x08002015
 8002004:	08002029 	.word	0x08002029
 8002008:	0800203d 	.word	0x0800203d
 800200c:	0800204f 	.word	0x0800204f
 8002010:	080020b5 	.word	0x080020b5
			case 0:
				// CGATT: 1\r\n\r\nOK\r\n - Has attached
				if ( strstr((char*) serialRX_Buffer, "CGATT: 1\r\n\r\nOK\r\n") ) {
 8002014:	4953      	ldr	r1, [pc, #332]	; (8002164 <SIM_PDN_Activation+0x25c>)
 8002016:	4854      	ldr	r0, [pc, #336]	; (8002168 <SIM_PDN_Activation+0x260>)
 8002018:	f009 fb28 	bl	800b66c <strstr>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d05e      	beq.n	80020e0 <SIM_PDN_Activation+0x1d8>
					isIncrementCommand = 1; // Increment to go to next command
 8002022:	2301      	movs	r3, #1
 8002024:	71fb      	strb	r3, [r7, #7]
				}

				// TODO: If not attached to PS service
				break;
 8002026:	e05b      	b.n	80020e0 <SIM_PDN_Activation+0x1d8>

			case 1:
				// +COPS?\r\r\n+COPS: 1,0,\"VodaCom-SA\",9\r\n\r\nOK\r\n - 9: NB-IoT Network
				if (strstr((char*) serialRX_Buffer, "+COPS?\r\r\n+COPS: 1,0,\"VodaCom-SA\",9\r\n\r\nOK\r\n") ) {
 8002028:	4950      	ldr	r1, [pc, #320]	; (800216c <SIM_PDN_Activation+0x264>)
 800202a:	484f      	ldr	r0, [pc, #316]	; (8002168 <SIM_PDN_Activation+0x260>)
 800202c:	f009 fb1e 	bl	800b66c <strstr>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d056      	beq.n	80020e4 <SIM_PDN_Activation+0x1dc>
					isIncrementCommand = 1;
 8002036:	2301      	movs	r3, #1
 8002038:	71fb      	strb	r3, [r7, #7]
				}

				// TODO: If network information is wrong
				break;
 800203a:	e053      	b.n	80020e4 <SIM_PDN_Activation+0x1dc>

			case 2:
				// +CGNAPN: 1,\"internet\"\r\n\r\nOK\r\n
				if ( strstr((char*) serialRX_Buffer, "+CGNAPN: 1,\"internet\"\r\n\r\nOK\r\n") ) {
 800203c:	494c      	ldr	r1, [pc, #304]	; (8002170 <SIM_PDN_Activation+0x268>)
 800203e:	484a      	ldr	r0, [pc, #296]	; (8002168 <SIM_PDN_Activation+0x260>)
 8002040:	f009 fb14 	bl	800b66c <strstr>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <SIM_PDN_Activation+0x146>
					isIncrementCommand = 1;
 800204a:	2301      	movs	r3, #1
 800204c:	71fb      	strb	r3, [r7, #7]
				}

			case 3:
				// +CNACT: 0,0,\"0.0.0.0\" - Not activated
				// \r\nOK\r\n - End of response
				if ( (strstr((char*) serialRX_Buffer, "+CNACT: 0,0,\"0.0.0.0\"")) && (strstr((char*) serialRX_Buffer, "\r\nOK\r\n")) ) {
 800204e:	4949      	ldr	r1, [pc, #292]	; (8002174 <SIM_PDN_Activation+0x26c>)
 8002050:	4845      	ldr	r0, [pc, #276]	; (8002168 <SIM_PDN_Activation+0x260>)
 8002052:	f009 fb0b 	bl	800b66c <strstr>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d010      	beq.n	800207e <SIM_PDN_Activation+0x176>
 800205c:	4946      	ldr	r1, [pc, #280]	; (8002178 <SIM_PDN_Activation+0x270>)
 800205e:	4842      	ldr	r0, [pc, #264]	; (8002168 <SIM_PDN_Activation+0x260>)
 8002060:	f009 fb04 	bl	800b66c <strstr>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <SIM_PDN_Activation+0x176>
					// Set to correct command for activation; Clear buffer; Enable transmit next command
					commandIndex = 4;
 800206a:	4b36      	ldr	r3, [pc, #216]	; (8002144 <SIM_PDN_Activation+0x23c>)
 800206c:	2204      	movs	r2, #4
 800206e:	801a      	strh	r2, [r3, #0]
					clearBuffer = 1;
 8002070:	4b42      	ldr	r3, [pc, #264]	; (800217c <SIM_PDN_Activation+0x274>)
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]
					shouldTransmit = 1;
 8002076:	4b32      	ldr	r3, [pc, #200]	; (8002140 <SIM_PDN_Activation+0x238>)
 8002078:	2201      	movs	r2, #1
 800207a:	701a      	strb	r2, [r3, #0]
					simState = SIM_HTTP_BUILD;
					isStateChanged = 1;
					clearBuffer = 1;
					shouldTransmit = 1;
				}
				break;
 800207c:	e034      	b.n	80020e8 <SIM_PDN_Activation+0x1e0>
				else if ( (strstr((char*) serialRX_Buffer, "\r\n+CNACT: 0,1,")) && (strstr((char*) serialRX_Buffer, "\r\nOK\r\n"))) {
 800207e:	4940      	ldr	r1, [pc, #256]	; (8002180 <SIM_PDN_Activation+0x278>)
 8002080:	4839      	ldr	r0, [pc, #228]	; (8002168 <SIM_PDN_Activation+0x260>)
 8002082:	f009 faf3 	bl	800b66c <strstr>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d02d      	beq.n	80020e8 <SIM_PDN_Activation+0x1e0>
 800208c:	493a      	ldr	r1, [pc, #232]	; (8002178 <SIM_PDN_Activation+0x270>)
 800208e:	4836      	ldr	r0, [pc, #216]	; (8002168 <SIM_PDN_Activation+0x260>)
 8002090:	f009 faec 	bl	800b66c <strstr>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d026      	beq.n	80020e8 <SIM_PDN_Activation+0x1e0>
					simState = SIM_HTTP_BUILD;
 800209a:	4b3a      	ldr	r3, [pc, #232]	; (8002184 <SIM_PDN_Activation+0x27c>)
 800209c:	2203      	movs	r2, #3
 800209e:	701a      	strb	r2, [r3, #0]
					isStateChanged = 1;
 80020a0:	4b39      	ldr	r3, [pc, #228]	; (8002188 <SIM_PDN_Activation+0x280>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	701a      	strb	r2, [r3, #0]
					clearBuffer = 1;
 80020a6:	4b35      	ldr	r3, [pc, #212]	; (800217c <SIM_PDN_Activation+0x274>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
					shouldTransmit = 1;
 80020ac:	4b24      	ldr	r3, [pc, #144]	; (8002140 <SIM_PDN_Activation+0x238>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
				break;
 80020b2:	e019      	b.n	80020e8 <SIM_PDN_Activation+0x1e0>

			case 4:
				// +APP PDP: 0,ACTIVE\r\n - Activated
				if ( strstr((char*) serialRX_Buffer, "+APP PDP: 0,ACTIVE\r\n") ) {
 80020b4:	4935      	ldr	r1, [pc, #212]	; (800218c <SIM_PDN_Activation+0x284>)
 80020b6:	482c      	ldr	r0, [pc, #176]	; (8002168 <SIM_PDN_Activation+0x260>)
 80020b8:	f009 fad8 	bl	800b66c <strstr>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d014      	beq.n	80020ec <SIM_PDN_Activation+0x1e4>
					// Successful network activation
					// Change state; Clear buffer; Enable transmit
					simState = SIM_HTTP_BUILD;
 80020c2:	4b30      	ldr	r3, [pc, #192]	; (8002184 <SIM_PDN_Activation+0x27c>)
 80020c4:	2203      	movs	r2, #3
 80020c6:	701a      	strb	r2, [r3, #0]
					isStateChanged = 1;
 80020c8:	4b2f      	ldr	r3, [pc, #188]	; (8002188 <SIM_PDN_Activation+0x280>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
					clearBuffer = 1;
 80020ce:	4b2b      	ldr	r3, [pc, #172]	; (800217c <SIM_PDN_Activation+0x274>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
					shouldTransmit = 1;
 80020d4:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <SIM_PDN_Activation+0x238>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	701a      	strb	r2, [r3, #0]
				}
				break;
 80020da:	e007      	b.n	80020ec <SIM_PDN_Activation+0x1e4>

			default:
				break;
 80020dc:	bf00      	nop
 80020de:	e006      	b.n	80020ee <SIM_PDN_Activation+0x1e6>
				break;
 80020e0:	bf00      	nop
 80020e2:	e004      	b.n	80020ee <SIM_PDN_Activation+0x1e6>
				break;
 80020e4:	bf00      	nop
 80020e6:	e002      	b.n	80020ee <SIM_PDN_Activation+0x1e6>
				break;
 80020e8:	bf00      	nop
 80020ea:	e000      	b.n	80020ee <SIM_PDN_Activation+0x1e6>
				break;
 80020ec:	bf00      	nop
		}

	if (isIncrementCommand) {
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00e      	beq.n	8002112 <SIM_PDN_Activation+0x20a>
		++commandIndex; // Next command
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <SIM_PDN_Activation+0x23c>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	3301      	adds	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <SIM_PDN_Activation+0x23c>)
 8002100:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 8002102:	4b1e      	ldr	r3, [pc, #120]	; (800217c <SIM_PDN_Activation+0x274>)
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 8002108:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <SIM_PDN_Activation+0x238>)
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	71fb      	strb	r3, [r7, #7]
	}
	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 8002112:	79bb      	ldrb	r3, [r7, #6]
 8002114:	b29a      	uxth	r2, r3
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <SIM_PDN_Activation+0x23c>)
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	429a      	cmp	r2, r3
 800211e:	d304      	bcc.n	800212a <SIM_PDN_Activation+0x222>
 8002120:	4b19      	ldr	r3, [pc, #100]	; (8002188 <SIM_PDN_Activation+0x280>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d006      	beq.n	8002138 <SIM_PDN_Activation+0x230>
		commandIndex = 0;
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <SIM_PDN_Activation+0x23c>)
 800212c:	2200      	movs	r2, #0
 800212e:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 8002130:	4b15      	ldr	r3, [pc, #84]	; (8002188 <SIM_PDN_Activation+0x280>)
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
	}


	return;
 8002136:	bf00      	nop
 8002138:	bf00      	nop
}
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	2000000d 	.word	0x2000000d
 8002144:	20002400 	.word	0x20002400
 8002148:	0800f244 	.word	0x0800f244
 800214c:	2000239c 	.word	0x2000239c
 8002150:	200003a4 	.word	0x200003a4
 8002154:	0800f250 	.word	0x0800f250
 8002158:	0800f25c 	.word	0x0800f25c
 800215c:	0800f268 	.word	0x0800f268
 8002160:	0800f274 	.word	0x0800f274
 8002164:	0800f284 	.word	0x0800f284
 8002168:	20002404 	.word	0x20002404
 800216c:	0800f298 	.word	0x0800f298
 8002170:	0800f2c4 	.word	0x0800f2c4
 8002174:	0800f2e4 	.word	0x0800f2e4
 8002178:	0800f2fc 	.word	0x0800f2fc
 800217c:	20002500 	.word	0x20002500
 8002180:	0800f304 	.word	0x0800f304
 8002184:	2000000c 	.word	0x2000000c
 8002188:	20002402 	.word	0x20002402
 800218c:	0800f314 	.word	0x0800f314

08002190 <SIM_HTTP_Build>:

// nextState: State to go in next (POST or GET)
void SIM_HTTP_Build(simStateType nextState) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
	// 4: AT+SHCONF="HEADERLEN",350 - Set HTTP head length
	// 5: AT+SHCONN - HTTP build (retry if unsuccessful)
	// Change to either HTTP_MAKE_GET or to HTTP_MAKE_POST


	uint8_t maxCommand = 5;
 800219a:	2305      	movs	r3, #5
 800219c:	73bb      	strb	r3, [r7, #14]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 800219e:	4b9e      	ldr	r3, [pc, #632]	; (8002418 <SIM_HTTP_Build+0x288>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d07b      	beq.n	800229e <SIM_HTTP_Build+0x10e>
 80021a6:	7bbb      	ldrb	r3, [r7, #14]
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	4b9c      	ldr	r3, [pc, #624]	; (800241c <SIM_HTTP_Build+0x28c>)
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d374      	bcc.n	800229e <SIM_HTTP_Build+0x10e>
		// Next command should be transmitted

		switch (commandIndex) {
 80021b4:	4b99      	ldr	r3, [pc, #612]	; (800241c <SIM_HTTP_Build+0x28c>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2b05      	cmp	r3, #5
 80021bc:	d86b      	bhi.n	8002296 <SIM_HTTP_Build+0x106>
 80021be:	a201      	add	r2, pc, #4	; (adr r2, 80021c4 <SIM_HTTP_Build+0x34>)
 80021c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c4:	080021dd 	.word	0x080021dd
 80021c8:	080021fb 	.word	0x080021fb
 80021cc:	08002219 	.word	0x08002219
 80021d0:	08002237 	.word	0x08002237
 80021d4:	08002255 	.word	0x08002255
 80021d8:	08002273 	.word	0x08002273
			case 0:
				// Check if HTTP is connected
				sprintf(ATcommand, "AT+SHSTATE?\r\n");
 80021dc:	4990      	ldr	r1, [pc, #576]	; (8002420 <SIM_HTTP_Build+0x290>)
 80021de:	4891      	ldr	r0, [pc, #580]	; (8002424 <SIM_HTTP_Build+0x294>)
 80021e0:	f009 fa02 	bl	800b5e8 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 80021e4:	488f      	ldr	r0, [pc, #572]	; (8002424 <SIM_HTTP_Build+0x294>)
 80021e6:	f7fd fff3 	bl	80001d0 <strlen>
 80021ea:	4603      	mov	r3, r0
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	498c      	ldr	r1, [pc, #560]	; (8002424 <SIM_HTTP_Build+0x294>)
 80021f2:	488d      	ldr	r0, [pc, #564]	; (8002428 <SIM_HTTP_Build+0x298>)
 80021f4:	f006 f962 	bl	80084bc <HAL_UART_Transmit_IT>
				break;
 80021f8:	e04e      	b.n	8002298 <SIM_HTTP_Build+0x108>

			case 1:
				// Disconnect HTTP
				sprintf(ATcommand, "AT+SHDISC\r\n");
 80021fa:	498c      	ldr	r1, [pc, #560]	; (800242c <SIM_HTTP_Build+0x29c>)
 80021fc:	4889      	ldr	r0, [pc, #548]	; (8002424 <SIM_HTTP_Build+0x294>)
 80021fe:	f009 f9f3 	bl	800b5e8 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8002202:	4888      	ldr	r0, [pc, #544]	; (8002424 <SIM_HTTP_Build+0x294>)
 8002204:	f7fd ffe4 	bl	80001d0 <strlen>
 8002208:	4603      	mov	r3, r0
 800220a:	b29b      	uxth	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	4985      	ldr	r1, [pc, #532]	; (8002424 <SIM_HTTP_Build+0x294>)
 8002210:	4885      	ldr	r0, [pc, #532]	; (8002428 <SIM_HTTP_Build+0x298>)
 8002212:	f006 f953 	bl	80084bc <HAL_UART_Transmit_IT>
				break;
 8002216:	e03f      	b.n	8002298 <SIM_HTTP_Build+0x108>

			case 2:
				// Set up server URL
				sprintf(ATcommand, "AT+SHCONF=\"URL\",\"http://riversense.herokuapp.com\"\r\n");
 8002218:	4985      	ldr	r1, [pc, #532]	; (8002430 <SIM_HTTP_Build+0x2a0>)
 800221a:	4882      	ldr	r0, [pc, #520]	; (8002424 <SIM_HTTP_Build+0x294>)
 800221c:	f009 f9e4 	bl	800b5e8 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8002220:	4880      	ldr	r0, [pc, #512]	; (8002424 <SIM_HTTP_Build+0x294>)
 8002222:	f7fd ffd5 	bl	80001d0 <strlen>
 8002226:	4603      	mov	r3, r0
 8002228:	b29b      	uxth	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	497d      	ldr	r1, [pc, #500]	; (8002424 <SIM_HTTP_Build+0x294>)
 800222e:	487e      	ldr	r0, [pc, #504]	; (8002428 <SIM_HTTP_Build+0x298>)
 8002230:	f006 f944 	bl	80084bc <HAL_UART_Transmit_IT>
				break;
 8002234:	e030      	b.n	8002298 <SIM_HTTP_Build+0x108>

			case 3:
				// Set HTTP body length
				sprintf(ATcommand, "AT+SHCONF=\"BODYLEN\",1024\r\n");
 8002236:	497f      	ldr	r1, [pc, #508]	; (8002434 <SIM_HTTP_Build+0x2a4>)
 8002238:	487a      	ldr	r0, [pc, #488]	; (8002424 <SIM_HTTP_Build+0x294>)
 800223a:	f009 f9d5 	bl	800b5e8 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 800223e:	4879      	ldr	r0, [pc, #484]	; (8002424 <SIM_HTTP_Build+0x294>)
 8002240:	f7fd ffc6 	bl	80001d0 <strlen>
 8002244:	4603      	mov	r3, r0
 8002246:	b29b      	uxth	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	4976      	ldr	r1, [pc, #472]	; (8002424 <SIM_HTTP_Build+0x294>)
 800224c:	4876      	ldr	r0, [pc, #472]	; (8002428 <SIM_HTTP_Build+0x298>)
 800224e:	f006 f935 	bl	80084bc <HAL_UART_Transmit_IT>
				break;
 8002252:	e021      	b.n	8002298 <SIM_HTTP_Build+0x108>

			case 4:
				// Set HTTP head length
				sprintf(ATcommand, "AT+SHCONF=\"HEADERLEN\",350\r\n");
 8002254:	4978      	ldr	r1, [pc, #480]	; (8002438 <SIM_HTTP_Build+0x2a8>)
 8002256:	4873      	ldr	r0, [pc, #460]	; (8002424 <SIM_HTTP_Build+0x294>)
 8002258:	f009 f9c6 	bl	800b5e8 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 800225c:	4871      	ldr	r0, [pc, #452]	; (8002424 <SIM_HTTP_Build+0x294>)
 800225e:	f7fd ffb7 	bl	80001d0 <strlen>
 8002262:	4603      	mov	r3, r0
 8002264:	b29b      	uxth	r3, r3
 8002266:	461a      	mov	r2, r3
 8002268:	496e      	ldr	r1, [pc, #440]	; (8002424 <SIM_HTTP_Build+0x294>)
 800226a:	486f      	ldr	r0, [pc, #444]	; (8002428 <SIM_HTTP_Build+0x298>)
 800226c:	f006 f926 	bl	80084bc <HAL_UART_Transmit_IT>
				break;
 8002270:	e012      	b.n	8002298 <SIM_HTTP_Build+0x108>

			case 5:
				// HTTP connect (retry if unsuccessful)
				sprintf(ATcommand, "AT+SHCONN\r\n");
 8002272:	4972      	ldr	r1, [pc, #456]	; (800243c <SIM_HTTP_Build+0x2ac>)
 8002274:	486b      	ldr	r0, [pc, #428]	; (8002424 <SIM_HTTP_Build+0x294>)
 8002276:	f009 f9b7 	bl	800b5e8 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 800227a:	486a      	ldr	r0, [pc, #424]	; (8002424 <SIM_HTTP_Build+0x294>)
 800227c:	f7fd ffa8 	bl	80001d0 <strlen>
 8002280:	4603      	mov	r3, r0
 8002282:	b29b      	uxth	r3, r3
 8002284:	461a      	mov	r2, r3
 8002286:	4967      	ldr	r1, [pc, #412]	; (8002424 <SIM_HTTP_Build+0x294>)
 8002288:	4867      	ldr	r0, [pc, #412]	; (8002428 <SIM_HTTP_Build+0x298>)
 800228a:	f006 f917 	bl	80084bc <HAL_UART_Transmit_IT>
				isLD3_Flicker = 0; // TODO: remove later
 800228e:	4b6c      	ldr	r3, [pc, #432]	; (8002440 <SIM_HTTP_Build+0x2b0>)
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
				break;
 8002294:	e000      	b.n	8002298 <SIM_HTTP_Build+0x108>

			default:
				break;
 8002296:	bf00      	nop
		}

		shouldTransmit = 0; // no transmission until response has been read
 8002298:	4b5f      	ldr	r3, [pc, #380]	; (8002418 <SIM_HTTP_Build+0x288>)
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]

	} // if shouldTransmit
	// --------------------------------------------------------------- //

	// ---------------------------- RX ------------------------------- //
	uint8_t isIncrementCommand = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	73fb      	strb	r3, [r7, #15]

	switch (commandIndex) {
 80022a2:	4b5e      	ldr	r3, [pc, #376]	; (800241c <SIM_HTTP_Build+0x28c>)
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	2b05      	cmp	r3, #5
 80022aa:	d87e      	bhi.n	80023aa <SIM_HTTP_Build+0x21a>
 80022ac:	a201      	add	r2, pc, #4	; (adr r2, 80022b4 <SIM_HTTP_Build+0x124>)
 80022ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b2:	bf00      	nop
 80022b4:	080022cd 	.word	0x080022cd
 80022b8:	08002311 	.word	0x08002311
 80022bc:	08002325 	.word	0x08002325
 80022c0:	08002339 	.word	0x08002339
 80022c4:	0800234d 	.word	0x0800234d
 80022c8:	08002361 	.word	0x08002361
		case 0:
			// +SHSTATE: 0\r\n\r\nOK\r\n - HTTP disconnect state
			if (strstr((char*) serialRX_Buffer, "+SHSTATE: 0\r\n\r\nOK\r\n")) {
 80022cc:	495d      	ldr	r1, [pc, #372]	; (8002444 <SIM_HTTP_Build+0x2b4>)
 80022ce:	485e      	ldr	r0, [pc, #376]	; (8002448 <SIM_HTTP_Build+0x2b8>)
 80022d0:	f009 f9cc 	bl	800b66c <strstr>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d009      	beq.n	80022ee <SIM_HTTP_Build+0x15e>
				commandIndex = 2; // AT+SHCONF=... next command
 80022da:	4b50      	ldr	r3, [pc, #320]	; (800241c <SIM_HTTP_Build+0x28c>)
 80022dc:	2202      	movs	r2, #2
 80022de:	801a      	strh	r2, [r3, #0]
				clearBuffer = 1; // Clear buffer to receive next response
 80022e0:	4b5a      	ldr	r3, [pc, #360]	; (800244c <SIM_HTTP_Build+0x2bc>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1; // Can transmit next command
 80022e6:	4b4c      	ldr	r3, [pc, #304]	; (8002418 <SIM_HTTP_Build+0x288>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
			else if (strstr((char*) serialRX_Buffer, "+SHSTATE: 1\r\n\r\nOK\r\n")) {
				commandIndex = 1; // AT+SHDISC next command
				clearBuffer = 1; // Clear buffer to receive next response
				shouldTransmit = 1; // Can transmit next command
			}
			break;
 80022ec:	e05f      	b.n	80023ae <SIM_HTTP_Build+0x21e>
			else if (strstr((char*) serialRX_Buffer, "+SHSTATE: 1\r\n\r\nOK\r\n")) {
 80022ee:	4958      	ldr	r1, [pc, #352]	; (8002450 <SIM_HTTP_Build+0x2c0>)
 80022f0:	4855      	ldr	r0, [pc, #340]	; (8002448 <SIM_HTTP_Build+0x2b8>)
 80022f2:	f009 f9bb 	bl	800b66c <strstr>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d058      	beq.n	80023ae <SIM_HTTP_Build+0x21e>
				commandIndex = 1; // AT+SHDISC next command
 80022fc:	4b47      	ldr	r3, [pc, #284]	; (800241c <SIM_HTTP_Build+0x28c>)
 80022fe:	2201      	movs	r2, #1
 8002300:	801a      	strh	r2, [r3, #0]
				clearBuffer = 1; // Clear buffer to receive next response
 8002302:	4b52      	ldr	r3, [pc, #328]	; (800244c <SIM_HTTP_Build+0x2bc>)
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1; // Can transmit next command
 8002308:	4b43      	ldr	r3, [pc, #268]	; (8002418 <SIM_HTTP_Build+0x288>)
 800230a:	2201      	movs	r2, #1
 800230c:	701a      	strb	r2, [r3, #0]
			break;
 800230e:	e04e      	b.n	80023ae <SIM_HTTP_Build+0x21e>

		case 1:
			// OK should be received for successful disconnect
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8002310:	4950      	ldr	r1, [pc, #320]	; (8002454 <SIM_HTTP_Build+0x2c4>)
 8002312:	484d      	ldr	r0, [pc, #308]	; (8002448 <SIM_HTTP_Build+0x2b8>)
 8002314:	f009 f9aa 	bl	800b66c <strstr>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d049      	beq.n	80023b2 <SIM_HTTP_Build+0x222>
				isIncrementCommand = 1;
 800231e:	2301      	movs	r3, #1
 8002320:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8002322:	e046      	b.n	80023b2 <SIM_HTTP_Build+0x222>

		case 2:
			// OK should be received. URL setup
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8002324:	494b      	ldr	r1, [pc, #300]	; (8002454 <SIM_HTTP_Build+0x2c4>)
 8002326:	4848      	ldr	r0, [pc, #288]	; (8002448 <SIM_HTTP_Build+0x2b8>)
 8002328:	f009 f9a0 	bl	800b66c <strstr>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d041      	beq.n	80023b6 <SIM_HTTP_Build+0x226>
				isIncrementCommand = 1;
 8002332:	2301      	movs	r3, #1
 8002334:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8002336:	e03e      	b.n	80023b6 <SIM_HTTP_Build+0x226>

		case 3:
			// OK should be received. HTTP body length
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8002338:	4946      	ldr	r1, [pc, #280]	; (8002454 <SIM_HTTP_Build+0x2c4>)
 800233a:	4843      	ldr	r0, [pc, #268]	; (8002448 <SIM_HTTP_Build+0x2b8>)
 800233c:	f009 f996 	bl	800b66c <strstr>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d039      	beq.n	80023ba <SIM_HTTP_Build+0x22a>
				isIncrementCommand = 1;
 8002346:	2301      	movs	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800234a:	e036      	b.n	80023ba <SIM_HTTP_Build+0x22a>

		case 4:
			// OK should be received. HTTP head length
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 800234c:	4941      	ldr	r1, [pc, #260]	; (8002454 <SIM_HTTP_Build+0x2c4>)
 800234e:	483e      	ldr	r0, [pc, #248]	; (8002448 <SIM_HTTP_Build+0x2b8>)
 8002350:	f009 f98c 	bl	800b66c <strstr>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d031      	beq.n	80023be <SIM_HTTP_Build+0x22e>
				isIncrementCommand = 1; // Increment to go to next command
 800235a:	2301      	movs	r3, #1
 800235c:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800235e:	e02e      	b.n	80023be <SIM_HTTP_Build+0x22e>

		case 5:
			// Connection successful
			if (strstr((char*) serialRX_Buffer, "AT+SHCONN\r\r\nOK\r\n")) {
 8002360:	493d      	ldr	r1, [pc, #244]	; (8002458 <SIM_HTTP_Build+0x2c8>)
 8002362:	4839      	ldr	r0, [pc, #228]	; (8002448 <SIM_HTTP_Build+0x2b8>)
 8002364:	f009 f982 	bl	800b66c <strstr>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00f      	beq.n	800238e <SIM_HTTP_Build+0x1fe>
				simState = nextState;
 800236e:	4a3b      	ldr	r2, [pc, #236]	; (800245c <SIM_HTTP_Build+0x2cc>)
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	7013      	strb	r3, [r2, #0]
				isStateChanged = 1;
 8002374:	4b3a      	ldr	r3, [pc, #232]	; (8002460 <SIM_HTTP_Build+0x2d0>)
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1;
 800237a:	4b27      	ldr	r3, [pc, #156]	; (8002418 <SIM_HTTP_Build+0x288>)
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
				clearBuffer = 1;
 8002380:	4b32      	ldr	r3, [pc, #200]	; (800244c <SIM_HTTP_Build+0x2bc>)
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]

				isLD3_Flicker = 1; // TODO: remove later
 8002386:	4b2e      	ldr	r3, [pc, #184]	; (8002440 <SIM_HTTP_Build+0x2b0>)
 8002388:	2201      	movs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]
			else if (strstr((char*) serialRX_Buffer, "AT+SHCONN\r\r\nERROR\r\n")) {
				// Resends HTTP build command
				clearBuffer = 1;
				shouldTransmit = 1;
			}
			break;
 800238c:	e019      	b.n	80023c2 <SIM_HTTP_Build+0x232>
			else if (strstr((char*) serialRX_Buffer, "AT+SHCONN\r\r\nERROR\r\n")) {
 800238e:	4935      	ldr	r1, [pc, #212]	; (8002464 <SIM_HTTP_Build+0x2d4>)
 8002390:	482d      	ldr	r0, [pc, #180]	; (8002448 <SIM_HTTP_Build+0x2b8>)
 8002392:	f009 f96b 	bl	800b66c <strstr>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d012      	beq.n	80023c2 <SIM_HTTP_Build+0x232>
				clearBuffer = 1;
 800239c:	4b2b      	ldr	r3, [pc, #172]	; (800244c <SIM_HTTP_Build+0x2bc>)
 800239e:	2201      	movs	r2, #1
 80023a0:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1;
 80023a2:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <SIM_HTTP_Build+0x288>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	701a      	strb	r2, [r3, #0]
			break;
 80023a8:	e00b      	b.n	80023c2 <SIM_HTTP_Build+0x232>

		default:
			break;
 80023aa:	bf00      	nop
 80023ac:	e00a      	b.n	80023c4 <SIM_HTTP_Build+0x234>
			break;
 80023ae:	bf00      	nop
 80023b0:	e008      	b.n	80023c4 <SIM_HTTP_Build+0x234>
			break;
 80023b2:	bf00      	nop
 80023b4:	e006      	b.n	80023c4 <SIM_HTTP_Build+0x234>
			break;
 80023b6:	bf00      	nop
 80023b8:	e004      	b.n	80023c4 <SIM_HTTP_Build+0x234>
			break;
 80023ba:	bf00      	nop
 80023bc:	e002      	b.n	80023c4 <SIM_HTTP_Build+0x234>
			break;
 80023be:	bf00      	nop
 80023c0:	e000      	b.n	80023c4 <SIM_HTTP_Build+0x234>
			break;
 80023c2:	bf00      	nop
	}

	if (isIncrementCommand) {
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00e      	beq.n	80023e8 <SIM_HTTP_Build+0x258>
		++commandIndex; // Next command
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <SIM_HTTP_Build+0x28c>)
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3301      	adds	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <SIM_HTTP_Build+0x28c>)
 80023d6:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 80023d8:	4b1c      	ldr	r3, [pc, #112]	; (800244c <SIM_HTTP_Build+0x2bc>)
 80023da:	2201      	movs	r2, #1
 80023dc:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <SIM_HTTP_Build+0x288>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]
	}

	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 80023e8:	7bbb      	ldrb	r3, [r7, #14]
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <SIM_HTTP_Build+0x28c>)
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d304      	bcc.n	8002400 <SIM_HTTP_Build+0x270>
 80023f6:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <SIM_HTTP_Build+0x2d0>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d006      	beq.n	800240e <SIM_HTTP_Build+0x27e>
		commandIndex = 0;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <SIM_HTTP_Build+0x28c>)
 8002402:	2200      	movs	r2, #0
 8002404:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 8002406:	4b16      	ldr	r3, [pc, #88]	; (8002460 <SIM_HTTP_Build+0x2d0>)
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
	}


	return;
 800240c:	bf00      	nop
 800240e:	bf00      	nop
}
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	2000000d 	.word	0x2000000d
 800241c:	20002400 	.word	0x20002400
 8002420:	0800f32c 	.word	0x0800f32c
 8002424:	2000239c 	.word	0x2000239c
 8002428:	200003a4 	.word	0x200003a4
 800242c:	0800f33c 	.word	0x0800f33c
 8002430:	0800f348 	.word	0x0800f348
 8002434:	0800f37c 	.word	0x0800f37c
 8002438:	0800f398 	.word	0x0800f398
 800243c:	0800f3b4 	.word	0x0800f3b4
 8002440:	20000000 	.word	0x20000000
 8002444:	0800f3c0 	.word	0x0800f3c0
 8002448:	20002404 	.word	0x20002404
 800244c:	20002500 	.word	0x20002500
 8002450:	0800f3d4 	.word	0x0800f3d4
 8002454:	0800f1fc 	.word	0x0800f1fc
 8002458:	0800f3e8 	.word	0x0800f3e8
 800245c:	2000000c 	.word	0x2000000c
 8002460:	20002402 	.word	0x20002402
 8002464:	0800f3fc 	.word	0x0800f3fc

08002468 <SIM_HTTP_Make_Post>:

void SIM_HTTP_Make_Post(void) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
	// 8: AT+SHREQ="/api/update?API_KEY=9349da48-62ef-496b-831a-4720015ff72a",3 - Set request type is POST and send

	// 9: AT+SHREAD=0,2 // read http result (second variable dependant on result from SHREQ)
	// 10: AT+SHDISC - Disconnect HTTP connect

	uint8_t maxCommand = 10;
 800246e:	230a      	movs	r3, #10
 8002470:	73fb      	strb	r3, [r7, #15]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 8002472:	4bb4      	ldr	r3, [pc, #720]	; (8002744 <SIM_HTTP_Make_Post+0x2dc>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 80fa 	beq.w	8002670 <SIM_HTTP_Make_Post+0x208>
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	b29a      	uxth	r2, r3
 8002480:	4bb1      	ldr	r3, [pc, #708]	; (8002748 <SIM_HTTP_Make_Post+0x2e0>)
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	b29b      	uxth	r3, r3
 8002486:	429a      	cmp	r2, r3
 8002488:	f0c0 80f2 	bcc.w	8002670 <SIM_HTTP_Make_Post+0x208>
		// Next command should be transmitted

		switch (commandIndex) {
 800248c:	4bae      	ldr	r3, [pc, #696]	; (8002748 <SIM_HTTP_Make_Post+0x2e0>)
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	b29b      	uxth	r3, r3
 8002492:	2b0a      	cmp	r3, #10
 8002494:	f200 80de 	bhi.w	8002654 <SIM_HTTP_Make_Post+0x1ec>
 8002498:	a201      	add	r2, pc, #4	; (adr r2, 80024a0 <SIM_HTTP_Make_Post+0x38>)
 800249a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249e:	bf00      	nop
 80024a0:	080024cd 	.word	0x080024cd
 80024a4:	080024d7 	.word	0x080024d7
 80024a8:	080024e1 	.word	0x080024e1
 80024ac:	080024eb 	.word	0x080024eb
 80024b0:	080024f5 	.word	0x080024f5
 80024b4:	080024ff 	.word	0x080024ff
 80024b8:	08002509 	.word	0x08002509
 80024bc:	08002513 	.word	0x08002513
 80024c0:	0800261f 	.word	0x0800261f
 80024c4:	08002629 	.word	0x08002629
 80024c8:	0800264b 	.word	0x0800264b
			case 0:
				// Get HTTP header
				sprintf(ATcommand, "AT+SHSTATE?\r\n");
 80024cc:	499f      	ldr	r1, [pc, #636]	; (800274c <SIM_HTTP_Make_Post+0x2e4>)
 80024ce:	48a0      	ldr	r0, [pc, #640]	; (8002750 <SIM_HTTP_Make_Post+0x2e8>)
 80024d0:	f009 f88a 	bl	800b5e8 <siprintf>
				break;
 80024d4:	e0bf      	b.n	8002656 <SIM_HTTP_Make_Post+0x1ee>

			case 1:
				// Clear HTTP header
				sprintf(ATcommand, "AT+SHCHEAD\r\n");
 80024d6:	499f      	ldr	r1, [pc, #636]	; (8002754 <SIM_HTTP_Make_Post+0x2ec>)
 80024d8:	489d      	ldr	r0, [pc, #628]	; (8002750 <SIM_HTTP_Make_Post+0x2e8>)
 80024da:	f009 f885 	bl	800b5e8 <siprintf>
				break;
 80024de:	e0ba      	b.n	8002656 <SIM_HTTP_Make_Post+0x1ee>

			case 2:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Content-Type\",\"application/x-www-form-urlencoded\"\r\n");
 80024e0:	499d      	ldr	r1, [pc, #628]	; (8002758 <SIM_HTTP_Make_Post+0x2f0>)
 80024e2:	489b      	ldr	r0, [pc, #620]	; (8002750 <SIM_HTTP_Make_Post+0x2e8>)
 80024e4:	f009 f880 	bl	800b5e8 <siprintf>
				break;
 80024e8:	e0b5      	b.n	8002656 <SIM_HTTP_Make_Post+0x1ee>

			case 3:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Cache-control\",\"no-cache\"\r\n");
 80024ea:	499c      	ldr	r1, [pc, #624]	; (800275c <SIM_HTTP_Make_Post+0x2f4>)
 80024ec:	4898      	ldr	r0, [pc, #608]	; (8002750 <SIM_HTTP_Make_Post+0x2e8>)
 80024ee:	f009 f87b 	bl	800b5e8 <siprintf>
				break;
 80024f2:	e0b0      	b.n	8002656 <SIM_HTTP_Make_Post+0x1ee>

			case 4:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Connection\",\"keep-alive\"\r\n");
 80024f4:	499a      	ldr	r1, [pc, #616]	; (8002760 <SIM_HTTP_Make_Post+0x2f8>)
 80024f6:	4896      	ldr	r0, [pc, #600]	; (8002750 <SIM_HTTP_Make_Post+0x2e8>)
 80024f8:	f009 f876 	bl	800b5e8 <siprintf>
				break;
 80024fc:	e0ab      	b.n	8002656 <SIM_HTTP_Make_Post+0x1ee>

			case 5:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Accept\",\"*/*\"\r\n");
 80024fe:	4999      	ldr	r1, [pc, #612]	; (8002764 <SIM_HTTP_Make_Post+0x2fc>)
 8002500:	4893      	ldr	r0, [pc, #588]	; (8002750 <SIM_HTTP_Make_Post+0x2e8>)
 8002502:	f009 f871 	bl	800b5e8 <siprintf>
				break;
 8002506:	e0a6      	b.n	8002656 <SIM_HTTP_Make_Post+0x1ee>

			case 6:
				// Clear body content parameter
				sprintf(ATcommand, "AT+SHCPARA\r\n");
 8002508:	4997      	ldr	r1, [pc, #604]	; (8002768 <SIM_HTTP_Make_Post+0x300>)
 800250a:	4891      	ldr	r0, [pc, #580]	; (8002750 <SIM_HTTP_Make_Post+0x2e8>)
 800250c:	f009 f86c 	bl	800b5e8 <siprintf>
				break;
 8002510:	e0a1      	b.n	8002656 <SIM_HTTP_Make_Post+0x1ee>

			case 7:
				// Add body content parameter(s)
				memset(commandToSend, 0, sizeof(commandToSend)); // clear previous data
 8002512:	2264      	movs	r2, #100	; 0x64
 8002514:	2100      	movs	r1, #0
 8002516:	4895      	ldr	r0, [pc, #596]	; (800276c <SIM_HTTP_Make_Post+0x304>)
 8002518:	f008 f8ee 	bl	800a6f8 <memset>
				strcat(commandToSend, "AT+SHPARA=");
 800251c:	4893      	ldr	r0, [pc, #588]	; (800276c <SIM_HTTP_Make_Post+0x304>)
 800251e:	f7fd fe57 	bl	80001d0 <strlen>
 8002522:	4603      	mov	r3, r0
 8002524:	461a      	mov	r2, r3
 8002526:	4b91      	ldr	r3, [pc, #580]	; (800276c <SIM_HTTP_Make_Post+0x304>)
 8002528:	4413      	add	r3, r2
 800252a:	4991      	ldr	r1, [pc, #580]	; (8002770 <SIM_HTTP_Make_Post+0x308>)
 800252c:	461a      	mov	r2, r3
 800252e:	460b      	mov	r3, r1
 8002530:	cb03      	ldmia	r3!, {r0, r1}
 8002532:	6010      	str	r0, [r2, #0]
 8002534:	6051      	str	r1, [r2, #4]
 8002536:	8819      	ldrh	r1, [r3, #0]
 8002538:	789b      	ldrb	r3, [r3, #2]
 800253a:	8111      	strh	r1, [r2, #8]
 800253c:	7293      	strb	r3, [r2, #10]
				if (currentFormArr==0) {
 800253e:	4b8d      	ldr	r3, [pc, #564]	; (8002774 <SIM_HTTP_Make_Post+0x30c>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d12b      	bne.n	800259e <SIM_HTTP_Make_Post+0x136>
					strcat(commandToSend, (char*)(formsToPost_1 + formsToSendIndex));
 8002546:	4b8c      	ldr	r3, [pc, #560]	; (8002778 <SIM_HTTP_Make_Post+0x310>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	461a      	mov	r2, r3
 8002556:	4b89      	ldr	r3, [pc, #548]	; (800277c <SIM_HTTP_Make_Post+0x314>)
 8002558:	4413      	add	r3, r2
 800255a:	4619      	mov	r1, r3
 800255c:	4883      	ldr	r0, [pc, #524]	; (800276c <SIM_HTTP_Make_Post+0x304>)
 800255e:	f009 f863 	bl	800b628 <strcat>
					++formsToSendIndex;
 8002562:	4b85      	ldr	r3, [pc, #532]	; (8002778 <SIM_HTTP_Make_Post+0x310>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	3301      	adds	r3, #1
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4b83      	ldr	r3, [pc, #524]	; (8002778 <SIM_HTTP_Make_Post+0x310>)
 800256c:	701a      	strb	r2, [r3, #0]
					if (formsToSendIndex == formsToPost_1_Index-1) {
 800256e:	4b82      	ldr	r3, [pc, #520]	; (8002778 <SIM_HTTP_Make_Post+0x310>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	4b82      	ldr	r3, [pc, #520]	; (8002780 <SIM_HTTP_Make_Post+0x318>)
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	3b01      	subs	r3, #1
 800257a:	429a      	cmp	r2, r3
 800257c:	d13e      	bne.n	80025fc <SIM_HTTP_Make_Post+0x194>
						formsSentFlag = 1;
 800257e:	4b81      	ldr	r3, [pc, #516]	; (8002784 <SIM_HTTP_Make_Post+0x31c>)
 8002580:	2201      	movs	r2, #1
 8002582:	701a      	strb	r2, [r3, #0]
						formsToSendIndex = 0;
 8002584:	4b7c      	ldr	r3, [pc, #496]	; (8002778 <SIM_HTTP_Make_Post+0x310>)
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
						memset(formsToPost_1, 0, sizeof(formsToPost_1));
 800258a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800258e:	2100      	movs	r1, #0
 8002590:	487a      	ldr	r0, [pc, #488]	; (800277c <SIM_HTTP_Make_Post+0x314>)
 8002592:	f008 f8b1 	bl	800a6f8 <memset>
						formsToPost_1_Index = 0;
 8002596:	4b7a      	ldr	r3, [pc, #488]	; (8002780 <SIM_HTTP_Make_Post+0x318>)
 8002598:	2200      	movs	r2, #0
 800259a:	801a      	strh	r2, [r3, #0]
 800259c:	e02e      	b.n	80025fc <SIM_HTTP_Make_Post+0x194>
					}
				} else if (currentFormArr==1) {
 800259e:	4b75      	ldr	r3, [pc, #468]	; (8002774 <SIM_HTTP_Make_Post+0x30c>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d12a      	bne.n	80025fc <SIM_HTTP_Make_Post+0x194>
					++formsToSendIndex;
 80025a6:	4b74      	ldr	r3, [pc, #464]	; (8002778 <SIM_HTTP_Make_Post+0x310>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	3301      	adds	r3, #1
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4b72      	ldr	r3, [pc, #456]	; (8002778 <SIM_HTTP_Make_Post+0x310>)
 80025b0:	701a      	strb	r2, [r3, #0]
					strcat(commandToSend, (char*)(formsToPost_0 + formsToSendIndex));
 80025b2:	4b71      	ldr	r3, [pc, #452]	; (8002778 <SIM_HTTP_Make_Post+0x310>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b71      	ldr	r3, [pc, #452]	; (8002788 <SIM_HTTP_Make_Post+0x320>)
 80025c4:	4413      	add	r3, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	4868      	ldr	r0, [pc, #416]	; (800276c <SIM_HTTP_Make_Post+0x304>)
 80025ca:	f009 f82d 	bl	800b628 <strcat>
					if (formsToSendIndex == formsToPost_0_Index-1) {
 80025ce:	4b6a      	ldr	r3, [pc, #424]	; (8002778 <SIM_HTTP_Make_Post+0x310>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	4b6d      	ldr	r3, [pc, #436]	; (800278c <SIM_HTTP_Make_Post+0x324>)
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	3b01      	subs	r3, #1
 80025da:	429a      	cmp	r2, r3
 80025dc:	d10e      	bne.n	80025fc <SIM_HTTP_Make_Post+0x194>
						formsSentFlag = 1;
 80025de:	4b69      	ldr	r3, [pc, #420]	; (8002784 <SIM_HTTP_Make_Post+0x31c>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	701a      	strb	r2, [r3, #0]
						formsToSendIndex = 0;
 80025e4:	4b64      	ldr	r3, [pc, #400]	; (8002778 <SIM_HTTP_Make_Post+0x310>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
						memset(formsToPost_0, 0, sizeof(formsToPost_0)); // clear array data
 80025ea:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80025ee:	2100      	movs	r1, #0
 80025f0:	4865      	ldr	r0, [pc, #404]	; (8002788 <SIM_HTTP_Make_Post+0x320>)
 80025f2:	f008 f881 	bl	800a6f8 <memset>
						formsToPost_0_Index = 0; // Reset index of array
 80025f6:	4b65      	ldr	r3, [pc, #404]	; (800278c <SIM_HTTP_Make_Post+0x324>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	801a      	strh	r2, [r3, #0]
					}
				}
				strcat(commandToSend, "\r\n");
 80025fc:	485b      	ldr	r0, [pc, #364]	; (800276c <SIM_HTTP_Make_Post+0x304>)
 80025fe:	f7fd fde7 	bl	80001d0 <strlen>
 8002602:	4603      	mov	r3, r0
 8002604:	461a      	mov	r2, r3
 8002606:	4b59      	ldr	r3, [pc, #356]	; (800276c <SIM_HTTP_Make_Post+0x304>)
 8002608:	4413      	add	r3, r2
 800260a:	4a61      	ldr	r2, [pc, #388]	; (8002790 <SIM_HTTP_Make_Post+0x328>)
 800260c:	8811      	ldrh	r1, [r2, #0]
 800260e:	7892      	ldrb	r2, [r2, #2]
 8002610:	8019      	strh	r1, [r3, #0]
 8002612:	709a      	strb	r2, [r3, #2]
//				sprintf(ATcommand, "AT+SHPARA=\"batt_1\",\"2022-09-07 18:47:06,7.89\"\r\n");
				sprintf(ATcommand, commandToSend);
 8002614:	4955      	ldr	r1, [pc, #340]	; (800276c <SIM_HTTP_Make_Post+0x304>)
 8002616:	484e      	ldr	r0, [pc, #312]	; (8002750 <SIM_HTTP_Make_Post+0x2e8>)
 8002618:	f008 ffe6 	bl	800b5e8 <siprintf>
				break;
 800261c:	e01b      	b.n	8002656 <SIM_HTTP_Make_Post+0x1ee>

			case 8:
				// Add header content
//				sprintf(ATcommand, "AT+SHREQ=\"/update?api_key=1EC4ZVYTHEJUAAIO&field1=60\",3\r\nAT\r\n");
				sprintf(ATcommand, "AT+SHREQ=\"/api/update?API_KEY=9349da48-62ef-496b-831a-4720015ff72a\",3\r\n");
 800261e:	495d      	ldr	r1, [pc, #372]	; (8002794 <SIM_HTTP_Make_Post+0x32c>)
 8002620:	484b      	ldr	r0, [pc, #300]	; (8002750 <SIM_HTTP_Make_Post+0x2e8>)
 8002622:	f008 ffe1 	bl	800b5e8 <siprintf>
				break;
 8002626:	e016      	b.n	8002656 <SIM_HTTP_Make_Post+0x1ee>

			case 9: ;
				// Read data after request
				char d[4];
				itoa(dataLengthVal, d, 10);
 8002628:	4b5b      	ldr	r3, [pc, #364]	; (8002798 <SIM_HTTP_Make_Post+0x330>)
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f107 0308 	add.w	r3, r7, #8
 8002632:	220a      	movs	r2, #10
 8002634:	4619      	mov	r1, r3
 8002636:	f008 f855 	bl	800a6e4 <itoa>
				sprintf(ATcommand, "AT+SHREAD=0,%s\r\n", d);
 800263a:	f107 0308 	add.w	r3, r7, #8
 800263e:	461a      	mov	r2, r3
 8002640:	4956      	ldr	r1, [pc, #344]	; (800279c <SIM_HTTP_Make_Post+0x334>)
 8002642:	4843      	ldr	r0, [pc, #268]	; (8002750 <SIM_HTTP_Make_Post+0x2e8>)
 8002644:	f008 ffd0 	bl	800b5e8 <siprintf>
				break;
 8002648:	e005      	b.n	8002656 <SIM_HTTP_Make_Post+0x1ee>

			case 10:
				// Disconnect HTTP
				sprintf(ATcommand, "AT+SHDISC\r\n");
 800264a:	4955      	ldr	r1, [pc, #340]	; (80027a0 <SIM_HTTP_Make_Post+0x338>)
 800264c:	4840      	ldr	r0, [pc, #256]	; (8002750 <SIM_HTTP_Make_Post+0x2e8>)
 800264e:	f008 ffcb 	bl	800b5e8 <siprintf>
				break;
 8002652:	e000      	b.n	8002656 <SIM_HTTP_Make_Post+0x1ee>

			default:
				break;
 8002654:	bf00      	nop
		}

		HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand)); // Transmit AT command
 8002656:	483e      	ldr	r0, [pc, #248]	; (8002750 <SIM_HTTP_Make_Post+0x2e8>)
 8002658:	f7fd fdba 	bl	80001d0 <strlen>
 800265c:	4603      	mov	r3, r0
 800265e:	b29b      	uxth	r3, r3
 8002660:	461a      	mov	r2, r3
 8002662:	493b      	ldr	r1, [pc, #236]	; (8002750 <SIM_HTTP_Make_Post+0x2e8>)
 8002664:	484f      	ldr	r0, [pc, #316]	; (80027a4 <SIM_HTTP_Make_Post+0x33c>)
 8002666:	f005 ff29 	bl	80084bc <HAL_UART_Transmit_IT>
		shouldTransmit = 0; // no transmission until response has been read
 800266a:	4b36      	ldr	r3, [pc, #216]	; (8002744 <SIM_HTTP_Make_Post+0x2dc>)
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]

	} // if shouldTransmit
	// --------------------------------------------------------------- //

	// ---------------------------- RX ------------------------------- //
	uint8_t isIncrementCommand = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	75fb      	strb	r3, [r7, #23]

	switch (commandIndex) {
 8002674:	4b34      	ldr	r3, [pc, #208]	; (8002748 <SIM_HTTP_Make_Post+0x2e0>)
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b0a      	cmp	r3, #10
 800267c:	f200 814c 	bhi.w	8002918 <SIM_HTTP_Make_Post+0x4b0>
 8002680:	a201      	add	r2, pc, #4	; (adr r2, 8002688 <SIM_HTTP_Make_Post+0x220>)
 8002682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002686:	bf00      	nop
 8002688:	080026b5 	.word	0x080026b5
 800268c:	08002701 	.word	0x08002701
 8002690:	08002717 	.word	0x08002717
 8002694:	0800272d 	.word	0x0800272d
 8002698:	080027c5 	.word	0x080027c5
 800269c:	080027db 	.word	0x080027db
 80026a0:	080027f1 	.word	0x080027f1
 80026a4:	08002807 	.word	0x08002807
 80026a8:	08002841 	.word	0x08002841
 80026ac:	080028c9 	.word	0x080028c9
 80026b0:	080028e7 	.word	0x080028e7
		case 0:
			// +SHSTATE: 0\r\n\r\nOK\r\n - HTTP disconnect state
			if (strstr((char*) serialRX_Buffer, "+SHSTATE: 0\r\n\r\nOK\r\n")) {
 80026b4:	493c      	ldr	r1, [pc, #240]	; (80027a8 <SIM_HTTP_Make_Post+0x340>)
 80026b6:	483d      	ldr	r0, [pc, #244]	; (80027ac <SIM_HTTP_Make_Post+0x344>)
 80026b8:	f008 ffd8 	bl	800b66c <strstr>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00c      	beq.n	80026dc <SIM_HTTP_Make_Post+0x274>
				// If disconnected, build HTTP post
				simState = SIM_HTTP_BUILD;
 80026c2:	4b3b      	ldr	r3, [pc, #236]	; (80027b0 <SIM_HTTP_Make_Post+0x348>)
 80026c4:	2203      	movs	r2, #3
 80026c6:	701a      	strb	r2, [r3, #0]
				isStateChanged = 1;
 80026c8:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <SIM_HTTP_Make_Post+0x34c>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
				clearBuffer = 1; // Clear buffer to receive next response
 80026ce:	4b3a      	ldr	r3, [pc, #232]	; (80027b8 <SIM_HTTP_Make_Post+0x350>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1; // Can transmit next command
 80026d4:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <SIM_HTTP_Make_Post+0x2dc>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
			else if (strstr((char*) serialRX_Buffer, "+SHSTATE: 1\r\n\r\nOK\r\n")) {
				commandIndex = 1; // AT+SHDISC next command
				clearBuffer = 1; // Clear buffer to receive next response
				shouldTransmit = 1; // Can transmit next command
			}
			break;
 80026da:	e11f      	b.n	800291c <SIM_HTTP_Make_Post+0x4b4>
			else if (strstr((char*) serialRX_Buffer, "+SHSTATE: 1\r\n\r\nOK\r\n")) {
 80026dc:	4937      	ldr	r1, [pc, #220]	; (80027bc <SIM_HTTP_Make_Post+0x354>)
 80026de:	4833      	ldr	r0, [pc, #204]	; (80027ac <SIM_HTTP_Make_Post+0x344>)
 80026e0:	f008 ffc4 	bl	800b66c <strstr>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8118 	beq.w	800291c <SIM_HTTP_Make_Post+0x4b4>
				commandIndex = 1; // AT+SHDISC next command
 80026ec:	4b16      	ldr	r3, [pc, #88]	; (8002748 <SIM_HTTP_Make_Post+0x2e0>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	801a      	strh	r2, [r3, #0]
				clearBuffer = 1; // Clear buffer to receive next response
 80026f2:	4b31      	ldr	r3, [pc, #196]	; (80027b8 <SIM_HTTP_Make_Post+0x350>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1; // Can transmit next command
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <SIM_HTTP_Make_Post+0x2dc>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]
			break;
 80026fe:	e10d      	b.n	800291c <SIM_HTTP_Make_Post+0x4b4>

		case 1:
			// OK received if header cleared
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8002700:	492f      	ldr	r1, [pc, #188]	; (80027c0 <SIM_HTTP_Make_Post+0x358>)
 8002702:	482a      	ldr	r0, [pc, #168]	; (80027ac <SIM_HTTP_Make_Post+0x344>)
 8002704:	f008 ffb2 	bl	800b66c <strstr>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 8108 	beq.w	8002920 <SIM_HTTP_Make_Post+0x4b8>
				isIncrementCommand = 1;
 8002710:	2301      	movs	r3, #1
 8002712:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8002714:	e104      	b.n	8002920 <SIM_HTTP_Make_Post+0x4b8>

		case 2:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8002716:	492a      	ldr	r1, [pc, #168]	; (80027c0 <SIM_HTTP_Make_Post+0x358>)
 8002718:	4824      	ldr	r0, [pc, #144]	; (80027ac <SIM_HTTP_Make_Post+0x344>)
 800271a:	f008 ffa7 	bl	800b66c <strstr>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80ff 	beq.w	8002924 <SIM_HTTP_Make_Post+0x4bc>
				isIncrementCommand = 1;
 8002726:	2301      	movs	r3, #1
 8002728:	75fb      	strb	r3, [r7, #23]
			}
			break;
 800272a:	e0fb      	b.n	8002924 <SIM_HTTP_Make_Post+0x4bc>

		case 3:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 800272c:	4924      	ldr	r1, [pc, #144]	; (80027c0 <SIM_HTTP_Make_Post+0x358>)
 800272e:	481f      	ldr	r0, [pc, #124]	; (80027ac <SIM_HTTP_Make_Post+0x344>)
 8002730:	f008 ff9c 	bl	800b66c <strstr>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 80f6 	beq.w	8002928 <SIM_HTTP_Make_Post+0x4c0>
				isIncrementCommand = 1;
 800273c:	2301      	movs	r3, #1
 800273e:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8002740:	e0f2      	b.n	8002928 <SIM_HTTP_Make_Post+0x4c0>
 8002742:	bf00      	nop
 8002744:	2000000d 	.word	0x2000000d
 8002748:	20002400 	.word	0x20002400
 800274c:	0800f32c 	.word	0x0800f32c
 8002750:	2000239c 	.word	0x2000239c
 8002754:	0800f410 	.word	0x0800f410
 8002758:	0800f420 	.word	0x0800f420
 800275c:	0800f460 	.word	0x0800f460
 8002760:	0800f488 	.word	0x0800f488
 8002764:	0800f4b0 	.word	0x0800f4b0
 8002768:	0800f4cc 	.word	0x0800f4cc
 800276c:	20002504 	.word	0x20002504
 8002770:	0800f4dc 	.word	0x0800f4dc
 8002774:	20002370 	.word	0x20002370
 8002778:	20002605 	.word	0x20002605
 800277c:	200013cc 	.word	0x200013cc
 8002780:	2000236e 	.word	0x2000236e
 8002784:	20002604 	.word	0x20002604
 8002788:	2000042c 	.word	0x2000042c
 800278c:	2000236c 	.word	0x2000236c
 8002790:	0800f4e8 	.word	0x0800f4e8
 8002794:	0800f4ec 	.word	0x0800f4ec
 8002798:	2000259c 	.word	0x2000259c
 800279c:	0800f534 	.word	0x0800f534
 80027a0:	0800f33c 	.word	0x0800f33c
 80027a4:	200003a4 	.word	0x200003a4
 80027a8:	0800f3c0 	.word	0x0800f3c0
 80027ac:	20002404 	.word	0x20002404
 80027b0:	2000000c 	.word	0x2000000c
 80027b4:	20002402 	.word	0x20002402
 80027b8:	20002500 	.word	0x20002500
 80027bc:	0800f3d4 	.word	0x0800f3d4
 80027c0:	0800f1fc 	.word	0x0800f1fc

		case 4:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 80027c4:	4974      	ldr	r1, [pc, #464]	; (8002998 <SIM_HTTP_Make_Post+0x530>)
 80027c6:	4875      	ldr	r0, [pc, #468]	; (800299c <SIM_HTTP_Make_Post+0x534>)
 80027c8:	f008 ff50 	bl	800b66c <strstr>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 80ac 	beq.w	800292c <SIM_HTTP_Make_Post+0x4c4>
				isIncrementCommand = 1;
 80027d4:	2301      	movs	r3, #1
 80027d6:	75fb      	strb	r3, [r7, #23]
			}
			break;
 80027d8:	e0a8      	b.n	800292c <SIM_HTTP_Make_Post+0x4c4>

		case 5:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 80027da:	496f      	ldr	r1, [pc, #444]	; (8002998 <SIM_HTTP_Make_Post+0x530>)
 80027dc:	486f      	ldr	r0, [pc, #444]	; (800299c <SIM_HTTP_Make_Post+0x534>)
 80027de:	f008 ff45 	bl	800b66c <strstr>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80a3 	beq.w	8002930 <SIM_HTTP_Make_Post+0x4c8>
				isIncrementCommand = 1;
 80027ea:	2301      	movs	r3, #1
 80027ec:	75fb      	strb	r3, [r7, #23]
			}
			break;
 80027ee:	e09f      	b.n	8002930 <SIM_HTTP_Make_Post+0x4c8>

		case 6:
			// OK received if body content parameter has been cleared
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 80027f0:	4969      	ldr	r1, [pc, #420]	; (8002998 <SIM_HTTP_Make_Post+0x530>)
 80027f2:	486a      	ldr	r0, [pc, #424]	; (800299c <SIM_HTTP_Make_Post+0x534>)
 80027f4:	f008 ff3a 	bl	800b66c <strstr>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 809a 	beq.w	8002934 <SIM_HTTP_Make_Post+0x4cc>
				isIncrementCommand = 1;
 8002800:	2301      	movs	r3, #1
 8002802:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8002804:	e096      	b.n	8002934 <SIM_HTTP_Make_Post+0x4cc>

		case 7:
			// OK received if body content parameter is added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8002806:	4964      	ldr	r1, [pc, #400]	; (8002998 <SIM_HTTP_Make_Post+0x530>)
 8002808:	4864      	ldr	r0, [pc, #400]	; (800299c <SIM_HTTP_Make_Post+0x534>)
 800280a:	f008 ff2f 	bl	800b66c <strstr>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 8091 	beq.w	8002938 <SIM_HTTP_Make_Post+0x4d0>
				if (!formsSentFlag) {
 8002816:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <SIM_HTTP_Make_Post+0x538>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d109      	bne.n	8002834 <SIM_HTTP_Make_Post+0x3cc>
					clearBuffer = 1;
 8002820:	4b60      	ldr	r3, [pc, #384]	; (80029a4 <SIM_HTTP_Make_Post+0x53c>)
 8002822:	2201      	movs	r2, #1
 8002824:	701a      	strb	r2, [r3, #0]
					shouldTransmit = 1;
 8002826:	4b60      	ldr	r3, [pc, #384]	; (80029a8 <SIM_HTTP_Make_Post+0x540>)
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
					commandIndex = 7;
 800282c:	4b5f      	ldr	r3, [pc, #380]	; (80029ac <SIM_HTTP_Make_Post+0x544>)
 800282e:	2207      	movs	r2, #7
 8002830:	801a      	strh	r2, [r3, #0]
					isIncrementCommand = 1;
//					testFormsSentFlag = 0;
					formsSentFlag = 0;
				}
			}
			break;
 8002832:	e081      	b.n	8002938 <SIM_HTTP_Make_Post+0x4d0>
					isIncrementCommand = 1;
 8002834:	2301      	movs	r3, #1
 8002836:	75fb      	strb	r3, [r7, #23]
					formsSentFlag = 0;
 8002838:	4b59      	ldr	r3, [pc, #356]	; (80029a0 <SIM_HTTP_Make_Post+0x538>)
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
			break;
 800283e:	e07b      	b.n	8002938 <SIM_HTTP_Make_Post+0x4d0>

		case 8:
			if (strstr((char*) serialRX_Buffer, "+SHREQ: \"POST\"")) {
 8002840:	495b      	ldr	r1, [pc, #364]	; (80029b0 <SIM_HTTP_Make_Post+0x548>)
 8002842:	4856      	ldr	r0, [pc, #344]	; (800299c <SIM_HTTP_Make_Post+0x534>)
 8002844:	f008 ff12 	bl	800b66c <strstr>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d076      	beq.n	800293c <SIM_HTTP_Make_Post+0x4d4>
				copySubstringFromMatch(responseSubstring, (char*)serialRX_Buffer, "+SHREQ: \"POST\"");
 800284e:	4a58      	ldr	r2, [pc, #352]	; (80029b0 <SIM_HTTP_Make_Post+0x548>)
 8002850:	4952      	ldr	r1, [pc, #328]	; (800299c <SIM_HTTP_Make_Post+0x534>)
 8002852:	4858      	ldr	r0, [pc, #352]	; (80029b4 <SIM_HTTP_Make_Post+0x54c>)
 8002854:	f000 fb14 	bl	8002e80 <copySubstringFromMatch>
				// +SHREQ: \"POST\",200,2\r\n
				uint8_t splittedValIndex = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	75bb      	strb	r3, [r7, #22]
				uint16_t splittedVal[4] = {0};
 800285c:	463b      	mov	r3, r7
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	605a      	str	r2, [r3, #4]
				char* token;
				if (strstr(responseSubstring, "\r\n")) { // response has finished transmitting
 8002864:	4954      	ldr	r1, [pc, #336]	; (80029b8 <SIM_HTTP_Make_Post+0x550>)
 8002866:	4853      	ldr	r0, [pc, #332]	; (80029b4 <SIM_HTTP_Make_Post+0x54c>)
 8002868:	f008 ff00 	bl	800b66c <strstr>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d064      	beq.n	800293c <SIM_HTTP_Make_Post+0x4d4>
					token = strtok(responseSubstring, ",");
 8002872:	4952      	ldr	r1, [pc, #328]	; (80029bc <SIM_HTTP_Make_Post+0x554>)
 8002874:	484f      	ldr	r0, [pc, #316]	; (80029b4 <SIM_HTTP_Make_Post+0x54c>)
 8002876:	f009 fd37 	bl	800c2e8 <strtok>
 800287a:	6138      	str	r0, [r7, #16]
					while (token != NULL  && splittedValIndex<4) {
 800287c:	e012      	b.n	80028a4 <SIM_HTTP_Make_Post+0x43c>
						splittedVal[++splittedValIndex] = atoi(token);
 800287e:	6938      	ldr	r0, [r7, #16]
 8002880:	f007 fee9 	bl	800a656 <atoi>
 8002884:	4602      	mov	r2, r0
 8002886:	7dbb      	ldrb	r3, [r7, #22]
 8002888:	3301      	adds	r3, #1
 800288a:	75bb      	strb	r3, [r7, #22]
 800288c:	7dbb      	ldrb	r3, [r7, #22]
 800288e:	b292      	uxth	r2, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	3318      	adds	r3, #24
 8002894:	443b      	add	r3, r7
 8002896:	f823 2c18 	strh.w	r2, [r3, #-24]
						token = strtok(NULL, ",");
 800289a:	4948      	ldr	r1, [pc, #288]	; (80029bc <SIM_HTTP_Make_Post+0x554>)
 800289c:	2000      	movs	r0, #0
 800289e:	f009 fd23 	bl	800c2e8 <strtok>
 80028a2:	6138      	str	r0, [r7, #16]
					while (token != NULL  && splittedValIndex<4) {
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <SIM_HTTP_Make_Post+0x448>
 80028aa:	7dbb      	ldrb	r3, [r7, #22]
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d9e6      	bls.n	800287e <SIM_HTTP_Make_Post+0x416>
					}
					statusCodeVal = splittedVal[2];
 80028b0:	88ba      	ldrh	r2, [r7, #4]
 80028b2:	4b43      	ldr	r3, [pc, #268]	; (80029c0 <SIM_HTTP_Make_Post+0x558>)
 80028b4:	801a      	strh	r2, [r3, #0]
					dataLengthVal = splittedVal[3];
 80028b6:	88fa      	ldrh	r2, [r7, #6]
 80028b8:	4b42      	ldr	r3, [pc, #264]	; (80029c4 <SIM_HTTP_Make_Post+0x55c>)
 80028ba:	801a      	strh	r2, [r3, #0]
					isIncrementCommand = 1;
 80028bc:	2301      	movs	r3, #1
 80028be:	75fb      	strb	r3, [r7, #23]
					isLD3_Flicker = 0; // TODO: remove later
 80028c0:	4b41      	ldr	r3, [pc, #260]	; (80029c8 <SIM_HTTP_Make_Post+0x560>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]
				}

			}
			break;
 80028c6:	e039      	b.n	800293c <SIM_HTTP_Make_Post+0x4d4>

		case 9:
			// All data has been received
			if (strstr((char*) serialRX_Buffer, "}\n\r\n")) {
 80028c8:	4940      	ldr	r1, [pc, #256]	; (80029cc <SIM_HTTP_Make_Post+0x564>)
 80028ca:	4834      	ldr	r0, [pc, #208]	; (800299c <SIM_HTTP_Make_Post+0x534>)
 80028cc:	f008 fece 	bl	800b66c <strstr>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d034      	beq.n	8002940 <SIM_HTTP_Make_Post+0x4d8>
				// Set flag
				copySubstringFromMatch(SHREAD_Data, (char*)serialRX_Buffer, "+SHREAD:");
 80028d6:	4a3e      	ldr	r2, [pc, #248]	; (80029d0 <SIM_HTTP_Make_Post+0x568>)
 80028d8:	4930      	ldr	r1, [pc, #192]	; (800299c <SIM_HTTP_Make_Post+0x534>)
 80028da:	483e      	ldr	r0, [pc, #248]	; (80029d4 <SIM_HTTP_Make_Post+0x56c>)
 80028dc:	f000 fad0 	bl	8002e80 <copySubstringFromMatch>
				isIncrementCommand = 1;
 80028e0:	2301      	movs	r3, #1
 80028e2:	75fb      	strb	r3, [r7, #23]
			}
			break;
 80028e4:	e02c      	b.n	8002940 <SIM_HTTP_Make_Post+0x4d8>

		case 10:
			// OK received. Successful disconnect.
			if (strstr((char*) serialRX_Buffer, "+SHDISC\r\r\nOK\r\n")) {
 80028e6:	493c      	ldr	r1, [pc, #240]	; (80029d8 <SIM_HTTP_Make_Post+0x570>)
 80028e8:	482c      	ldr	r0, [pc, #176]	; (800299c <SIM_HTTP_Make_Post+0x534>)
 80028ea:	f008 febf 	bl	800b66c <strstr>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d027      	beq.n	8002944 <SIM_HTTP_Make_Post+0x4dc>
				isIncrementCommand = 1;
 80028f4:	2301      	movs	r3, #1
 80028f6:	75fb      	strb	r3, [r7, #23]
				simState = SIM_STANDBY;
 80028f8:	4b38      	ldr	r3, [pc, #224]	; (80029dc <SIM_HTTP_Make_Post+0x574>)
 80028fa:	2207      	movs	r2, #7
 80028fc:	701a      	strb	r2, [r3, #0]
				isStateChanged = 1;
 80028fe:	4b38      	ldr	r3, [pc, #224]	; (80029e0 <SIM_HTTP_Make_Post+0x578>)
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
				isLD3_Flicker = 1; // TODO: remove later
 8002904:	4b30      	ldr	r3, [pc, #192]	; (80029c8 <SIM_HTTP_Make_Post+0x560>)
 8002906:	2201      	movs	r2, #1
 8002908:	701a      	strb	r2, [r3, #0]
				// Reset flags
				make_post_flag = 0;
 800290a:	4b36      	ldr	r3, [pc, #216]	; (80029e4 <SIM_HTTP_Make_Post+0x57c>)
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]
				sim_flag = 0;
 8002910:	4b35      	ldr	r3, [pc, #212]	; (80029e8 <SIM_HTTP_Make_Post+0x580>)
 8002912:	2200      	movs	r2, #0
 8002914:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002916:	e015      	b.n	8002944 <SIM_HTTP_Make_Post+0x4dc>

		default:
			break;
 8002918:	bf00      	nop
 800291a:	e014      	b.n	8002946 <SIM_HTTP_Make_Post+0x4de>
			break;
 800291c:	bf00      	nop
 800291e:	e012      	b.n	8002946 <SIM_HTTP_Make_Post+0x4de>
			break;
 8002920:	bf00      	nop
 8002922:	e010      	b.n	8002946 <SIM_HTTP_Make_Post+0x4de>
			break;
 8002924:	bf00      	nop
 8002926:	e00e      	b.n	8002946 <SIM_HTTP_Make_Post+0x4de>
			break;
 8002928:	bf00      	nop
 800292a:	e00c      	b.n	8002946 <SIM_HTTP_Make_Post+0x4de>
			break;
 800292c:	bf00      	nop
 800292e:	e00a      	b.n	8002946 <SIM_HTTP_Make_Post+0x4de>
			break;
 8002930:	bf00      	nop
 8002932:	e008      	b.n	8002946 <SIM_HTTP_Make_Post+0x4de>
			break;
 8002934:	bf00      	nop
 8002936:	e006      	b.n	8002946 <SIM_HTTP_Make_Post+0x4de>
			break;
 8002938:	bf00      	nop
 800293a:	e004      	b.n	8002946 <SIM_HTTP_Make_Post+0x4de>
			break;
 800293c:	bf00      	nop
 800293e:	e002      	b.n	8002946 <SIM_HTTP_Make_Post+0x4de>
			break;
 8002940:	bf00      	nop
 8002942:	e000      	b.n	8002946 <SIM_HTTP_Make_Post+0x4de>
			break;
 8002944:	bf00      	nop
	}

	if (isIncrementCommand) {
 8002946:	7dfb      	ldrb	r3, [r7, #23]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00e      	beq.n	800296a <SIM_HTTP_Make_Post+0x502>
		++commandIndex; // Next command
 800294c:	4b17      	ldr	r3, [pc, #92]	; (80029ac <SIM_HTTP_Make_Post+0x544>)
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	b29b      	uxth	r3, r3
 8002952:	3301      	adds	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <SIM_HTTP_Make_Post+0x544>)
 8002958:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 800295a:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <SIM_HTTP_Make_Post+0x53c>)
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 8002960:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <SIM_HTTP_Make_Post+0x540>)
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 8002966:	2300      	movs	r3, #0
 8002968:	75fb      	strb	r3, [r7, #23]
	}

	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	b29a      	uxth	r2, r3
 800296e:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <SIM_HTTP_Make_Post+0x544>)
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	b29b      	uxth	r3, r3
 8002974:	429a      	cmp	r2, r3
 8002976:	d304      	bcc.n	8002982 <SIM_HTTP_Make_Post+0x51a>
 8002978:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <SIM_HTTP_Make_Post+0x578>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d006      	beq.n	8002990 <SIM_HTTP_Make_Post+0x528>
		commandIndex = 0;
 8002982:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <SIM_HTTP_Make_Post+0x544>)
 8002984:	2200      	movs	r2, #0
 8002986:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 8002988:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <SIM_HTTP_Make_Post+0x578>)
 800298a:	2200      	movs	r2, #0
 800298c:	701a      	strb	r2, [r3, #0]
	}


	return;
 800298e:	bf00      	nop
 8002990:	bf00      	nop
}
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	0800f1fc 	.word	0x0800f1fc
 800299c:	20002404 	.word	0x20002404
 80029a0:	20002604 	.word	0x20002604
 80029a4:	20002500 	.word	0x20002500
 80029a8:	2000000d 	.word	0x2000000d
 80029ac:	20002400 	.word	0x20002400
 80029b0:	0800f548 	.word	0x0800f548
 80029b4:	20002568 	.word	0x20002568
 80029b8:	0800f4e8 	.word	0x0800f4e8
 80029bc:	0800f558 	.word	0x0800f558
 80029c0:	2000259a 	.word	0x2000259a
 80029c4:	2000259c 	.word	0x2000259c
 80029c8:	20000000 	.word	0x20000000
 80029cc:	0800f55c 	.word	0x0800f55c
 80029d0:	0800f564 	.word	0x0800f564
 80029d4:	200025a0 	.word	0x200025a0
 80029d8:	0800f570 	.word	0x0800f570
 80029dc:	2000000c 	.word	0x2000000c
 80029e0:	20002402 	.word	0x20002402
 80029e4:	2000042a 	.word	0x2000042a
 80029e8:	20000429 	.word	0x20000429

080029ec <SIM_HTTP_Make_Get>:



void SIM_HTTP_Make_Get(void) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
	// 5: AT+SHAHEAD="Accept","*/*"
	// 6: AT+SHREQ="/api/time?API_KEY=9349da48-62ef-496b-831a-4720015ff72a",1
	// 7: AT+SHREAD=0,2 // read http result (second variable dependant on result from SHREQ)
	// 8: AT+SHDISC - Disconnect HTTP connect

	uint8_t maxCommand = 8;
 80029f2:	2308      	movs	r3, #8
 80029f4:	73fb      	strb	r3, [r7, #15]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 80029f6:	4b96      	ldr	r3, [pc, #600]	; (8002c50 <SIM_HTTP_Make_Get+0x264>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d067      	beq.n	8002ace <SIM_HTTP_Make_Get+0xe2>
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	4b94      	ldr	r3, [pc, #592]	; (8002c54 <SIM_HTTP_Make_Get+0x268>)
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d360      	bcc.n	8002ace <SIM_HTTP_Make_Get+0xe2>
		// Next command should be transmitted

		switch (commandIndex) {
 8002a0c:	4b91      	ldr	r3, [pc, #580]	; (8002c54 <SIM_HTTP_Make_Get+0x268>)
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d84d      	bhi.n	8002ab2 <SIM_HTTP_Make_Get+0xc6>
 8002a16:	a201      	add	r2, pc, #4	; (adr r2, 8002a1c <SIM_HTTP_Make_Get+0x30>)
 8002a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1c:	08002a41 	.word	0x08002a41
 8002a20:	08002a4b 	.word	0x08002a4b
 8002a24:	08002a55 	.word	0x08002a55
 8002a28:	08002a5f 	.word	0x08002a5f
 8002a2c:	08002a69 	.word	0x08002a69
 8002a30:	08002a73 	.word	0x08002a73
 8002a34:	08002a7d 	.word	0x08002a7d
 8002a38:	08002a87 	.word	0x08002a87
 8002a3c:	08002aa9 	.word	0x08002aa9
			case 0:
				// Get HTTP header
				sprintf(ATcommand, "AT+SHSTATE?\r\n");
 8002a40:	4985      	ldr	r1, [pc, #532]	; (8002c58 <SIM_HTTP_Make_Get+0x26c>)
 8002a42:	4886      	ldr	r0, [pc, #536]	; (8002c5c <SIM_HTTP_Make_Get+0x270>)
 8002a44:	f008 fdd0 	bl	800b5e8 <siprintf>
				break;
 8002a48:	e034      	b.n	8002ab4 <SIM_HTTP_Make_Get+0xc8>
			case 1:
				// Clear HTTP header
				sprintf(ATcommand, "AT+SHCHEAD\r\n");
 8002a4a:	4985      	ldr	r1, [pc, #532]	; (8002c60 <SIM_HTTP_Make_Get+0x274>)
 8002a4c:	4883      	ldr	r0, [pc, #524]	; (8002c5c <SIM_HTTP_Make_Get+0x270>)
 8002a4e:	f008 fdcb 	bl	800b5e8 <siprintf>
				break;
 8002a52:	e02f      	b.n	8002ab4 <SIM_HTTP_Make_Get+0xc8>
			case 2:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"User-Agent\",\"curl/7.47.0\"\r\n");
 8002a54:	4983      	ldr	r1, [pc, #524]	; (8002c64 <SIM_HTTP_Make_Get+0x278>)
 8002a56:	4881      	ldr	r0, [pc, #516]	; (8002c5c <SIM_HTTP_Make_Get+0x270>)
 8002a58:	f008 fdc6 	bl	800b5e8 <siprintf>
				break;
 8002a5c:	e02a      	b.n	8002ab4 <SIM_HTTP_Make_Get+0xc8>
			case 3:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Cache-control\",\"no-cache\"\r\n");
 8002a5e:	4982      	ldr	r1, [pc, #520]	; (8002c68 <SIM_HTTP_Make_Get+0x27c>)
 8002a60:	487e      	ldr	r0, [pc, #504]	; (8002c5c <SIM_HTTP_Make_Get+0x270>)
 8002a62:	f008 fdc1 	bl	800b5e8 <siprintf>
				break;
 8002a66:	e025      	b.n	8002ab4 <SIM_HTTP_Make_Get+0xc8>
			case 4:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Connection\",\"keep-alive\"\r\n");
 8002a68:	4980      	ldr	r1, [pc, #512]	; (8002c6c <SIM_HTTP_Make_Get+0x280>)
 8002a6a:	487c      	ldr	r0, [pc, #496]	; (8002c5c <SIM_HTTP_Make_Get+0x270>)
 8002a6c:	f008 fdbc 	bl	800b5e8 <siprintf>
				break;
 8002a70:	e020      	b.n	8002ab4 <SIM_HTTP_Make_Get+0xc8>
			case 5:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Accept\",\"*/*\"\r\n");
 8002a72:	497f      	ldr	r1, [pc, #508]	; (8002c70 <SIM_HTTP_Make_Get+0x284>)
 8002a74:	4879      	ldr	r0, [pc, #484]	; (8002c5c <SIM_HTTP_Make_Get+0x270>)
 8002a76:	f008 fdb7 	bl	800b5e8 <siprintf>
				break;
 8002a7a:	e01b      	b.n	8002ab4 <SIM_HTTP_Make_Get+0xc8>
			case 6:
				// Set request (1: GET)
				sprintf(ATcommand, "AT+SHREQ=\"/api/time?API_KEY=9349da48-62ef-496b-831a-4720015ff72a\",1\r\n");
 8002a7c:	497d      	ldr	r1, [pc, #500]	; (8002c74 <SIM_HTTP_Make_Get+0x288>)
 8002a7e:	4877      	ldr	r0, [pc, #476]	; (8002c5c <SIM_HTTP_Make_Get+0x270>)
 8002a80:	f008 fdb2 	bl	800b5e8 <siprintf>
				break;
 8002a84:	e016      	b.n	8002ab4 <SIM_HTTP_Make_Get+0xc8>
			case 7: ;
				// Read data after request
				char d[4];
				itoa(dataLengthVal, d, 10);
 8002a86:	4b7c      	ldr	r3, [pc, #496]	; (8002c78 <SIM_HTTP_Make_Get+0x28c>)
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f107 0308 	add.w	r3, r7, #8
 8002a90:	220a      	movs	r2, #10
 8002a92:	4619      	mov	r1, r3
 8002a94:	f007 fe26 	bl	800a6e4 <itoa>
				sprintf(ATcommand, "AT+SHREAD=0,%s\r\n", d);
 8002a98:	f107 0308 	add.w	r3, r7, #8
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4977      	ldr	r1, [pc, #476]	; (8002c7c <SIM_HTTP_Make_Get+0x290>)
 8002aa0:	486e      	ldr	r0, [pc, #440]	; (8002c5c <SIM_HTTP_Make_Get+0x270>)
 8002aa2:	f008 fda1 	bl	800b5e8 <siprintf>
				break;
 8002aa6:	e005      	b.n	8002ab4 <SIM_HTTP_Make_Get+0xc8>
			case 8:
				// Disconnect HTTP
				sprintf(ATcommand, "AT+SHDISC\r\n");
 8002aa8:	4975      	ldr	r1, [pc, #468]	; (8002c80 <SIM_HTTP_Make_Get+0x294>)
 8002aaa:	486c      	ldr	r0, [pc, #432]	; (8002c5c <SIM_HTTP_Make_Get+0x270>)
 8002aac:	f008 fd9c 	bl	800b5e8 <siprintf>
				break;
 8002ab0:	e000      	b.n	8002ab4 <SIM_HTTP_Make_Get+0xc8>
			default:
				break;
 8002ab2:	bf00      	nop
		}


		HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand)); // Transmit AT command
 8002ab4:	4869      	ldr	r0, [pc, #420]	; (8002c5c <SIM_HTTP_Make_Get+0x270>)
 8002ab6:	f7fd fb8b 	bl	80001d0 <strlen>
 8002aba:	4603      	mov	r3, r0
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	4966      	ldr	r1, [pc, #408]	; (8002c5c <SIM_HTTP_Make_Get+0x270>)
 8002ac2:	4870      	ldr	r0, [pc, #448]	; (8002c84 <SIM_HTTP_Make_Get+0x298>)
 8002ac4:	f005 fcfa 	bl	80084bc <HAL_UART_Transmit_IT>
		shouldTransmit = 0; // no transmission until response has been read
 8002ac8:	4b61      	ldr	r3, [pc, #388]	; (8002c50 <SIM_HTTP_Make_Get+0x264>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]

	} // if shouldTransmit
	// --------------------------------------------------------------- //

	// ---------------------------- RX ------------------------------- //
	uint8_t isIncrementCommand = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]

	switch (commandIndex) {
 8002ad2:	4b60      	ldr	r3, [pc, #384]	; (8002c54 <SIM_HTTP_Make_Get+0x268>)
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	f200 8174 	bhi.w	8002dc6 <SIM_HTTP_Make_Get+0x3da>
 8002ade:	a201      	add	r2, pc, #4	; (adr r2, 8002ae4 <SIM_HTTP_Make_Get+0xf8>)
 8002ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae4:	08002b09 	.word	0x08002b09
 8002ae8:	08002b55 	.word	0x08002b55
 8002aec:	08002b6b 	.word	0x08002b6b
 8002af0:	08002b81 	.word	0x08002b81
 8002af4:	08002b97 	.word	0x08002b97
 8002af8:	08002bad 	.word	0x08002bad
 8002afc:	08002bc3 	.word	0x08002bc3
 8002b00:	08002cbd 	.word	0x08002cbd
 8002b04:	08002d9b 	.word	0x08002d9b
		case 0:
			// +SHSTATE: 0\r\n\r\nOK\r\n - HTTP disconnect state
			if (strstr((char*) serialRX_Buffer, "+SHSTATE: 0\r\n\r\nOK\r\n")) {
 8002b08:	495f      	ldr	r1, [pc, #380]	; (8002c88 <SIM_HTTP_Make_Get+0x29c>)
 8002b0a:	4860      	ldr	r0, [pc, #384]	; (8002c8c <SIM_HTTP_Make_Get+0x2a0>)
 8002b0c:	f008 fdae 	bl	800b66c <strstr>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00c      	beq.n	8002b30 <SIM_HTTP_Make_Get+0x144>
				// If disconnected, build HTTP post
				simState = SIM_HTTP_BUILD;
 8002b16:	4b5e      	ldr	r3, [pc, #376]	; (8002c90 <SIM_HTTP_Make_Get+0x2a4>)
 8002b18:	2203      	movs	r2, #3
 8002b1a:	701a      	strb	r2, [r3, #0]
				isStateChanged = 1;
 8002b1c:	4b5d      	ldr	r3, [pc, #372]	; (8002c94 <SIM_HTTP_Make_Get+0x2a8>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	701a      	strb	r2, [r3, #0]
				clearBuffer = 1; // Clear buffer to receive next response
 8002b22:	4b5d      	ldr	r3, [pc, #372]	; (8002c98 <SIM_HTTP_Make_Get+0x2ac>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1; // Can transmit next command
 8002b28:	4b49      	ldr	r3, [pc, #292]	; (8002c50 <SIM_HTTP_Make_Get+0x264>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	701a      	strb	r2, [r3, #0]
			else if (strstr((char*) serialRX_Buffer, "+SHSTATE: 1\r\n\r\nOK\r\n")) {
				commandIndex = 1; // AT+SHDISC next command
				clearBuffer = 1; // Clear buffer to receive next response
				shouldTransmit = 1; // Can transmit next command
			}
			break;
 8002b2e:	e14c      	b.n	8002dca <SIM_HTTP_Make_Get+0x3de>
			else if (strstr((char*) serialRX_Buffer, "+SHSTATE: 1\r\n\r\nOK\r\n")) {
 8002b30:	495a      	ldr	r1, [pc, #360]	; (8002c9c <SIM_HTTP_Make_Get+0x2b0>)
 8002b32:	4856      	ldr	r0, [pc, #344]	; (8002c8c <SIM_HTTP_Make_Get+0x2a0>)
 8002b34:	f008 fd9a 	bl	800b66c <strstr>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 8145 	beq.w	8002dca <SIM_HTTP_Make_Get+0x3de>
				commandIndex = 1; // AT+SHDISC next command
 8002b40:	4b44      	ldr	r3, [pc, #272]	; (8002c54 <SIM_HTTP_Make_Get+0x268>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	801a      	strh	r2, [r3, #0]
				clearBuffer = 1; // Clear buffer to receive next response
 8002b46:	4b54      	ldr	r3, [pc, #336]	; (8002c98 <SIM_HTTP_Make_Get+0x2ac>)
 8002b48:	2201      	movs	r2, #1
 8002b4a:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1; // Can transmit next command
 8002b4c:	4b40      	ldr	r3, [pc, #256]	; (8002c50 <SIM_HTTP_Make_Get+0x264>)
 8002b4e:	2201      	movs	r2, #1
 8002b50:	701a      	strb	r2, [r3, #0]
			break;
 8002b52:	e13a      	b.n	8002dca <SIM_HTTP_Make_Get+0x3de>
		case 1:
			// OK received. Header cleared.
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8002b54:	4952      	ldr	r1, [pc, #328]	; (8002ca0 <SIM_HTTP_Make_Get+0x2b4>)
 8002b56:	484d      	ldr	r0, [pc, #308]	; (8002c8c <SIM_HTTP_Make_Get+0x2a0>)
 8002b58:	f008 fd88 	bl	800b66c <strstr>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 8135 	beq.w	8002dce <SIM_HTTP_Make_Get+0x3e2>
				isIncrementCommand = 1;
 8002b64:	2301      	movs	r3, #1
 8002b66:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8002b68:	e131      	b.n	8002dce <SIM_HTTP_Make_Get+0x3e2>
		case 2:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8002b6a:	494d      	ldr	r1, [pc, #308]	; (8002ca0 <SIM_HTTP_Make_Get+0x2b4>)
 8002b6c:	4847      	ldr	r0, [pc, #284]	; (8002c8c <SIM_HTTP_Make_Get+0x2a0>)
 8002b6e:	f008 fd7d 	bl	800b66c <strstr>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 812c 	beq.w	8002dd2 <SIM_HTTP_Make_Get+0x3e6>
				isIncrementCommand = 1;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8002b7e:	e128      	b.n	8002dd2 <SIM_HTTP_Make_Get+0x3e6>
		case 3:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8002b80:	4947      	ldr	r1, [pc, #284]	; (8002ca0 <SIM_HTTP_Make_Get+0x2b4>)
 8002b82:	4842      	ldr	r0, [pc, #264]	; (8002c8c <SIM_HTTP_Make_Get+0x2a0>)
 8002b84:	f008 fd72 	bl	800b66c <strstr>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 8123 	beq.w	8002dd6 <SIM_HTTP_Make_Get+0x3ea>
				isIncrementCommand = 1;
 8002b90:	2301      	movs	r3, #1
 8002b92:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8002b94:	e11f      	b.n	8002dd6 <SIM_HTTP_Make_Get+0x3ea>
		case 4:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8002b96:	4942      	ldr	r1, [pc, #264]	; (8002ca0 <SIM_HTTP_Make_Get+0x2b4>)
 8002b98:	483c      	ldr	r0, [pc, #240]	; (8002c8c <SIM_HTTP_Make_Get+0x2a0>)
 8002b9a:	f008 fd67 	bl	800b66c <strstr>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 811a 	beq.w	8002dda <SIM_HTTP_Make_Get+0x3ee>
				isIncrementCommand = 1;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8002baa:	e116      	b.n	8002dda <SIM_HTTP_Make_Get+0x3ee>
		case 5:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8002bac:	493c      	ldr	r1, [pc, #240]	; (8002ca0 <SIM_HTTP_Make_Get+0x2b4>)
 8002bae:	4837      	ldr	r0, [pc, #220]	; (8002c8c <SIM_HTTP_Make_Get+0x2a0>)
 8002bb0:	f008 fd5c 	bl	800b66c <strstr>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 8111 	beq.w	8002dde <SIM_HTTP_Make_Get+0x3f2>
				isIncrementCommand = 1;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8002bc0:	e10d      	b.n	8002dde <SIM_HTTP_Make_Get+0x3f2>
		case 6:
			if (strstr((char*) serialRX_Buffer, "+SHREQ: \"GET\"")) {
 8002bc2:	4938      	ldr	r1, [pc, #224]	; (8002ca4 <SIM_HTTP_Make_Get+0x2b8>)
 8002bc4:	4831      	ldr	r0, [pc, #196]	; (8002c8c <SIM_HTTP_Make_Get+0x2a0>)
 8002bc6:	f008 fd51 	bl	800b66c <strstr>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 8108 	beq.w	8002de2 <SIM_HTTP_Make_Get+0x3f6>
				copySubstringFromMatch(responseSubstring, (char*)serialRX_Buffer, "+SHREQ: \"GET\"");
 8002bd2:	4a34      	ldr	r2, [pc, #208]	; (8002ca4 <SIM_HTTP_Make_Get+0x2b8>)
 8002bd4:	492d      	ldr	r1, [pc, #180]	; (8002c8c <SIM_HTTP_Make_Get+0x2a0>)
 8002bd6:	4834      	ldr	r0, [pc, #208]	; (8002ca8 <SIM_HTTP_Make_Get+0x2bc>)
 8002bd8:	f000 f952 	bl	8002e80 <copySubstringFromMatch>
				// +SHREQ: \"GET\",200,36\r\n
				uint8_t splittedValIndex = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	75bb      	strb	r3, [r7, #22]
				uint16_t splittedVal[4] = {0};
 8002be0:	463b      	mov	r3, r7
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	605a      	str	r2, [r3, #4]
				char* token;
				if (strstr(responseSubstring, "\r\n")) { // response has finished transmitting
 8002be8:	4930      	ldr	r1, [pc, #192]	; (8002cac <SIM_HTTP_Make_Get+0x2c0>)
 8002bea:	482f      	ldr	r0, [pc, #188]	; (8002ca8 <SIM_HTTP_Make_Get+0x2bc>)
 8002bec:	f008 fd3e 	bl	800b66c <strstr>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 80f5 	beq.w	8002de2 <SIM_HTTP_Make_Get+0x3f6>
					token = strtok(responseSubstring, ",");
 8002bf8:	492d      	ldr	r1, [pc, #180]	; (8002cb0 <SIM_HTTP_Make_Get+0x2c4>)
 8002bfa:	482b      	ldr	r0, [pc, #172]	; (8002ca8 <SIM_HTTP_Make_Get+0x2bc>)
 8002bfc:	f009 fb74 	bl	800c2e8 <strtok>
 8002c00:	6138      	str	r0, [r7, #16]
					while (token != NULL  && splittedValIndex<4) {
 8002c02:	e012      	b.n	8002c2a <SIM_HTTP_Make_Get+0x23e>
						splittedVal[++splittedValIndex] = atoi(token);
 8002c04:	6938      	ldr	r0, [r7, #16]
 8002c06:	f007 fd26 	bl	800a656 <atoi>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	7dbb      	ldrb	r3, [r7, #22]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	75bb      	strb	r3, [r7, #22]
 8002c12:	7dbb      	ldrb	r3, [r7, #22]
 8002c14:	b292      	uxth	r2, r2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	3318      	adds	r3, #24
 8002c1a:	443b      	add	r3, r7
 8002c1c:	f823 2c18 	strh.w	r2, [r3, #-24]
						token = strtok(NULL, ",");
 8002c20:	4923      	ldr	r1, [pc, #140]	; (8002cb0 <SIM_HTTP_Make_Get+0x2c4>)
 8002c22:	2000      	movs	r0, #0
 8002c24:	f009 fb60 	bl	800c2e8 <strtok>
 8002c28:	6138      	str	r0, [r7, #16]
					while (token != NULL  && splittedValIndex<4) {
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <SIM_HTTP_Make_Get+0x24a>
 8002c30:	7dbb      	ldrb	r3, [r7, #22]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d9e6      	bls.n	8002c04 <SIM_HTTP_Make_Get+0x218>
					}
					statusCodeVal = splittedVal[2]; // TODO: Wrong status code received? (Do the same for POST)
 8002c36:	88ba      	ldrh	r2, [r7, #4]
 8002c38:	4b1e      	ldr	r3, [pc, #120]	; (8002cb4 <SIM_HTTP_Make_Get+0x2c8>)
 8002c3a:	801a      	strh	r2, [r3, #0]
					dataLengthVal = splittedVal[3];
 8002c3c:	88fa      	ldrh	r2, [r7, #6]
 8002c3e:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <SIM_HTTP_Make_Get+0x28c>)
 8002c40:	801a      	strh	r2, [r3, #0]
					isIncrementCommand = 1;
 8002c42:	2301      	movs	r3, #1
 8002c44:	75fb      	strb	r3, [r7, #23]
					isLD3_Flicker = 0; // TODO: remove later
 8002c46:	4b1c      	ldr	r3, [pc, #112]	; (8002cb8 <SIM_HTTP_Make_Get+0x2cc>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8002c4c:	e0c9      	b.n	8002de2 <SIM_HTTP_Make_Get+0x3f6>
 8002c4e:	bf00      	nop
 8002c50:	2000000d 	.word	0x2000000d
 8002c54:	20002400 	.word	0x20002400
 8002c58:	0800f32c 	.word	0x0800f32c
 8002c5c:	2000239c 	.word	0x2000239c
 8002c60:	0800f410 	.word	0x0800f410
 8002c64:	0800f580 	.word	0x0800f580
 8002c68:	0800f460 	.word	0x0800f460
 8002c6c:	0800f488 	.word	0x0800f488
 8002c70:	0800f4b0 	.word	0x0800f4b0
 8002c74:	0800f5a8 	.word	0x0800f5a8
 8002c78:	2000259c 	.word	0x2000259c
 8002c7c:	0800f534 	.word	0x0800f534
 8002c80:	0800f33c 	.word	0x0800f33c
 8002c84:	200003a4 	.word	0x200003a4
 8002c88:	0800f3c0 	.word	0x0800f3c0
 8002c8c:	20002404 	.word	0x20002404
 8002c90:	2000000c 	.word	0x2000000c
 8002c94:	20002402 	.word	0x20002402
 8002c98:	20002500 	.word	0x20002500
 8002c9c:	0800f3d4 	.word	0x0800f3d4
 8002ca0:	0800f1fc 	.word	0x0800f1fc
 8002ca4:	0800f5f0 	.word	0x0800f5f0
 8002ca8:	20002568 	.word	0x20002568
 8002cac:	0800f4e8 	.word	0x0800f4e8
 8002cb0:	0800f558 	.word	0x0800f558
 8002cb4:	2000259a 	.word	0x2000259a
 8002cb8:	20000000 	.word	0x20000000
		case 7:
			if (strstr((char*) serialRX_Buffer, "}\n\r\n")) {
 8002cbc:	4960      	ldr	r1, [pc, #384]	; (8002e40 <SIM_HTTP_Make_Get+0x454>)
 8002cbe:	4861      	ldr	r0, [pc, #388]	; (8002e44 <SIM_HTTP_Make_Get+0x458>)
 8002cc0:	f008 fcd4 	bl	800b66c <strstr>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 808d 	beq.w	8002de6 <SIM_HTTP_Make_Get+0x3fa>
				copySubstringFromMatch(SHREAD_Data, (char*) serialRX_Buffer, "+SHREAD:");
 8002ccc:	4a5e      	ldr	r2, [pc, #376]	; (8002e48 <SIM_HTTP_Make_Get+0x45c>)
 8002cce:	495d      	ldr	r1, [pc, #372]	; (8002e44 <SIM_HTTP_Make_Get+0x458>)
 8002cd0:	485e      	ldr	r0, [pc, #376]	; (8002e4c <SIM_HTTP_Make_Get+0x460>)
 8002cd2:	f000 f8d5 	bl	8002e80 <copySubstringFromMatch>
				isIncrementCommand = 1;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	75fb      	strb	r3, [r7, #23]
//				"+SHREAD: 36\r\n{\n  \"time\": \"2022-09-15 18:12:11\"\n}\n\r\n"
				currentDateTime[0] = atoi(substr(SHREAD_Data, 26, 30)) - 2000;
 8002cda:	221e      	movs	r2, #30
 8002cdc:	211a      	movs	r1, #26
 8002cde:	485b      	ldr	r0, [pc, #364]	; (8002e4c <SIM_HTTP_Make_Get+0x460>)
 8002ce0:	f000 f8f7 	bl	8002ed2 <substr>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f007 fcb5 	bl	800a656 <atoi>
 8002cec:	4603      	mov	r3, r0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	3330      	adds	r3, #48	; 0x30
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	4b56      	ldr	r3, [pc, #344]	; (8002e50 <SIM_HTTP_Make_Get+0x464>)
 8002cf6:	701a      	strb	r2, [r3, #0]
				currentDateTime[1] = atoi(substr(SHREAD_Data, 31, 33));
 8002cf8:	2221      	movs	r2, #33	; 0x21
 8002cfa:	211f      	movs	r1, #31
 8002cfc:	4853      	ldr	r0, [pc, #332]	; (8002e4c <SIM_HTTP_Make_Get+0x460>)
 8002cfe:	f000 f8e8 	bl	8002ed2 <substr>
 8002d02:	4603      	mov	r3, r0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f007 fca6 	bl	800a656 <atoi>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	4b50      	ldr	r3, [pc, #320]	; (8002e50 <SIM_HTTP_Make_Get+0x464>)
 8002d10:	705a      	strb	r2, [r3, #1]
				currentDateTime[2] = atoi(substr(SHREAD_Data, 34, 36));
 8002d12:	2224      	movs	r2, #36	; 0x24
 8002d14:	2122      	movs	r1, #34	; 0x22
 8002d16:	484d      	ldr	r0, [pc, #308]	; (8002e4c <SIM_HTTP_Make_Get+0x460>)
 8002d18:	f000 f8db 	bl	8002ed2 <substr>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f007 fc99 	bl	800a656 <atoi>
 8002d24:	4603      	mov	r3, r0
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	4b49      	ldr	r3, [pc, #292]	; (8002e50 <SIM_HTTP_Make_Get+0x464>)
 8002d2a:	709a      	strb	r2, [r3, #2]
				currentDateTime[3] = atoi(substr(SHREAD_Data, 37, 39));
 8002d2c:	2227      	movs	r2, #39	; 0x27
 8002d2e:	2125      	movs	r1, #37	; 0x25
 8002d30:	4846      	ldr	r0, [pc, #280]	; (8002e4c <SIM_HTTP_Make_Get+0x460>)
 8002d32:	f000 f8ce 	bl	8002ed2 <substr>
 8002d36:	4603      	mov	r3, r0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f007 fc8c 	bl	800a656 <atoi>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	4b43      	ldr	r3, [pc, #268]	; (8002e50 <SIM_HTTP_Make_Get+0x464>)
 8002d44:	70da      	strb	r2, [r3, #3]
				currentDateTime[4] = atoi(substr(SHREAD_Data, 40, 42));
 8002d46:	222a      	movs	r2, #42	; 0x2a
 8002d48:	2128      	movs	r1, #40	; 0x28
 8002d4a:	4840      	ldr	r0, [pc, #256]	; (8002e4c <SIM_HTTP_Make_Get+0x460>)
 8002d4c:	f000 f8c1 	bl	8002ed2 <substr>
 8002d50:	4603      	mov	r3, r0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f007 fc7f 	bl	800a656 <atoi>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	4b3c      	ldr	r3, [pc, #240]	; (8002e50 <SIM_HTTP_Make_Get+0x464>)
 8002d5e:	711a      	strb	r2, [r3, #4]
				currentDateTime[5] = atoi(substr(SHREAD_Data, 43, 45));
 8002d60:	222d      	movs	r2, #45	; 0x2d
 8002d62:	212b      	movs	r1, #43	; 0x2b
 8002d64:	4839      	ldr	r0, [pc, #228]	; (8002e4c <SIM_HTTP_Make_Get+0x460>)
 8002d66:	f000 f8b4 	bl	8002ed2 <substr>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f007 fc72 	bl	800a656 <atoi>
 8002d72:	4603      	mov	r3, r0
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	4b36      	ldr	r3, [pc, #216]	; (8002e50 <SIM_HTTP_Make_Get+0x464>)
 8002d78:	715a      	strb	r2, [r3, #5]
				set_time();
 8002d7a:	f7fe fd7b 	bl	8001874 <set_time>
				set_alarm_B(alarmB_SecondsOffset);
 8002d7e:	4b35      	ldr	r3, [pc, #212]	; (8002e54 <SIM_HTTP_Make_Get+0x468>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fe fe74 	bl	8001a70 <set_alarm_B>
				set_alarm_A(alarmA_SecondsOffset);
 8002d88:	4b33      	ldr	r3, [pc, #204]	; (8002e58 <SIM_HTTP_Make_Get+0x46c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe fdd3 	bl	8001938 <set_alarm_A>
				time_synced_flag = 1;
 8002d92:	4b32      	ldr	r3, [pc, #200]	; (8002e5c <SIM_HTTP_Make_Get+0x470>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002d98:	e025      	b.n	8002de6 <SIM_HTTP_Make_Get+0x3fa>
		case 8:
			// OK received. Successful disconnect.
			if (strstr((char*) serialRX_Buffer, "+SHDISC\r\r\nOK\r\n")) {
 8002d9a:	4931      	ldr	r1, [pc, #196]	; (8002e60 <SIM_HTTP_Make_Get+0x474>)
 8002d9c:	4829      	ldr	r0, [pc, #164]	; (8002e44 <SIM_HTTP_Make_Get+0x458>)
 8002d9e:	f008 fc65 	bl	800b66c <strstr>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d020      	beq.n	8002dea <SIM_HTTP_Make_Get+0x3fe>
				isIncrementCommand = 1;
 8002da8:	2301      	movs	r3, #1
 8002daa:	75fb      	strb	r3, [r7, #23]
				simState = SIM_STANDBY;
 8002dac:	4b2d      	ldr	r3, [pc, #180]	; (8002e64 <SIM_HTTP_Make_Get+0x478>)
 8002dae:	2207      	movs	r2, #7
 8002db0:	701a      	strb	r2, [r3, #0]
				sim_flag = 0;
 8002db2:	4b2d      	ldr	r3, [pc, #180]	; (8002e68 <SIM_HTTP_Make_Get+0x47c>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	701a      	strb	r2, [r3, #0]
				isStateChanged = 1;
 8002db8:	4b2c      	ldr	r3, [pc, #176]	; (8002e6c <SIM_HTTP_Make_Get+0x480>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
				isLD3_Flicker = 1; // TODO: remove later
 8002dbe:	4b2c      	ldr	r3, [pc, #176]	; (8002e70 <SIM_HTTP_Make_Get+0x484>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002dc4:	e011      	b.n	8002dea <SIM_HTTP_Make_Get+0x3fe>
		default:
			break;
 8002dc6:	bf00      	nop
 8002dc8:	e010      	b.n	8002dec <SIM_HTTP_Make_Get+0x400>
			break;
 8002dca:	bf00      	nop
 8002dcc:	e00e      	b.n	8002dec <SIM_HTTP_Make_Get+0x400>
			break;
 8002dce:	bf00      	nop
 8002dd0:	e00c      	b.n	8002dec <SIM_HTTP_Make_Get+0x400>
			break;
 8002dd2:	bf00      	nop
 8002dd4:	e00a      	b.n	8002dec <SIM_HTTP_Make_Get+0x400>
			break;
 8002dd6:	bf00      	nop
 8002dd8:	e008      	b.n	8002dec <SIM_HTTP_Make_Get+0x400>
			break;
 8002dda:	bf00      	nop
 8002ddc:	e006      	b.n	8002dec <SIM_HTTP_Make_Get+0x400>
			break;
 8002dde:	bf00      	nop
 8002de0:	e004      	b.n	8002dec <SIM_HTTP_Make_Get+0x400>
			break;
 8002de2:	bf00      	nop
 8002de4:	e002      	b.n	8002dec <SIM_HTTP_Make_Get+0x400>
			break;
 8002de6:	bf00      	nop
 8002de8:	e000      	b.n	8002dec <SIM_HTTP_Make_Get+0x400>
			break;
 8002dea:	bf00      	nop
	}

	if (isIncrementCommand) {
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00e      	beq.n	8002e10 <SIM_HTTP_Make_Get+0x424>
		++commandIndex; // Next command
 8002df2:	4b20      	ldr	r3, [pc, #128]	; (8002e74 <SIM_HTTP_Make_Get+0x488>)
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3301      	adds	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	4b1d      	ldr	r3, [pc, #116]	; (8002e74 <SIM_HTTP_Make_Get+0x488>)
 8002dfe:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 8002e00:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <SIM_HTTP_Make_Get+0x48c>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <SIM_HTTP_Make_Get+0x490>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	75fb      	strb	r3, [r7, #23]
	}

	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	4b17      	ldr	r3, [pc, #92]	; (8002e74 <SIM_HTTP_Make_Get+0x488>)
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d304      	bcc.n	8002e28 <SIM_HTTP_Make_Get+0x43c>
 8002e1e:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <SIM_HTTP_Make_Get+0x480>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d006      	beq.n	8002e36 <SIM_HTTP_Make_Get+0x44a>
		commandIndex = 0;
 8002e28:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <SIM_HTTP_Make_Get+0x488>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <SIM_HTTP_Make_Get+0x480>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
	}


	return;
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
}
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	0800f55c 	.word	0x0800f55c
 8002e44:	20002404 	.word	0x20002404
 8002e48:	0800f564 	.word	0x0800f564
 8002e4c:	200025a0 	.word	0x200025a0
 8002e50:	20002374 	.word	0x20002374
 8002e54:	20000008 	.word	0x20000008
 8002e58:	20000004 	.word	0x20000004
 8002e5c:	20000428 	.word	0x20000428
 8002e60:	0800f570 	.word	0x0800f570
 8002e64:	2000000c 	.word	0x2000000c
 8002e68:	20000429 	.word	0x20000429
 8002e6c:	20002402 	.word	0x20002402
 8002e70:	20000000 	.word	0x20000000
 8002e74:	20002400 	.word	0x20002400
 8002e78:	20002500 	.word	0x20002500
 8002e7c:	2000000d 	.word	0x2000000d

08002e80 <copySubstringFromMatch>:

// No check is implemented for destination that is smaller than the substring
void copySubstringFromMatch(char* destination, char* source, char* strToMatch) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
	char* firstOccurence = strstr(source, strToMatch);
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	68b8      	ldr	r0, [r7, #8]
 8002e90:	f008 fbec 	bl	800b66c <strstr>
 8002e94:	6178      	str	r0, [r7, #20]
	if (!firstOccurence) { // string to match not found
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d016      	beq.n	8002eca <copySubstringFromMatch+0x4a>
		return;
	}

	uint16_t startPos = firstOccurence - source;
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	827b      	strh	r3, [r7, #18]
	uint16_t substringLength = strlen(source) - startPos;
 8002ea4:	68b8      	ldr	r0, [r7, #8]
 8002ea6:	f7fd f993 	bl	80001d0 <strlen>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	8a7b      	ldrh	r3, [r7, #18]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	823b      	strh	r3, [r7, #16]

	strncpy(destination, source+startPos, startPos+substringLength);
 8002eb4:	8a7b      	ldrh	r3, [r7, #18]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	18d1      	adds	r1, r2, r3
 8002eba:	8a7a      	ldrh	r2, [r7, #18]
 8002ebc:	8a3b      	ldrh	r3, [r7, #16]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f008 fbbf 	bl	800b646 <strncpy>

	return;
 8002ec8:	e000      	b.n	8002ecc <copySubstringFromMatch+0x4c>
		return;
 8002eca:	bf00      	nop
}
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <substr>:

// Following function extracts characters present in `src`
// between `m` and `n` (excluding `n`)
// https://www.techiedelight.com/implement-substr-function-c/#:~:text=The%20substr()%20function%20returns,string%20between%20two%20given%20indices.&text=It%20returns%20the%20substring%20of,ending%20at%20position%20n%2D1%20.
char* substr(const char *src, int m, int n)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b088      	sub	sp, #32
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
    // get the length of the destination string
    int len = n - m;
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	617b      	str	r3, [r7, #20]

    // allocate (len + 1) chars for destination (+1 for extra null character)
    char *dest = (char*)malloc(sizeof(char) * (len + 1));
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	4618      	mov	r0, r3
 8002eec:	f007 fbfc 	bl	800a6e8 <malloc>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	61fb      	str	r3, [r7, #28]

    // extracts characters between m'th and n'th index from source string
    // and copy them into the destination string
    for (int i = m; i < n && (*(src + i) != '\0'); i++)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	61bb      	str	r3, [r7, #24]
 8002ef8:	e00b      	b.n	8002f12 <substr+0x40>
    {
        *dest = *(src + i);
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4413      	add	r3, r2
 8002f00:	781a      	ldrb	r2, [r3, #0]
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	701a      	strb	r2, [r3, #0]
        dest++;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	61fb      	str	r3, [r7, #28]
    for (int i = m; i < n && (*(src + i) != '\0'); i++)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	da05      	bge.n	8002f26 <substr+0x54>
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4413      	add	r3, r2
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1e9      	bne.n	8002efa <substr+0x28>
    }

    // null-terminate the destination string
    *dest = '\0';
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	701a      	strb	r2, [r3, #0]

    // return the destination string
    return dest - len;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	425b      	negs	r3, r3
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	4413      	add	r3, r2
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3720      	adds	r7, #32
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f42:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <HAL_MspInit+0x44>)
 8002f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f46:	4a0e      	ldr	r2, [pc, #56]	; (8002f80 <HAL_MspInit+0x44>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	6613      	str	r3, [r2, #96]	; 0x60
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <HAL_MspInit+0x44>)
 8002f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	607b      	str	r3, [r7, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f5a:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <HAL_MspInit+0x44>)
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5e:	4a08      	ldr	r2, [pc, #32]	; (8002f80 <HAL_MspInit+0x44>)
 8002f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f64:	6593      	str	r3, [r2, #88]	; 0x58
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_MspInit+0x44>)
 8002f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40021000 	.word	0x40021000

08002f84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b09e      	sub	sp, #120	; 0x78
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f9c:	f107 0310 	add.w	r3, r7, #16
 8002fa0:	2254      	movs	r2, #84	; 0x54
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f007 fba7 	bl	800a6f8 <memset>
  if(hadc->Instance==ADC1)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a3f      	ldr	r2, [pc, #252]	; (80030ac <HAL_ADC_MspInit+0x128>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d176      	bne.n	80030a2 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002fb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fb8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002fba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002fbe:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002fc8:	2310      	movs	r3, #16
 8002fca:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002fcc:	2307      	movs	r3, #7
 8002fce:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002fd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fde:	f107 0310 	add.w	r3, r7, #16
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f003 f9e6 	bl	80063b4 <HAL_RCCEx_PeriphCLKConfig>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002fee:	f7fe fdd9 	bl	8001ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002ff2:	4b2f      	ldr	r3, [pc, #188]	; (80030b0 <HAL_ADC_MspInit+0x12c>)
 8002ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff6:	4a2e      	ldr	r2, [pc, #184]	; (80030b0 <HAL_ADC_MspInit+0x12c>)
 8002ff8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ffe:	4b2c      	ldr	r3, [pc, #176]	; (80030b0 <HAL_ADC_MspInit+0x12c>)
 8003000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003002:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800300a:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <HAL_ADC_MspInit+0x12c>)
 800300c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300e:	4a28      	ldr	r2, [pc, #160]	; (80030b0 <HAL_ADC_MspInit+0x12c>)
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003016:	4b26      	ldr	r3, [pc, #152]	; (80030b0 <HAL_ADC_MspInit+0x12c>)
 8003018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = TDS_ADC_IN_Pin|PH_ADC_IN_Pin|TEMP_ADC_IN_Pin|BATT_VOLT_ADC_IN_Pin;
 8003022:	235c      	movs	r3, #92	; 0x5c
 8003024:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003026:	230b      	movs	r3, #11
 8003028:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302a:	2300      	movs	r3, #0
 800302c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003032:	4619      	mov	r1, r3
 8003034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003038:	f002 f974 	bl	8005324 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800303c:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <HAL_ADC_MspInit+0x130>)
 800303e:	4a1e      	ldr	r2, [pc, #120]	; (80030b8 <HAL_ADC_MspInit+0x134>)
 8003040:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003042:	4b1c      	ldr	r3, [pc, #112]	; (80030b4 <HAL_ADC_MspInit+0x130>)
 8003044:	2200      	movs	r2, #0
 8003046:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003048:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <HAL_ADC_MspInit+0x130>)
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800304e:	4b19      	ldr	r3, [pc, #100]	; (80030b4 <HAL_ADC_MspInit+0x130>)
 8003050:	2200      	movs	r2, #0
 8003052:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003054:	4b17      	ldr	r3, [pc, #92]	; (80030b4 <HAL_ADC_MspInit+0x130>)
 8003056:	2280      	movs	r2, #128	; 0x80
 8003058:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800305a:	4b16      	ldr	r3, [pc, #88]	; (80030b4 <HAL_ADC_MspInit+0x130>)
 800305c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003060:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003062:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <HAL_ADC_MspInit+0x130>)
 8003064:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003068:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800306a:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <HAL_ADC_MspInit+0x130>)
 800306c:	2200      	movs	r2, #0
 800306e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003070:	4b10      	ldr	r3, [pc, #64]	; (80030b4 <HAL_ADC_MspInit+0x130>)
 8003072:	2200      	movs	r2, #0
 8003074:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003076:	480f      	ldr	r0, [pc, #60]	; (80030b4 <HAL_ADC_MspInit+0x130>)
 8003078:	f001 fede 	bl	8004e38 <HAL_DMA_Init>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8003082:	f7fe fd8f 	bl	8001ba4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a0a      	ldr	r2, [pc, #40]	; (80030b4 <HAL_ADC_MspInit+0x130>)
 800308a:	64da      	str	r2, [r3, #76]	; 0x4c
 800308c:	4a09      	ldr	r2, [pc, #36]	; (80030b4 <HAL_ADC_MspInit+0x130>)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8003092:	2200      	movs	r2, #0
 8003094:	2100      	movs	r1, #0
 8003096:	2012      	movs	r0, #18
 8003098:	f001 fe97 	bl	8004dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800309c:	2012      	movs	r0, #18
 800309e:	f001 feb0 	bl	8004e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030a2:	bf00      	nop
 80030a4:	3778      	adds	r7, #120	; 0x78
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	50040000 	.word	0x50040000
 80030b0:	40021000 	.word	0x40021000
 80030b4:	20000288 	.word	0x20000288
 80030b8:	40020008 	.word	0x40020008

080030bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b098      	sub	sp, #96	; 0x60
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030c4:	f107 030c 	add.w	r3, r7, #12
 80030c8:	2254      	movs	r2, #84	; 0x54
 80030ca:	2100      	movs	r1, #0
 80030cc:	4618      	mov	r0, r3
 80030ce:	f007 fb13 	bl	800a6f8 <memset>
  if(hrtc->Instance==RTC)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a17      	ldr	r2, [pc, #92]	; (8003134 <HAL_RTC_MspInit+0x78>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d127      	bne.n	800312c <HAL_RTC_MspInit+0x70>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80030dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030e0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80030e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030e8:	f107 030c 	add.w	r3, r7, #12
 80030ec:	4618      	mov	r0, r3
 80030ee:	f003 f961 	bl	80063b4 <HAL_RCCEx_PeriphCLKConfig>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80030f8:	f7fe fd54 	bl	8001ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030fc:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <HAL_RTC_MspInit+0x7c>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	4a0d      	ldr	r2, [pc, #52]	; (8003138 <HAL_RTC_MspInit+0x7c>)
 8003104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800310c:	2200      	movs	r2, #0
 800310e:	2100      	movs	r1, #0
 8003110:	2003      	movs	r0, #3
 8003112:	f001 fe5a 	bl	8004dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003116:	2003      	movs	r0, #3
 8003118:	f001 fe73 	bl	8004e02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800311c:	2200      	movs	r2, #0
 800311e:	2100      	movs	r1, #0
 8003120:	2029      	movs	r0, #41	; 0x29
 8003122:	f001 fe52 	bl	8004dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003126:	2029      	movs	r0, #41	; 0x29
 8003128:	f001 fe6b 	bl	8004e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800312c:	bf00      	nop
 800312e:	3760      	adds	r7, #96	; 0x60
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40002800 	.word	0x40002800
 8003138:	40021000 	.word	0x40021000

0800313c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08a      	sub	sp, #40	; 0x28
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003144:	f107 0314 	add.w	r3, r7, #20
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	60da      	str	r2, [r3, #12]
 8003152:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a18      	ldr	r2, [pc, #96]	; (80031bc <HAL_SPI_MspInit+0x80>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d129      	bne.n	80031b2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800315e:	4b18      	ldr	r3, [pc, #96]	; (80031c0 <HAL_SPI_MspInit+0x84>)
 8003160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003162:	4a17      	ldr	r2, [pc, #92]	; (80031c0 <HAL_SPI_MspInit+0x84>)
 8003164:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003168:	6613      	str	r3, [r2, #96]	; 0x60
 800316a:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <HAL_SPI_MspInit+0x84>)
 800316c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003176:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <HAL_SPI_MspInit+0x84>)
 8003178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317a:	4a11      	ldr	r2, [pc, #68]	; (80031c0 <HAL_SPI_MspInit+0x84>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003182:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <HAL_SPI_MspInit+0x84>)
 8003184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 800318e:	f641 0302 	movw	r3, #6146	; 0x1802
 8003192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003194:	2302      	movs	r3, #2
 8003196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	2300      	movs	r3, #0
 800319a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319c:	2303      	movs	r3, #3
 800319e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031a0:	2305      	movs	r3, #5
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a4:	f107 0314 	add.w	r3, r7, #20
 80031a8:	4619      	mov	r1, r3
 80031aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031ae:	f002 f8b9 	bl	8005324 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80031b2:	bf00      	nop
 80031b4:	3728      	adds	r7, #40	; 0x28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40013000 	.word	0x40013000
 80031c0:	40021000 	.word	0x40021000

080031c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d4:	d113      	bne.n	80031fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031d6:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <HAL_TIM_Base_MspInit+0x44>)
 80031d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031da:	4a0b      	ldr	r2, [pc, #44]	; (8003208 <HAL_TIM_Base_MspInit+0x44>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	6593      	str	r3, [r2, #88]	; 0x58
 80031e2:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_TIM_Base_MspInit+0x44>)
 80031e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80031ee:	2200      	movs	r2, #0
 80031f0:	2100      	movs	r1, #0
 80031f2:	201c      	movs	r0, #28
 80031f4:	f001 fde9 	bl	8004dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031f8:	201c      	movs	r0, #28
 80031fa:	f001 fe02 	bl	8004e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40021000 	.word	0x40021000

0800320c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b09e      	sub	sp, #120	; 0x78
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003214:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	60da      	str	r2, [r3, #12]
 8003222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003224:	f107 0310 	add.w	r3, r7, #16
 8003228:	2254      	movs	r2, #84	; 0x54
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f007 fa63 	bl	800a6f8 <memset>
  if(huart->Instance==USART1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a23      	ldr	r2, [pc, #140]	; (80032c4 <HAL_UART_MspInit+0xb8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d13f      	bne.n	80032bc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800323c:	2301      	movs	r3, #1
 800323e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003240:	2300      	movs	r3, #0
 8003242:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003244:	f107 0310 	add.w	r3, r7, #16
 8003248:	4618      	mov	r0, r3
 800324a:	f003 f8b3 	bl	80063b4 <HAL_RCCEx_PeriphCLKConfig>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003254:	f7fe fca6 	bl	8001ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003258:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <HAL_UART_MspInit+0xbc>)
 800325a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800325c:	4a1a      	ldr	r2, [pc, #104]	; (80032c8 <HAL_UART_MspInit+0xbc>)
 800325e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003262:	6613      	str	r3, [r2, #96]	; 0x60
 8003264:	4b18      	ldr	r3, [pc, #96]	; (80032c8 <HAL_UART_MspInit+0xbc>)
 8003266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003268:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003270:	4b15      	ldr	r3, [pc, #84]	; (80032c8 <HAL_UART_MspInit+0xbc>)
 8003272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003274:	4a14      	ldr	r2, [pc, #80]	; (80032c8 <HAL_UART_MspInit+0xbc>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800327c:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <HAL_UART_MspInit+0xbc>)
 800327e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_SIM_Pin|UART_RX_SIM_Pin;
 8003288:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800328c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328e:	2302      	movs	r3, #2
 8003290:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	2300      	movs	r3, #0
 8003294:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003296:	2303      	movs	r3, #3
 8003298:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800329a:	2307      	movs	r3, #7
 800329c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800329e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80032a2:	4619      	mov	r1, r3
 80032a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032a8:	f002 f83c 	bl	8005324 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80032ac:	2200      	movs	r2, #0
 80032ae:	2100      	movs	r1, #0
 80032b0:	2025      	movs	r0, #37	; 0x25
 80032b2:	f001 fd8a 	bl	8004dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032b6:	2025      	movs	r0, #37	; 0x25
 80032b8:	f001 fda3 	bl	8004e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80032bc:	bf00      	nop
 80032be:	3778      	adds	r7, #120	; 0x78
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40013800 	.word	0x40013800
 80032c8:	40021000 	.word	0x40021000

080032cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032d0:	e7fe      	b.n	80032d0 <NMI_Handler+0x4>

080032d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032d2:	b480      	push	{r7}
 80032d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032d6:	e7fe      	b.n	80032d6 <HardFault_Handler+0x4>

080032d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032dc:	e7fe      	b.n	80032dc <MemManage_Handler+0x4>

080032de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032de:	b480      	push	{r7}
 80032e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032e2:	e7fe      	b.n	80032e2 <BusFault_Handler+0x4>

080032e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032e8:	e7fe      	b.n	80032e8 <UsageFault_Handler+0x4>

080032ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032ea:	b480      	push	{r7}
 80032ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032ee:	bf00      	nop
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003306:	b480      	push	{r7}
 8003308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800330a:	bf00      	nop
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003318:	f000 f994 	bl	8003644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800331c:	bf00      	nop
 800331e:	bd80      	pop	{r7, pc}

08003320 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003324:	4802      	ldr	r0, [pc, #8]	; (8003330 <RTC_WKUP_IRQHandler+0x10>)
 8003326:	f003 ffd9 	bl	80072dc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800332a:	bf00      	nop
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	200002d0 	.word	0x200002d0

08003334 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003338:	4802      	ldr	r0, [pc, #8]	; (8003344 <DMA1_Channel1_IRQHandler+0x10>)
 800333a:	f001 ff14 	bl	8005166 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800333e:	bf00      	nop
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000288 	.word	0x20000288

08003348 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800334c:	4802      	ldr	r0, [pc, #8]	; (8003358 <ADC1_IRQHandler+0x10>)
 800334e:	f000 fd63 	bl	8003e18 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20000224 	.word	0x20000224

0800335c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003360:	4802      	ldr	r0, [pc, #8]	; (800336c <TIM2_IRQHandler+0x10>)
 8003362:	f004 fccb 	bl	8007cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20000358 	.word	0x20000358

08003370 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003374:	4802      	ldr	r0, [pc, #8]	; (8003380 <USART1_IRQHandler+0x10>)
 8003376:	f005 f965 	bl	8008644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	200003a4 	.word	0x200003a4

08003384 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003388:	4802      	ldr	r0, [pc, #8]	; (8003394 <RTC_Alarm_IRQHandler+0x10>)
 800338a:	f003 fe8f 	bl	80070ac <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	200002d0 	.word	0x200002d0

08003398 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
	return 1;
 800339c:	2301      	movs	r3, #1
}
 800339e:	4618      	mov	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <_kill>:

int _kill(int pid, int sig)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80033b2:	f007 f955 	bl	800a660 <__errno>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2216      	movs	r2, #22
 80033ba:	601a      	str	r2, [r3, #0]
	return -1;
 80033bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <_exit>:

void _exit (int status)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80033d0:	f04f 31ff 	mov.w	r1, #4294967295
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff ffe7 	bl	80033a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80033da:	e7fe      	b.n	80033da <_exit+0x12>

080033dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	e00a      	b.n	8003404 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80033ee:	f3af 8000 	nop.w
 80033f2:	4601      	mov	r1, r0
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	60ba      	str	r2, [r7, #8]
 80033fa:	b2ca      	uxtb	r2, r1
 80033fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	3301      	adds	r3, #1
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	429a      	cmp	r2, r3
 800340a:	dbf0      	blt.n	80033ee <_read+0x12>
	}

return len;
 800340c:	687b      	ldr	r3, [r7, #4]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b086      	sub	sp, #24
 800341a:	af00      	add	r7, sp, #0
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	e009      	b.n	800343c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	60ba      	str	r2, [r7, #8]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	3301      	adds	r3, #1
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	429a      	cmp	r2, r3
 8003442:	dbf1      	blt.n	8003428 <_write+0x12>
	}
	return len;
 8003444:	687b      	ldr	r3, [r7, #4]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <_close>:

int _close(int file)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
	return -1;
 8003456:	f04f 33ff 	mov.w	r3, #4294967295
}
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003476:	605a      	str	r2, [r3, #4]
	return 0;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <_isatty>:

int _isatty(int file)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
	return 1;
 800348e:	2301      	movs	r3, #1
}
 8003490:	4618      	mov	r0, r3
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
	return 0;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034c0:	4a14      	ldr	r2, [pc, #80]	; (8003514 <_sbrk+0x5c>)
 80034c2:	4b15      	ldr	r3, [pc, #84]	; (8003518 <_sbrk+0x60>)
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034cc:	4b13      	ldr	r3, [pc, #76]	; (800351c <_sbrk+0x64>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d102      	bne.n	80034da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034d4:	4b11      	ldr	r3, [pc, #68]	; (800351c <_sbrk+0x64>)
 80034d6:	4a12      	ldr	r2, [pc, #72]	; (8003520 <_sbrk+0x68>)
 80034d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034da:	4b10      	ldr	r3, [pc, #64]	; (800351c <_sbrk+0x64>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4413      	add	r3, r2
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d207      	bcs.n	80034f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034e8:	f007 f8ba 	bl	800a660 <__errno>
 80034ec:	4603      	mov	r3, r0
 80034ee:	220c      	movs	r2, #12
 80034f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034f2:	f04f 33ff 	mov.w	r3, #4294967295
 80034f6:	e009      	b.n	800350c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034f8:	4b08      	ldr	r3, [pc, #32]	; (800351c <_sbrk+0x64>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034fe:	4b07      	ldr	r3, [pc, #28]	; (800351c <_sbrk+0x64>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4413      	add	r3, r2
 8003506:	4a05      	ldr	r2, [pc, #20]	; (800351c <_sbrk+0x64>)
 8003508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800350a:	68fb      	ldr	r3, [r7, #12]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20010000 	.word	0x20010000
 8003518:	00000400 	.word	0x00000400
 800351c:	200029f4 	.word	0x200029f4
 8003520:	20002a30 	.word	0x20002a30

08003524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <SystemInit+0x20>)
 800352a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352e:	4a05      	ldr	r2, [pc, #20]	; (8003544 <SystemInit+0x20>)
 8003530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	e000ed00 	.word	0xe000ed00

08003548 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003580 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800354c:	f7ff ffea 	bl	8003524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003550:	480c      	ldr	r0, [pc, #48]	; (8003584 <LoopForever+0x6>)
  ldr r1, =_edata
 8003552:	490d      	ldr	r1, [pc, #52]	; (8003588 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003554:	4a0d      	ldr	r2, [pc, #52]	; (800358c <LoopForever+0xe>)
  movs r3, #0
 8003556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003558:	e002      	b.n	8003560 <LoopCopyDataInit>

0800355a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800355a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800355c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800355e:	3304      	adds	r3, #4

08003560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003564:	d3f9      	bcc.n	800355a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003566:	4a0a      	ldr	r2, [pc, #40]	; (8003590 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003568:	4c0a      	ldr	r4, [pc, #40]	; (8003594 <LoopForever+0x16>)
  movs r3, #0
 800356a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800356c:	e001      	b.n	8003572 <LoopFillZerobss>

0800356e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800356e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003570:	3204      	adds	r2, #4

08003572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003574:	d3fb      	bcc.n	800356e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003576:	f007 f879 	bl	800a66c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800357a:	f7fd fe47 	bl	800120c <main>

0800357e <LoopForever>:

LoopForever:
    b LoopForever
 800357e:	e7fe      	b.n	800357e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003580:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003588:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 800358c:	0800fb80 	.word	0x0800fb80
  ldr r2, =_sbss
 8003590:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8003594:	20002a2c 	.word	0x20002a2c

08003598 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003598:	e7fe      	b.n	8003598 <CAN1_RX0_IRQHandler>

0800359a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035a4:	2003      	movs	r0, #3
 80035a6:	f001 fc05 	bl	8004db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035aa:	2000      	movs	r0, #0
 80035ac:	f000 f80e 	bl	80035cc <HAL_InitTick>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	71fb      	strb	r3, [r7, #7]
 80035ba:	e001      	b.n	80035c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035bc:	f7ff fcbe 	bl	8002f3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035c0:	79fb      	ldrb	r3, [r7, #7]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80035d8:	4b17      	ldr	r3, [pc, #92]	; (8003638 <HAL_InitTick+0x6c>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d023      	beq.n	8003628 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80035e0:	4b16      	ldr	r3, [pc, #88]	; (800363c <HAL_InitTick+0x70>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4b14      	ldr	r3, [pc, #80]	; (8003638 <HAL_InitTick+0x6c>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	4619      	mov	r1, r3
 80035ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80035f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f6:	4618      	mov	r0, r3
 80035f8:	f001 fc11 	bl	8004e1e <HAL_SYSTICK_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10f      	bne.n	8003622 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b0f      	cmp	r3, #15
 8003606:	d809      	bhi.n	800361c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003608:	2200      	movs	r2, #0
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	f04f 30ff 	mov.w	r0, #4294967295
 8003610:	f001 fbdb 	bl	8004dca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003614:	4a0a      	ldr	r2, [pc, #40]	; (8003640 <HAL_InitTick+0x74>)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e007      	b.n	800362c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
 8003620:	e004      	b.n	800362c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	73fb      	strb	r3, [r7, #15]
 8003626:	e001      	b.n	800362c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800362c:	7bfb      	ldrb	r3, [r7, #15]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000018 	.word	0x20000018
 800363c:	20000010 	.word	0x20000010
 8003640:	20000014 	.word	0x20000014

08003644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003648:	4b06      	ldr	r3, [pc, #24]	; (8003664 <HAL_IncTick+0x20>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	4b06      	ldr	r3, [pc, #24]	; (8003668 <HAL_IncTick+0x24>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4413      	add	r3, r2
 8003654:	4a04      	ldr	r2, [pc, #16]	; (8003668 <HAL_IncTick+0x24>)
 8003656:	6013      	str	r3, [r2, #0]
}
 8003658:	bf00      	nop
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	20000018 	.word	0x20000018
 8003668:	200029f8 	.word	0x200029f8

0800366c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  return uwTick;
 8003670:	4b03      	ldr	r3, [pc, #12]	; (8003680 <HAL_GetTick+0x14>)
 8003672:	681b      	ldr	r3, [r3, #0]
}
 8003674:	4618      	mov	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	200029f8 	.word	0x200029f8

08003684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800368c:	f7ff ffee 	bl	800366c <HAL_GetTick>
 8003690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d005      	beq.n	80036aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800369e:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <HAL_Delay+0x44>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4413      	add	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036aa:	bf00      	nop
 80036ac:	f7ff ffde 	bl	800366c <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d8f7      	bhi.n	80036ac <HAL_Delay+0x28>
  {
  }
}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20000018 	.word	0x20000018

080036cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	609a      	str	r2, [r3, #8]
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	609a      	str	r2, [r3, #8]
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	3360      	adds	r3, #96	; 0x60
 8003746:	461a      	mov	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	4b08      	ldr	r3, [pc, #32]	; (8003778 <LL_ADC_SetOffset+0x44>)
 8003756:	4013      	ands	r3, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	4313      	orrs	r3, r2
 8003764:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800376c:	bf00      	nop
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	03fff000 	.word	0x03fff000

0800377c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3360      	adds	r3, #96	; 0x60
 800378a:	461a      	mov	r2, r3
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800379c:	4618      	mov	r0, r3
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	3360      	adds	r3, #96	; 0x60
 80037b8:	461a      	mov	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	431a      	orrs	r2, r3
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80037d2:	bf00      	nop
 80037d4:	371c      	adds	r7, #28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	3330      	adds	r3, #48	; 0x30
 8003814:	461a      	mov	r2, r3
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	0a1b      	lsrs	r3, r3, #8
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	f003 030c 	and.w	r3, r3, #12
 8003820:	4413      	add	r3, r2
 8003822:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	211f      	movs	r1, #31
 8003830:	fa01 f303 	lsl.w	r3, r1, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	401a      	ands	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	0e9b      	lsrs	r3, r3, #26
 800383c:	f003 011f 	and.w	r1, r3, #31
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	fa01 f303 	lsl.w	r3, r1, r3
 800384a:	431a      	orrs	r2, r3
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003850:	bf00      	nop
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003868:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003882:	b480      	push	{r7}
 8003884:	b087      	sub	sp, #28
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3314      	adds	r3, #20
 8003892:	461a      	mov	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	0e5b      	lsrs	r3, r3, #25
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	4413      	add	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	0d1b      	lsrs	r3, r3, #20
 80038aa:	f003 031f 	and.w	r3, r3, #31
 80038ae:	2107      	movs	r1, #7
 80038b0:	fa01 f303 	lsl.w	r3, r1, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	401a      	ands	r2, r3
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	0d1b      	lsrs	r3, r3, #20
 80038bc:	f003 031f 	and.w	r3, r3, #31
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	fa01 f303 	lsl.w	r3, r1, r3
 80038c6:	431a      	orrs	r2, r3
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80038cc:	bf00      	nop
 80038ce:	371c      	adds	r7, #28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f0:	43db      	mvns	r3, r3
 80038f2:	401a      	ands	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f003 0318 	and.w	r3, r3, #24
 80038fa:	4908      	ldr	r1, [pc, #32]	; (800391c <LL_ADC_SetChannelSingleDiff+0x44>)
 80038fc:	40d9      	lsrs	r1, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	400b      	ands	r3, r1
 8003902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003906:	431a      	orrs	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800390e:	bf00      	nop
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	0007ffff 	.word	0x0007ffff

08003920 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003930:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6093      	str	r3, [r2, #8]
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003958:	d101      	bne.n	800395e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800397c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003980:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039a8:	d101      	bne.n	80039ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039d0:	f043 0201 	orr.w	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <LL_ADC_IsEnabled+0x18>
 80039f8:	2301      	movs	r3, #1
 80039fa:	e000      	b.n	80039fe <LL_ADC_IsEnabled+0x1a>
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a1a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a1e:	f043 0204 	orr.w	r2, r3, #4
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d101      	bne.n	8003a4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d101      	bne.n	8003a70 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
	...

08003a80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e12c      	b.n	8003cf4 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d109      	bne.n	8003abc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff fa6b 	bl	8002f84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff ff3f 	bl	8003944 <LL_ADC_IsDeepPowerDownEnabled>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d004      	beq.n	8003ad6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff ff25 	bl	8003920 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff ff5a 	bl	8003994 <LL_ADC_IsInternalRegulatorEnabled>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d115      	bne.n	8003b12 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff ff3e 	bl	800396c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003af0:	4b82      	ldr	r3, [pc, #520]	; (8003cfc <HAL_ADC_Init+0x27c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	099b      	lsrs	r3, r3, #6
 8003af6:	4a82      	ldr	r2, [pc, #520]	; (8003d00 <HAL_ADC_Init+0x280>)
 8003af8:	fba2 2303 	umull	r2, r3, r2, r3
 8003afc:	099b      	lsrs	r3, r3, #6
 8003afe:	3301      	adds	r3, #1
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b04:	e002      	b.n	8003b0c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f9      	bne.n	8003b06 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff ff3c 	bl	8003994 <LL_ADC_IsInternalRegulatorEnabled>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10d      	bne.n	8003b3e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b26:	f043 0210 	orr.w	r2, r3, #16
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b32:	f043 0201 	orr.w	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff ff75 	bl	8003a32 <LL_ADC_REG_IsConversionOngoing>
 8003b48:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f040 80c5 	bne.w	8003ce2 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f040 80c1 	bne.w	8003ce2 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b64:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b68:	f043 0202 	orr.w	r2, r3, #2
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff ff35 	bl	80039e4 <LL_ADC_IsEnabled>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10b      	bne.n	8003b98 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b80:	4860      	ldr	r0, [pc, #384]	; (8003d04 <HAL_ADC_Init+0x284>)
 8003b82:	f7ff ff2f 	bl	80039e4 <LL_ADC_IsEnabled>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d105      	bne.n	8003b98 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	4619      	mov	r1, r3
 8003b92:	485d      	ldr	r0, [pc, #372]	; (8003d08 <HAL_ADC_Init+0x288>)
 8003b94:	f7ff fd9a 	bl	80036cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	7e5b      	ldrb	r3, [r3, #25]
 8003b9c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ba2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003ba8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003bae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bb6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d106      	bne.n	8003bd4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	045b      	lsls	r3, r3, #17
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d009      	beq.n	8003bf0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	4b45      	ldr	r3, [pc, #276]	; (8003d0c <HAL_ADC_Init+0x28c>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6812      	ldr	r2, [r2, #0]
 8003bfe:	69b9      	ldr	r1, [r7, #24]
 8003c00:	430b      	orrs	r3, r1
 8003c02:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff ff12 	bl	8003a32 <LL_ADC_REG_IsConversionOngoing>
 8003c0e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff ff1f 	bl	8003a58 <LL_ADC_INJ_IsConversionOngoing>
 8003c1a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d13d      	bne.n	8003c9e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d13a      	bne.n	8003c9e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c2c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c34:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c36:	4313      	orrs	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c44:	f023 0302 	bic.w	r3, r3, #2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	69b9      	ldr	r1, [r7, #24]
 8003c4e:	430b      	orrs	r3, r1
 8003c50:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d118      	bne.n	8003c8e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003c66:	f023 0304 	bic.w	r3, r3, #4
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c72:	4311      	orrs	r1, r2
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003c78:	4311      	orrs	r1, r2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	431a      	orrs	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0201 	orr.w	r2, r2, #1
 8003c8a:	611a      	str	r2, [r3, #16]
 8003c8c:	e007      	b.n	8003c9e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0201 	bic.w	r2, r2, #1
 8003c9c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cac:	f023 010f 	bic.w	r1, r3, #15
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	1e5a      	subs	r2, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	631a      	str	r2, [r3, #48]	; 0x30
 8003cbe:	e007      	b.n	8003cd0 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 020f 	bic.w	r2, r2, #15
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd4:	f023 0303 	bic.w	r3, r3, #3
 8003cd8:	f043 0201 	orr.w	r2, r3, #1
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	655a      	str	r2, [r3, #84]	; 0x54
 8003ce0:	e007      	b.n	8003cf2 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce6:	f043 0210 	orr.w	r2, r3, #16
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003cf2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3720      	adds	r7, #32
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	20000010 	.word	0x20000010
 8003d00:	053e2d63 	.word	0x053e2d63
 8003d04:	50040000 	.word	0x50040000
 8003d08:	50040300 	.word	0x50040300
 8003d0c:	fff0c007 	.word	0xfff0c007

08003d10 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff fe86 	bl	8003a32 <LL_ADC_REG_IsConversionOngoing>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d167      	bne.n	8003dfc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_ADC_Start_DMA+0x2a>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e063      	b.n	8003e02 <HAL_ADC_Start_DMA+0xf2>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fe1a 	bl	800497c <ADC_Enable>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003d4c:	7dfb      	ldrb	r3, [r7, #23]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d14f      	bne.n	8003df2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d56:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d5a:	f023 0301 	bic.w	r3, r3, #1
 8003d5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d006      	beq.n	8003d80 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d76:	f023 0206 	bic.w	r2, r3, #6
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	659a      	str	r2, [r3, #88]	; 0x58
 8003d7e:	e002      	b.n	8003d86 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8a:	4a20      	ldr	r2, [pc, #128]	; (8003e0c <HAL_ADC_Start_DMA+0xfc>)
 8003d8c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d92:	4a1f      	ldr	r2, [pc, #124]	; (8003e10 <HAL_ADC_Start_DMA+0x100>)
 8003d94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9a:	4a1e      	ldr	r2, [pc, #120]	; (8003e14 <HAL_ADC_Start_DMA+0x104>)
 8003d9c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	221c      	movs	r2, #28
 8003da4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0210 	orr.w	r2, r2, #16
 8003dbc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0201 	orr.w	r2, r2, #1
 8003dcc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3340      	adds	r3, #64	; 0x40
 8003dd8:	4619      	mov	r1, r3
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f001 f8e3 	bl	8004fa8 <HAL_DMA_Start_IT>
 8003de2:	4603      	mov	r3, r0
 8003de4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff fe0d 	bl	8003a0a <LL_ADC_REG_StartConversion>
 8003df0:	e006      	b.n	8003e00 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003dfa:	e001      	b.n	8003e00 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	08004a89 	.word	0x08004a89
 8003e10:	08004b61 	.word	0x08004b61
 8003e14:	08004b7d 	.word	0x08004b7d

08003e18 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003e20:	2300      	movs	r3, #0
 8003e22:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d017      	beq.n	8003e6e <HAL_ADC_IRQHandler+0x56>
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d012      	beq.n	8003e6e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d105      	bne.n	8003e60 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e58:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fecd 	bl	8004c00 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d004      	beq.n	8003e82 <HAL_ADC_IRQHandler+0x6a>
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d05e      	beq.n	8003f4a <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d059      	beq.n	8003f4a <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d105      	bne.n	8003eae <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff fc93 	bl	80037de <LL_ADC_REG_IsTriggerSourceSWStart>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d03e      	beq.n	8003f3c <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d135      	bne.n	8003f3c <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d12e      	bne.n	8003f3c <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff fda5 	bl	8003a32 <LL_ADC_REG_IsConversionOngoing>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d11a      	bne.n	8003f24 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 020c 	bic.w	r2, r2, #12
 8003efc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d112      	bne.n	8003f3c <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1a:	f043 0201 	orr.w	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	655a      	str	r2, [r3, #84]	; 0x54
 8003f22:	e00b      	b.n	8003f3c <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f28:	f043 0210 	orr.w	r2, r3, #16
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f34:	f043 0201 	orr.w	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7fd f85b 	bl	8000ff8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	220c      	movs	r2, #12
 8003f48:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d004      	beq.n	8003f5e <HAL_ADC_IRQHandler+0x146>
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f003 0320 	and.w	r3, r3, #32
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d109      	bne.n	8003f72 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d072      	beq.n	800404e <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d06d      	beq.n	800404e <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f76:	f003 0310 	and.w	r3, r3, #16
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d105      	bne.n	8003f8a <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff fc64 	bl	800385c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003f94:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fc1f 	bl	80037de <LL_ADC_REG_IsTriggerSourceSWStart>
 8003fa0:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d047      	beq.n	8004040 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d007      	beq.n	8003fca <HAL_ADC_IRQHandler+0x1b2>
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d03f      	beq.n	8004040 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d13a      	bne.n	8004040 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd4:	2b40      	cmp	r3, #64	; 0x40
 8003fd6:	d133      	bne.n	8004040 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d12e      	bne.n	8004040 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff fd36 	bl	8003a58 <LL_ADC_INJ_IsConversionOngoing>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d11a      	bne.n	8004028 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004000:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004016:	2b00      	cmp	r3, #0
 8004018:	d112      	bne.n	8004040 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401e:	f043 0201 	orr.w	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	655a      	str	r2, [r3, #84]	; 0x54
 8004026:	e00b      	b.n	8004040 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402c:	f043 0210 	orr.w	r2, r3, #16
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004038:	f043 0201 	orr.w	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fdb5 	bl	8004bb0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2260      	movs	r2, #96	; 0x60
 800404c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004054:	2b00      	cmp	r3, #0
 8004056:	d011      	beq.n	800407c <HAL_ADC_IRQHandler+0x264>
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00c      	beq.n	800407c <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004066:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f890 	bl	8004194 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2280      	movs	r2, #128	; 0x80
 800407a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004082:	2b00      	cmp	r3, #0
 8004084:	d012      	beq.n	80040ac <HAL_ADC_IRQHandler+0x294>
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00d      	beq.n	80040ac <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 fd9b 	bl	8004bd8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d012      	beq.n	80040dc <HAL_ADC_IRQHandler+0x2c4>
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00d      	beq.n	80040dc <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 fd8d 	bl	8004bec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	f003 0310 	and.w	r3, r3, #16
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d02a      	beq.n	800413c <HAL_ADC_IRQHandler+0x324>
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d025      	beq.n	800413c <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80040f8:	2301      	movs	r3, #1
 80040fa:	61fb      	str	r3, [r7, #28]
 80040fc:	e008      	b.n	8004110 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800410c:	2301      	movs	r3, #1
 800410e:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d10e      	bne.n	8004134 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004126:	f043 0202 	orr.w	r2, r3, #2
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f83a 	bl	80041a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2210      	movs	r2, #16
 800413a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004142:	2b00      	cmp	r3, #0
 8004144:	d018      	beq.n	8004178 <HAL_ADC_IRQHandler+0x360>
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414c:	2b00      	cmp	r3, #0
 800414e:	d013      	beq.n	8004178 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004154:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004160:	f043 0208 	orr.w	r2, r3, #8
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004170:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fd26 	bl	8004bc4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004178:	bf00      	nop
 800417a:	3720      	adds	r7, #32
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b0b6      	sub	sp, #216	; 0xd8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_ADC_ConfigChannel+0x22>
 80041da:	2302      	movs	r3, #2
 80041dc:	e3b9      	b.n	8004952 <HAL_ADC_ConfigChannel+0x796>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fc21 	bl	8003a32 <LL_ADC_REG_IsConversionOngoing>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f040 839e 	bne.w	8004934 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b05      	cmp	r3, #5
 80041fe:	d824      	bhi.n	800424a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	3b02      	subs	r3, #2
 8004206:	2b03      	cmp	r3, #3
 8004208:	d81b      	bhi.n	8004242 <HAL_ADC_ConfigChannel+0x86>
 800420a:	a201      	add	r2, pc, #4	; (adr r2, 8004210 <HAL_ADC_ConfigChannel+0x54>)
 800420c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004210:	08004221 	.word	0x08004221
 8004214:	08004229 	.word	0x08004229
 8004218:	08004231 	.word	0x08004231
 800421c:	08004239 	.word	0x08004239
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	220c      	movs	r2, #12
 8004224:	605a      	str	r2, [r3, #4]
          break;
 8004226:	e011      	b.n	800424c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2212      	movs	r2, #18
 800422c:	605a      	str	r2, [r3, #4]
          break;
 800422e:	e00d      	b.n	800424c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2218      	movs	r2, #24
 8004234:	605a      	str	r2, [r3, #4]
          break;
 8004236:	e009      	b.n	800424c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800423e:	605a      	str	r2, [r3, #4]
          break;
 8004240:	e004      	b.n	800424c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2206      	movs	r2, #6
 8004246:	605a      	str	r2, [r3, #4]
          break;
 8004248:	e000      	b.n	800424c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800424a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	6859      	ldr	r1, [r3, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	f7ff fad3 	bl	8003804 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fbe5 	bl	8003a32 <LL_ADC_REG_IsConversionOngoing>
 8004268:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff fbf1 	bl	8003a58 <LL_ADC_INJ_IsConversionOngoing>
 8004276:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800427a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800427e:	2b00      	cmp	r3, #0
 8004280:	f040 81a6 	bne.w	80045d0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004284:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004288:	2b00      	cmp	r3, #0
 800428a:	f040 81a1 	bne.w	80045d0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6818      	ldr	r0, [r3, #0]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	6819      	ldr	r1, [r3, #0]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	461a      	mov	r2, r3
 800429c:	f7ff faf1 	bl	8003882 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	695a      	ldr	r2, [r3, #20]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	08db      	lsrs	r3, r3, #3
 80042ac:	f003 0303 	and.w	r3, r3, #3
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d00a      	beq.n	80042d8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6919      	ldr	r1, [r3, #16]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042d2:	f7ff fa2f 	bl	8003734 <LL_ADC_SetOffset>
 80042d6:	e17b      	b.n	80045d0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff fa4c 	bl	800377c <LL_ADC_GetOffsetChannel>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10a      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x148>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2100      	movs	r1, #0
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff fa41 	bl	800377c <LL_ADC_GetOffsetChannel>
 80042fa:	4603      	mov	r3, r0
 80042fc:	0e9b      	lsrs	r3, r3, #26
 80042fe:	f003 021f 	and.w	r2, r3, #31
 8004302:	e01e      	b.n	8004342 <HAL_ADC_ConfigChannel+0x186>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2100      	movs	r1, #0
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff fa36 	bl	800377c <LL_ADC_GetOffsetChannel>
 8004310:	4603      	mov	r3, r0
 8004312:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004316:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800431a:	fa93 f3a3 	rbit	r3, r3
 800431e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004322:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004326:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800432a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8004332:	2320      	movs	r3, #32
 8004334:	e004      	b.n	8004340 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004336:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800433a:	fab3 f383 	clz	r3, r3
 800433e:	b2db      	uxtb	r3, r3
 8004340:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800434a:	2b00      	cmp	r3, #0
 800434c:	d105      	bne.n	800435a <HAL_ADC_ConfigChannel+0x19e>
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	0e9b      	lsrs	r3, r3, #26
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	e018      	b.n	800438c <HAL_ADC_ConfigChannel+0x1d0>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004362:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004366:	fa93 f3a3 	rbit	r3, r3
 800436a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800436e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004372:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004376:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800437e:	2320      	movs	r3, #32
 8004380:	e004      	b.n	800438c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004382:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004386:	fab3 f383 	clz	r3, r3
 800438a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800438c:	429a      	cmp	r2, r3
 800438e:	d106      	bne.n	800439e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2200      	movs	r2, #0
 8004396:	2100      	movs	r1, #0
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fa05 	bl	80037a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2101      	movs	r1, #1
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff f9e9 	bl	800377c <LL_ADC_GetOffsetChannel>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10a      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x20e>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2101      	movs	r1, #1
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff f9de 	bl	800377c <LL_ADC_GetOffsetChannel>
 80043c0:	4603      	mov	r3, r0
 80043c2:	0e9b      	lsrs	r3, r3, #26
 80043c4:	f003 021f 	and.w	r2, r3, #31
 80043c8:	e01e      	b.n	8004408 <HAL_ADC_ConfigChannel+0x24c>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2101      	movs	r1, #1
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff f9d3 	bl	800377c <LL_ADC_GetOffsetChannel>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043e0:	fa93 f3a3 	rbit	r3, r3
 80043e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80043e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80043f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80043f8:	2320      	movs	r3, #32
 80043fa:	e004      	b.n	8004406 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80043fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004400:	fab3 f383 	clz	r3, r3
 8004404:	b2db      	uxtb	r3, r3
 8004406:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004410:	2b00      	cmp	r3, #0
 8004412:	d105      	bne.n	8004420 <HAL_ADC_ConfigChannel+0x264>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	0e9b      	lsrs	r3, r3, #26
 800441a:	f003 031f 	and.w	r3, r3, #31
 800441e:	e018      	b.n	8004452 <HAL_ADC_ConfigChannel+0x296>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004428:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800442c:	fa93 f3a3 	rbit	r3, r3
 8004430:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004434:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004438:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800443c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004444:	2320      	movs	r3, #32
 8004446:	e004      	b.n	8004452 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004448:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800444c:	fab3 f383 	clz	r3, r3
 8004450:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004452:	429a      	cmp	r2, r3
 8004454:	d106      	bne.n	8004464 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2200      	movs	r2, #0
 800445c:	2101      	movs	r1, #1
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff f9a2 	bl	80037a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2102      	movs	r1, #2
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff f986 	bl	800377c <LL_ADC_GetOffsetChannel>
 8004470:	4603      	mov	r3, r0
 8004472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10a      	bne.n	8004490 <HAL_ADC_ConfigChannel+0x2d4>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2102      	movs	r1, #2
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff f97b 	bl	800377c <LL_ADC_GetOffsetChannel>
 8004486:	4603      	mov	r3, r0
 8004488:	0e9b      	lsrs	r3, r3, #26
 800448a:	f003 021f 	and.w	r2, r3, #31
 800448e:	e01e      	b.n	80044ce <HAL_ADC_ConfigChannel+0x312>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2102      	movs	r1, #2
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff f970 	bl	800377c <LL_ADC_GetOffsetChannel>
 800449c:	4603      	mov	r3, r0
 800449e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044a6:	fa93 f3a3 	rbit	r3, r3
 80044aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80044ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80044b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80044be:	2320      	movs	r3, #32
 80044c0:	e004      	b.n	80044cc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80044c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044c6:	fab3 f383 	clz	r3, r3
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d105      	bne.n	80044e6 <HAL_ADC_ConfigChannel+0x32a>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	0e9b      	lsrs	r3, r3, #26
 80044e0:	f003 031f 	and.w	r3, r3, #31
 80044e4:	e016      	b.n	8004514 <HAL_ADC_ConfigChannel+0x358>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044f2:	fa93 f3a3 	rbit	r3, r3
 80044f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80044f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80044fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004506:	2320      	movs	r3, #32
 8004508:	e004      	b.n	8004514 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800450a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800450e:	fab3 f383 	clz	r3, r3
 8004512:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004514:	429a      	cmp	r2, r3
 8004516:	d106      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2200      	movs	r2, #0
 800451e:	2102      	movs	r1, #2
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff f941 	bl	80037a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2103      	movs	r1, #3
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff f925 	bl	800377c <LL_ADC_GetOffsetChannel>
 8004532:	4603      	mov	r3, r0
 8004534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <HAL_ADC_ConfigChannel+0x396>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2103      	movs	r1, #3
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff f91a 	bl	800377c <LL_ADC_GetOffsetChannel>
 8004548:	4603      	mov	r3, r0
 800454a:	0e9b      	lsrs	r3, r3, #26
 800454c:	f003 021f 	and.w	r2, r3, #31
 8004550:	e017      	b.n	8004582 <HAL_ADC_ConfigChannel+0x3c6>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2103      	movs	r1, #3
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff f90f 	bl	800377c <LL_ADC_GetOffsetChannel>
 800455e:	4603      	mov	r3, r0
 8004560:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004564:	fa93 f3a3 	rbit	r3, r3
 8004568:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800456a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800456c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800456e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004574:	2320      	movs	r3, #32
 8004576:	e003      	b.n	8004580 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800457a:	fab3 f383 	clz	r3, r3
 800457e:	b2db      	uxtb	r3, r3
 8004580:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800458a:	2b00      	cmp	r3, #0
 800458c:	d105      	bne.n	800459a <HAL_ADC_ConfigChannel+0x3de>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	0e9b      	lsrs	r3, r3, #26
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	e011      	b.n	80045be <HAL_ADC_ConfigChannel+0x402>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045a2:	fa93 f3a3 	rbit	r3, r3
 80045a6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80045a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80045ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80045b2:	2320      	movs	r3, #32
 80045b4:	e003      	b.n	80045be <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80045b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b8:	fab3 f383 	clz	r3, r3
 80045bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045be:	429a      	cmp	r2, r3
 80045c0:	d106      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2200      	movs	r2, #0
 80045c8:	2103      	movs	r1, #3
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff f8ec 	bl	80037a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff fa05 	bl	80039e4 <LL_ADC_IsEnabled>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f040 813f 	bne.w	8004860 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	6819      	ldr	r1, [r3, #0]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	461a      	mov	r2, r3
 80045f0:	f7ff f972 	bl	80038d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	4a8e      	ldr	r2, [pc, #568]	; (8004834 <HAL_ADC_ConfigChannel+0x678>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	f040 8130 	bne.w	8004860 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10b      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x46c>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	0e9b      	lsrs	r3, r3, #26
 8004616:	3301      	adds	r3, #1
 8004618:	f003 031f 	and.w	r3, r3, #31
 800461c:	2b09      	cmp	r3, #9
 800461e:	bf94      	ite	ls
 8004620:	2301      	movls	r3, #1
 8004622:	2300      	movhi	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	e019      	b.n	800465c <HAL_ADC_ConfigChannel+0x4a0>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004630:	fa93 f3a3 	rbit	r3, r3
 8004634:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004636:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004638:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800463a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004640:	2320      	movs	r3, #32
 8004642:	e003      	b.n	800464c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004644:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004646:	fab3 f383 	clz	r3, r3
 800464a:	b2db      	uxtb	r3, r3
 800464c:	3301      	adds	r3, #1
 800464e:	f003 031f 	and.w	r3, r3, #31
 8004652:	2b09      	cmp	r3, #9
 8004654:	bf94      	ite	ls
 8004656:	2301      	movls	r3, #1
 8004658:	2300      	movhi	r3, #0
 800465a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800465c:	2b00      	cmp	r3, #0
 800465e:	d079      	beq.n	8004754 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004668:	2b00      	cmp	r3, #0
 800466a:	d107      	bne.n	800467c <HAL_ADC_ConfigChannel+0x4c0>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	0e9b      	lsrs	r3, r3, #26
 8004672:	3301      	adds	r3, #1
 8004674:	069b      	lsls	r3, r3, #26
 8004676:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800467a:	e015      	b.n	80046a8 <HAL_ADC_ConfigChannel+0x4ec>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004684:	fa93 f3a3 	rbit	r3, r3
 8004688:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800468a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800468c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800468e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004694:	2320      	movs	r3, #32
 8004696:	e003      	b.n	80046a0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800469a:	fab3 f383 	clz	r3, r3
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	3301      	adds	r3, #1
 80046a2:	069b      	lsls	r3, r3, #26
 80046a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d109      	bne.n	80046c8 <HAL_ADC_ConfigChannel+0x50c>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	0e9b      	lsrs	r3, r3, #26
 80046ba:	3301      	adds	r3, #1
 80046bc:	f003 031f 	and.w	r3, r3, #31
 80046c0:	2101      	movs	r1, #1
 80046c2:	fa01 f303 	lsl.w	r3, r1, r3
 80046c6:	e017      	b.n	80046f8 <HAL_ADC_ConfigChannel+0x53c>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046d0:	fa93 f3a3 	rbit	r3, r3
 80046d4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80046d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80046da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80046e0:	2320      	movs	r3, #32
 80046e2:	e003      	b.n	80046ec <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80046e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e6:	fab3 f383 	clz	r3, r3
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	3301      	adds	r3, #1
 80046ee:	f003 031f 	and.w	r3, r3, #31
 80046f2:	2101      	movs	r1, #1
 80046f4:	fa01 f303 	lsl.w	r3, r1, r3
 80046f8:	ea42 0103 	orr.w	r1, r2, r3
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10a      	bne.n	800471e <HAL_ADC_ConfigChannel+0x562>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	0e9b      	lsrs	r3, r3, #26
 800470e:	3301      	adds	r3, #1
 8004710:	f003 021f 	and.w	r2, r3, #31
 8004714:	4613      	mov	r3, r2
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	4413      	add	r3, r2
 800471a:	051b      	lsls	r3, r3, #20
 800471c:	e018      	b.n	8004750 <HAL_ADC_ConfigChannel+0x594>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004726:	fa93 f3a3 	rbit	r3, r3
 800472a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800472c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004736:	2320      	movs	r3, #32
 8004738:	e003      	b.n	8004742 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800473a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800473c:	fab3 f383 	clz	r3, r3
 8004740:	b2db      	uxtb	r3, r3
 8004742:	3301      	adds	r3, #1
 8004744:	f003 021f 	and.w	r2, r3, #31
 8004748:	4613      	mov	r3, r2
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	4413      	add	r3, r2
 800474e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004750:	430b      	orrs	r3, r1
 8004752:	e080      	b.n	8004856 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800475c:	2b00      	cmp	r3, #0
 800475e:	d107      	bne.n	8004770 <HAL_ADC_ConfigChannel+0x5b4>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	0e9b      	lsrs	r3, r3, #26
 8004766:	3301      	adds	r3, #1
 8004768:	069b      	lsls	r3, r3, #26
 800476a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800476e:	e015      	b.n	800479c <HAL_ADC_ConfigChannel+0x5e0>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004778:	fa93 f3a3 	rbit	r3, r3
 800477c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004788:	2320      	movs	r3, #32
 800478a:	e003      	b.n	8004794 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800478c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478e:	fab3 f383 	clz	r3, r3
 8004792:	b2db      	uxtb	r3, r3
 8004794:	3301      	adds	r3, #1
 8004796:	069b      	lsls	r3, r3, #26
 8004798:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d109      	bne.n	80047bc <HAL_ADC_ConfigChannel+0x600>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	0e9b      	lsrs	r3, r3, #26
 80047ae:	3301      	adds	r3, #1
 80047b0:	f003 031f 	and.w	r3, r3, #31
 80047b4:	2101      	movs	r1, #1
 80047b6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ba:	e017      	b.n	80047ec <HAL_ADC_ConfigChannel+0x630>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	fa93 f3a3 	rbit	r3, r3
 80047c8:	61fb      	str	r3, [r7, #28]
  return result;
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80047d4:	2320      	movs	r3, #32
 80047d6:	e003      	b.n	80047e0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	fab3 f383 	clz	r3, r3
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	3301      	adds	r3, #1
 80047e2:	f003 031f 	and.w	r3, r3, #31
 80047e6:	2101      	movs	r1, #1
 80047e8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ec:	ea42 0103 	orr.w	r1, r2, r3
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10d      	bne.n	8004818 <HAL_ADC_ConfigChannel+0x65c>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	0e9b      	lsrs	r3, r3, #26
 8004802:	3301      	adds	r3, #1
 8004804:	f003 021f 	and.w	r2, r3, #31
 8004808:	4613      	mov	r3, r2
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	4413      	add	r3, r2
 800480e:	3b1e      	subs	r3, #30
 8004810:	051b      	lsls	r3, r3, #20
 8004812:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004816:	e01d      	b.n	8004854 <HAL_ADC_ConfigChannel+0x698>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	fa93 f3a3 	rbit	r3, r3
 8004824:	613b      	str	r3, [r7, #16]
  return result;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d103      	bne.n	8004838 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004830:	2320      	movs	r3, #32
 8004832:	e005      	b.n	8004840 <HAL_ADC_ConfigChannel+0x684>
 8004834:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	fab3 f383 	clz	r3, r3
 800483e:	b2db      	uxtb	r3, r3
 8004840:	3301      	adds	r3, #1
 8004842:	f003 021f 	and.w	r2, r3, #31
 8004846:	4613      	mov	r3, r2
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	4413      	add	r3, r2
 800484c:	3b1e      	subs	r3, #30
 800484e:	051b      	lsls	r3, r3, #20
 8004850:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004854:	430b      	orrs	r3, r1
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	6892      	ldr	r2, [r2, #8]
 800485a:	4619      	mov	r1, r3
 800485c:	f7ff f811 	bl	8003882 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	4b3d      	ldr	r3, [pc, #244]	; (800495c <HAL_ADC_ConfigChannel+0x7a0>)
 8004866:	4013      	ands	r3, r2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d06c      	beq.n	8004946 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800486c:	483c      	ldr	r0, [pc, #240]	; (8004960 <HAL_ADC_ConfigChannel+0x7a4>)
 800486e:	f7fe ff53 	bl	8003718 <LL_ADC_GetCommonPathInternalCh>
 8004872:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a3a      	ldr	r2, [pc, #232]	; (8004964 <HAL_ADC_ConfigChannel+0x7a8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d127      	bne.n	80048d0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004880:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004884:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d121      	bne.n	80048d0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a35      	ldr	r2, [pc, #212]	; (8004968 <HAL_ADC_ConfigChannel+0x7ac>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d157      	bne.n	8004946 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004896:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800489a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800489e:	4619      	mov	r1, r3
 80048a0:	482f      	ldr	r0, [pc, #188]	; (8004960 <HAL_ADC_ConfigChannel+0x7a4>)
 80048a2:	f7fe ff26 	bl	80036f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048a6:	4b31      	ldr	r3, [pc, #196]	; (800496c <HAL_ADC_ConfigChannel+0x7b0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	099b      	lsrs	r3, r3, #6
 80048ac:	4a30      	ldr	r2, [pc, #192]	; (8004970 <HAL_ADC_ConfigChannel+0x7b4>)
 80048ae:	fba2 2303 	umull	r2, r3, r2, r3
 80048b2:	099b      	lsrs	r3, r3, #6
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	4613      	mov	r3, r2
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	4413      	add	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80048c0:	e002      	b.n	80048c8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3b01      	subs	r3, #1
 80048c6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f9      	bne.n	80048c2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048ce:	e03a      	b.n	8004946 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a27      	ldr	r2, [pc, #156]	; (8004974 <HAL_ADC_ConfigChannel+0x7b8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d113      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x746>
 80048da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10d      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a1f      	ldr	r2, [pc, #124]	; (8004968 <HAL_ADC_ConfigChannel+0x7ac>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d12a      	bne.n	8004946 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048f8:	4619      	mov	r1, r3
 80048fa:	4819      	ldr	r0, [pc, #100]	; (8004960 <HAL_ADC_ConfigChannel+0x7a4>)
 80048fc:	f7fe fef9 	bl	80036f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004900:	e021      	b.n	8004946 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1c      	ldr	r2, [pc, #112]	; (8004978 <HAL_ADC_ConfigChannel+0x7bc>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d11c      	bne.n	8004946 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800490c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d116      	bne.n	8004946 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a12      	ldr	r2, [pc, #72]	; (8004968 <HAL_ADC_ConfigChannel+0x7ac>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d111      	bne.n	8004946 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004922:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004926:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800492a:	4619      	mov	r1, r3
 800492c:	480c      	ldr	r0, [pc, #48]	; (8004960 <HAL_ADC_ConfigChannel+0x7a4>)
 800492e:	f7fe fee0 	bl	80036f2 <LL_ADC_SetCommonPathInternalCh>
 8004932:	e008      	b.n	8004946 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004938:	f043 0220 	orr.w	r2, r3, #32
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800494e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004952:	4618      	mov	r0, r3
 8004954:	37d8      	adds	r7, #216	; 0xd8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	80080000 	.word	0x80080000
 8004960:	50040300 	.word	0x50040300
 8004964:	c7520000 	.word	0xc7520000
 8004968:	50040000 	.word	0x50040000
 800496c:	20000010 	.word	0x20000010
 8004970:	053e2d63 	.word	0x053e2d63
 8004974:	cb840000 	.word	0xcb840000
 8004978:	80000001 	.word	0x80000001

0800497c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004984:	2300      	movs	r3, #0
 8004986:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff f829 	bl	80039e4 <LL_ADC_IsEnabled>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d169      	bne.n	8004a6c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	4b36      	ldr	r3, [pc, #216]	; (8004a78 <ADC_Enable+0xfc>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00d      	beq.n	80049c2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049aa:	f043 0210 	orr.w	r2, r3, #16
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b6:	f043 0201 	orr.w	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e055      	b.n	8004a6e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fe fff8 	bl	80039bc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80049cc:	482b      	ldr	r0, [pc, #172]	; (8004a7c <ADC_Enable+0x100>)
 80049ce:	f7fe fea3 	bl	8003718 <LL_ADC_GetCommonPathInternalCh>
 80049d2:	4603      	mov	r3, r0
 80049d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d013      	beq.n	8004a04 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049dc:	4b28      	ldr	r3, [pc, #160]	; (8004a80 <ADC_Enable+0x104>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	099b      	lsrs	r3, r3, #6
 80049e2:	4a28      	ldr	r2, [pc, #160]	; (8004a84 <ADC_Enable+0x108>)
 80049e4:	fba2 2303 	umull	r2, r3, r2, r3
 80049e8:	099b      	lsrs	r3, r3, #6
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	4613      	mov	r3, r2
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80049f6:	e002      	b.n	80049fe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1f9      	bne.n	80049f8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004a04:	f7fe fe32 	bl	800366c <HAL_GetTick>
 8004a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a0a:	e028      	b.n	8004a5e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fe ffe7 	bl	80039e4 <LL_ADC_IsEnabled>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d104      	bne.n	8004a26 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fe ffcb 	bl	80039bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a26:	f7fe fe21 	bl	800366c <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d914      	bls.n	8004a5e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d00d      	beq.n	8004a5e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a46:	f043 0210 	orr.w	r2, r3, #16
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a52:	f043 0201 	orr.w	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e007      	b.n	8004a6e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d1cf      	bne.n	8004a0c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	8000003f 	.word	0x8000003f
 8004a7c:	50040300 	.word	0x50040300
 8004a80:	20000010 	.word	0x20000010
 8004a84:	053e2d63 	.word	0x053e2d63

08004a88 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d14b      	bne.n	8004b3a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d021      	beq.n	8004b00 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fe fe8c 	bl	80037de <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d032      	beq.n	8004b32 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d12b      	bne.n	8004b32 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ade:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d11f      	bne.n	8004b32 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af6:	f043 0201 	orr.w	r2, r3, #1
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	655a      	str	r2, [r3, #84]	; 0x54
 8004afe:	e018      	b.n	8004b32 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d111      	bne.n	8004b32 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d105      	bne.n	8004b32 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2a:	f043 0201 	orr.w	r2, r3, #1
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f7fc fa60 	bl	8000ff8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004b38:	e00e      	b.n	8004b58 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3e:	f003 0310 	and.w	r3, r3, #16
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f7ff fb2e 	bl	80041a8 <HAL_ADC_ErrorCallback>
}
 8004b4c:	e004      	b.n	8004b58 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	4798      	blx	r3
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f7ff fb06 	bl	8004180 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b74:	bf00      	nop
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9a:	f043 0204 	orr.w	r2, r3, #4
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f7ff fb00 	bl	80041a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ba8:	bf00      	nop
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c24:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <__NVIC_SetPriorityGrouping+0x44>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c30:	4013      	ands	r3, r2
 8004c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c46:	4a04      	ldr	r2, [pc, #16]	; (8004c58 <__NVIC_SetPriorityGrouping+0x44>)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	60d3      	str	r3, [r2, #12]
}
 8004c4c:	bf00      	nop
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	e000ed00 	.word	0xe000ed00

08004c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c60:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <__NVIC_GetPriorityGrouping+0x18>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	0a1b      	lsrs	r3, r3, #8
 8004c66:	f003 0307 	and.w	r3, r3, #7
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	e000ed00 	.word	0xe000ed00

08004c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	4603      	mov	r3, r0
 8004c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	db0b      	blt.n	8004ca2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	f003 021f 	and.w	r2, r3, #31
 8004c90:	4907      	ldr	r1, [pc, #28]	; (8004cb0 <__NVIC_EnableIRQ+0x38>)
 8004c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	2001      	movs	r0, #1
 8004c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	e000e100 	.word	0xe000e100

08004cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	6039      	str	r1, [r7, #0]
 8004cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	db0a      	blt.n	8004cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	490c      	ldr	r1, [pc, #48]	; (8004d00 <__NVIC_SetPriority+0x4c>)
 8004cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd2:	0112      	lsls	r2, r2, #4
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cdc:	e00a      	b.n	8004cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	4908      	ldr	r1, [pc, #32]	; (8004d04 <__NVIC_SetPriority+0x50>)
 8004ce4:	79fb      	ldrb	r3, [r7, #7]
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	3b04      	subs	r3, #4
 8004cec:	0112      	lsls	r2, r2, #4
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	761a      	strb	r2, [r3, #24]
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	e000e100 	.word	0xe000e100
 8004d04:	e000ed00 	.word	0xe000ed00

08004d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b089      	sub	sp, #36	; 0x24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	f1c3 0307 	rsb	r3, r3, #7
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	bf28      	it	cs
 8004d26:	2304      	movcs	r3, #4
 8004d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	2b06      	cmp	r3, #6
 8004d30:	d902      	bls.n	8004d38 <NVIC_EncodePriority+0x30>
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	3b03      	subs	r3, #3
 8004d36:	e000      	b.n	8004d3a <NVIC_EncodePriority+0x32>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	43da      	mvns	r2, r3
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	401a      	ands	r2, r3
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d50:	f04f 31ff 	mov.w	r1, #4294967295
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5a:	43d9      	mvns	r1, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d60:	4313      	orrs	r3, r2
         );
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3724      	adds	r7, #36	; 0x24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
	...

08004d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d80:	d301      	bcc.n	8004d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d82:	2301      	movs	r3, #1
 8004d84:	e00f      	b.n	8004da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d86:	4a0a      	ldr	r2, [pc, #40]	; (8004db0 <SysTick_Config+0x40>)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d8e:	210f      	movs	r1, #15
 8004d90:	f04f 30ff 	mov.w	r0, #4294967295
 8004d94:	f7ff ff8e 	bl	8004cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <SysTick_Config+0x40>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d9e:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <SysTick_Config+0x40>)
 8004da0:	2207      	movs	r2, #7
 8004da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	e000e010 	.word	0xe000e010

08004db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff ff29 	bl	8004c14 <__NVIC_SetPriorityGrouping>
}
 8004dc2:	bf00      	nop
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b086      	sub	sp, #24
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	607a      	str	r2, [r7, #4]
 8004dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ddc:	f7ff ff3e 	bl	8004c5c <__NVIC_GetPriorityGrouping>
 8004de0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	68b9      	ldr	r1, [r7, #8]
 8004de6:	6978      	ldr	r0, [r7, #20]
 8004de8:	f7ff ff8e 	bl	8004d08 <NVIC_EncodePriority>
 8004dec:	4602      	mov	r2, r0
 8004dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004df2:	4611      	mov	r1, r2
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff ff5d 	bl	8004cb4 <__NVIC_SetPriority>
}
 8004dfa:	bf00      	nop
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b082      	sub	sp, #8
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	4603      	mov	r3, r0
 8004e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff ff31 	bl	8004c78 <__NVIC_EnableIRQ>
}
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b082      	sub	sp, #8
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff ffa2 	bl	8004d70 <SysTick_Config>
 8004e2c:	4603      	mov	r3, r0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
	...

08004e38 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e098      	b.n	8004f7c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	4b4d      	ldr	r3, [pc, #308]	; (8004f88 <HAL_DMA_Init+0x150>)
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d80f      	bhi.n	8004e76 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	4b4b      	ldr	r3, [pc, #300]	; (8004f8c <HAL_DMA_Init+0x154>)
 8004e5e:	4413      	add	r3, r2
 8004e60:	4a4b      	ldr	r2, [pc, #300]	; (8004f90 <HAL_DMA_Init+0x158>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	091b      	lsrs	r3, r3, #4
 8004e68:	009a      	lsls	r2, r3, #2
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a48      	ldr	r2, [pc, #288]	; (8004f94 <HAL_DMA_Init+0x15c>)
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40
 8004e74:	e00e      	b.n	8004e94 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	4b46      	ldr	r3, [pc, #280]	; (8004f98 <HAL_DMA_Init+0x160>)
 8004e7e:	4413      	add	r3, r2
 8004e80:	4a43      	ldr	r2, [pc, #268]	; (8004f90 <HAL_DMA_Init+0x158>)
 8004e82:	fba2 2303 	umull	r2, r3, r2, r3
 8004e86:	091b      	lsrs	r3, r3, #4
 8004e88:	009a      	lsls	r2, r3, #2
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a42      	ldr	r2, [pc, #264]	; (8004f9c <HAL_DMA_Init+0x164>)
 8004e92:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ed0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eee:	d039      	beq.n	8004f64 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef4:	4a27      	ldr	r2, [pc, #156]	; (8004f94 <HAL_DMA_Init+0x15c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d11a      	bne.n	8004f30 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004efa:	4b29      	ldr	r3, [pc, #164]	; (8004fa0 <HAL_DMA_Init+0x168>)
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f02:	f003 031c 	and.w	r3, r3, #28
 8004f06:	210f      	movs	r1, #15
 8004f08:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	4924      	ldr	r1, [pc, #144]	; (8004fa0 <HAL_DMA_Init+0x168>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004f14:	4b22      	ldr	r3, [pc, #136]	; (8004fa0 <HAL_DMA_Init+0x168>)
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6859      	ldr	r1, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f20:	f003 031c 	and.w	r3, r3, #28
 8004f24:	fa01 f303 	lsl.w	r3, r1, r3
 8004f28:	491d      	ldr	r1, [pc, #116]	; (8004fa0 <HAL_DMA_Init+0x168>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	600b      	str	r3, [r1, #0]
 8004f2e:	e019      	b.n	8004f64 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004f30:	4b1c      	ldr	r3, [pc, #112]	; (8004fa4 <HAL_DMA_Init+0x16c>)
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f38:	f003 031c 	and.w	r3, r3, #28
 8004f3c:	210f      	movs	r1, #15
 8004f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f42:	43db      	mvns	r3, r3
 8004f44:	4917      	ldr	r1, [pc, #92]	; (8004fa4 <HAL_DMA_Init+0x16c>)
 8004f46:	4013      	ands	r3, r2
 8004f48:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004f4a:	4b16      	ldr	r3, [pc, #88]	; (8004fa4 <HAL_DMA_Init+0x16c>)
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6859      	ldr	r1, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	f003 031c 	and.w	r3, r3, #28
 8004f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5e:	4911      	ldr	r1, [pc, #68]	; (8004fa4 <HAL_DMA_Init+0x16c>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	40020407 	.word	0x40020407
 8004f8c:	bffdfff8 	.word	0xbffdfff8
 8004f90:	cccccccd 	.word	0xcccccccd
 8004f94:	40020000 	.word	0x40020000
 8004f98:	bffdfbf8 	.word	0xbffdfbf8
 8004f9c:	40020400 	.word	0x40020400
 8004fa0:	400200a8 	.word	0x400200a8
 8004fa4:	400204a8 	.word	0x400204a8

08004fa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_DMA_Start_IT+0x20>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e04b      	b.n	8005060 <HAL_DMA_Start_IT+0xb8>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d13a      	bne.n	8005052 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0201 	bic.w	r2, r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	68b9      	ldr	r1, [r7, #8]
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f000 f95f 	bl	80052c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	2b00      	cmp	r3, #0
 800500c:	d008      	beq.n	8005020 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 020e 	orr.w	r2, r2, #14
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e00f      	b.n	8005040 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0204 	bic.w	r2, r2, #4
 800502e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 020a 	orr.w	r2, r2, #10
 800503e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0201 	orr.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	e005      	b.n	800505e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800505a:	2302      	movs	r3, #2
 800505c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800505e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d008      	beq.n	8005092 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2204      	movs	r2, #4
 8005084:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e022      	b.n	80050d8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 020e 	bic.w	r2, r2, #14
 80050a0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0201 	bic.w	r2, r2, #1
 80050b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b6:	f003 021c 	and.w	r2, r3, #28
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	2101      	movs	r1, #1
 80050c0:	fa01 f202 	lsl.w	r2, r1, r2
 80050c4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80050d6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d005      	beq.n	8005108 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2204      	movs	r2, #4
 8005100:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	73fb      	strb	r3, [r7, #15]
 8005106:	e029      	b.n	800515c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 020e 	bic.w	r2, r2, #14
 8005116:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0201 	bic.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512c:	f003 021c 	and.w	r2, r3, #28
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005134:	2101      	movs	r1, #1
 8005136:	fa01 f202 	lsl.w	r2, r1, r2
 800513a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4798      	blx	r3
    }
  }
  return status;
 800515c:	7bfb      	ldrb	r3, [r7, #15]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005182:	f003 031c 	and.w	r3, r3, #28
 8005186:	2204      	movs	r2, #4
 8005188:	409a      	lsls	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4013      	ands	r3, r2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d026      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x7a>
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b00      	cmp	r3, #0
 800519a:	d021      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d107      	bne.n	80051ba <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0204 	bic.w	r2, r2, #4
 80051b8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051be:	f003 021c 	and.w	r2, r3, #28
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	2104      	movs	r1, #4
 80051c8:	fa01 f202 	lsl.w	r2, r1, r2
 80051cc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d071      	beq.n	80052ba <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80051de:	e06c      	b.n	80052ba <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e4:	f003 031c 	and.w	r3, r3, #28
 80051e8:	2202      	movs	r2, #2
 80051ea:	409a      	lsls	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4013      	ands	r3, r2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d02e      	beq.n	8005252 <HAL_DMA_IRQHandler+0xec>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d029      	beq.n	8005252 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0320 	and.w	r3, r3, #32
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10b      	bne.n	8005224 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 020a 	bic.w	r2, r2, #10
 800521a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005228:	f003 021c 	and.w	r2, r3, #28
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	2102      	movs	r1, #2
 8005232:	fa01 f202 	lsl.w	r2, r1, r2
 8005236:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005244:	2b00      	cmp	r3, #0
 8005246:	d038      	beq.n	80052ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005250:	e033      	b.n	80052ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005256:	f003 031c 	and.w	r3, r3, #28
 800525a:	2208      	movs	r2, #8
 800525c:	409a      	lsls	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4013      	ands	r3, r2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d02a      	beq.n	80052bc <HAL_DMA_IRQHandler+0x156>
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f003 0308 	and.w	r3, r3, #8
 800526c:	2b00      	cmp	r3, #0
 800526e:	d025      	beq.n	80052bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 020e 	bic.w	r2, r2, #14
 800527e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005284:	f003 021c 	and.w	r2, r3, #28
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	2101      	movs	r1, #1
 800528e:	fa01 f202 	lsl.w	r2, r1, r2
 8005292:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d004      	beq.n	80052bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80052ba:	bf00      	nop
 80052bc:	bf00      	nop
}
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
 80052d0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d6:	f003 021c 	and.w	r2, r3, #28
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	2101      	movs	r1, #1
 80052e0:	fa01 f202 	lsl.w	r2, r1, r2
 80052e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	2b10      	cmp	r3, #16
 80052f4:	d108      	bne.n	8005308 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005306:	e007      	b.n	8005318 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	60da      	str	r2, [r3, #12]
}
 8005318:	bf00      	nop
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800532e:	2300      	movs	r3, #0
 8005330:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005332:	e148      	b.n	80055c6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	2101      	movs	r1, #1
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	fa01 f303 	lsl.w	r3, r1, r3
 8005340:	4013      	ands	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 813a 	beq.w	80055c0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f003 0303 	and.w	r3, r3, #3
 8005354:	2b01      	cmp	r3, #1
 8005356:	d005      	beq.n	8005364 <HAL_GPIO_Init+0x40>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f003 0303 	and.w	r3, r3, #3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d130      	bne.n	80053c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	2203      	movs	r2, #3
 8005370:	fa02 f303 	lsl.w	r3, r2, r3
 8005374:	43db      	mvns	r3, r3
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	4013      	ands	r3, r2
 800537a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	4313      	orrs	r3, r2
 800538c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800539a:	2201      	movs	r2, #1
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	fa02 f303 	lsl.w	r3, r2, r3
 80053a2:	43db      	mvns	r3, r3
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4013      	ands	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	091b      	lsrs	r3, r3, #4
 80053b0:	f003 0201 	and.w	r2, r3, #1
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	d017      	beq.n	8005402 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	2203      	movs	r2, #3
 80053de:	fa02 f303 	lsl.w	r3, r2, r3
 80053e2:	43db      	mvns	r3, r3
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	4013      	ands	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	fa02 f303 	lsl.w	r3, r2, r3
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d123      	bne.n	8005456 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	08da      	lsrs	r2, r3, #3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3208      	adds	r2, #8
 8005416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800541a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	220f      	movs	r2, #15
 8005426:	fa02 f303 	lsl.w	r3, r2, r3
 800542a:	43db      	mvns	r3, r3
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4013      	ands	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	fa02 f303 	lsl.w	r3, r2, r3
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	08da      	lsrs	r2, r3, #3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3208      	adds	r2, #8
 8005450:	6939      	ldr	r1, [r7, #16]
 8005452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	2203      	movs	r2, #3
 8005462:	fa02 f303 	lsl.w	r3, r2, r3
 8005466:	43db      	mvns	r3, r3
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4013      	ands	r3, r2
 800546c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f003 0203 	and.w	r2, r3, #3
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	fa02 f303 	lsl.w	r3, r2, r3
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	4313      	orrs	r3, r2
 8005482:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 8094 	beq.w	80055c0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005498:	4b52      	ldr	r3, [pc, #328]	; (80055e4 <HAL_GPIO_Init+0x2c0>)
 800549a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800549c:	4a51      	ldr	r2, [pc, #324]	; (80055e4 <HAL_GPIO_Init+0x2c0>)
 800549e:	f043 0301 	orr.w	r3, r3, #1
 80054a2:	6613      	str	r3, [r2, #96]	; 0x60
 80054a4:	4b4f      	ldr	r3, [pc, #316]	; (80055e4 <HAL_GPIO_Init+0x2c0>)
 80054a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	60bb      	str	r3, [r7, #8]
 80054ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80054b0:	4a4d      	ldr	r2, [pc, #308]	; (80055e8 <HAL_GPIO_Init+0x2c4>)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	089b      	lsrs	r3, r3, #2
 80054b6:	3302      	adds	r3, #2
 80054b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f003 0303 	and.w	r3, r3, #3
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	220f      	movs	r2, #15
 80054c8:	fa02 f303 	lsl.w	r3, r2, r3
 80054cc:	43db      	mvns	r3, r3
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4013      	ands	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80054da:	d00d      	beq.n	80054f8 <HAL_GPIO_Init+0x1d4>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a43      	ldr	r2, [pc, #268]	; (80055ec <HAL_GPIO_Init+0x2c8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d007      	beq.n	80054f4 <HAL_GPIO_Init+0x1d0>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a42      	ldr	r2, [pc, #264]	; (80055f0 <HAL_GPIO_Init+0x2cc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d101      	bne.n	80054f0 <HAL_GPIO_Init+0x1cc>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e004      	b.n	80054fa <HAL_GPIO_Init+0x1d6>
 80054f0:	2307      	movs	r3, #7
 80054f2:	e002      	b.n	80054fa <HAL_GPIO_Init+0x1d6>
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <HAL_GPIO_Init+0x1d6>
 80054f8:	2300      	movs	r3, #0
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	f002 0203 	and.w	r2, r2, #3
 8005500:	0092      	lsls	r2, r2, #2
 8005502:	4093      	lsls	r3, r2
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	4313      	orrs	r3, r2
 8005508:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800550a:	4937      	ldr	r1, [pc, #220]	; (80055e8 <HAL_GPIO_Init+0x2c4>)
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	089b      	lsrs	r3, r3, #2
 8005510:	3302      	adds	r3, #2
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005518:	4b36      	ldr	r3, [pc, #216]	; (80055f4 <HAL_GPIO_Init+0x2d0>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	43db      	mvns	r3, r3
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4013      	ands	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4313      	orrs	r3, r2
 800553a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800553c:	4a2d      	ldr	r2, [pc, #180]	; (80055f4 <HAL_GPIO_Init+0x2d0>)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005542:	4b2c      	ldr	r3, [pc, #176]	; (80055f4 <HAL_GPIO_Init+0x2d0>)
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	43db      	mvns	r3, r3
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	4013      	ands	r3, r2
 8005550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005566:	4a23      	ldr	r2, [pc, #140]	; (80055f4 <HAL_GPIO_Init+0x2d0>)
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800556c:	4b21      	ldr	r3, [pc, #132]	; (80055f4 <HAL_GPIO_Init+0x2d0>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	43db      	mvns	r3, r3
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	4013      	ands	r3, r2
 800557a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005590:	4a18      	ldr	r2, [pc, #96]	; (80055f4 <HAL_GPIO_Init+0x2d0>)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005596:	4b17      	ldr	r3, [pc, #92]	; (80055f4 <HAL_GPIO_Init+0x2d0>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	43db      	mvns	r3, r3
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4013      	ands	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80055ba:	4a0e      	ldr	r2, [pc, #56]	; (80055f4 <HAL_GPIO_Init+0x2d0>)
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	3301      	adds	r3, #1
 80055c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	fa22 f303 	lsr.w	r3, r2, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f47f aeaf 	bne.w	8005334 <HAL_GPIO_Init+0x10>
  }
}
 80055d6:	bf00      	nop
 80055d8:	bf00      	nop
 80055da:	371c      	adds	r7, #28
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	40021000 	.word	0x40021000
 80055e8:	40010000 	.word	0x40010000
 80055ec:	48000400 	.word	0x48000400
 80055f0:	48000800 	.word	0x48000800
 80055f4:	40010400 	.word	0x40010400

080055f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	807b      	strh	r3, [r7, #2]
 8005604:	4613      	mov	r3, r2
 8005606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005608:	787b      	ldrb	r3, [r7, #1]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800560e:	887a      	ldrh	r2, [r7, #2]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005614:	e002      	b.n	800561c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005616:	887a      	ldrh	r2, [r7, #2]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	460b      	mov	r3, r1
 8005632:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800563a:	887a      	ldrh	r2, [r7, #2]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4013      	ands	r3, r2
 8005640:	041a      	lsls	r2, r3, #16
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	43d9      	mvns	r1, r3
 8005646:	887b      	ldrh	r3, [r7, #2]
 8005648:	400b      	ands	r3, r1
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	619a      	str	r2, [r3, #24]
}
 8005650:	bf00      	nop
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005660:	4b05      	ldr	r3, [pc, #20]	; (8005678 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a04      	ldr	r2, [pc, #16]	; (8005678 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800566a:	6013      	str	r3, [r2, #0]
}
 800566c:	bf00      	nop
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40007000 	.word	0x40007000

0800567c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005680:	4b04      	ldr	r3, [pc, #16]	; (8005694 <HAL_PWREx_GetVoltageRange+0x18>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005688:	4618      	mov	r0, r3
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40007000 	.word	0x40007000

08005698 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056a6:	d130      	bne.n	800570a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80056a8:	4b23      	ldr	r3, [pc, #140]	; (8005738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b4:	d038      	beq.n	8005728 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056b6:	4b20      	ldr	r3, [pc, #128]	; (8005738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056be:	4a1e      	ldr	r2, [pc, #120]	; (8005738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056c6:	4b1d      	ldr	r3, [pc, #116]	; (800573c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2232      	movs	r2, #50	; 0x32
 80056cc:	fb02 f303 	mul.w	r3, r2, r3
 80056d0:	4a1b      	ldr	r2, [pc, #108]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80056d2:	fba2 2303 	umull	r2, r3, r2, r3
 80056d6:	0c9b      	lsrs	r3, r3, #18
 80056d8:	3301      	adds	r3, #1
 80056da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056dc:	e002      	b.n	80056e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056e4:	4b14      	ldr	r3, [pc, #80]	; (8005738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f0:	d102      	bne.n	80056f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1f2      	bne.n	80056de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056f8:	4b0f      	ldr	r3, [pc, #60]	; (8005738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005704:	d110      	bne.n	8005728 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e00f      	b.n	800572a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800570a:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005716:	d007      	beq.n	8005728 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005718:	4b07      	ldr	r3, [pc, #28]	; (8005738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005720:	4a05      	ldr	r2, [pc, #20]	; (8005738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005726:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	40007000 	.word	0x40007000
 800573c:	20000010 	.word	0x20000010
 8005740:	431bde83 	.word	0x431bde83

08005744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d102      	bne.n	8005758 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	f000 bc02 	b.w	8005f5c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005758:	4b96      	ldr	r3, [pc, #600]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 030c 	and.w	r3, r3, #12
 8005760:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005762:	4b94      	ldr	r3, [pc, #592]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0310 	and.w	r3, r3, #16
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 80e4 	beq.w	8005942 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d007      	beq.n	8005790 <HAL_RCC_OscConfig+0x4c>
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	2b0c      	cmp	r3, #12
 8005784:	f040 808b 	bne.w	800589e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2b01      	cmp	r3, #1
 800578c:	f040 8087 	bne.w	800589e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005790:	4b88      	ldr	r3, [pc, #544]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d005      	beq.n	80057a8 <HAL_RCC_OscConfig+0x64>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e3d9      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a1a      	ldr	r2, [r3, #32]
 80057ac:	4b81      	ldr	r3, [pc, #516]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0308 	and.w	r3, r3, #8
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d004      	beq.n	80057c2 <HAL_RCC_OscConfig+0x7e>
 80057b8:	4b7e      	ldr	r3, [pc, #504]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057c0:	e005      	b.n	80057ce <HAL_RCC_OscConfig+0x8a>
 80057c2:	4b7c      	ldr	r3, [pc, #496]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80057c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057c8:	091b      	lsrs	r3, r3, #4
 80057ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d223      	bcs.n	800581a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fd8c 	bl	80062f4 <RCC_SetFlashLatencyFromMSIRange>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e3ba      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057e6:	4b73      	ldr	r3, [pc, #460]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a72      	ldr	r2, [pc, #456]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80057ec:	f043 0308 	orr.w	r3, r3, #8
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	4b70      	ldr	r3, [pc, #448]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	496d      	ldr	r1, [pc, #436]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005800:	4313      	orrs	r3, r2
 8005802:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005804:	4b6b      	ldr	r3, [pc, #428]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	021b      	lsls	r3, r3, #8
 8005812:	4968      	ldr	r1, [pc, #416]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005814:	4313      	orrs	r3, r2
 8005816:	604b      	str	r3, [r1, #4]
 8005818:	e025      	b.n	8005866 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800581a:	4b66      	ldr	r3, [pc, #408]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a65      	ldr	r2, [pc, #404]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005820:	f043 0308 	orr.w	r3, r3, #8
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	4b63      	ldr	r3, [pc, #396]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	4960      	ldr	r1, [pc, #384]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005834:	4313      	orrs	r3, r2
 8005836:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005838:	4b5e      	ldr	r3, [pc, #376]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	021b      	lsls	r3, r3, #8
 8005846:	495b      	ldr	r1, [pc, #364]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005848:	4313      	orrs	r3, r2
 800584a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d109      	bne.n	8005866 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fd4c 	bl	80062f4 <RCC_SetFlashLatencyFromMSIRange>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e37a      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005866:	f000 fc81 	bl	800616c <HAL_RCC_GetSysClockFreq>
 800586a:	4602      	mov	r2, r0
 800586c:	4b51      	ldr	r3, [pc, #324]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	091b      	lsrs	r3, r3, #4
 8005872:	f003 030f 	and.w	r3, r3, #15
 8005876:	4950      	ldr	r1, [pc, #320]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 8005878:	5ccb      	ldrb	r3, [r1, r3]
 800587a:	f003 031f 	and.w	r3, r3, #31
 800587e:	fa22 f303 	lsr.w	r3, r2, r3
 8005882:	4a4e      	ldr	r2, [pc, #312]	; (80059bc <HAL_RCC_OscConfig+0x278>)
 8005884:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005886:	4b4e      	ldr	r3, [pc, #312]	; (80059c0 <HAL_RCC_OscConfig+0x27c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f7fd fe9e 	bl	80035cc <HAL_InitTick>
 8005890:	4603      	mov	r3, r0
 8005892:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005894:	7bfb      	ldrb	r3, [r7, #15]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d052      	beq.n	8005940 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	e35e      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d032      	beq.n	800590c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80058a6:	4b43      	ldr	r3, [pc, #268]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a42      	ldr	r2, [pc, #264]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80058ac:	f043 0301 	orr.w	r3, r3, #1
 80058b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058b2:	f7fd fedb 	bl	800366c <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058b8:	e008      	b.n	80058cc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058ba:	f7fd fed7 	bl	800366c <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e347      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058cc:	4b39      	ldr	r3, [pc, #228]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0f0      	beq.n	80058ba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058d8:	4b36      	ldr	r3, [pc, #216]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a35      	ldr	r2, [pc, #212]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80058de:	f043 0308 	orr.w	r3, r3, #8
 80058e2:	6013      	str	r3, [r2, #0]
 80058e4:	4b33      	ldr	r3, [pc, #204]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	4930      	ldr	r1, [pc, #192]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058f6:	4b2f      	ldr	r3, [pc, #188]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	492b      	ldr	r1, [pc, #172]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005906:	4313      	orrs	r3, r2
 8005908:	604b      	str	r3, [r1, #4]
 800590a:	e01a      	b.n	8005942 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800590c:	4b29      	ldr	r3, [pc, #164]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a28      	ldr	r2, [pc, #160]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005912:	f023 0301 	bic.w	r3, r3, #1
 8005916:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005918:	f7fd fea8 	bl	800366c <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005920:	f7fd fea4 	bl	800366c <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e314      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005932:	4b20      	ldr	r3, [pc, #128]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1f0      	bne.n	8005920 <HAL_RCC_OscConfig+0x1dc>
 800593e:	e000      	b.n	8005942 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005940:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d073      	beq.n	8005a36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	2b08      	cmp	r3, #8
 8005952:	d005      	beq.n	8005960 <HAL_RCC_OscConfig+0x21c>
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	2b0c      	cmp	r3, #12
 8005958:	d10e      	bne.n	8005978 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2b03      	cmp	r3, #3
 800595e:	d10b      	bne.n	8005978 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005960:	4b14      	ldr	r3, [pc, #80]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d063      	beq.n	8005a34 <HAL_RCC_OscConfig+0x2f0>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d15f      	bne.n	8005a34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e2f1      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005980:	d106      	bne.n	8005990 <HAL_RCC_OscConfig+0x24c>
 8005982:	4b0c      	ldr	r3, [pc, #48]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a0b      	ldr	r2, [pc, #44]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	e025      	b.n	80059dc <HAL_RCC_OscConfig+0x298>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005998:	d114      	bne.n	80059c4 <HAL_RCC_OscConfig+0x280>
 800599a:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a05      	ldr	r2, [pc, #20]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80059a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	4b03      	ldr	r3, [pc, #12]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a02      	ldr	r2, [pc, #8]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80059ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	e013      	b.n	80059dc <HAL_RCC_OscConfig+0x298>
 80059b4:	40021000 	.word	0x40021000
 80059b8:	0800f600 	.word	0x0800f600
 80059bc:	20000010 	.word	0x20000010
 80059c0:	20000014 	.word	0x20000014
 80059c4:	4ba0      	ldr	r3, [pc, #640]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a9f      	ldr	r2, [pc, #636]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 80059ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	4b9d      	ldr	r3, [pc, #628]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a9c      	ldr	r2, [pc, #624]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 80059d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d013      	beq.n	8005a0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e4:	f7fd fe42 	bl	800366c <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059ec:	f7fd fe3e 	bl	800366c <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b64      	cmp	r3, #100	; 0x64
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e2ae      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059fe:	4b92      	ldr	r3, [pc, #584]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f0      	beq.n	80059ec <HAL_RCC_OscConfig+0x2a8>
 8005a0a:	e014      	b.n	8005a36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0c:	f7fd fe2e 	bl	800366c <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a14:	f7fd fe2a 	bl	800366c <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b64      	cmp	r3, #100	; 0x64
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e29a      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a26:	4b88      	ldr	r3, [pc, #544]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f0      	bne.n	8005a14 <HAL_RCC_OscConfig+0x2d0>
 8005a32:	e000      	b.n	8005a36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d060      	beq.n	8005b04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	2b04      	cmp	r3, #4
 8005a46:	d005      	beq.n	8005a54 <HAL_RCC_OscConfig+0x310>
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	2b0c      	cmp	r3, #12
 8005a4c:	d119      	bne.n	8005a82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d116      	bne.n	8005a82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a54:	4b7c      	ldr	r3, [pc, #496]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d005      	beq.n	8005a6c <HAL_RCC_OscConfig+0x328>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e277      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a6c:	4b76      	ldr	r3, [pc, #472]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	061b      	lsls	r3, r3, #24
 8005a7a:	4973      	ldr	r1, [pc, #460]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a80:	e040      	b.n	8005b04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d023      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a8a:	4b6f      	ldr	r3, [pc, #444]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a6e      	ldr	r2, [pc, #440]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a96:	f7fd fde9 	bl	800366c <HAL_GetTick>
 8005a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a9c:	e008      	b.n	8005ab0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a9e:	f7fd fde5 	bl	800366c <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e255      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ab0:	4b65      	ldr	r3, [pc, #404]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0f0      	beq.n	8005a9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005abc:	4b62      	ldr	r3, [pc, #392]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	061b      	lsls	r3, r3, #24
 8005aca:	495f      	ldr	r1, [pc, #380]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	604b      	str	r3, [r1, #4]
 8005ad0:	e018      	b.n	8005b04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ad2:	4b5d      	ldr	r3, [pc, #372]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a5c      	ldr	r2, [pc, #368]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ade:	f7fd fdc5 	bl	800366c <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ae4:	e008      	b.n	8005af8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ae6:	f7fd fdc1 	bl	800366c <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e231      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005af8:	4b53      	ldr	r3, [pc, #332]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1f0      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0308 	and.w	r3, r3, #8
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d03c      	beq.n	8005b8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d01c      	beq.n	8005b52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b18:	4b4b      	ldr	r3, [pc, #300]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b1e:	4a4a      	ldr	r2, [pc, #296]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005b20:	f043 0301 	orr.w	r3, r3, #1
 8005b24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b28:	f7fd fda0 	bl	800366c <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b30:	f7fd fd9c 	bl	800366c <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e20c      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b42:	4b41      	ldr	r3, [pc, #260]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0ef      	beq.n	8005b30 <HAL_RCC_OscConfig+0x3ec>
 8005b50:	e01b      	b.n	8005b8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b52:	4b3d      	ldr	r3, [pc, #244]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b58:	4a3b      	ldr	r2, [pc, #236]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005b5a:	f023 0301 	bic.w	r3, r3, #1
 8005b5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b62:	f7fd fd83 	bl	800366c <HAL_GetTick>
 8005b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b68:	e008      	b.n	8005b7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b6a:	f7fd fd7f 	bl	800366c <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e1ef      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b7c:	4b32      	ldr	r3, [pc, #200]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1ef      	bne.n	8005b6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0304 	and.w	r3, r3, #4
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 80a6 	beq.w	8005ce4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005b9c:	4b2a      	ldr	r3, [pc, #168]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10d      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ba8:	4b27      	ldr	r3, [pc, #156]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bac:	4a26      	ldr	r2, [pc, #152]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bb2:	6593      	str	r3, [r2, #88]	; 0x58
 8005bb4:	4b24      	ldr	r3, [pc, #144]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bbc:	60bb      	str	r3, [r7, #8]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bc4:	4b21      	ldr	r3, [pc, #132]	; (8005c4c <HAL_RCC_OscConfig+0x508>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d118      	bne.n	8005c02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bd0:	4b1e      	ldr	r3, [pc, #120]	; (8005c4c <HAL_RCC_OscConfig+0x508>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a1d      	ldr	r2, [pc, #116]	; (8005c4c <HAL_RCC_OscConfig+0x508>)
 8005bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bdc:	f7fd fd46 	bl	800366c <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be4:	f7fd fd42 	bl	800366c <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e1b2      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bf6:	4b15      	ldr	r3, [pc, #84]	; (8005c4c <HAL_RCC_OscConfig+0x508>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0f0      	beq.n	8005be4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d108      	bne.n	8005c1c <HAL_RCC_OscConfig+0x4d8>
 8005c0a:	4b0f      	ldr	r3, [pc, #60]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c10:	4a0d      	ldr	r2, [pc, #52]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005c12:	f043 0301 	orr.w	r3, r3, #1
 8005c16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c1a:	e029      	b.n	8005c70 <HAL_RCC_OscConfig+0x52c>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	2b05      	cmp	r3, #5
 8005c22:	d115      	bne.n	8005c50 <HAL_RCC_OscConfig+0x50c>
 8005c24:	4b08      	ldr	r3, [pc, #32]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2a:	4a07      	ldr	r2, [pc, #28]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005c2c:	f043 0304 	orr.w	r3, r3, #4
 8005c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c34:	4b04      	ldr	r3, [pc, #16]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3a:	4a03      	ldr	r2, [pc, #12]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005c3c:	f043 0301 	orr.w	r3, r3, #1
 8005c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c44:	e014      	b.n	8005c70 <HAL_RCC_OscConfig+0x52c>
 8005c46:	bf00      	nop
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	40007000 	.word	0x40007000
 8005c50:	4b9a      	ldr	r3, [pc, #616]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c56:	4a99      	ldr	r2, [pc, #612]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005c58:	f023 0301 	bic.w	r3, r3, #1
 8005c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c60:	4b96      	ldr	r3, [pc, #600]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c66:	4a95      	ldr	r2, [pc, #596]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005c68:	f023 0304 	bic.w	r3, r3, #4
 8005c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d016      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c78:	f7fd fcf8 	bl	800366c <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c7e:	e00a      	b.n	8005c96 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c80:	f7fd fcf4 	bl	800366c <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e162      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c96:	4b89      	ldr	r3, [pc, #548]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0ed      	beq.n	8005c80 <HAL_RCC_OscConfig+0x53c>
 8005ca4:	e015      	b.n	8005cd2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca6:	f7fd fce1 	bl	800366c <HAL_GetTick>
 8005caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cac:	e00a      	b.n	8005cc4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cae:	f7fd fcdd 	bl	800366c <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d901      	bls.n	8005cc4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e14b      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cc4:	4b7d      	ldr	r3, [pc, #500]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1ed      	bne.n	8005cae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cd2:	7ffb      	ldrb	r3, [r7, #31]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d105      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cd8:	4b78      	ldr	r3, [pc, #480]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cdc:	4a77      	ldr	r2, [pc, #476]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ce2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0320 	and.w	r3, r3, #32
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d03c      	beq.n	8005d6a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01c      	beq.n	8005d32 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005cf8:	4b70      	ldr	r3, [pc, #448]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cfe:	4a6f      	ldr	r2, [pc, #444]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005d00:	f043 0301 	orr.w	r3, r3, #1
 8005d04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d08:	f7fd fcb0 	bl	800366c <HAL_GetTick>
 8005d0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d0e:	e008      	b.n	8005d22 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d10:	f7fd fcac 	bl	800366c <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e11c      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d22:	4b66      	ldr	r3, [pc, #408]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005d24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0ef      	beq.n	8005d10 <HAL_RCC_OscConfig+0x5cc>
 8005d30:	e01b      	b.n	8005d6a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d32:	4b62      	ldr	r3, [pc, #392]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d38:	4a60      	ldr	r2, [pc, #384]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005d3a:	f023 0301 	bic.w	r3, r3, #1
 8005d3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d42:	f7fd fc93 	bl	800366c <HAL_GetTick>
 8005d46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d48:	e008      	b.n	8005d5c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d4a:	f7fd fc8f 	bl	800366c <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d901      	bls.n	8005d5c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e0ff      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d5c:	4b57      	ldr	r3, [pc, #348]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1ef      	bne.n	8005d4a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 80f3 	beq.w	8005f5a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	f040 80c9 	bne.w	8005f10 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005d7e:	4b4f      	ldr	r3, [pc, #316]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f003 0203 	and.w	r2, r3, #3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d12c      	bne.n	8005dec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d123      	bne.n	8005dec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d11b      	bne.n	8005dec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d113      	bne.n	8005dec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dce:	085b      	lsrs	r3, r3, #1
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d109      	bne.n	8005dec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	085b      	lsrs	r3, r3, #1
 8005de4:	3b01      	subs	r3, #1
 8005de6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d06b      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	2b0c      	cmp	r3, #12
 8005df0:	d062      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005df2:	4b32      	ldr	r3, [pc, #200]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e0ac      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e02:	4b2e      	ldr	r3, [pc, #184]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a2d      	ldr	r2, [pc, #180]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005e08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e0c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e0e:	f7fd fc2d 	bl	800366c <HAL_GetTick>
 8005e12:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e14:	e008      	b.n	8005e28 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e16:	f7fd fc29 	bl	800366c <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e099      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e28:	4b24      	ldr	r3, [pc, #144]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1f0      	bne.n	8005e16 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e34:	4b21      	ldr	r3, [pc, #132]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	4b21      	ldr	r3, [pc, #132]	; (8005ec0 <HAL_RCC_OscConfig+0x77c>)
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e44:	3a01      	subs	r2, #1
 8005e46:	0112      	lsls	r2, r2, #4
 8005e48:	4311      	orrs	r1, r2
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e4e:	0212      	lsls	r2, r2, #8
 8005e50:	4311      	orrs	r1, r2
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e56:	0852      	lsrs	r2, r2, #1
 8005e58:	3a01      	subs	r2, #1
 8005e5a:	0552      	lsls	r2, r2, #21
 8005e5c:	4311      	orrs	r1, r2
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e62:	0852      	lsrs	r2, r2, #1
 8005e64:	3a01      	subs	r2, #1
 8005e66:	0652      	lsls	r2, r2, #25
 8005e68:	4311      	orrs	r1, r2
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e6e:	06d2      	lsls	r2, r2, #27
 8005e70:	430a      	orrs	r2, r1
 8005e72:	4912      	ldr	r1, [pc, #72]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005e78:	4b10      	ldr	r3, [pc, #64]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a0f      	ldr	r2, [pc, #60]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e84:	4b0d      	ldr	r3, [pc, #52]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	4a0c      	ldr	r2, [pc, #48]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e90:	f7fd fbec 	bl	800366c <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e98:	f7fd fbe8 	bl	800366c <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e058      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eaa:	4b04      	ldr	r3, [pc, #16]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0f0      	beq.n	8005e98 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005eb6:	e050      	b.n	8005f5a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e04f      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
 8005ebc:	40021000 	.word	0x40021000
 8005ec0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ec4:	4b27      	ldr	r3, [pc, #156]	; (8005f64 <HAL_RCC_OscConfig+0x820>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d144      	bne.n	8005f5a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005ed0:	4b24      	ldr	r3, [pc, #144]	; (8005f64 <HAL_RCC_OscConfig+0x820>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a23      	ldr	r2, [pc, #140]	; (8005f64 <HAL_RCC_OscConfig+0x820>)
 8005ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005edc:	4b21      	ldr	r3, [pc, #132]	; (8005f64 <HAL_RCC_OscConfig+0x820>)
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	4a20      	ldr	r2, [pc, #128]	; (8005f64 <HAL_RCC_OscConfig+0x820>)
 8005ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ee6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ee8:	f7fd fbc0 	bl	800366c <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ef0:	f7fd fbbc 	bl	800366c <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e02c      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f02:	4b18      	ldr	r3, [pc, #96]	; (8005f64 <HAL_RCC_OscConfig+0x820>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f0      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x7ac>
 8005f0e:	e024      	b.n	8005f5a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	2b0c      	cmp	r3, #12
 8005f14:	d01f      	beq.n	8005f56 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f16:	4b13      	ldr	r3, [pc, #76]	; (8005f64 <HAL_RCC_OscConfig+0x820>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a12      	ldr	r2, [pc, #72]	; (8005f64 <HAL_RCC_OscConfig+0x820>)
 8005f1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f22:	f7fd fba3 	bl	800366c <HAL_GetTick>
 8005f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f28:	e008      	b.n	8005f3c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f2a:	f7fd fb9f 	bl	800366c <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e00f      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f3c:	4b09      	ldr	r3, [pc, #36]	; (8005f64 <HAL_RCC_OscConfig+0x820>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1f0      	bne.n	8005f2a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005f48:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <HAL_RCC_OscConfig+0x820>)
 8005f4a:	68da      	ldr	r2, [r3, #12]
 8005f4c:	4905      	ldr	r1, [pc, #20]	; (8005f64 <HAL_RCC_OscConfig+0x820>)
 8005f4e:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <HAL_RCC_OscConfig+0x824>)
 8005f50:	4013      	ands	r3, r2
 8005f52:	60cb      	str	r3, [r1, #12]
 8005f54:	e001      	b.n	8005f5a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3720      	adds	r7, #32
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	40021000 	.word	0x40021000
 8005f68:	feeefffc 	.word	0xfeeefffc

08005f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0e7      	b.n	8006150 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f80:	4b75      	ldr	r3, [pc, #468]	; (8006158 <HAL_RCC_ClockConfig+0x1ec>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d910      	bls.n	8005fb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f8e:	4b72      	ldr	r3, [pc, #456]	; (8006158 <HAL_RCC_ClockConfig+0x1ec>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f023 0207 	bic.w	r2, r3, #7
 8005f96:	4970      	ldr	r1, [pc, #448]	; (8006158 <HAL_RCC_ClockConfig+0x1ec>)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f9e:	4b6e      	ldr	r3, [pc, #440]	; (8006158 <HAL_RCC_ClockConfig+0x1ec>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d001      	beq.n	8005fb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e0cf      	b.n	8006150 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d010      	beq.n	8005fde <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	4b66      	ldr	r3, [pc, #408]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d908      	bls.n	8005fde <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fcc:	4b63      	ldr	r3, [pc, #396]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	4960      	ldr	r1, [pc, #384]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d04c      	beq.n	8006084 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d107      	bne.n	8006002 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ff2:	4b5a      	ldr	r3, [pc, #360]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d121      	bne.n	8006042 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e0a6      	b.n	8006150 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b02      	cmp	r3, #2
 8006008:	d107      	bne.n	800601a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800600a:	4b54      	ldr	r3, [pc, #336]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d115      	bne.n	8006042 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e09a      	b.n	8006150 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d107      	bne.n	8006032 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006022:	4b4e      	ldr	r3, [pc, #312]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d109      	bne.n	8006042 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e08e      	b.n	8006150 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006032:	4b4a      	ldr	r3, [pc, #296]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e086      	b.n	8006150 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006042:	4b46      	ldr	r3, [pc, #280]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f023 0203 	bic.w	r2, r3, #3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	4943      	ldr	r1, [pc, #268]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 8006050:	4313      	orrs	r3, r2
 8006052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006054:	f7fd fb0a 	bl	800366c <HAL_GetTick>
 8006058:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800605a:	e00a      	b.n	8006072 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800605c:	f7fd fb06 	bl	800366c <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	f241 3288 	movw	r2, #5000	; 0x1388
 800606a:	4293      	cmp	r3, r2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e06e      	b.n	8006150 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006072:	4b3a      	ldr	r3, [pc, #232]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f003 020c 	and.w	r2, r3, #12
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	429a      	cmp	r2, r3
 8006082:	d1eb      	bne.n	800605c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d010      	beq.n	80060b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	4b31      	ldr	r3, [pc, #196]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800609c:	429a      	cmp	r2, r3
 800609e:	d208      	bcs.n	80060b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060a0:	4b2e      	ldr	r3, [pc, #184]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	492b      	ldr	r1, [pc, #172]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060b2:	4b29      	ldr	r3, [pc, #164]	; (8006158 <HAL_RCC_ClockConfig+0x1ec>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d210      	bcs.n	80060e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060c0:	4b25      	ldr	r3, [pc, #148]	; (8006158 <HAL_RCC_ClockConfig+0x1ec>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f023 0207 	bic.w	r2, r3, #7
 80060c8:	4923      	ldr	r1, [pc, #140]	; (8006158 <HAL_RCC_ClockConfig+0x1ec>)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060d0:	4b21      	ldr	r3, [pc, #132]	; (8006158 <HAL_RCC_ClockConfig+0x1ec>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0307 	and.w	r3, r3, #7
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d001      	beq.n	80060e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e036      	b.n	8006150 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0304 	and.w	r3, r3, #4
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d008      	beq.n	8006100 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060ee:	4b1b      	ldr	r3, [pc, #108]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	4918      	ldr	r1, [pc, #96]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0308 	and.w	r3, r3, #8
 8006108:	2b00      	cmp	r3, #0
 800610a:	d009      	beq.n	8006120 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800610c:	4b13      	ldr	r3, [pc, #76]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	4910      	ldr	r1, [pc, #64]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 800611c:	4313      	orrs	r3, r2
 800611e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006120:	f000 f824 	bl	800616c <HAL_RCC_GetSysClockFreq>
 8006124:	4602      	mov	r2, r0
 8006126:	4b0d      	ldr	r3, [pc, #52]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	091b      	lsrs	r3, r3, #4
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	490b      	ldr	r1, [pc, #44]	; (8006160 <HAL_RCC_ClockConfig+0x1f4>)
 8006132:	5ccb      	ldrb	r3, [r1, r3]
 8006134:	f003 031f 	and.w	r3, r3, #31
 8006138:	fa22 f303 	lsr.w	r3, r2, r3
 800613c:	4a09      	ldr	r2, [pc, #36]	; (8006164 <HAL_RCC_ClockConfig+0x1f8>)
 800613e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006140:	4b09      	ldr	r3, [pc, #36]	; (8006168 <HAL_RCC_ClockConfig+0x1fc>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4618      	mov	r0, r3
 8006146:	f7fd fa41 	bl	80035cc <HAL_InitTick>
 800614a:	4603      	mov	r3, r0
 800614c:	72fb      	strb	r3, [r7, #11]

  return status;
 800614e:	7afb      	ldrb	r3, [r7, #11]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	40022000 	.word	0x40022000
 800615c:	40021000 	.word	0x40021000
 8006160:	0800f600 	.word	0x0800f600
 8006164:	20000010 	.word	0x20000010
 8006168:	20000014 	.word	0x20000014

0800616c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800616c:	b480      	push	{r7}
 800616e:	b089      	sub	sp, #36	; 0x24
 8006170:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	61fb      	str	r3, [r7, #28]
 8006176:	2300      	movs	r3, #0
 8006178:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800617a:	4b3e      	ldr	r3, [pc, #248]	; (8006274 <HAL_RCC_GetSysClockFreq+0x108>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f003 030c 	and.w	r3, r3, #12
 8006182:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006184:	4b3b      	ldr	r3, [pc, #236]	; (8006274 <HAL_RCC_GetSysClockFreq+0x108>)
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f003 0303 	and.w	r3, r3, #3
 800618c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d005      	beq.n	80061a0 <HAL_RCC_GetSysClockFreq+0x34>
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	2b0c      	cmp	r3, #12
 8006198:	d121      	bne.n	80061de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d11e      	bne.n	80061de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80061a0:	4b34      	ldr	r3, [pc, #208]	; (8006274 <HAL_RCC_GetSysClockFreq+0x108>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0308 	and.w	r3, r3, #8
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d107      	bne.n	80061bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80061ac:	4b31      	ldr	r3, [pc, #196]	; (8006274 <HAL_RCC_GetSysClockFreq+0x108>)
 80061ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061b2:	0a1b      	lsrs	r3, r3, #8
 80061b4:	f003 030f 	and.w	r3, r3, #15
 80061b8:	61fb      	str	r3, [r7, #28]
 80061ba:	e005      	b.n	80061c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80061bc:	4b2d      	ldr	r3, [pc, #180]	; (8006274 <HAL_RCC_GetSysClockFreq+0x108>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	091b      	lsrs	r3, r3, #4
 80061c2:	f003 030f 	and.w	r3, r3, #15
 80061c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80061c8:	4a2b      	ldr	r2, [pc, #172]	; (8006278 <HAL_RCC_GetSysClockFreq+0x10c>)
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10d      	bne.n	80061f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061dc:	e00a      	b.n	80061f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d102      	bne.n	80061ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80061e4:	4b25      	ldr	r3, [pc, #148]	; (800627c <HAL_RCC_GetSysClockFreq+0x110>)
 80061e6:	61bb      	str	r3, [r7, #24]
 80061e8:	e004      	b.n	80061f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d101      	bne.n	80061f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061f0:	4b23      	ldr	r3, [pc, #140]	; (8006280 <HAL_RCC_GetSysClockFreq+0x114>)
 80061f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	2b0c      	cmp	r3, #12
 80061f8:	d134      	bne.n	8006264 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061fa:	4b1e      	ldr	r3, [pc, #120]	; (8006274 <HAL_RCC_GetSysClockFreq+0x108>)
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b02      	cmp	r3, #2
 8006208:	d003      	beq.n	8006212 <HAL_RCC_GetSysClockFreq+0xa6>
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2b03      	cmp	r3, #3
 800620e:	d003      	beq.n	8006218 <HAL_RCC_GetSysClockFreq+0xac>
 8006210:	e005      	b.n	800621e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006212:	4b1a      	ldr	r3, [pc, #104]	; (800627c <HAL_RCC_GetSysClockFreq+0x110>)
 8006214:	617b      	str	r3, [r7, #20]
      break;
 8006216:	e005      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006218:	4b19      	ldr	r3, [pc, #100]	; (8006280 <HAL_RCC_GetSysClockFreq+0x114>)
 800621a:	617b      	str	r3, [r7, #20]
      break;
 800621c:	e002      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	617b      	str	r3, [r7, #20]
      break;
 8006222:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006224:	4b13      	ldr	r3, [pc, #76]	; (8006274 <HAL_RCC_GetSysClockFreq+0x108>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	091b      	lsrs	r3, r3, #4
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	3301      	adds	r3, #1
 8006230:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006232:	4b10      	ldr	r3, [pc, #64]	; (8006274 <HAL_RCC_GetSysClockFreq+0x108>)
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	0a1b      	lsrs	r3, r3, #8
 8006238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	fb03 f202 	mul.w	r2, r3, r2
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	fbb2 f3f3 	udiv	r3, r2, r3
 8006248:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800624a:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <HAL_RCC_GetSysClockFreq+0x108>)
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	0e5b      	lsrs	r3, r3, #25
 8006250:	f003 0303 	and.w	r3, r3, #3
 8006254:	3301      	adds	r3, #1
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006262:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006264:	69bb      	ldr	r3, [r7, #24]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3724      	adds	r7, #36	; 0x24
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40021000 	.word	0x40021000
 8006278:	0800f618 	.word	0x0800f618
 800627c:	00f42400 	.word	0x00f42400
 8006280:	007a1200 	.word	0x007a1200

08006284 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006288:	4b03      	ldr	r3, [pc, #12]	; (8006298 <HAL_RCC_GetHCLKFreq+0x14>)
 800628a:	681b      	ldr	r3, [r3, #0]
}
 800628c:	4618      	mov	r0, r3
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	20000010 	.word	0x20000010

0800629c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80062a0:	f7ff fff0 	bl	8006284 <HAL_RCC_GetHCLKFreq>
 80062a4:	4602      	mov	r2, r0
 80062a6:	4b06      	ldr	r3, [pc, #24]	; (80062c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	0a1b      	lsrs	r3, r3, #8
 80062ac:	f003 0307 	and.w	r3, r3, #7
 80062b0:	4904      	ldr	r1, [pc, #16]	; (80062c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80062b2:	5ccb      	ldrb	r3, [r1, r3]
 80062b4:	f003 031f 	and.w	r3, r3, #31
 80062b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062bc:	4618      	mov	r0, r3
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	40021000 	.word	0x40021000
 80062c4:	0800f610 	.word	0x0800f610

080062c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80062cc:	f7ff ffda 	bl	8006284 <HAL_RCC_GetHCLKFreq>
 80062d0:	4602      	mov	r2, r0
 80062d2:	4b06      	ldr	r3, [pc, #24]	; (80062ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	0adb      	lsrs	r3, r3, #11
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	4904      	ldr	r1, [pc, #16]	; (80062f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80062de:	5ccb      	ldrb	r3, [r1, r3]
 80062e0:	f003 031f 	and.w	r3, r3, #31
 80062e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	40021000 	.word	0x40021000
 80062f0:	0800f610 	.word	0x0800f610

080062f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80062fc:	2300      	movs	r3, #0
 80062fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006300:	4b2a      	ldr	r3, [pc, #168]	; (80063ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800630c:	f7ff f9b6 	bl	800567c <HAL_PWREx_GetVoltageRange>
 8006310:	6178      	str	r0, [r7, #20]
 8006312:	e014      	b.n	800633e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006314:	4b25      	ldr	r3, [pc, #148]	; (80063ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006318:	4a24      	ldr	r2, [pc, #144]	; (80063ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800631a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800631e:	6593      	str	r3, [r2, #88]	; 0x58
 8006320:	4b22      	ldr	r3, [pc, #136]	; (80063ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800632c:	f7ff f9a6 	bl	800567c <HAL_PWREx_GetVoltageRange>
 8006330:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006332:	4b1e      	ldr	r3, [pc, #120]	; (80063ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006336:	4a1d      	ldr	r2, [pc, #116]	; (80063ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800633c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006344:	d10b      	bne.n	800635e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b80      	cmp	r3, #128	; 0x80
 800634a:	d919      	bls.n	8006380 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2ba0      	cmp	r3, #160	; 0xa0
 8006350:	d902      	bls.n	8006358 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006352:	2302      	movs	r3, #2
 8006354:	613b      	str	r3, [r7, #16]
 8006356:	e013      	b.n	8006380 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006358:	2301      	movs	r3, #1
 800635a:	613b      	str	r3, [r7, #16]
 800635c:	e010      	b.n	8006380 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b80      	cmp	r3, #128	; 0x80
 8006362:	d902      	bls.n	800636a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006364:	2303      	movs	r3, #3
 8006366:	613b      	str	r3, [r7, #16]
 8006368:	e00a      	b.n	8006380 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b80      	cmp	r3, #128	; 0x80
 800636e:	d102      	bne.n	8006376 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006370:	2302      	movs	r3, #2
 8006372:	613b      	str	r3, [r7, #16]
 8006374:	e004      	b.n	8006380 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b70      	cmp	r3, #112	; 0x70
 800637a:	d101      	bne.n	8006380 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800637c:	2301      	movs	r3, #1
 800637e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f023 0207 	bic.w	r2, r3, #7
 8006388:	4909      	ldr	r1, [pc, #36]	; (80063b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	4313      	orrs	r3, r2
 800638e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006390:	4b07      	ldr	r3, [pc, #28]	; (80063b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0307 	and.w	r3, r3, #7
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	429a      	cmp	r2, r3
 800639c:	d001      	beq.n	80063a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e000      	b.n	80063a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3718      	adds	r7, #24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	40021000 	.word	0x40021000
 80063b0:	40022000 	.word	0x40022000

080063b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063bc:	2300      	movs	r3, #0
 80063be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063c0:	2300      	movs	r3, #0
 80063c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d031      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80063d8:	d01a      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80063da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80063de:	d814      	bhi.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d009      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80063e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063e8:	d10f      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80063ea:	4b5d      	ldr	r3, [pc, #372]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	4a5c      	ldr	r2, [pc, #368]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80063f6:	e00c      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3304      	adds	r3, #4
 80063fc:	2100      	movs	r1, #0
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 f9de 	bl	80067c0 <RCCEx_PLLSAI1_Config>
 8006404:	4603      	mov	r3, r0
 8006406:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006408:	e003      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	74fb      	strb	r3, [r7, #19]
      break;
 800640e:	e000      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006410:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006412:	7cfb      	ldrb	r3, [r7, #19]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10b      	bne.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006418:	4b51      	ldr	r3, [pc, #324]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800641a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006426:	494e      	ldr	r1, [pc, #312]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006428:	4313      	orrs	r3, r2
 800642a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800642e:	e001      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006430:	7cfb      	ldrb	r3, [r7, #19]
 8006432:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 809e 	beq.w	800657e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006442:	2300      	movs	r3, #0
 8006444:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006446:	4b46      	ldr	r3, [pc, #280]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800644a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006456:	2300      	movs	r3, #0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00d      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800645c:	4b40      	ldr	r3, [pc, #256]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800645e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006460:	4a3f      	ldr	r2, [pc, #252]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006466:	6593      	str	r3, [r2, #88]	; 0x58
 8006468:	4b3d      	ldr	r3, [pc, #244]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800646a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800646c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006470:	60bb      	str	r3, [r7, #8]
 8006472:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006474:	2301      	movs	r3, #1
 8006476:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006478:	4b3a      	ldr	r3, [pc, #232]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a39      	ldr	r2, [pc, #228]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800647e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006482:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006484:	f7fd f8f2 	bl	800366c <HAL_GetTick>
 8006488:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800648a:	e009      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800648c:	f7fd f8ee 	bl	800366c <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b02      	cmp	r3, #2
 8006498:	d902      	bls.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	74fb      	strb	r3, [r7, #19]
        break;
 800649e:	e005      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80064a0:	4b30      	ldr	r3, [pc, #192]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d0ef      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80064ac:	7cfb      	ldrb	r3, [r7, #19]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d15a      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80064b2:	4b2b      	ldr	r3, [pc, #172]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d01e      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d019      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80064ce:	4b24      	ldr	r3, [pc, #144]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064da:	4b21      	ldr	r3, [pc, #132]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e0:	4a1f      	ldr	r2, [pc, #124]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064ea:	4b1d      	ldr	r3, [pc, #116]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f0:	4a1b      	ldr	r2, [pc, #108]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80064fa:	4a19      	ldr	r2, [pc, #100]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b00      	cmp	r3, #0
 800650a:	d016      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800650c:	f7fd f8ae 	bl	800366c <HAL_GetTick>
 8006510:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006512:	e00b      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006514:	f7fd f8aa 	bl	800366c <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006522:	4293      	cmp	r3, r2
 8006524:	d902      	bls.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	74fb      	strb	r3, [r7, #19]
            break;
 800652a:	e006      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800652c:	4b0c      	ldr	r3, [pc, #48]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800652e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d0ec      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800653a:	7cfb      	ldrb	r3, [r7, #19]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10b      	bne.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006540:	4b07      	ldr	r3, [pc, #28]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006546:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800654e:	4904      	ldr	r1, [pc, #16]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006550:	4313      	orrs	r3, r2
 8006552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006556:	e009      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006558:	7cfb      	ldrb	r3, [r7, #19]
 800655a:	74bb      	strb	r3, [r7, #18]
 800655c:	e006      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800655e:	bf00      	nop
 8006560:	40021000 	.word	0x40021000
 8006564:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006568:	7cfb      	ldrb	r3, [r7, #19]
 800656a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800656c:	7c7b      	ldrb	r3, [r7, #17]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d105      	bne.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006572:	4b8a      	ldr	r3, [pc, #552]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006576:	4a89      	ldr	r2, [pc, #548]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800657c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00a      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800658a:	4b84      	ldr	r3, [pc, #528]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800658c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006590:	f023 0203 	bic.w	r2, r3, #3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	4980      	ldr	r1, [pc, #512]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800659a:	4313      	orrs	r3, r2
 800659c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0302 	and.w	r3, r3, #2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00a      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065ac:	4b7b      	ldr	r3, [pc, #492]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b2:	f023 020c 	bic.w	r2, r3, #12
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	4978      	ldr	r1, [pc, #480]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00a      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065ce:	4b73      	ldr	r3, [pc, #460]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065dc:	496f      	ldr	r1, [pc, #444]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00a      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065f0:	4b6a      	ldr	r3, [pc, #424]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065fe:	4967      	ldr	r1, [pc, #412]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006600:	4313      	orrs	r3, r2
 8006602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00a      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006612:	4b62      	ldr	r3, [pc, #392]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006618:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006620:	495e      	ldr	r1, [pc, #376]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006622:	4313      	orrs	r3, r2
 8006624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00a      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006634:	4b59      	ldr	r3, [pc, #356]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006642:	4956      	ldr	r1, [pc, #344]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006644:	4313      	orrs	r3, r2
 8006646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006656:	4b51      	ldr	r3, [pc, #324]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800665c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006664:	494d      	ldr	r1, [pc, #308]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006666:	4313      	orrs	r3, r2
 8006668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d028      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006678:	4b48      	ldr	r3, [pc, #288]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800667a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006686:	4945      	ldr	r1, [pc, #276]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006688:	4313      	orrs	r3, r2
 800668a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006696:	d106      	bne.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006698:	4b40      	ldr	r3, [pc, #256]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	4a3f      	ldr	r2, [pc, #252]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800669e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066a2:	60d3      	str	r3, [r2, #12]
 80066a4:	e011      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066ae:	d10c      	bne.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3304      	adds	r3, #4
 80066b4:	2101      	movs	r1, #1
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 f882 	bl	80067c0 <RCCEx_PLLSAI1_Config>
 80066bc:	4603      	mov	r3, r0
 80066be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80066c0:	7cfb      	ldrb	r3, [r7, #19]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80066c6:	7cfb      	ldrb	r3, [r7, #19]
 80066c8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d028      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066d6:	4b31      	ldr	r3, [pc, #196]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e4:	492d      	ldr	r1, [pc, #180]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066f4:	d106      	bne.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066f6:	4b29      	ldr	r3, [pc, #164]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	4a28      	ldr	r2, [pc, #160]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006700:	60d3      	str	r3, [r2, #12]
 8006702:	e011      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006708:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800670c:	d10c      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	3304      	adds	r3, #4
 8006712:	2101      	movs	r1, #1
 8006714:	4618      	mov	r0, r3
 8006716:	f000 f853 	bl	80067c0 <RCCEx_PLLSAI1_Config>
 800671a:	4603      	mov	r3, r0
 800671c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800671e:	7cfb      	ldrb	r3, [r7, #19]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006724:	7cfb      	ldrb	r3, [r7, #19]
 8006726:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01c      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006734:	4b19      	ldr	r3, [pc, #100]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800673a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006742:	4916      	ldr	r1, [pc, #88]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006744:	4313      	orrs	r3, r2
 8006746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800674e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006752:	d10c      	bne.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3304      	adds	r3, #4
 8006758:	2102      	movs	r1, #2
 800675a:	4618      	mov	r0, r3
 800675c:	f000 f830 	bl	80067c0 <RCCEx_PLLSAI1_Config>
 8006760:	4603      	mov	r3, r0
 8006762:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006764:	7cfb      	ldrb	r3, [r7, #19]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800676a:	7cfb      	ldrb	r3, [r7, #19]
 800676c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800677a:	4b08      	ldr	r3, [pc, #32]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800677c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006780:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006788:	4904      	ldr	r1, [pc, #16]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800678a:	4313      	orrs	r3, r2
 800678c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006790:	7cbb      	ldrb	r3, [r7, #18]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	40021000 	.word	0x40021000

080067a0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80067a4:	4b05      	ldr	r3, [pc, #20]	; (80067bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a04      	ldr	r2, [pc, #16]	; (80067bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80067aa:	f043 0304 	orr.w	r3, r3, #4
 80067ae:	6013      	str	r3, [r2, #0]
}
 80067b0:	bf00      	nop
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	40021000 	.word	0x40021000

080067c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067ce:	4b74      	ldr	r3, [pc, #464]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	f003 0303 	and.w	r3, r3, #3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d018      	beq.n	800680c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80067da:	4b71      	ldr	r3, [pc, #452]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f003 0203 	and.w	r2, r3, #3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d10d      	bne.n	8006806 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
       ||
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d009      	beq.n	8006806 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80067f2:	4b6b      	ldr	r3, [pc, #428]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	091b      	lsrs	r3, r3, #4
 80067f8:	f003 0307 	and.w	r3, r3, #7
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
       ||
 8006802:	429a      	cmp	r2, r3
 8006804:	d047      	beq.n	8006896 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	73fb      	strb	r3, [r7, #15]
 800680a:	e044      	b.n	8006896 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b03      	cmp	r3, #3
 8006812:	d018      	beq.n	8006846 <RCCEx_PLLSAI1_Config+0x86>
 8006814:	2b03      	cmp	r3, #3
 8006816:	d825      	bhi.n	8006864 <RCCEx_PLLSAI1_Config+0xa4>
 8006818:	2b01      	cmp	r3, #1
 800681a:	d002      	beq.n	8006822 <RCCEx_PLLSAI1_Config+0x62>
 800681c:	2b02      	cmp	r3, #2
 800681e:	d009      	beq.n	8006834 <RCCEx_PLLSAI1_Config+0x74>
 8006820:	e020      	b.n	8006864 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006822:	4b5f      	ldr	r3, [pc, #380]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d11d      	bne.n	800686a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006832:	e01a      	b.n	800686a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006834:	4b5a      	ldr	r3, [pc, #360]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800683c:	2b00      	cmp	r3, #0
 800683e:	d116      	bne.n	800686e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006844:	e013      	b.n	800686e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006846:	4b56      	ldr	r3, [pc, #344]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10f      	bne.n	8006872 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006852:	4b53      	ldr	r3, [pc, #332]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d109      	bne.n	8006872 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006862:	e006      	b.n	8006872 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	73fb      	strb	r3, [r7, #15]
      break;
 8006868:	e004      	b.n	8006874 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800686a:	bf00      	nop
 800686c:	e002      	b.n	8006874 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800686e:	bf00      	nop
 8006870:	e000      	b.n	8006874 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006872:	bf00      	nop
    }

    if(status == HAL_OK)
 8006874:	7bfb      	ldrb	r3, [r7, #15]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10d      	bne.n	8006896 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800687a:	4b49      	ldr	r3, [pc, #292]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6819      	ldr	r1, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	3b01      	subs	r3, #1
 800688c:	011b      	lsls	r3, r3, #4
 800688e:	430b      	orrs	r3, r1
 8006890:	4943      	ldr	r1, [pc, #268]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006892:	4313      	orrs	r3, r2
 8006894:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006896:	7bfb      	ldrb	r3, [r7, #15]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d17c      	bne.n	8006996 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800689c:	4b40      	ldr	r3, [pc, #256]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a3f      	ldr	r2, [pc, #252]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068a8:	f7fc fee0 	bl	800366c <HAL_GetTick>
 80068ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068ae:	e009      	b.n	80068c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068b0:	f7fc fedc 	bl	800366c <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d902      	bls.n	80068c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	73fb      	strb	r3, [r7, #15]
        break;
 80068c2:	e005      	b.n	80068d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068c4:	4b36      	ldr	r3, [pc, #216]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1ef      	bne.n	80068b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d15f      	bne.n	8006996 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d110      	bne.n	80068fe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068dc:	4b30      	ldr	r3, [pc, #192]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80068e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	6892      	ldr	r2, [r2, #8]
 80068ec:	0211      	lsls	r1, r2, #8
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	68d2      	ldr	r2, [r2, #12]
 80068f2:	06d2      	lsls	r2, r2, #27
 80068f4:	430a      	orrs	r2, r1
 80068f6:	492a      	ldr	r1, [pc, #168]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	610b      	str	r3, [r1, #16]
 80068fc:	e027      	b.n	800694e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d112      	bne.n	800692a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006904:	4b26      	ldr	r3, [pc, #152]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800690c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	6892      	ldr	r2, [r2, #8]
 8006914:	0211      	lsls	r1, r2, #8
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6912      	ldr	r2, [r2, #16]
 800691a:	0852      	lsrs	r2, r2, #1
 800691c:	3a01      	subs	r2, #1
 800691e:	0552      	lsls	r2, r2, #21
 8006920:	430a      	orrs	r2, r1
 8006922:	491f      	ldr	r1, [pc, #124]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006924:	4313      	orrs	r3, r2
 8006926:	610b      	str	r3, [r1, #16]
 8006928:	e011      	b.n	800694e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800692a:	4b1d      	ldr	r3, [pc, #116]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006932:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6892      	ldr	r2, [r2, #8]
 800693a:	0211      	lsls	r1, r2, #8
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6952      	ldr	r2, [r2, #20]
 8006940:	0852      	lsrs	r2, r2, #1
 8006942:	3a01      	subs	r2, #1
 8006944:	0652      	lsls	r2, r2, #25
 8006946:	430a      	orrs	r2, r1
 8006948:	4915      	ldr	r1, [pc, #84]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800694a:	4313      	orrs	r3, r2
 800694c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800694e:	4b14      	ldr	r3, [pc, #80]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a13      	ldr	r2, [pc, #76]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006954:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006958:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800695a:	f7fc fe87 	bl	800366c <HAL_GetTick>
 800695e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006960:	e009      	b.n	8006976 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006962:	f7fc fe83 	bl	800366c <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d902      	bls.n	8006976 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	73fb      	strb	r3, [r7, #15]
          break;
 8006974:	e005      	b.n	8006982 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006976:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d0ef      	beq.n	8006962 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006982:	7bfb      	ldrb	r3, [r7, #15]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d106      	bne.n	8006996 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006988:	4b05      	ldr	r3, [pc, #20]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800698a:	691a      	ldr	r2, [r3, #16]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	4903      	ldr	r1, [pc, #12]	; (80069a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006992:	4313      	orrs	r3, r2
 8006994:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006996:	7bfb      	ldrb	r3, [r7, #15]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	40021000 	.word	0x40021000

080069a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d06c      	beq.n	8006a90 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d106      	bne.n	80069d0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7fc fb76 	bl	80030bc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	22ca      	movs	r2, #202	; 0xca
 80069de:	625a      	str	r2, [r3, #36]	; 0x24
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2253      	movs	r2, #83	; 0x53
 80069e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fbcb 	bl	8007184 <RTC_EnterInitMode>
 80069ee:	4603      	mov	r3, r0
 80069f0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d14b      	bne.n	8006a90 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6812      	ldr	r2, [r2, #0]
 8006a02:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a0a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6899      	ldr	r1, [r3, #8]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	431a      	orrs	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	68d2      	ldr	r2, [r2, #12]
 8006a32:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6919      	ldr	r1, [r3, #16]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	041a      	lsls	r2, r3, #16
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	430a      	orrs	r2, r1
 8006a46:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fbcf 	bl	80071ec <RTC_ExitInitMode>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006a52:	7bfb      	ldrb	r3, [r7, #15]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d11b      	bne.n	8006a90 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 0203 	bic.w	r2, r2, #3
 8006a66:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	69da      	ldr	r2, [r3, #28]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	431a      	orrs	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	22ff      	movs	r2, #255	; 0xff
 8006a86:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006a9a:	b590      	push	{r4, r7, lr}
 8006a9c:	b087      	sub	sp, #28
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d101      	bne.n	8006ab4 <HAL_RTC_SetTime+0x1a>
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	e08b      	b.n	8006bcc <HAL_RTC_SetTime+0x132>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	22ca      	movs	r2, #202	; 0xca
 8006aca:	625a      	str	r2, [r3, #36]	; 0x24
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2253      	movs	r2, #83	; 0x53
 8006ad2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 fb55 	bl	8007184 <RTC_EnterInitMode>
 8006ada:	4603      	mov	r3, r0
 8006adc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006ade:	7cfb      	ldrb	r3, [r7, #19]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d163      	bne.n	8006bac <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d126      	bne.n	8006b38 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d102      	bne.n	8006afe <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2200      	movs	r2, #0
 8006afc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 fbb0 	bl	8007268 <RTC_ByteToBcd2>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	785b      	ldrb	r3, [r3, #1]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 fba9 	bl	8007268 <RTC_ByteToBcd2>
 8006b16:	4603      	mov	r3, r0
 8006b18:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b1a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	789b      	ldrb	r3, [r3, #2]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 fba1 	bl	8007268 <RTC_ByteToBcd2>
 8006b26:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b28:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	78db      	ldrb	r3, [r3, #3]
 8006b30:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b32:	4313      	orrs	r3, r2
 8006b34:	617b      	str	r3, [r7, #20]
 8006b36:	e018      	b.n	8006b6a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d102      	bne.n	8006b4c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	785b      	ldrb	r3, [r3, #1]
 8006b56:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b58:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b5e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	78db      	ldrb	r3, [r3, #3]
 8006b64:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006b74:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006b78:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689a      	ldr	r2, [r3, #8]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b88:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	6899      	ldr	r1, [r3, #8]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	68da      	ldr	r2, [r3, #12]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 fb22 	bl	80071ec <RTC_ExitInitMode>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	22ff      	movs	r2, #255	; 0xff
 8006bb2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006bb4:	7cfb      	ldrb	r3, [r7, #19]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d103      	bne.n	8006bc2 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006bca:	7cfb      	ldrb	r3, [r7, #19]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	371c      	adds	r7, #28
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd90      	pop	{r4, r7, pc}

08006bd4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006c02:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006c06:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	0c1b      	lsrs	r3, r3, #16
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	0a1b      	lsrs	r3, r3, #8
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	0d9b      	lsrs	r3, r3, #22
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	b2da      	uxtb	r2, r3
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d11a      	bne.n	8006c82 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 fb29 	bl	80072a8 <RTC_Bcd2ToByte>
 8006c56:	4603      	mov	r3, r0
 8006c58:	461a      	mov	r2, r3
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	785b      	ldrb	r3, [r3, #1]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 fb20 	bl	80072a8 <RTC_Bcd2ToByte>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	789b      	ldrb	r3, [r3, #2]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 fb17 	bl	80072a8 <RTC_Bcd2ToByte>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3718      	adds	r7, #24
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006c8c:	b590      	push	{r4, r7, lr}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d101      	bne.n	8006ca6 <HAL_RTC_SetDate+0x1a>
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	e075      	b.n	8006d92 <HAL_RTC_SetDate+0x106>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10e      	bne.n	8006cda <HAL_RTC_SetDate+0x4e>
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	785b      	ldrb	r3, [r3, #1]
 8006cc0:	f003 0310 	and.w	r3, r3, #16
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d008      	beq.n	8006cda <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	f023 0310 	bic.w	r3, r3, #16
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	330a      	adds	r3, #10
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d11c      	bne.n	8006d1a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	78db      	ldrb	r3, [r3, #3]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 fabf 	bl	8007268 <RTC_ByteToBcd2>
 8006cea:	4603      	mov	r3, r0
 8006cec:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	785b      	ldrb	r3, [r3, #1]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 fab8 	bl	8007268 <RTC_ByteToBcd2>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006cfc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	789b      	ldrb	r3, [r3, #2]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 fab0 	bl	8007268 <RTC_ByteToBcd2>
 8006d08:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006d0a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006d14:	4313      	orrs	r3, r2
 8006d16:	617b      	str	r3, [r7, #20]
 8006d18:	e00e      	b.n	8006d38 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	78db      	ldrb	r3, [r3, #3]
 8006d1e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	785b      	ldrb	r3, [r3, #1]
 8006d24:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006d26:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006d2c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006d34:	4313      	orrs	r3, r2
 8006d36:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	22ca      	movs	r2, #202	; 0xca
 8006d3e:	625a      	str	r2, [r3, #36]	; 0x24
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2253      	movs	r2, #83	; 0x53
 8006d46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 fa1b 	bl	8007184 <RTC_EnterInitMode>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006d52:	7cfb      	ldrb	r3, [r7, #19]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10c      	bne.n	8006d72 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d62:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d66:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f000 fa3f 	bl	80071ec <RTC_ExitInitMode>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	22ff      	movs	r2, #255	; 0xff
 8006d78:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006d7a:	7cfb      	ldrb	r3, [r7, #19]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d103      	bne.n	8006d88 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006d90:	7cfb      	ldrb	r3, [r7, #19]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	371c      	adds	r7, #28
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd90      	pop	{r4, r7, pc}

08006d9a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b086      	sub	sp, #24
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	60f8      	str	r0, [r7, #12]
 8006da2:	60b9      	str	r1, [r7, #8]
 8006da4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006db0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006db4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	0c1b      	lsrs	r3, r3, #16
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	0a1b      	lsrs	r3, r3, #8
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	f003 031f 	and.w	r3, r3, #31
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	0b5b      	lsrs	r3, r3, #13
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d11a      	bne.n	8006e2a <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	78db      	ldrb	r3, [r3, #3]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 fa55 	bl	80072a8 <RTC_Bcd2ToByte>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	461a      	mov	r2, r3
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	785b      	ldrb	r3, [r3, #1]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 fa4c 	bl	80072a8 <RTC_Bcd2ToByte>
 8006e10:	4603      	mov	r3, r0
 8006e12:	461a      	mov	r2, r3
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	789b      	ldrb	r3, [r3, #2]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 fa43 	bl	80072a8 <RTC_Bcd2ToByte>
 8006e22:	4603      	mov	r3, r0
 8006e24:	461a      	mov	r2, r3
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006e34:	b590      	push	{r4, r7, lr}
 8006e36:	b089      	sub	sp, #36	; 0x24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d101      	bne.n	8006e4e <HAL_RTC_SetAlarm_IT+0x1a>
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	e127      	b.n	800709e <HAL_RTC_SetAlarm_IT+0x26a>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2202      	movs	r2, #2
 8006e5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d137      	bne.n	8006ed4 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d102      	bne.n	8006e78 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	2200      	movs	r2, #0
 8006e76:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 f9f3 	bl	8007268 <RTC_ByteToBcd2>
 8006e82:	4603      	mov	r3, r0
 8006e84:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	785b      	ldrb	r3, [r3, #1]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 f9ec 	bl	8007268 <RTC_ByteToBcd2>
 8006e90:	4603      	mov	r3, r0
 8006e92:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e94:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	789b      	ldrb	r3, [r3, #2]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 f9e4 	bl	8007268 <RTC_ByteToBcd2>
 8006ea0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006ea2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	78db      	ldrb	r3, [r3, #3]
 8006eaa:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006eac:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 f9d6 	bl	8007268 <RTC_ByteToBcd2>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ec0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ec8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	61fb      	str	r3, [r7, #28]
 8006ed2:	e023      	b.n	8006f1c <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d102      	bne.n	8006ee8 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	785b      	ldrb	r3, [r3, #1]
 8006ef2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ef4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006efa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	78db      	ldrb	r3, [r3, #3]
 8006f00:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f02:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f0a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f0c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f12:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	22ca      	movs	r2, #202	; 0xca
 8006f2e:	625a      	str	r2, [r3, #36]	; 0x24
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2253      	movs	r2, #83	; 0x53
 8006f36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f40:	d14a      	bne.n	8006fd8 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f50:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006f62:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8006f64:	f7fc fb82 	bl	800366c <HAL_GetTick>
 8006f68:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006f6a:	e015      	b.n	8006f98 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f6c:	f7fc fb7e 	bl	800366c <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f7a:	d90d      	bls.n	8006f98 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	22ff      	movs	r2, #255	; 0xff
 8006f82:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2203      	movs	r2, #3
 8006f88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e082      	b.n	800709e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0e2      	beq.n	8006f6c <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	69fa      	ldr	r2, [r7, #28]
 8006fac:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	69ba      	ldr	r2, [r7, #24]
 8006fb4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fc4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006fd4:	609a      	str	r2, [r3, #8]
 8006fd6:	e049      	b.n	800706c <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689a      	ldr	r2, [r3, #8]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006fe6:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	b2da      	uxtb	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006ff8:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8006ffa:	f7fc fb37 	bl	800366c <HAL_GetTick>
 8006ffe:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007000:	e015      	b.n	800702e <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007002:	f7fc fb33 	bl	800366c <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007010:	d90d      	bls.n	800702e <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	22ff      	movs	r2, #255	; 0xff
 8007018:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2203      	movs	r2, #3
 800701e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e037      	b.n	800709e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b00      	cmp	r3, #0
 800703a:	d0e2      	beq.n	8007002 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	69fa      	ldr	r2, [r7, #28]
 8007042:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689a      	ldr	r2, [r3, #8]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800705a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689a      	ldr	r2, [r3, #8]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800706a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800706c:	4b0e      	ldr	r3, [pc, #56]	; (80070a8 <HAL_RTC_SetAlarm_IT+0x274>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a0d      	ldr	r2, [pc, #52]	; (80070a8 <HAL_RTC_SetAlarm_IT+0x274>)
 8007072:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007076:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007078:	4b0b      	ldr	r3, [pc, #44]	; (80070a8 <HAL_RTC_SetAlarm_IT+0x274>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	4a0a      	ldr	r2, [pc, #40]	; (80070a8 <HAL_RTC_SetAlarm_IT+0x274>)
 800707e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007082:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	22ff      	movs	r2, #255	; 0xff
 800708a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3724      	adds	r7, #36	; 0x24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd90      	pop	{r4, r7, pc}
 80070a6:	bf00      	nop
 80070a8:	40010400 	.word	0x40010400

080070ac <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80070b4:	4b1f      	ldr	r3, [pc, #124]	; (8007134 <HAL_RTC_AlarmIRQHandler+0x88>)
 80070b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80070ba:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d012      	beq.n	80070f0 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00b      	beq.n	80070f0 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80070e8:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7f9 fff2 	bl	80010d4 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d012      	beq.n	8007124 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00b      	beq.n	8007124 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	b2da      	uxtb	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f462 7220 	orn	r2, r2, #640	; 0x280
 800711c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7fa f84e 	bl	80011c0 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800712c:	bf00      	nop
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	40010400 	.word	0x40010400

08007138 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68da      	ldr	r2, [r3, #12]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800714e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007150:	f7fc fa8c 	bl	800366c <HAL_GetTick>
 8007154:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007156:	e009      	b.n	800716c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007158:	f7fc fa88 	bl	800366c <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007166:	d901      	bls.n	800716c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e007      	b.n	800717c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	f003 0320 	and.w	r3, r3, #32
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0ee      	beq.n	8007158 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800718c:	2300      	movs	r3, #0
 800718e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719a:	2b00      	cmp	r3, #0
 800719c:	d120      	bne.n	80071e0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f04f 32ff 	mov.w	r2, #4294967295
 80071a6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80071a8:	f7fc fa60 	bl	800366c <HAL_GetTick>
 80071ac:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80071ae:	e00d      	b.n	80071cc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80071b0:	f7fc fa5c 	bl	800366c <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071be:	d905      	bls.n	80071cc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2203      	movs	r2, #3
 80071c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d102      	bne.n	80071e0 <RTC_EnterInitMode+0x5c>
 80071da:	7bfb      	ldrb	r3, [r7, #15]
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d1e7      	bne.n	80071b0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
	...

080071ec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80071f8:	4b1a      	ldr	r3, [pc, #104]	; (8007264 <RTC_ExitInitMode+0x78>)
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	4a19      	ldr	r2, [pc, #100]	; (8007264 <RTC_ExitInitMode+0x78>)
 80071fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007202:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007204:	4b17      	ldr	r3, [pc, #92]	; (8007264 <RTC_ExitInitMode+0x78>)
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f003 0320 	and.w	r3, r3, #32
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10c      	bne.n	800722a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7ff ff91 	bl	8007138 <HAL_RTC_WaitForSynchro>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d01e      	beq.n	800725a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2203      	movs	r2, #3
 8007220:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	73fb      	strb	r3, [r7, #15]
 8007228:	e017      	b.n	800725a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800722a:	4b0e      	ldr	r3, [pc, #56]	; (8007264 <RTC_ExitInitMode+0x78>)
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	4a0d      	ldr	r2, [pc, #52]	; (8007264 <RTC_ExitInitMode+0x78>)
 8007230:	f023 0320 	bic.w	r3, r3, #32
 8007234:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7ff ff7e 	bl	8007138 <HAL_RTC_WaitForSynchro>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d005      	beq.n	800724e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2203      	movs	r2, #3
 8007246:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800724e:	4b05      	ldr	r3, [pc, #20]	; (8007264 <RTC_ExitInitMode+0x78>)
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	4a04      	ldr	r2, [pc, #16]	; (8007264 <RTC_ExitInitMode+0x78>)
 8007254:	f043 0320 	orr.w	r3, r3, #32
 8007258:	6093      	str	r3, [r2, #8]
  }

  return status;
 800725a:	7bfb      	ldrb	r3, [r7, #15]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	40002800 	.word	0x40002800

08007268 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	4603      	mov	r3, r0
 8007270:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007272:	2300      	movs	r3, #0
 8007274:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8007276:	79fb      	ldrb	r3, [r7, #7]
 8007278:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800727a:	e005      	b.n	8007288 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	3301      	adds	r3, #1
 8007280:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8007282:	7afb      	ldrb	r3, [r7, #11]
 8007284:	3b0a      	subs	r3, #10
 8007286:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007288:	7afb      	ldrb	r3, [r7, #11]
 800728a:	2b09      	cmp	r3, #9
 800728c:	d8f6      	bhi.n	800727c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	b2db      	uxtb	r3, r3
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	b2da      	uxtb	r2, r3
 8007296:	7afb      	ldrb	r3, [r7, #11]
 8007298:	4313      	orrs	r3, r2
 800729a:	b2db      	uxtb	r3, r3
}
 800729c:	4618      	mov	r0, r3
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	4603      	mov	r3, r0
 80072b0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80072b2:	79fb      	ldrb	r3, [r7, #7]
 80072b4:	091b      	lsrs	r3, r3, #4
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	461a      	mov	r2, r3
 80072ba:	0092      	lsls	r2, r2, #2
 80072bc:	4413      	add	r3, r2
 80072be:	005b      	lsls	r3, r3, #1
 80072c0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80072c2:	79fb      	ldrb	r3, [r7, #7]
 80072c4:	f003 030f 	and.w	r3, r3, #15
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
 80072cc:	4413      	add	r3, r2
 80072ce:	b2db      	uxtb	r3, r3
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80072e4:	4b0f      	ldr	r3, [pc, #60]	; (8007324 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80072e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80072ea:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00b      	beq.n	8007312 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	b2da      	uxtb	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800730a:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f80b 	bl	8007328 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800731a:	bf00      	nop
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	40010400 	.word	0x40010400

08007328 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800733c:	b480      	push	{r7}
 800733e:	b087      	sub	sp, #28
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3350      	adds	r3, #80	; 0x50
 800734e:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	009a      	lsls	r2, r3, #2
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	4413      	add	r3, r2
 8007358:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	461a      	mov	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6013      	str	r3, [r2, #0]
}
 8007362:	bf00      	nop
 8007364:	371c      	adds	r7, #28
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e095      	b.n	80074ac <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	2b00      	cmp	r3, #0
 8007386:	d108      	bne.n	800739a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007390:	d009      	beq.n	80073a6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	61da      	str	r2, [r3, #28]
 8007398:	e005      	b.n	80073a6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d106      	bne.n	80073c6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7fb febb 	bl	800313c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2202      	movs	r2, #2
 80073ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073dc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073e6:	d902      	bls.n	80073ee <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80073e8:	2300      	movs	r3, #0
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	e002      	b.n	80073f4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80073ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073f2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80073fc:	d007      	beq.n	800740e <HAL_SPI_Init+0xa0>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007406:	d002      	beq.n	800740e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800741e:	431a      	orrs	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	431a      	orrs	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	431a      	orrs	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800743c:	431a      	orrs	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007446:	431a      	orrs	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007450:	ea42 0103 	orr.w	r1, r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007458:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	430a      	orrs	r2, r1
 8007462:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	0c1b      	lsrs	r3, r3, #16
 800746a:	f003 0204 	and.w	r2, r3, #4
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	f003 0310 	and.w	r3, r3, #16
 8007476:	431a      	orrs	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800747c:	f003 0308 	and.w	r3, r3, #8
 8007480:	431a      	orrs	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800748a:	ea42 0103 	orr.w	r1, r2, r3
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	430a      	orrs	r2, r1
 800749a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08a      	sub	sp, #40	; 0x28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
 80074c0:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80074c2:	2301      	movs	r3, #1
 80074c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d101      	bne.n	80074da <HAL_SPI_TransmitReceive+0x26>
 80074d6:	2302      	movs	r3, #2
 80074d8:	e1fb      	b.n	80078d2 <HAL_SPI_TransmitReceive+0x41e>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074e2:	f7fc f8c3 	bl	800366c <HAL_GetTick>
 80074e6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074ee:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80074f6:	887b      	ldrh	r3, [r7, #2]
 80074f8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80074fa:	887b      	ldrh	r3, [r7, #2]
 80074fc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074fe:	7efb      	ldrb	r3, [r7, #27]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d00e      	beq.n	8007522 <HAL_SPI_TransmitReceive+0x6e>
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800750a:	d106      	bne.n	800751a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d102      	bne.n	800751a <HAL_SPI_TransmitReceive+0x66>
 8007514:	7efb      	ldrb	r3, [r7, #27]
 8007516:	2b04      	cmp	r3, #4
 8007518:	d003      	beq.n	8007522 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800751a:	2302      	movs	r3, #2
 800751c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007520:	e1cd      	b.n	80078be <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <HAL_SPI_TransmitReceive+0x80>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d002      	beq.n	8007534 <HAL_SPI_TransmitReceive+0x80>
 800752e:	887b      	ldrh	r3, [r7, #2]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d103      	bne.n	800753c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800753a:	e1c0      	b.n	80078be <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b04      	cmp	r3, #4
 8007546:	d003      	beq.n	8007550 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2205      	movs	r2, #5
 800754c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	887a      	ldrh	r2, [r7, #2]
 8007560:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	887a      	ldrh	r2, [r7, #2]
 8007568:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	887a      	ldrh	r2, [r7, #2]
 8007576:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	887a      	ldrh	r2, [r7, #2]
 800757c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007592:	d802      	bhi.n	800759a <HAL_SPI_TransmitReceive+0xe6>
 8007594:	8a3b      	ldrh	r3, [r7, #16]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d908      	bls.n	80075ac <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075a8:	605a      	str	r2, [r3, #4]
 80075aa:	e007      	b.n	80075bc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685a      	ldr	r2, [r3, #4]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075ba:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c6:	2b40      	cmp	r3, #64	; 0x40
 80075c8:	d007      	beq.n	80075da <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075e2:	d97c      	bls.n	80076de <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <HAL_SPI_TransmitReceive+0x13e>
 80075ec:	8a7b      	ldrh	r3, [r7, #18]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d169      	bne.n	80076c6 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f6:	881a      	ldrh	r2, [r3, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007602:	1c9a      	adds	r2, r3, #2
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800760c:	b29b      	uxth	r3, r3
 800760e:	3b01      	subs	r3, #1
 8007610:	b29a      	uxth	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007616:	e056      	b.n	80076c6 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f003 0302 	and.w	r3, r3, #2
 8007622:	2b02      	cmp	r3, #2
 8007624:	d11b      	bne.n	800765e <HAL_SPI_TransmitReceive+0x1aa>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800762a:	b29b      	uxth	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	d016      	beq.n	800765e <HAL_SPI_TransmitReceive+0x1aa>
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	2b01      	cmp	r3, #1
 8007634:	d113      	bne.n	800765e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763a:	881a      	ldrh	r2, [r3, #0]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007646:	1c9a      	adds	r2, r3, #2
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007650:	b29b      	uxth	r3, r3
 8007652:	3b01      	subs	r3, #1
 8007654:	b29a      	uxth	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	2b01      	cmp	r3, #1
 800766a:	d11c      	bne.n	80076a6 <HAL_SPI_TransmitReceive+0x1f2>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007672:	b29b      	uxth	r3, r3
 8007674:	2b00      	cmp	r3, #0
 8007676:	d016      	beq.n	80076a6 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68da      	ldr	r2, [r3, #12]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007682:	b292      	uxth	r2, r2
 8007684:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768a:	1c9a      	adds	r2, r3, #2
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007696:	b29b      	uxth	r3, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	b29a      	uxth	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076a2:	2301      	movs	r3, #1
 80076a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076a6:	f7fb ffe1 	bl	800366c <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d807      	bhi.n	80076c6 <HAL_SPI_TransmitReceive+0x212>
 80076b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076bc:	d003      	beq.n	80076c6 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80076c4:	e0fb      	b.n	80078be <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1a3      	bne.n	8007618 <HAL_SPI_TransmitReceive+0x164>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d19d      	bne.n	8007618 <HAL_SPI_TransmitReceive+0x164>
 80076dc:	e0df      	b.n	800789e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d003      	beq.n	80076ee <HAL_SPI_TransmitReceive+0x23a>
 80076e6:	8a7b      	ldrh	r3, [r7, #18]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	f040 80cb 	bne.w	8007884 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d912      	bls.n	800771e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fc:	881a      	ldrh	r2, [r3, #0]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007708:	1c9a      	adds	r2, r3, #2
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007712:	b29b      	uxth	r3, r3
 8007714:	3b02      	subs	r3, #2
 8007716:	b29a      	uxth	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800771c:	e0b2      	b.n	8007884 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	330c      	adds	r3, #12
 8007728:	7812      	ldrb	r2, [r2, #0]
 800772a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800773a:	b29b      	uxth	r3, r3
 800773c:	3b01      	subs	r3, #1
 800773e:	b29a      	uxth	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007744:	e09e      	b.n	8007884 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	f003 0302 	and.w	r3, r3, #2
 8007750:	2b02      	cmp	r3, #2
 8007752:	d134      	bne.n	80077be <HAL_SPI_TransmitReceive+0x30a>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007758:	b29b      	uxth	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d02f      	beq.n	80077be <HAL_SPI_TransmitReceive+0x30a>
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	2b01      	cmp	r3, #1
 8007762:	d12c      	bne.n	80077be <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007768:	b29b      	uxth	r3, r3
 800776a:	2b01      	cmp	r3, #1
 800776c:	d912      	bls.n	8007794 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007772:	881a      	ldrh	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777e:	1c9a      	adds	r2, r3, #2
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007788:	b29b      	uxth	r3, r3
 800778a:	3b02      	subs	r3, #2
 800778c:	b29a      	uxth	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007792:	e012      	b.n	80077ba <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	330c      	adds	r3, #12
 800779e:	7812      	ldrb	r2, [r2, #0]
 80077a0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a6:	1c5a      	adds	r2, r3, #1
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	3b01      	subs	r3, #1
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d148      	bne.n	800785e <HAL_SPI_TransmitReceive+0x3aa>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d042      	beq.n	800785e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077de:	b29b      	uxth	r3, r3
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d923      	bls.n	800782c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68da      	ldr	r2, [r3, #12]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ee:	b292      	uxth	r2, r2
 80077f0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	1c9a      	adds	r2, r3, #2
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007802:	b29b      	uxth	r3, r3
 8007804:	3b02      	subs	r3, #2
 8007806:	b29a      	uxth	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007814:	b29b      	uxth	r3, r3
 8007816:	2b01      	cmp	r3, #1
 8007818:	d81f      	bhi.n	800785a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685a      	ldr	r2, [r3, #4]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007828:	605a      	str	r2, [r3, #4]
 800782a:	e016      	b.n	800785a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f103 020c 	add.w	r2, r3, #12
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007838:	7812      	ldrb	r2, [r2, #0]
 800783a:	b2d2      	uxtb	r2, r2
 800783c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800784e:	b29b      	uxth	r3, r3
 8007850:	3b01      	subs	r3, #1
 8007852:	b29a      	uxth	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800785a:	2301      	movs	r3, #1
 800785c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800785e:	f7fb ff05 	bl	800366c <HAL_GetTick>
 8007862:	4602      	mov	r2, r0
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800786a:	429a      	cmp	r2, r3
 800786c:	d803      	bhi.n	8007876 <HAL_SPI_TransmitReceive+0x3c2>
 800786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007874:	d102      	bne.n	800787c <HAL_SPI_TransmitReceive+0x3c8>
 8007876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007878:	2b00      	cmp	r3, #0
 800787a:	d103      	bne.n	8007884 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007882:	e01c      	b.n	80078be <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007888:	b29b      	uxth	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	f47f af5b 	bne.w	8007746 <HAL_SPI_TransmitReceive+0x292>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007896:	b29b      	uxth	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	f47f af54 	bne.w	8007746 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800789e:	69fa      	ldr	r2, [r7, #28]
 80078a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f000 f938 	bl	8007b18 <SPI_EndRxTxTransaction>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d006      	beq.n	80078bc <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2220      	movs	r2, #32
 80078b8:	661a      	str	r2, [r3, #96]	; 0x60
 80078ba:	e000      	b.n	80078be <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80078bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80078ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3728      	adds	r7, #40	; 0x28
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
	...

080078dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b088      	sub	sp, #32
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	603b      	str	r3, [r7, #0]
 80078e8:	4613      	mov	r3, r2
 80078ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80078ec:	f7fb febe 	bl	800366c <HAL_GetTick>
 80078f0:	4602      	mov	r2, r0
 80078f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f4:	1a9b      	subs	r3, r3, r2
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	4413      	add	r3, r2
 80078fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80078fc:	f7fb feb6 	bl	800366c <HAL_GetTick>
 8007900:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007902:	4b39      	ldr	r3, [pc, #228]	; (80079e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	015b      	lsls	r3, r3, #5
 8007908:	0d1b      	lsrs	r3, r3, #20
 800790a:	69fa      	ldr	r2, [r7, #28]
 800790c:	fb02 f303 	mul.w	r3, r2, r3
 8007910:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007912:	e054      	b.n	80079be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791a:	d050      	beq.n	80079be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800791c:	f7fb fea6 	bl	800366c <HAL_GetTick>
 8007920:	4602      	mov	r2, r0
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	69fa      	ldr	r2, [r7, #28]
 8007928:	429a      	cmp	r2, r3
 800792a:	d902      	bls.n	8007932 <SPI_WaitFlagStateUntilTimeout+0x56>
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d13d      	bne.n	80079ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007940:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800794a:	d111      	bne.n	8007970 <SPI_WaitFlagStateUntilTimeout+0x94>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007954:	d004      	beq.n	8007960 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800795e:	d107      	bne.n	8007970 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800796e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007978:	d10f      	bne.n	800799a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007988:	601a      	str	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007998:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e017      	b.n	80079de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	689a      	ldr	r2, [r3, #8]
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	4013      	ands	r3, r2
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	bf0c      	ite	eq
 80079ce:	2301      	moveq	r3, #1
 80079d0:	2300      	movne	r3, #0
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	461a      	mov	r2, r3
 80079d6:	79fb      	ldrb	r3, [r7, #7]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d19b      	bne.n	8007914 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3720      	adds	r7, #32
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	20000010 	.word	0x20000010

080079ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08a      	sub	sp, #40	; 0x28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80079fa:	2300      	movs	r3, #0
 80079fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80079fe:	f7fb fe35 	bl	800366c <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a06:	1a9b      	subs	r3, r3, r2
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007a0e:	f7fb fe2d 	bl	800366c <HAL_GetTick>
 8007a12:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	330c      	adds	r3, #12
 8007a1a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007a1c:	4b3d      	ldr	r3, [pc, #244]	; (8007b14 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	4613      	mov	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	00da      	lsls	r2, r3, #3
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	0d1b      	lsrs	r3, r3, #20
 8007a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a2e:	fb02 f303 	mul.w	r3, r2, r3
 8007a32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007a34:	e060      	b.n	8007af8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007a3c:	d107      	bne.n	8007a4e <SPI_WaitFifoStateUntilTimeout+0x62>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d104      	bne.n	8007a4e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007a4c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a54:	d050      	beq.n	8007af8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a56:	f7fb fe09 	bl	800366c <HAL_GetTick>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d902      	bls.n	8007a6c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d13d      	bne.n	8007ae8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a84:	d111      	bne.n	8007aaa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a8e:	d004      	beq.n	8007a9a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a98:	d107      	bne.n	8007aaa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aa8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ab2:	d10f      	bne.n	8007ad4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ad2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e010      	b.n	8007b0a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d101      	bne.n	8007af2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	3b01      	subs	r3, #1
 8007af6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689a      	ldr	r2, [r3, #8]
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	4013      	ands	r3, r2
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d196      	bne.n	8007a36 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3728      	adds	r7, #40	; 0x28
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20000010 	.word	0x20000010

08007b18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af02      	add	r7, sp, #8
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f7ff ff5b 	bl	80079ec <SPI_WaitFifoStateUntilTimeout>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d007      	beq.n	8007b4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b40:	f043 0220 	orr.w	r2, r3, #32
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e027      	b.n	8007b9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	2200      	movs	r2, #0
 8007b54:	2180      	movs	r1, #128	; 0x80
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f7ff fec0 	bl	80078dc <SPI_WaitFlagStateUntilTimeout>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d007      	beq.n	8007b72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b66:	f043 0220 	orr.w	r2, r3, #32
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e014      	b.n	8007b9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	9300      	str	r3, [sp, #0]
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f7ff ff34 	bl	80079ec <SPI_WaitFifoStateUntilTimeout>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d007      	beq.n	8007b9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b8e:	f043 0220 	orr.w	r2, r3, #32
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e000      	b.n	8007b9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e049      	b.n	8007c4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d106      	bne.n	8007bd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7fb fafa 	bl	80031c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	3304      	adds	r3, #4
 8007be0:	4619      	mov	r1, r3
 8007be2:	4610      	mov	r0, r2
 8007be4:	f000 fa9a 	bl	800811c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d001      	beq.n	8007c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e03b      	b.n	8007ce4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2202      	movs	r2, #2
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f042 0201 	orr.w	r2, r2, #1
 8007c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a19      	ldr	r2, [pc, #100]	; (8007cf0 <HAL_TIM_Base_Start_IT+0x9c>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d009      	beq.n	8007ca2 <HAL_TIM_Base_Start_IT+0x4e>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c96:	d004      	beq.n	8007ca2 <HAL_TIM_Base_Start_IT+0x4e>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a15      	ldr	r2, [pc, #84]	; (8007cf4 <HAL_TIM_Base_Start_IT+0xa0>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d115      	bne.n	8007cce <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	689a      	ldr	r2, [r3, #8]
 8007ca8:	4b13      	ldr	r3, [pc, #76]	; (8007cf8 <HAL_TIM_Base_Start_IT+0xa4>)
 8007caa:	4013      	ands	r3, r2
 8007cac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2b06      	cmp	r3, #6
 8007cb2:	d015      	beq.n	8007ce0 <HAL_TIM_Base_Start_IT+0x8c>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cba:	d011      	beq.n	8007ce0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f042 0201 	orr.w	r2, r2, #1
 8007cca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ccc:	e008      	b.n	8007ce0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f042 0201 	orr.w	r2, r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	e000      	b.n	8007ce2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ce0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	40012c00 	.word	0x40012c00
 8007cf4:	40014000 	.word	0x40014000
 8007cf8:	00010007 	.word	0x00010007

08007cfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d122      	bne.n	8007d58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f003 0302 	and.w	r3, r3, #2
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d11b      	bne.n	8007d58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f06f 0202 	mvn.w	r2, #2
 8007d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	f003 0303 	and.w	r3, r3, #3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f9ce 	bl	80080e0 <HAL_TIM_IC_CaptureCallback>
 8007d44:	e005      	b.n	8007d52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f9c0 	bl	80080cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f9d1 	bl	80080f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	f003 0304 	and.w	r3, r3, #4
 8007d62:	2b04      	cmp	r3, #4
 8007d64:	d122      	bne.n	8007dac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	f003 0304 	and.w	r3, r3, #4
 8007d70:	2b04      	cmp	r3, #4
 8007d72:	d11b      	bne.n	8007dac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f06f 0204 	mvn.w	r2, #4
 8007d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2202      	movs	r2, #2
 8007d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f9a4 	bl	80080e0 <HAL_TIM_IC_CaptureCallback>
 8007d98:	e005      	b.n	8007da6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f996 	bl	80080cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f9a7 	bl	80080f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	f003 0308 	and.w	r3, r3, #8
 8007db6:	2b08      	cmp	r3, #8
 8007db8:	d122      	bne.n	8007e00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	f003 0308 	and.w	r3, r3, #8
 8007dc4:	2b08      	cmp	r3, #8
 8007dc6:	d11b      	bne.n	8007e00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f06f 0208 	mvn.w	r2, #8
 8007dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2204      	movs	r2, #4
 8007dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	f003 0303 	and.w	r3, r3, #3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f97a 	bl	80080e0 <HAL_TIM_IC_CaptureCallback>
 8007dec:	e005      	b.n	8007dfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f96c 	bl	80080cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f97d 	bl	80080f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	f003 0310 	and.w	r3, r3, #16
 8007e0a:	2b10      	cmp	r3, #16
 8007e0c:	d122      	bne.n	8007e54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	f003 0310 	and.w	r3, r3, #16
 8007e18:	2b10      	cmp	r3, #16
 8007e1a:	d11b      	bne.n	8007e54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f06f 0210 	mvn.w	r2, #16
 8007e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2208      	movs	r2, #8
 8007e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f950 	bl	80080e0 <HAL_TIM_IC_CaptureCallback>
 8007e40:	e005      	b.n	8007e4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f942 	bl	80080cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f953 	bl	80080f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	f003 0301 	and.w	r3, r3, #1
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d10e      	bne.n	8007e80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f003 0301 	and.w	r3, r3, #1
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d107      	bne.n	8007e80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f06f 0201 	mvn.w	r2, #1
 8007e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7f9 f8fc 	bl	8001078 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e8a:	2b80      	cmp	r3, #128	; 0x80
 8007e8c:	d10e      	bne.n	8007eac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e98:	2b80      	cmp	r3, #128	; 0x80
 8007e9a:	d107      	bne.n	8007eac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 faa6 	bl	80083f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eba:	d10e      	bne.n	8007eda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec6:	2b80      	cmp	r3, #128	; 0x80
 8007ec8:	d107      	bne.n	8007eda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fa99 	bl	800840c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee4:	2b40      	cmp	r3, #64	; 0x40
 8007ee6:	d10e      	bne.n	8007f06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef2:	2b40      	cmp	r3, #64	; 0x40
 8007ef4:	d107      	bne.n	8007f06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f901 	bl	8008108 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	f003 0320 	and.w	r3, r3, #32
 8007f10:	2b20      	cmp	r3, #32
 8007f12:	d10e      	bne.n	8007f32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	f003 0320 	and.w	r3, r3, #32
 8007f1e:	2b20      	cmp	r3, #32
 8007f20:	d107      	bne.n	8007f32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f06f 0220 	mvn.w	r2, #32
 8007f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fa59 	bl	80083e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f32:	bf00      	nop
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d101      	bne.n	8007f56 <HAL_TIM_ConfigClockSource+0x1c>
 8007f52:	2302      	movs	r3, #2
 8007f54:	e0b6      	b.n	80080c4 <HAL_TIM_ConfigClockSource+0x18a>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2202      	movs	r2, #2
 8007f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f74:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f78:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f80:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f92:	d03e      	beq.n	8008012 <HAL_TIM_ConfigClockSource+0xd8>
 8007f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f98:	f200 8087 	bhi.w	80080aa <HAL_TIM_ConfigClockSource+0x170>
 8007f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fa0:	f000 8086 	beq.w	80080b0 <HAL_TIM_ConfigClockSource+0x176>
 8007fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fa8:	d87f      	bhi.n	80080aa <HAL_TIM_ConfigClockSource+0x170>
 8007faa:	2b70      	cmp	r3, #112	; 0x70
 8007fac:	d01a      	beq.n	8007fe4 <HAL_TIM_ConfigClockSource+0xaa>
 8007fae:	2b70      	cmp	r3, #112	; 0x70
 8007fb0:	d87b      	bhi.n	80080aa <HAL_TIM_ConfigClockSource+0x170>
 8007fb2:	2b60      	cmp	r3, #96	; 0x60
 8007fb4:	d050      	beq.n	8008058 <HAL_TIM_ConfigClockSource+0x11e>
 8007fb6:	2b60      	cmp	r3, #96	; 0x60
 8007fb8:	d877      	bhi.n	80080aa <HAL_TIM_ConfigClockSource+0x170>
 8007fba:	2b50      	cmp	r3, #80	; 0x50
 8007fbc:	d03c      	beq.n	8008038 <HAL_TIM_ConfigClockSource+0xfe>
 8007fbe:	2b50      	cmp	r3, #80	; 0x50
 8007fc0:	d873      	bhi.n	80080aa <HAL_TIM_ConfigClockSource+0x170>
 8007fc2:	2b40      	cmp	r3, #64	; 0x40
 8007fc4:	d058      	beq.n	8008078 <HAL_TIM_ConfigClockSource+0x13e>
 8007fc6:	2b40      	cmp	r3, #64	; 0x40
 8007fc8:	d86f      	bhi.n	80080aa <HAL_TIM_ConfigClockSource+0x170>
 8007fca:	2b30      	cmp	r3, #48	; 0x30
 8007fcc:	d064      	beq.n	8008098 <HAL_TIM_ConfigClockSource+0x15e>
 8007fce:	2b30      	cmp	r3, #48	; 0x30
 8007fd0:	d86b      	bhi.n	80080aa <HAL_TIM_ConfigClockSource+0x170>
 8007fd2:	2b20      	cmp	r3, #32
 8007fd4:	d060      	beq.n	8008098 <HAL_TIM_ConfigClockSource+0x15e>
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	d867      	bhi.n	80080aa <HAL_TIM_ConfigClockSource+0x170>
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d05c      	beq.n	8008098 <HAL_TIM_ConfigClockSource+0x15e>
 8007fde:	2b10      	cmp	r3, #16
 8007fe0:	d05a      	beq.n	8008098 <HAL_TIM_ConfigClockSource+0x15e>
 8007fe2:	e062      	b.n	80080aa <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6818      	ldr	r0, [r3, #0]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	6899      	ldr	r1, [r3, #8]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	f000 f970 	bl	80082d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008006:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	609a      	str	r2, [r3, #8]
      break;
 8008010:	e04f      	b.n	80080b2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6818      	ldr	r0, [r3, #0]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	6899      	ldr	r1, [r3, #8]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	f000 f959 	bl	80082d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008034:	609a      	str	r2, [r3, #8]
      break;
 8008036:	e03c      	b.n	80080b2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6818      	ldr	r0, [r3, #0]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	6859      	ldr	r1, [r3, #4]
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	461a      	mov	r2, r3
 8008046:	f000 f8cd 	bl	80081e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2150      	movs	r1, #80	; 0x50
 8008050:	4618      	mov	r0, r3
 8008052:	f000 f926 	bl	80082a2 <TIM_ITRx_SetConfig>
      break;
 8008056:	e02c      	b.n	80080b2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6818      	ldr	r0, [r3, #0]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	6859      	ldr	r1, [r3, #4]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	461a      	mov	r2, r3
 8008066:	f000 f8ec 	bl	8008242 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2160      	movs	r1, #96	; 0x60
 8008070:	4618      	mov	r0, r3
 8008072:	f000 f916 	bl	80082a2 <TIM_ITRx_SetConfig>
      break;
 8008076:	e01c      	b.n	80080b2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6818      	ldr	r0, [r3, #0]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	6859      	ldr	r1, [r3, #4]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	461a      	mov	r2, r3
 8008086:	f000 f8ad 	bl	80081e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2140      	movs	r1, #64	; 0x40
 8008090:	4618      	mov	r0, r3
 8008092:	f000 f906 	bl	80082a2 <TIM_ITRx_SetConfig>
      break;
 8008096:	e00c      	b.n	80080b2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4619      	mov	r1, r3
 80080a2:	4610      	mov	r0, r2
 80080a4:	f000 f8fd 	bl	80082a2 <TIM_ITRx_SetConfig>
      break;
 80080a8:	e003      	b.n	80080b2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	73fb      	strb	r3, [r7, #15]
      break;
 80080ae:	e000      	b.n	80080b2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80080b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080d4:	bf00      	nop
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a2a      	ldr	r2, [pc, #168]	; (80081d8 <TIM_Base_SetConfig+0xbc>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d003      	beq.n	800813c <TIM_Base_SetConfig+0x20>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800813a:	d108      	bne.n	800814e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	4313      	orrs	r3, r2
 800814c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a21      	ldr	r2, [pc, #132]	; (80081d8 <TIM_Base_SetConfig+0xbc>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d00b      	beq.n	800816e <TIM_Base_SetConfig+0x52>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800815c:	d007      	beq.n	800816e <TIM_Base_SetConfig+0x52>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a1e      	ldr	r2, [pc, #120]	; (80081dc <TIM_Base_SetConfig+0xc0>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d003      	beq.n	800816e <TIM_Base_SetConfig+0x52>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a1d      	ldr	r2, [pc, #116]	; (80081e0 <TIM_Base_SetConfig+0xc4>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d108      	bne.n	8008180 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	4313      	orrs	r3, r2
 800817e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	4313      	orrs	r3, r2
 800818c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	689a      	ldr	r2, [r3, #8]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a0c      	ldr	r2, [pc, #48]	; (80081d8 <TIM_Base_SetConfig+0xbc>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d007      	beq.n	80081bc <TIM_Base_SetConfig+0xa0>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a0b      	ldr	r2, [pc, #44]	; (80081dc <TIM_Base_SetConfig+0xc0>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d003      	beq.n	80081bc <TIM_Base_SetConfig+0xa0>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a0a      	ldr	r2, [pc, #40]	; (80081e0 <TIM_Base_SetConfig+0xc4>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d103      	bne.n	80081c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	691a      	ldr	r2, [r3, #16]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	615a      	str	r2, [r3, #20]
}
 80081ca:	bf00      	nop
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	40012c00 	.word	0x40012c00
 80081dc:	40014000 	.word	0x40014000
 80081e0:	40014400 	.word	0x40014400

080081e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	f023 0201 	bic.w	r2, r3, #1
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800820e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	011b      	lsls	r3, r3, #4
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	4313      	orrs	r3, r2
 8008218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f023 030a 	bic.w	r3, r3, #10
 8008220:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008222:	697a      	ldr	r2, [r7, #20]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	4313      	orrs	r3, r2
 8008228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	621a      	str	r2, [r3, #32]
}
 8008236:	bf00      	nop
 8008238:	371c      	adds	r7, #28
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008242:	b480      	push	{r7}
 8008244:	b087      	sub	sp, #28
 8008246:	af00      	add	r7, sp, #0
 8008248:	60f8      	str	r0, [r7, #12]
 800824a:	60b9      	str	r1, [r7, #8]
 800824c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	f023 0210 	bic.w	r2, r3, #16
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6a1b      	ldr	r3, [r3, #32]
 8008264:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800826c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	031b      	lsls	r3, r3, #12
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	4313      	orrs	r3, r2
 8008276:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800827e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	011b      	lsls	r3, r3, #4
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	4313      	orrs	r3, r2
 8008288:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	621a      	str	r2, [r3, #32]
}
 8008296:	bf00      	nop
 8008298:	371c      	adds	r7, #28
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b085      	sub	sp, #20
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4313      	orrs	r3, r2
 80082c0:	f043 0307 	orr.w	r3, r3, #7
 80082c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	609a      	str	r2, [r3, #8]
}
 80082cc:	bf00      	nop
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082d8:	b480      	push	{r7}
 80082da:	b087      	sub	sp, #28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
 80082e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	021a      	lsls	r2, r3, #8
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	431a      	orrs	r2, r3
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	4313      	orrs	r3, r2
 8008300:	697a      	ldr	r2, [r7, #20]
 8008302:	4313      	orrs	r3, r2
 8008304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	697a      	ldr	r2, [r7, #20]
 800830a:	609a      	str	r2, [r3, #8]
}
 800830c:	bf00      	nop
 800830e:	371c      	adds	r7, #28
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008328:	2b01      	cmp	r3, #1
 800832a:	d101      	bne.n	8008330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800832c:	2302      	movs	r3, #2
 800832e:	e04f      	b.n	80083d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2202      	movs	r2, #2
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a21      	ldr	r2, [pc, #132]	; (80083dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d108      	bne.n	800836c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008360:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	4313      	orrs	r3, r2
 800836a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008372:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	4313      	orrs	r3, r2
 800837c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a14      	ldr	r2, [pc, #80]	; (80083dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d009      	beq.n	80083a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008398:	d004      	beq.n	80083a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a10      	ldr	r2, [pc, #64]	; (80083e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d10c      	bne.n	80083be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3714      	adds	r7, #20
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	40012c00 	.word	0x40012c00
 80083e0:	40014000 	.word	0x40014000

080083e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e040      	b.n	80084b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008436:	2b00      	cmp	r3, #0
 8008438:	d106      	bne.n	8008448 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7fa fee2 	bl	800320c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2224      	movs	r2, #36	; 0x24
 800844c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f022 0201 	bic.w	r2, r2, #1
 800845c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 fbe8 	bl	8008c34 <UART_SetConfig>
 8008464:	4603      	mov	r3, r0
 8008466:	2b01      	cmp	r3, #1
 8008468:	d101      	bne.n	800846e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e022      	b.n	80084b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008472:	2b00      	cmp	r3, #0
 8008474:	d002      	beq.n	800847c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fe08 	bl	800908c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800848a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689a      	ldr	r2, [r3, #8]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800849a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f042 0201 	orr.w	r2, r2, #1
 80084aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fe8f 	bl	80091d0 <UART_CheckIdleState>
 80084b2:	4603      	mov	r3, r0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80084bc:	b480      	push	{r7}
 80084be:	b08b      	sub	sp, #44	; 0x2c
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	4613      	mov	r3, r2
 80084c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084ce:	2b20      	cmp	r3, #32
 80084d0:	d156      	bne.n	8008580 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d002      	beq.n	80084de <HAL_UART_Transmit_IT+0x22>
 80084d8:	88fb      	ldrh	r3, [r7, #6]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e04f      	b.n	8008582 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d101      	bne.n	80084f0 <HAL_UART_Transmit_IT+0x34>
 80084ec:	2302      	movs	r3, #2
 80084ee:	e048      	b.n	8008582 <HAL_UART_Transmit_IT+0xc6>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	88fa      	ldrh	r2, [r7, #6]
 8008502:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	88fa      	ldrh	r2, [r7, #6]
 800850a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2221      	movs	r2, #33	; 0x21
 8008520:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800852a:	d107      	bne.n	800853c <HAL_UART_Transmit_IT+0x80>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d103      	bne.n	800853c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	4a16      	ldr	r2, [pc, #88]	; (8008590 <HAL_UART_Transmit_IT+0xd4>)
 8008538:	669a      	str	r2, [r3, #104]	; 0x68
 800853a:	e002      	b.n	8008542 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	4a15      	ldr	r2, [pc, #84]	; (8008594 <HAL_UART_Transmit_IT+0xd8>)
 8008540:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	e853 3f00 	ldrex	r3, [r3]
 8008556:	613b      	str	r3, [r7, #16]
   return(result);
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800855e:	627b      	str	r3, [r7, #36]	; 0x24
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	461a      	mov	r2, r3
 8008566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008568:	623b      	str	r3, [r7, #32]
 800856a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856c:	69f9      	ldr	r1, [r7, #28]
 800856e:	6a3a      	ldr	r2, [r7, #32]
 8008570:	e841 2300 	strex	r3, r2, [r1]
 8008574:	61bb      	str	r3, [r7, #24]
   return(result);
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1e6      	bne.n	800854a <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	e000      	b.n	8008582 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8008580:	2302      	movs	r3, #2
  }
}
 8008582:	4618      	mov	r0, r3
 8008584:	372c      	adds	r7, #44	; 0x2c
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	0800972b 	.word	0x0800972b
 8008594:	08009673 	.word	0x08009673

08008598 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b08a      	sub	sp, #40	; 0x28
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	4613      	mov	r3, r2
 80085a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085aa:	2b20      	cmp	r3, #32
 80085ac:	d142      	bne.n	8008634 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d002      	beq.n	80085ba <HAL_UART_Receive_IT+0x22>
 80085b4:	88fb      	ldrh	r3, [r7, #6]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e03b      	b.n	8008636 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d101      	bne.n	80085cc <HAL_UART_Receive_IT+0x34>
 80085c8:	2302      	movs	r3, #2
 80085ca:	e034      	b.n	8008636 <HAL_UART_Receive_IT+0x9e>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a18      	ldr	r2, [pc, #96]	; (8008640 <HAL_UART_Receive_IT+0xa8>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d01f      	beq.n	8008624 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d018      	beq.n	8008624 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	e853 3f00 	ldrex	r3, [r3]
 80085fe:	613b      	str	r3, [r7, #16]
   return(result);
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008606:	627b      	str	r3, [r7, #36]	; 0x24
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	461a      	mov	r2, r3
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	623b      	str	r3, [r7, #32]
 8008612:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008614:	69f9      	ldr	r1, [r7, #28]
 8008616:	6a3a      	ldr	r2, [r7, #32]
 8008618:	e841 2300 	strex	r3, r2, [r1]
 800861c:	61bb      	str	r3, [r7, #24]
   return(result);
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1e6      	bne.n	80085f2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008624:	88fb      	ldrh	r3, [r7, #6]
 8008626:	461a      	mov	r2, r3
 8008628:	68b9      	ldr	r1, [r7, #8]
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f000 fede 	bl	80093ec <UART_Start_Receive_IT>
 8008630:	4603      	mov	r3, r0
 8008632:	e000      	b.n	8008636 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008634:	2302      	movs	r3, #2
  }
}
 8008636:	4618      	mov	r0, r3
 8008638:	3728      	adds	r7, #40	; 0x28
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	40008000 	.word	0x40008000

08008644 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b0ba      	sub	sp, #232	; 0xe8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	69db      	ldr	r3, [r3, #28]
 8008652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800866a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800866e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008672:	4013      	ands	r3, r2
 8008674:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008678:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800867c:	2b00      	cmp	r3, #0
 800867e:	d115      	bne.n	80086ac <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008684:	f003 0320 	and.w	r3, r3, #32
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00f      	beq.n	80086ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800868c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008690:	f003 0320 	and.w	r3, r3, #32
 8008694:	2b00      	cmp	r3, #0
 8008696:	d009      	beq.n	80086ac <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 82a6 	beq.w	8008bee <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	4798      	blx	r3
      }
      return;
 80086aa:	e2a0      	b.n	8008bee <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80086ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f000 8117 	beq.w	80088e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80086b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d106      	bne.n	80086d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80086c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80086c6:	4b85      	ldr	r3, [pc, #532]	; (80088dc <HAL_UART_IRQHandler+0x298>)
 80086c8:	4013      	ands	r3, r2
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f000 810a 	beq.w	80088e4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086d4:	f003 0301 	and.w	r3, r3, #1
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d011      	beq.n	8008700 <HAL_UART_IRQHandler+0xbc>
 80086dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00b      	beq.n	8008700 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2201      	movs	r2, #1
 80086ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086f6:	f043 0201 	orr.w	r2, r3, #1
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008704:	f003 0302 	and.w	r3, r3, #2
 8008708:	2b00      	cmp	r3, #0
 800870a:	d011      	beq.n	8008730 <HAL_UART_IRQHandler+0xec>
 800870c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00b      	beq.n	8008730 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2202      	movs	r2, #2
 800871e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008726:	f043 0204 	orr.w	r2, r3, #4
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008734:	f003 0304 	and.w	r3, r3, #4
 8008738:	2b00      	cmp	r3, #0
 800873a:	d011      	beq.n	8008760 <HAL_UART_IRQHandler+0x11c>
 800873c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008740:	f003 0301 	and.w	r3, r3, #1
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00b      	beq.n	8008760 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2204      	movs	r2, #4
 800874e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008756:	f043 0202 	orr.w	r2, r3, #2
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008764:	f003 0308 	and.w	r3, r3, #8
 8008768:	2b00      	cmp	r3, #0
 800876a:	d017      	beq.n	800879c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800876c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008770:	f003 0320 	and.w	r3, r3, #32
 8008774:	2b00      	cmp	r3, #0
 8008776:	d105      	bne.n	8008784 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800877c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00b      	beq.n	800879c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2208      	movs	r2, #8
 800878a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008792:	f043 0208 	orr.w	r2, r3, #8
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800879c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d012      	beq.n	80087ce <HAL_UART_IRQHandler+0x18a>
 80087a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00c      	beq.n	80087ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087c4:	f043 0220 	orr.w	r2, r3, #32
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f000 820c 	beq.w	8008bf2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80087da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087de:	f003 0320 	and.w	r3, r3, #32
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00d      	beq.n	8008802 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80087e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087ea:	f003 0320 	and.w	r3, r3, #32
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d007      	beq.n	8008802 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d003      	beq.n	8008802 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008808:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008816:	2b40      	cmp	r3, #64	; 0x40
 8008818:	d005      	beq.n	8008826 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800881a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800881e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008822:	2b00      	cmp	r3, #0
 8008824:	d04f      	beq.n	80088c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 feaa 	bl	8009580 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008836:	2b40      	cmp	r3, #64	; 0x40
 8008838:	d141      	bne.n	80088be <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3308      	adds	r3, #8
 8008840:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008844:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008848:	e853 3f00 	ldrex	r3, [r3]
 800884c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008850:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	3308      	adds	r3, #8
 8008862:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008866:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800886a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008872:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008876:	e841 2300 	strex	r3, r2, [r1]
 800887a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800887e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1d9      	bne.n	800883a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800888a:	2b00      	cmp	r3, #0
 800888c:	d013      	beq.n	80088b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008892:	4a13      	ldr	r2, [pc, #76]	; (80088e0 <HAL_UART_IRQHandler+0x29c>)
 8008894:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800889a:	4618      	mov	r0, r3
 800889c:	f7fc fc22 	bl	80050e4 <HAL_DMA_Abort_IT>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d017      	beq.n	80088d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80088b0:	4610      	mov	r0, r2
 80088b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088b4:	e00f      	b.n	80088d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f9a6 	bl	8008c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088bc:	e00b      	b.n	80088d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f9a2 	bl	8008c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088c4:	e007      	b.n	80088d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f99e 	bl	8008c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80088d4:	e18d      	b.n	8008bf2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088d6:	bf00      	nop
    return;
 80088d8:	e18b      	b.n	8008bf2 <HAL_UART_IRQHandler+0x5ae>
 80088da:	bf00      	nop
 80088dc:	04000120 	.word	0x04000120
 80088e0:	08009647 	.word	0x08009647

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	f040 8146 	bne.w	8008b7a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80088ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088f2:	f003 0310 	and.w	r3, r3, #16
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f000 813f 	beq.w	8008b7a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80088fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008900:	f003 0310 	and.w	r3, r3, #16
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 8138 	beq.w	8008b7a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2210      	movs	r2, #16
 8008910:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891c:	2b40      	cmp	r3, #64	; 0x40
 800891e:	f040 80b4 	bne.w	8008a8a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800892e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008932:	2b00      	cmp	r3, #0
 8008934:	f000 815f 	beq.w	8008bf6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800893e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008942:	429a      	cmp	r2, r3
 8008944:	f080 8157 	bcs.w	8008bf6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800894e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 0320 	and.w	r3, r3, #32
 800895e:	2b00      	cmp	r3, #0
 8008960:	f040 8085 	bne.w	8008a6e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008970:	e853 3f00 	ldrex	r3, [r3]
 8008974:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008978:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800897c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008980:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	461a      	mov	r2, r3
 800898a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800898e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008992:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008996:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800899a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800899e:	e841 2300 	strex	r3, r2, [r1]
 80089a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80089a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1da      	bne.n	8008964 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	3308      	adds	r3, #8
 80089b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089b8:	e853 3f00 	ldrex	r3, [r3]
 80089bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80089be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089c0:	f023 0301 	bic.w	r3, r3, #1
 80089c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	3308      	adds	r3, #8
 80089ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80089d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80089d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80089da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80089de:	e841 2300 	strex	r3, r2, [r1]
 80089e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80089e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1e1      	bne.n	80089ae <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	3308      	adds	r3, #8
 80089f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089f4:	e853 3f00 	ldrex	r3, [r3]
 80089f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80089fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	3308      	adds	r3, #8
 8008a0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008a0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008a10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a16:	e841 2300 	strex	r3, r2, [r1]
 8008a1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008a1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1e3      	bne.n	80089ea <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2220      	movs	r2, #32
 8008a26:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a36:	e853 3f00 	ldrex	r3, [r3]
 8008a3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a3e:	f023 0310 	bic.w	r3, r3, #16
 8008a42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a50:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a52:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a58:	e841 2300 	strex	r3, r2, [r1]
 8008a5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1e4      	bne.n	8008a2e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fc fafd 	bl	8005068 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	4619      	mov	r1, r3
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f8ca 	bl	8008c1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a88:	e0b5      	b.n	8008bf6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f000 80a7 	beq.w	8008bfa <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8008aac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f000 80a2 	beq.w	8008bfa <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abe:	e853 3f00 	ldrex	r3, [r3]
 8008ac2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008aca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8008ada:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008adc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ade:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ae0:	e841 2300 	strex	r3, r2, [r1]
 8008ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1e4      	bne.n	8008ab6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	3308      	adds	r3, #8
 8008af2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	e853 3f00 	ldrex	r3, [r3]
 8008afa:	623b      	str	r3, [r7, #32]
   return(result);
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	f023 0301 	bic.w	r3, r3, #1
 8008b02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3308      	adds	r3, #8
 8008b0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008b10:	633a      	str	r2, [r7, #48]	; 0x30
 8008b12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b18:	e841 2300 	strex	r3, r2, [r1]
 8008b1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1e3      	bne.n	8008aec <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2220      	movs	r2, #32
 8008b28:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	e853 3f00 	ldrex	r3, [r3]
 8008b42:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f023 0310 	bic.w	r3, r3, #16
 8008b4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	461a      	mov	r2, r3
 8008b54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008b58:	61fb      	str	r3, [r7, #28]
 8008b5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5c:	69b9      	ldr	r1, [r7, #24]
 8008b5e:	69fa      	ldr	r2, [r7, #28]
 8008b60:	e841 2300 	strex	r3, r2, [r1]
 8008b64:	617b      	str	r3, [r7, #20]
   return(result);
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1e4      	bne.n	8008b36 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b70:	4619      	mov	r1, r3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f852 	bl	8008c1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b78:	e03f      	b.n	8008bfa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00e      	beq.n	8008ba4 <HAL_UART_IRQHandler+0x560>
 8008b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d008      	beq.n	8008ba4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008b9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 ffae 	bl	8009afe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ba2:	e02d      	b.n	8008c00 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00e      	beq.n	8008bce <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d008      	beq.n	8008bce <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d01c      	beq.n	8008bfe <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	4798      	blx	r3
    }
    return;
 8008bcc:	e017      	b.n	8008bfe <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d012      	beq.n	8008c00 <HAL_UART_IRQHandler+0x5bc>
 8008bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00c      	beq.n	8008c00 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 fdff 	bl	80097ea <UART_EndTransmit_IT>
    return;
 8008bec:	e008      	b.n	8008c00 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008bee:	bf00      	nop
 8008bf0:	e006      	b.n	8008c00 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008bf2:	bf00      	nop
 8008bf4:	e004      	b.n	8008c00 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008bf6:	bf00      	nop
 8008bf8:	e002      	b.n	8008c00 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008bfa:	bf00      	nop
 8008bfc:	e000      	b.n	8008c00 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008bfe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008c00:	37e8      	adds	r7, #232	; 0xe8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop

08008c08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	460b      	mov	r3, r1
 8008c26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c38:	b08a      	sub	sp, #40	; 0x28
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	689a      	ldr	r2, [r3, #8]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	431a      	orrs	r2, r3
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	695b      	ldr	r3, [r3, #20]
 8008c52:	431a      	orrs	r2, r3
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	69db      	ldr	r3, [r3, #28]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	4bb4      	ldr	r3, [pc, #720]	; (8008f34 <UART_SetConfig+0x300>)
 8008c64:	4013      	ands	r3, r2
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	6812      	ldr	r2, [r2, #0]
 8008c6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c6c:	430b      	orrs	r3, r1
 8008c6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	68da      	ldr	r2, [r3, #12]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	430a      	orrs	r2, r1
 8008c84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4aa9      	ldr	r2, [pc, #676]	; (8008f38 <UART_SetConfig+0x304>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d004      	beq.n	8008ca0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6a1b      	ldr	r3, [r3, #32]
 8008c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cb0:	430a      	orrs	r2, r1
 8008cb2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4aa0      	ldr	r2, [pc, #640]	; (8008f3c <UART_SetConfig+0x308>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d126      	bne.n	8008d0c <UART_SetConfig+0xd8>
 8008cbe:	4ba0      	ldr	r3, [pc, #640]	; (8008f40 <UART_SetConfig+0x30c>)
 8008cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cc4:	f003 0303 	and.w	r3, r3, #3
 8008cc8:	2b03      	cmp	r3, #3
 8008cca:	d81b      	bhi.n	8008d04 <UART_SetConfig+0xd0>
 8008ccc:	a201      	add	r2, pc, #4	; (adr r2, 8008cd4 <UART_SetConfig+0xa0>)
 8008cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd2:	bf00      	nop
 8008cd4:	08008ce5 	.word	0x08008ce5
 8008cd8:	08008cf5 	.word	0x08008cf5
 8008cdc:	08008ced 	.word	0x08008ced
 8008ce0:	08008cfd 	.word	0x08008cfd
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cea:	e080      	b.n	8008dee <UART_SetConfig+0x1ba>
 8008cec:	2302      	movs	r3, #2
 8008cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cf2:	e07c      	b.n	8008dee <UART_SetConfig+0x1ba>
 8008cf4:	2304      	movs	r3, #4
 8008cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cfa:	e078      	b.n	8008dee <UART_SetConfig+0x1ba>
 8008cfc:	2308      	movs	r3, #8
 8008cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d02:	e074      	b.n	8008dee <UART_SetConfig+0x1ba>
 8008d04:	2310      	movs	r3, #16
 8008d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d0a:	e070      	b.n	8008dee <UART_SetConfig+0x1ba>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a8c      	ldr	r2, [pc, #560]	; (8008f44 <UART_SetConfig+0x310>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d138      	bne.n	8008d88 <UART_SetConfig+0x154>
 8008d16:	4b8a      	ldr	r3, [pc, #552]	; (8008f40 <UART_SetConfig+0x30c>)
 8008d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d1c:	f003 030c 	and.w	r3, r3, #12
 8008d20:	2b0c      	cmp	r3, #12
 8008d22:	d82d      	bhi.n	8008d80 <UART_SetConfig+0x14c>
 8008d24:	a201      	add	r2, pc, #4	; (adr r2, 8008d2c <UART_SetConfig+0xf8>)
 8008d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2a:	bf00      	nop
 8008d2c:	08008d61 	.word	0x08008d61
 8008d30:	08008d81 	.word	0x08008d81
 8008d34:	08008d81 	.word	0x08008d81
 8008d38:	08008d81 	.word	0x08008d81
 8008d3c:	08008d71 	.word	0x08008d71
 8008d40:	08008d81 	.word	0x08008d81
 8008d44:	08008d81 	.word	0x08008d81
 8008d48:	08008d81 	.word	0x08008d81
 8008d4c:	08008d69 	.word	0x08008d69
 8008d50:	08008d81 	.word	0x08008d81
 8008d54:	08008d81 	.word	0x08008d81
 8008d58:	08008d81 	.word	0x08008d81
 8008d5c:	08008d79 	.word	0x08008d79
 8008d60:	2300      	movs	r3, #0
 8008d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d66:	e042      	b.n	8008dee <UART_SetConfig+0x1ba>
 8008d68:	2302      	movs	r3, #2
 8008d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d6e:	e03e      	b.n	8008dee <UART_SetConfig+0x1ba>
 8008d70:	2304      	movs	r3, #4
 8008d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d76:	e03a      	b.n	8008dee <UART_SetConfig+0x1ba>
 8008d78:	2308      	movs	r3, #8
 8008d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d7e:	e036      	b.n	8008dee <UART_SetConfig+0x1ba>
 8008d80:	2310      	movs	r3, #16
 8008d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d86:	e032      	b.n	8008dee <UART_SetConfig+0x1ba>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a6a      	ldr	r2, [pc, #424]	; (8008f38 <UART_SetConfig+0x304>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d12a      	bne.n	8008de8 <UART_SetConfig+0x1b4>
 8008d92:	4b6b      	ldr	r3, [pc, #428]	; (8008f40 <UART_SetConfig+0x30c>)
 8008d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008d9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008da0:	d01a      	beq.n	8008dd8 <UART_SetConfig+0x1a4>
 8008da2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008da6:	d81b      	bhi.n	8008de0 <UART_SetConfig+0x1ac>
 8008da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dac:	d00c      	beq.n	8008dc8 <UART_SetConfig+0x194>
 8008dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008db2:	d815      	bhi.n	8008de0 <UART_SetConfig+0x1ac>
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d003      	beq.n	8008dc0 <UART_SetConfig+0x18c>
 8008db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dbc:	d008      	beq.n	8008dd0 <UART_SetConfig+0x19c>
 8008dbe:	e00f      	b.n	8008de0 <UART_SetConfig+0x1ac>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dc6:	e012      	b.n	8008dee <UART_SetConfig+0x1ba>
 8008dc8:	2302      	movs	r3, #2
 8008dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dce:	e00e      	b.n	8008dee <UART_SetConfig+0x1ba>
 8008dd0:	2304      	movs	r3, #4
 8008dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dd6:	e00a      	b.n	8008dee <UART_SetConfig+0x1ba>
 8008dd8:	2308      	movs	r3, #8
 8008dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dde:	e006      	b.n	8008dee <UART_SetConfig+0x1ba>
 8008de0:	2310      	movs	r3, #16
 8008de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008de6:	e002      	b.n	8008dee <UART_SetConfig+0x1ba>
 8008de8:	2310      	movs	r3, #16
 8008dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a51      	ldr	r2, [pc, #324]	; (8008f38 <UART_SetConfig+0x304>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d17a      	bne.n	8008eee <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008df8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008dfc:	2b08      	cmp	r3, #8
 8008dfe:	d824      	bhi.n	8008e4a <UART_SetConfig+0x216>
 8008e00:	a201      	add	r2, pc, #4	; (adr r2, 8008e08 <UART_SetConfig+0x1d4>)
 8008e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e06:	bf00      	nop
 8008e08:	08008e2d 	.word	0x08008e2d
 8008e0c:	08008e4b 	.word	0x08008e4b
 8008e10:	08008e35 	.word	0x08008e35
 8008e14:	08008e4b 	.word	0x08008e4b
 8008e18:	08008e3b 	.word	0x08008e3b
 8008e1c:	08008e4b 	.word	0x08008e4b
 8008e20:	08008e4b 	.word	0x08008e4b
 8008e24:	08008e4b 	.word	0x08008e4b
 8008e28:	08008e43 	.word	0x08008e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e2c:	f7fd fa36 	bl	800629c <HAL_RCC_GetPCLK1Freq>
 8008e30:	61f8      	str	r0, [r7, #28]
        break;
 8008e32:	e010      	b.n	8008e56 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e34:	4b44      	ldr	r3, [pc, #272]	; (8008f48 <UART_SetConfig+0x314>)
 8008e36:	61fb      	str	r3, [r7, #28]
        break;
 8008e38:	e00d      	b.n	8008e56 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e3a:	f7fd f997 	bl	800616c <HAL_RCC_GetSysClockFreq>
 8008e3e:	61f8      	str	r0, [r7, #28]
        break;
 8008e40:	e009      	b.n	8008e56 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e46:	61fb      	str	r3, [r7, #28]
        break;
 8008e48:	e005      	b.n	8008e56 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008e54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f000 8107 	beq.w	800906c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	685a      	ldr	r2, [r3, #4]
 8008e62:	4613      	mov	r3, r2
 8008e64:	005b      	lsls	r3, r3, #1
 8008e66:	4413      	add	r3, r2
 8008e68:	69fa      	ldr	r2, [r7, #28]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d305      	bcc.n	8008e7a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008e74:	69fa      	ldr	r2, [r7, #28]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d903      	bls.n	8008e82 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008e80:	e0f4      	b.n	800906c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	2200      	movs	r2, #0
 8008e86:	461c      	mov	r4, r3
 8008e88:	4615      	mov	r5, r2
 8008e8a:	f04f 0200 	mov.w	r2, #0
 8008e8e:	f04f 0300 	mov.w	r3, #0
 8008e92:	022b      	lsls	r3, r5, #8
 8008e94:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008e98:	0222      	lsls	r2, r4, #8
 8008e9a:	68f9      	ldr	r1, [r7, #12]
 8008e9c:	6849      	ldr	r1, [r1, #4]
 8008e9e:	0849      	lsrs	r1, r1, #1
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	4688      	mov	r8, r1
 8008ea4:	4681      	mov	r9, r0
 8008ea6:	eb12 0a08 	adds.w	sl, r2, r8
 8008eaa:	eb43 0b09 	adc.w	fp, r3, r9
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	603b      	str	r3, [r7, #0]
 8008eb6:	607a      	str	r2, [r7, #4]
 8008eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ebc:	4650      	mov	r0, sl
 8008ebe:	4659      	mov	r1, fp
 8008ec0:	f7f7 fee2 	bl	8000c88 <__aeabi_uldivmod>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	4613      	mov	r3, r2
 8008eca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ed2:	d308      	bcc.n	8008ee6 <UART_SetConfig+0x2b2>
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008eda:	d204      	bcs.n	8008ee6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	69ba      	ldr	r2, [r7, #24]
 8008ee2:	60da      	str	r2, [r3, #12]
 8008ee4:	e0c2      	b.n	800906c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008eec:	e0be      	b.n	800906c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	69db      	ldr	r3, [r3, #28]
 8008ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ef6:	d16a      	bne.n	8008fce <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8008ef8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008efc:	2b08      	cmp	r3, #8
 8008efe:	d834      	bhi.n	8008f6a <UART_SetConfig+0x336>
 8008f00:	a201      	add	r2, pc, #4	; (adr r2, 8008f08 <UART_SetConfig+0x2d4>)
 8008f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f06:	bf00      	nop
 8008f08:	08008f2d 	.word	0x08008f2d
 8008f0c:	08008f4d 	.word	0x08008f4d
 8008f10:	08008f55 	.word	0x08008f55
 8008f14:	08008f6b 	.word	0x08008f6b
 8008f18:	08008f5b 	.word	0x08008f5b
 8008f1c:	08008f6b 	.word	0x08008f6b
 8008f20:	08008f6b 	.word	0x08008f6b
 8008f24:	08008f6b 	.word	0x08008f6b
 8008f28:	08008f63 	.word	0x08008f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f2c:	f7fd f9b6 	bl	800629c <HAL_RCC_GetPCLK1Freq>
 8008f30:	61f8      	str	r0, [r7, #28]
        break;
 8008f32:	e020      	b.n	8008f76 <UART_SetConfig+0x342>
 8008f34:	efff69f3 	.word	0xefff69f3
 8008f38:	40008000 	.word	0x40008000
 8008f3c:	40013800 	.word	0x40013800
 8008f40:	40021000 	.word	0x40021000
 8008f44:	40004400 	.word	0x40004400
 8008f48:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f4c:	f7fd f9bc 	bl	80062c8 <HAL_RCC_GetPCLK2Freq>
 8008f50:	61f8      	str	r0, [r7, #28]
        break;
 8008f52:	e010      	b.n	8008f76 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f54:	4b4c      	ldr	r3, [pc, #304]	; (8009088 <UART_SetConfig+0x454>)
 8008f56:	61fb      	str	r3, [r7, #28]
        break;
 8008f58:	e00d      	b.n	8008f76 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f5a:	f7fd f907 	bl	800616c <HAL_RCC_GetSysClockFreq>
 8008f5e:	61f8      	str	r0, [r7, #28]
        break;
 8008f60:	e009      	b.n	8008f76 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f66:	61fb      	str	r3, [r7, #28]
        break;
 8008f68:	e005      	b.n	8008f76 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008f74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d077      	beq.n	800906c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	005a      	lsls	r2, r3, #1
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	085b      	lsrs	r3, r3, #1
 8008f86:	441a      	add	r2, r3
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f90:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	2b0f      	cmp	r3, #15
 8008f96:	d916      	bls.n	8008fc6 <UART_SetConfig+0x392>
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f9e:	d212      	bcs.n	8008fc6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	f023 030f 	bic.w	r3, r3, #15
 8008fa8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	085b      	lsrs	r3, r3, #1
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	f003 0307 	and.w	r3, r3, #7
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	8afb      	ldrh	r3, [r7, #22]
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	8afa      	ldrh	r2, [r7, #22]
 8008fc2:	60da      	str	r2, [r3, #12]
 8008fc4:	e052      	b.n	800906c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008fcc:	e04e      	b.n	800906c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008fce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fd2:	2b08      	cmp	r3, #8
 8008fd4:	d827      	bhi.n	8009026 <UART_SetConfig+0x3f2>
 8008fd6:	a201      	add	r2, pc, #4	; (adr r2, 8008fdc <UART_SetConfig+0x3a8>)
 8008fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fdc:	08009001 	.word	0x08009001
 8008fe0:	08009009 	.word	0x08009009
 8008fe4:	08009011 	.word	0x08009011
 8008fe8:	08009027 	.word	0x08009027
 8008fec:	08009017 	.word	0x08009017
 8008ff0:	08009027 	.word	0x08009027
 8008ff4:	08009027 	.word	0x08009027
 8008ff8:	08009027 	.word	0x08009027
 8008ffc:	0800901f 	.word	0x0800901f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009000:	f7fd f94c 	bl	800629c <HAL_RCC_GetPCLK1Freq>
 8009004:	61f8      	str	r0, [r7, #28]
        break;
 8009006:	e014      	b.n	8009032 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009008:	f7fd f95e 	bl	80062c8 <HAL_RCC_GetPCLK2Freq>
 800900c:	61f8      	str	r0, [r7, #28]
        break;
 800900e:	e010      	b.n	8009032 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009010:	4b1d      	ldr	r3, [pc, #116]	; (8009088 <UART_SetConfig+0x454>)
 8009012:	61fb      	str	r3, [r7, #28]
        break;
 8009014:	e00d      	b.n	8009032 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009016:	f7fd f8a9 	bl	800616c <HAL_RCC_GetSysClockFreq>
 800901a:	61f8      	str	r0, [r7, #28]
        break;
 800901c:	e009      	b.n	8009032 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800901e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009022:	61fb      	str	r3, [r7, #28]
        break;
 8009024:	e005      	b.n	8009032 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8009026:	2300      	movs	r3, #0
 8009028:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009030:	bf00      	nop
    }

    if (pclk != 0U)
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d019      	beq.n	800906c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	085a      	lsrs	r2, r3, #1
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	441a      	add	r2, r3
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	fbb2 f3f3 	udiv	r3, r2, r3
 800904a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	2b0f      	cmp	r3, #15
 8009050:	d909      	bls.n	8009066 <UART_SetConfig+0x432>
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009058:	d205      	bcs.n	8009066 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	b29a      	uxth	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	60da      	str	r2, [r3, #12]
 8009064:	e002      	b.n	800906c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009078:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800907c:	4618      	mov	r0, r3
 800907e:	3728      	adds	r7, #40	; 0x28
 8009080:	46bd      	mov	sp, r7
 8009082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009086:	bf00      	nop
 8009088:	00f42400 	.word	0x00f42400

0800908c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009098:	f003 0301 	and.w	r3, r3, #1
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00a      	beq.n	80090b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	430a      	orrs	r2, r1
 80090b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ba:	f003 0302 	and.w	r3, r3, #2
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00a      	beq.n	80090d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	430a      	orrs	r2, r1
 80090d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090dc:	f003 0304 	and.w	r3, r3, #4
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00a      	beq.n	80090fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	430a      	orrs	r2, r1
 80090f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fe:	f003 0308 	and.w	r3, r3, #8
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00a      	beq.n	800911c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	430a      	orrs	r2, r1
 800911a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009120:	f003 0310 	and.w	r3, r3, #16
 8009124:	2b00      	cmp	r3, #0
 8009126:	d00a      	beq.n	800913e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	430a      	orrs	r2, r1
 800913c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009142:	f003 0320 	and.w	r3, r3, #32
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00a      	beq.n	8009160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	430a      	orrs	r2, r1
 800915e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009168:	2b00      	cmp	r3, #0
 800916a:	d01a      	beq.n	80091a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	430a      	orrs	r2, r1
 8009180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800918a:	d10a      	bne.n	80091a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	430a      	orrs	r2, r1
 80091a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00a      	beq.n	80091c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	430a      	orrs	r2, r1
 80091c2:	605a      	str	r2, [r3, #4]
  }
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af02      	add	r7, sp, #8
 80091d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80091e0:	f7fa fa44 	bl	800366c <HAL_GetTick>
 80091e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 0308 	and.w	r3, r3, #8
 80091f0:	2b08      	cmp	r3, #8
 80091f2:	d10e      	bne.n	8009212 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f82d 	bl	8009262 <UART_WaitOnFlagUntilTimeout>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800920e:	2303      	movs	r3, #3
 8009210:	e023      	b.n	800925a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0304 	and.w	r3, r3, #4
 800921c:	2b04      	cmp	r3, #4
 800921e:	d10e      	bne.n	800923e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009220:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2200      	movs	r2, #0
 800922a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f817 	bl	8009262 <UART_WaitOnFlagUntilTimeout>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800923a:	2303      	movs	r3, #3
 800923c:	e00d      	b.n	800925a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2220      	movs	r2, #32
 8009242:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2220      	movs	r2, #32
 8009248:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b09c      	sub	sp, #112	; 0x70
 8009266:	af00      	add	r7, sp, #0
 8009268:	60f8      	str	r0, [r7, #12]
 800926a:	60b9      	str	r1, [r7, #8]
 800926c:	603b      	str	r3, [r7, #0]
 800926e:	4613      	mov	r3, r2
 8009270:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009272:	e0a5      	b.n	80093c0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800927a:	f000 80a1 	beq.w	80093c0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800927e:	f7fa f9f5 	bl	800366c <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800928a:	429a      	cmp	r2, r3
 800928c:	d302      	bcc.n	8009294 <UART_WaitOnFlagUntilTimeout+0x32>
 800928e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009290:	2b00      	cmp	r3, #0
 8009292:	d13e      	bne.n	8009312 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800929c:	e853 3f00 	ldrex	r3, [r3]
 80092a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80092a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80092a8:	667b      	str	r3, [r7, #100]	; 0x64
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092b4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80092b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80092ba:	e841 2300 	strex	r3, r2, [r1]
 80092be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80092c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1e6      	bne.n	8009294 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3308      	adds	r3, #8
 80092cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092d0:	e853 3f00 	ldrex	r3, [r3]
 80092d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d8:	f023 0301 	bic.w	r3, r3, #1
 80092dc:	663b      	str	r3, [r7, #96]	; 0x60
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	3308      	adds	r3, #8
 80092e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80092e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80092e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80092ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092ee:	e841 2300 	strex	r3, r2, [r1]
 80092f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80092f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1e5      	bne.n	80092c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2220      	movs	r2, #32
 80092fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2220      	movs	r2, #32
 8009304:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2200      	movs	r2, #0
 800930a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800930e:	2303      	movs	r3, #3
 8009310:	e067      	b.n	80093e2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 0304 	and.w	r3, r3, #4
 800931c:	2b00      	cmp	r3, #0
 800931e:	d04f      	beq.n	80093c0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	69db      	ldr	r3, [r3, #28]
 8009326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800932a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800932e:	d147      	bne.n	80093c0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009338:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009342:	e853 3f00 	ldrex	r3, [r3]
 8009346:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800934e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	461a      	mov	r2, r3
 8009356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009358:	637b      	str	r3, [r7, #52]	; 0x34
 800935a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800935e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009360:	e841 2300 	strex	r3, r2, [r1]
 8009364:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1e6      	bne.n	800933a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	3308      	adds	r3, #8
 8009372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	e853 3f00 	ldrex	r3, [r3]
 800937a:	613b      	str	r3, [r7, #16]
   return(result);
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	f023 0301 	bic.w	r3, r3, #1
 8009382:	66bb      	str	r3, [r7, #104]	; 0x68
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	3308      	adds	r3, #8
 800938a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800938c:	623a      	str	r2, [r7, #32]
 800938e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009390:	69f9      	ldr	r1, [r7, #28]
 8009392:	6a3a      	ldr	r2, [r7, #32]
 8009394:	e841 2300 	strex	r3, r2, [r1]
 8009398:	61bb      	str	r3, [r7, #24]
   return(result);
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1e5      	bne.n	800936c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2220      	movs	r2, #32
 80093a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2220      	movs	r2, #32
 80093aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2220      	movs	r2, #32
 80093b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80093bc:	2303      	movs	r3, #3
 80093be:	e010      	b.n	80093e2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	69da      	ldr	r2, [r3, #28]
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	4013      	ands	r3, r2
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	bf0c      	ite	eq
 80093d0:	2301      	moveq	r3, #1
 80093d2:	2300      	movne	r3, #0
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	461a      	mov	r2, r3
 80093d8:	79fb      	ldrb	r3, [r7, #7]
 80093da:	429a      	cmp	r2, r3
 80093dc:	f43f af4a 	beq.w	8009274 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3770      	adds	r7, #112	; 0x70
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
	...

080093ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b097      	sub	sp, #92	; 0x5c
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	4613      	mov	r3, r2
 80093f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	88fa      	ldrh	r2, [r7, #6]
 8009404:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	88fa      	ldrh	r2, [r7, #6]
 800940c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800941e:	d10e      	bne.n	800943e <UART_Start_Receive_IT+0x52>
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d105      	bne.n	8009434 <UART_Start_Receive_IT+0x48>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800942e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009432:	e02d      	b.n	8009490 <UART_Start_Receive_IT+0xa4>
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	22ff      	movs	r2, #255	; 0xff
 8009438:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800943c:	e028      	b.n	8009490 <UART_Start_Receive_IT+0xa4>
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10d      	bne.n	8009462 <UART_Start_Receive_IT+0x76>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d104      	bne.n	8009458 <UART_Start_Receive_IT+0x6c>
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	22ff      	movs	r2, #255	; 0xff
 8009452:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009456:	e01b      	b.n	8009490 <UART_Start_Receive_IT+0xa4>
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	227f      	movs	r2, #127	; 0x7f
 800945c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009460:	e016      	b.n	8009490 <UART_Start_Receive_IT+0xa4>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800946a:	d10d      	bne.n	8009488 <UART_Start_Receive_IT+0x9c>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d104      	bne.n	800947e <UART_Start_Receive_IT+0x92>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	227f      	movs	r2, #127	; 0x7f
 8009478:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800947c:	e008      	b.n	8009490 <UART_Start_Receive_IT+0xa4>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	223f      	movs	r2, #63	; 0x3f
 8009482:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009486:	e003      	b.n	8009490 <UART_Start_Receive_IT+0xa4>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2222      	movs	r2, #34	; 0x22
 800949c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3308      	adds	r3, #8
 80094a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094a8:	e853 3f00 	ldrex	r3, [r3]
 80094ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b0:	f043 0301 	orr.w	r3, r3, #1
 80094b4:	657b      	str	r3, [r7, #84]	; 0x54
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3308      	adds	r3, #8
 80094bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80094be:	64ba      	str	r2, [r7, #72]	; 0x48
 80094c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80094c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094c6:	e841 2300 	strex	r3, r2, [r1]
 80094ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80094cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1e5      	bne.n	800949e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094da:	d107      	bne.n	80094ec <UART_Start_Receive_IT+0x100>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d103      	bne.n	80094ec <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	4a24      	ldr	r2, [pc, #144]	; (8009578 <UART_Start_Receive_IT+0x18c>)
 80094e8:	665a      	str	r2, [r3, #100]	; 0x64
 80094ea:	e002      	b.n	80094f2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	4a23      	ldr	r2, [pc, #140]	; (800957c <UART_Start_Receive_IT+0x190>)
 80094f0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d019      	beq.n	8009536 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950a:	e853 3f00 	ldrex	r3, [r3]
 800950e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009512:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	461a      	mov	r2, r3
 800951e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009520:	637b      	str	r3, [r7, #52]	; 0x34
 8009522:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009524:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009528:	e841 2300 	strex	r3, r2, [r1]
 800952c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800952e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1e6      	bne.n	8009502 <UART_Start_Receive_IT+0x116>
 8009534:	e018      	b.n	8009568 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	e853 3f00 	ldrex	r3, [r3]
 8009542:	613b      	str	r3, [r7, #16]
   return(result);
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	f043 0320 	orr.w	r3, r3, #32
 800954a:	653b      	str	r3, [r7, #80]	; 0x50
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	461a      	mov	r2, r3
 8009552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009554:	623b      	str	r3, [r7, #32]
 8009556:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009558:	69f9      	ldr	r1, [r7, #28]
 800955a:	6a3a      	ldr	r2, [r7, #32]
 800955c:	e841 2300 	strex	r3, r2, [r1]
 8009560:	61bb      	str	r3, [r7, #24]
   return(result);
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1e6      	bne.n	8009536 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	375c      	adds	r7, #92	; 0x5c
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	0800999f 	.word	0x0800999f
 800957c:	0800983f 	.word	0x0800983f

08009580 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009580:	b480      	push	{r7}
 8009582:	b095      	sub	sp, #84	; 0x54
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009590:	e853 3f00 	ldrex	r3, [r3]
 8009594:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009598:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800959c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	461a      	mov	r2, r3
 80095a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095a6:	643b      	str	r3, [r7, #64]	; 0x40
 80095a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095ae:	e841 2300 	strex	r3, r2, [r1]
 80095b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1e6      	bne.n	8009588 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	3308      	adds	r3, #8
 80095c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c2:	6a3b      	ldr	r3, [r7, #32]
 80095c4:	e853 3f00 	ldrex	r3, [r3]
 80095c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	f023 0301 	bic.w	r3, r3, #1
 80095d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3308      	adds	r3, #8
 80095d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095e2:	e841 2300 	strex	r3, r2, [r1]
 80095e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1e5      	bne.n	80095ba <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d118      	bne.n	8009628 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	e853 3f00 	ldrex	r3, [r3]
 8009602:	60bb      	str	r3, [r7, #8]
   return(result);
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	f023 0310 	bic.w	r3, r3, #16
 800960a:	647b      	str	r3, [r7, #68]	; 0x44
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	461a      	mov	r2, r3
 8009612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009614:	61bb      	str	r3, [r7, #24]
 8009616:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009618:	6979      	ldr	r1, [r7, #20]
 800961a:	69ba      	ldr	r2, [r7, #24]
 800961c:	e841 2300 	strex	r3, r2, [r1]
 8009620:	613b      	str	r3, [r7, #16]
   return(result);
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1e6      	bne.n	80095f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2220      	movs	r2, #32
 800962c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	665a      	str	r2, [r3, #100]	; 0x64
}
 800963a:	bf00      	nop
 800963c:	3754      	adds	r7, #84	; 0x54
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009652:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f7ff facf 	bl	8008c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800966a:	bf00      	nop
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009672:	b480      	push	{r7}
 8009674:	b08f      	sub	sp, #60	; 0x3c
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800967e:	2b21      	cmp	r3, #33	; 0x21
 8009680:	d14d      	bne.n	800971e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009688:	b29b      	uxth	r3, r3
 800968a:	2b00      	cmp	r3, #0
 800968c:	d132      	bne.n	80096f4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	e853 3f00 	ldrex	r3, [r3]
 800969a:	61fb      	str	r3, [r7, #28]
   return(result);
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096a2:	637b      	str	r3, [r7, #52]	; 0x34
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	461a      	mov	r2, r3
 80096aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096ae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096b4:	e841 2300 	strex	r3, r2, [r1]
 80096b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1e6      	bne.n	800968e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	e853 3f00 	ldrex	r3, [r3]
 80096cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096d4:	633b      	str	r3, [r7, #48]	; 0x30
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	461a      	mov	r2, r3
 80096dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096de:	61bb      	str	r3, [r7, #24]
 80096e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e2:	6979      	ldr	r1, [r7, #20]
 80096e4:	69ba      	ldr	r2, [r7, #24]
 80096e6:	e841 2300 	strex	r3, r2, [r1]
 80096ea:	613b      	str	r3, [r7, #16]
   return(result);
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1e6      	bne.n	80096c0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80096f2:	e014      	b.n	800971e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096f8:	781a      	ldrb	r2, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	b292      	uxth	r2, r2
 8009700:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009706:	1c5a      	adds	r2, r3, #1
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009712:	b29b      	uxth	r3, r3
 8009714:	3b01      	subs	r3, #1
 8009716:	b29a      	uxth	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800971e:	bf00      	nop
 8009720:	373c      	adds	r7, #60	; 0x3c
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800972a:	b480      	push	{r7}
 800972c:	b091      	sub	sp, #68	; 0x44
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009736:	2b21      	cmp	r3, #33	; 0x21
 8009738:	d151      	bne.n	80097de <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009740:	b29b      	uxth	r3, r3
 8009742:	2b00      	cmp	r3, #0
 8009744:	d132      	bne.n	80097ac <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974e:	e853 3f00 	ldrex	r3, [r3]
 8009752:	623b      	str	r3, [r7, #32]
   return(result);
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800975a:	63bb      	str	r3, [r7, #56]	; 0x38
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	461a      	mov	r2, r3
 8009762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009764:	633b      	str	r3, [r7, #48]	; 0x30
 8009766:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009768:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800976a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800976c:	e841 2300 	strex	r3, r2, [r1]
 8009770:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1e6      	bne.n	8009746 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	e853 3f00 	ldrex	r3, [r3]
 8009784:	60fb      	str	r3, [r7, #12]
   return(result);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800978c:	637b      	str	r3, [r7, #52]	; 0x34
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	461a      	mov	r2, r3
 8009794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009796:	61fb      	str	r3, [r7, #28]
 8009798:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979a:	69b9      	ldr	r1, [r7, #24]
 800979c:	69fa      	ldr	r2, [r7, #28]
 800979e:	e841 2300 	strex	r3, r2, [r1]
 80097a2:	617b      	str	r3, [r7, #20]
   return(result);
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1e6      	bne.n	8009778 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80097aa:	e018      	b.n	80097de <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097b0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80097b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097b4:	881a      	ldrh	r2, [r3, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097be:	b292      	uxth	r2, r2
 80097c0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097c6:	1c9a      	adds	r2, r3, #2
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	3b01      	subs	r3, #1
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80097de:	bf00      	nop
 80097e0:	3744      	adds	r7, #68	; 0x44
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b088      	sub	sp, #32
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	e853 3f00 	ldrex	r3, [r3]
 80097fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009806:	61fb      	str	r3, [r7, #28]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	461a      	mov	r2, r3
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	61bb      	str	r3, [r7, #24]
 8009812:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009814:	6979      	ldr	r1, [r7, #20]
 8009816:	69ba      	ldr	r2, [r7, #24]
 8009818:	e841 2300 	strex	r3, r2, [r1]
 800981c:	613b      	str	r3, [r7, #16]
   return(result);
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1e6      	bne.n	80097f2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2220      	movs	r2, #32
 8009828:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f7f7 fbf9 	bl	8001028 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009836:	bf00      	nop
 8009838:	3720      	adds	r7, #32
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b096      	sub	sp, #88	; 0x58
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800984c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009854:	2b22      	cmp	r3, #34	; 0x22
 8009856:	f040 8094 	bne.w	8009982 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009860:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009864:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009868:	b2d9      	uxtb	r1, r3
 800986a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800986e:	b2da      	uxtb	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009874:	400a      	ands	r2, r1
 8009876:	b2d2      	uxtb	r2, r2
 8009878:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800987e:	1c5a      	adds	r2, r3, #1
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800988a:	b29b      	uxth	r3, r3
 800988c:	3b01      	subs	r3, #1
 800988e:	b29a      	uxth	r2, r3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800989c:	b29b      	uxth	r3, r3
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d179      	bne.n	8009996 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098aa:	e853 3f00 	ldrex	r3, [r3]
 80098ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098b6:	653b      	str	r3, [r7, #80]	; 0x50
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	461a      	mov	r2, r3
 80098be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098c0:	647b      	str	r3, [r7, #68]	; 0x44
 80098c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098c8:	e841 2300 	strex	r3, r2, [r1]
 80098cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1e6      	bne.n	80098a2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3308      	adds	r3, #8
 80098da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098de:	e853 3f00 	ldrex	r3, [r3]
 80098e2:	623b      	str	r3, [r7, #32]
   return(result);
 80098e4:	6a3b      	ldr	r3, [r7, #32]
 80098e6:	f023 0301 	bic.w	r3, r3, #1
 80098ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	3308      	adds	r3, #8
 80098f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80098f4:	633a      	str	r2, [r7, #48]	; 0x30
 80098f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098fc:	e841 2300 	strex	r3, r2, [r1]
 8009900:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1e5      	bne.n	80098d4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2220      	movs	r2, #32
 800990c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009918:	2b01      	cmp	r3, #1
 800991a:	d12e      	bne.n	800997a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	e853 3f00 	ldrex	r3, [r3]
 800992e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f023 0310 	bic.w	r3, r3, #16
 8009936:	64bb      	str	r3, [r7, #72]	; 0x48
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	461a      	mov	r2, r3
 800993e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009940:	61fb      	str	r3, [r7, #28]
 8009942:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009944:	69b9      	ldr	r1, [r7, #24]
 8009946:	69fa      	ldr	r2, [r7, #28]
 8009948:	e841 2300 	strex	r3, r2, [r1]
 800994c:	617b      	str	r3, [r7, #20]
   return(result);
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1e6      	bne.n	8009922 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	69db      	ldr	r3, [r3, #28]
 800995a:	f003 0310 	and.w	r3, r3, #16
 800995e:	2b10      	cmp	r3, #16
 8009960:	d103      	bne.n	800996a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2210      	movs	r2, #16
 8009968:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009970:	4619      	mov	r1, r3
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f7ff f952 	bl	8008c1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009978:	e00d      	b.n	8009996 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7f7 fb5e 	bl	800103c <HAL_UART_RxCpltCallback>
}
 8009980:	e009      	b.n	8009996 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	8b1b      	ldrh	r3, [r3, #24]
 8009988:	b29a      	uxth	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f042 0208 	orr.w	r2, r2, #8
 8009992:	b292      	uxth	r2, r2
 8009994:	831a      	strh	r2, [r3, #24]
}
 8009996:	bf00      	nop
 8009998:	3758      	adds	r7, #88	; 0x58
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b096      	sub	sp, #88	; 0x58
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80099ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099b4:	2b22      	cmp	r3, #34	; 0x22
 80099b6:	f040 8094 	bne.w	8009ae2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80099c0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099c8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80099ca:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80099ce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80099d2:	4013      	ands	r3, r2
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099de:	1c9a      	adds	r2, r3, #2
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	3b01      	subs	r3, #1
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d179      	bne.n	8009af6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a0a:	e853 3f00 	ldrex	r3, [r3]
 8009a0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a20:	643b      	str	r3, [r7, #64]	; 0x40
 8009a22:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a28:	e841 2300 	strex	r3, r2, [r1]
 8009a2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d1e6      	bne.n	8009a02 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	3308      	adds	r3, #8
 8009a3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3c:	6a3b      	ldr	r3, [r7, #32]
 8009a3e:	e853 3f00 	ldrex	r3, [r3]
 8009a42:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	f023 0301 	bic.w	r3, r3, #1
 8009a4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	3308      	adds	r3, #8
 8009a52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a5c:	e841 2300 	strex	r3, r2, [r1]
 8009a60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d1e5      	bne.n	8009a34 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2220      	movs	r2, #32
 8009a6c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d12e      	bne.n	8009ada <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	e853 3f00 	ldrex	r3, [r3]
 8009a8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	f023 0310 	bic.w	r3, r3, #16
 8009a96:	647b      	str	r3, [r7, #68]	; 0x44
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aa0:	61bb      	str	r3, [r7, #24]
 8009aa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa4:	6979      	ldr	r1, [r7, #20]
 8009aa6:	69ba      	ldr	r2, [r7, #24]
 8009aa8:	e841 2300 	strex	r3, r2, [r1]
 8009aac:	613b      	str	r3, [r7, #16]
   return(result);
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d1e6      	bne.n	8009a82 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	69db      	ldr	r3, [r3, #28]
 8009aba:	f003 0310 	and.w	r3, r3, #16
 8009abe:	2b10      	cmp	r3, #16
 8009ac0:	d103      	bne.n	8009aca <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2210      	movs	r2, #16
 8009ac8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f7ff f8a2 	bl	8008c1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ad8:	e00d      	b.n	8009af6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7f7 faae 	bl	800103c <HAL_UART_RxCpltCallback>
}
 8009ae0:	e009      	b.n	8009af6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	8b1b      	ldrh	r3, [r3, #24]
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f042 0208 	orr.w	r2, r2, #8
 8009af2:	b292      	uxth	r2, r2
 8009af4:	831a      	strh	r2, [r3, #24]
}
 8009af6:	bf00      	nop
 8009af8:	3758      	adds	r7, #88	; 0x58
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009afe:	b480      	push	{r7}
 8009b00:	b083      	sub	sp, #12
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b06:	bf00      	nop
 8009b08:	370c      	adds	r7, #12
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
	...

08009b14 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009b18:	4904      	ldr	r1, [pc, #16]	; (8009b2c <MX_FATFS_Init+0x18>)
 8009b1a:	4805      	ldr	r0, [pc, #20]	; (8009b30 <MX_FATFS_Init+0x1c>)
 8009b1c:	f000 fd8c 	bl	800a638 <FATFS_LinkDriver>
 8009b20:	4603      	mov	r3, r0
 8009b22:	461a      	mov	r2, r3
 8009b24:	4b03      	ldr	r3, [pc, #12]	; (8009b34 <MX_FATFS_Init+0x20>)
 8009b26:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009b28:	bf00      	nop
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	20002a00 	.word	0x20002a00
 8009b30:	2000001c 	.word	0x2000001c
 8009b34:	200029fc 	.word	0x200029fc

08009b38 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	4603      	mov	r3, r0
 8009b40:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT; 	--- Commented out
//    return Stat;			--- Commented out
	return USER_SPI_initialize(pdrv); // ADDED
 8009b42:	79fb      	ldrb	r3, [r7, #7]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f000 f9d7 	bl	8009ef8 <USER_SPI_initialize>
 8009b4a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;		--- Commented out
//    return Stat;				--- Commented out
	return USER_SPI_status(pdrv); // ADDED
 8009b5e:	79fb      	ldrb	r3, [r7, #7]
 8009b60:	4618      	mov	r0, r3
 8009b62:	f000 fab5 	bl	800a0d0 <USER_SPI_status>
 8009b66:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3708      	adds	r7, #8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	60b9      	str	r1, [r7, #8]
 8009b78:	607a      	str	r2, [r7, #4]
 8009b7a:	603b      	str	r3, [r7, #0]
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;			--- Commented out
	return USER_SPI_read(pdrv, buff, sector, count); // ADDED
 8009b80:	7bf8      	ldrb	r0, [r7, #15]
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	68b9      	ldr	r1, [r7, #8]
 8009b88:	f000 fab8 	bl	800a0fc <USER_SPI_read>
 8009b8c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b084      	sub	sp, #16
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
 8009ba0:	603b      	str	r3, [r7, #0]
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;			--- Commented out
	return USER_SPI_write(pdrv, buff, sector, count); // ADDED
 8009ba6:	7bf8      	ldrb	r0, [r7, #15]
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	68b9      	ldr	r1, [r7, #8]
 8009bae:	f000 fb0b 	bl	800a1c8 <USER_SPI_write>
 8009bb2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	603a      	str	r2, [r7, #0]
 8009bc6:	71fb      	strb	r3, [r7, #7]
 8009bc8:	460b      	mov	r3, r1
 8009bca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;	--- Commented out
//    return res;				--- Commented out
	return USER_SPI_ioctl(pdrv, cmd, buff); // ADDED
 8009bcc:	79b9      	ldrb	r1, [r7, #6]
 8009bce:	79fb      	ldrb	r3, [r7, #7]
 8009bd0:	683a      	ldr	r2, [r7, #0]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f000 fb74 	bl	800a2c0 <USER_SPI_ioctl>
 8009bd8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3708      	adds	r7, #8
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
	...

08009be4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8009bec:	f7f9 fd3e 	bl	800366c <HAL_GetTick>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	4a04      	ldr	r2, [pc, #16]	; (8009c04 <SPI_Timer_On+0x20>)
 8009bf4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8009bf6:	4a04      	ldr	r2, [pc, #16]	; (8009c08 <SPI_Timer_On+0x24>)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6013      	str	r3, [r2, #0]
}
 8009bfc:	bf00      	nop
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	20002a08 	.word	0x20002a08
 8009c08:	20002a0c 	.word	0x20002a0c

08009c0c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009c10:	f7f9 fd2c 	bl	800366c <HAL_GetTick>
 8009c14:	4602      	mov	r2, r0
 8009c16:	4b06      	ldr	r3, [pc, #24]	; (8009c30 <SPI_Timer_Status+0x24>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	1ad2      	subs	r2, r2, r3
 8009c1c:	4b05      	ldr	r3, [pc, #20]	; (8009c34 <SPI_Timer_Status+0x28>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	bf34      	ite	cc
 8009c24:	2301      	movcc	r3, #1
 8009c26:	2300      	movcs	r3, #0
 8009c28:	b2db      	uxtb	r3, r3
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	20002a08 	.word	0x20002a08
 8009c34:	20002a0c 	.word	0x20002a0c

08009c38 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b086      	sub	sp, #24
 8009c3c:	af02      	add	r7, sp, #8
 8009c3e:	4603      	mov	r3, r0
 8009c40:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009c42:	f107 020f 	add.w	r2, r7, #15
 8009c46:	1df9      	adds	r1, r7, #7
 8009c48:	2332      	movs	r3, #50	; 0x32
 8009c4a:	9300      	str	r3, [sp, #0]
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	4804      	ldr	r0, [pc, #16]	; (8009c60 <xchg_spi+0x28>)
 8009c50:	f7fd fc30 	bl	80074b4 <HAL_SPI_TransmitReceive>
    return rxDat;
 8009c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	200002f4 	.word	0x200002f4

08009c64 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8009c64:	b590      	push	{r4, r7, lr}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60fb      	str	r3, [r7, #12]
 8009c72:	e00a      	b.n	8009c8a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	18d4      	adds	r4, r2, r3
 8009c7a:	20ff      	movs	r0, #255	; 0xff
 8009c7c:	f7ff ffdc 	bl	8009c38 <xchg_spi>
 8009c80:	4603      	mov	r3, r0
 8009c82:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	3301      	adds	r3, #1
 8009c88:	60fb      	str	r3, [r7, #12]
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d3f0      	bcc.n	8009c74 <rcvr_spi_multi+0x10>
	}
}
 8009c92:	bf00      	nop
 8009c94:	bf00      	nop
 8009c96:	3714      	adds	r7, #20
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd90      	pop	{r4, r7, pc}

08009c9c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60fb      	str	r3, [r7, #12]
 8009caa:	e009      	b.n	8009cc0 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7ff ffbf 	bl	8009c38 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	60fb      	str	r3, [r7, #12]
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d3f1      	bcc.n	8009cac <xmit_spi_multi+0x10>
	}
}
 8009cc8:	bf00      	nop
 8009cca:	bf00      	nop
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b086      	sub	sp, #24
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8009cda:	f7f9 fcc7 	bl	800366c <HAL_GetTick>
 8009cde:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8009ce4:	20ff      	movs	r0, #255	; 0xff
 8009ce6:	f7ff ffa7 	bl	8009c38 <xchg_spi>
 8009cea:	4603      	mov	r3, r0
 8009cec:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8009cee:	7bfb      	ldrb	r3, [r7, #15]
 8009cf0:	2bff      	cmp	r3, #255	; 0xff
 8009cf2:	d007      	beq.n	8009d04 <wait_ready+0x32>
 8009cf4:	f7f9 fcba 	bl	800366c <HAL_GetTick>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	693a      	ldr	r2, [r7, #16]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d8ef      	bhi.n	8009ce4 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8009d04:	7bfb      	ldrb	r3, [r7, #15]
 8009d06:	2bff      	cmp	r3, #255	; 0xff
 8009d08:	bf0c      	ite	eq
 8009d0a:	2301      	moveq	r3, #1
 8009d0c:	2300      	movne	r3, #0
 8009d0e:	b2db      	uxtb	r3, r3
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3718      	adds	r7, #24
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	2120      	movs	r1, #32
 8009d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009d24:	f7fb fc68 	bl	80055f8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8009d28:	20ff      	movs	r0, #255	; 0xff
 8009d2a:	f7ff ff85 	bl	8009c38 <xchg_spi>

}
 8009d2e:	bf00      	nop
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8009d36:	2200      	movs	r2, #0
 8009d38:	2120      	movs	r1, #32
 8009d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009d3e:	f7fb fc5b 	bl	80055f8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8009d42:	20ff      	movs	r0, #255	; 0xff
 8009d44:	f7ff ff78 	bl	8009c38 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8009d48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009d4c:	f7ff ffc1 	bl	8009cd2 <wait_ready>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d001      	beq.n	8009d5a <spiselect+0x28>
 8009d56:	2301      	movs	r3, #1
 8009d58:	e002      	b.n	8009d60 <spiselect+0x2e>

	despiselect();
 8009d5a:	f7ff ffdd 	bl	8009d18 <despiselect>
	return 0;	/* Timeout */
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8009d6e:	20c8      	movs	r0, #200	; 0xc8
 8009d70:	f7ff ff38 	bl	8009be4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8009d74:	20ff      	movs	r0, #255	; 0xff
 8009d76:	f7ff ff5f 	bl	8009c38 <xchg_spi>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8009d7e:	7bfb      	ldrb	r3, [r7, #15]
 8009d80:	2bff      	cmp	r3, #255	; 0xff
 8009d82:	d104      	bne.n	8009d8e <rcvr_datablock+0x2a>
 8009d84:	f7ff ff42 	bl	8009c0c <SPI_Timer_Status>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d1f2      	bne.n	8009d74 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8009d8e:	7bfb      	ldrb	r3, [r7, #15]
 8009d90:	2bfe      	cmp	r3, #254	; 0xfe
 8009d92:	d001      	beq.n	8009d98 <rcvr_datablock+0x34>
 8009d94:	2300      	movs	r3, #0
 8009d96:	e00a      	b.n	8009dae <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8009d98:	6839      	ldr	r1, [r7, #0]
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7ff ff62 	bl	8009c64 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8009da0:	20ff      	movs	r0, #255	; 0xff
 8009da2:	f7ff ff49 	bl	8009c38 <xchg_spi>
 8009da6:	20ff      	movs	r0, #255	; 0xff
 8009da8:	f7ff ff46 	bl	8009c38 <xchg_spi>

	return 1;						/* Function succeeded */
 8009dac:	2301      	movs	r3, #1
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b084      	sub	sp, #16
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8009dc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009dc6:	f7ff ff84 	bl	8009cd2 <wait_ready>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d101      	bne.n	8009dd4 <xmit_datablock+0x1e>
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	e01e      	b.n	8009e12 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8009dd4:	78fb      	ldrb	r3, [r7, #3]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7ff ff2e 	bl	8009c38 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8009ddc:	78fb      	ldrb	r3, [r7, #3]
 8009dde:	2bfd      	cmp	r3, #253	; 0xfd
 8009de0:	d016      	beq.n	8009e10 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8009de2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f7ff ff58 	bl	8009c9c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8009dec:	20ff      	movs	r0, #255	; 0xff
 8009dee:	f7ff ff23 	bl	8009c38 <xchg_spi>
 8009df2:	20ff      	movs	r0, #255	; 0xff
 8009df4:	f7ff ff20 	bl	8009c38 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8009df8:	20ff      	movs	r0, #255	; 0xff
 8009dfa:	f7ff ff1d 	bl	8009c38 <xchg_spi>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8009e02:	7bfb      	ldrb	r3, [r7, #15]
 8009e04:	f003 031f 	and.w	r3, r3, #31
 8009e08:	2b05      	cmp	r3, #5
 8009e0a:	d001      	beq.n	8009e10 <xmit_datablock+0x5a>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	e000      	b.n	8009e12 <xmit_datablock+0x5c>
	}
	return 1;
 8009e10:	2301      	movs	r3, #1
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b084      	sub	sp, #16
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	4603      	mov	r3, r0
 8009e22:	6039      	str	r1, [r7, #0]
 8009e24:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8009e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	da0e      	bge.n	8009e4c <send_cmd+0x32>
		cmd &= 0x7F;
 8009e2e:	79fb      	ldrb	r3, [r7, #7]
 8009e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e34:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8009e36:	2100      	movs	r1, #0
 8009e38:	2037      	movs	r0, #55	; 0x37
 8009e3a:	f7ff ffee 	bl	8009e1a <send_cmd>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8009e42:	7bbb      	ldrb	r3, [r7, #14]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d901      	bls.n	8009e4c <send_cmd+0x32>
 8009e48:	7bbb      	ldrb	r3, [r7, #14]
 8009e4a:	e051      	b.n	8009ef0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8009e4c:	79fb      	ldrb	r3, [r7, #7]
 8009e4e:	2b0c      	cmp	r3, #12
 8009e50:	d008      	beq.n	8009e64 <send_cmd+0x4a>
		despiselect();
 8009e52:	f7ff ff61 	bl	8009d18 <despiselect>
		if (!spiselect()) return 0xFF;
 8009e56:	f7ff ff6c 	bl	8009d32 <spiselect>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d101      	bne.n	8009e64 <send_cmd+0x4a>
 8009e60:	23ff      	movs	r3, #255	; 0xff
 8009e62:	e045      	b.n	8009ef0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8009e64:	79fb      	ldrb	r3, [r7, #7]
 8009e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7ff fee3 	bl	8009c38 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	0e1b      	lsrs	r3, r3, #24
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7ff fedd 	bl	8009c38 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	0c1b      	lsrs	r3, r3, #16
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7ff fed7 	bl	8009c38 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	0a1b      	lsrs	r3, r3, #8
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7ff fed1 	bl	8009c38 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7ff fecc 	bl	8009c38 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8009ea4:	79fb      	ldrb	r3, [r7, #7]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d101      	bne.n	8009eae <send_cmd+0x94>
 8009eaa:	2395      	movs	r3, #149	; 0x95
 8009eac:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8009eae:	79fb      	ldrb	r3, [r7, #7]
 8009eb0:	2b08      	cmp	r3, #8
 8009eb2:	d101      	bne.n	8009eb8 <send_cmd+0x9e>
 8009eb4:	2387      	movs	r3, #135	; 0x87
 8009eb6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7ff febc 	bl	8009c38 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8009ec0:	79fb      	ldrb	r3, [r7, #7]
 8009ec2:	2b0c      	cmp	r3, #12
 8009ec4:	d102      	bne.n	8009ecc <send_cmd+0xb2>
 8009ec6:	20ff      	movs	r0, #255	; 0xff
 8009ec8:	f7ff feb6 	bl	8009c38 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8009ecc:	230a      	movs	r3, #10
 8009ece:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8009ed0:	20ff      	movs	r0, #255	; 0xff
 8009ed2:	f7ff feb1 	bl	8009c38 <xchg_spi>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8009eda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	da05      	bge.n	8009eee <send_cmd+0xd4>
 8009ee2:	7bfb      	ldrb	r3, [r7, #15]
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	73fb      	strb	r3, [r7, #15]
 8009ee8:	7bfb      	ldrb	r3, [r7, #15]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1f0      	bne.n	8009ed0 <send_cmd+0xb6>

	return res;							/* Return received response */
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009ef8:	b590      	push	{r4, r7, lr}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	4603      	mov	r3, r0
 8009f00:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8009f02:	79fb      	ldrb	r3, [r7, #7]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d001      	beq.n	8009f0c <USER_SPI_initialize+0x14>
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e0d6      	b.n	800a0ba <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009f0c:	4b6d      	ldr	r3, [pc, #436]	; (800a0c4 <USER_SPI_initialize+0x1cc>)
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	f003 0302 	and.w	r3, r3, #2
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d003      	beq.n	8009f22 <USER_SPI_initialize+0x2a>
 8009f1a:	4b6a      	ldr	r3, [pc, #424]	; (800a0c4 <USER_SPI_initialize+0x1cc>)
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	e0cb      	b.n	800a0ba <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8009f22:	4b69      	ldr	r3, [pc, #420]	; (800a0c8 <USER_SPI_initialize+0x1d0>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009f2c:	4b66      	ldr	r3, [pc, #408]	; (800a0c8 <USER_SPI_initialize+0x1d0>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8009f34:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8009f36:	230a      	movs	r3, #10
 8009f38:	73fb      	strb	r3, [r7, #15]
 8009f3a:	e005      	b.n	8009f48 <USER_SPI_initialize+0x50>
 8009f3c:	20ff      	movs	r0, #255	; 0xff
 8009f3e:	f7ff fe7b 	bl	8009c38 <xchg_spi>
 8009f42:	7bfb      	ldrb	r3, [r7, #15]
 8009f44:	3b01      	subs	r3, #1
 8009f46:	73fb      	strb	r3, [r7, #15]
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1f6      	bne.n	8009f3c <USER_SPI_initialize+0x44>

	ty = 0;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8009f52:	2100      	movs	r1, #0
 8009f54:	2000      	movs	r0, #0
 8009f56:	f7ff ff60 	bl	8009e1a <send_cmd>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	f040 808b 	bne.w	800a078 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8009f62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009f66:	f7ff fe3d 	bl	8009be4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8009f6a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009f6e:	2008      	movs	r0, #8
 8009f70:	f7ff ff53 	bl	8009e1a <send_cmd>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d151      	bne.n	800a01e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	73fb      	strb	r3, [r7, #15]
 8009f7e:	e00d      	b.n	8009f9c <USER_SPI_initialize+0xa4>
 8009f80:	7bfc      	ldrb	r4, [r7, #15]
 8009f82:	20ff      	movs	r0, #255	; 0xff
 8009f84:	f7ff fe58 	bl	8009c38 <xchg_spi>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	f104 0310 	add.w	r3, r4, #16
 8009f90:	443b      	add	r3, r7
 8009f92:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009f96:	7bfb      	ldrb	r3, [r7, #15]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	73fb      	strb	r3, [r7, #15]
 8009f9c:	7bfb      	ldrb	r3, [r7, #15]
 8009f9e:	2b03      	cmp	r3, #3
 8009fa0:	d9ee      	bls.n	8009f80 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8009fa2:	7abb      	ldrb	r3, [r7, #10]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d167      	bne.n	800a078 <USER_SPI_initialize+0x180>
 8009fa8:	7afb      	ldrb	r3, [r7, #11]
 8009faa:	2baa      	cmp	r3, #170	; 0xaa
 8009fac:	d164      	bne.n	800a078 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8009fae:	bf00      	nop
 8009fb0:	f7ff fe2c 	bl	8009c0c <SPI_Timer_Status>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d007      	beq.n	8009fca <USER_SPI_initialize+0xd2>
 8009fba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009fbe:	20a9      	movs	r0, #169	; 0xa9
 8009fc0:	f7ff ff2b 	bl	8009e1a <send_cmd>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d1f2      	bne.n	8009fb0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8009fca:	f7ff fe1f 	bl	8009c0c <SPI_Timer_Status>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d051      	beq.n	800a078 <USER_SPI_initialize+0x180>
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	203a      	movs	r0, #58	; 0x3a
 8009fd8:	f7ff ff1f 	bl	8009e1a <send_cmd>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d14a      	bne.n	800a078 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	73fb      	strb	r3, [r7, #15]
 8009fe6:	e00d      	b.n	800a004 <USER_SPI_initialize+0x10c>
 8009fe8:	7bfc      	ldrb	r4, [r7, #15]
 8009fea:	20ff      	movs	r0, #255	; 0xff
 8009fec:	f7ff fe24 	bl	8009c38 <xchg_spi>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	f104 0310 	add.w	r3, r4, #16
 8009ff8:	443b      	add	r3, r7
 8009ffa:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009ffe:	7bfb      	ldrb	r3, [r7, #15]
 800a000:	3301      	adds	r3, #1
 800a002:	73fb      	strb	r3, [r7, #15]
 800a004:	7bfb      	ldrb	r3, [r7, #15]
 800a006:	2b03      	cmp	r3, #3
 800a008:	d9ee      	bls.n	8009fe8 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800a00a:	7a3b      	ldrb	r3, [r7, #8]
 800a00c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <USER_SPI_initialize+0x120>
 800a014:	230c      	movs	r3, #12
 800a016:	e000      	b.n	800a01a <USER_SPI_initialize+0x122>
 800a018:	2304      	movs	r3, #4
 800a01a:	737b      	strb	r3, [r7, #13]
 800a01c:	e02c      	b.n	800a078 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800a01e:	2100      	movs	r1, #0
 800a020:	20a9      	movs	r0, #169	; 0xa9
 800a022:	f7ff fefa 	bl	8009e1a <send_cmd>
 800a026:	4603      	mov	r3, r0
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d804      	bhi.n	800a036 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800a02c:	2302      	movs	r3, #2
 800a02e:	737b      	strb	r3, [r7, #13]
 800a030:	23a9      	movs	r3, #169	; 0xa9
 800a032:	73bb      	strb	r3, [r7, #14]
 800a034:	e003      	b.n	800a03e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800a036:	2301      	movs	r3, #1
 800a038:	737b      	strb	r3, [r7, #13]
 800a03a:	2301      	movs	r3, #1
 800a03c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800a03e:	bf00      	nop
 800a040:	f7ff fde4 	bl	8009c0c <SPI_Timer_Status>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d007      	beq.n	800a05a <USER_SPI_initialize+0x162>
 800a04a:	7bbb      	ldrb	r3, [r7, #14]
 800a04c:	2100      	movs	r1, #0
 800a04e:	4618      	mov	r0, r3
 800a050:	f7ff fee3 	bl	8009e1a <send_cmd>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1f2      	bne.n	800a040 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800a05a:	f7ff fdd7 	bl	8009c0c <SPI_Timer_Status>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d007      	beq.n	800a074 <USER_SPI_initialize+0x17c>
 800a064:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a068:	2010      	movs	r0, #16
 800a06a:	f7ff fed6 	bl	8009e1a <send_cmd>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d001      	beq.n	800a078 <USER_SPI_initialize+0x180>
				ty = 0;
 800a074:	2300      	movs	r3, #0
 800a076:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800a078:	4a14      	ldr	r2, [pc, #80]	; (800a0cc <USER_SPI_initialize+0x1d4>)
 800a07a:	7b7b      	ldrb	r3, [r7, #13]
 800a07c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800a07e:	f7ff fe4b 	bl	8009d18 <despiselect>

	if (ty) {			/* OK */
 800a082:	7b7b      	ldrb	r3, [r7, #13]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d012      	beq.n	800a0ae <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800a088:	4b0f      	ldr	r3, [pc, #60]	; (800a0c8 <USER_SPI_initialize+0x1d0>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a092:	4b0d      	ldr	r3, [pc, #52]	; (800a0c8 <USER_SPI_initialize+0x1d0>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f042 0210 	orr.w	r2, r2, #16
 800a09a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800a09c:	4b09      	ldr	r3, [pc, #36]	; (800a0c4 <USER_SPI_initialize+0x1cc>)
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	f023 0301 	bic.w	r3, r3, #1
 800a0a6:	b2da      	uxtb	r2, r3
 800a0a8:	4b06      	ldr	r3, [pc, #24]	; (800a0c4 <USER_SPI_initialize+0x1cc>)
 800a0aa:	701a      	strb	r2, [r3, #0]
 800a0ac:	e002      	b.n	800a0b4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800a0ae:	4b05      	ldr	r3, [pc, #20]	; (800a0c4 <USER_SPI_initialize+0x1cc>)
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800a0b4:	4b03      	ldr	r3, [pc, #12]	; (800a0c4 <USER_SPI_initialize+0x1cc>)
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	b2db      	uxtb	r3, r3
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3714      	adds	r7, #20
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd90      	pop	{r4, r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	20000030 	.word	0x20000030
 800a0c8:	200002f4 	.word	0x200002f4
 800a0cc:	20002a04 	.word	0x20002a04

0800a0d0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800a0da:	79fb      	ldrb	r3, [r7, #7]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d001      	beq.n	800a0e4 <USER_SPI_status+0x14>
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e002      	b.n	800a0ea <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800a0e4:	4b04      	ldr	r3, [pc, #16]	; (800a0f8 <USER_SPI_status+0x28>)
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	b2db      	uxtb	r3, r3
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	370c      	adds	r7, #12
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	20000030 	.word	0x20000030

0800a0fc <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	60b9      	str	r1, [r7, #8]
 800a104:	607a      	str	r2, [r7, #4]
 800a106:	603b      	str	r3, [r7, #0]
 800a108:	4603      	mov	r3, r0
 800a10a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a10c:	7bfb      	ldrb	r3, [r7, #15]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d102      	bne.n	800a118 <USER_SPI_read+0x1c>
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d101      	bne.n	800a11c <USER_SPI_read+0x20>
 800a118:	2304      	movs	r3, #4
 800a11a:	e04d      	b.n	800a1b8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a11c:	4b28      	ldr	r3, [pc, #160]	; (800a1c0 <USER_SPI_read+0xc4>)
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	b2db      	uxtb	r3, r3
 800a122:	f003 0301 	and.w	r3, r3, #1
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <USER_SPI_read+0x32>
 800a12a:	2303      	movs	r3, #3
 800a12c:	e044      	b.n	800a1b8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800a12e:	4b25      	ldr	r3, [pc, #148]	; (800a1c4 <USER_SPI_read+0xc8>)
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	f003 0308 	and.w	r3, r3, #8
 800a136:	2b00      	cmp	r3, #0
 800a138:	d102      	bne.n	800a140 <USER_SPI_read+0x44>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	025b      	lsls	r3, r3, #9
 800a13e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	2b01      	cmp	r3, #1
 800a144:	d111      	bne.n	800a16a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800a146:	6879      	ldr	r1, [r7, #4]
 800a148:	2011      	movs	r0, #17
 800a14a:	f7ff fe66 	bl	8009e1a <send_cmd>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d129      	bne.n	800a1a8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800a154:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a158:	68b8      	ldr	r0, [r7, #8]
 800a15a:	f7ff fe03 	bl	8009d64 <rcvr_datablock>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d021      	beq.n	800a1a8 <USER_SPI_read+0xac>
			count = 0;
 800a164:	2300      	movs	r3, #0
 800a166:	603b      	str	r3, [r7, #0]
 800a168:	e01e      	b.n	800a1a8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800a16a:	6879      	ldr	r1, [r7, #4]
 800a16c:	2012      	movs	r0, #18
 800a16e:	f7ff fe54 	bl	8009e1a <send_cmd>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d117      	bne.n	800a1a8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800a178:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a17c:	68b8      	ldr	r0, [r7, #8]
 800a17e:	f7ff fdf1 	bl	8009d64 <rcvr_datablock>
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00a      	beq.n	800a19e <USER_SPI_read+0xa2>
				buff += 512;
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a18e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	3b01      	subs	r3, #1
 800a194:	603b      	str	r3, [r7, #0]
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1ed      	bne.n	800a178 <USER_SPI_read+0x7c>
 800a19c:	e000      	b.n	800a1a0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800a19e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	200c      	movs	r0, #12
 800a1a4:	f7ff fe39 	bl	8009e1a <send_cmd>
		}
	}
	despiselect();
 800a1a8:	f7ff fdb6 	bl	8009d18 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	bf14      	ite	ne
 800a1b2:	2301      	movne	r3, #1
 800a1b4:	2300      	moveq	r3, #0
 800a1b6:	b2db      	uxtb	r3, r3
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3710      	adds	r7, #16
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	20000030 	.word	0x20000030
 800a1c4:	20002a04 	.word	0x20002a04

0800a1c8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60b9      	str	r1, [r7, #8]
 800a1d0:	607a      	str	r2, [r7, #4]
 800a1d2:	603b      	str	r3, [r7, #0]
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d102      	bne.n	800a1e4 <USER_SPI_write+0x1c>
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d101      	bne.n	800a1e8 <USER_SPI_write+0x20>
 800a1e4:	2304      	movs	r3, #4
 800a1e6:	e063      	b.n	800a2b0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800a1e8:	4b33      	ldr	r3, [pc, #204]	; (800a2b8 <USER_SPI_write+0xf0>)
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	f003 0301 	and.w	r3, r3, #1
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d001      	beq.n	800a1fa <USER_SPI_write+0x32>
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	e05a      	b.n	800a2b0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800a1fa:	4b2f      	ldr	r3, [pc, #188]	; (800a2b8 <USER_SPI_write+0xf0>)
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	f003 0304 	and.w	r3, r3, #4
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <USER_SPI_write+0x44>
 800a208:	2302      	movs	r3, #2
 800a20a:	e051      	b.n	800a2b0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800a20c:	4b2b      	ldr	r3, [pc, #172]	; (800a2bc <USER_SPI_write+0xf4>)
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	f003 0308 	and.w	r3, r3, #8
 800a214:	2b00      	cmp	r3, #0
 800a216:	d102      	bne.n	800a21e <USER_SPI_write+0x56>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	025b      	lsls	r3, r3, #9
 800a21c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	2b01      	cmp	r3, #1
 800a222:	d110      	bne.n	800a246 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800a224:	6879      	ldr	r1, [r7, #4]
 800a226:	2018      	movs	r0, #24
 800a228:	f7ff fdf7 	bl	8009e1a <send_cmd>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d136      	bne.n	800a2a0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800a232:	21fe      	movs	r1, #254	; 0xfe
 800a234:	68b8      	ldr	r0, [r7, #8]
 800a236:	f7ff fdbe 	bl	8009db6 <xmit_datablock>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d02f      	beq.n	800a2a0 <USER_SPI_write+0xd8>
			count = 0;
 800a240:	2300      	movs	r3, #0
 800a242:	603b      	str	r3, [r7, #0]
 800a244:	e02c      	b.n	800a2a0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800a246:	4b1d      	ldr	r3, [pc, #116]	; (800a2bc <USER_SPI_write+0xf4>)
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	f003 0306 	and.w	r3, r3, #6
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d003      	beq.n	800a25a <USER_SPI_write+0x92>
 800a252:	6839      	ldr	r1, [r7, #0]
 800a254:	2097      	movs	r0, #151	; 0x97
 800a256:	f7ff fde0 	bl	8009e1a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800a25a:	6879      	ldr	r1, [r7, #4]
 800a25c:	2019      	movs	r0, #25
 800a25e:	f7ff fddc 	bl	8009e1a <send_cmd>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d11b      	bne.n	800a2a0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800a268:	21fc      	movs	r1, #252	; 0xfc
 800a26a:	68b8      	ldr	r0, [r7, #8]
 800a26c:	f7ff fda3 	bl	8009db6 <xmit_datablock>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00a      	beq.n	800a28c <USER_SPI_write+0xc4>
				buff += 512;
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a27c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	3b01      	subs	r3, #1
 800a282:	603b      	str	r3, [r7, #0]
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1ee      	bne.n	800a268 <USER_SPI_write+0xa0>
 800a28a:	e000      	b.n	800a28e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800a28c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800a28e:	21fd      	movs	r1, #253	; 0xfd
 800a290:	2000      	movs	r0, #0
 800a292:	f7ff fd90 	bl	8009db6 <xmit_datablock>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d101      	bne.n	800a2a0 <USER_SPI_write+0xd8>
 800a29c:	2301      	movs	r3, #1
 800a29e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800a2a0:	f7ff fd3a 	bl	8009d18 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	bf14      	ite	ne
 800a2aa:	2301      	movne	r3, #1
 800a2ac:	2300      	moveq	r3, #0
 800a2ae:	b2db      	uxtb	r3, r3
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	20000030 	.word	0x20000030
 800a2bc:	20002a04 	.word	0x20002a04

0800a2c0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b08c      	sub	sp, #48	; 0x30
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	603a      	str	r2, [r7, #0]
 800a2ca:	71fb      	strb	r3, [r7, #7]
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800a2d0:	79fb      	ldrb	r3, [r7, #7]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d001      	beq.n	800a2da <USER_SPI_ioctl+0x1a>
 800a2d6:	2304      	movs	r3, #4
 800a2d8:	e15a      	b.n	800a590 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a2da:	4baf      	ldr	r3, [pc, #700]	; (800a598 <USER_SPI_ioctl+0x2d8>)
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	f003 0301 	and.w	r3, r3, #1
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d001      	beq.n	800a2ec <USER_SPI_ioctl+0x2c>
 800a2e8:	2303      	movs	r3, #3
 800a2ea:	e151      	b.n	800a590 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800a2f2:	79bb      	ldrb	r3, [r7, #6]
 800a2f4:	2b04      	cmp	r3, #4
 800a2f6:	f200 8136 	bhi.w	800a566 <USER_SPI_ioctl+0x2a6>
 800a2fa:	a201      	add	r2, pc, #4	; (adr r2, 800a300 <USER_SPI_ioctl+0x40>)
 800a2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a300:	0800a315 	.word	0x0800a315
 800a304:	0800a329 	.word	0x0800a329
 800a308:	0800a567 	.word	0x0800a567
 800a30c:	0800a3d5 	.word	0x0800a3d5
 800a310:	0800a4cb 	.word	0x0800a4cb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800a314:	f7ff fd0d 	bl	8009d32 <spiselect>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	f000 8127 	beq.w	800a56e <USER_SPI_ioctl+0x2ae>
 800a320:	2300      	movs	r3, #0
 800a322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800a326:	e122      	b.n	800a56e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800a328:	2100      	movs	r1, #0
 800a32a:	2009      	movs	r0, #9
 800a32c:	f7ff fd75 	bl	8009e1a <send_cmd>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	f040 811d 	bne.w	800a572 <USER_SPI_ioctl+0x2b2>
 800a338:	f107 030c 	add.w	r3, r7, #12
 800a33c:	2110      	movs	r1, #16
 800a33e:	4618      	mov	r0, r3
 800a340:	f7ff fd10 	bl	8009d64 <rcvr_datablock>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	f000 8113 	beq.w	800a572 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800a34c:	7b3b      	ldrb	r3, [r7, #12]
 800a34e:	099b      	lsrs	r3, r3, #6
 800a350:	b2db      	uxtb	r3, r3
 800a352:	2b01      	cmp	r3, #1
 800a354:	d111      	bne.n	800a37a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800a356:	7d7b      	ldrb	r3, [r7, #21]
 800a358:	461a      	mov	r2, r3
 800a35a:	7d3b      	ldrb	r3, [r7, #20]
 800a35c:	021b      	lsls	r3, r3, #8
 800a35e:	4413      	add	r3, r2
 800a360:	461a      	mov	r2, r3
 800a362:	7cfb      	ldrb	r3, [r7, #19]
 800a364:	041b      	lsls	r3, r3, #16
 800a366:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800a36a:	4413      	add	r3, r2
 800a36c:	3301      	adds	r3, #1
 800a36e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	029a      	lsls	r2, r3, #10
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	601a      	str	r2, [r3, #0]
 800a378:	e028      	b.n	800a3cc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800a37a:	7c7b      	ldrb	r3, [r7, #17]
 800a37c:	f003 030f 	and.w	r3, r3, #15
 800a380:	b2da      	uxtb	r2, r3
 800a382:	7dbb      	ldrb	r3, [r7, #22]
 800a384:	09db      	lsrs	r3, r3, #7
 800a386:	b2db      	uxtb	r3, r3
 800a388:	4413      	add	r3, r2
 800a38a:	b2da      	uxtb	r2, r3
 800a38c:	7d7b      	ldrb	r3, [r7, #21]
 800a38e:	005b      	lsls	r3, r3, #1
 800a390:	b2db      	uxtb	r3, r3
 800a392:	f003 0306 	and.w	r3, r3, #6
 800a396:	b2db      	uxtb	r3, r3
 800a398:	4413      	add	r3, r2
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	3302      	adds	r3, #2
 800a39e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800a3a2:	7d3b      	ldrb	r3, [r7, #20]
 800a3a4:	099b      	lsrs	r3, r3, #6
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	7cfb      	ldrb	r3, [r7, #19]
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	441a      	add	r2, r3
 800a3b0:	7cbb      	ldrb	r3, [r7, #18]
 800a3b2:	029b      	lsls	r3, r3, #10
 800a3b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a3b8:	4413      	add	r3, r2
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800a3be:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a3c2:	3b09      	subs	r3, #9
 800a3c4:	69fa      	ldr	r2, [r7, #28]
 800a3c6:	409a      	lsls	r2, r3
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800a3d2:	e0ce      	b.n	800a572 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800a3d4:	4b71      	ldr	r3, [pc, #452]	; (800a59c <USER_SPI_ioctl+0x2dc>)
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	f003 0304 	and.w	r3, r3, #4
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d031      	beq.n	800a444 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	208d      	movs	r0, #141	; 0x8d
 800a3e4:	f7ff fd19 	bl	8009e1a <send_cmd>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f040 80c3 	bne.w	800a576 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800a3f0:	20ff      	movs	r0, #255	; 0xff
 800a3f2:	f7ff fc21 	bl	8009c38 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800a3f6:	f107 030c 	add.w	r3, r7, #12
 800a3fa:	2110      	movs	r1, #16
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7ff fcb1 	bl	8009d64 <rcvr_datablock>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	f000 80b6 	beq.w	800a576 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800a40a:	2330      	movs	r3, #48	; 0x30
 800a40c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a410:	e007      	b.n	800a422 <USER_SPI_ioctl+0x162>
 800a412:	20ff      	movs	r0, #255	; 0xff
 800a414:	f7ff fc10 	bl	8009c38 <xchg_spi>
 800a418:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a41c:	3b01      	subs	r3, #1
 800a41e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a422:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1f3      	bne.n	800a412 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800a42a:	7dbb      	ldrb	r3, [r7, #22]
 800a42c:	091b      	lsrs	r3, r3, #4
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	461a      	mov	r2, r3
 800a432:	2310      	movs	r3, #16
 800a434:	fa03 f202 	lsl.w	r2, r3, r2
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800a43c:	2300      	movs	r3, #0
 800a43e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800a442:	e098      	b.n	800a576 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800a444:	2100      	movs	r1, #0
 800a446:	2009      	movs	r0, #9
 800a448:	f7ff fce7 	bl	8009e1a <send_cmd>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	f040 8091 	bne.w	800a576 <USER_SPI_ioctl+0x2b6>
 800a454:	f107 030c 	add.w	r3, r7, #12
 800a458:	2110      	movs	r1, #16
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7ff fc82 	bl	8009d64 <rcvr_datablock>
 800a460:	4603      	mov	r3, r0
 800a462:	2b00      	cmp	r3, #0
 800a464:	f000 8087 	beq.w	800a576 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800a468:	4b4c      	ldr	r3, [pc, #304]	; (800a59c <USER_SPI_ioctl+0x2dc>)
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	f003 0302 	and.w	r3, r3, #2
 800a470:	2b00      	cmp	r3, #0
 800a472:	d012      	beq.n	800a49a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800a474:	7dbb      	ldrb	r3, [r7, #22]
 800a476:	005b      	lsls	r3, r3, #1
 800a478:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800a47c:	7dfa      	ldrb	r2, [r7, #23]
 800a47e:	09d2      	lsrs	r2, r2, #7
 800a480:	b2d2      	uxtb	r2, r2
 800a482:	4413      	add	r3, r2
 800a484:	1c5a      	adds	r2, r3, #1
 800a486:	7e7b      	ldrb	r3, [r7, #25]
 800a488:	099b      	lsrs	r3, r3, #6
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	3b01      	subs	r3, #1
 800a48e:	fa02 f303 	lsl.w	r3, r2, r3
 800a492:	461a      	mov	r2, r3
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	601a      	str	r2, [r3, #0]
 800a498:	e013      	b.n	800a4c2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800a49a:	7dbb      	ldrb	r3, [r7, #22]
 800a49c:	109b      	asrs	r3, r3, #2
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	f003 031f 	and.w	r3, r3, #31
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	7dfa      	ldrb	r2, [r7, #23]
 800a4a8:	00d2      	lsls	r2, r2, #3
 800a4aa:	f002 0218 	and.w	r2, r2, #24
 800a4ae:	7df9      	ldrb	r1, [r7, #23]
 800a4b0:	0949      	lsrs	r1, r1, #5
 800a4b2:	b2c9      	uxtb	r1, r1
 800a4b4:	440a      	add	r2, r1
 800a4b6:	3201      	adds	r2, #1
 800a4b8:	fb02 f303 	mul.w	r3, r2, r3
 800a4bc:	461a      	mov	r2, r3
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800a4c8:	e055      	b.n	800a576 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a4ca:	4b34      	ldr	r3, [pc, #208]	; (800a59c <USER_SPI_ioctl+0x2dc>)
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	f003 0306 	and.w	r3, r3, #6
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d051      	beq.n	800a57a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a4d6:	f107 020c 	add.w	r2, r7, #12
 800a4da:	79fb      	ldrb	r3, [r7, #7]
 800a4dc:	210b      	movs	r1, #11
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7ff feee 	bl	800a2c0 <USER_SPI_ioctl>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d149      	bne.n	800a57e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a4ea:	7b3b      	ldrb	r3, [r7, #12]
 800a4ec:	099b      	lsrs	r3, r3, #6
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d104      	bne.n	800a4fe <USER_SPI_ioctl+0x23e>
 800a4f4:	7dbb      	ldrb	r3, [r7, #22]
 800a4f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d041      	beq.n	800a582 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	623b      	str	r3, [r7, #32]
 800a502:	6a3b      	ldr	r3, [r7, #32]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	62bb      	str	r3, [r7, #40]	; 0x28
 800a508:	6a3b      	ldr	r3, [r7, #32]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800a50e:	4b23      	ldr	r3, [pc, #140]	; (800a59c <USER_SPI_ioctl+0x2dc>)
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	f003 0308 	and.w	r3, r3, #8
 800a516:	2b00      	cmp	r3, #0
 800a518:	d105      	bne.n	800a526 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800a51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51c:	025b      	lsls	r3, r3, #9
 800a51e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a522:	025b      	lsls	r3, r3, #9
 800a524:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800a526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a528:	2020      	movs	r0, #32
 800a52a:	f7ff fc76 	bl	8009e1a <send_cmd>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d128      	bne.n	800a586 <USER_SPI_ioctl+0x2c6>
 800a534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a536:	2021      	movs	r0, #33	; 0x21
 800a538:	f7ff fc6f 	bl	8009e1a <send_cmd>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d121      	bne.n	800a586 <USER_SPI_ioctl+0x2c6>
 800a542:	2100      	movs	r1, #0
 800a544:	2026      	movs	r0, #38	; 0x26
 800a546:	f7ff fc68 	bl	8009e1a <send_cmd>
 800a54a:	4603      	mov	r3, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d11a      	bne.n	800a586 <USER_SPI_ioctl+0x2c6>
 800a550:	f247 5030 	movw	r0, #30000	; 0x7530
 800a554:	f7ff fbbd 	bl	8009cd2 <wait_ready>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d013      	beq.n	800a586 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800a55e:	2300      	movs	r3, #0
 800a560:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800a564:	e00f      	b.n	800a586 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800a566:	2304      	movs	r3, #4
 800a568:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a56c:	e00c      	b.n	800a588 <USER_SPI_ioctl+0x2c8>
		break;
 800a56e:	bf00      	nop
 800a570:	e00a      	b.n	800a588 <USER_SPI_ioctl+0x2c8>
		break;
 800a572:	bf00      	nop
 800a574:	e008      	b.n	800a588 <USER_SPI_ioctl+0x2c8>
		break;
 800a576:	bf00      	nop
 800a578:	e006      	b.n	800a588 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a57a:	bf00      	nop
 800a57c:	e004      	b.n	800a588 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a57e:	bf00      	nop
 800a580:	e002      	b.n	800a588 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a582:	bf00      	nop
 800a584:	e000      	b.n	800a588 <USER_SPI_ioctl+0x2c8>
		break;
 800a586:	bf00      	nop
	}

	despiselect();
 800a588:	f7ff fbc6 	bl	8009d18 <despiselect>

	return res;
 800a58c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a590:	4618      	mov	r0, r3
 800a592:	3730      	adds	r7, #48	; 0x30
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	20000030 	.word	0x20000030
 800a59c:	20002a04 	.word	0x20002a04

0800a5a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b087      	sub	sp, #28
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a5b6:	4b1f      	ldr	r3, [pc, #124]	; (800a634 <FATFS_LinkDriverEx+0x94>)
 800a5b8:	7a5b      	ldrb	r3, [r3, #9]
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d131      	bne.n	800a624 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a5c0:	4b1c      	ldr	r3, [pc, #112]	; (800a634 <FATFS_LinkDriverEx+0x94>)
 800a5c2:	7a5b      	ldrb	r3, [r3, #9]
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	4b1a      	ldr	r3, [pc, #104]	; (800a634 <FATFS_LinkDriverEx+0x94>)
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a5ce:	4b19      	ldr	r3, [pc, #100]	; (800a634 <FATFS_LinkDriverEx+0x94>)
 800a5d0:	7a5b      	ldrb	r3, [r3, #9]
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	4a17      	ldr	r2, [pc, #92]	; (800a634 <FATFS_LinkDriverEx+0x94>)
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	4413      	add	r3, r2
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a5de:	4b15      	ldr	r3, [pc, #84]	; (800a634 <FATFS_LinkDriverEx+0x94>)
 800a5e0:	7a5b      	ldrb	r3, [r3, #9]
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	4b13      	ldr	r3, [pc, #76]	; (800a634 <FATFS_LinkDriverEx+0x94>)
 800a5e8:	4413      	add	r3, r2
 800a5ea:	79fa      	ldrb	r2, [r7, #7]
 800a5ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a5ee:	4b11      	ldr	r3, [pc, #68]	; (800a634 <FATFS_LinkDriverEx+0x94>)
 800a5f0:	7a5b      	ldrb	r3, [r3, #9]
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	1c5a      	adds	r2, r3, #1
 800a5f6:	b2d1      	uxtb	r1, r2
 800a5f8:	4a0e      	ldr	r2, [pc, #56]	; (800a634 <FATFS_LinkDriverEx+0x94>)
 800a5fa:	7251      	strb	r1, [r2, #9]
 800a5fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a5fe:	7dbb      	ldrb	r3, [r7, #22]
 800a600:	3330      	adds	r3, #48	; 0x30
 800a602:	b2da      	uxtb	r2, r3
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	3301      	adds	r3, #1
 800a60c:	223a      	movs	r2, #58	; 0x3a
 800a60e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	3302      	adds	r3, #2
 800a614:	222f      	movs	r2, #47	; 0x2f
 800a616:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	3303      	adds	r3, #3
 800a61c:	2200      	movs	r2, #0
 800a61e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a620:	2300      	movs	r3, #0
 800a622:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a624:	7dfb      	ldrb	r3, [r7, #23]
}
 800a626:	4618      	mov	r0, r3
 800a628:	371c      	adds	r7, #28
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	20002a10 	.word	0x20002a10

0800a638 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a642:	2200      	movs	r2, #0
 800a644:	6839      	ldr	r1, [r7, #0]
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f7ff ffaa 	bl	800a5a0 <FATFS_LinkDriverEx>
 800a64c:	4603      	mov	r3, r0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3708      	adds	r7, #8
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}

0800a656 <atoi>:
 800a656:	220a      	movs	r2, #10
 800a658:	2100      	movs	r1, #0
 800a65a:	f001 bf25 	b.w	800c4a8 <strtol>
	...

0800a660 <__errno>:
 800a660:	4b01      	ldr	r3, [pc, #4]	; (800a668 <__errno+0x8>)
 800a662:	6818      	ldr	r0, [r3, #0]
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	20000034 	.word	0x20000034

0800a66c <__libc_init_array>:
 800a66c:	b570      	push	{r4, r5, r6, lr}
 800a66e:	4d0d      	ldr	r5, [pc, #52]	; (800a6a4 <__libc_init_array+0x38>)
 800a670:	4c0d      	ldr	r4, [pc, #52]	; (800a6a8 <__libc_init_array+0x3c>)
 800a672:	1b64      	subs	r4, r4, r5
 800a674:	10a4      	asrs	r4, r4, #2
 800a676:	2600      	movs	r6, #0
 800a678:	42a6      	cmp	r6, r4
 800a67a:	d109      	bne.n	800a690 <__libc_init_array+0x24>
 800a67c:	4d0b      	ldr	r5, [pc, #44]	; (800a6ac <__libc_init_array+0x40>)
 800a67e:	4c0c      	ldr	r4, [pc, #48]	; (800a6b0 <__libc_init_array+0x44>)
 800a680:	f004 fd8a 	bl	800f198 <_init>
 800a684:	1b64      	subs	r4, r4, r5
 800a686:	10a4      	asrs	r4, r4, #2
 800a688:	2600      	movs	r6, #0
 800a68a:	42a6      	cmp	r6, r4
 800a68c:	d105      	bne.n	800a69a <__libc_init_array+0x2e>
 800a68e:	bd70      	pop	{r4, r5, r6, pc}
 800a690:	f855 3b04 	ldr.w	r3, [r5], #4
 800a694:	4798      	blx	r3
 800a696:	3601      	adds	r6, #1
 800a698:	e7ee      	b.n	800a678 <__libc_init_array+0xc>
 800a69a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a69e:	4798      	blx	r3
 800a6a0:	3601      	adds	r6, #1
 800a6a2:	e7f2      	b.n	800a68a <__libc_init_array+0x1e>
 800a6a4:	0800fb78 	.word	0x0800fb78
 800a6a8:	0800fb78 	.word	0x0800fb78
 800a6ac:	0800fb78 	.word	0x0800fb78
 800a6b0:	0800fb7c 	.word	0x0800fb7c

0800a6b4 <__itoa>:
 800a6b4:	1e93      	subs	r3, r2, #2
 800a6b6:	2b22      	cmp	r3, #34	; 0x22
 800a6b8:	b510      	push	{r4, lr}
 800a6ba:	460c      	mov	r4, r1
 800a6bc:	d904      	bls.n	800a6c8 <__itoa+0x14>
 800a6be:	2300      	movs	r3, #0
 800a6c0:	700b      	strb	r3, [r1, #0]
 800a6c2:	461c      	mov	r4, r3
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	bd10      	pop	{r4, pc}
 800a6c8:	2a0a      	cmp	r2, #10
 800a6ca:	d109      	bne.n	800a6e0 <__itoa+0x2c>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	da07      	bge.n	800a6e0 <__itoa+0x2c>
 800a6d0:	232d      	movs	r3, #45	; 0x2d
 800a6d2:	700b      	strb	r3, [r1, #0]
 800a6d4:	4240      	negs	r0, r0
 800a6d6:	2101      	movs	r1, #1
 800a6d8:	4421      	add	r1, r4
 800a6da:	f001 feef 	bl	800c4bc <__utoa>
 800a6de:	e7f1      	b.n	800a6c4 <__itoa+0x10>
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	e7f9      	b.n	800a6d8 <__itoa+0x24>

0800a6e4 <itoa>:
 800a6e4:	f7ff bfe6 	b.w	800a6b4 <__itoa>

0800a6e8 <malloc>:
 800a6e8:	4b02      	ldr	r3, [pc, #8]	; (800a6f4 <malloc+0xc>)
 800a6ea:	4601      	mov	r1, r0
 800a6ec:	6818      	ldr	r0, [r3, #0]
 800a6ee:	f000 b877 	b.w	800a7e0 <_malloc_r>
 800a6f2:	bf00      	nop
 800a6f4:	20000034 	.word	0x20000034

0800a6f8 <memset>:
 800a6f8:	4402      	add	r2, r0
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d100      	bne.n	800a702 <memset+0xa>
 800a700:	4770      	bx	lr
 800a702:	f803 1b01 	strb.w	r1, [r3], #1
 800a706:	e7f9      	b.n	800a6fc <memset+0x4>

0800a708 <_free_r>:
 800a708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a70a:	2900      	cmp	r1, #0
 800a70c:	d044      	beq.n	800a798 <_free_r+0x90>
 800a70e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a712:	9001      	str	r0, [sp, #4]
 800a714:	2b00      	cmp	r3, #0
 800a716:	f1a1 0404 	sub.w	r4, r1, #4
 800a71a:	bfb8      	it	lt
 800a71c:	18e4      	addlt	r4, r4, r3
 800a71e:	f003 f94f 	bl	800d9c0 <__malloc_lock>
 800a722:	4a1e      	ldr	r2, [pc, #120]	; (800a79c <_free_r+0x94>)
 800a724:	9801      	ldr	r0, [sp, #4]
 800a726:	6813      	ldr	r3, [r2, #0]
 800a728:	b933      	cbnz	r3, 800a738 <_free_r+0x30>
 800a72a:	6063      	str	r3, [r4, #4]
 800a72c:	6014      	str	r4, [r2, #0]
 800a72e:	b003      	add	sp, #12
 800a730:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a734:	f003 b94a 	b.w	800d9cc <__malloc_unlock>
 800a738:	42a3      	cmp	r3, r4
 800a73a:	d908      	bls.n	800a74e <_free_r+0x46>
 800a73c:	6825      	ldr	r5, [r4, #0]
 800a73e:	1961      	adds	r1, r4, r5
 800a740:	428b      	cmp	r3, r1
 800a742:	bf01      	itttt	eq
 800a744:	6819      	ldreq	r1, [r3, #0]
 800a746:	685b      	ldreq	r3, [r3, #4]
 800a748:	1949      	addeq	r1, r1, r5
 800a74a:	6021      	streq	r1, [r4, #0]
 800a74c:	e7ed      	b.n	800a72a <_free_r+0x22>
 800a74e:	461a      	mov	r2, r3
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	b10b      	cbz	r3, 800a758 <_free_r+0x50>
 800a754:	42a3      	cmp	r3, r4
 800a756:	d9fa      	bls.n	800a74e <_free_r+0x46>
 800a758:	6811      	ldr	r1, [r2, #0]
 800a75a:	1855      	adds	r5, r2, r1
 800a75c:	42a5      	cmp	r5, r4
 800a75e:	d10b      	bne.n	800a778 <_free_r+0x70>
 800a760:	6824      	ldr	r4, [r4, #0]
 800a762:	4421      	add	r1, r4
 800a764:	1854      	adds	r4, r2, r1
 800a766:	42a3      	cmp	r3, r4
 800a768:	6011      	str	r1, [r2, #0]
 800a76a:	d1e0      	bne.n	800a72e <_free_r+0x26>
 800a76c:	681c      	ldr	r4, [r3, #0]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	6053      	str	r3, [r2, #4]
 800a772:	4421      	add	r1, r4
 800a774:	6011      	str	r1, [r2, #0]
 800a776:	e7da      	b.n	800a72e <_free_r+0x26>
 800a778:	d902      	bls.n	800a780 <_free_r+0x78>
 800a77a:	230c      	movs	r3, #12
 800a77c:	6003      	str	r3, [r0, #0]
 800a77e:	e7d6      	b.n	800a72e <_free_r+0x26>
 800a780:	6825      	ldr	r5, [r4, #0]
 800a782:	1961      	adds	r1, r4, r5
 800a784:	428b      	cmp	r3, r1
 800a786:	bf04      	itt	eq
 800a788:	6819      	ldreq	r1, [r3, #0]
 800a78a:	685b      	ldreq	r3, [r3, #4]
 800a78c:	6063      	str	r3, [r4, #4]
 800a78e:	bf04      	itt	eq
 800a790:	1949      	addeq	r1, r1, r5
 800a792:	6021      	streq	r1, [r4, #0]
 800a794:	6054      	str	r4, [r2, #4]
 800a796:	e7ca      	b.n	800a72e <_free_r+0x26>
 800a798:	b003      	add	sp, #12
 800a79a:	bd30      	pop	{r4, r5, pc}
 800a79c:	20002a1c 	.word	0x20002a1c

0800a7a0 <sbrk_aligned>:
 800a7a0:	b570      	push	{r4, r5, r6, lr}
 800a7a2:	4e0e      	ldr	r6, [pc, #56]	; (800a7dc <sbrk_aligned+0x3c>)
 800a7a4:	460c      	mov	r4, r1
 800a7a6:	6831      	ldr	r1, [r6, #0]
 800a7a8:	4605      	mov	r5, r0
 800a7aa:	b911      	cbnz	r1, 800a7b2 <sbrk_aligned+0x12>
 800a7ac:	f000 ff06 	bl	800b5bc <_sbrk_r>
 800a7b0:	6030      	str	r0, [r6, #0]
 800a7b2:	4621      	mov	r1, r4
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	f000 ff01 	bl	800b5bc <_sbrk_r>
 800a7ba:	1c43      	adds	r3, r0, #1
 800a7bc:	d00a      	beq.n	800a7d4 <sbrk_aligned+0x34>
 800a7be:	1cc4      	adds	r4, r0, #3
 800a7c0:	f024 0403 	bic.w	r4, r4, #3
 800a7c4:	42a0      	cmp	r0, r4
 800a7c6:	d007      	beq.n	800a7d8 <sbrk_aligned+0x38>
 800a7c8:	1a21      	subs	r1, r4, r0
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	f000 fef6 	bl	800b5bc <_sbrk_r>
 800a7d0:	3001      	adds	r0, #1
 800a7d2:	d101      	bne.n	800a7d8 <sbrk_aligned+0x38>
 800a7d4:	f04f 34ff 	mov.w	r4, #4294967295
 800a7d8:	4620      	mov	r0, r4
 800a7da:	bd70      	pop	{r4, r5, r6, pc}
 800a7dc:	20002a20 	.word	0x20002a20

0800a7e0 <_malloc_r>:
 800a7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7e4:	1ccd      	adds	r5, r1, #3
 800a7e6:	f025 0503 	bic.w	r5, r5, #3
 800a7ea:	3508      	adds	r5, #8
 800a7ec:	2d0c      	cmp	r5, #12
 800a7ee:	bf38      	it	cc
 800a7f0:	250c      	movcc	r5, #12
 800a7f2:	2d00      	cmp	r5, #0
 800a7f4:	4607      	mov	r7, r0
 800a7f6:	db01      	blt.n	800a7fc <_malloc_r+0x1c>
 800a7f8:	42a9      	cmp	r1, r5
 800a7fa:	d905      	bls.n	800a808 <_malloc_r+0x28>
 800a7fc:	230c      	movs	r3, #12
 800a7fe:	603b      	str	r3, [r7, #0]
 800a800:	2600      	movs	r6, #0
 800a802:	4630      	mov	r0, r6
 800a804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a808:	4e2e      	ldr	r6, [pc, #184]	; (800a8c4 <_malloc_r+0xe4>)
 800a80a:	f003 f8d9 	bl	800d9c0 <__malloc_lock>
 800a80e:	6833      	ldr	r3, [r6, #0]
 800a810:	461c      	mov	r4, r3
 800a812:	bb34      	cbnz	r4, 800a862 <_malloc_r+0x82>
 800a814:	4629      	mov	r1, r5
 800a816:	4638      	mov	r0, r7
 800a818:	f7ff ffc2 	bl	800a7a0 <sbrk_aligned>
 800a81c:	1c43      	adds	r3, r0, #1
 800a81e:	4604      	mov	r4, r0
 800a820:	d14d      	bne.n	800a8be <_malloc_r+0xde>
 800a822:	6834      	ldr	r4, [r6, #0]
 800a824:	4626      	mov	r6, r4
 800a826:	2e00      	cmp	r6, #0
 800a828:	d140      	bne.n	800a8ac <_malloc_r+0xcc>
 800a82a:	6823      	ldr	r3, [r4, #0]
 800a82c:	4631      	mov	r1, r6
 800a82e:	4638      	mov	r0, r7
 800a830:	eb04 0803 	add.w	r8, r4, r3
 800a834:	f000 fec2 	bl	800b5bc <_sbrk_r>
 800a838:	4580      	cmp	r8, r0
 800a83a:	d13a      	bne.n	800a8b2 <_malloc_r+0xd2>
 800a83c:	6821      	ldr	r1, [r4, #0]
 800a83e:	3503      	adds	r5, #3
 800a840:	1a6d      	subs	r5, r5, r1
 800a842:	f025 0503 	bic.w	r5, r5, #3
 800a846:	3508      	adds	r5, #8
 800a848:	2d0c      	cmp	r5, #12
 800a84a:	bf38      	it	cc
 800a84c:	250c      	movcc	r5, #12
 800a84e:	4629      	mov	r1, r5
 800a850:	4638      	mov	r0, r7
 800a852:	f7ff ffa5 	bl	800a7a0 <sbrk_aligned>
 800a856:	3001      	adds	r0, #1
 800a858:	d02b      	beq.n	800a8b2 <_malloc_r+0xd2>
 800a85a:	6823      	ldr	r3, [r4, #0]
 800a85c:	442b      	add	r3, r5
 800a85e:	6023      	str	r3, [r4, #0]
 800a860:	e00e      	b.n	800a880 <_malloc_r+0xa0>
 800a862:	6822      	ldr	r2, [r4, #0]
 800a864:	1b52      	subs	r2, r2, r5
 800a866:	d41e      	bmi.n	800a8a6 <_malloc_r+0xc6>
 800a868:	2a0b      	cmp	r2, #11
 800a86a:	d916      	bls.n	800a89a <_malloc_r+0xba>
 800a86c:	1961      	adds	r1, r4, r5
 800a86e:	42a3      	cmp	r3, r4
 800a870:	6025      	str	r5, [r4, #0]
 800a872:	bf18      	it	ne
 800a874:	6059      	strne	r1, [r3, #4]
 800a876:	6863      	ldr	r3, [r4, #4]
 800a878:	bf08      	it	eq
 800a87a:	6031      	streq	r1, [r6, #0]
 800a87c:	5162      	str	r2, [r4, r5]
 800a87e:	604b      	str	r3, [r1, #4]
 800a880:	4638      	mov	r0, r7
 800a882:	f104 060b 	add.w	r6, r4, #11
 800a886:	f003 f8a1 	bl	800d9cc <__malloc_unlock>
 800a88a:	f026 0607 	bic.w	r6, r6, #7
 800a88e:	1d23      	adds	r3, r4, #4
 800a890:	1af2      	subs	r2, r6, r3
 800a892:	d0b6      	beq.n	800a802 <_malloc_r+0x22>
 800a894:	1b9b      	subs	r3, r3, r6
 800a896:	50a3      	str	r3, [r4, r2]
 800a898:	e7b3      	b.n	800a802 <_malloc_r+0x22>
 800a89a:	6862      	ldr	r2, [r4, #4]
 800a89c:	42a3      	cmp	r3, r4
 800a89e:	bf0c      	ite	eq
 800a8a0:	6032      	streq	r2, [r6, #0]
 800a8a2:	605a      	strne	r2, [r3, #4]
 800a8a4:	e7ec      	b.n	800a880 <_malloc_r+0xa0>
 800a8a6:	4623      	mov	r3, r4
 800a8a8:	6864      	ldr	r4, [r4, #4]
 800a8aa:	e7b2      	b.n	800a812 <_malloc_r+0x32>
 800a8ac:	4634      	mov	r4, r6
 800a8ae:	6876      	ldr	r6, [r6, #4]
 800a8b0:	e7b9      	b.n	800a826 <_malloc_r+0x46>
 800a8b2:	230c      	movs	r3, #12
 800a8b4:	603b      	str	r3, [r7, #0]
 800a8b6:	4638      	mov	r0, r7
 800a8b8:	f003 f888 	bl	800d9cc <__malloc_unlock>
 800a8bc:	e7a1      	b.n	800a802 <_malloc_r+0x22>
 800a8be:	6025      	str	r5, [r4, #0]
 800a8c0:	e7de      	b.n	800a880 <_malloc_r+0xa0>
 800a8c2:	bf00      	nop
 800a8c4:	20002a1c 	.word	0x20002a1c

0800a8c8 <__cvt>:
 800a8c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8cc:	ec55 4b10 	vmov	r4, r5, d0
 800a8d0:	2d00      	cmp	r5, #0
 800a8d2:	460e      	mov	r6, r1
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	462b      	mov	r3, r5
 800a8d8:	bfbb      	ittet	lt
 800a8da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a8de:	461d      	movlt	r5, r3
 800a8e0:	2300      	movge	r3, #0
 800a8e2:	232d      	movlt	r3, #45	; 0x2d
 800a8e4:	700b      	strb	r3, [r1, #0]
 800a8e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a8ec:	4691      	mov	r9, r2
 800a8ee:	f023 0820 	bic.w	r8, r3, #32
 800a8f2:	bfbc      	itt	lt
 800a8f4:	4622      	movlt	r2, r4
 800a8f6:	4614      	movlt	r4, r2
 800a8f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8fc:	d005      	beq.n	800a90a <__cvt+0x42>
 800a8fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a902:	d100      	bne.n	800a906 <__cvt+0x3e>
 800a904:	3601      	adds	r6, #1
 800a906:	2102      	movs	r1, #2
 800a908:	e000      	b.n	800a90c <__cvt+0x44>
 800a90a:	2103      	movs	r1, #3
 800a90c:	ab03      	add	r3, sp, #12
 800a90e:	9301      	str	r3, [sp, #4]
 800a910:	ab02      	add	r3, sp, #8
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	ec45 4b10 	vmov	d0, r4, r5
 800a918:	4653      	mov	r3, sl
 800a91a:	4632      	mov	r2, r6
 800a91c:	f001 febc 	bl	800c698 <_dtoa_r>
 800a920:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a924:	4607      	mov	r7, r0
 800a926:	d102      	bne.n	800a92e <__cvt+0x66>
 800a928:	f019 0f01 	tst.w	r9, #1
 800a92c:	d022      	beq.n	800a974 <__cvt+0xac>
 800a92e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a932:	eb07 0906 	add.w	r9, r7, r6
 800a936:	d110      	bne.n	800a95a <__cvt+0x92>
 800a938:	783b      	ldrb	r3, [r7, #0]
 800a93a:	2b30      	cmp	r3, #48	; 0x30
 800a93c:	d10a      	bne.n	800a954 <__cvt+0x8c>
 800a93e:	2200      	movs	r2, #0
 800a940:	2300      	movs	r3, #0
 800a942:	4620      	mov	r0, r4
 800a944:	4629      	mov	r1, r5
 800a946:	f7f6 f8bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800a94a:	b918      	cbnz	r0, 800a954 <__cvt+0x8c>
 800a94c:	f1c6 0601 	rsb	r6, r6, #1
 800a950:	f8ca 6000 	str.w	r6, [sl]
 800a954:	f8da 3000 	ldr.w	r3, [sl]
 800a958:	4499      	add	r9, r3
 800a95a:	2200      	movs	r2, #0
 800a95c:	2300      	movs	r3, #0
 800a95e:	4620      	mov	r0, r4
 800a960:	4629      	mov	r1, r5
 800a962:	f7f6 f8b1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a966:	b108      	cbz	r0, 800a96c <__cvt+0xa4>
 800a968:	f8cd 900c 	str.w	r9, [sp, #12]
 800a96c:	2230      	movs	r2, #48	; 0x30
 800a96e:	9b03      	ldr	r3, [sp, #12]
 800a970:	454b      	cmp	r3, r9
 800a972:	d307      	bcc.n	800a984 <__cvt+0xbc>
 800a974:	9b03      	ldr	r3, [sp, #12]
 800a976:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a978:	1bdb      	subs	r3, r3, r7
 800a97a:	4638      	mov	r0, r7
 800a97c:	6013      	str	r3, [r2, #0]
 800a97e:	b004      	add	sp, #16
 800a980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a984:	1c59      	adds	r1, r3, #1
 800a986:	9103      	str	r1, [sp, #12]
 800a988:	701a      	strb	r2, [r3, #0]
 800a98a:	e7f0      	b.n	800a96e <__cvt+0xa6>

0800a98c <__exponent>:
 800a98c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a98e:	4603      	mov	r3, r0
 800a990:	2900      	cmp	r1, #0
 800a992:	bfb8      	it	lt
 800a994:	4249      	neglt	r1, r1
 800a996:	f803 2b02 	strb.w	r2, [r3], #2
 800a99a:	bfb4      	ite	lt
 800a99c:	222d      	movlt	r2, #45	; 0x2d
 800a99e:	222b      	movge	r2, #43	; 0x2b
 800a9a0:	2909      	cmp	r1, #9
 800a9a2:	7042      	strb	r2, [r0, #1]
 800a9a4:	dd2a      	ble.n	800a9fc <__exponent+0x70>
 800a9a6:	f10d 0407 	add.w	r4, sp, #7
 800a9aa:	46a4      	mov	ip, r4
 800a9ac:	270a      	movs	r7, #10
 800a9ae:	46a6      	mov	lr, r4
 800a9b0:	460a      	mov	r2, r1
 800a9b2:	fb91 f6f7 	sdiv	r6, r1, r7
 800a9b6:	fb07 1516 	mls	r5, r7, r6, r1
 800a9ba:	3530      	adds	r5, #48	; 0x30
 800a9bc:	2a63      	cmp	r2, #99	; 0x63
 800a9be:	f104 34ff 	add.w	r4, r4, #4294967295
 800a9c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a9c6:	4631      	mov	r1, r6
 800a9c8:	dcf1      	bgt.n	800a9ae <__exponent+0x22>
 800a9ca:	3130      	adds	r1, #48	; 0x30
 800a9cc:	f1ae 0502 	sub.w	r5, lr, #2
 800a9d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a9d4:	1c44      	adds	r4, r0, #1
 800a9d6:	4629      	mov	r1, r5
 800a9d8:	4561      	cmp	r1, ip
 800a9da:	d30a      	bcc.n	800a9f2 <__exponent+0x66>
 800a9dc:	f10d 0209 	add.w	r2, sp, #9
 800a9e0:	eba2 020e 	sub.w	r2, r2, lr
 800a9e4:	4565      	cmp	r5, ip
 800a9e6:	bf88      	it	hi
 800a9e8:	2200      	movhi	r2, #0
 800a9ea:	4413      	add	r3, r2
 800a9ec:	1a18      	subs	r0, r3, r0
 800a9ee:	b003      	add	sp, #12
 800a9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a9fa:	e7ed      	b.n	800a9d8 <__exponent+0x4c>
 800a9fc:	2330      	movs	r3, #48	; 0x30
 800a9fe:	3130      	adds	r1, #48	; 0x30
 800aa00:	7083      	strb	r3, [r0, #2]
 800aa02:	70c1      	strb	r1, [r0, #3]
 800aa04:	1d03      	adds	r3, r0, #4
 800aa06:	e7f1      	b.n	800a9ec <__exponent+0x60>

0800aa08 <_printf_float>:
 800aa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa0c:	ed2d 8b02 	vpush	{d8}
 800aa10:	b08d      	sub	sp, #52	; 0x34
 800aa12:	460c      	mov	r4, r1
 800aa14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aa18:	4616      	mov	r6, r2
 800aa1a:	461f      	mov	r7, r3
 800aa1c:	4605      	mov	r5, r0
 800aa1e:	f002 ffab 	bl	800d978 <_localeconv_r>
 800aa22:	f8d0 a000 	ldr.w	sl, [r0]
 800aa26:	4650      	mov	r0, sl
 800aa28:	f7f5 fbd2 	bl	80001d0 <strlen>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	930a      	str	r3, [sp, #40]	; 0x28
 800aa30:	6823      	ldr	r3, [r4, #0]
 800aa32:	9305      	str	r3, [sp, #20]
 800aa34:	f8d8 3000 	ldr.w	r3, [r8]
 800aa38:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aa3c:	3307      	adds	r3, #7
 800aa3e:	f023 0307 	bic.w	r3, r3, #7
 800aa42:	f103 0208 	add.w	r2, r3, #8
 800aa46:	f8c8 2000 	str.w	r2, [r8]
 800aa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aa52:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aa56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa5a:	9307      	str	r3, [sp, #28]
 800aa5c:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa60:	ee08 0a10 	vmov	s16, r0
 800aa64:	4b9f      	ldr	r3, [pc, #636]	; (800ace4 <_printf_float+0x2dc>)
 800aa66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa6a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa6e:	f7f6 f85d 	bl	8000b2c <__aeabi_dcmpun>
 800aa72:	bb88      	cbnz	r0, 800aad8 <_printf_float+0xd0>
 800aa74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa78:	4b9a      	ldr	r3, [pc, #616]	; (800ace4 <_printf_float+0x2dc>)
 800aa7a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa7e:	f7f6 f837 	bl	8000af0 <__aeabi_dcmple>
 800aa82:	bb48      	cbnz	r0, 800aad8 <_printf_float+0xd0>
 800aa84:	2200      	movs	r2, #0
 800aa86:	2300      	movs	r3, #0
 800aa88:	4640      	mov	r0, r8
 800aa8a:	4649      	mov	r1, r9
 800aa8c:	f7f6 f826 	bl	8000adc <__aeabi_dcmplt>
 800aa90:	b110      	cbz	r0, 800aa98 <_printf_float+0x90>
 800aa92:	232d      	movs	r3, #45	; 0x2d
 800aa94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa98:	4b93      	ldr	r3, [pc, #588]	; (800ace8 <_printf_float+0x2e0>)
 800aa9a:	4894      	ldr	r0, [pc, #592]	; (800acec <_printf_float+0x2e4>)
 800aa9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aaa0:	bf94      	ite	ls
 800aaa2:	4698      	movls	r8, r3
 800aaa4:	4680      	movhi	r8, r0
 800aaa6:	2303      	movs	r3, #3
 800aaa8:	6123      	str	r3, [r4, #16]
 800aaaa:	9b05      	ldr	r3, [sp, #20]
 800aaac:	f023 0204 	bic.w	r2, r3, #4
 800aab0:	6022      	str	r2, [r4, #0]
 800aab2:	f04f 0900 	mov.w	r9, #0
 800aab6:	9700      	str	r7, [sp, #0]
 800aab8:	4633      	mov	r3, r6
 800aaba:	aa0b      	add	r2, sp, #44	; 0x2c
 800aabc:	4621      	mov	r1, r4
 800aabe:	4628      	mov	r0, r5
 800aac0:	f000 f9d8 	bl	800ae74 <_printf_common>
 800aac4:	3001      	adds	r0, #1
 800aac6:	f040 8090 	bne.w	800abea <_printf_float+0x1e2>
 800aaca:	f04f 30ff 	mov.w	r0, #4294967295
 800aace:	b00d      	add	sp, #52	; 0x34
 800aad0:	ecbd 8b02 	vpop	{d8}
 800aad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aad8:	4642      	mov	r2, r8
 800aada:	464b      	mov	r3, r9
 800aadc:	4640      	mov	r0, r8
 800aade:	4649      	mov	r1, r9
 800aae0:	f7f6 f824 	bl	8000b2c <__aeabi_dcmpun>
 800aae4:	b140      	cbz	r0, 800aaf8 <_printf_float+0xf0>
 800aae6:	464b      	mov	r3, r9
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	bfbc      	itt	lt
 800aaec:	232d      	movlt	r3, #45	; 0x2d
 800aaee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aaf2:	487f      	ldr	r0, [pc, #508]	; (800acf0 <_printf_float+0x2e8>)
 800aaf4:	4b7f      	ldr	r3, [pc, #508]	; (800acf4 <_printf_float+0x2ec>)
 800aaf6:	e7d1      	b.n	800aa9c <_printf_float+0x94>
 800aaf8:	6863      	ldr	r3, [r4, #4]
 800aafa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aafe:	9206      	str	r2, [sp, #24]
 800ab00:	1c5a      	adds	r2, r3, #1
 800ab02:	d13f      	bne.n	800ab84 <_printf_float+0x17c>
 800ab04:	2306      	movs	r3, #6
 800ab06:	6063      	str	r3, [r4, #4]
 800ab08:	9b05      	ldr	r3, [sp, #20]
 800ab0a:	6861      	ldr	r1, [r4, #4]
 800ab0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ab10:	2300      	movs	r3, #0
 800ab12:	9303      	str	r3, [sp, #12]
 800ab14:	ab0a      	add	r3, sp, #40	; 0x28
 800ab16:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ab1a:	ab09      	add	r3, sp, #36	; 0x24
 800ab1c:	ec49 8b10 	vmov	d0, r8, r9
 800ab20:	9300      	str	r3, [sp, #0]
 800ab22:	6022      	str	r2, [r4, #0]
 800ab24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ab28:	4628      	mov	r0, r5
 800ab2a:	f7ff fecd 	bl	800a8c8 <__cvt>
 800ab2e:	9b06      	ldr	r3, [sp, #24]
 800ab30:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab32:	2b47      	cmp	r3, #71	; 0x47
 800ab34:	4680      	mov	r8, r0
 800ab36:	d108      	bne.n	800ab4a <_printf_float+0x142>
 800ab38:	1cc8      	adds	r0, r1, #3
 800ab3a:	db02      	blt.n	800ab42 <_printf_float+0x13a>
 800ab3c:	6863      	ldr	r3, [r4, #4]
 800ab3e:	4299      	cmp	r1, r3
 800ab40:	dd41      	ble.n	800abc6 <_printf_float+0x1be>
 800ab42:	f1ab 0b02 	sub.w	fp, fp, #2
 800ab46:	fa5f fb8b 	uxtb.w	fp, fp
 800ab4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab4e:	d820      	bhi.n	800ab92 <_printf_float+0x18a>
 800ab50:	3901      	subs	r1, #1
 800ab52:	465a      	mov	r2, fp
 800ab54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ab58:	9109      	str	r1, [sp, #36]	; 0x24
 800ab5a:	f7ff ff17 	bl	800a98c <__exponent>
 800ab5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab60:	1813      	adds	r3, r2, r0
 800ab62:	2a01      	cmp	r2, #1
 800ab64:	4681      	mov	r9, r0
 800ab66:	6123      	str	r3, [r4, #16]
 800ab68:	dc02      	bgt.n	800ab70 <_printf_float+0x168>
 800ab6a:	6822      	ldr	r2, [r4, #0]
 800ab6c:	07d2      	lsls	r2, r2, #31
 800ab6e:	d501      	bpl.n	800ab74 <_printf_float+0x16c>
 800ab70:	3301      	adds	r3, #1
 800ab72:	6123      	str	r3, [r4, #16]
 800ab74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d09c      	beq.n	800aab6 <_printf_float+0xae>
 800ab7c:	232d      	movs	r3, #45	; 0x2d
 800ab7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab82:	e798      	b.n	800aab6 <_printf_float+0xae>
 800ab84:	9a06      	ldr	r2, [sp, #24]
 800ab86:	2a47      	cmp	r2, #71	; 0x47
 800ab88:	d1be      	bne.n	800ab08 <_printf_float+0x100>
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d1bc      	bne.n	800ab08 <_printf_float+0x100>
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e7b9      	b.n	800ab06 <_printf_float+0xfe>
 800ab92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ab96:	d118      	bne.n	800abca <_printf_float+0x1c2>
 800ab98:	2900      	cmp	r1, #0
 800ab9a:	6863      	ldr	r3, [r4, #4]
 800ab9c:	dd0b      	ble.n	800abb6 <_printf_float+0x1ae>
 800ab9e:	6121      	str	r1, [r4, #16]
 800aba0:	b913      	cbnz	r3, 800aba8 <_printf_float+0x1a0>
 800aba2:	6822      	ldr	r2, [r4, #0]
 800aba4:	07d0      	lsls	r0, r2, #31
 800aba6:	d502      	bpl.n	800abae <_printf_float+0x1a6>
 800aba8:	3301      	adds	r3, #1
 800abaa:	440b      	add	r3, r1
 800abac:	6123      	str	r3, [r4, #16]
 800abae:	65a1      	str	r1, [r4, #88]	; 0x58
 800abb0:	f04f 0900 	mov.w	r9, #0
 800abb4:	e7de      	b.n	800ab74 <_printf_float+0x16c>
 800abb6:	b913      	cbnz	r3, 800abbe <_printf_float+0x1b6>
 800abb8:	6822      	ldr	r2, [r4, #0]
 800abba:	07d2      	lsls	r2, r2, #31
 800abbc:	d501      	bpl.n	800abc2 <_printf_float+0x1ba>
 800abbe:	3302      	adds	r3, #2
 800abc0:	e7f4      	b.n	800abac <_printf_float+0x1a4>
 800abc2:	2301      	movs	r3, #1
 800abc4:	e7f2      	b.n	800abac <_printf_float+0x1a4>
 800abc6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800abca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abcc:	4299      	cmp	r1, r3
 800abce:	db05      	blt.n	800abdc <_printf_float+0x1d4>
 800abd0:	6823      	ldr	r3, [r4, #0]
 800abd2:	6121      	str	r1, [r4, #16]
 800abd4:	07d8      	lsls	r0, r3, #31
 800abd6:	d5ea      	bpl.n	800abae <_printf_float+0x1a6>
 800abd8:	1c4b      	adds	r3, r1, #1
 800abda:	e7e7      	b.n	800abac <_printf_float+0x1a4>
 800abdc:	2900      	cmp	r1, #0
 800abde:	bfd4      	ite	le
 800abe0:	f1c1 0202 	rsble	r2, r1, #2
 800abe4:	2201      	movgt	r2, #1
 800abe6:	4413      	add	r3, r2
 800abe8:	e7e0      	b.n	800abac <_printf_float+0x1a4>
 800abea:	6823      	ldr	r3, [r4, #0]
 800abec:	055a      	lsls	r2, r3, #21
 800abee:	d407      	bmi.n	800ac00 <_printf_float+0x1f8>
 800abf0:	6923      	ldr	r3, [r4, #16]
 800abf2:	4642      	mov	r2, r8
 800abf4:	4631      	mov	r1, r6
 800abf6:	4628      	mov	r0, r5
 800abf8:	47b8      	blx	r7
 800abfa:	3001      	adds	r0, #1
 800abfc:	d12c      	bne.n	800ac58 <_printf_float+0x250>
 800abfe:	e764      	b.n	800aaca <_printf_float+0xc2>
 800ac00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ac04:	f240 80e0 	bls.w	800adc8 <_printf_float+0x3c0>
 800ac08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	2300      	movs	r3, #0
 800ac10:	f7f5 ff5a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	d034      	beq.n	800ac82 <_printf_float+0x27a>
 800ac18:	4a37      	ldr	r2, [pc, #220]	; (800acf8 <_printf_float+0x2f0>)
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	4631      	mov	r1, r6
 800ac1e:	4628      	mov	r0, r5
 800ac20:	47b8      	blx	r7
 800ac22:	3001      	adds	r0, #1
 800ac24:	f43f af51 	beq.w	800aaca <_printf_float+0xc2>
 800ac28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	db02      	blt.n	800ac36 <_printf_float+0x22e>
 800ac30:	6823      	ldr	r3, [r4, #0]
 800ac32:	07d8      	lsls	r0, r3, #31
 800ac34:	d510      	bpl.n	800ac58 <_printf_float+0x250>
 800ac36:	ee18 3a10 	vmov	r3, s16
 800ac3a:	4652      	mov	r2, sl
 800ac3c:	4631      	mov	r1, r6
 800ac3e:	4628      	mov	r0, r5
 800ac40:	47b8      	blx	r7
 800ac42:	3001      	adds	r0, #1
 800ac44:	f43f af41 	beq.w	800aaca <_printf_float+0xc2>
 800ac48:	f04f 0800 	mov.w	r8, #0
 800ac4c:	f104 091a 	add.w	r9, r4, #26
 800ac50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac52:	3b01      	subs	r3, #1
 800ac54:	4543      	cmp	r3, r8
 800ac56:	dc09      	bgt.n	800ac6c <_printf_float+0x264>
 800ac58:	6823      	ldr	r3, [r4, #0]
 800ac5a:	079b      	lsls	r3, r3, #30
 800ac5c:	f100 8105 	bmi.w	800ae6a <_printf_float+0x462>
 800ac60:	68e0      	ldr	r0, [r4, #12]
 800ac62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac64:	4298      	cmp	r0, r3
 800ac66:	bfb8      	it	lt
 800ac68:	4618      	movlt	r0, r3
 800ac6a:	e730      	b.n	800aace <_printf_float+0xc6>
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	464a      	mov	r2, r9
 800ac70:	4631      	mov	r1, r6
 800ac72:	4628      	mov	r0, r5
 800ac74:	47b8      	blx	r7
 800ac76:	3001      	adds	r0, #1
 800ac78:	f43f af27 	beq.w	800aaca <_printf_float+0xc2>
 800ac7c:	f108 0801 	add.w	r8, r8, #1
 800ac80:	e7e6      	b.n	800ac50 <_printf_float+0x248>
 800ac82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	dc39      	bgt.n	800acfc <_printf_float+0x2f4>
 800ac88:	4a1b      	ldr	r2, [pc, #108]	; (800acf8 <_printf_float+0x2f0>)
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	4631      	mov	r1, r6
 800ac8e:	4628      	mov	r0, r5
 800ac90:	47b8      	blx	r7
 800ac92:	3001      	adds	r0, #1
 800ac94:	f43f af19 	beq.w	800aaca <_printf_float+0xc2>
 800ac98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	d102      	bne.n	800aca6 <_printf_float+0x29e>
 800aca0:	6823      	ldr	r3, [r4, #0]
 800aca2:	07d9      	lsls	r1, r3, #31
 800aca4:	d5d8      	bpl.n	800ac58 <_printf_float+0x250>
 800aca6:	ee18 3a10 	vmov	r3, s16
 800acaa:	4652      	mov	r2, sl
 800acac:	4631      	mov	r1, r6
 800acae:	4628      	mov	r0, r5
 800acb0:	47b8      	blx	r7
 800acb2:	3001      	adds	r0, #1
 800acb4:	f43f af09 	beq.w	800aaca <_printf_float+0xc2>
 800acb8:	f04f 0900 	mov.w	r9, #0
 800acbc:	f104 0a1a 	add.w	sl, r4, #26
 800acc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acc2:	425b      	negs	r3, r3
 800acc4:	454b      	cmp	r3, r9
 800acc6:	dc01      	bgt.n	800accc <_printf_float+0x2c4>
 800acc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acca:	e792      	b.n	800abf2 <_printf_float+0x1ea>
 800accc:	2301      	movs	r3, #1
 800acce:	4652      	mov	r2, sl
 800acd0:	4631      	mov	r1, r6
 800acd2:	4628      	mov	r0, r5
 800acd4:	47b8      	blx	r7
 800acd6:	3001      	adds	r0, #1
 800acd8:	f43f aef7 	beq.w	800aaca <_printf_float+0xc2>
 800acdc:	f109 0901 	add.w	r9, r9, #1
 800ace0:	e7ee      	b.n	800acc0 <_printf_float+0x2b8>
 800ace2:	bf00      	nop
 800ace4:	7fefffff 	.word	0x7fefffff
 800ace8:	0800f64c 	.word	0x0800f64c
 800acec:	0800f650 	.word	0x0800f650
 800acf0:	0800f658 	.word	0x0800f658
 800acf4:	0800f654 	.word	0x0800f654
 800acf8:	0800f65c 	.word	0x0800f65c
 800acfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad00:	429a      	cmp	r2, r3
 800ad02:	bfa8      	it	ge
 800ad04:	461a      	movge	r2, r3
 800ad06:	2a00      	cmp	r2, #0
 800ad08:	4691      	mov	r9, r2
 800ad0a:	dc37      	bgt.n	800ad7c <_printf_float+0x374>
 800ad0c:	f04f 0b00 	mov.w	fp, #0
 800ad10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad14:	f104 021a 	add.w	r2, r4, #26
 800ad18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad1a:	9305      	str	r3, [sp, #20]
 800ad1c:	eba3 0309 	sub.w	r3, r3, r9
 800ad20:	455b      	cmp	r3, fp
 800ad22:	dc33      	bgt.n	800ad8c <_printf_float+0x384>
 800ad24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	db3b      	blt.n	800ada4 <_printf_float+0x39c>
 800ad2c:	6823      	ldr	r3, [r4, #0]
 800ad2e:	07da      	lsls	r2, r3, #31
 800ad30:	d438      	bmi.n	800ada4 <_printf_float+0x39c>
 800ad32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad34:	9a05      	ldr	r2, [sp, #20]
 800ad36:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad38:	1a9a      	subs	r2, r3, r2
 800ad3a:	eba3 0901 	sub.w	r9, r3, r1
 800ad3e:	4591      	cmp	r9, r2
 800ad40:	bfa8      	it	ge
 800ad42:	4691      	movge	r9, r2
 800ad44:	f1b9 0f00 	cmp.w	r9, #0
 800ad48:	dc35      	bgt.n	800adb6 <_printf_float+0x3ae>
 800ad4a:	f04f 0800 	mov.w	r8, #0
 800ad4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad52:	f104 0a1a 	add.w	sl, r4, #26
 800ad56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad5a:	1a9b      	subs	r3, r3, r2
 800ad5c:	eba3 0309 	sub.w	r3, r3, r9
 800ad60:	4543      	cmp	r3, r8
 800ad62:	f77f af79 	ble.w	800ac58 <_printf_float+0x250>
 800ad66:	2301      	movs	r3, #1
 800ad68:	4652      	mov	r2, sl
 800ad6a:	4631      	mov	r1, r6
 800ad6c:	4628      	mov	r0, r5
 800ad6e:	47b8      	blx	r7
 800ad70:	3001      	adds	r0, #1
 800ad72:	f43f aeaa 	beq.w	800aaca <_printf_float+0xc2>
 800ad76:	f108 0801 	add.w	r8, r8, #1
 800ad7a:	e7ec      	b.n	800ad56 <_printf_float+0x34e>
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	4631      	mov	r1, r6
 800ad80:	4642      	mov	r2, r8
 800ad82:	4628      	mov	r0, r5
 800ad84:	47b8      	blx	r7
 800ad86:	3001      	adds	r0, #1
 800ad88:	d1c0      	bne.n	800ad0c <_printf_float+0x304>
 800ad8a:	e69e      	b.n	800aaca <_printf_float+0xc2>
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	4631      	mov	r1, r6
 800ad90:	4628      	mov	r0, r5
 800ad92:	9205      	str	r2, [sp, #20]
 800ad94:	47b8      	blx	r7
 800ad96:	3001      	adds	r0, #1
 800ad98:	f43f ae97 	beq.w	800aaca <_printf_float+0xc2>
 800ad9c:	9a05      	ldr	r2, [sp, #20]
 800ad9e:	f10b 0b01 	add.w	fp, fp, #1
 800ada2:	e7b9      	b.n	800ad18 <_printf_float+0x310>
 800ada4:	ee18 3a10 	vmov	r3, s16
 800ada8:	4652      	mov	r2, sl
 800adaa:	4631      	mov	r1, r6
 800adac:	4628      	mov	r0, r5
 800adae:	47b8      	blx	r7
 800adb0:	3001      	adds	r0, #1
 800adb2:	d1be      	bne.n	800ad32 <_printf_float+0x32a>
 800adb4:	e689      	b.n	800aaca <_printf_float+0xc2>
 800adb6:	9a05      	ldr	r2, [sp, #20]
 800adb8:	464b      	mov	r3, r9
 800adba:	4442      	add	r2, r8
 800adbc:	4631      	mov	r1, r6
 800adbe:	4628      	mov	r0, r5
 800adc0:	47b8      	blx	r7
 800adc2:	3001      	adds	r0, #1
 800adc4:	d1c1      	bne.n	800ad4a <_printf_float+0x342>
 800adc6:	e680      	b.n	800aaca <_printf_float+0xc2>
 800adc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adca:	2a01      	cmp	r2, #1
 800adcc:	dc01      	bgt.n	800add2 <_printf_float+0x3ca>
 800adce:	07db      	lsls	r3, r3, #31
 800add0:	d538      	bpl.n	800ae44 <_printf_float+0x43c>
 800add2:	2301      	movs	r3, #1
 800add4:	4642      	mov	r2, r8
 800add6:	4631      	mov	r1, r6
 800add8:	4628      	mov	r0, r5
 800adda:	47b8      	blx	r7
 800addc:	3001      	adds	r0, #1
 800adde:	f43f ae74 	beq.w	800aaca <_printf_float+0xc2>
 800ade2:	ee18 3a10 	vmov	r3, s16
 800ade6:	4652      	mov	r2, sl
 800ade8:	4631      	mov	r1, r6
 800adea:	4628      	mov	r0, r5
 800adec:	47b8      	blx	r7
 800adee:	3001      	adds	r0, #1
 800adf0:	f43f ae6b 	beq.w	800aaca <_printf_float+0xc2>
 800adf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800adf8:	2200      	movs	r2, #0
 800adfa:	2300      	movs	r3, #0
 800adfc:	f7f5 fe64 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae00:	b9d8      	cbnz	r0, 800ae3a <_printf_float+0x432>
 800ae02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae04:	f108 0201 	add.w	r2, r8, #1
 800ae08:	3b01      	subs	r3, #1
 800ae0a:	4631      	mov	r1, r6
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	47b8      	blx	r7
 800ae10:	3001      	adds	r0, #1
 800ae12:	d10e      	bne.n	800ae32 <_printf_float+0x42a>
 800ae14:	e659      	b.n	800aaca <_printf_float+0xc2>
 800ae16:	2301      	movs	r3, #1
 800ae18:	4652      	mov	r2, sl
 800ae1a:	4631      	mov	r1, r6
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	47b8      	blx	r7
 800ae20:	3001      	adds	r0, #1
 800ae22:	f43f ae52 	beq.w	800aaca <_printf_float+0xc2>
 800ae26:	f108 0801 	add.w	r8, r8, #1
 800ae2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	4543      	cmp	r3, r8
 800ae30:	dcf1      	bgt.n	800ae16 <_printf_float+0x40e>
 800ae32:	464b      	mov	r3, r9
 800ae34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ae38:	e6dc      	b.n	800abf4 <_printf_float+0x1ec>
 800ae3a:	f04f 0800 	mov.w	r8, #0
 800ae3e:	f104 0a1a 	add.w	sl, r4, #26
 800ae42:	e7f2      	b.n	800ae2a <_printf_float+0x422>
 800ae44:	2301      	movs	r3, #1
 800ae46:	4642      	mov	r2, r8
 800ae48:	e7df      	b.n	800ae0a <_printf_float+0x402>
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	464a      	mov	r2, r9
 800ae4e:	4631      	mov	r1, r6
 800ae50:	4628      	mov	r0, r5
 800ae52:	47b8      	blx	r7
 800ae54:	3001      	adds	r0, #1
 800ae56:	f43f ae38 	beq.w	800aaca <_printf_float+0xc2>
 800ae5a:	f108 0801 	add.w	r8, r8, #1
 800ae5e:	68e3      	ldr	r3, [r4, #12]
 800ae60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae62:	1a5b      	subs	r3, r3, r1
 800ae64:	4543      	cmp	r3, r8
 800ae66:	dcf0      	bgt.n	800ae4a <_printf_float+0x442>
 800ae68:	e6fa      	b.n	800ac60 <_printf_float+0x258>
 800ae6a:	f04f 0800 	mov.w	r8, #0
 800ae6e:	f104 0919 	add.w	r9, r4, #25
 800ae72:	e7f4      	b.n	800ae5e <_printf_float+0x456>

0800ae74 <_printf_common>:
 800ae74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae78:	4616      	mov	r6, r2
 800ae7a:	4699      	mov	r9, r3
 800ae7c:	688a      	ldr	r2, [r1, #8]
 800ae7e:	690b      	ldr	r3, [r1, #16]
 800ae80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae84:	4293      	cmp	r3, r2
 800ae86:	bfb8      	it	lt
 800ae88:	4613      	movlt	r3, r2
 800ae8a:	6033      	str	r3, [r6, #0]
 800ae8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae90:	4607      	mov	r7, r0
 800ae92:	460c      	mov	r4, r1
 800ae94:	b10a      	cbz	r2, 800ae9a <_printf_common+0x26>
 800ae96:	3301      	adds	r3, #1
 800ae98:	6033      	str	r3, [r6, #0]
 800ae9a:	6823      	ldr	r3, [r4, #0]
 800ae9c:	0699      	lsls	r1, r3, #26
 800ae9e:	bf42      	ittt	mi
 800aea0:	6833      	ldrmi	r3, [r6, #0]
 800aea2:	3302      	addmi	r3, #2
 800aea4:	6033      	strmi	r3, [r6, #0]
 800aea6:	6825      	ldr	r5, [r4, #0]
 800aea8:	f015 0506 	ands.w	r5, r5, #6
 800aeac:	d106      	bne.n	800aebc <_printf_common+0x48>
 800aeae:	f104 0a19 	add.w	sl, r4, #25
 800aeb2:	68e3      	ldr	r3, [r4, #12]
 800aeb4:	6832      	ldr	r2, [r6, #0]
 800aeb6:	1a9b      	subs	r3, r3, r2
 800aeb8:	42ab      	cmp	r3, r5
 800aeba:	dc26      	bgt.n	800af0a <_printf_common+0x96>
 800aebc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aec0:	1e13      	subs	r3, r2, #0
 800aec2:	6822      	ldr	r2, [r4, #0]
 800aec4:	bf18      	it	ne
 800aec6:	2301      	movne	r3, #1
 800aec8:	0692      	lsls	r2, r2, #26
 800aeca:	d42b      	bmi.n	800af24 <_printf_common+0xb0>
 800aecc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aed0:	4649      	mov	r1, r9
 800aed2:	4638      	mov	r0, r7
 800aed4:	47c0      	blx	r8
 800aed6:	3001      	adds	r0, #1
 800aed8:	d01e      	beq.n	800af18 <_printf_common+0xa4>
 800aeda:	6823      	ldr	r3, [r4, #0]
 800aedc:	68e5      	ldr	r5, [r4, #12]
 800aede:	6832      	ldr	r2, [r6, #0]
 800aee0:	f003 0306 	and.w	r3, r3, #6
 800aee4:	2b04      	cmp	r3, #4
 800aee6:	bf08      	it	eq
 800aee8:	1aad      	subeq	r5, r5, r2
 800aeea:	68a3      	ldr	r3, [r4, #8]
 800aeec:	6922      	ldr	r2, [r4, #16]
 800aeee:	bf0c      	ite	eq
 800aef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aef4:	2500      	movne	r5, #0
 800aef6:	4293      	cmp	r3, r2
 800aef8:	bfc4      	itt	gt
 800aefa:	1a9b      	subgt	r3, r3, r2
 800aefc:	18ed      	addgt	r5, r5, r3
 800aefe:	2600      	movs	r6, #0
 800af00:	341a      	adds	r4, #26
 800af02:	42b5      	cmp	r5, r6
 800af04:	d11a      	bne.n	800af3c <_printf_common+0xc8>
 800af06:	2000      	movs	r0, #0
 800af08:	e008      	b.n	800af1c <_printf_common+0xa8>
 800af0a:	2301      	movs	r3, #1
 800af0c:	4652      	mov	r2, sl
 800af0e:	4649      	mov	r1, r9
 800af10:	4638      	mov	r0, r7
 800af12:	47c0      	blx	r8
 800af14:	3001      	adds	r0, #1
 800af16:	d103      	bne.n	800af20 <_printf_common+0xac>
 800af18:	f04f 30ff 	mov.w	r0, #4294967295
 800af1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af20:	3501      	adds	r5, #1
 800af22:	e7c6      	b.n	800aeb2 <_printf_common+0x3e>
 800af24:	18e1      	adds	r1, r4, r3
 800af26:	1c5a      	adds	r2, r3, #1
 800af28:	2030      	movs	r0, #48	; 0x30
 800af2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af2e:	4422      	add	r2, r4
 800af30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af38:	3302      	adds	r3, #2
 800af3a:	e7c7      	b.n	800aecc <_printf_common+0x58>
 800af3c:	2301      	movs	r3, #1
 800af3e:	4622      	mov	r2, r4
 800af40:	4649      	mov	r1, r9
 800af42:	4638      	mov	r0, r7
 800af44:	47c0      	blx	r8
 800af46:	3001      	adds	r0, #1
 800af48:	d0e6      	beq.n	800af18 <_printf_common+0xa4>
 800af4a:	3601      	adds	r6, #1
 800af4c:	e7d9      	b.n	800af02 <_printf_common+0x8e>
	...

0800af50 <_printf_i>:
 800af50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af54:	7e0f      	ldrb	r7, [r1, #24]
 800af56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af58:	2f78      	cmp	r7, #120	; 0x78
 800af5a:	4691      	mov	r9, r2
 800af5c:	4680      	mov	r8, r0
 800af5e:	460c      	mov	r4, r1
 800af60:	469a      	mov	sl, r3
 800af62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af66:	d807      	bhi.n	800af78 <_printf_i+0x28>
 800af68:	2f62      	cmp	r7, #98	; 0x62
 800af6a:	d80a      	bhi.n	800af82 <_printf_i+0x32>
 800af6c:	2f00      	cmp	r7, #0
 800af6e:	f000 80d8 	beq.w	800b122 <_printf_i+0x1d2>
 800af72:	2f58      	cmp	r7, #88	; 0x58
 800af74:	f000 80a3 	beq.w	800b0be <_printf_i+0x16e>
 800af78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af80:	e03a      	b.n	800aff8 <_printf_i+0xa8>
 800af82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af86:	2b15      	cmp	r3, #21
 800af88:	d8f6      	bhi.n	800af78 <_printf_i+0x28>
 800af8a:	a101      	add	r1, pc, #4	; (adr r1, 800af90 <_printf_i+0x40>)
 800af8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af90:	0800afe9 	.word	0x0800afe9
 800af94:	0800affd 	.word	0x0800affd
 800af98:	0800af79 	.word	0x0800af79
 800af9c:	0800af79 	.word	0x0800af79
 800afa0:	0800af79 	.word	0x0800af79
 800afa4:	0800af79 	.word	0x0800af79
 800afa8:	0800affd 	.word	0x0800affd
 800afac:	0800af79 	.word	0x0800af79
 800afb0:	0800af79 	.word	0x0800af79
 800afb4:	0800af79 	.word	0x0800af79
 800afb8:	0800af79 	.word	0x0800af79
 800afbc:	0800b109 	.word	0x0800b109
 800afc0:	0800b02d 	.word	0x0800b02d
 800afc4:	0800b0eb 	.word	0x0800b0eb
 800afc8:	0800af79 	.word	0x0800af79
 800afcc:	0800af79 	.word	0x0800af79
 800afd0:	0800b12b 	.word	0x0800b12b
 800afd4:	0800af79 	.word	0x0800af79
 800afd8:	0800b02d 	.word	0x0800b02d
 800afdc:	0800af79 	.word	0x0800af79
 800afe0:	0800af79 	.word	0x0800af79
 800afe4:	0800b0f3 	.word	0x0800b0f3
 800afe8:	682b      	ldr	r3, [r5, #0]
 800afea:	1d1a      	adds	r2, r3, #4
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	602a      	str	r2, [r5, #0]
 800aff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aff8:	2301      	movs	r3, #1
 800affa:	e0a3      	b.n	800b144 <_printf_i+0x1f4>
 800affc:	6820      	ldr	r0, [r4, #0]
 800affe:	6829      	ldr	r1, [r5, #0]
 800b000:	0606      	lsls	r6, r0, #24
 800b002:	f101 0304 	add.w	r3, r1, #4
 800b006:	d50a      	bpl.n	800b01e <_printf_i+0xce>
 800b008:	680e      	ldr	r6, [r1, #0]
 800b00a:	602b      	str	r3, [r5, #0]
 800b00c:	2e00      	cmp	r6, #0
 800b00e:	da03      	bge.n	800b018 <_printf_i+0xc8>
 800b010:	232d      	movs	r3, #45	; 0x2d
 800b012:	4276      	negs	r6, r6
 800b014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b018:	485e      	ldr	r0, [pc, #376]	; (800b194 <_printf_i+0x244>)
 800b01a:	230a      	movs	r3, #10
 800b01c:	e019      	b.n	800b052 <_printf_i+0x102>
 800b01e:	680e      	ldr	r6, [r1, #0]
 800b020:	602b      	str	r3, [r5, #0]
 800b022:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b026:	bf18      	it	ne
 800b028:	b236      	sxthne	r6, r6
 800b02a:	e7ef      	b.n	800b00c <_printf_i+0xbc>
 800b02c:	682b      	ldr	r3, [r5, #0]
 800b02e:	6820      	ldr	r0, [r4, #0]
 800b030:	1d19      	adds	r1, r3, #4
 800b032:	6029      	str	r1, [r5, #0]
 800b034:	0601      	lsls	r1, r0, #24
 800b036:	d501      	bpl.n	800b03c <_printf_i+0xec>
 800b038:	681e      	ldr	r6, [r3, #0]
 800b03a:	e002      	b.n	800b042 <_printf_i+0xf2>
 800b03c:	0646      	lsls	r6, r0, #25
 800b03e:	d5fb      	bpl.n	800b038 <_printf_i+0xe8>
 800b040:	881e      	ldrh	r6, [r3, #0]
 800b042:	4854      	ldr	r0, [pc, #336]	; (800b194 <_printf_i+0x244>)
 800b044:	2f6f      	cmp	r7, #111	; 0x6f
 800b046:	bf0c      	ite	eq
 800b048:	2308      	moveq	r3, #8
 800b04a:	230a      	movne	r3, #10
 800b04c:	2100      	movs	r1, #0
 800b04e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b052:	6865      	ldr	r5, [r4, #4]
 800b054:	60a5      	str	r5, [r4, #8]
 800b056:	2d00      	cmp	r5, #0
 800b058:	bfa2      	ittt	ge
 800b05a:	6821      	ldrge	r1, [r4, #0]
 800b05c:	f021 0104 	bicge.w	r1, r1, #4
 800b060:	6021      	strge	r1, [r4, #0]
 800b062:	b90e      	cbnz	r6, 800b068 <_printf_i+0x118>
 800b064:	2d00      	cmp	r5, #0
 800b066:	d04d      	beq.n	800b104 <_printf_i+0x1b4>
 800b068:	4615      	mov	r5, r2
 800b06a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b06e:	fb03 6711 	mls	r7, r3, r1, r6
 800b072:	5dc7      	ldrb	r7, [r0, r7]
 800b074:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b078:	4637      	mov	r7, r6
 800b07a:	42bb      	cmp	r3, r7
 800b07c:	460e      	mov	r6, r1
 800b07e:	d9f4      	bls.n	800b06a <_printf_i+0x11a>
 800b080:	2b08      	cmp	r3, #8
 800b082:	d10b      	bne.n	800b09c <_printf_i+0x14c>
 800b084:	6823      	ldr	r3, [r4, #0]
 800b086:	07de      	lsls	r6, r3, #31
 800b088:	d508      	bpl.n	800b09c <_printf_i+0x14c>
 800b08a:	6923      	ldr	r3, [r4, #16]
 800b08c:	6861      	ldr	r1, [r4, #4]
 800b08e:	4299      	cmp	r1, r3
 800b090:	bfde      	ittt	le
 800b092:	2330      	movle	r3, #48	; 0x30
 800b094:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b098:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b09c:	1b52      	subs	r2, r2, r5
 800b09e:	6122      	str	r2, [r4, #16]
 800b0a0:	f8cd a000 	str.w	sl, [sp]
 800b0a4:	464b      	mov	r3, r9
 800b0a6:	aa03      	add	r2, sp, #12
 800b0a8:	4621      	mov	r1, r4
 800b0aa:	4640      	mov	r0, r8
 800b0ac:	f7ff fee2 	bl	800ae74 <_printf_common>
 800b0b0:	3001      	adds	r0, #1
 800b0b2:	d14c      	bne.n	800b14e <_printf_i+0x1fe>
 800b0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b8:	b004      	add	sp, #16
 800b0ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0be:	4835      	ldr	r0, [pc, #212]	; (800b194 <_printf_i+0x244>)
 800b0c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b0c4:	6829      	ldr	r1, [r5, #0]
 800b0c6:	6823      	ldr	r3, [r4, #0]
 800b0c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b0cc:	6029      	str	r1, [r5, #0]
 800b0ce:	061d      	lsls	r5, r3, #24
 800b0d0:	d514      	bpl.n	800b0fc <_printf_i+0x1ac>
 800b0d2:	07df      	lsls	r7, r3, #31
 800b0d4:	bf44      	itt	mi
 800b0d6:	f043 0320 	orrmi.w	r3, r3, #32
 800b0da:	6023      	strmi	r3, [r4, #0]
 800b0dc:	b91e      	cbnz	r6, 800b0e6 <_printf_i+0x196>
 800b0de:	6823      	ldr	r3, [r4, #0]
 800b0e0:	f023 0320 	bic.w	r3, r3, #32
 800b0e4:	6023      	str	r3, [r4, #0]
 800b0e6:	2310      	movs	r3, #16
 800b0e8:	e7b0      	b.n	800b04c <_printf_i+0xfc>
 800b0ea:	6823      	ldr	r3, [r4, #0]
 800b0ec:	f043 0320 	orr.w	r3, r3, #32
 800b0f0:	6023      	str	r3, [r4, #0]
 800b0f2:	2378      	movs	r3, #120	; 0x78
 800b0f4:	4828      	ldr	r0, [pc, #160]	; (800b198 <_printf_i+0x248>)
 800b0f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b0fa:	e7e3      	b.n	800b0c4 <_printf_i+0x174>
 800b0fc:	0659      	lsls	r1, r3, #25
 800b0fe:	bf48      	it	mi
 800b100:	b2b6      	uxthmi	r6, r6
 800b102:	e7e6      	b.n	800b0d2 <_printf_i+0x182>
 800b104:	4615      	mov	r5, r2
 800b106:	e7bb      	b.n	800b080 <_printf_i+0x130>
 800b108:	682b      	ldr	r3, [r5, #0]
 800b10a:	6826      	ldr	r6, [r4, #0]
 800b10c:	6961      	ldr	r1, [r4, #20]
 800b10e:	1d18      	adds	r0, r3, #4
 800b110:	6028      	str	r0, [r5, #0]
 800b112:	0635      	lsls	r5, r6, #24
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	d501      	bpl.n	800b11c <_printf_i+0x1cc>
 800b118:	6019      	str	r1, [r3, #0]
 800b11a:	e002      	b.n	800b122 <_printf_i+0x1d2>
 800b11c:	0670      	lsls	r0, r6, #25
 800b11e:	d5fb      	bpl.n	800b118 <_printf_i+0x1c8>
 800b120:	8019      	strh	r1, [r3, #0]
 800b122:	2300      	movs	r3, #0
 800b124:	6123      	str	r3, [r4, #16]
 800b126:	4615      	mov	r5, r2
 800b128:	e7ba      	b.n	800b0a0 <_printf_i+0x150>
 800b12a:	682b      	ldr	r3, [r5, #0]
 800b12c:	1d1a      	adds	r2, r3, #4
 800b12e:	602a      	str	r2, [r5, #0]
 800b130:	681d      	ldr	r5, [r3, #0]
 800b132:	6862      	ldr	r2, [r4, #4]
 800b134:	2100      	movs	r1, #0
 800b136:	4628      	mov	r0, r5
 800b138:	f7f5 f852 	bl	80001e0 <memchr>
 800b13c:	b108      	cbz	r0, 800b142 <_printf_i+0x1f2>
 800b13e:	1b40      	subs	r0, r0, r5
 800b140:	6060      	str	r0, [r4, #4]
 800b142:	6863      	ldr	r3, [r4, #4]
 800b144:	6123      	str	r3, [r4, #16]
 800b146:	2300      	movs	r3, #0
 800b148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b14c:	e7a8      	b.n	800b0a0 <_printf_i+0x150>
 800b14e:	6923      	ldr	r3, [r4, #16]
 800b150:	462a      	mov	r2, r5
 800b152:	4649      	mov	r1, r9
 800b154:	4640      	mov	r0, r8
 800b156:	47d0      	blx	sl
 800b158:	3001      	adds	r0, #1
 800b15a:	d0ab      	beq.n	800b0b4 <_printf_i+0x164>
 800b15c:	6823      	ldr	r3, [r4, #0]
 800b15e:	079b      	lsls	r3, r3, #30
 800b160:	d413      	bmi.n	800b18a <_printf_i+0x23a>
 800b162:	68e0      	ldr	r0, [r4, #12]
 800b164:	9b03      	ldr	r3, [sp, #12]
 800b166:	4298      	cmp	r0, r3
 800b168:	bfb8      	it	lt
 800b16a:	4618      	movlt	r0, r3
 800b16c:	e7a4      	b.n	800b0b8 <_printf_i+0x168>
 800b16e:	2301      	movs	r3, #1
 800b170:	4632      	mov	r2, r6
 800b172:	4649      	mov	r1, r9
 800b174:	4640      	mov	r0, r8
 800b176:	47d0      	blx	sl
 800b178:	3001      	adds	r0, #1
 800b17a:	d09b      	beq.n	800b0b4 <_printf_i+0x164>
 800b17c:	3501      	adds	r5, #1
 800b17e:	68e3      	ldr	r3, [r4, #12]
 800b180:	9903      	ldr	r1, [sp, #12]
 800b182:	1a5b      	subs	r3, r3, r1
 800b184:	42ab      	cmp	r3, r5
 800b186:	dcf2      	bgt.n	800b16e <_printf_i+0x21e>
 800b188:	e7eb      	b.n	800b162 <_printf_i+0x212>
 800b18a:	2500      	movs	r5, #0
 800b18c:	f104 0619 	add.w	r6, r4, #25
 800b190:	e7f5      	b.n	800b17e <_printf_i+0x22e>
 800b192:	bf00      	nop
 800b194:	0800f65e 	.word	0x0800f65e
 800b198:	0800f66f 	.word	0x0800f66f

0800b19c <_scanf_float>:
 800b19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a0:	b087      	sub	sp, #28
 800b1a2:	4617      	mov	r7, r2
 800b1a4:	9303      	str	r3, [sp, #12]
 800b1a6:	688b      	ldr	r3, [r1, #8]
 800b1a8:	1e5a      	subs	r2, r3, #1
 800b1aa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b1ae:	bf83      	ittte	hi
 800b1b0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b1b4:	195b      	addhi	r3, r3, r5
 800b1b6:	9302      	strhi	r3, [sp, #8]
 800b1b8:	2300      	movls	r3, #0
 800b1ba:	bf86      	itte	hi
 800b1bc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b1c0:	608b      	strhi	r3, [r1, #8]
 800b1c2:	9302      	strls	r3, [sp, #8]
 800b1c4:	680b      	ldr	r3, [r1, #0]
 800b1c6:	468b      	mov	fp, r1
 800b1c8:	2500      	movs	r5, #0
 800b1ca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b1ce:	f84b 3b1c 	str.w	r3, [fp], #28
 800b1d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b1d6:	4680      	mov	r8, r0
 800b1d8:	460c      	mov	r4, r1
 800b1da:	465e      	mov	r6, fp
 800b1dc:	46aa      	mov	sl, r5
 800b1de:	46a9      	mov	r9, r5
 800b1e0:	9501      	str	r5, [sp, #4]
 800b1e2:	68a2      	ldr	r2, [r4, #8]
 800b1e4:	b152      	cbz	r2, 800b1fc <_scanf_float+0x60>
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	2b4e      	cmp	r3, #78	; 0x4e
 800b1ec:	d864      	bhi.n	800b2b8 <_scanf_float+0x11c>
 800b1ee:	2b40      	cmp	r3, #64	; 0x40
 800b1f0:	d83c      	bhi.n	800b26c <_scanf_float+0xd0>
 800b1f2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b1f6:	b2c8      	uxtb	r0, r1
 800b1f8:	280e      	cmp	r0, #14
 800b1fa:	d93a      	bls.n	800b272 <_scanf_float+0xd6>
 800b1fc:	f1b9 0f00 	cmp.w	r9, #0
 800b200:	d003      	beq.n	800b20a <_scanf_float+0x6e>
 800b202:	6823      	ldr	r3, [r4, #0]
 800b204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b208:	6023      	str	r3, [r4, #0]
 800b20a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b20e:	f1ba 0f01 	cmp.w	sl, #1
 800b212:	f200 8113 	bhi.w	800b43c <_scanf_float+0x2a0>
 800b216:	455e      	cmp	r6, fp
 800b218:	f200 8105 	bhi.w	800b426 <_scanf_float+0x28a>
 800b21c:	2501      	movs	r5, #1
 800b21e:	4628      	mov	r0, r5
 800b220:	b007      	add	sp, #28
 800b222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b226:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b22a:	2a0d      	cmp	r2, #13
 800b22c:	d8e6      	bhi.n	800b1fc <_scanf_float+0x60>
 800b22e:	a101      	add	r1, pc, #4	; (adr r1, 800b234 <_scanf_float+0x98>)
 800b230:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b234:	0800b373 	.word	0x0800b373
 800b238:	0800b1fd 	.word	0x0800b1fd
 800b23c:	0800b1fd 	.word	0x0800b1fd
 800b240:	0800b1fd 	.word	0x0800b1fd
 800b244:	0800b3d3 	.word	0x0800b3d3
 800b248:	0800b3ab 	.word	0x0800b3ab
 800b24c:	0800b1fd 	.word	0x0800b1fd
 800b250:	0800b1fd 	.word	0x0800b1fd
 800b254:	0800b381 	.word	0x0800b381
 800b258:	0800b1fd 	.word	0x0800b1fd
 800b25c:	0800b1fd 	.word	0x0800b1fd
 800b260:	0800b1fd 	.word	0x0800b1fd
 800b264:	0800b1fd 	.word	0x0800b1fd
 800b268:	0800b339 	.word	0x0800b339
 800b26c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b270:	e7db      	b.n	800b22a <_scanf_float+0x8e>
 800b272:	290e      	cmp	r1, #14
 800b274:	d8c2      	bhi.n	800b1fc <_scanf_float+0x60>
 800b276:	a001      	add	r0, pc, #4	; (adr r0, 800b27c <_scanf_float+0xe0>)
 800b278:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b27c:	0800b32b 	.word	0x0800b32b
 800b280:	0800b1fd 	.word	0x0800b1fd
 800b284:	0800b32b 	.word	0x0800b32b
 800b288:	0800b3bf 	.word	0x0800b3bf
 800b28c:	0800b1fd 	.word	0x0800b1fd
 800b290:	0800b2d9 	.word	0x0800b2d9
 800b294:	0800b315 	.word	0x0800b315
 800b298:	0800b315 	.word	0x0800b315
 800b29c:	0800b315 	.word	0x0800b315
 800b2a0:	0800b315 	.word	0x0800b315
 800b2a4:	0800b315 	.word	0x0800b315
 800b2a8:	0800b315 	.word	0x0800b315
 800b2ac:	0800b315 	.word	0x0800b315
 800b2b0:	0800b315 	.word	0x0800b315
 800b2b4:	0800b315 	.word	0x0800b315
 800b2b8:	2b6e      	cmp	r3, #110	; 0x6e
 800b2ba:	d809      	bhi.n	800b2d0 <_scanf_float+0x134>
 800b2bc:	2b60      	cmp	r3, #96	; 0x60
 800b2be:	d8b2      	bhi.n	800b226 <_scanf_float+0x8a>
 800b2c0:	2b54      	cmp	r3, #84	; 0x54
 800b2c2:	d077      	beq.n	800b3b4 <_scanf_float+0x218>
 800b2c4:	2b59      	cmp	r3, #89	; 0x59
 800b2c6:	d199      	bne.n	800b1fc <_scanf_float+0x60>
 800b2c8:	2d07      	cmp	r5, #7
 800b2ca:	d197      	bne.n	800b1fc <_scanf_float+0x60>
 800b2cc:	2508      	movs	r5, #8
 800b2ce:	e029      	b.n	800b324 <_scanf_float+0x188>
 800b2d0:	2b74      	cmp	r3, #116	; 0x74
 800b2d2:	d06f      	beq.n	800b3b4 <_scanf_float+0x218>
 800b2d4:	2b79      	cmp	r3, #121	; 0x79
 800b2d6:	e7f6      	b.n	800b2c6 <_scanf_float+0x12a>
 800b2d8:	6821      	ldr	r1, [r4, #0]
 800b2da:	05c8      	lsls	r0, r1, #23
 800b2dc:	d51a      	bpl.n	800b314 <_scanf_float+0x178>
 800b2de:	9b02      	ldr	r3, [sp, #8]
 800b2e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b2e4:	6021      	str	r1, [r4, #0]
 800b2e6:	f109 0901 	add.w	r9, r9, #1
 800b2ea:	b11b      	cbz	r3, 800b2f4 <_scanf_float+0x158>
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	3201      	adds	r2, #1
 800b2f0:	9302      	str	r3, [sp, #8]
 800b2f2:	60a2      	str	r2, [r4, #8]
 800b2f4:	68a3      	ldr	r3, [r4, #8]
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	60a3      	str	r3, [r4, #8]
 800b2fa:	6923      	ldr	r3, [r4, #16]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	6123      	str	r3, [r4, #16]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	3b01      	subs	r3, #1
 800b304:	2b00      	cmp	r3, #0
 800b306:	607b      	str	r3, [r7, #4]
 800b308:	f340 8084 	ble.w	800b414 <_scanf_float+0x278>
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	3301      	adds	r3, #1
 800b310:	603b      	str	r3, [r7, #0]
 800b312:	e766      	b.n	800b1e2 <_scanf_float+0x46>
 800b314:	eb1a 0f05 	cmn.w	sl, r5
 800b318:	f47f af70 	bne.w	800b1fc <_scanf_float+0x60>
 800b31c:	6822      	ldr	r2, [r4, #0]
 800b31e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b322:	6022      	str	r2, [r4, #0]
 800b324:	f806 3b01 	strb.w	r3, [r6], #1
 800b328:	e7e4      	b.n	800b2f4 <_scanf_float+0x158>
 800b32a:	6822      	ldr	r2, [r4, #0]
 800b32c:	0610      	lsls	r0, r2, #24
 800b32e:	f57f af65 	bpl.w	800b1fc <_scanf_float+0x60>
 800b332:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b336:	e7f4      	b.n	800b322 <_scanf_float+0x186>
 800b338:	f1ba 0f00 	cmp.w	sl, #0
 800b33c:	d10e      	bne.n	800b35c <_scanf_float+0x1c0>
 800b33e:	f1b9 0f00 	cmp.w	r9, #0
 800b342:	d10e      	bne.n	800b362 <_scanf_float+0x1c6>
 800b344:	6822      	ldr	r2, [r4, #0]
 800b346:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b34a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b34e:	d108      	bne.n	800b362 <_scanf_float+0x1c6>
 800b350:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b354:	6022      	str	r2, [r4, #0]
 800b356:	f04f 0a01 	mov.w	sl, #1
 800b35a:	e7e3      	b.n	800b324 <_scanf_float+0x188>
 800b35c:	f1ba 0f02 	cmp.w	sl, #2
 800b360:	d055      	beq.n	800b40e <_scanf_float+0x272>
 800b362:	2d01      	cmp	r5, #1
 800b364:	d002      	beq.n	800b36c <_scanf_float+0x1d0>
 800b366:	2d04      	cmp	r5, #4
 800b368:	f47f af48 	bne.w	800b1fc <_scanf_float+0x60>
 800b36c:	3501      	adds	r5, #1
 800b36e:	b2ed      	uxtb	r5, r5
 800b370:	e7d8      	b.n	800b324 <_scanf_float+0x188>
 800b372:	f1ba 0f01 	cmp.w	sl, #1
 800b376:	f47f af41 	bne.w	800b1fc <_scanf_float+0x60>
 800b37a:	f04f 0a02 	mov.w	sl, #2
 800b37e:	e7d1      	b.n	800b324 <_scanf_float+0x188>
 800b380:	b97d      	cbnz	r5, 800b3a2 <_scanf_float+0x206>
 800b382:	f1b9 0f00 	cmp.w	r9, #0
 800b386:	f47f af3c 	bne.w	800b202 <_scanf_float+0x66>
 800b38a:	6822      	ldr	r2, [r4, #0]
 800b38c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b390:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b394:	f47f af39 	bne.w	800b20a <_scanf_float+0x6e>
 800b398:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b39c:	6022      	str	r2, [r4, #0]
 800b39e:	2501      	movs	r5, #1
 800b3a0:	e7c0      	b.n	800b324 <_scanf_float+0x188>
 800b3a2:	2d03      	cmp	r5, #3
 800b3a4:	d0e2      	beq.n	800b36c <_scanf_float+0x1d0>
 800b3a6:	2d05      	cmp	r5, #5
 800b3a8:	e7de      	b.n	800b368 <_scanf_float+0x1cc>
 800b3aa:	2d02      	cmp	r5, #2
 800b3ac:	f47f af26 	bne.w	800b1fc <_scanf_float+0x60>
 800b3b0:	2503      	movs	r5, #3
 800b3b2:	e7b7      	b.n	800b324 <_scanf_float+0x188>
 800b3b4:	2d06      	cmp	r5, #6
 800b3b6:	f47f af21 	bne.w	800b1fc <_scanf_float+0x60>
 800b3ba:	2507      	movs	r5, #7
 800b3bc:	e7b2      	b.n	800b324 <_scanf_float+0x188>
 800b3be:	6822      	ldr	r2, [r4, #0]
 800b3c0:	0591      	lsls	r1, r2, #22
 800b3c2:	f57f af1b 	bpl.w	800b1fc <_scanf_float+0x60>
 800b3c6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b3ca:	6022      	str	r2, [r4, #0]
 800b3cc:	f8cd 9004 	str.w	r9, [sp, #4]
 800b3d0:	e7a8      	b.n	800b324 <_scanf_float+0x188>
 800b3d2:	6822      	ldr	r2, [r4, #0]
 800b3d4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b3d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b3dc:	d006      	beq.n	800b3ec <_scanf_float+0x250>
 800b3de:	0550      	lsls	r0, r2, #21
 800b3e0:	f57f af0c 	bpl.w	800b1fc <_scanf_float+0x60>
 800b3e4:	f1b9 0f00 	cmp.w	r9, #0
 800b3e8:	f43f af0f 	beq.w	800b20a <_scanf_float+0x6e>
 800b3ec:	0591      	lsls	r1, r2, #22
 800b3ee:	bf58      	it	pl
 800b3f0:	9901      	ldrpl	r1, [sp, #4]
 800b3f2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b3f6:	bf58      	it	pl
 800b3f8:	eba9 0101 	subpl.w	r1, r9, r1
 800b3fc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b400:	bf58      	it	pl
 800b402:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b406:	6022      	str	r2, [r4, #0]
 800b408:	f04f 0900 	mov.w	r9, #0
 800b40c:	e78a      	b.n	800b324 <_scanf_float+0x188>
 800b40e:	f04f 0a03 	mov.w	sl, #3
 800b412:	e787      	b.n	800b324 <_scanf_float+0x188>
 800b414:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b418:	4639      	mov	r1, r7
 800b41a:	4640      	mov	r0, r8
 800b41c:	4798      	blx	r3
 800b41e:	2800      	cmp	r0, #0
 800b420:	f43f aedf 	beq.w	800b1e2 <_scanf_float+0x46>
 800b424:	e6ea      	b.n	800b1fc <_scanf_float+0x60>
 800b426:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b42a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b42e:	463a      	mov	r2, r7
 800b430:	4640      	mov	r0, r8
 800b432:	4798      	blx	r3
 800b434:	6923      	ldr	r3, [r4, #16]
 800b436:	3b01      	subs	r3, #1
 800b438:	6123      	str	r3, [r4, #16]
 800b43a:	e6ec      	b.n	800b216 <_scanf_float+0x7a>
 800b43c:	1e6b      	subs	r3, r5, #1
 800b43e:	2b06      	cmp	r3, #6
 800b440:	d825      	bhi.n	800b48e <_scanf_float+0x2f2>
 800b442:	2d02      	cmp	r5, #2
 800b444:	d836      	bhi.n	800b4b4 <_scanf_float+0x318>
 800b446:	455e      	cmp	r6, fp
 800b448:	f67f aee8 	bls.w	800b21c <_scanf_float+0x80>
 800b44c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b450:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b454:	463a      	mov	r2, r7
 800b456:	4640      	mov	r0, r8
 800b458:	4798      	blx	r3
 800b45a:	6923      	ldr	r3, [r4, #16]
 800b45c:	3b01      	subs	r3, #1
 800b45e:	6123      	str	r3, [r4, #16]
 800b460:	e7f1      	b.n	800b446 <_scanf_float+0x2aa>
 800b462:	9802      	ldr	r0, [sp, #8]
 800b464:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b468:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b46c:	9002      	str	r0, [sp, #8]
 800b46e:	463a      	mov	r2, r7
 800b470:	4640      	mov	r0, r8
 800b472:	4798      	blx	r3
 800b474:	6923      	ldr	r3, [r4, #16]
 800b476:	3b01      	subs	r3, #1
 800b478:	6123      	str	r3, [r4, #16]
 800b47a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b47e:	fa5f fa8a 	uxtb.w	sl, sl
 800b482:	f1ba 0f02 	cmp.w	sl, #2
 800b486:	d1ec      	bne.n	800b462 <_scanf_float+0x2c6>
 800b488:	3d03      	subs	r5, #3
 800b48a:	b2ed      	uxtb	r5, r5
 800b48c:	1b76      	subs	r6, r6, r5
 800b48e:	6823      	ldr	r3, [r4, #0]
 800b490:	05da      	lsls	r2, r3, #23
 800b492:	d52f      	bpl.n	800b4f4 <_scanf_float+0x358>
 800b494:	055b      	lsls	r3, r3, #21
 800b496:	d510      	bpl.n	800b4ba <_scanf_float+0x31e>
 800b498:	455e      	cmp	r6, fp
 800b49a:	f67f aebf 	bls.w	800b21c <_scanf_float+0x80>
 800b49e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b4a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b4a6:	463a      	mov	r2, r7
 800b4a8:	4640      	mov	r0, r8
 800b4aa:	4798      	blx	r3
 800b4ac:	6923      	ldr	r3, [r4, #16]
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	6123      	str	r3, [r4, #16]
 800b4b2:	e7f1      	b.n	800b498 <_scanf_float+0x2fc>
 800b4b4:	46aa      	mov	sl, r5
 800b4b6:	9602      	str	r6, [sp, #8]
 800b4b8:	e7df      	b.n	800b47a <_scanf_float+0x2de>
 800b4ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b4be:	6923      	ldr	r3, [r4, #16]
 800b4c0:	2965      	cmp	r1, #101	; 0x65
 800b4c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b4c6:	f106 35ff 	add.w	r5, r6, #4294967295
 800b4ca:	6123      	str	r3, [r4, #16]
 800b4cc:	d00c      	beq.n	800b4e8 <_scanf_float+0x34c>
 800b4ce:	2945      	cmp	r1, #69	; 0x45
 800b4d0:	d00a      	beq.n	800b4e8 <_scanf_float+0x34c>
 800b4d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b4d6:	463a      	mov	r2, r7
 800b4d8:	4640      	mov	r0, r8
 800b4da:	4798      	blx	r3
 800b4dc:	6923      	ldr	r3, [r4, #16]
 800b4de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b4e2:	3b01      	subs	r3, #1
 800b4e4:	1eb5      	subs	r5, r6, #2
 800b4e6:	6123      	str	r3, [r4, #16]
 800b4e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b4ec:	463a      	mov	r2, r7
 800b4ee:	4640      	mov	r0, r8
 800b4f0:	4798      	blx	r3
 800b4f2:	462e      	mov	r6, r5
 800b4f4:	6825      	ldr	r5, [r4, #0]
 800b4f6:	f015 0510 	ands.w	r5, r5, #16
 800b4fa:	d159      	bne.n	800b5b0 <_scanf_float+0x414>
 800b4fc:	7035      	strb	r5, [r6, #0]
 800b4fe:	6823      	ldr	r3, [r4, #0]
 800b500:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b508:	d11b      	bne.n	800b542 <_scanf_float+0x3a6>
 800b50a:	9b01      	ldr	r3, [sp, #4]
 800b50c:	454b      	cmp	r3, r9
 800b50e:	eba3 0209 	sub.w	r2, r3, r9
 800b512:	d123      	bne.n	800b55c <_scanf_float+0x3c0>
 800b514:	2200      	movs	r2, #0
 800b516:	4659      	mov	r1, fp
 800b518:	4640      	mov	r0, r8
 800b51a:	f000 fedf 	bl	800c2dc <_strtod_r>
 800b51e:	6822      	ldr	r2, [r4, #0]
 800b520:	9b03      	ldr	r3, [sp, #12]
 800b522:	f012 0f02 	tst.w	r2, #2
 800b526:	ec57 6b10 	vmov	r6, r7, d0
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	d021      	beq.n	800b572 <_scanf_float+0x3d6>
 800b52e:	9903      	ldr	r1, [sp, #12]
 800b530:	1d1a      	adds	r2, r3, #4
 800b532:	600a      	str	r2, [r1, #0]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	e9c3 6700 	strd	r6, r7, [r3]
 800b53a:	68e3      	ldr	r3, [r4, #12]
 800b53c:	3301      	adds	r3, #1
 800b53e:	60e3      	str	r3, [r4, #12]
 800b540:	e66d      	b.n	800b21e <_scanf_float+0x82>
 800b542:	9b04      	ldr	r3, [sp, #16]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d0e5      	beq.n	800b514 <_scanf_float+0x378>
 800b548:	9905      	ldr	r1, [sp, #20]
 800b54a:	230a      	movs	r3, #10
 800b54c:	462a      	mov	r2, r5
 800b54e:	3101      	adds	r1, #1
 800b550:	4640      	mov	r0, r8
 800b552:	f000 ffa7 	bl	800c4a4 <_strtol_r>
 800b556:	9b04      	ldr	r3, [sp, #16]
 800b558:	9e05      	ldr	r6, [sp, #20]
 800b55a:	1ac2      	subs	r2, r0, r3
 800b55c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b560:	429e      	cmp	r6, r3
 800b562:	bf28      	it	cs
 800b564:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b568:	4912      	ldr	r1, [pc, #72]	; (800b5b4 <_scanf_float+0x418>)
 800b56a:	4630      	mov	r0, r6
 800b56c:	f000 f83c 	bl	800b5e8 <siprintf>
 800b570:	e7d0      	b.n	800b514 <_scanf_float+0x378>
 800b572:	9903      	ldr	r1, [sp, #12]
 800b574:	f012 0f04 	tst.w	r2, #4
 800b578:	f103 0204 	add.w	r2, r3, #4
 800b57c:	600a      	str	r2, [r1, #0]
 800b57e:	d1d9      	bne.n	800b534 <_scanf_float+0x398>
 800b580:	f8d3 8000 	ldr.w	r8, [r3]
 800b584:	ee10 2a10 	vmov	r2, s0
 800b588:	ee10 0a10 	vmov	r0, s0
 800b58c:	463b      	mov	r3, r7
 800b58e:	4639      	mov	r1, r7
 800b590:	f7f5 facc 	bl	8000b2c <__aeabi_dcmpun>
 800b594:	b128      	cbz	r0, 800b5a2 <_scanf_float+0x406>
 800b596:	4808      	ldr	r0, [pc, #32]	; (800b5b8 <_scanf_float+0x41c>)
 800b598:	f000 f820 	bl	800b5dc <nanf>
 800b59c:	ed88 0a00 	vstr	s0, [r8]
 800b5a0:	e7cb      	b.n	800b53a <_scanf_float+0x39e>
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	4639      	mov	r1, r7
 800b5a6:	f7f5 fb1f 	bl	8000be8 <__aeabi_d2f>
 800b5aa:	f8c8 0000 	str.w	r0, [r8]
 800b5ae:	e7c4      	b.n	800b53a <_scanf_float+0x39e>
 800b5b0:	2500      	movs	r5, #0
 800b5b2:	e634      	b.n	800b21e <_scanf_float+0x82>
 800b5b4:	0800f680 	.word	0x0800f680
 800b5b8:	0800f7ac 	.word	0x0800f7ac

0800b5bc <_sbrk_r>:
 800b5bc:	b538      	push	{r3, r4, r5, lr}
 800b5be:	4d06      	ldr	r5, [pc, #24]	; (800b5d8 <_sbrk_r+0x1c>)
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	4608      	mov	r0, r1
 800b5c6:	602b      	str	r3, [r5, #0]
 800b5c8:	f7f7 ff76 	bl	80034b8 <_sbrk>
 800b5cc:	1c43      	adds	r3, r0, #1
 800b5ce:	d102      	bne.n	800b5d6 <_sbrk_r+0x1a>
 800b5d0:	682b      	ldr	r3, [r5, #0]
 800b5d2:	b103      	cbz	r3, 800b5d6 <_sbrk_r+0x1a>
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	bd38      	pop	{r3, r4, r5, pc}
 800b5d8:	20002a24 	.word	0x20002a24

0800b5dc <nanf>:
 800b5dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b5e4 <nanf+0x8>
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	7fc00000 	.word	0x7fc00000

0800b5e8 <siprintf>:
 800b5e8:	b40e      	push	{r1, r2, r3}
 800b5ea:	b500      	push	{lr}
 800b5ec:	b09c      	sub	sp, #112	; 0x70
 800b5ee:	ab1d      	add	r3, sp, #116	; 0x74
 800b5f0:	9002      	str	r0, [sp, #8]
 800b5f2:	9006      	str	r0, [sp, #24]
 800b5f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b5f8:	4809      	ldr	r0, [pc, #36]	; (800b620 <siprintf+0x38>)
 800b5fa:	9107      	str	r1, [sp, #28]
 800b5fc:	9104      	str	r1, [sp, #16]
 800b5fe:	4909      	ldr	r1, [pc, #36]	; (800b624 <siprintf+0x3c>)
 800b600:	f853 2b04 	ldr.w	r2, [r3], #4
 800b604:	9105      	str	r1, [sp, #20]
 800b606:	6800      	ldr	r0, [r0, #0]
 800b608:	9301      	str	r3, [sp, #4]
 800b60a:	a902      	add	r1, sp, #8
 800b60c:	f002 ff16 	bl	800e43c <_svfiprintf_r>
 800b610:	9b02      	ldr	r3, [sp, #8]
 800b612:	2200      	movs	r2, #0
 800b614:	701a      	strb	r2, [r3, #0]
 800b616:	b01c      	add	sp, #112	; 0x70
 800b618:	f85d eb04 	ldr.w	lr, [sp], #4
 800b61c:	b003      	add	sp, #12
 800b61e:	4770      	bx	lr
 800b620:	20000034 	.word	0x20000034
 800b624:	ffff0208 	.word	0xffff0208

0800b628 <strcat>:
 800b628:	b510      	push	{r4, lr}
 800b62a:	4602      	mov	r2, r0
 800b62c:	7814      	ldrb	r4, [r2, #0]
 800b62e:	4613      	mov	r3, r2
 800b630:	3201      	adds	r2, #1
 800b632:	2c00      	cmp	r4, #0
 800b634:	d1fa      	bne.n	800b62c <strcat+0x4>
 800b636:	3b01      	subs	r3, #1
 800b638:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b63c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b640:	2a00      	cmp	r2, #0
 800b642:	d1f9      	bne.n	800b638 <strcat+0x10>
 800b644:	bd10      	pop	{r4, pc}

0800b646 <strncpy>:
 800b646:	b510      	push	{r4, lr}
 800b648:	3901      	subs	r1, #1
 800b64a:	4603      	mov	r3, r0
 800b64c:	b132      	cbz	r2, 800b65c <strncpy+0x16>
 800b64e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b652:	f803 4b01 	strb.w	r4, [r3], #1
 800b656:	3a01      	subs	r2, #1
 800b658:	2c00      	cmp	r4, #0
 800b65a:	d1f7      	bne.n	800b64c <strncpy+0x6>
 800b65c:	441a      	add	r2, r3
 800b65e:	2100      	movs	r1, #0
 800b660:	4293      	cmp	r3, r2
 800b662:	d100      	bne.n	800b666 <strncpy+0x20>
 800b664:	bd10      	pop	{r4, pc}
 800b666:	f803 1b01 	strb.w	r1, [r3], #1
 800b66a:	e7f9      	b.n	800b660 <strncpy+0x1a>

0800b66c <strstr>:
 800b66c:	780a      	ldrb	r2, [r1, #0]
 800b66e:	b570      	push	{r4, r5, r6, lr}
 800b670:	b96a      	cbnz	r2, 800b68e <strstr+0x22>
 800b672:	bd70      	pop	{r4, r5, r6, pc}
 800b674:	429a      	cmp	r2, r3
 800b676:	d109      	bne.n	800b68c <strstr+0x20>
 800b678:	460c      	mov	r4, r1
 800b67a:	4605      	mov	r5, r0
 800b67c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b680:	2b00      	cmp	r3, #0
 800b682:	d0f6      	beq.n	800b672 <strstr+0x6>
 800b684:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b688:	429e      	cmp	r6, r3
 800b68a:	d0f7      	beq.n	800b67c <strstr+0x10>
 800b68c:	3001      	adds	r0, #1
 800b68e:	7803      	ldrb	r3, [r0, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d1ef      	bne.n	800b674 <strstr+0x8>
 800b694:	4618      	mov	r0, r3
 800b696:	e7ec      	b.n	800b672 <strstr+0x6>

0800b698 <sulp>:
 800b698:	b570      	push	{r4, r5, r6, lr}
 800b69a:	4604      	mov	r4, r0
 800b69c:	460d      	mov	r5, r1
 800b69e:	ec45 4b10 	vmov	d0, r4, r5
 800b6a2:	4616      	mov	r6, r2
 800b6a4:	f002 fd0a 	bl	800e0bc <__ulp>
 800b6a8:	ec51 0b10 	vmov	r0, r1, d0
 800b6ac:	b17e      	cbz	r6, 800b6ce <sulp+0x36>
 800b6ae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b6b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	dd09      	ble.n	800b6ce <sulp+0x36>
 800b6ba:	051b      	lsls	r3, r3, #20
 800b6bc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b6c0:	2400      	movs	r4, #0
 800b6c2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b6c6:	4622      	mov	r2, r4
 800b6c8:	462b      	mov	r3, r5
 800b6ca:	f7f4 ff95 	bl	80005f8 <__aeabi_dmul>
 800b6ce:	bd70      	pop	{r4, r5, r6, pc}

0800b6d0 <_strtod_l>:
 800b6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d4:	ed2d 8b02 	vpush	{d8}
 800b6d8:	b09d      	sub	sp, #116	; 0x74
 800b6da:	461f      	mov	r7, r3
 800b6dc:	2300      	movs	r3, #0
 800b6de:	9318      	str	r3, [sp, #96]	; 0x60
 800b6e0:	4ba2      	ldr	r3, [pc, #648]	; (800b96c <_strtod_l+0x29c>)
 800b6e2:	9213      	str	r2, [sp, #76]	; 0x4c
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	9305      	str	r3, [sp, #20]
 800b6e8:	4604      	mov	r4, r0
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	4688      	mov	r8, r1
 800b6ee:	f7f4 fd6f 	bl	80001d0 <strlen>
 800b6f2:	f04f 0a00 	mov.w	sl, #0
 800b6f6:	4605      	mov	r5, r0
 800b6f8:	f04f 0b00 	mov.w	fp, #0
 800b6fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b702:	781a      	ldrb	r2, [r3, #0]
 800b704:	2a2b      	cmp	r2, #43	; 0x2b
 800b706:	d04e      	beq.n	800b7a6 <_strtod_l+0xd6>
 800b708:	d83b      	bhi.n	800b782 <_strtod_l+0xb2>
 800b70a:	2a0d      	cmp	r2, #13
 800b70c:	d834      	bhi.n	800b778 <_strtod_l+0xa8>
 800b70e:	2a08      	cmp	r2, #8
 800b710:	d834      	bhi.n	800b77c <_strtod_l+0xac>
 800b712:	2a00      	cmp	r2, #0
 800b714:	d03e      	beq.n	800b794 <_strtod_l+0xc4>
 800b716:	2300      	movs	r3, #0
 800b718:	930a      	str	r3, [sp, #40]	; 0x28
 800b71a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b71c:	7833      	ldrb	r3, [r6, #0]
 800b71e:	2b30      	cmp	r3, #48	; 0x30
 800b720:	f040 80b0 	bne.w	800b884 <_strtod_l+0x1b4>
 800b724:	7873      	ldrb	r3, [r6, #1]
 800b726:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b72a:	2b58      	cmp	r3, #88	; 0x58
 800b72c:	d168      	bne.n	800b800 <_strtod_l+0x130>
 800b72e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b730:	9301      	str	r3, [sp, #4]
 800b732:	ab18      	add	r3, sp, #96	; 0x60
 800b734:	9702      	str	r7, [sp, #8]
 800b736:	9300      	str	r3, [sp, #0]
 800b738:	4a8d      	ldr	r2, [pc, #564]	; (800b970 <_strtod_l+0x2a0>)
 800b73a:	ab19      	add	r3, sp, #100	; 0x64
 800b73c:	a917      	add	r1, sp, #92	; 0x5c
 800b73e:	4620      	mov	r0, r4
 800b740:	f001 fe12 	bl	800d368 <__gethex>
 800b744:	f010 0707 	ands.w	r7, r0, #7
 800b748:	4605      	mov	r5, r0
 800b74a:	d005      	beq.n	800b758 <_strtod_l+0x88>
 800b74c:	2f06      	cmp	r7, #6
 800b74e:	d12c      	bne.n	800b7aa <_strtod_l+0xda>
 800b750:	3601      	adds	r6, #1
 800b752:	2300      	movs	r3, #0
 800b754:	9617      	str	r6, [sp, #92]	; 0x5c
 800b756:	930a      	str	r3, [sp, #40]	; 0x28
 800b758:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	f040 8590 	bne.w	800c280 <_strtod_l+0xbb0>
 800b760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b762:	b1eb      	cbz	r3, 800b7a0 <_strtod_l+0xd0>
 800b764:	4652      	mov	r2, sl
 800b766:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b76a:	ec43 2b10 	vmov	d0, r2, r3
 800b76e:	b01d      	add	sp, #116	; 0x74
 800b770:	ecbd 8b02 	vpop	{d8}
 800b774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b778:	2a20      	cmp	r2, #32
 800b77a:	d1cc      	bne.n	800b716 <_strtod_l+0x46>
 800b77c:	3301      	adds	r3, #1
 800b77e:	9317      	str	r3, [sp, #92]	; 0x5c
 800b780:	e7be      	b.n	800b700 <_strtod_l+0x30>
 800b782:	2a2d      	cmp	r2, #45	; 0x2d
 800b784:	d1c7      	bne.n	800b716 <_strtod_l+0x46>
 800b786:	2201      	movs	r2, #1
 800b788:	920a      	str	r2, [sp, #40]	; 0x28
 800b78a:	1c5a      	adds	r2, r3, #1
 800b78c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b78e:	785b      	ldrb	r3, [r3, #1]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d1c2      	bne.n	800b71a <_strtod_l+0x4a>
 800b794:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b796:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f040 856e 	bne.w	800c27c <_strtod_l+0xbac>
 800b7a0:	4652      	mov	r2, sl
 800b7a2:	465b      	mov	r3, fp
 800b7a4:	e7e1      	b.n	800b76a <_strtod_l+0x9a>
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	e7ee      	b.n	800b788 <_strtod_l+0xb8>
 800b7aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b7ac:	b13a      	cbz	r2, 800b7be <_strtod_l+0xee>
 800b7ae:	2135      	movs	r1, #53	; 0x35
 800b7b0:	a81a      	add	r0, sp, #104	; 0x68
 800b7b2:	f002 fd8e 	bl	800e2d2 <__copybits>
 800b7b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	f002 f94d 	bl	800da58 <_Bfree>
 800b7be:	3f01      	subs	r7, #1
 800b7c0:	2f04      	cmp	r7, #4
 800b7c2:	d806      	bhi.n	800b7d2 <_strtod_l+0x102>
 800b7c4:	e8df f007 	tbb	[pc, r7]
 800b7c8:	1714030a 	.word	0x1714030a
 800b7cc:	0a          	.byte	0x0a
 800b7cd:	00          	.byte	0x00
 800b7ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b7d2:	0728      	lsls	r0, r5, #28
 800b7d4:	d5c0      	bpl.n	800b758 <_strtod_l+0x88>
 800b7d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b7da:	e7bd      	b.n	800b758 <_strtod_l+0x88>
 800b7dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b7e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b7e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b7e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b7ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b7ee:	e7f0      	b.n	800b7d2 <_strtod_l+0x102>
 800b7f0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b974 <_strtod_l+0x2a4>
 800b7f4:	e7ed      	b.n	800b7d2 <_strtod_l+0x102>
 800b7f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b7fa:	f04f 3aff 	mov.w	sl, #4294967295
 800b7fe:	e7e8      	b.n	800b7d2 <_strtod_l+0x102>
 800b800:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b802:	1c5a      	adds	r2, r3, #1
 800b804:	9217      	str	r2, [sp, #92]	; 0x5c
 800b806:	785b      	ldrb	r3, [r3, #1]
 800b808:	2b30      	cmp	r3, #48	; 0x30
 800b80a:	d0f9      	beq.n	800b800 <_strtod_l+0x130>
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d0a3      	beq.n	800b758 <_strtod_l+0x88>
 800b810:	2301      	movs	r3, #1
 800b812:	f04f 0900 	mov.w	r9, #0
 800b816:	9304      	str	r3, [sp, #16]
 800b818:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b81a:	9308      	str	r3, [sp, #32]
 800b81c:	f8cd 901c 	str.w	r9, [sp, #28]
 800b820:	464f      	mov	r7, r9
 800b822:	220a      	movs	r2, #10
 800b824:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b826:	7806      	ldrb	r6, [r0, #0]
 800b828:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b82c:	b2d9      	uxtb	r1, r3
 800b82e:	2909      	cmp	r1, #9
 800b830:	d92a      	bls.n	800b888 <_strtod_l+0x1b8>
 800b832:	9905      	ldr	r1, [sp, #20]
 800b834:	462a      	mov	r2, r5
 800b836:	f003 f863 	bl	800e900 <strncmp>
 800b83a:	b398      	cbz	r0, 800b8a4 <_strtod_l+0x1d4>
 800b83c:	2000      	movs	r0, #0
 800b83e:	4632      	mov	r2, r6
 800b840:	463d      	mov	r5, r7
 800b842:	9005      	str	r0, [sp, #20]
 800b844:	4603      	mov	r3, r0
 800b846:	2a65      	cmp	r2, #101	; 0x65
 800b848:	d001      	beq.n	800b84e <_strtod_l+0x17e>
 800b84a:	2a45      	cmp	r2, #69	; 0x45
 800b84c:	d118      	bne.n	800b880 <_strtod_l+0x1b0>
 800b84e:	b91d      	cbnz	r5, 800b858 <_strtod_l+0x188>
 800b850:	9a04      	ldr	r2, [sp, #16]
 800b852:	4302      	orrs	r2, r0
 800b854:	d09e      	beq.n	800b794 <_strtod_l+0xc4>
 800b856:	2500      	movs	r5, #0
 800b858:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b85c:	f108 0201 	add.w	r2, r8, #1
 800b860:	9217      	str	r2, [sp, #92]	; 0x5c
 800b862:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b866:	2a2b      	cmp	r2, #43	; 0x2b
 800b868:	d075      	beq.n	800b956 <_strtod_l+0x286>
 800b86a:	2a2d      	cmp	r2, #45	; 0x2d
 800b86c:	d07b      	beq.n	800b966 <_strtod_l+0x296>
 800b86e:	f04f 0c00 	mov.w	ip, #0
 800b872:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b876:	2909      	cmp	r1, #9
 800b878:	f240 8082 	bls.w	800b980 <_strtod_l+0x2b0>
 800b87c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b880:	2600      	movs	r6, #0
 800b882:	e09d      	b.n	800b9c0 <_strtod_l+0x2f0>
 800b884:	2300      	movs	r3, #0
 800b886:	e7c4      	b.n	800b812 <_strtod_l+0x142>
 800b888:	2f08      	cmp	r7, #8
 800b88a:	bfd8      	it	le
 800b88c:	9907      	ldrle	r1, [sp, #28]
 800b88e:	f100 0001 	add.w	r0, r0, #1
 800b892:	bfda      	itte	le
 800b894:	fb02 3301 	mlale	r3, r2, r1, r3
 800b898:	9307      	strle	r3, [sp, #28]
 800b89a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b89e:	3701      	adds	r7, #1
 800b8a0:	9017      	str	r0, [sp, #92]	; 0x5c
 800b8a2:	e7bf      	b.n	800b824 <_strtod_l+0x154>
 800b8a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b8a6:	195a      	adds	r2, r3, r5
 800b8a8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b8aa:	5d5a      	ldrb	r2, [r3, r5]
 800b8ac:	2f00      	cmp	r7, #0
 800b8ae:	d037      	beq.n	800b920 <_strtod_l+0x250>
 800b8b0:	9005      	str	r0, [sp, #20]
 800b8b2:	463d      	mov	r5, r7
 800b8b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b8b8:	2b09      	cmp	r3, #9
 800b8ba:	d912      	bls.n	800b8e2 <_strtod_l+0x212>
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e7c2      	b.n	800b846 <_strtod_l+0x176>
 800b8c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b8c2:	1c5a      	adds	r2, r3, #1
 800b8c4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b8c6:	785a      	ldrb	r2, [r3, #1]
 800b8c8:	3001      	adds	r0, #1
 800b8ca:	2a30      	cmp	r2, #48	; 0x30
 800b8cc:	d0f8      	beq.n	800b8c0 <_strtod_l+0x1f0>
 800b8ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b8d2:	2b08      	cmp	r3, #8
 800b8d4:	f200 84d9 	bhi.w	800c28a <_strtod_l+0xbba>
 800b8d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b8da:	9005      	str	r0, [sp, #20]
 800b8dc:	2000      	movs	r0, #0
 800b8de:	9308      	str	r3, [sp, #32]
 800b8e0:	4605      	mov	r5, r0
 800b8e2:	3a30      	subs	r2, #48	; 0x30
 800b8e4:	f100 0301 	add.w	r3, r0, #1
 800b8e8:	d014      	beq.n	800b914 <_strtod_l+0x244>
 800b8ea:	9905      	ldr	r1, [sp, #20]
 800b8ec:	4419      	add	r1, r3
 800b8ee:	9105      	str	r1, [sp, #20]
 800b8f0:	462b      	mov	r3, r5
 800b8f2:	eb00 0e05 	add.w	lr, r0, r5
 800b8f6:	210a      	movs	r1, #10
 800b8f8:	4573      	cmp	r3, lr
 800b8fa:	d113      	bne.n	800b924 <_strtod_l+0x254>
 800b8fc:	182b      	adds	r3, r5, r0
 800b8fe:	2b08      	cmp	r3, #8
 800b900:	f105 0501 	add.w	r5, r5, #1
 800b904:	4405      	add	r5, r0
 800b906:	dc1c      	bgt.n	800b942 <_strtod_l+0x272>
 800b908:	9907      	ldr	r1, [sp, #28]
 800b90a:	230a      	movs	r3, #10
 800b90c:	fb03 2301 	mla	r3, r3, r1, r2
 800b910:	9307      	str	r3, [sp, #28]
 800b912:	2300      	movs	r3, #0
 800b914:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b916:	1c51      	adds	r1, r2, #1
 800b918:	9117      	str	r1, [sp, #92]	; 0x5c
 800b91a:	7852      	ldrb	r2, [r2, #1]
 800b91c:	4618      	mov	r0, r3
 800b91e:	e7c9      	b.n	800b8b4 <_strtod_l+0x1e4>
 800b920:	4638      	mov	r0, r7
 800b922:	e7d2      	b.n	800b8ca <_strtod_l+0x1fa>
 800b924:	2b08      	cmp	r3, #8
 800b926:	dc04      	bgt.n	800b932 <_strtod_l+0x262>
 800b928:	9e07      	ldr	r6, [sp, #28]
 800b92a:	434e      	muls	r6, r1
 800b92c:	9607      	str	r6, [sp, #28]
 800b92e:	3301      	adds	r3, #1
 800b930:	e7e2      	b.n	800b8f8 <_strtod_l+0x228>
 800b932:	f103 0c01 	add.w	ip, r3, #1
 800b936:	f1bc 0f10 	cmp.w	ip, #16
 800b93a:	bfd8      	it	le
 800b93c:	fb01 f909 	mulle.w	r9, r1, r9
 800b940:	e7f5      	b.n	800b92e <_strtod_l+0x25e>
 800b942:	2d10      	cmp	r5, #16
 800b944:	bfdc      	itt	le
 800b946:	230a      	movle	r3, #10
 800b948:	fb03 2909 	mlale	r9, r3, r9, r2
 800b94c:	e7e1      	b.n	800b912 <_strtod_l+0x242>
 800b94e:	2300      	movs	r3, #0
 800b950:	9305      	str	r3, [sp, #20]
 800b952:	2301      	movs	r3, #1
 800b954:	e77c      	b.n	800b850 <_strtod_l+0x180>
 800b956:	f04f 0c00 	mov.w	ip, #0
 800b95a:	f108 0202 	add.w	r2, r8, #2
 800b95e:	9217      	str	r2, [sp, #92]	; 0x5c
 800b960:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b964:	e785      	b.n	800b872 <_strtod_l+0x1a2>
 800b966:	f04f 0c01 	mov.w	ip, #1
 800b96a:	e7f6      	b.n	800b95a <_strtod_l+0x28a>
 800b96c:	0800f98c 	.word	0x0800f98c
 800b970:	0800f688 	.word	0x0800f688
 800b974:	7ff00000 	.word	0x7ff00000
 800b978:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b97a:	1c51      	adds	r1, r2, #1
 800b97c:	9117      	str	r1, [sp, #92]	; 0x5c
 800b97e:	7852      	ldrb	r2, [r2, #1]
 800b980:	2a30      	cmp	r2, #48	; 0x30
 800b982:	d0f9      	beq.n	800b978 <_strtod_l+0x2a8>
 800b984:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b988:	2908      	cmp	r1, #8
 800b98a:	f63f af79 	bhi.w	800b880 <_strtod_l+0x1b0>
 800b98e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b992:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b994:	9206      	str	r2, [sp, #24]
 800b996:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b998:	1c51      	adds	r1, r2, #1
 800b99a:	9117      	str	r1, [sp, #92]	; 0x5c
 800b99c:	7852      	ldrb	r2, [r2, #1]
 800b99e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b9a2:	2e09      	cmp	r6, #9
 800b9a4:	d937      	bls.n	800ba16 <_strtod_l+0x346>
 800b9a6:	9e06      	ldr	r6, [sp, #24]
 800b9a8:	1b89      	subs	r1, r1, r6
 800b9aa:	2908      	cmp	r1, #8
 800b9ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b9b0:	dc02      	bgt.n	800b9b8 <_strtod_l+0x2e8>
 800b9b2:	4576      	cmp	r6, lr
 800b9b4:	bfa8      	it	ge
 800b9b6:	4676      	movge	r6, lr
 800b9b8:	f1bc 0f00 	cmp.w	ip, #0
 800b9bc:	d000      	beq.n	800b9c0 <_strtod_l+0x2f0>
 800b9be:	4276      	negs	r6, r6
 800b9c0:	2d00      	cmp	r5, #0
 800b9c2:	d14d      	bne.n	800ba60 <_strtod_l+0x390>
 800b9c4:	9904      	ldr	r1, [sp, #16]
 800b9c6:	4301      	orrs	r1, r0
 800b9c8:	f47f aec6 	bne.w	800b758 <_strtod_l+0x88>
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f47f aee1 	bne.w	800b794 <_strtod_l+0xc4>
 800b9d2:	2a69      	cmp	r2, #105	; 0x69
 800b9d4:	d027      	beq.n	800ba26 <_strtod_l+0x356>
 800b9d6:	dc24      	bgt.n	800ba22 <_strtod_l+0x352>
 800b9d8:	2a49      	cmp	r2, #73	; 0x49
 800b9da:	d024      	beq.n	800ba26 <_strtod_l+0x356>
 800b9dc:	2a4e      	cmp	r2, #78	; 0x4e
 800b9de:	f47f aed9 	bne.w	800b794 <_strtod_l+0xc4>
 800b9e2:	499f      	ldr	r1, [pc, #636]	; (800bc60 <_strtod_l+0x590>)
 800b9e4:	a817      	add	r0, sp, #92	; 0x5c
 800b9e6:	f001 ff17 	bl	800d818 <__match>
 800b9ea:	2800      	cmp	r0, #0
 800b9ec:	f43f aed2 	beq.w	800b794 <_strtod_l+0xc4>
 800b9f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	2b28      	cmp	r3, #40	; 0x28
 800b9f6:	d12d      	bne.n	800ba54 <_strtod_l+0x384>
 800b9f8:	499a      	ldr	r1, [pc, #616]	; (800bc64 <_strtod_l+0x594>)
 800b9fa:	aa1a      	add	r2, sp, #104	; 0x68
 800b9fc:	a817      	add	r0, sp, #92	; 0x5c
 800b9fe:	f001 ff1f 	bl	800d840 <__hexnan>
 800ba02:	2805      	cmp	r0, #5
 800ba04:	d126      	bne.n	800ba54 <_strtod_l+0x384>
 800ba06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba08:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ba0c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ba10:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ba14:	e6a0      	b.n	800b758 <_strtod_l+0x88>
 800ba16:	210a      	movs	r1, #10
 800ba18:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ba1c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ba20:	e7b9      	b.n	800b996 <_strtod_l+0x2c6>
 800ba22:	2a6e      	cmp	r2, #110	; 0x6e
 800ba24:	e7db      	b.n	800b9de <_strtod_l+0x30e>
 800ba26:	4990      	ldr	r1, [pc, #576]	; (800bc68 <_strtod_l+0x598>)
 800ba28:	a817      	add	r0, sp, #92	; 0x5c
 800ba2a:	f001 fef5 	bl	800d818 <__match>
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	f43f aeb0 	beq.w	800b794 <_strtod_l+0xc4>
 800ba34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba36:	498d      	ldr	r1, [pc, #564]	; (800bc6c <_strtod_l+0x59c>)
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	a817      	add	r0, sp, #92	; 0x5c
 800ba3c:	9317      	str	r3, [sp, #92]	; 0x5c
 800ba3e:	f001 feeb 	bl	800d818 <__match>
 800ba42:	b910      	cbnz	r0, 800ba4a <_strtod_l+0x37a>
 800ba44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba46:	3301      	adds	r3, #1
 800ba48:	9317      	str	r3, [sp, #92]	; 0x5c
 800ba4a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800bc7c <_strtod_l+0x5ac>
 800ba4e:	f04f 0a00 	mov.w	sl, #0
 800ba52:	e681      	b.n	800b758 <_strtod_l+0x88>
 800ba54:	4886      	ldr	r0, [pc, #536]	; (800bc70 <_strtod_l+0x5a0>)
 800ba56:	f002 ff4b 	bl	800e8f0 <nan>
 800ba5a:	ec5b ab10 	vmov	sl, fp, d0
 800ba5e:	e67b      	b.n	800b758 <_strtod_l+0x88>
 800ba60:	9b05      	ldr	r3, [sp, #20]
 800ba62:	9807      	ldr	r0, [sp, #28]
 800ba64:	1af3      	subs	r3, r6, r3
 800ba66:	2f00      	cmp	r7, #0
 800ba68:	bf08      	it	eq
 800ba6a:	462f      	moveq	r7, r5
 800ba6c:	2d10      	cmp	r5, #16
 800ba6e:	9306      	str	r3, [sp, #24]
 800ba70:	46a8      	mov	r8, r5
 800ba72:	bfa8      	it	ge
 800ba74:	f04f 0810 	movge.w	r8, #16
 800ba78:	f7f4 fd44 	bl	8000504 <__aeabi_ui2d>
 800ba7c:	2d09      	cmp	r5, #9
 800ba7e:	4682      	mov	sl, r0
 800ba80:	468b      	mov	fp, r1
 800ba82:	dd13      	ble.n	800baac <_strtod_l+0x3dc>
 800ba84:	4b7b      	ldr	r3, [pc, #492]	; (800bc74 <_strtod_l+0x5a4>)
 800ba86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ba8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ba8e:	f7f4 fdb3 	bl	80005f8 <__aeabi_dmul>
 800ba92:	4682      	mov	sl, r0
 800ba94:	4648      	mov	r0, r9
 800ba96:	468b      	mov	fp, r1
 800ba98:	f7f4 fd34 	bl	8000504 <__aeabi_ui2d>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	460b      	mov	r3, r1
 800baa0:	4650      	mov	r0, sl
 800baa2:	4659      	mov	r1, fp
 800baa4:	f7f4 fbf2 	bl	800028c <__adddf3>
 800baa8:	4682      	mov	sl, r0
 800baaa:	468b      	mov	fp, r1
 800baac:	2d0f      	cmp	r5, #15
 800baae:	dc38      	bgt.n	800bb22 <_strtod_l+0x452>
 800bab0:	9b06      	ldr	r3, [sp, #24]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	f43f ae50 	beq.w	800b758 <_strtod_l+0x88>
 800bab8:	dd24      	ble.n	800bb04 <_strtod_l+0x434>
 800baba:	2b16      	cmp	r3, #22
 800babc:	dc0b      	bgt.n	800bad6 <_strtod_l+0x406>
 800babe:	496d      	ldr	r1, [pc, #436]	; (800bc74 <_strtod_l+0x5a4>)
 800bac0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bac8:	4652      	mov	r2, sl
 800baca:	465b      	mov	r3, fp
 800bacc:	f7f4 fd94 	bl	80005f8 <__aeabi_dmul>
 800bad0:	4682      	mov	sl, r0
 800bad2:	468b      	mov	fp, r1
 800bad4:	e640      	b.n	800b758 <_strtod_l+0x88>
 800bad6:	9a06      	ldr	r2, [sp, #24]
 800bad8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800badc:	4293      	cmp	r3, r2
 800bade:	db20      	blt.n	800bb22 <_strtod_l+0x452>
 800bae0:	4c64      	ldr	r4, [pc, #400]	; (800bc74 <_strtod_l+0x5a4>)
 800bae2:	f1c5 050f 	rsb	r5, r5, #15
 800bae6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800baea:	4652      	mov	r2, sl
 800baec:	465b      	mov	r3, fp
 800baee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baf2:	f7f4 fd81 	bl	80005f8 <__aeabi_dmul>
 800baf6:	9b06      	ldr	r3, [sp, #24]
 800baf8:	1b5d      	subs	r5, r3, r5
 800bafa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bafe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bb02:	e7e3      	b.n	800bacc <_strtod_l+0x3fc>
 800bb04:	9b06      	ldr	r3, [sp, #24]
 800bb06:	3316      	adds	r3, #22
 800bb08:	db0b      	blt.n	800bb22 <_strtod_l+0x452>
 800bb0a:	9b05      	ldr	r3, [sp, #20]
 800bb0c:	1b9e      	subs	r6, r3, r6
 800bb0e:	4b59      	ldr	r3, [pc, #356]	; (800bc74 <_strtod_l+0x5a4>)
 800bb10:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800bb14:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb18:	4650      	mov	r0, sl
 800bb1a:	4659      	mov	r1, fp
 800bb1c:	f7f4 fe96 	bl	800084c <__aeabi_ddiv>
 800bb20:	e7d6      	b.n	800bad0 <_strtod_l+0x400>
 800bb22:	9b06      	ldr	r3, [sp, #24]
 800bb24:	eba5 0808 	sub.w	r8, r5, r8
 800bb28:	4498      	add	r8, r3
 800bb2a:	f1b8 0f00 	cmp.w	r8, #0
 800bb2e:	dd74      	ble.n	800bc1a <_strtod_l+0x54a>
 800bb30:	f018 030f 	ands.w	r3, r8, #15
 800bb34:	d00a      	beq.n	800bb4c <_strtod_l+0x47c>
 800bb36:	494f      	ldr	r1, [pc, #316]	; (800bc74 <_strtod_l+0x5a4>)
 800bb38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bb3c:	4652      	mov	r2, sl
 800bb3e:	465b      	mov	r3, fp
 800bb40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb44:	f7f4 fd58 	bl	80005f8 <__aeabi_dmul>
 800bb48:	4682      	mov	sl, r0
 800bb4a:	468b      	mov	fp, r1
 800bb4c:	f038 080f 	bics.w	r8, r8, #15
 800bb50:	d04f      	beq.n	800bbf2 <_strtod_l+0x522>
 800bb52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bb56:	dd22      	ble.n	800bb9e <_strtod_l+0x4ce>
 800bb58:	2500      	movs	r5, #0
 800bb5a:	462e      	mov	r6, r5
 800bb5c:	9507      	str	r5, [sp, #28]
 800bb5e:	9505      	str	r5, [sp, #20]
 800bb60:	2322      	movs	r3, #34	; 0x22
 800bb62:	f8df b118 	ldr.w	fp, [pc, #280]	; 800bc7c <_strtod_l+0x5ac>
 800bb66:	6023      	str	r3, [r4, #0]
 800bb68:	f04f 0a00 	mov.w	sl, #0
 800bb6c:	9b07      	ldr	r3, [sp, #28]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	f43f adf2 	beq.w	800b758 <_strtod_l+0x88>
 800bb74:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bb76:	4620      	mov	r0, r4
 800bb78:	f001 ff6e 	bl	800da58 <_Bfree>
 800bb7c:	9905      	ldr	r1, [sp, #20]
 800bb7e:	4620      	mov	r0, r4
 800bb80:	f001 ff6a 	bl	800da58 <_Bfree>
 800bb84:	4631      	mov	r1, r6
 800bb86:	4620      	mov	r0, r4
 800bb88:	f001 ff66 	bl	800da58 <_Bfree>
 800bb8c:	9907      	ldr	r1, [sp, #28]
 800bb8e:	4620      	mov	r0, r4
 800bb90:	f001 ff62 	bl	800da58 <_Bfree>
 800bb94:	4629      	mov	r1, r5
 800bb96:	4620      	mov	r0, r4
 800bb98:	f001 ff5e 	bl	800da58 <_Bfree>
 800bb9c:	e5dc      	b.n	800b758 <_strtod_l+0x88>
 800bb9e:	4b36      	ldr	r3, [pc, #216]	; (800bc78 <_strtod_l+0x5a8>)
 800bba0:	9304      	str	r3, [sp, #16]
 800bba2:	2300      	movs	r3, #0
 800bba4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bba8:	4650      	mov	r0, sl
 800bbaa:	4659      	mov	r1, fp
 800bbac:	4699      	mov	r9, r3
 800bbae:	f1b8 0f01 	cmp.w	r8, #1
 800bbb2:	dc21      	bgt.n	800bbf8 <_strtod_l+0x528>
 800bbb4:	b10b      	cbz	r3, 800bbba <_strtod_l+0x4ea>
 800bbb6:	4682      	mov	sl, r0
 800bbb8:	468b      	mov	fp, r1
 800bbba:	4b2f      	ldr	r3, [pc, #188]	; (800bc78 <_strtod_l+0x5a8>)
 800bbbc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bbc0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800bbc4:	4652      	mov	r2, sl
 800bbc6:	465b      	mov	r3, fp
 800bbc8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800bbcc:	f7f4 fd14 	bl	80005f8 <__aeabi_dmul>
 800bbd0:	4b2a      	ldr	r3, [pc, #168]	; (800bc7c <_strtod_l+0x5ac>)
 800bbd2:	460a      	mov	r2, r1
 800bbd4:	400b      	ands	r3, r1
 800bbd6:	492a      	ldr	r1, [pc, #168]	; (800bc80 <_strtod_l+0x5b0>)
 800bbd8:	428b      	cmp	r3, r1
 800bbda:	4682      	mov	sl, r0
 800bbdc:	d8bc      	bhi.n	800bb58 <_strtod_l+0x488>
 800bbde:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bbe2:	428b      	cmp	r3, r1
 800bbe4:	bf86      	itte	hi
 800bbe6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800bc84 <_strtod_l+0x5b4>
 800bbea:	f04f 3aff 	movhi.w	sl, #4294967295
 800bbee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	9304      	str	r3, [sp, #16]
 800bbf6:	e084      	b.n	800bd02 <_strtod_l+0x632>
 800bbf8:	f018 0f01 	tst.w	r8, #1
 800bbfc:	d005      	beq.n	800bc0a <_strtod_l+0x53a>
 800bbfe:	9b04      	ldr	r3, [sp, #16]
 800bc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc04:	f7f4 fcf8 	bl	80005f8 <__aeabi_dmul>
 800bc08:	2301      	movs	r3, #1
 800bc0a:	9a04      	ldr	r2, [sp, #16]
 800bc0c:	3208      	adds	r2, #8
 800bc0e:	f109 0901 	add.w	r9, r9, #1
 800bc12:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bc16:	9204      	str	r2, [sp, #16]
 800bc18:	e7c9      	b.n	800bbae <_strtod_l+0x4de>
 800bc1a:	d0ea      	beq.n	800bbf2 <_strtod_l+0x522>
 800bc1c:	f1c8 0800 	rsb	r8, r8, #0
 800bc20:	f018 020f 	ands.w	r2, r8, #15
 800bc24:	d00a      	beq.n	800bc3c <_strtod_l+0x56c>
 800bc26:	4b13      	ldr	r3, [pc, #76]	; (800bc74 <_strtod_l+0x5a4>)
 800bc28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc2c:	4650      	mov	r0, sl
 800bc2e:	4659      	mov	r1, fp
 800bc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc34:	f7f4 fe0a 	bl	800084c <__aeabi_ddiv>
 800bc38:	4682      	mov	sl, r0
 800bc3a:	468b      	mov	fp, r1
 800bc3c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bc40:	d0d7      	beq.n	800bbf2 <_strtod_l+0x522>
 800bc42:	f1b8 0f1f 	cmp.w	r8, #31
 800bc46:	dd1f      	ble.n	800bc88 <_strtod_l+0x5b8>
 800bc48:	2500      	movs	r5, #0
 800bc4a:	462e      	mov	r6, r5
 800bc4c:	9507      	str	r5, [sp, #28]
 800bc4e:	9505      	str	r5, [sp, #20]
 800bc50:	2322      	movs	r3, #34	; 0x22
 800bc52:	f04f 0a00 	mov.w	sl, #0
 800bc56:	f04f 0b00 	mov.w	fp, #0
 800bc5a:	6023      	str	r3, [r4, #0]
 800bc5c:	e786      	b.n	800bb6c <_strtod_l+0x49c>
 800bc5e:	bf00      	nop
 800bc60:	0800f659 	.word	0x0800f659
 800bc64:	0800f69c 	.word	0x0800f69c
 800bc68:	0800f651 	.word	0x0800f651
 800bc6c:	0800f8b1 	.word	0x0800f8b1
 800bc70:	0800f7ac 	.word	0x0800f7ac
 800bc74:	0800fa28 	.word	0x0800fa28
 800bc78:	0800fa00 	.word	0x0800fa00
 800bc7c:	7ff00000 	.word	0x7ff00000
 800bc80:	7ca00000 	.word	0x7ca00000
 800bc84:	7fefffff 	.word	0x7fefffff
 800bc88:	f018 0310 	ands.w	r3, r8, #16
 800bc8c:	bf18      	it	ne
 800bc8e:	236a      	movne	r3, #106	; 0x6a
 800bc90:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c040 <_strtod_l+0x970>
 800bc94:	9304      	str	r3, [sp, #16]
 800bc96:	4650      	mov	r0, sl
 800bc98:	4659      	mov	r1, fp
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	f018 0f01 	tst.w	r8, #1
 800bca0:	d004      	beq.n	800bcac <_strtod_l+0x5dc>
 800bca2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bca6:	f7f4 fca7 	bl	80005f8 <__aeabi_dmul>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	ea5f 0868 	movs.w	r8, r8, asr #1
 800bcb0:	f109 0908 	add.w	r9, r9, #8
 800bcb4:	d1f2      	bne.n	800bc9c <_strtod_l+0x5cc>
 800bcb6:	b10b      	cbz	r3, 800bcbc <_strtod_l+0x5ec>
 800bcb8:	4682      	mov	sl, r0
 800bcba:	468b      	mov	fp, r1
 800bcbc:	9b04      	ldr	r3, [sp, #16]
 800bcbe:	b1c3      	cbz	r3, 800bcf2 <_strtod_l+0x622>
 800bcc0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bcc4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	4659      	mov	r1, fp
 800bccc:	dd11      	ble.n	800bcf2 <_strtod_l+0x622>
 800bcce:	2b1f      	cmp	r3, #31
 800bcd0:	f340 8124 	ble.w	800bf1c <_strtod_l+0x84c>
 800bcd4:	2b34      	cmp	r3, #52	; 0x34
 800bcd6:	bfde      	ittt	le
 800bcd8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bcdc:	f04f 33ff 	movle.w	r3, #4294967295
 800bce0:	fa03 f202 	lslle.w	r2, r3, r2
 800bce4:	f04f 0a00 	mov.w	sl, #0
 800bce8:	bfcc      	ite	gt
 800bcea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bcee:	ea02 0b01 	andle.w	fp, r2, r1
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	4650      	mov	r0, sl
 800bcf8:	4659      	mov	r1, fp
 800bcfa:	f7f4 fee5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	d1a2      	bne.n	800bc48 <_strtod_l+0x578>
 800bd02:	9b07      	ldr	r3, [sp, #28]
 800bd04:	9300      	str	r3, [sp, #0]
 800bd06:	9908      	ldr	r1, [sp, #32]
 800bd08:	462b      	mov	r3, r5
 800bd0a:	463a      	mov	r2, r7
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	f001 ff0b 	bl	800db28 <__s2b>
 800bd12:	9007      	str	r0, [sp, #28]
 800bd14:	2800      	cmp	r0, #0
 800bd16:	f43f af1f 	beq.w	800bb58 <_strtod_l+0x488>
 800bd1a:	9b05      	ldr	r3, [sp, #20]
 800bd1c:	1b9e      	subs	r6, r3, r6
 800bd1e:	9b06      	ldr	r3, [sp, #24]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	bfb4      	ite	lt
 800bd24:	4633      	movlt	r3, r6
 800bd26:	2300      	movge	r3, #0
 800bd28:	930c      	str	r3, [sp, #48]	; 0x30
 800bd2a:	9b06      	ldr	r3, [sp, #24]
 800bd2c:	2500      	movs	r5, #0
 800bd2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bd32:	9312      	str	r3, [sp, #72]	; 0x48
 800bd34:	462e      	mov	r6, r5
 800bd36:	9b07      	ldr	r3, [sp, #28]
 800bd38:	4620      	mov	r0, r4
 800bd3a:	6859      	ldr	r1, [r3, #4]
 800bd3c:	f001 fe4c 	bl	800d9d8 <_Balloc>
 800bd40:	9005      	str	r0, [sp, #20]
 800bd42:	2800      	cmp	r0, #0
 800bd44:	f43f af0c 	beq.w	800bb60 <_strtod_l+0x490>
 800bd48:	9b07      	ldr	r3, [sp, #28]
 800bd4a:	691a      	ldr	r2, [r3, #16]
 800bd4c:	3202      	adds	r2, #2
 800bd4e:	f103 010c 	add.w	r1, r3, #12
 800bd52:	0092      	lsls	r2, r2, #2
 800bd54:	300c      	adds	r0, #12
 800bd56:	f001 fe25 	bl	800d9a4 <memcpy>
 800bd5a:	ec4b ab10 	vmov	d0, sl, fp
 800bd5e:	aa1a      	add	r2, sp, #104	; 0x68
 800bd60:	a919      	add	r1, sp, #100	; 0x64
 800bd62:	4620      	mov	r0, r4
 800bd64:	f002 fa26 	bl	800e1b4 <__d2b>
 800bd68:	ec4b ab18 	vmov	d8, sl, fp
 800bd6c:	9018      	str	r0, [sp, #96]	; 0x60
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	f43f aef6 	beq.w	800bb60 <_strtod_l+0x490>
 800bd74:	2101      	movs	r1, #1
 800bd76:	4620      	mov	r0, r4
 800bd78:	f001 ff70 	bl	800dc5c <__i2b>
 800bd7c:	4606      	mov	r6, r0
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	f43f aeee 	beq.w	800bb60 <_strtod_l+0x490>
 800bd84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bd86:	9904      	ldr	r1, [sp, #16]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	bfab      	itete	ge
 800bd8c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800bd8e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800bd90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bd92:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800bd96:	bfac      	ite	ge
 800bd98:	eb03 0902 	addge.w	r9, r3, r2
 800bd9c:	1ad7      	sublt	r7, r2, r3
 800bd9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bda0:	eba3 0801 	sub.w	r8, r3, r1
 800bda4:	4490      	add	r8, r2
 800bda6:	4ba1      	ldr	r3, [pc, #644]	; (800c02c <_strtod_l+0x95c>)
 800bda8:	f108 38ff 	add.w	r8, r8, #4294967295
 800bdac:	4598      	cmp	r8, r3
 800bdae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bdb2:	f280 80c7 	bge.w	800bf44 <_strtod_l+0x874>
 800bdb6:	eba3 0308 	sub.w	r3, r3, r8
 800bdba:	2b1f      	cmp	r3, #31
 800bdbc:	eba2 0203 	sub.w	r2, r2, r3
 800bdc0:	f04f 0101 	mov.w	r1, #1
 800bdc4:	f300 80b1 	bgt.w	800bf2a <_strtod_l+0x85a>
 800bdc8:	fa01 f303 	lsl.w	r3, r1, r3
 800bdcc:	930d      	str	r3, [sp, #52]	; 0x34
 800bdce:	2300      	movs	r3, #0
 800bdd0:	9308      	str	r3, [sp, #32]
 800bdd2:	eb09 0802 	add.w	r8, r9, r2
 800bdd6:	9b04      	ldr	r3, [sp, #16]
 800bdd8:	45c1      	cmp	r9, r8
 800bdda:	4417      	add	r7, r2
 800bddc:	441f      	add	r7, r3
 800bdde:	464b      	mov	r3, r9
 800bde0:	bfa8      	it	ge
 800bde2:	4643      	movge	r3, r8
 800bde4:	42bb      	cmp	r3, r7
 800bde6:	bfa8      	it	ge
 800bde8:	463b      	movge	r3, r7
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	bfc2      	ittt	gt
 800bdee:	eba8 0803 	subgt.w	r8, r8, r3
 800bdf2:	1aff      	subgt	r7, r7, r3
 800bdf4:	eba9 0903 	subgt.w	r9, r9, r3
 800bdf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	dd17      	ble.n	800be2e <_strtod_l+0x75e>
 800bdfe:	4631      	mov	r1, r6
 800be00:	461a      	mov	r2, r3
 800be02:	4620      	mov	r0, r4
 800be04:	f001 ffea 	bl	800dddc <__pow5mult>
 800be08:	4606      	mov	r6, r0
 800be0a:	2800      	cmp	r0, #0
 800be0c:	f43f aea8 	beq.w	800bb60 <_strtod_l+0x490>
 800be10:	4601      	mov	r1, r0
 800be12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800be14:	4620      	mov	r0, r4
 800be16:	f001 ff37 	bl	800dc88 <__multiply>
 800be1a:	900b      	str	r0, [sp, #44]	; 0x2c
 800be1c:	2800      	cmp	r0, #0
 800be1e:	f43f ae9f 	beq.w	800bb60 <_strtod_l+0x490>
 800be22:	9918      	ldr	r1, [sp, #96]	; 0x60
 800be24:	4620      	mov	r0, r4
 800be26:	f001 fe17 	bl	800da58 <_Bfree>
 800be2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be2c:	9318      	str	r3, [sp, #96]	; 0x60
 800be2e:	f1b8 0f00 	cmp.w	r8, #0
 800be32:	f300 808c 	bgt.w	800bf4e <_strtod_l+0x87e>
 800be36:	9b06      	ldr	r3, [sp, #24]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	dd08      	ble.n	800be4e <_strtod_l+0x77e>
 800be3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800be3e:	9905      	ldr	r1, [sp, #20]
 800be40:	4620      	mov	r0, r4
 800be42:	f001 ffcb 	bl	800dddc <__pow5mult>
 800be46:	9005      	str	r0, [sp, #20]
 800be48:	2800      	cmp	r0, #0
 800be4a:	f43f ae89 	beq.w	800bb60 <_strtod_l+0x490>
 800be4e:	2f00      	cmp	r7, #0
 800be50:	dd08      	ble.n	800be64 <_strtod_l+0x794>
 800be52:	9905      	ldr	r1, [sp, #20]
 800be54:	463a      	mov	r2, r7
 800be56:	4620      	mov	r0, r4
 800be58:	f002 f81a 	bl	800de90 <__lshift>
 800be5c:	9005      	str	r0, [sp, #20]
 800be5e:	2800      	cmp	r0, #0
 800be60:	f43f ae7e 	beq.w	800bb60 <_strtod_l+0x490>
 800be64:	f1b9 0f00 	cmp.w	r9, #0
 800be68:	dd08      	ble.n	800be7c <_strtod_l+0x7ac>
 800be6a:	4631      	mov	r1, r6
 800be6c:	464a      	mov	r2, r9
 800be6e:	4620      	mov	r0, r4
 800be70:	f002 f80e 	bl	800de90 <__lshift>
 800be74:	4606      	mov	r6, r0
 800be76:	2800      	cmp	r0, #0
 800be78:	f43f ae72 	beq.w	800bb60 <_strtod_l+0x490>
 800be7c:	9a05      	ldr	r2, [sp, #20]
 800be7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800be80:	4620      	mov	r0, r4
 800be82:	f002 f891 	bl	800dfa8 <__mdiff>
 800be86:	4605      	mov	r5, r0
 800be88:	2800      	cmp	r0, #0
 800be8a:	f43f ae69 	beq.w	800bb60 <_strtod_l+0x490>
 800be8e:	68c3      	ldr	r3, [r0, #12]
 800be90:	930b      	str	r3, [sp, #44]	; 0x2c
 800be92:	2300      	movs	r3, #0
 800be94:	60c3      	str	r3, [r0, #12]
 800be96:	4631      	mov	r1, r6
 800be98:	f002 f86a 	bl	800df70 <__mcmp>
 800be9c:	2800      	cmp	r0, #0
 800be9e:	da60      	bge.n	800bf62 <_strtod_l+0x892>
 800bea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bea2:	ea53 030a 	orrs.w	r3, r3, sl
 800bea6:	f040 8082 	bne.w	800bfae <_strtod_l+0x8de>
 800beaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d17d      	bne.n	800bfae <_strtod_l+0x8de>
 800beb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800beb6:	0d1b      	lsrs	r3, r3, #20
 800beb8:	051b      	lsls	r3, r3, #20
 800beba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bebe:	d976      	bls.n	800bfae <_strtod_l+0x8de>
 800bec0:	696b      	ldr	r3, [r5, #20]
 800bec2:	b913      	cbnz	r3, 800beca <_strtod_l+0x7fa>
 800bec4:	692b      	ldr	r3, [r5, #16]
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	dd71      	ble.n	800bfae <_strtod_l+0x8de>
 800beca:	4629      	mov	r1, r5
 800becc:	2201      	movs	r2, #1
 800bece:	4620      	mov	r0, r4
 800bed0:	f001 ffde 	bl	800de90 <__lshift>
 800bed4:	4631      	mov	r1, r6
 800bed6:	4605      	mov	r5, r0
 800bed8:	f002 f84a 	bl	800df70 <__mcmp>
 800bedc:	2800      	cmp	r0, #0
 800bede:	dd66      	ble.n	800bfae <_strtod_l+0x8de>
 800bee0:	9904      	ldr	r1, [sp, #16]
 800bee2:	4a53      	ldr	r2, [pc, #332]	; (800c030 <_strtod_l+0x960>)
 800bee4:	465b      	mov	r3, fp
 800bee6:	2900      	cmp	r1, #0
 800bee8:	f000 8081 	beq.w	800bfee <_strtod_l+0x91e>
 800beec:	ea02 010b 	and.w	r1, r2, fp
 800bef0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bef4:	dc7b      	bgt.n	800bfee <_strtod_l+0x91e>
 800bef6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800befa:	f77f aea9 	ble.w	800bc50 <_strtod_l+0x580>
 800befe:	4b4d      	ldr	r3, [pc, #308]	; (800c034 <_strtod_l+0x964>)
 800bf00:	4650      	mov	r0, sl
 800bf02:	4659      	mov	r1, fp
 800bf04:	2200      	movs	r2, #0
 800bf06:	f7f4 fb77 	bl	80005f8 <__aeabi_dmul>
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	4303      	orrs	r3, r0
 800bf0e:	bf08      	it	eq
 800bf10:	2322      	moveq	r3, #34	; 0x22
 800bf12:	4682      	mov	sl, r0
 800bf14:	468b      	mov	fp, r1
 800bf16:	bf08      	it	eq
 800bf18:	6023      	streq	r3, [r4, #0]
 800bf1a:	e62b      	b.n	800bb74 <_strtod_l+0x4a4>
 800bf1c:	f04f 32ff 	mov.w	r2, #4294967295
 800bf20:	fa02 f303 	lsl.w	r3, r2, r3
 800bf24:	ea03 0a0a 	and.w	sl, r3, sl
 800bf28:	e6e3      	b.n	800bcf2 <_strtod_l+0x622>
 800bf2a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800bf2e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800bf32:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800bf36:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800bf3a:	fa01 f308 	lsl.w	r3, r1, r8
 800bf3e:	9308      	str	r3, [sp, #32]
 800bf40:	910d      	str	r1, [sp, #52]	; 0x34
 800bf42:	e746      	b.n	800bdd2 <_strtod_l+0x702>
 800bf44:	2300      	movs	r3, #0
 800bf46:	9308      	str	r3, [sp, #32]
 800bf48:	2301      	movs	r3, #1
 800bf4a:	930d      	str	r3, [sp, #52]	; 0x34
 800bf4c:	e741      	b.n	800bdd2 <_strtod_l+0x702>
 800bf4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bf50:	4642      	mov	r2, r8
 800bf52:	4620      	mov	r0, r4
 800bf54:	f001 ff9c 	bl	800de90 <__lshift>
 800bf58:	9018      	str	r0, [sp, #96]	; 0x60
 800bf5a:	2800      	cmp	r0, #0
 800bf5c:	f47f af6b 	bne.w	800be36 <_strtod_l+0x766>
 800bf60:	e5fe      	b.n	800bb60 <_strtod_l+0x490>
 800bf62:	465f      	mov	r7, fp
 800bf64:	d16e      	bne.n	800c044 <_strtod_l+0x974>
 800bf66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf6c:	b342      	cbz	r2, 800bfc0 <_strtod_l+0x8f0>
 800bf6e:	4a32      	ldr	r2, [pc, #200]	; (800c038 <_strtod_l+0x968>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d128      	bne.n	800bfc6 <_strtod_l+0x8f6>
 800bf74:	9b04      	ldr	r3, [sp, #16]
 800bf76:	4651      	mov	r1, sl
 800bf78:	b1eb      	cbz	r3, 800bfb6 <_strtod_l+0x8e6>
 800bf7a:	4b2d      	ldr	r3, [pc, #180]	; (800c030 <_strtod_l+0x960>)
 800bf7c:	403b      	ands	r3, r7
 800bf7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bf82:	f04f 32ff 	mov.w	r2, #4294967295
 800bf86:	d819      	bhi.n	800bfbc <_strtod_l+0x8ec>
 800bf88:	0d1b      	lsrs	r3, r3, #20
 800bf8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bf8e:	fa02 f303 	lsl.w	r3, r2, r3
 800bf92:	4299      	cmp	r1, r3
 800bf94:	d117      	bne.n	800bfc6 <_strtod_l+0x8f6>
 800bf96:	4b29      	ldr	r3, [pc, #164]	; (800c03c <_strtod_l+0x96c>)
 800bf98:	429f      	cmp	r7, r3
 800bf9a:	d102      	bne.n	800bfa2 <_strtod_l+0x8d2>
 800bf9c:	3101      	adds	r1, #1
 800bf9e:	f43f addf 	beq.w	800bb60 <_strtod_l+0x490>
 800bfa2:	4b23      	ldr	r3, [pc, #140]	; (800c030 <_strtod_l+0x960>)
 800bfa4:	403b      	ands	r3, r7
 800bfa6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bfaa:	f04f 0a00 	mov.w	sl, #0
 800bfae:	9b04      	ldr	r3, [sp, #16]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d1a4      	bne.n	800befe <_strtod_l+0x82e>
 800bfb4:	e5de      	b.n	800bb74 <_strtod_l+0x4a4>
 800bfb6:	f04f 33ff 	mov.w	r3, #4294967295
 800bfba:	e7ea      	b.n	800bf92 <_strtod_l+0x8c2>
 800bfbc:	4613      	mov	r3, r2
 800bfbe:	e7e8      	b.n	800bf92 <_strtod_l+0x8c2>
 800bfc0:	ea53 030a 	orrs.w	r3, r3, sl
 800bfc4:	d08c      	beq.n	800bee0 <_strtod_l+0x810>
 800bfc6:	9b08      	ldr	r3, [sp, #32]
 800bfc8:	b1db      	cbz	r3, 800c002 <_strtod_l+0x932>
 800bfca:	423b      	tst	r3, r7
 800bfcc:	d0ef      	beq.n	800bfae <_strtod_l+0x8de>
 800bfce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfd0:	9a04      	ldr	r2, [sp, #16]
 800bfd2:	4650      	mov	r0, sl
 800bfd4:	4659      	mov	r1, fp
 800bfd6:	b1c3      	cbz	r3, 800c00a <_strtod_l+0x93a>
 800bfd8:	f7ff fb5e 	bl	800b698 <sulp>
 800bfdc:	4602      	mov	r2, r0
 800bfde:	460b      	mov	r3, r1
 800bfe0:	ec51 0b18 	vmov	r0, r1, d8
 800bfe4:	f7f4 f952 	bl	800028c <__adddf3>
 800bfe8:	4682      	mov	sl, r0
 800bfea:	468b      	mov	fp, r1
 800bfec:	e7df      	b.n	800bfae <_strtod_l+0x8de>
 800bfee:	4013      	ands	r3, r2
 800bff0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bff4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bff8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bffc:	f04f 3aff 	mov.w	sl, #4294967295
 800c000:	e7d5      	b.n	800bfae <_strtod_l+0x8de>
 800c002:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c004:	ea13 0f0a 	tst.w	r3, sl
 800c008:	e7e0      	b.n	800bfcc <_strtod_l+0x8fc>
 800c00a:	f7ff fb45 	bl	800b698 <sulp>
 800c00e:	4602      	mov	r2, r0
 800c010:	460b      	mov	r3, r1
 800c012:	ec51 0b18 	vmov	r0, r1, d8
 800c016:	f7f4 f937 	bl	8000288 <__aeabi_dsub>
 800c01a:	2200      	movs	r2, #0
 800c01c:	2300      	movs	r3, #0
 800c01e:	4682      	mov	sl, r0
 800c020:	468b      	mov	fp, r1
 800c022:	f7f4 fd51 	bl	8000ac8 <__aeabi_dcmpeq>
 800c026:	2800      	cmp	r0, #0
 800c028:	d0c1      	beq.n	800bfae <_strtod_l+0x8de>
 800c02a:	e611      	b.n	800bc50 <_strtod_l+0x580>
 800c02c:	fffffc02 	.word	0xfffffc02
 800c030:	7ff00000 	.word	0x7ff00000
 800c034:	39500000 	.word	0x39500000
 800c038:	000fffff 	.word	0x000fffff
 800c03c:	7fefffff 	.word	0x7fefffff
 800c040:	0800f6b0 	.word	0x0800f6b0
 800c044:	4631      	mov	r1, r6
 800c046:	4628      	mov	r0, r5
 800c048:	f002 f910 	bl	800e26c <__ratio>
 800c04c:	ec59 8b10 	vmov	r8, r9, d0
 800c050:	ee10 0a10 	vmov	r0, s0
 800c054:	2200      	movs	r2, #0
 800c056:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c05a:	4649      	mov	r1, r9
 800c05c:	f7f4 fd48 	bl	8000af0 <__aeabi_dcmple>
 800c060:	2800      	cmp	r0, #0
 800c062:	d07a      	beq.n	800c15a <_strtod_l+0xa8a>
 800c064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c066:	2b00      	cmp	r3, #0
 800c068:	d04a      	beq.n	800c100 <_strtod_l+0xa30>
 800c06a:	4b95      	ldr	r3, [pc, #596]	; (800c2c0 <_strtod_l+0xbf0>)
 800c06c:	2200      	movs	r2, #0
 800c06e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c072:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c2c0 <_strtod_l+0xbf0>
 800c076:	f04f 0800 	mov.w	r8, #0
 800c07a:	4b92      	ldr	r3, [pc, #584]	; (800c2c4 <_strtod_l+0xbf4>)
 800c07c:	403b      	ands	r3, r7
 800c07e:	930d      	str	r3, [sp, #52]	; 0x34
 800c080:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c082:	4b91      	ldr	r3, [pc, #580]	; (800c2c8 <_strtod_l+0xbf8>)
 800c084:	429a      	cmp	r2, r3
 800c086:	f040 80b0 	bne.w	800c1ea <_strtod_l+0xb1a>
 800c08a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c08e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c092:	ec4b ab10 	vmov	d0, sl, fp
 800c096:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c09a:	f002 f80f 	bl	800e0bc <__ulp>
 800c09e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c0a2:	ec53 2b10 	vmov	r2, r3, d0
 800c0a6:	f7f4 faa7 	bl	80005f8 <__aeabi_dmul>
 800c0aa:	4652      	mov	r2, sl
 800c0ac:	465b      	mov	r3, fp
 800c0ae:	f7f4 f8ed 	bl	800028c <__adddf3>
 800c0b2:	460b      	mov	r3, r1
 800c0b4:	4983      	ldr	r1, [pc, #524]	; (800c2c4 <_strtod_l+0xbf4>)
 800c0b6:	4a85      	ldr	r2, [pc, #532]	; (800c2cc <_strtod_l+0xbfc>)
 800c0b8:	4019      	ands	r1, r3
 800c0ba:	4291      	cmp	r1, r2
 800c0bc:	4682      	mov	sl, r0
 800c0be:	d960      	bls.n	800c182 <_strtod_l+0xab2>
 800c0c0:	ee18 3a90 	vmov	r3, s17
 800c0c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d104      	bne.n	800c0d6 <_strtod_l+0xa06>
 800c0cc:	ee18 3a10 	vmov	r3, s16
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	f43f ad45 	beq.w	800bb60 <_strtod_l+0x490>
 800c0d6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c2d8 <_strtod_l+0xc08>
 800c0da:	f04f 3aff 	mov.w	sl, #4294967295
 800c0de:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	f001 fcb9 	bl	800da58 <_Bfree>
 800c0e6:	9905      	ldr	r1, [sp, #20]
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	f001 fcb5 	bl	800da58 <_Bfree>
 800c0ee:	4631      	mov	r1, r6
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	f001 fcb1 	bl	800da58 <_Bfree>
 800c0f6:	4629      	mov	r1, r5
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f001 fcad 	bl	800da58 <_Bfree>
 800c0fe:	e61a      	b.n	800bd36 <_strtod_l+0x666>
 800c100:	f1ba 0f00 	cmp.w	sl, #0
 800c104:	d11b      	bne.n	800c13e <_strtod_l+0xa6e>
 800c106:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c10a:	b9f3      	cbnz	r3, 800c14a <_strtod_l+0xa7a>
 800c10c:	4b6c      	ldr	r3, [pc, #432]	; (800c2c0 <_strtod_l+0xbf0>)
 800c10e:	2200      	movs	r2, #0
 800c110:	4640      	mov	r0, r8
 800c112:	4649      	mov	r1, r9
 800c114:	f7f4 fce2 	bl	8000adc <__aeabi_dcmplt>
 800c118:	b9d0      	cbnz	r0, 800c150 <_strtod_l+0xa80>
 800c11a:	4640      	mov	r0, r8
 800c11c:	4649      	mov	r1, r9
 800c11e:	4b6c      	ldr	r3, [pc, #432]	; (800c2d0 <_strtod_l+0xc00>)
 800c120:	2200      	movs	r2, #0
 800c122:	f7f4 fa69 	bl	80005f8 <__aeabi_dmul>
 800c126:	4680      	mov	r8, r0
 800c128:	4689      	mov	r9, r1
 800c12a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c12e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c132:	9315      	str	r3, [sp, #84]	; 0x54
 800c134:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c138:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c13c:	e79d      	b.n	800c07a <_strtod_l+0x9aa>
 800c13e:	f1ba 0f01 	cmp.w	sl, #1
 800c142:	d102      	bne.n	800c14a <_strtod_l+0xa7a>
 800c144:	2f00      	cmp	r7, #0
 800c146:	f43f ad83 	beq.w	800bc50 <_strtod_l+0x580>
 800c14a:	4b62      	ldr	r3, [pc, #392]	; (800c2d4 <_strtod_l+0xc04>)
 800c14c:	2200      	movs	r2, #0
 800c14e:	e78e      	b.n	800c06e <_strtod_l+0x99e>
 800c150:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c2d0 <_strtod_l+0xc00>
 800c154:	f04f 0800 	mov.w	r8, #0
 800c158:	e7e7      	b.n	800c12a <_strtod_l+0xa5a>
 800c15a:	4b5d      	ldr	r3, [pc, #372]	; (800c2d0 <_strtod_l+0xc00>)
 800c15c:	4640      	mov	r0, r8
 800c15e:	4649      	mov	r1, r9
 800c160:	2200      	movs	r2, #0
 800c162:	f7f4 fa49 	bl	80005f8 <__aeabi_dmul>
 800c166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c168:	4680      	mov	r8, r0
 800c16a:	4689      	mov	r9, r1
 800c16c:	b933      	cbnz	r3, 800c17c <_strtod_l+0xaac>
 800c16e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c172:	900e      	str	r0, [sp, #56]	; 0x38
 800c174:	930f      	str	r3, [sp, #60]	; 0x3c
 800c176:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c17a:	e7dd      	b.n	800c138 <_strtod_l+0xa68>
 800c17c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c180:	e7f9      	b.n	800c176 <_strtod_l+0xaa6>
 800c182:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c186:	9b04      	ldr	r3, [sp, #16]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d1a8      	bne.n	800c0de <_strtod_l+0xa0e>
 800c18c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c190:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c192:	0d1b      	lsrs	r3, r3, #20
 800c194:	051b      	lsls	r3, r3, #20
 800c196:	429a      	cmp	r2, r3
 800c198:	d1a1      	bne.n	800c0de <_strtod_l+0xa0e>
 800c19a:	4640      	mov	r0, r8
 800c19c:	4649      	mov	r1, r9
 800c19e:	f7f4 fd8b 	bl	8000cb8 <__aeabi_d2lz>
 800c1a2:	f7f4 f9fb 	bl	800059c <__aeabi_l2d>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	4640      	mov	r0, r8
 800c1ac:	4649      	mov	r1, r9
 800c1ae:	f7f4 f86b 	bl	8000288 <__aeabi_dsub>
 800c1b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c1b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c1b8:	ea43 030a 	orr.w	r3, r3, sl
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	4680      	mov	r8, r0
 800c1c0:	4689      	mov	r9, r1
 800c1c2:	d055      	beq.n	800c270 <_strtod_l+0xba0>
 800c1c4:	a336      	add	r3, pc, #216	; (adr r3, 800c2a0 <_strtod_l+0xbd0>)
 800c1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ca:	f7f4 fc87 	bl	8000adc <__aeabi_dcmplt>
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	f47f acd0 	bne.w	800bb74 <_strtod_l+0x4a4>
 800c1d4:	a334      	add	r3, pc, #208	; (adr r3, 800c2a8 <_strtod_l+0xbd8>)
 800c1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1da:	4640      	mov	r0, r8
 800c1dc:	4649      	mov	r1, r9
 800c1de:	f7f4 fc9b 	bl	8000b18 <__aeabi_dcmpgt>
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	f43f af7b 	beq.w	800c0de <_strtod_l+0xa0e>
 800c1e8:	e4c4      	b.n	800bb74 <_strtod_l+0x4a4>
 800c1ea:	9b04      	ldr	r3, [sp, #16]
 800c1ec:	b333      	cbz	r3, 800c23c <_strtod_l+0xb6c>
 800c1ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c1f4:	d822      	bhi.n	800c23c <_strtod_l+0xb6c>
 800c1f6:	a32e      	add	r3, pc, #184	; (adr r3, 800c2b0 <_strtod_l+0xbe0>)
 800c1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fc:	4640      	mov	r0, r8
 800c1fe:	4649      	mov	r1, r9
 800c200:	f7f4 fc76 	bl	8000af0 <__aeabi_dcmple>
 800c204:	b1a0      	cbz	r0, 800c230 <_strtod_l+0xb60>
 800c206:	4649      	mov	r1, r9
 800c208:	4640      	mov	r0, r8
 800c20a:	f7f4 fccd 	bl	8000ba8 <__aeabi_d2uiz>
 800c20e:	2801      	cmp	r0, #1
 800c210:	bf38      	it	cc
 800c212:	2001      	movcc	r0, #1
 800c214:	f7f4 f976 	bl	8000504 <__aeabi_ui2d>
 800c218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c21a:	4680      	mov	r8, r0
 800c21c:	4689      	mov	r9, r1
 800c21e:	bb23      	cbnz	r3, 800c26a <_strtod_l+0xb9a>
 800c220:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c224:	9010      	str	r0, [sp, #64]	; 0x40
 800c226:	9311      	str	r3, [sp, #68]	; 0x44
 800c228:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c22c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c232:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c234:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c238:	1a9b      	subs	r3, r3, r2
 800c23a:	9309      	str	r3, [sp, #36]	; 0x24
 800c23c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c240:	eeb0 0a48 	vmov.f32	s0, s16
 800c244:	eef0 0a68 	vmov.f32	s1, s17
 800c248:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c24c:	f001 ff36 	bl	800e0bc <__ulp>
 800c250:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c254:	ec53 2b10 	vmov	r2, r3, d0
 800c258:	f7f4 f9ce 	bl	80005f8 <__aeabi_dmul>
 800c25c:	ec53 2b18 	vmov	r2, r3, d8
 800c260:	f7f4 f814 	bl	800028c <__adddf3>
 800c264:	4682      	mov	sl, r0
 800c266:	468b      	mov	fp, r1
 800c268:	e78d      	b.n	800c186 <_strtod_l+0xab6>
 800c26a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c26e:	e7db      	b.n	800c228 <_strtod_l+0xb58>
 800c270:	a311      	add	r3, pc, #68	; (adr r3, 800c2b8 <_strtod_l+0xbe8>)
 800c272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c276:	f7f4 fc31 	bl	8000adc <__aeabi_dcmplt>
 800c27a:	e7b2      	b.n	800c1e2 <_strtod_l+0xb12>
 800c27c:	2300      	movs	r3, #0
 800c27e:	930a      	str	r3, [sp, #40]	; 0x28
 800c280:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c282:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c284:	6013      	str	r3, [r2, #0]
 800c286:	f7ff ba6b 	b.w	800b760 <_strtod_l+0x90>
 800c28a:	2a65      	cmp	r2, #101	; 0x65
 800c28c:	f43f ab5f 	beq.w	800b94e <_strtod_l+0x27e>
 800c290:	2a45      	cmp	r2, #69	; 0x45
 800c292:	f43f ab5c 	beq.w	800b94e <_strtod_l+0x27e>
 800c296:	2301      	movs	r3, #1
 800c298:	f7ff bb94 	b.w	800b9c4 <_strtod_l+0x2f4>
 800c29c:	f3af 8000 	nop.w
 800c2a0:	94a03595 	.word	0x94a03595
 800c2a4:	3fdfffff 	.word	0x3fdfffff
 800c2a8:	35afe535 	.word	0x35afe535
 800c2ac:	3fe00000 	.word	0x3fe00000
 800c2b0:	ffc00000 	.word	0xffc00000
 800c2b4:	41dfffff 	.word	0x41dfffff
 800c2b8:	94a03595 	.word	0x94a03595
 800c2bc:	3fcfffff 	.word	0x3fcfffff
 800c2c0:	3ff00000 	.word	0x3ff00000
 800c2c4:	7ff00000 	.word	0x7ff00000
 800c2c8:	7fe00000 	.word	0x7fe00000
 800c2cc:	7c9fffff 	.word	0x7c9fffff
 800c2d0:	3fe00000 	.word	0x3fe00000
 800c2d4:	bff00000 	.word	0xbff00000
 800c2d8:	7fefffff 	.word	0x7fefffff

0800c2dc <_strtod_r>:
 800c2dc:	4b01      	ldr	r3, [pc, #4]	; (800c2e4 <_strtod_r+0x8>)
 800c2de:	f7ff b9f7 	b.w	800b6d0 <_strtod_l>
 800c2e2:	bf00      	nop
 800c2e4:	2000009c 	.word	0x2000009c

0800c2e8 <strtok>:
 800c2e8:	4b16      	ldr	r3, [pc, #88]	; (800c344 <strtok+0x5c>)
 800c2ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c2ec:	681e      	ldr	r6, [r3, #0]
 800c2ee:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800c2f0:	4605      	mov	r5, r0
 800c2f2:	b9fc      	cbnz	r4, 800c334 <strtok+0x4c>
 800c2f4:	2050      	movs	r0, #80	; 0x50
 800c2f6:	9101      	str	r1, [sp, #4]
 800c2f8:	f7fe f9f6 	bl	800a6e8 <malloc>
 800c2fc:	9901      	ldr	r1, [sp, #4]
 800c2fe:	65b0      	str	r0, [r6, #88]	; 0x58
 800c300:	4602      	mov	r2, r0
 800c302:	b920      	cbnz	r0, 800c30e <strtok+0x26>
 800c304:	4b10      	ldr	r3, [pc, #64]	; (800c348 <strtok+0x60>)
 800c306:	4811      	ldr	r0, [pc, #68]	; (800c34c <strtok+0x64>)
 800c308:	2157      	movs	r1, #87	; 0x57
 800c30a:	f000 f919 	bl	800c540 <__assert_func>
 800c30e:	e9c0 4400 	strd	r4, r4, [r0]
 800c312:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c316:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c31a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c31e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c322:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c326:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c32a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c32e:	6184      	str	r4, [r0, #24]
 800c330:	7704      	strb	r4, [r0, #28]
 800c332:	6244      	str	r4, [r0, #36]	; 0x24
 800c334:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800c336:	2301      	movs	r3, #1
 800c338:	4628      	mov	r0, r5
 800c33a:	b002      	add	sp, #8
 800c33c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c340:	f000 b806 	b.w	800c350 <__strtok_r>
 800c344:	20000034 	.word	0x20000034
 800c348:	0800f6d8 	.word	0x0800f6d8
 800c34c:	0800f6ef 	.word	0x0800f6ef

0800c350 <__strtok_r>:
 800c350:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c352:	b908      	cbnz	r0, 800c358 <__strtok_r+0x8>
 800c354:	6810      	ldr	r0, [r2, #0]
 800c356:	b188      	cbz	r0, 800c37c <__strtok_r+0x2c>
 800c358:	4604      	mov	r4, r0
 800c35a:	4620      	mov	r0, r4
 800c35c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c360:	460f      	mov	r7, r1
 800c362:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c366:	b91e      	cbnz	r6, 800c370 <__strtok_r+0x20>
 800c368:	b965      	cbnz	r5, 800c384 <__strtok_r+0x34>
 800c36a:	6015      	str	r5, [r2, #0]
 800c36c:	4628      	mov	r0, r5
 800c36e:	e005      	b.n	800c37c <__strtok_r+0x2c>
 800c370:	42b5      	cmp	r5, r6
 800c372:	d1f6      	bne.n	800c362 <__strtok_r+0x12>
 800c374:	2b00      	cmp	r3, #0
 800c376:	d1f0      	bne.n	800c35a <__strtok_r+0xa>
 800c378:	6014      	str	r4, [r2, #0]
 800c37a:	7003      	strb	r3, [r0, #0]
 800c37c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c37e:	461c      	mov	r4, r3
 800c380:	e00c      	b.n	800c39c <__strtok_r+0x4c>
 800c382:	b915      	cbnz	r5, 800c38a <__strtok_r+0x3a>
 800c384:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c388:	460e      	mov	r6, r1
 800c38a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c38e:	42ab      	cmp	r3, r5
 800c390:	d1f7      	bne.n	800c382 <__strtok_r+0x32>
 800c392:	2b00      	cmp	r3, #0
 800c394:	d0f3      	beq.n	800c37e <__strtok_r+0x2e>
 800c396:	2300      	movs	r3, #0
 800c398:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c39c:	6014      	str	r4, [r2, #0]
 800c39e:	e7ed      	b.n	800c37c <__strtok_r+0x2c>

0800c3a0 <_strtol_l.constprop.0>:
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3a6:	d001      	beq.n	800c3ac <_strtol_l.constprop.0+0xc>
 800c3a8:	2b24      	cmp	r3, #36	; 0x24
 800c3aa:	d906      	bls.n	800c3ba <_strtol_l.constprop.0+0x1a>
 800c3ac:	f7fe f958 	bl	800a660 <__errno>
 800c3b0:	2316      	movs	r3, #22
 800c3b2:	6003      	str	r3, [r0, #0]
 800c3b4:	2000      	movs	r0, #0
 800c3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c4a0 <_strtol_l.constprop.0+0x100>
 800c3be:	460d      	mov	r5, r1
 800c3c0:	462e      	mov	r6, r5
 800c3c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c3c6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c3ca:	f017 0708 	ands.w	r7, r7, #8
 800c3ce:	d1f7      	bne.n	800c3c0 <_strtol_l.constprop.0+0x20>
 800c3d0:	2c2d      	cmp	r4, #45	; 0x2d
 800c3d2:	d132      	bne.n	800c43a <_strtol_l.constprop.0+0x9a>
 800c3d4:	782c      	ldrb	r4, [r5, #0]
 800c3d6:	2701      	movs	r7, #1
 800c3d8:	1cb5      	adds	r5, r6, #2
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d05b      	beq.n	800c496 <_strtol_l.constprop.0+0xf6>
 800c3de:	2b10      	cmp	r3, #16
 800c3e0:	d109      	bne.n	800c3f6 <_strtol_l.constprop.0+0x56>
 800c3e2:	2c30      	cmp	r4, #48	; 0x30
 800c3e4:	d107      	bne.n	800c3f6 <_strtol_l.constprop.0+0x56>
 800c3e6:	782c      	ldrb	r4, [r5, #0]
 800c3e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c3ec:	2c58      	cmp	r4, #88	; 0x58
 800c3ee:	d14d      	bne.n	800c48c <_strtol_l.constprop.0+0xec>
 800c3f0:	786c      	ldrb	r4, [r5, #1]
 800c3f2:	2310      	movs	r3, #16
 800c3f4:	3502      	adds	r5, #2
 800c3f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c3fa:	f108 38ff 	add.w	r8, r8, #4294967295
 800c3fe:	f04f 0c00 	mov.w	ip, #0
 800c402:	fbb8 f9f3 	udiv	r9, r8, r3
 800c406:	4666      	mov	r6, ip
 800c408:	fb03 8a19 	mls	sl, r3, r9, r8
 800c40c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c410:	f1be 0f09 	cmp.w	lr, #9
 800c414:	d816      	bhi.n	800c444 <_strtol_l.constprop.0+0xa4>
 800c416:	4674      	mov	r4, lr
 800c418:	42a3      	cmp	r3, r4
 800c41a:	dd24      	ble.n	800c466 <_strtol_l.constprop.0+0xc6>
 800c41c:	f1bc 0f00 	cmp.w	ip, #0
 800c420:	db1e      	blt.n	800c460 <_strtol_l.constprop.0+0xc0>
 800c422:	45b1      	cmp	r9, r6
 800c424:	d31c      	bcc.n	800c460 <_strtol_l.constprop.0+0xc0>
 800c426:	d101      	bne.n	800c42c <_strtol_l.constprop.0+0x8c>
 800c428:	45a2      	cmp	sl, r4
 800c42a:	db19      	blt.n	800c460 <_strtol_l.constprop.0+0xc0>
 800c42c:	fb06 4603 	mla	r6, r6, r3, r4
 800c430:	f04f 0c01 	mov.w	ip, #1
 800c434:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c438:	e7e8      	b.n	800c40c <_strtol_l.constprop.0+0x6c>
 800c43a:	2c2b      	cmp	r4, #43	; 0x2b
 800c43c:	bf04      	itt	eq
 800c43e:	782c      	ldrbeq	r4, [r5, #0]
 800c440:	1cb5      	addeq	r5, r6, #2
 800c442:	e7ca      	b.n	800c3da <_strtol_l.constprop.0+0x3a>
 800c444:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c448:	f1be 0f19 	cmp.w	lr, #25
 800c44c:	d801      	bhi.n	800c452 <_strtol_l.constprop.0+0xb2>
 800c44e:	3c37      	subs	r4, #55	; 0x37
 800c450:	e7e2      	b.n	800c418 <_strtol_l.constprop.0+0x78>
 800c452:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c456:	f1be 0f19 	cmp.w	lr, #25
 800c45a:	d804      	bhi.n	800c466 <_strtol_l.constprop.0+0xc6>
 800c45c:	3c57      	subs	r4, #87	; 0x57
 800c45e:	e7db      	b.n	800c418 <_strtol_l.constprop.0+0x78>
 800c460:	f04f 3cff 	mov.w	ip, #4294967295
 800c464:	e7e6      	b.n	800c434 <_strtol_l.constprop.0+0x94>
 800c466:	f1bc 0f00 	cmp.w	ip, #0
 800c46a:	da05      	bge.n	800c478 <_strtol_l.constprop.0+0xd8>
 800c46c:	2322      	movs	r3, #34	; 0x22
 800c46e:	6003      	str	r3, [r0, #0]
 800c470:	4646      	mov	r6, r8
 800c472:	b942      	cbnz	r2, 800c486 <_strtol_l.constprop.0+0xe6>
 800c474:	4630      	mov	r0, r6
 800c476:	e79e      	b.n	800c3b6 <_strtol_l.constprop.0+0x16>
 800c478:	b107      	cbz	r7, 800c47c <_strtol_l.constprop.0+0xdc>
 800c47a:	4276      	negs	r6, r6
 800c47c:	2a00      	cmp	r2, #0
 800c47e:	d0f9      	beq.n	800c474 <_strtol_l.constprop.0+0xd4>
 800c480:	f1bc 0f00 	cmp.w	ip, #0
 800c484:	d000      	beq.n	800c488 <_strtol_l.constprop.0+0xe8>
 800c486:	1e69      	subs	r1, r5, #1
 800c488:	6011      	str	r1, [r2, #0]
 800c48a:	e7f3      	b.n	800c474 <_strtol_l.constprop.0+0xd4>
 800c48c:	2430      	movs	r4, #48	; 0x30
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d1b1      	bne.n	800c3f6 <_strtol_l.constprop.0+0x56>
 800c492:	2308      	movs	r3, #8
 800c494:	e7af      	b.n	800c3f6 <_strtol_l.constprop.0+0x56>
 800c496:	2c30      	cmp	r4, #48	; 0x30
 800c498:	d0a5      	beq.n	800c3e6 <_strtol_l.constprop.0+0x46>
 800c49a:	230a      	movs	r3, #10
 800c49c:	e7ab      	b.n	800c3f6 <_strtol_l.constprop.0+0x56>
 800c49e:	bf00      	nop
 800c4a0:	0800f7ae 	.word	0x0800f7ae

0800c4a4 <_strtol_r>:
 800c4a4:	f7ff bf7c 	b.w	800c3a0 <_strtol_l.constprop.0>

0800c4a8 <strtol>:
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	460a      	mov	r2, r1
 800c4ac:	4601      	mov	r1, r0
 800c4ae:	4802      	ldr	r0, [pc, #8]	; (800c4b8 <strtol+0x10>)
 800c4b0:	6800      	ldr	r0, [r0, #0]
 800c4b2:	f7ff bf75 	b.w	800c3a0 <_strtol_l.constprop.0>
 800c4b6:	bf00      	nop
 800c4b8:	20000034 	.word	0x20000034

0800c4bc <__utoa>:
 800c4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4be:	4c1f      	ldr	r4, [pc, #124]	; (800c53c <__utoa+0x80>)
 800c4c0:	b08b      	sub	sp, #44	; 0x2c
 800c4c2:	4605      	mov	r5, r0
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	466e      	mov	r6, sp
 800c4c8:	f104 0c20 	add.w	ip, r4, #32
 800c4cc:	6820      	ldr	r0, [r4, #0]
 800c4ce:	6861      	ldr	r1, [r4, #4]
 800c4d0:	4637      	mov	r7, r6
 800c4d2:	c703      	stmia	r7!, {r0, r1}
 800c4d4:	3408      	adds	r4, #8
 800c4d6:	4564      	cmp	r4, ip
 800c4d8:	463e      	mov	r6, r7
 800c4da:	d1f7      	bne.n	800c4cc <__utoa+0x10>
 800c4dc:	7921      	ldrb	r1, [r4, #4]
 800c4de:	7139      	strb	r1, [r7, #4]
 800c4e0:	1e91      	subs	r1, r2, #2
 800c4e2:	6820      	ldr	r0, [r4, #0]
 800c4e4:	6038      	str	r0, [r7, #0]
 800c4e6:	2922      	cmp	r1, #34	; 0x22
 800c4e8:	f04f 0100 	mov.w	r1, #0
 800c4ec:	d904      	bls.n	800c4f8 <__utoa+0x3c>
 800c4ee:	7019      	strb	r1, [r3, #0]
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	b00b      	add	sp, #44	; 0x2c
 800c4f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4f8:	1e58      	subs	r0, r3, #1
 800c4fa:	4684      	mov	ip, r0
 800c4fc:	fbb5 f7f2 	udiv	r7, r5, r2
 800c500:	fb02 5617 	mls	r6, r2, r7, r5
 800c504:	3628      	adds	r6, #40	; 0x28
 800c506:	446e      	add	r6, sp
 800c508:	460c      	mov	r4, r1
 800c50a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c50e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c512:	462e      	mov	r6, r5
 800c514:	42b2      	cmp	r2, r6
 800c516:	f101 0101 	add.w	r1, r1, #1
 800c51a:	463d      	mov	r5, r7
 800c51c:	d9ee      	bls.n	800c4fc <__utoa+0x40>
 800c51e:	2200      	movs	r2, #0
 800c520:	545a      	strb	r2, [r3, r1]
 800c522:	1919      	adds	r1, r3, r4
 800c524:	1aa5      	subs	r5, r4, r2
 800c526:	42aa      	cmp	r2, r5
 800c528:	dae3      	bge.n	800c4f2 <__utoa+0x36>
 800c52a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c52e:	780e      	ldrb	r6, [r1, #0]
 800c530:	7006      	strb	r6, [r0, #0]
 800c532:	3201      	adds	r2, #1
 800c534:	f801 5901 	strb.w	r5, [r1], #-1
 800c538:	e7f4      	b.n	800c524 <__utoa+0x68>
 800c53a:	bf00      	nop
 800c53c:	0800f74c 	.word	0x0800f74c

0800c540 <__assert_func>:
 800c540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c542:	4614      	mov	r4, r2
 800c544:	461a      	mov	r2, r3
 800c546:	4b09      	ldr	r3, [pc, #36]	; (800c56c <__assert_func+0x2c>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4605      	mov	r5, r0
 800c54c:	68d8      	ldr	r0, [r3, #12]
 800c54e:	b14c      	cbz	r4, 800c564 <__assert_func+0x24>
 800c550:	4b07      	ldr	r3, [pc, #28]	; (800c570 <__assert_func+0x30>)
 800c552:	9100      	str	r1, [sp, #0]
 800c554:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c558:	4906      	ldr	r1, [pc, #24]	; (800c574 <__assert_func+0x34>)
 800c55a:	462b      	mov	r3, r5
 800c55c:	f000 fe8a 	bl	800d274 <fiprintf>
 800c560:	f002 fab0 	bl	800eac4 <abort>
 800c564:	4b04      	ldr	r3, [pc, #16]	; (800c578 <__assert_func+0x38>)
 800c566:	461c      	mov	r4, r3
 800c568:	e7f3      	b.n	800c552 <__assert_func+0x12>
 800c56a:	bf00      	nop
 800c56c:	20000034 	.word	0x20000034
 800c570:	0800f771 	.word	0x0800f771
 800c574:	0800f77e 	.word	0x0800f77e
 800c578:	0800f7ac 	.word	0x0800f7ac

0800c57c <quorem>:
 800c57c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c580:	6903      	ldr	r3, [r0, #16]
 800c582:	690c      	ldr	r4, [r1, #16]
 800c584:	42a3      	cmp	r3, r4
 800c586:	4607      	mov	r7, r0
 800c588:	f2c0 8081 	blt.w	800c68e <quorem+0x112>
 800c58c:	3c01      	subs	r4, #1
 800c58e:	f101 0814 	add.w	r8, r1, #20
 800c592:	f100 0514 	add.w	r5, r0, #20
 800c596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c59a:	9301      	str	r3, [sp, #4]
 800c59c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c5a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c5ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c5b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800c5b4:	d331      	bcc.n	800c61a <quorem+0x9e>
 800c5b6:	f04f 0e00 	mov.w	lr, #0
 800c5ba:	4640      	mov	r0, r8
 800c5bc:	46ac      	mov	ip, r5
 800c5be:	46f2      	mov	sl, lr
 800c5c0:	f850 2b04 	ldr.w	r2, [r0], #4
 800c5c4:	b293      	uxth	r3, r2
 800c5c6:	fb06 e303 	mla	r3, r6, r3, lr
 800c5ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	ebaa 0303 	sub.w	r3, sl, r3
 800c5d4:	f8dc a000 	ldr.w	sl, [ip]
 800c5d8:	0c12      	lsrs	r2, r2, #16
 800c5da:	fa13 f38a 	uxtah	r3, r3, sl
 800c5de:	fb06 e202 	mla	r2, r6, r2, lr
 800c5e2:	9300      	str	r3, [sp, #0]
 800c5e4:	9b00      	ldr	r3, [sp, #0]
 800c5e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c5ea:	b292      	uxth	r2, r2
 800c5ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c5f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c5f4:	f8bd 3000 	ldrh.w	r3, [sp]
 800c5f8:	4581      	cmp	r9, r0
 800c5fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5fe:	f84c 3b04 	str.w	r3, [ip], #4
 800c602:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c606:	d2db      	bcs.n	800c5c0 <quorem+0x44>
 800c608:	f855 300b 	ldr.w	r3, [r5, fp]
 800c60c:	b92b      	cbnz	r3, 800c61a <quorem+0x9e>
 800c60e:	9b01      	ldr	r3, [sp, #4]
 800c610:	3b04      	subs	r3, #4
 800c612:	429d      	cmp	r5, r3
 800c614:	461a      	mov	r2, r3
 800c616:	d32e      	bcc.n	800c676 <quorem+0xfa>
 800c618:	613c      	str	r4, [r7, #16]
 800c61a:	4638      	mov	r0, r7
 800c61c:	f001 fca8 	bl	800df70 <__mcmp>
 800c620:	2800      	cmp	r0, #0
 800c622:	db24      	blt.n	800c66e <quorem+0xf2>
 800c624:	3601      	adds	r6, #1
 800c626:	4628      	mov	r0, r5
 800c628:	f04f 0c00 	mov.w	ip, #0
 800c62c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c630:	f8d0 e000 	ldr.w	lr, [r0]
 800c634:	b293      	uxth	r3, r2
 800c636:	ebac 0303 	sub.w	r3, ip, r3
 800c63a:	0c12      	lsrs	r2, r2, #16
 800c63c:	fa13 f38e 	uxtah	r3, r3, lr
 800c640:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c644:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c648:	b29b      	uxth	r3, r3
 800c64a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c64e:	45c1      	cmp	r9, r8
 800c650:	f840 3b04 	str.w	r3, [r0], #4
 800c654:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c658:	d2e8      	bcs.n	800c62c <quorem+0xb0>
 800c65a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c65e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c662:	b922      	cbnz	r2, 800c66e <quorem+0xf2>
 800c664:	3b04      	subs	r3, #4
 800c666:	429d      	cmp	r5, r3
 800c668:	461a      	mov	r2, r3
 800c66a:	d30a      	bcc.n	800c682 <quorem+0x106>
 800c66c:	613c      	str	r4, [r7, #16]
 800c66e:	4630      	mov	r0, r6
 800c670:	b003      	add	sp, #12
 800c672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c676:	6812      	ldr	r2, [r2, #0]
 800c678:	3b04      	subs	r3, #4
 800c67a:	2a00      	cmp	r2, #0
 800c67c:	d1cc      	bne.n	800c618 <quorem+0x9c>
 800c67e:	3c01      	subs	r4, #1
 800c680:	e7c7      	b.n	800c612 <quorem+0x96>
 800c682:	6812      	ldr	r2, [r2, #0]
 800c684:	3b04      	subs	r3, #4
 800c686:	2a00      	cmp	r2, #0
 800c688:	d1f0      	bne.n	800c66c <quorem+0xf0>
 800c68a:	3c01      	subs	r4, #1
 800c68c:	e7eb      	b.n	800c666 <quorem+0xea>
 800c68e:	2000      	movs	r0, #0
 800c690:	e7ee      	b.n	800c670 <quorem+0xf4>
 800c692:	0000      	movs	r0, r0
 800c694:	0000      	movs	r0, r0
	...

0800c698 <_dtoa_r>:
 800c698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c69c:	ed2d 8b04 	vpush	{d8-d9}
 800c6a0:	ec57 6b10 	vmov	r6, r7, d0
 800c6a4:	b093      	sub	sp, #76	; 0x4c
 800c6a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c6a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c6ac:	9106      	str	r1, [sp, #24]
 800c6ae:	ee10 aa10 	vmov	sl, s0
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	9209      	str	r2, [sp, #36]	; 0x24
 800c6b6:	930c      	str	r3, [sp, #48]	; 0x30
 800c6b8:	46bb      	mov	fp, r7
 800c6ba:	b975      	cbnz	r5, 800c6da <_dtoa_r+0x42>
 800c6bc:	2010      	movs	r0, #16
 800c6be:	f7fe f813 	bl	800a6e8 <malloc>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	6260      	str	r0, [r4, #36]	; 0x24
 800c6c6:	b920      	cbnz	r0, 800c6d2 <_dtoa_r+0x3a>
 800c6c8:	4ba7      	ldr	r3, [pc, #668]	; (800c968 <_dtoa_r+0x2d0>)
 800c6ca:	21ea      	movs	r1, #234	; 0xea
 800c6cc:	48a7      	ldr	r0, [pc, #668]	; (800c96c <_dtoa_r+0x2d4>)
 800c6ce:	f7ff ff37 	bl	800c540 <__assert_func>
 800c6d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c6d6:	6005      	str	r5, [r0, #0]
 800c6d8:	60c5      	str	r5, [r0, #12]
 800c6da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6dc:	6819      	ldr	r1, [r3, #0]
 800c6de:	b151      	cbz	r1, 800c6f6 <_dtoa_r+0x5e>
 800c6e0:	685a      	ldr	r2, [r3, #4]
 800c6e2:	604a      	str	r2, [r1, #4]
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	4093      	lsls	r3, r2
 800c6e8:	608b      	str	r3, [r1, #8]
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	f001 f9b4 	bl	800da58 <_Bfree>
 800c6f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	601a      	str	r2, [r3, #0]
 800c6f6:	1e3b      	subs	r3, r7, #0
 800c6f8:	bfaa      	itet	ge
 800c6fa:	2300      	movge	r3, #0
 800c6fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c700:	f8c8 3000 	strge.w	r3, [r8]
 800c704:	4b9a      	ldr	r3, [pc, #616]	; (800c970 <_dtoa_r+0x2d8>)
 800c706:	bfbc      	itt	lt
 800c708:	2201      	movlt	r2, #1
 800c70a:	f8c8 2000 	strlt.w	r2, [r8]
 800c70e:	ea33 030b 	bics.w	r3, r3, fp
 800c712:	d11b      	bne.n	800c74c <_dtoa_r+0xb4>
 800c714:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c716:	f242 730f 	movw	r3, #9999	; 0x270f
 800c71a:	6013      	str	r3, [r2, #0]
 800c71c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c720:	4333      	orrs	r3, r6
 800c722:	f000 8592 	beq.w	800d24a <_dtoa_r+0xbb2>
 800c726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c728:	b963      	cbnz	r3, 800c744 <_dtoa_r+0xac>
 800c72a:	4b92      	ldr	r3, [pc, #584]	; (800c974 <_dtoa_r+0x2dc>)
 800c72c:	e022      	b.n	800c774 <_dtoa_r+0xdc>
 800c72e:	4b92      	ldr	r3, [pc, #584]	; (800c978 <_dtoa_r+0x2e0>)
 800c730:	9301      	str	r3, [sp, #4]
 800c732:	3308      	adds	r3, #8
 800c734:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c736:	6013      	str	r3, [r2, #0]
 800c738:	9801      	ldr	r0, [sp, #4]
 800c73a:	b013      	add	sp, #76	; 0x4c
 800c73c:	ecbd 8b04 	vpop	{d8-d9}
 800c740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c744:	4b8b      	ldr	r3, [pc, #556]	; (800c974 <_dtoa_r+0x2dc>)
 800c746:	9301      	str	r3, [sp, #4]
 800c748:	3303      	adds	r3, #3
 800c74a:	e7f3      	b.n	800c734 <_dtoa_r+0x9c>
 800c74c:	2200      	movs	r2, #0
 800c74e:	2300      	movs	r3, #0
 800c750:	4650      	mov	r0, sl
 800c752:	4659      	mov	r1, fp
 800c754:	f7f4 f9b8 	bl	8000ac8 <__aeabi_dcmpeq>
 800c758:	ec4b ab19 	vmov	d9, sl, fp
 800c75c:	4680      	mov	r8, r0
 800c75e:	b158      	cbz	r0, 800c778 <_dtoa_r+0xe0>
 800c760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c762:	2301      	movs	r3, #1
 800c764:	6013      	str	r3, [r2, #0]
 800c766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c768:	2b00      	cmp	r3, #0
 800c76a:	f000 856b 	beq.w	800d244 <_dtoa_r+0xbac>
 800c76e:	4883      	ldr	r0, [pc, #524]	; (800c97c <_dtoa_r+0x2e4>)
 800c770:	6018      	str	r0, [r3, #0]
 800c772:	1e43      	subs	r3, r0, #1
 800c774:	9301      	str	r3, [sp, #4]
 800c776:	e7df      	b.n	800c738 <_dtoa_r+0xa0>
 800c778:	ec4b ab10 	vmov	d0, sl, fp
 800c77c:	aa10      	add	r2, sp, #64	; 0x40
 800c77e:	a911      	add	r1, sp, #68	; 0x44
 800c780:	4620      	mov	r0, r4
 800c782:	f001 fd17 	bl	800e1b4 <__d2b>
 800c786:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c78a:	ee08 0a10 	vmov	s16, r0
 800c78e:	2d00      	cmp	r5, #0
 800c790:	f000 8084 	beq.w	800c89c <_dtoa_r+0x204>
 800c794:	ee19 3a90 	vmov	r3, s19
 800c798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c79c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c7a0:	4656      	mov	r6, sl
 800c7a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c7a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c7aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c7ae:	4b74      	ldr	r3, [pc, #464]	; (800c980 <_dtoa_r+0x2e8>)
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	4630      	mov	r0, r6
 800c7b4:	4639      	mov	r1, r7
 800c7b6:	f7f3 fd67 	bl	8000288 <__aeabi_dsub>
 800c7ba:	a365      	add	r3, pc, #404	; (adr r3, 800c950 <_dtoa_r+0x2b8>)
 800c7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c0:	f7f3 ff1a 	bl	80005f8 <__aeabi_dmul>
 800c7c4:	a364      	add	r3, pc, #400	; (adr r3, 800c958 <_dtoa_r+0x2c0>)
 800c7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ca:	f7f3 fd5f 	bl	800028c <__adddf3>
 800c7ce:	4606      	mov	r6, r0
 800c7d0:	4628      	mov	r0, r5
 800c7d2:	460f      	mov	r7, r1
 800c7d4:	f7f3 fea6 	bl	8000524 <__aeabi_i2d>
 800c7d8:	a361      	add	r3, pc, #388	; (adr r3, 800c960 <_dtoa_r+0x2c8>)
 800c7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7de:	f7f3 ff0b 	bl	80005f8 <__aeabi_dmul>
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	4639      	mov	r1, r7
 800c7ea:	f7f3 fd4f 	bl	800028c <__adddf3>
 800c7ee:	4606      	mov	r6, r0
 800c7f0:	460f      	mov	r7, r1
 800c7f2:	f7f4 f9b1 	bl	8000b58 <__aeabi_d2iz>
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	9000      	str	r0, [sp, #0]
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	4630      	mov	r0, r6
 800c7fe:	4639      	mov	r1, r7
 800c800:	f7f4 f96c 	bl	8000adc <__aeabi_dcmplt>
 800c804:	b150      	cbz	r0, 800c81c <_dtoa_r+0x184>
 800c806:	9800      	ldr	r0, [sp, #0]
 800c808:	f7f3 fe8c 	bl	8000524 <__aeabi_i2d>
 800c80c:	4632      	mov	r2, r6
 800c80e:	463b      	mov	r3, r7
 800c810:	f7f4 f95a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c814:	b910      	cbnz	r0, 800c81c <_dtoa_r+0x184>
 800c816:	9b00      	ldr	r3, [sp, #0]
 800c818:	3b01      	subs	r3, #1
 800c81a:	9300      	str	r3, [sp, #0]
 800c81c:	9b00      	ldr	r3, [sp, #0]
 800c81e:	2b16      	cmp	r3, #22
 800c820:	d85a      	bhi.n	800c8d8 <_dtoa_r+0x240>
 800c822:	9a00      	ldr	r2, [sp, #0]
 800c824:	4b57      	ldr	r3, [pc, #348]	; (800c984 <_dtoa_r+0x2ec>)
 800c826:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82e:	ec51 0b19 	vmov	r0, r1, d9
 800c832:	f7f4 f953 	bl	8000adc <__aeabi_dcmplt>
 800c836:	2800      	cmp	r0, #0
 800c838:	d050      	beq.n	800c8dc <_dtoa_r+0x244>
 800c83a:	9b00      	ldr	r3, [sp, #0]
 800c83c:	3b01      	subs	r3, #1
 800c83e:	9300      	str	r3, [sp, #0]
 800c840:	2300      	movs	r3, #0
 800c842:	930b      	str	r3, [sp, #44]	; 0x2c
 800c844:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c846:	1b5d      	subs	r5, r3, r5
 800c848:	1e6b      	subs	r3, r5, #1
 800c84a:	9305      	str	r3, [sp, #20]
 800c84c:	bf45      	ittet	mi
 800c84e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c852:	9304      	strmi	r3, [sp, #16]
 800c854:	2300      	movpl	r3, #0
 800c856:	2300      	movmi	r3, #0
 800c858:	bf4c      	ite	mi
 800c85a:	9305      	strmi	r3, [sp, #20]
 800c85c:	9304      	strpl	r3, [sp, #16]
 800c85e:	9b00      	ldr	r3, [sp, #0]
 800c860:	2b00      	cmp	r3, #0
 800c862:	db3d      	blt.n	800c8e0 <_dtoa_r+0x248>
 800c864:	9b05      	ldr	r3, [sp, #20]
 800c866:	9a00      	ldr	r2, [sp, #0]
 800c868:	920a      	str	r2, [sp, #40]	; 0x28
 800c86a:	4413      	add	r3, r2
 800c86c:	9305      	str	r3, [sp, #20]
 800c86e:	2300      	movs	r3, #0
 800c870:	9307      	str	r3, [sp, #28]
 800c872:	9b06      	ldr	r3, [sp, #24]
 800c874:	2b09      	cmp	r3, #9
 800c876:	f200 8089 	bhi.w	800c98c <_dtoa_r+0x2f4>
 800c87a:	2b05      	cmp	r3, #5
 800c87c:	bfc4      	itt	gt
 800c87e:	3b04      	subgt	r3, #4
 800c880:	9306      	strgt	r3, [sp, #24]
 800c882:	9b06      	ldr	r3, [sp, #24]
 800c884:	f1a3 0302 	sub.w	r3, r3, #2
 800c888:	bfcc      	ite	gt
 800c88a:	2500      	movgt	r5, #0
 800c88c:	2501      	movle	r5, #1
 800c88e:	2b03      	cmp	r3, #3
 800c890:	f200 8087 	bhi.w	800c9a2 <_dtoa_r+0x30a>
 800c894:	e8df f003 	tbb	[pc, r3]
 800c898:	59383a2d 	.word	0x59383a2d
 800c89c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c8a0:	441d      	add	r5, r3
 800c8a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c8a6:	2b20      	cmp	r3, #32
 800c8a8:	bfc1      	itttt	gt
 800c8aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c8ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c8b2:	fa0b f303 	lslgt.w	r3, fp, r3
 800c8b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c8ba:	bfda      	itte	le
 800c8bc:	f1c3 0320 	rsble	r3, r3, #32
 800c8c0:	fa06 f003 	lslle.w	r0, r6, r3
 800c8c4:	4318      	orrgt	r0, r3
 800c8c6:	f7f3 fe1d 	bl	8000504 <__aeabi_ui2d>
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	4606      	mov	r6, r0
 800c8ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c8d2:	3d01      	subs	r5, #1
 800c8d4:	930e      	str	r3, [sp, #56]	; 0x38
 800c8d6:	e76a      	b.n	800c7ae <_dtoa_r+0x116>
 800c8d8:	2301      	movs	r3, #1
 800c8da:	e7b2      	b.n	800c842 <_dtoa_r+0x1aa>
 800c8dc:	900b      	str	r0, [sp, #44]	; 0x2c
 800c8de:	e7b1      	b.n	800c844 <_dtoa_r+0x1ac>
 800c8e0:	9b04      	ldr	r3, [sp, #16]
 800c8e2:	9a00      	ldr	r2, [sp, #0]
 800c8e4:	1a9b      	subs	r3, r3, r2
 800c8e6:	9304      	str	r3, [sp, #16]
 800c8e8:	4253      	negs	r3, r2
 800c8ea:	9307      	str	r3, [sp, #28]
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c8f0:	e7bf      	b.n	800c872 <_dtoa_r+0x1da>
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	9308      	str	r3, [sp, #32]
 800c8f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	dc55      	bgt.n	800c9a8 <_dtoa_r+0x310>
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c902:	461a      	mov	r2, r3
 800c904:	9209      	str	r2, [sp, #36]	; 0x24
 800c906:	e00c      	b.n	800c922 <_dtoa_r+0x28a>
 800c908:	2301      	movs	r3, #1
 800c90a:	e7f3      	b.n	800c8f4 <_dtoa_r+0x25c>
 800c90c:	2300      	movs	r3, #0
 800c90e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c910:	9308      	str	r3, [sp, #32]
 800c912:	9b00      	ldr	r3, [sp, #0]
 800c914:	4413      	add	r3, r2
 800c916:	9302      	str	r3, [sp, #8]
 800c918:	3301      	adds	r3, #1
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	9303      	str	r3, [sp, #12]
 800c91e:	bfb8      	it	lt
 800c920:	2301      	movlt	r3, #1
 800c922:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c924:	2200      	movs	r2, #0
 800c926:	6042      	str	r2, [r0, #4]
 800c928:	2204      	movs	r2, #4
 800c92a:	f102 0614 	add.w	r6, r2, #20
 800c92e:	429e      	cmp	r6, r3
 800c930:	6841      	ldr	r1, [r0, #4]
 800c932:	d93d      	bls.n	800c9b0 <_dtoa_r+0x318>
 800c934:	4620      	mov	r0, r4
 800c936:	f001 f84f 	bl	800d9d8 <_Balloc>
 800c93a:	9001      	str	r0, [sp, #4]
 800c93c:	2800      	cmp	r0, #0
 800c93e:	d13b      	bne.n	800c9b8 <_dtoa_r+0x320>
 800c940:	4b11      	ldr	r3, [pc, #68]	; (800c988 <_dtoa_r+0x2f0>)
 800c942:	4602      	mov	r2, r0
 800c944:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c948:	e6c0      	b.n	800c6cc <_dtoa_r+0x34>
 800c94a:	2301      	movs	r3, #1
 800c94c:	e7df      	b.n	800c90e <_dtoa_r+0x276>
 800c94e:	bf00      	nop
 800c950:	636f4361 	.word	0x636f4361
 800c954:	3fd287a7 	.word	0x3fd287a7
 800c958:	8b60c8b3 	.word	0x8b60c8b3
 800c95c:	3fc68a28 	.word	0x3fc68a28
 800c960:	509f79fb 	.word	0x509f79fb
 800c964:	3fd34413 	.word	0x3fd34413
 800c968:	0800f6d8 	.word	0x0800f6d8
 800c96c:	0800f8bb 	.word	0x0800f8bb
 800c970:	7ff00000 	.word	0x7ff00000
 800c974:	0800f8b7 	.word	0x0800f8b7
 800c978:	0800f8ae 	.word	0x0800f8ae
 800c97c:	0800f65d 	.word	0x0800f65d
 800c980:	3ff80000 	.word	0x3ff80000
 800c984:	0800fa28 	.word	0x0800fa28
 800c988:	0800f916 	.word	0x0800f916
 800c98c:	2501      	movs	r5, #1
 800c98e:	2300      	movs	r3, #0
 800c990:	9306      	str	r3, [sp, #24]
 800c992:	9508      	str	r5, [sp, #32]
 800c994:	f04f 33ff 	mov.w	r3, #4294967295
 800c998:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c99c:	2200      	movs	r2, #0
 800c99e:	2312      	movs	r3, #18
 800c9a0:	e7b0      	b.n	800c904 <_dtoa_r+0x26c>
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	9308      	str	r3, [sp, #32]
 800c9a6:	e7f5      	b.n	800c994 <_dtoa_r+0x2fc>
 800c9a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c9ae:	e7b8      	b.n	800c922 <_dtoa_r+0x28a>
 800c9b0:	3101      	adds	r1, #1
 800c9b2:	6041      	str	r1, [r0, #4]
 800c9b4:	0052      	lsls	r2, r2, #1
 800c9b6:	e7b8      	b.n	800c92a <_dtoa_r+0x292>
 800c9b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9ba:	9a01      	ldr	r2, [sp, #4]
 800c9bc:	601a      	str	r2, [r3, #0]
 800c9be:	9b03      	ldr	r3, [sp, #12]
 800c9c0:	2b0e      	cmp	r3, #14
 800c9c2:	f200 809d 	bhi.w	800cb00 <_dtoa_r+0x468>
 800c9c6:	2d00      	cmp	r5, #0
 800c9c8:	f000 809a 	beq.w	800cb00 <_dtoa_r+0x468>
 800c9cc:	9b00      	ldr	r3, [sp, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	dd32      	ble.n	800ca38 <_dtoa_r+0x3a0>
 800c9d2:	4ab7      	ldr	r2, [pc, #732]	; (800ccb0 <_dtoa_r+0x618>)
 800c9d4:	f003 030f 	and.w	r3, r3, #15
 800c9d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c9dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9e0:	9b00      	ldr	r3, [sp, #0]
 800c9e2:	05d8      	lsls	r0, r3, #23
 800c9e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c9e8:	d516      	bpl.n	800ca18 <_dtoa_r+0x380>
 800c9ea:	4bb2      	ldr	r3, [pc, #712]	; (800ccb4 <_dtoa_r+0x61c>)
 800c9ec:	ec51 0b19 	vmov	r0, r1, d9
 800c9f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c9f4:	f7f3 ff2a 	bl	800084c <__aeabi_ddiv>
 800c9f8:	f007 070f 	and.w	r7, r7, #15
 800c9fc:	4682      	mov	sl, r0
 800c9fe:	468b      	mov	fp, r1
 800ca00:	2503      	movs	r5, #3
 800ca02:	4eac      	ldr	r6, [pc, #688]	; (800ccb4 <_dtoa_r+0x61c>)
 800ca04:	b957      	cbnz	r7, 800ca1c <_dtoa_r+0x384>
 800ca06:	4642      	mov	r2, r8
 800ca08:	464b      	mov	r3, r9
 800ca0a:	4650      	mov	r0, sl
 800ca0c:	4659      	mov	r1, fp
 800ca0e:	f7f3 ff1d 	bl	800084c <__aeabi_ddiv>
 800ca12:	4682      	mov	sl, r0
 800ca14:	468b      	mov	fp, r1
 800ca16:	e028      	b.n	800ca6a <_dtoa_r+0x3d2>
 800ca18:	2502      	movs	r5, #2
 800ca1a:	e7f2      	b.n	800ca02 <_dtoa_r+0x36a>
 800ca1c:	07f9      	lsls	r1, r7, #31
 800ca1e:	d508      	bpl.n	800ca32 <_dtoa_r+0x39a>
 800ca20:	4640      	mov	r0, r8
 800ca22:	4649      	mov	r1, r9
 800ca24:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca28:	f7f3 fde6 	bl	80005f8 <__aeabi_dmul>
 800ca2c:	3501      	adds	r5, #1
 800ca2e:	4680      	mov	r8, r0
 800ca30:	4689      	mov	r9, r1
 800ca32:	107f      	asrs	r7, r7, #1
 800ca34:	3608      	adds	r6, #8
 800ca36:	e7e5      	b.n	800ca04 <_dtoa_r+0x36c>
 800ca38:	f000 809b 	beq.w	800cb72 <_dtoa_r+0x4da>
 800ca3c:	9b00      	ldr	r3, [sp, #0]
 800ca3e:	4f9d      	ldr	r7, [pc, #628]	; (800ccb4 <_dtoa_r+0x61c>)
 800ca40:	425e      	negs	r6, r3
 800ca42:	4b9b      	ldr	r3, [pc, #620]	; (800ccb0 <_dtoa_r+0x618>)
 800ca44:	f006 020f 	and.w	r2, r6, #15
 800ca48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca50:	ec51 0b19 	vmov	r0, r1, d9
 800ca54:	f7f3 fdd0 	bl	80005f8 <__aeabi_dmul>
 800ca58:	1136      	asrs	r6, r6, #4
 800ca5a:	4682      	mov	sl, r0
 800ca5c:	468b      	mov	fp, r1
 800ca5e:	2300      	movs	r3, #0
 800ca60:	2502      	movs	r5, #2
 800ca62:	2e00      	cmp	r6, #0
 800ca64:	d17a      	bne.n	800cb5c <_dtoa_r+0x4c4>
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d1d3      	bne.n	800ca12 <_dtoa_r+0x37a>
 800ca6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	f000 8082 	beq.w	800cb76 <_dtoa_r+0x4de>
 800ca72:	4b91      	ldr	r3, [pc, #580]	; (800ccb8 <_dtoa_r+0x620>)
 800ca74:	2200      	movs	r2, #0
 800ca76:	4650      	mov	r0, sl
 800ca78:	4659      	mov	r1, fp
 800ca7a:	f7f4 f82f 	bl	8000adc <__aeabi_dcmplt>
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	d079      	beq.n	800cb76 <_dtoa_r+0x4de>
 800ca82:	9b03      	ldr	r3, [sp, #12]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d076      	beq.n	800cb76 <_dtoa_r+0x4de>
 800ca88:	9b02      	ldr	r3, [sp, #8]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	dd36      	ble.n	800cafc <_dtoa_r+0x464>
 800ca8e:	9b00      	ldr	r3, [sp, #0]
 800ca90:	4650      	mov	r0, sl
 800ca92:	4659      	mov	r1, fp
 800ca94:	1e5f      	subs	r7, r3, #1
 800ca96:	2200      	movs	r2, #0
 800ca98:	4b88      	ldr	r3, [pc, #544]	; (800ccbc <_dtoa_r+0x624>)
 800ca9a:	f7f3 fdad 	bl	80005f8 <__aeabi_dmul>
 800ca9e:	9e02      	ldr	r6, [sp, #8]
 800caa0:	4682      	mov	sl, r0
 800caa2:	468b      	mov	fp, r1
 800caa4:	3501      	adds	r5, #1
 800caa6:	4628      	mov	r0, r5
 800caa8:	f7f3 fd3c 	bl	8000524 <__aeabi_i2d>
 800caac:	4652      	mov	r2, sl
 800caae:	465b      	mov	r3, fp
 800cab0:	f7f3 fda2 	bl	80005f8 <__aeabi_dmul>
 800cab4:	4b82      	ldr	r3, [pc, #520]	; (800ccc0 <_dtoa_r+0x628>)
 800cab6:	2200      	movs	r2, #0
 800cab8:	f7f3 fbe8 	bl	800028c <__adddf3>
 800cabc:	46d0      	mov	r8, sl
 800cabe:	46d9      	mov	r9, fp
 800cac0:	4682      	mov	sl, r0
 800cac2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cac6:	2e00      	cmp	r6, #0
 800cac8:	d158      	bne.n	800cb7c <_dtoa_r+0x4e4>
 800caca:	4b7e      	ldr	r3, [pc, #504]	; (800ccc4 <_dtoa_r+0x62c>)
 800cacc:	2200      	movs	r2, #0
 800cace:	4640      	mov	r0, r8
 800cad0:	4649      	mov	r1, r9
 800cad2:	f7f3 fbd9 	bl	8000288 <__aeabi_dsub>
 800cad6:	4652      	mov	r2, sl
 800cad8:	465b      	mov	r3, fp
 800cada:	4680      	mov	r8, r0
 800cadc:	4689      	mov	r9, r1
 800cade:	f7f4 f81b 	bl	8000b18 <__aeabi_dcmpgt>
 800cae2:	2800      	cmp	r0, #0
 800cae4:	f040 8295 	bne.w	800d012 <_dtoa_r+0x97a>
 800cae8:	4652      	mov	r2, sl
 800caea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800caee:	4640      	mov	r0, r8
 800caf0:	4649      	mov	r1, r9
 800caf2:	f7f3 fff3 	bl	8000adc <__aeabi_dcmplt>
 800caf6:	2800      	cmp	r0, #0
 800caf8:	f040 8289 	bne.w	800d00e <_dtoa_r+0x976>
 800cafc:	ec5b ab19 	vmov	sl, fp, d9
 800cb00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	f2c0 8148 	blt.w	800cd98 <_dtoa_r+0x700>
 800cb08:	9a00      	ldr	r2, [sp, #0]
 800cb0a:	2a0e      	cmp	r2, #14
 800cb0c:	f300 8144 	bgt.w	800cd98 <_dtoa_r+0x700>
 800cb10:	4b67      	ldr	r3, [pc, #412]	; (800ccb0 <_dtoa_r+0x618>)
 800cb12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb16:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	f280 80d5 	bge.w	800cccc <_dtoa_r+0x634>
 800cb22:	9b03      	ldr	r3, [sp, #12]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	f300 80d1 	bgt.w	800cccc <_dtoa_r+0x634>
 800cb2a:	f040 826f 	bne.w	800d00c <_dtoa_r+0x974>
 800cb2e:	4b65      	ldr	r3, [pc, #404]	; (800ccc4 <_dtoa_r+0x62c>)
 800cb30:	2200      	movs	r2, #0
 800cb32:	4640      	mov	r0, r8
 800cb34:	4649      	mov	r1, r9
 800cb36:	f7f3 fd5f 	bl	80005f8 <__aeabi_dmul>
 800cb3a:	4652      	mov	r2, sl
 800cb3c:	465b      	mov	r3, fp
 800cb3e:	f7f3 ffe1 	bl	8000b04 <__aeabi_dcmpge>
 800cb42:	9e03      	ldr	r6, [sp, #12]
 800cb44:	4637      	mov	r7, r6
 800cb46:	2800      	cmp	r0, #0
 800cb48:	f040 8245 	bne.w	800cfd6 <_dtoa_r+0x93e>
 800cb4c:	9d01      	ldr	r5, [sp, #4]
 800cb4e:	2331      	movs	r3, #49	; 0x31
 800cb50:	f805 3b01 	strb.w	r3, [r5], #1
 800cb54:	9b00      	ldr	r3, [sp, #0]
 800cb56:	3301      	adds	r3, #1
 800cb58:	9300      	str	r3, [sp, #0]
 800cb5a:	e240      	b.n	800cfde <_dtoa_r+0x946>
 800cb5c:	07f2      	lsls	r2, r6, #31
 800cb5e:	d505      	bpl.n	800cb6c <_dtoa_r+0x4d4>
 800cb60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb64:	f7f3 fd48 	bl	80005f8 <__aeabi_dmul>
 800cb68:	3501      	adds	r5, #1
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	1076      	asrs	r6, r6, #1
 800cb6e:	3708      	adds	r7, #8
 800cb70:	e777      	b.n	800ca62 <_dtoa_r+0x3ca>
 800cb72:	2502      	movs	r5, #2
 800cb74:	e779      	b.n	800ca6a <_dtoa_r+0x3d2>
 800cb76:	9f00      	ldr	r7, [sp, #0]
 800cb78:	9e03      	ldr	r6, [sp, #12]
 800cb7a:	e794      	b.n	800caa6 <_dtoa_r+0x40e>
 800cb7c:	9901      	ldr	r1, [sp, #4]
 800cb7e:	4b4c      	ldr	r3, [pc, #304]	; (800ccb0 <_dtoa_r+0x618>)
 800cb80:	4431      	add	r1, r6
 800cb82:	910d      	str	r1, [sp, #52]	; 0x34
 800cb84:	9908      	ldr	r1, [sp, #32]
 800cb86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cb8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb8e:	2900      	cmp	r1, #0
 800cb90:	d043      	beq.n	800cc1a <_dtoa_r+0x582>
 800cb92:	494d      	ldr	r1, [pc, #308]	; (800ccc8 <_dtoa_r+0x630>)
 800cb94:	2000      	movs	r0, #0
 800cb96:	f7f3 fe59 	bl	800084c <__aeabi_ddiv>
 800cb9a:	4652      	mov	r2, sl
 800cb9c:	465b      	mov	r3, fp
 800cb9e:	f7f3 fb73 	bl	8000288 <__aeabi_dsub>
 800cba2:	9d01      	ldr	r5, [sp, #4]
 800cba4:	4682      	mov	sl, r0
 800cba6:	468b      	mov	fp, r1
 800cba8:	4649      	mov	r1, r9
 800cbaa:	4640      	mov	r0, r8
 800cbac:	f7f3 ffd4 	bl	8000b58 <__aeabi_d2iz>
 800cbb0:	4606      	mov	r6, r0
 800cbb2:	f7f3 fcb7 	bl	8000524 <__aeabi_i2d>
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	460b      	mov	r3, r1
 800cbba:	4640      	mov	r0, r8
 800cbbc:	4649      	mov	r1, r9
 800cbbe:	f7f3 fb63 	bl	8000288 <__aeabi_dsub>
 800cbc2:	3630      	adds	r6, #48	; 0x30
 800cbc4:	f805 6b01 	strb.w	r6, [r5], #1
 800cbc8:	4652      	mov	r2, sl
 800cbca:	465b      	mov	r3, fp
 800cbcc:	4680      	mov	r8, r0
 800cbce:	4689      	mov	r9, r1
 800cbd0:	f7f3 ff84 	bl	8000adc <__aeabi_dcmplt>
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	d163      	bne.n	800cca0 <_dtoa_r+0x608>
 800cbd8:	4642      	mov	r2, r8
 800cbda:	464b      	mov	r3, r9
 800cbdc:	4936      	ldr	r1, [pc, #216]	; (800ccb8 <_dtoa_r+0x620>)
 800cbde:	2000      	movs	r0, #0
 800cbe0:	f7f3 fb52 	bl	8000288 <__aeabi_dsub>
 800cbe4:	4652      	mov	r2, sl
 800cbe6:	465b      	mov	r3, fp
 800cbe8:	f7f3 ff78 	bl	8000adc <__aeabi_dcmplt>
 800cbec:	2800      	cmp	r0, #0
 800cbee:	f040 80b5 	bne.w	800cd5c <_dtoa_r+0x6c4>
 800cbf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbf4:	429d      	cmp	r5, r3
 800cbf6:	d081      	beq.n	800cafc <_dtoa_r+0x464>
 800cbf8:	4b30      	ldr	r3, [pc, #192]	; (800ccbc <_dtoa_r+0x624>)
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	4650      	mov	r0, sl
 800cbfe:	4659      	mov	r1, fp
 800cc00:	f7f3 fcfa 	bl	80005f8 <__aeabi_dmul>
 800cc04:	4b2d      	ldr	r3, [pc, #180]	; (800ccbc <_dtoa_r+0x624>)
 800cc06:	4682      	mov	sl, r0
 800cc08:	468b      	mov	fp, r1
 800cc0a:	4640      	mov	r0, r8
 800cc0c:	4649      	mov	r1, r9
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f7f3 fcf2 	bl	80005f8 <__aeabi_dmul>
 800cc14:	4680      	mov	r8, r0
 800cc16:	4689      	mov	r9, r1
 800cc18:	e7c6      	b.n	800cba8 <_dtoa_r+0x510>
 800cc1a:	4650      	mov	r0, sl
 800cc1c:	4659      	mov	r1, fp
 800cc1e:	f7f3 fceb 	bl	80005f8 <__aeabi_dmul>
 800cc22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc24:	9d01      	ldr	r5, [sp, #4]
 800cc26:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc28:	4682      	mov	sl, r0
 800cc2a:	468b      	mov	fp, r1
 800cc2c:	4649      	mov	r1, r9
 800cc2e:	4640      	mov	r0, r8
 800cc30:	f7f3 ff92 	bl	8000b58 <__aeabi_d2iz>
 800cc34:	4606      	mov	r6, r0
 800cc36:	f7f3 fc75 	bl	8000524 <__aeabi_i2d>
 800cc3a:	3630      	adds	r6, #48	; 0x30
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	460b      	mov	r3, r1
 800cc40:	4640      	mov	r0, r8
 800cc42:	4649      	mov	r1, r9
 800cc44:	f7f3 fb20 	bl	8000288 <__aeabi_dsub>
 800cc48:	f805 6b01 	strb.w	r6, [r5], #1
 800cc4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc4e:	429d      	cmp	r5, r3
 800cc50:	4680      	mov	r8, r0
 800cc52:	4689      	mov	r9, r1
 800cc54:	f04f 0200 	mov.w	r2, #0
 800cc58:	d124      	bne.n	800cca4 <_dtoa_r+0x60c>
 800cc5a:	4b1b      	ldr	r3, [pc, #108]	; (800ccc8 <_dtoa_r+0x630>)
 800cc5c:	4650      	mov	r0, sl
 800cc5e:	4659      	mov	r1, fp
 800cc60:	f7f3 fb14 	bl	800028c <__adddf3>
 800cc64:	4602      	mov	r2, r0
 800cc66:	460b      	mov	r3, r1
 800cc68:	4640      	mov	r0, r8
 800cc6a:	4649      	mov	r1, r9
 800cc6c:	f7f3 ff54 	bl	8000b18 <__aeabi_dcmpgt>
 800cc70:	2800      	cmp	r0, #0
 800cc72:	d173      	bne.n	800cd5c <_dtoa_r+0x6c4>
 800cc74:	4652      	mov	r2, sl
 800cc76:	465b      	mov	r3, fp
 800cc78:	4913      	ldr	r1, [pc, #76]	; (800ccc8 <_dtoa_r+0x630>)
 800cc7a:	2000      	movs	r0, #0
 800cc7c:	f7f3 fb04 	bl	8000288 <__aeabi_dsub>
 800cc80:	4602      	mov	r2, r0
 800cc82:	460b      	mov	r3, r1
 800cc84:	4640      	mov	r0, r8
 800cc86:	4649      	mov	r1, r9
 800cc88:	f7f3 ff28 	bl	8000adc <__aeabi_dcmplt>
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	f43f af35 	beq.w	800cafc <_dtoa_r+0x464>
 800cc92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cc94:	1e6b      	subs	r3, r5, #1
 800cc96:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc98:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc9c:	2b30      	cmp	r3, #48	; 0x30
 800cc9e:	d0f8      	beq.n	800cc92 <_dtoa_r+0x5fa>
 800cca0:	9700      	str	r7, [sp, #0]
 800cca2:	e049      	b.n	800cd38 <_dtoa_r+0x6a0>
 800cca4:	4b05      	ldr	r3, [pc, #20]	; (800ccbc <_dtoa_r+0x624>)
 800cca6:	f7f3 fca7 	bl	80005f8 <__aeabi_dmul>
 800ccaa:	4680      	mov	r8, r0
 800ccac:	4689      	mov	r9, r1
 800ccae:	e7bd      	b.n	800cc2c <_dtoa_r+0x594>
 800ccb0:	0800fa28 	.word	0x0800fa28
 800ccb4:	0800fa00 	.word	0x0800fa00
 800ccb8:	3ff00000 	.word	0x3ff00000
 800ccbc:	40240000 	.word	0x40240000
 800ccc0:	401c0000 	.word	0x401c0000
 800ccc4:	40140000 	.word	0x40140000
 800ccc8:	3fe00000 	.word	0x3fe00000
 800cccc:	9d01      	ldr	r5, [sp, #4]
 800ccce:	4656      	mov	r6, sl
 800ccd0:	465f      	mov	r7, fp
 800ccd2:	4642      	mov	r2, r8
 800ccd4:	464b      	mov	r3, r9
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	4639      	mov	r1, r7
 800ccda:	f7f3 fdb7 	bl	800084c <__aeabi_ddiv>
 800ccde:	f7f3 ff3b 	bl	8000b58 <__aeabi_d2iz>
 800cce2:	4682      	mov	sl, r0
 800cce4:	f7f3 fc1e 	bl	8000524 <__aeabi_i2d>
 800cce8:	4642      	mov	r2, r8
 800ccea:	464b      	mov	r3, r9
 800ccec:	f7f3 fc84 	bl	80005f8 <__aeabi_dmul>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	460b      	mov	r3, r1
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	4639      	mov	r1, r7
 800ccf8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ccfc:	f7f3 fac4 	bl	8000288 <__aeabi_dsub>
 800cd00:	f805 6b01 	strb.w	r6, [r5], #1
 800cd04:	9e01      	ldr	r6, [sp, #4]
 800cd06:	9f03      	ldr	r7, [sp, #12]
 800cd08:	1bae      	subs	r6, r5, r6
 800cd0a:	42b7      	cmp	r7, r6
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	460b      	mov	r3, r1
 800cd10:	d135      	bne.n	800cd7e <_dtoa_r+0x6e6>
 800cd12:	f7f3 fabb 	bl	800028c <__adddf3>
 800cd16:	4642      	mov	r2, r8
 800cd18:	464b      	mov	r3, r9
 800cd1a:	4606      	mov	r6, r0
 800cd1c:	460f      	mov	r7, r1
 800cd1e:	f7f3 fefb 	bl	8000b18 <__aeabi_dcmpgt>
 800cd22:	b9d0      	cbnz	r0, 800cd5a <_dtoa_r+0x6c2>
 800cd24:	4642      	mov	r2, r8
 800cd26:	464b      	mov	r3, r9
 800cd28:	4630      	mov	r0, r6
 800cd2a:	4639      	mov	r1, r7
 800cd2c:	f7f3 fecc 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd30:	b110      	cbz	r0, 800cd38 <_dtoa_r+0x6a0>
 800cd32:	f01a 0f01 	tst.w	sl, #1
 800cd36:	d110      	bne.n	800cd5a <_dtoa_r+0x6c2>
 800cd38:	4620      	mov	r0, r4
 800cd3a:	ee18 1a10 	vmov	r1, s16
 800cd3e:	f000 fe8b 	bl	800da58 <_Bfree>
 800cd42:	2300      	movs	r3, #0
 800cd44:	9800      	ldr	r0, [sp, #0]
 800cd46:	702b      	strb	r3, [r5, #0]
 800cd48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd4a:	3001      	adds	r0, #1
 800cd4c:	6018      	str	r0, [r3, #0]
 800cd4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	f43f acf1 	beq.w	800c738 <_dtoa_r+0xa0>
 800cd56:	601d      	str	r5, [r3, #0]
 800cd58:	e4ee      	b.n	800c738 <_dtoa_r+0xa0>
 800cd5a:	9f00      	ldr	r7, [sp, #0]
 800cd5c:	462b      	mov	r3, r5
 800cd5e:	461d      	mov	r5, r3
 800cd60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd64:	2a39      	cmp	r2, #57	; 0x39
 800cd66:	d106      	bne.n	800cd76 <_dtoa_r+0x6de>
 800cd68:	9a01      	ldr	r2, [sp, #4]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d1f7      	bne.n	800cd5e <_dtoa_r+0x6c6>
 800cd6e:	9901      	ldr	r1, [sp, #4]
 800cd70:	2230      	movs	r2, #48	; 0x30
 800cd72:	3701      	adds	r7, #1
 800cd74:	700a      	strb	r2, [r1, #0]
 800cd76:	781a      	ldrb	r2, [r3, #0]
 800cd78:	3201      	adds	r2, #1
 800cd7a:	701a      	strb	r2, [r3, #0]
 800cd7c:	e790      	b.n	800cca0 <_dtoa_r+0x608>
 800cd7e:	4ba6      	ldr	r3, [pc, #664]	; (800d018 <_dtoa_r+0x980>)
 800cd80:	2200      	movs	r2, #0
 800cd82:	f7f3 fc39 	bl	80005f8 <__aeabi_dmul>
 800cd86:	2200      	movs	r2, #0
 800cd88:	2300      	movs	r3, #0
 800cd8a:	4606      	mov	r6, r0
 800cd8c:	460f      	mov	r7, r1
 800cd8e:	f7f3 fe9b 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd92:	2800      	cmp	r0, #0
 800cd94:	d09d      	beq.n	800ccd2 <_dtoa_r+0x63a>
 800cd96:	e7cf      	b.n	800cd38 <_dtoa_r+0x6a0>
 800cd98:	9a08      	ldr	r2, [sp, #32]
 800cd9a:	2a00      	cmp	r2, #0
 800cd9c:	f000 80d7 	beq.w	800cf4e <_dtoa_r+0x8b6>
 800cda0:	9a06      	ldr	r2, [sp, #24]
 800cda2:	2a01      	cmp	r2, #1
 800cda4:	f300 80ba 	bgt.w	800cf1c <_dtoa_r+0x884>
 800cda8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cdaa:	2a00      	cmp	r2, #0
 800cdac:	f000 80b2 	beq.w	800cf14 <_dtoa_r+0x87c>
 800cdb0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cdb4:	9e07      	ldr	r6, [sp, #28]
 800cdb6:	9d04      	ldr	r5, [sp, #16]
 800cdb8:	9a04      	ldr	r2, [sp, #16]
 800cdba:	441a      	add	r2, r3
 800cdbc:	9204      	str	r2, [sp, #16]
 800cdbe:	9a05      	ldr	r2, [sp, #20]
 800cdc0:	2101      	movs	r1, #1
 800cdc2:	441a      	add	r2, r3
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	9205      	str	r2, [sp, #20]
 800cdc8:	f000 ff48 	bl	800dc5c <__i2b>
 800cdcc:	4607      	mov	r7, r0
 800cdce:	2d00      	cmp	r5, #0
 800cdd0:	dd0c      	ble.n	800cdec <_dtoa_r+0x754>
 800cdd2:	9b05      	ldr	r3, [sp, #20]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	dd09      	ble.n	800cdec <_dtoa_r+0x754>
 800cdd8:	42ab      	cmp	r3, r5
 800cdda:	9a04      	ldr	r2, [sp, #16]
 800cddc:	bfa8      	it	ge
 800cdde:	462b      	movge	r3, r5
 800cde0:	1ad2      	subs	r2, r2, r3
 800cde2:	9204      	str	r2, [sp, #16]
 800cde4:	9a05      	ldr	r2, [sp, #20]
 800cde6:	1aed      	subs	r5, r5, r3
 800cde8:	1ad3      	subs	r3, r2, r3
 800cdea:	9305      	str	r3, [sp, #20]
 800cdec:	9b07      	ldr	r3, [sp, #28]
 800cdee:	b31b      	cbz	r3, 800ce38 <_dtoa_r+0x7a0>
 800cdf0:	9b08      	ldr	r3, [sp, #32]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	f000 80af 	beq.w	800cf56 <_dtoa_r+0x8be>
 800cdf8:	2e00      	cmp	r6, #0
 800cdfa:	dd13      	ble.n	800ce24 <_dtoa_r+0x78c>
 800cdfc:	4639      	mov	r1, r7
 800cdfe:	4632      	mov	r2, r6
 800ce00:	4620      	mov	r0, r4
 800ce02:	f000 ffeb 	bl	800dddc <__pow5mult>
 800ce06:	ee18 2a10 	vmov	r2, s16
 800ce0a:	4601      	mov	r1, r0
 800ce0c:	4607      	mov	r7, r0
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f000 ff3a 	bl	800dc88 <__multiply>
 800ce14:	ee18 1a10 	vmov	r1, s16
 800ce18:	4680      	mov	r8, r0
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	f000 fe1c 	bl	800da58 <_Bfree>
 800ce20:	ee08 8a10 	vmov	s16, r8
 800ce24:	9b07      	ldr	r3, [sp, #28]
 800ce26:	1b9a      	subs	r2, r3, r6
 800ce28:	d006      	beq.n	800ce38 <_dtoa_r+0x7a0>
 800ce2a:	ee18 1a10 	vmov	r1, s16
 800ce2e:	4620      	mov	r0, r4
 800ce30:	f000 ffd4 	bl	800dddc <__pow5mult>
 800ce34:	ee08 0a10 	vmov	s16, r0
 800ce38:	2101      	movs	r1, #1
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	f000 ff0e 	bl	800dc5c <__i2b>
 800ce40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	4606      	mov	r6, r0
 800ce46:	f340 8088 	ble.w	800cf5a <_dtoa_r+0x8c2>
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	4601      	mov	r1, r0
 800ce4e:	4620      	mov	r0, r4
 800ce50:	f000 ffc4 	bl	800dddc <__pow5mult>
 800ce54:	9b06      	ldr	r3, [sp, #24]
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	4606      	mov	r6, r0
 800ce5a:	f340 8081 	ble.w	800cf60 <_dtoa_r+0x8c8>
 800ce5e:	f04f 0800 	mov.w	r8, #0
 800ce62:	6933      	ldr	r3, [r6, #16]
 800ce64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ce68:	6918      	ldr	r0, [r3, #16]
 800ce6a:	f000 fea7 	bl	800dbbc <__hi0bits>
 800ce6e:	f1c0 0020 	rsb	r0, r0, #32
 800ce72:	9b05      	ldr	r3, [sp, #20]
 800ce74:	4418      	add	r0, r3
 800ce76:	f010 001f 	ands.w	r0, r0, #31
 800ce7a:	f000 8092 	beq.w	800cfa2 <_dtoa_r+0x90a>
 800ce7e:	f1c0 0320 	rsb	r3, r0, #32
 800ce82:	2b04      	cmp	r3, #4
 800ce84:	f340 808a 	ble.w	800cf9c <_dtoa_r+0x904>
 800ce88:	f1c0 001c 	rsb	r0, r0, #28
 800ce8c:	9b04      	ldr	r3, [sp, #16]
 800ce8e:	4403      	add	r3, r0
 800ce90:	9304      	str	r3, [sp, #16]
 800ce92:	9b05      	ldr	r3, [sp, #20]
 800ce94:	4403      	add	r3, r0
 800ce96:	4405      	add	r5, r0
 800ce98:	9305      	str	r3, [sp, #20]
 800ce9a:	9b04      	ldr	r3, [sp, #16]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	dd07      	ble.n	800ceb0 <_dtoa_r+0x818>
 800cea0:	ee18 1a10 	vmov	r1, s16
 800cea4:	461a      	mov	r2, r3
 800cea6:	4620      	mov	r0, r4
 800cea8:	f000 fff2 	bl	800de90 <__lshift>
 800ceac:	ee08 0a10 	vmov	s16, r0
 800ceb0:	9b05      	ldr	r3, [sp, #20]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	dd05      	ble.n	800cec2 <_dtoa_r+0x82a>
 800ceb6:	4631      	mov	r1, r6
 800ceb8:	461a      	mov	r2, r3
 800ceba:	4620      	mov	r0, r4
 800cebc:	f000 ffe8 	bl	800de90 <__lshift>
 800cec0:	4606      	mov	r6, r0
 800cec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d06e      	beq.n	800cfa6 <_dtoa_r+0x90e>
 800cec8:	ee18 0a10 	vmov	r0, s16
 800cecc:	4631      	mov	r1, r6
 800cece:	f001 f84f 	bl	800df70 <__mcmp>
 800ced2:	2800      	cmp	r0, #0
 800ced4:	da67      	bge.n	800cfa6 <_dtoa_r+0x90e>
 800ced6:	9b00      	ldr	r3, [sp, #0]
 800ced8:	3b01      	subs	r3, #1
 800ceda:	ee18 1a10 	vmov	r1, s16
 800cede:	9300      	str	r3, [sp, #0]
 800cee0:	220a      	movs	r2, #10
 800cee2:	2300      	movs	r3, #0
 800cee4:	4620      	mov	r0, r4
 800cee6:	f000 fdd9 	bl	800da9c <__multadd>
 800ceea:	9b08      	ldr	r3, [sp, #32]
 800ceec:	ee08 0a10 	vmov	s16, r0
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	f000 81b1 	beq.w	800d258 <_dtoa_r+0xbc0>
 800cef6:	2300      	movs	r3, #0
 800cef8:	4639      	mov	r1, r7
 800cefa:	220a      	movs	r2, #10
 800cefc:	4620      	mov	r0, r4
 800cefe:	f000 fdcd 	bl	800da9c <__multadd>
 800cf02:	9b02      	ldr	r3, [sp, #8]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	4607      	mov	r7, r0
 800cf08:	f300 808e 	bgt.w	800d028 <_dtoa_r+0x990>
 800cf0c:	9b06      	ldr	r3, [sp, #24]
 800cf0e:	2b02      	cmp	r3, #2
 800cf10:	dc51      	bgt.n	800cfb6 <_dtoa_r+0x91e>
 800cf12:	e089      	b.n	800d028 <_dtoa_r+0x990>
 800cf14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cf1a:	e74b      	b.n	800cdb4 <_dtoa_r+0x71c>
 800cf1c:	9b03      	ldr	r3, [sp, #12]
 800cf1e:	1e5e      	subs	r6, r3, #1
 800cf20:	9b07      	ldr	r3, [sp, #28]
 800cf22:	42b3      	cmp	r3, r6
 800cf24:	bfbf      	itttt	lt
 800cf26:	9b07      	ldrlt	r3, [sp, #28]
 800cf28:	9607      	strlt	r6, [sp, #28]
 800cf2a:	1af2      	sublt	r2, r6, r3
 800cf2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cf2e:	bfb6      	itet	lt
 800cf30:	189b      	addlt	r3, r3, r2
 800cf32:	1b9e      	subge	r6, r3, r6
 800cf34:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cf36:	9b03      	ldr	r3, [sp, #12]
 800cf38:	bfb8      	it	lt
 800cf3a:	2600      	movlt	r6, #0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	bfb7      	itett	lt
 800cf40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cf44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cf48:	1a9d      	sublt	r5, r3, r2
 800cf4a:	2300      	movlt	r3, #0
 800cf4c:	e734      	b.n	800cdb8 <_dtoa_r+0x720>
 800cf4e:	9e07      	ldr	r6, [sp, #28]
 800cf50:	9d04      	ldr	r5, [sp, #16]
 800cf52:	9f08      	ldr	r7, [sp, #32]
 800cf54:	e73b      	b.n	800cdce <_dtoa_r+0x736>
 800cf56:	9a07      	ldr	r2, [sp, #28]
 800cf58:	e767      	b.n	800ce2a <_dtoa_r+0x792>
 800cf5a:	9b06      	ldr	r3, [sp, #24]
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	dc18      	bgt.n	800cf92 <_dtoa_r+0x8fa>
 800cf60:	f1ba 0f00 	cmp.w	sl, #0
 800cf64:	d115      	bne.n	800cf92 <_dtoa_r+0x8fa>
 800cf66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf6a:	b993      	cbnz	r3, 800cf92 <_dtoa_r+0x8fa>
 800cf6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cf70:	0d1b      	lsrs	r3, r3, #20
 800cf72:	051b      	lsls	r3, r3, #20
 800cf74:	b183      	cbz	r3, 800cf98 <_dtoa_r+0x900>
 800cf76:	9b04      	ldr	r3, [sp, #16]
 800cf78:	3301      	adds	r3, #1
 800cf7a:	9304      	str	r3, [sp, #16]
 800cf7c:	9b05      	ldr	r3, [sp, #20]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	9305      	str	r3, [sp, #20]
 800cf82:	f04f 0801 	mov.w	r8, #1
 800cf86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	f47f af6a 	bne.w	800ce62 <_dtoa_r+0x7ca>
 800cf8e:	2001      	movs	r0, #1
 800cf90:	e76f      	b.n	800ce72 <_dtoa_r+0x7da>
 800cf92:	f04f 0800 	mov.w	r8, #0
 800cf96:	e7f6      	b.n	800cf86 <_dtoa_r+0x8ee>
 800cf98:	4698      	mov	r8, r3
 800cf9a:	e7f4      	b.n	800cf86 <_dtoa_r+0x8ee>
 800cf9c:	f43f af7d 	beq.w	800ce9a <_dtoa_r+0x802>
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	301c      	adds	r0, #28
 800cfa4:	e772      	b.n	800ce8c <_dtoa_r+0x7f4>
 800cfa6:	9b03      	ldr	r3, [sp, #12]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	dc37      	bgt.n	800d01c <_dtoa_r+0x984>
 800cfac:	9b06      	ldr	r3, [sp, #24]
 800cfae:	2b02      	cmp	r3, #2
 800cfb0:	dd34      	ble.n	800d01c <_dtoa_r+0x984>
 800cfb2:	9b03      	ldr	r3, [sp, #12]
 800cfb4:	9302      	str	r3, [sp, #8]
 800cfb6:	9b02      	ldr	r3, [sp, #8]
 800cfb8:	b96b      	cbnz	r3, 800cfd6 <_dtoa_r+0x93e>
 800cfba:	4631      	mov	r1, r6
 800cfbc:	2205      	movs	r2, #5
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	f000 fd6c 	bl	800da9c <__multadd>
 800cfc4:	4601      	mov	r1, r0
 800cfc6:	4606      	mov	r6, r0
 800cfc8:	ee18 0a10 	vmov	r0, s16
 800cfcc:	f000 ffd0 	bl	800df70 <__mcmp>
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	f73f adbb 	bgt.w	800cb4c <_dtoa_r+0x4b4>
 800cfd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfd8:	9d01      	ldr	r5, [sp, #4]
 800cfda:	43db      	mvns	r3, r3
 800cfdc:	9300      	str	r3, [sp, #0]
 800cfde:	f04f 0800 	mov.w	r8, #0
 800cfe2:	4631      	mov	r1, r6
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	f000 fd37 	bl	800da58 <_Bfree>
 800cfea:	2f00      	cmp	r7, #0
 800cfec:	f43f aea4 	beq.w	800cd38 <_dtoa_r+0x6a0>
 800cff0:	f1b8 0f00 	cmp.w	r8, #0
 800cff4:	d005      	beq.n	800d002 <_dtoa_r+0x96a>
 800cff6:	45b8      	cmp	r8, r7
 800cff8:	d003      	beq.n	800d002 <_dtoa_r+0x96a>
 800cffa:	4641      	mov	r1, r8
 800cffc:	4620      	mov	r0, r4
 800cffe:	f000 fd2b 	bl	800da58 <_Bfree>
 800d002:	4639      	mov	r1, r7
 800d004:	4620      	mov	r0, r4
 800d006:	f000 fd27 	bl	800da58 <_Bfree>
 800d00a:	e695      	b.n	800cd38 <_dtoa_r+0x6a0>
 800d00c:	2600      	movs	r6, #0
 800d00e:	4637      	mov	r7, r6
 800d010:	e7e1      	b.n	800cfd6 <_dtoa_r+0x93e>
 800d012:	9700      	str	r7, [sp, #0]
 800d014:	4637      	mov	r7, r6
 800d016:	e599      	b.n	800cb4c <_dtoa_r+0x4b4>
 800d018:	40240000 	.word	0x40240000
 800d01c:	9b08      	ldr	r3, [sp, #32]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	f000 80ca 	beq.w	800d1b8 <_dtoa_r+0xb20>
 800d024:	9b03      	ldr	r3, [sp, #12]
 800d026:	9302      	str	r3, [sp, #8]
 800d028:	2d00      	cmp	r5, #0
 800d02a:	dd05      	ble.n	800d038 <_dtoa_r+0x9a0>
 800d02c:	4639      	mov	r1, r7
 800d02e:	462a      	mov	r2, r5
 800d030:	4620      	mov	r0, r4
 800d032:	f000 ff2d 	bl	800de90 <__lshift>
 800d036:	4607      	mov	r7, r0
 800d038:	f1b8 0f00 	cmp.w	r8, #0
 800d03c:	d05b      	beq.n	800d0f6 <_dtoa_r+0xa5e>
 800d03e:	6879      	ldr	r1, [r7, #4]
 800d040:	4620      	mov	r0, r4
 800d042:	f000 fcc9 	bl	800d9d8 <_Balloc>
 800d046:	4605      	mov	r5, r0
 800d048:	b928      	cbnz	r0, 800d056 <_dtoa_r+0x9be>
 800d04a:	4b87      	ldr	r3, [pc, #540]	; (800d268 <_dtoa_r+0xbd0>)
 800d04c:	4602      	mov	r2, r0
 800d04e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d052:	f7ff bb3b 	b.w	800c6cc <_dtoa_r+0x34>
 800d056:	693a      	ldr	r2, [r7, #16]
 800d058:	3202      	adds	r2, #2
 800d05a:	0092      	lsls	r2, r2, #2
 800d05c:	f107 010c 	add.w	r1, r7, #12
 800d060:	300c      	adds	r0, #12
 800d062:	f000 fc9f 	bl	800d9a4 <memcpy>
 800d066:	2201      	movs	r2, #1
 800d068:	4629      	mov	r1, r5
 800d06a:	4620      	mov	r0, r4
 800d06c:	f000 ff10 	bl	800de90 <__lshift>
 800d070:	9b01      	ldr	r3, [sp, #4]
 800d072:	f103 0901 	add.w	r9, r3, #1
 800d076:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d07a:	4413      	add	r3, r2
 800d07c:	9305      	str	r3, [sp, #20]
 800d07e:	f00a 0301 	and.w	r3, sl, #1
 800d082:	46b8      	mov	r8, r7
 800d084:	9304      	str	r3, [sp, #16]
 800d086:	4607      	mov	r7, r0
 800d088:	4631      	mov	r1, r6
 800d08a:	ee18 0a10 	vmov	r0, s16
 800d08e:	f7ff fa75 	bl	800c57c <quorem>
 800d092:	4641      	mov	r1, r8
 800d094:	9002      	str	r0, [sp, #8]
 800d096:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d09a:	ee18 0a10 	vmov	r0, s16
 800d09e:	f000 ff67 	bl	800df70 <__mcmp>
 800d0a2:	463a      	mov	r2, r7
 800d0a4:	9003      	str	r0, [sp, #12]
 800d0a6:	4631      	mov	r1, r6
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	f000 ff7d 	bl	800dfa8 <__mdiff>
 800d0ae:	68c2      	ldr	r2, [r0, #12]
 800d0b0:	f109 3bff 	add.w	fp, r9, #4294967295
 800d0b4:	4605      	mov	r5, r0
 800d0b6:	bb02      	cbnz	r2, 800d0fa <_dtoa_r+0xa62>
 800d0b8:	4601      	mov	r1, r0
 800d0ba:	ee18 0a10 	vmov	r0, s16
 800d0be:	f000 ff57 	bl	800df70 <__mcmp>
 800d0c2:	4602      	mov	r2, r0
 800d0c4:	4629      	mov	r1, r5
 800d0c6:	4620      	mov	r0, r4
 800d0c8:	9207      	str	r2, [sp, #28]
 800d0ca:	f000 fcc5 	bl	800da58 <_Bfree>
 800d0ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d0d2:	ea43 0102 	orr.w	r1, r3, r2
 800d0d6:	9b04      	ldr	r3, [sp, #16]
 800d0d8:	430b      	orrs	r3, r1
 800d0da:	464d      	mov	r5, r9
 800d0dc:	d10f      	bne.n	800d0fe <_dtoa_r+0xa66>
 800d0de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d0e2:	d02a      	beq.n	800d13a <_dtoa_r+0xaa2>
 800d0e4:	9b03      	ldr	r3, [sp, #12]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	dd02      	ble.n	800d0f0 <_dtoa_r+0xa58>
 800d0ea:	9b02      	ldr	r3, [sp, #8]
 800d0ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d0f0:	f88b a000 	strb.w	sl, [fp]
 800d0f4:	e775      	b.n	800cfe2 <_dtoa_r+0x94a>
 800d0f6:	4638      	mov	r0, r7
 800d0f8:	e7ba      	b.n	800d070 <_dtoa_r+0x9d8>
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	e7e2      	b.n	800d0c4 <_dtoa_r+0xa2c>
 800d0fe:	9b03      	ldr	r3, [sp, #12]
 800d100:	2b00      	cmp	r3, #0
 800d102:	db04      	blt.n	800d10e <_dtoa_r+0xa76>
 800d104:	9906      	ldr	r1, [sp, #24]
 800d106:	430b      	orrs	r3, r1
 800d108:	9904      	ldr	r1, [sp, #16]
 800d10a:	430b      	orrs	r3, r1
 800d10c:	d122      	bne.n	800d154 <_dtoa_r+0xabc>
 800d10e:	2a00      	cmp	r2, #0
 800d110:	ddee      	ble.n	800d0f0 <_dtoa_r+0xa58>
 800d112:	ee18 1a10 	vmov	r1, s16
 800d116:	2201      	movs	r2, #1
 800d118:	4620      	mov	r0, r4
 800d11a:	f000 feb9 	bl	800de90 <__lshift>
 800d11e:	4631      	mov	r1, r6
 800d120:	ee08 0a10 	vmov	s16, r0
 800d124:	f000 ff24 	bl	800df70 <__mcmp>
 800d128:	2800      	cmp	r0, #0
 800d12a:	dc03      	bgt.n	800d134 <_dtoa_r+0xa9c>
 800d12c:	d1e0      	bne.n	800d0f0 <_dtoa_r+0xa58>
 800d12e:	f01a 0f01 	tst.w	sl, #1
 800d132:	d0dd      	beq.n	800d0f0 <_dtoa_r+0xa58>
 800d134:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d138:	d1d7      	bne.n	800d0ea <_dtoa_r+0xa52>
 800d13a:	2339      	movs	r3, #57	; 0x39
 800d13c:	f88b 3000 	strb.w	r3, [fp]
 800d140:	462b      	mov	r3, r5
 800d142:	461d      	mov	r5, r3
 800d144:	3b01      	subs	r3, #1
 800d146:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d14a:	2a39      	cmp	r2, #57	; 0x39
 800d14c:	d071      	beq.n	800d232 <_dtoa_r+0xb9a>
 800d14e:	3201      	adds	r2, #1
 800d150:	701a      	strb	r2, [r3, #0]
 800d152:	e746      	b.n	800cfe2 <_dtoa_r+0x94a>
 800d154:	2a00      	cmp	r2, #0
 800d156:	dd07      	ble.n	800d168 <_dtoa_r+0xad0>
 800d158:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d15c:	d0ed      	beq.n	800d13a <_dtoa_r+0xaa2>
 800d15e:	f10a 0301 	add.w	r3, sl, #1
 800d162:	f88b 3000 	strb.w	r3, [fp]
 800d166:	e73c      	b.n	800cfe2 <_dtoa_r+0x94a>
 800d168:	9b05      	ldr	r3, [sp, #20]
 800d16a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d16e:	4599      	cmp	r9, r3
 800d170:	d047      	beq.n	800d202 <_dtoa_r+0xb6a>
 800d172:	ee18 1a10 	vmov	r1, s16
 800d176:	2300      	movs	r3, #0
 800d178:	220a      	movs	r2, #10
 800d17a:	4620      	mov	r0, r4
 800d17c:	f000 fc8e 	bl	800da9c <__multadd>
 800d180:	45b8      	cmp	r8, r7
 800d182:	ee08 0a10 	vmov	s16, r0
 800d186:	f04f 0300 	mov.w	r3, #0
 800d18a:	f04f 020a 	mov.w	r2, #10
 800d18e:	4641      	mov	r1, r8
 800d190:	4620      	mov	r0, r4
 800d192:	d106      	bne.n	800d1a2 <_dtoa_r+0xb0a>
 800d194:	f000 fc82 	bl	800da9c <__multadd>
 800d198:	4680      	mov	r8, r0
 800d19a:	4607      	mov	r7, r0
 800d19c:	f109 0901 	add.w	r9, r9, #1
 800d1a0:	e772      	b.n	800d088 <_dtoa_r+0x9f0>
 800d1a2:	f000 fc7b 	bl	800da9c <__multadd>
 800d1a6:	4639      	mov	r1, r7
 800d1a8:	4680      	mov	r8, r0
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	220a      	movs	r2, #10
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	f000 fc74 	bl	800da9c <__multadd>
 800d1b4:	4607      	mov	r7, r0
 800d1b6:	e7f1      	b.n	800d19c <_dtoa_r+0xb04>
 800d1b8:	9b03      	ldr	r3, [sp, #12]
 800d1ba:	9302      	str	r3, [sp, #8]
 800d1bc:	9d01      	ldr	r5, [sp, #4]
 800d1be:	ee18 0a10 	vmov	r0, s16
 800d1c2:	4631      	mov	r1, r6
 800d1c4:	f7ff f9da 	bl	800c57c <quorem>
 800d1c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d1cc:	9b01      	ldr	r3, [sp, #4]
 800d1ce:	f805 ab01 	strb.w	sl, [r5], #1
 800d1d2:	1aea      	subs	r2, r5, r3
 800d1d4:	9b02      	ldr	r3, [sp, #8]
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	dd09      	ble.n	800d1ee <_dtoa_r+0xb56>
 800d1da:	ee18 1a10 	vmov	r1, s16
 800d1de:	2300      	movs	r3, #0
 800d1e0:	220a      	movs	r2, #10
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f000 fc5a 	bl	800da9c <__multadd>
 800d1e8:	ee08 0a10 	vmov	s16, r0
 800d1ec:	e7e7      	b.n	800d1be <_dtoa_r+0xb26>
 800d1ee:	9b02      	ldr	r3, [sp, #8]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	bfc8      	it	gt
 800d1f4:	461d      	movgt	r5, r3
 800d1f6:	9b01      	ldr	r3, [sp, #4]
 800d1f8:	bfd8      	it	le
 800d1fa:	2501      	movle	r5, #1
 800d1fc:	441d      	add	r5, r3
 800d1fe:	f04f 0800 	mov.w	r8, #0
 800d202:	ee18 1a10 	vmov	r1, s16
 800d206:	2201      	movs	r2, #1
 800d208:	4620      	mov	r0, r4
 800d20a:	f000 fe41 	bl	800de90 <__lshift>
 800d20e:	4631      	mov	r1, r6
 800d210:	ee08 0a10 	vmov	s16, r0
 800d214:	f000 feac 	bl	800df70 <__mcmp>
 800d218:	2800      	cmp	r0, #0
 800d21a:	dc91      	bgt.n	800d140 <_dtoa_r+0xaa8>
 800d21c:	d102      	bne.n	800d224 <_dtoa_r+0xb8c>
 800d21e:	f01a 0f01 	tst.w	sl, #1
 800d222:	d18d      	bne.n	800d140 <_dtoa_r+0xaa8>
 800d224:	462b      	mov	r3, r5
 800d226:	461d      	mov	r5, r3
 800d228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d22c:	2a30      	cmp	r2, #48	; 0x30
 800d22e:	d0fa      	beq.n	800d226 <_dtoa_r+0xb8e>
 800d230:	e6d7      	b.n	800cfe2 <_dtoa_r+0x94a>
 800d232:	9a01      	ldr	r2, [sp, #4]
 800d234:	429a      	cmp	r2, r3
 800d236:	d184      	bne.n	800d142 <_dtoa_r+0xaaa>
 800d238:	9b00      	ldr	r3, [sp, #0]
 800d23a:	3301      	adds	r3, #1
 800d23c:	9300      	str	r3, [sp, #0]
 800d23e:	2331      	movs	r3, #49	; 0x31
 800d240:	7013      	strb	r3, [r2, #0]
 800d242:	e6ce      	b.n	800cfe2 <_dtoa_r+0x94a>
 800d244:	4b09      	ldr	r3, [pc, #36]	; (800d26c <_dtoa_r+0xbd4>)
 800d246:	f7ff ba95 	b.w	800c774 <_dtoa_r+0xdc>
 800d24a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	f47f aa6e 	bne.w	800c72e <_dtoa_r+0x96>
 800d252:	4b07      	ldr	r3, [pc, #28]	; (800d270 <_dtoa_r+0xbd8>)
 800d254:	f7ff ba8e 	b.w	800c774 <_dtoa_r+0xdc>
 800d258:	9b02      	ldr	r3, [sp, #8]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	dcae      	bgt.n	800d1bc <_dtoa_r+0xb24>
 800d25e:	9b06      	ldr	r3, [sp, #24]
 800d260:	2b02      	cmp	r3, #2
 800d262:	f73f aea8 	bgt.w	800cfb6 <_dtoa_r+0x91e>
 800d266:	e7a9      	b.n	800d1bc <_dtoa_r+0xb24>
 800d268:	0800f916 	.word	0x0800f916
 800d26c:	0800f65c 	.word	0x0800f65c
 800d270:	0800f8ae 	.word	0x0800f8ae

0800d274 <fiprintf>:
 800d274:	b40e      	push	{r1, r2, r3}
 800d276:	b503      	push	{r0, r1, lr}
 800d278:	4601      	mov	r1, r0
 800d27a:	ab03      	add	r3, sp, #12
 800d27c:	4805      	ldr	r0, [pc, #20]	; (800d294 <fiprintf+0x20>)
 800d27e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d282:	6800      	ldr	r0, [r0, #0]
 800d284:	9301      	str	r3, [sp, #4]
 800d286:	f001 fa03 	bl	800e690 <_vfiprintf_r>
 800d28a:	b002      	add	sp, #8
 800d28c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d290:	b003      	add	sp, #12
 800d292:	4770      	bx	lr
 800d294:	20000034 	.word	0x20000034

0800d298 <rshift>:
 800d298:	6903      	ldr	r3, [r0, #16]
 800d29a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d29e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d2a6:	f100 0414 	add.w	r4, r0, #20
 800d2aa:	dd45      	ble.n	800d338 <rshift+0xa0>
 800d2ac:	f011 011f 	ands.w	r1, r1, #31
 800d2b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d2b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d2b8:	d10c      	bne.n	800d2d4 <rshift+0x3c>
 800d2ba:	f100 0710 	add.w	r7, r0, #16
 800d2be:	4629      	mov	r1, r5
 800d2c0:	42b1      	cmp	r1, r6
 800d2c2:	d334      	bcc.n	800d32e <rshift+0x96>
 800d2c4:	1a9b      	subs	r3, r3, r2
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	1eea      	subs	r2, r5, #3
 800d2ca:	4296      	cmp	r6, r2
 800d2cc:	bf38      	it	cc
 800d2ce:	2300      	movcc	r3, #0
 800d2d0:	4423      	add	r3, r4
 800d2d2:	e015      	b.n	800d300 <rshift+0x68>
 800d2d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d2d8:	f1c1 0820 	rsb	r8, r1, #32
 800d2dc:	40cf      	lsrs	r7, r1
 800d2de:	f105 0e04 	add.w	lr, r5, #4
 800d2e2:	46a1      	mov	r9, r4
 800d2e4:	4576      	cmp	r6, lr
 800d2e6:	46f4      	mov	ip, lr
 800d2e8:	d815      	bhi.n	800d316 <rshift+0x7e>
 800d2ea:	1a9a      	subs	r2, r3, r2
 800d2ec:	0092      	lsls	r2, r2, #2
 800d2ee:	3a04      	subs	r2, #4
 800d2f0:	3501      	adds	r5, #1
 800d2f2:	42ae      	cmp	r6, r5
 800d2f4:	bf38      	it	cc
 800d2f6:	2200      	movcc	r2, #0
 800d2f8:	18a3      	adds	r3, r4, r2
 800d2fa:	50a7      	str	r7, [r4, r2]
 800d2fc:	b107      	cbz	r7, 800d300 <rshift+0x68>
 800d2fe:	3304      	adds	r3, #4
 800d300:	1b1a      	subs	r2, r3, r4
 800d302:	42a3      	cmp	r3, r4
 800d304:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d308:	bf08      	it	eq
 800d30a:	2300      	moveq	r3, #0
 800d30c:	6102      	str	r2, [r0, #16]
 800d30e:	bf08      	it	eq
 800d310:	6143      	streq	r3, [r0, #20]
 800d312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d316:	f8dc c000 	ldr.w	ip, [ip]
 800d31a:	fa0c fc08 	lsl.w	ip, ip, r8
 800d31e:	ea4c 0707 	orr.w	r7, ip, r7
 800d322:	f849 7b04 	str.w	r7, [r9], #4
 800d326:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d32a:	40cf      	lsrs	r7, r1
 800d32c:	e7da      	b.n	800d2e4 <rshift+0x4c>
 800d32e:	f851 cb04 	ldr.w	ip, [r1], #4
 800d332:	f847 cf04 	str.w	ip, [r7, #4]!
 800d336:	e7c3      	b.n	800d2c0 <rshift+0x28>
 800d338:	4623      	mov	r3, r4
 800d33a:	e7e1      	b.n	800d300 <rshift+0x68>

0800d33c <__hexdig_fun>:
 800d33c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d340:	2b09      	cmp	r3, #9
 800d342:	d802      	bhi.n	800d34a <__hexdig_fun+0xe>
 800d344:	3820      	subs	r0, #32
 800d346:	b2c0      	uxtb	r0, r0
 800d348:	4770      	bx	lr
 800d34a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d34e:	2b05      	cmp	r3, #5
 800d350:	d801      	bhi.n	800d356 <__hexdig_fun+0x1a>
 800d352:	3847      	subs	r0, #71	; 0x47
 800d354:	e7f7      	b.n	800d346 <__hexdig_fun+0xa>
 800d356:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d35a:	2b05      	cmp	r3, #5
 800d35c:	d801      	bhi.n	800d362 <__hexdig_fun+0x26>
 800d35e:	3827      	subs	r0, #39	; 0x27
 800d360:	e7f1      	b.n	800d346 <__hexdig_fun+0xa>
 800d362:	2000      	movs	r0, #0
 800d364:	4770      	bx	lr
	...

0800d368 <__gethex>:
 800d368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d36c:	ed2d 8b02 	vpush	{d8}
 800d370:	b089      	sub	sp, #36	; 0x24
 800d372:	ee08 0a10 	vmov	s16, r0
 800d376:	9304      	str	r3, [sp, #16]
 800d378:	4bb4      	ldr	r3, [pc, #720]	; (800d64c <__gethex+0x2e4>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	9301      	str	r3, [sp, #4]
 800d37e:	4618      	mov	r0, r3
 800d380:	468b      	mov	fp, r1
 800d382:	4690      	mov	r8, r2
 800d384:	f7f2 ff24 	bl	80001d0 <strlen>
 800d388:	9b01      	ldr	r3, [sp, #4]
 800d38a:	f8db 2000 	ldr.w	r2, [fp]
 800d38e:	4403      	add	r3, r0
 800d390:	4682      	mov	sl, r0
 800d392:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d396:	9305      	str	r3, [sp, #20]
 800d398:	1c93      	adds	r3, r2, #2
 800d39a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d39e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d3a2:	32fe      	adds	r2, #254	; 0xfe
 800d3a4:	18d1      	adds	r1, r2, r3
 800d3a6:	461f      	mov	r7, r3
 800d3a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d3ac:	9100      	str	r1, [sp, #0]
 800d3ae:	2830      	cmp	r0, #48	; 0x30
 800d3b0:	d0f8      	beq.n	800d3a4 <__gethex+0x3c>
 800d3b2:	f7ff ffc3 	bl	800d33c <__hexdig_fun>
 800d3b6:	4604      	mov	r4, r0
 800d3b8:	2800      	cmp	r0, #0
 800d3ba:	d13a      	bne.n	800d432 <__gethex+0xca>
 800d3bc:	9901      	ldr	r1, [sp, #4]
 800d3be:	4652      	mov	r2, sl
 800d3c0:	4638      	mov	r0, r7
 800d3c2:	f001 fa9d 	bl	800e900 <strncmp>
 800d3c6:	4605      	mov	r5, r0
 800d3c8:	2800      	cmp	r0, #0
 800d3ca:	d168      	bne.n	800d49e <__gethex+0x136>
 800d3cc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d3d0:	eb07 060a 	add.w	r6, r7, sl
 800d3d4:	f7ff ffb2 	bl	800d33c <__hexdig_fun>
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d062      	beq.n	800d4a2 <__gethex+0x13a>
 800d3dc:	4633      	mov	r3, r6
 800d3de:	7818      	ldrb	r0, [r3, #0]
 800d3e0:	2830      	cmp	r0, #48	; 0x30
 800d3e2:	461f      	mov	r7, r3
 800d3e4:	f103 0301 	add.w	r3, r3, #1
 800d3e8:	d0f9      	beq.n	800d3de <__gethex+0x76>
 800d3ea:	f7ff ffa7 	bl	800d33c <__hexdig_fun>
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	fab0 f480 	clz	r4, r0
 800d3f4:	0964      	lsrs	r4, r4, #5
 800d3f6:	4635      	mov	r5, r6
 800d3f8:	9300      	str	r3, [sp, #0]
 800d3fa:	463a      	mov	r2, r7
 800d3fc:	4616      	mov	r6, r2
 800d3fe:	3201      	adds	r2, #1
 800d400:	7830      	ldrb	r0, [r6, #0]
 800d402:	f7ff ff9b 	bl	800d33c <__hexdig_fun>
 800d406:	2800      	cmp	r0, #0
 800d408:	d1f8      	bne.n	800d3fc <__gethex+0x94>
 800d40a:	9901      	ldr	r1, [sp, #4]
 800d40c:	4652      	mov	r2, sl
 800d40e:	4630      	mov	r0, r6
 800d410:	f001 fa76 	bl	800e900 <strncmp>
 800d414:	b980      	cbnz	r0, 800d438 <__gethex+0xd0>
 800d416:	b94d      	cbnz	r5, 800d42c <__gethex+0xc4>
 800d418:	eb06 050a 	add.w	r5, r6, sl
 800d41c:	462a      	mov	r2, r5
 800d41e:	4616      	mov	r6, r2
 800d420:	3201      	adds	r2, #1
 800d422:	7830      	ldrb	r0, [r6, #0]
 800d424:	f7ff ff8a 	bl	800d33c <__hexdig_fun>
 800d428:	2800      	cmp	r0, #0
 800d42a:	d1f8      	bne.n	800d41e <__gethex+0xb6>
 800d42c:	1bad      	subs	r5, r5, r6
 800d42e:	00ad      	lsls	r5, r5, #2
 800d430:	e004      	b.n	800d43c <__gethex+0xd4>
 800d432:	2400      	movs	r4, #0
 800d434:	4625      	mov	r5, r4
 800d436:	e7e0      	b.n	800d3fa <__gethex+0x92>
 800d438:	2d00      	cmp	r5, #0
 800d43a:	d1f7      	bne.n	800d42c <__gethex+0xc4>
 800d43c:	7833      	ldrb	r3, [r6, #0]
 800d43e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d442:	2b50      	cmp	r3, #80	; 0x50
 800d444:	d13b      	bne.n	800d4be <__gethex+0x156>
 800d446:	7873      	ldrb	r3, [r6, #1]
 800d448:	2b2b      	cmp	r3, #43	; 0x2b
 800d44a:	d02c      	beq.n	800d4a6 <__gethex+0x13e>
 800d44c:	2b2d      	cmp	r3, #45	; 0x2d
 800d44e:	d02e      	beq.n	800d4ae <__gethex+0x146>
 800d450:	1c71      	adds	r1, r6, #1
 800d452:	f04f 0900 	mov.w	r9, #0
 800d456:	7808      	ldrb	r0, [r1, #0]
 800d458:	f7ff ff70 	bl	800d33c <__hexdig_fun>
 800d45c:	1e43      	subs	r3, r0, #1
 800d45e:	b2db      	uxtb	r3, r3
 800d460:	2b18      	cmp	r3, #24
 800d462:	d82c      	bhi.n	800d4be <__gethex+0x156>
 800d464:	f1a0 0210 	sub.w	r2, r0, #16
 800d468:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d46c:	f7ff ff66 	bl	800d33c <__hexdig_fun>
 800d470:	1e43      	subs	r3, r0, #1
 800d472:	b2db      	uxtb	r3, r3
 800d474:	2b18      	cmp	r3, #24
 800d476:	d91d      	bls.n	800d4b4 <__gethex+0x14c>
 800d478:	f1b9 0f00 	cmp.w	r9, #0
 800d47c:	d000      	beq.n	800d480 <__gethex+0x118>
 800d47e:	4252      	negs	r2, r2
 800d480:	4415      	add	r5, r2
 800d482:	f8cb 1000 	str.w	r1, [fp]
 800d486:	b1e4      	cbz	r4, 800d4c2 <__gethex+0x15a>
 800d488:	9b00      	ldr	r3, [sp, #0]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	bf14      	ite	ne
 800d48e:	2700      	movne	r7, #0
 800d490:	2706      	moveq	r7, #6
 800d492:	4638      	mov	r0, r7
 800d494:	b009      	add	sp, #36	; 0x24
 800d496:	ecbd 8b02 	vpop	{d8}
 800d49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d49e:	463e      	mov	r6, r7
 800d4a0:	4625      	mov	r5, r4
 800d4a2:	2401      	movs	r4, #1
 800d4a4:	e7ca      	b.n	800d43c <__gethex+0xd4>
 800d4a6:	f04f 0900 	mov.w	r9, #0
 800d4aa:	1cb1      	adds	r1, r6, #2
 800d4ac:	e7d3      	b.n	800d456 <__gethex+0xee>
 800d4ae:	f04f 0901 	mov.w	r9, #1
 800d4b2:	e7fa      	b.n	800d4aa <__gethex+0x142>
 800d4b4:	230a      	movs	r3, #10
 800d4b6:	fb03 0202 	mla	r2, r3, r2, r0
 800d4ba:	3a10      	subs	r2, #16
 800d4bc:	e7d4      	b.n	800d468 <__gethex+0x100>
 800d4be:	4631      	mov	r1, r6
 800d4c0:	e7df      	b.n	800d482 <__gethex+0x11a>
 800d4c2:	1bf3      	subs	r3, r6, r7
 800d4c4:	3b01      	subs	r3, #1
 800d4c6:	4621      	mov	r1, r4
 800d4c8:	2b07      	cmp	r3, #7
 800d4ca:	dc0b      	bgt.n	800d4e4 <__gethex+0x17c>
 800d4cc:	ee18 0a10 	vmov	r0, s16
 800d4d0:	f000 fa82 	bl	800d9d8 <_Balloc>
 800d4d4:	4604      	mov	r4, r0
 800d4d6:	b940      	cbnz	r0, 800d4ea <__gethex+0x182>
 800d4d8:	4b5d      	ldr	r3, [pc, #372]	; (800d650 <__gethex+0x2e8>)
 800d4da:	4602      	mov	r2, r0
 800d4dc:	21de      	movs	r1, #222	; 0xde
 800d4de:	485d      	ldr	r0, [pc, #372]	; (800d654 <__gethex+0x2ec>)
 800d4e0:	f7ff f82e 	bl	800c540 <__assert_func>
 800d4e4:	3101      	adds	r1, #1
 800d4e6:	105b      	asrs	r3, r3, #1
 800d4e8:	e7ee      	b.n	800d4c8 <__gethex+0x160>
 800d4ea:	f100 0914 	add.w	r9, r0, #20
 800d4ee:	f04f 0b00 	mov.w	fp, #0
 800d4f2:	f1ca 0301 	rsb	r3, sl, #1
 800d4f6:	f8cd 9008 	str.w	r9, [sp, #8]
 800d4fa:	f8cd b000 	str.w	fp, [sp]
 800d4fe:	9306      	str	r3, [sp, #24]
 800d500:	42b7      	cmp	r7, r6
 800d502:	d340      	bcc.n	800d586 <__gethex+0x21e>
 800d504:	9802      	ldr	r0, [sp, #8]
 800d506:	9b00      	ldr	r3, [sp, #0]
 800d508:	f840 3b04 	str.w	r3, [r0], #4
 800d50c:	eba0 0009 	sub.w	r0, r0, r9
 800d510:	1080      	asrs	r0, r0, #2
 800d512:	0146      	lsls	r6, r0, #5
 800d514:	6120      	str	r0, [r4, #16]
 800d516:	4618      	mov	r0, r3
 800d518:	f000 fb50 	bl	800dbbc <__hi0bits>
 800d51c:	1a30      	subs	r0, r6, r0
 800d51e:	f8d8 6000 	ldr.w	r6, [r8]
 800d522:	42b0      	cmp	r0, r6
 800d524:	dd63      	ble.n	800d5ee <__gethex+0x286>
 800d526:	1b87      	subs	r7, r0, r6
 800d528:	4639      	mov	r1, r7
 800d52a:	4620      	mov	r0, r4
 800d52c:	f000 fef4 	bl	800e318 <__any_on>
 800d530:	4682      	mov	sl, r0
 800d532:	b1a8      	cbz	r0, 800d560 <__gethex+0x1f8>
 800d534:	1e7b      	subs	r3, r7, #1
 800d536:	1159      	asrs	r1, r3, #5
 800d538:	f003 021f 	and.w	r2, r3, #31
 800d53c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d540:	f04f 0a01 	mov.w	sl, #1
 800d544:	fa0a f202 	lsl.w	r2, sl, r2
 800d548:	420a      	tst	r2, r1
 800d54a:	d009      	beq.n	800d560 <__gethex+0x1f8>
 800d54c:	4553      	cmp	r3, sl
 800d54e:	dd05      	ble.n	800d55c <__gethex+0x1f4>
 800d550:	1eb9      	subs	r1, r7, #2
 800d552:	4620      	mov	r0, r4
 800d554:	f000 fee0 	bl	800e318 <__any_on>
 800d558:	2800      	cmp	r0, #0
 800d55a:	d145      	bne.n	800d5e8 <__gethex+0x280>
 800d55c:	f04f 0a02 	mov.w	sl, #2
 800d560:	4639      	mov	r1, r7
 800d562:	4620      	mov	r0, r4
 800d564:	f7ff fe98 	bl	800d298 <rshift>
 800d568:	443d      	add	r5, r7
 800d56a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d56e:	42ab      	cmp	r3, r5
 800d570:	da4c      	bge.n	800d60c <__gethex+0x2a4>
 800d572:	ee18 0a10 	vmov	r0, s16
 800d576:	4621      	mov	r1, r4
 800d578:	f000 fa6e 	bl	800da58 <_Bfree>
 800d57c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d57e:	2300      	movs	r3, #0
 800d580:	6013      	str	r3, [r2, #0]
 800d582:	27a3      	movs	r7, #163	; 0xa3
 800d584:	e785      	b.n	800d492 <__gethex+0x12a>
 800d586:	1e73      	subs	r3, r6, #1
 800d588:	9a05      	ldr	r2, [sp, #20]
 800d58a:	9303      	str	r3, [sp, #12]
 800d58c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d590:	4293      	cmp	r3, r2
 800d592:	d019      	beq.n	800d5c8 <__gethex+0x260>
 800d594:	f1bb 0f20 	cmp.w	fp, #32
 800d598:	d107      	bne.n	800d5aa <__gethex+0x242>
 800d59a:	9b02      	ldr	r3, [sp, #8]
 800d59c:	9a00      	ldr	r2, [sp, #0]
 800d59e:	f843 2b04 	str.w	r2, [r3], #4
 800d5a2:	9302      	str	r3, [sp, #8]
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	9300      	str	r3, [sp, #0]
 800d5a8:	469b      	mov	fp, r3
 800d5aa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d5ae:	f7ff fec5 	bl	800d33c <__hexdig_fun>
 800d5b2:	9b00      	ldr	r3, [sp, #0]
 800d5b4:	f000 000f 	and.w	r0, r0, #15
 800d5b8:	fa00 f00b 	lsl.w	r0, r0, fp
 800d5bc:	4303      	orrs	r3, r0
 800d5be:	9300      	str	r3, [sp, #0]
 800d5c0:	f10b 0b04 	add.w	fp, fp, #4
 800d5c4:	9b03      	ldr	r3, [sp, #12]
 800d5c6:	e00d      	b.n	800d5e4 <__gethex+0x27c>
 800d5c8:	9b03      	ldr	r3, [sp, #12]
 800d5ca:	9a06      	ldr	r2, [sp, #24]
 800d5cc:	4413      	add	r3, r2
 800d5ce:	42bb      	cmp	r3, r7
 800d5d0:	d3e0      	bcc.n	800d594 <__gethex+0x22c>
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	9901      	ldr	r1, [sp, #4]
 800d5d6:	9307      	str	r3, [sp, #28]
 800d5d8:	4652      	mov	r2, sl
 800d5da:	f001 f991 	bl	800e900 <strncmp>
 800d5de:	9b07      	ldr	r3, [sp, #28]
 800d5e0:	2800      	cmp	r0, #0
 800d5e2:	d1d7      	bne.n	800d594 <__gethex+0x22c>
 800d5e4:	461e      	mov	r6, r3
 800d5e6:	e78b      	b.n	800d500 <__gethex+0x198>
 800d5e8:	f04f 0a03 	mov.w	sl, #3
 800d5ec:	e7b8      	b.n	800d560 <__gethex+0x1f8>
 800d5ee:	da0a      	bge.n	800d606 <__gethex+0x29e>
 800d5f0:	1a37      	subs	r7, r6, r0
 800d5f2:	4621      	mov	r1, r4
 800d5f4:	ee18 0a10 	vmov	r0, s16
 800d5f8:	463a      	mov	r2, r7
 800d5fa:	f000 fc49 	bl	800de90 <__lshift>
 800d5fe:	1bed      	subs	r5, r5, r7
 800d600:	4604      	mov	r4, r0
 800d602:	f100 0914 	add.w	r9, r0, #20
 800d606:	f04f 0a00 	mov.w	sl, #0
 800d60a:	e7ae      	b.n	800d56a <__gethex+0x202>
 800d60c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d610:	42a8      	cmp	r0, r5
 800d612:	dd72      	ble.n	800d6fa <__gethex+0x392>
 800d614:	1b45      	subs	r5, r0, r5
 800d616:	42ae      	cmp	r6, r5
 800d618:	dc36      	bgt.n	800d688 <__gethex+0x320>
 800d61a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d61e:	2b02      	cmp	r3, #2
 800d620:	d02a      	beq.n	800d678 <__gethex+0x310>
 800d622:	2b03      	cmp	r3, #3
 800d624:	d02c      	beq.n	800d680 <__gethex+0x318>
 800d626:	2b01      	cmp	r3, #1
 800d628:	d11c      	bne.n	800d664 <__gethex+0x2fc>
 800d62a:	42ae      	cmp	r6, r5
 800d62c:	d11a      	bne.n	800d664 <__gethex+0x2fc>
 800d62e:	2e01      	cmp	r6, #1
 800d630:	d112      	bne.n	800d658 <__gethex+0x2f0>
 800d632:	9a04      	ldr	r2, [sp, #16]
 800d634:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d638:	6013      	str	r3, [r2, #0]
 800d63a:	2301      	movs	r3, #1
 800d63c:	6123      	str	r3, [r4, #16]
 800d63e:	f8c9 3000 	str.w	r3, [r9]
 800d642:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d644:	2762      	movs	r7, #98	; 0x62
 800d646:	601c      	str	r4, [r3, #0]
 800d648:	e723      	b.n	800d492 <__gethex+0x12a>
 800d64a:	bf00      	nop
 800d64c:	0800f98c 	.word	0x0800f98c
 800d650:	0800f916 	.word	0x0800f916
 800d654:	0800f927 	.word	0x0800f927
 800d658:	1e71      	subs	r1, r6, #1
 800d65a:	4620      	mov	r0, r4
 800d65c:	f000 fe5c 	bl	800e318 <__any_on>
 800d660:	2800      	cmp	r0, #0
 800d662:	d1e6      	bne.n	800d632 <__gethex+0x2ca>
 800d664:	ee18 0a10 	vmov	r0, s16
 800d668:	4621      	mov	r1, r4
 800d66a:	f000 f9f5 	bl	800da58 <_Bfree>
 800d66e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d670:	2300      	movs	r3, #0
 800d672:	6013      	str	r3, [r2, #0]
 800d674:	2750      	movs	r7, #80	; 0x50
 800d676:	e70c      	b.n	800d492 <__gethex+0x12a>
 800d678:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d1f2      	bne.n	800d664 <__gethex+0x2fc>
 800d67e:	e7d8      	b.n	800d632 <__gethex+0x2ca>
 800d680:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d682:	2b00      	cmp	r3, #0
 800d684:	d1d5      	bne.n	800d632 <__gethex+0x2ca>
 800d686:	e7ed      	b.n	800d664 <__gethex+0x2fc>
 800d688:	1e6f      	subs	r7, r5, #1
 800d68a:	f1ba 0f00 	cmp.w	sl, #0
 800d68e:	d131      	bne.n	800d6f4 <__gethex+0x38c>
 800d690:	b127      	cbz	r7, 800d69c <__gethex+0x334>
 800d692:	4639      	mov	r1, r7
 800d694:	4620      	mov	r0, r4
 800d696:	f000 fe3f 	bl	800e318 <__any_on>
 800d69a:	4682      	mov	sl, r0
 800d69c:	117b      	asrs	r3, r7, #5
 800d69e:	2101      	movs	r1, #1
 800d6a0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d6a4:	f007 071f 	and.w	r7, r7, #31
 800d6a8:	fa01 f707 	lsl.w	r7, r1, r7
 800d6ac:	421f      	tst	r7, r3
 800d6ae:	4629      	mov	r1, r5
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	bf18      	it	ne
 800d6b4:	f04a 0a02 	orrne.w	sl, sl, #2
 800d6b8:	1b76      	subs	r6, r6, r5
 800d6ba:	f7ff fded 	bl	800d298 <rshift>
 800d6be:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d6c2:	2702      	movs	r7, #2
 800d6c4:	f1ba 0f00 	cmp.w	sl, #0
 800d6c8:	d048      	beq.n	800d75c <__gethex+0x3f4>
 800d6ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d6ce:	2b02      	cmp	r3, #2
 800d6d0:	d015      	beq.n	800d6fe <__gethex+0x396>
 800d6d2:	2b03      	cmp	r3, #3
 800d6d4:	d017      	beq.n	800d706 <__gethex+0x39e>
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d109      	bne.n	800d6ee <__gethex+0x386>
 800d6da:	f01a 0f02 	tst.w	sl, #2
 800d6de:	d006      	beq.n	800d6ee <__gethex+0x386>
 800d6e0:	f8d9 0000 	ldr.w	r0, [r9]
 800d6e4:	ea4a 0a00 	orr.w	sl, sl, r0
 800d6e8:	f01a 0f01 	tst.w	sl, #1
 800d6ec:	d10e      	bne.n	800d70c <__gethex+0x3a4>
 800d6ee:	f047 0710 	orr.w	r7, r7, #16
 800d6f2:	e033      	b.n	800d75c <__gethex+0x3f4>
 800d6f4:	f04f 0a01 	mov.w	sl, #1
 800d6f8:	e7d0      	b.n	800d69c <__gethex+0x334>
 800d6fa:	2701      	movs	r7, #1
 800d6fc:	e7e2      	b.n	800d6c4 <__gethex+0x35c>
 800d6fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d700:	f1c3 0301 	rsb	r3, r3, #1
 800d704:	9315      	str	r3, [sp, #84]	; 0x54
 800d706:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d0f0      	beq.n	800d6ee <__gethex+0x386>
 800d70c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d710:	f104 0314 	add.w	r3, r4, #20
 800d714:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d718:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d71c:	f04f 0c00 	mov.w	ip, #0
 800d720:	4618      	mov	r0, r3
 800d722:	f853 2b04 	ldr.w	r2, [r3], #4
 800d726:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d72a:	d01c      	beq.n	800d766 <__gethex+0x3fe>
 800d72c:	3201      	adds	r2, #1
 800d72e:	6002      	str	r2, [r0, #0]
 800d730:	2f02      	cmp	r7, #2
 800d732:	f104 0314 	add.w	r3, r4, #20
 800d736:	d13f      	bne.n	800d7b8 <__gethex+0x450>
 800d738:	f8d8 2000 	ldr.w	r2, [r8]
 800d73c:	3a01      	subs	r2, #1
 800d73e:	42b2      	cmp	r2, r6
 800d740:	d10a      	bne.n	800d758 <__gethex+0x3f0>
 800d742:	1171      	asrs	r1, r6, #5
 800d744:	2201      	movs	r2, #1
 800d746:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d74a:	f006 061f 	and.w	r6, r6, #31
 800d74e:	fa02 f606 	lsl.w	r6, r2, r6
 800d752:	421e      	tst	r6, r3
 800d754:	bf18      	it	ne
 800d756:	4617      	movne	r7, r2
 800d758:	f047 0720 	orr.w	r7, r7, #32
 800d75c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d75e:	601c      	str	r4, [r3, #0]
 800d760:	9b04      	ldr	r3, [sp, #16]
 800d762:	601d      	str	r5, [r3, #0]
 800d764:	e695      	b.n	800d492 <__gethex+0x12a>
 800d766:	4299      	cmp	r1, r3
 800d768:	f843 cc04 	str.w	ip, [r3, #-4]
 800d76c:	d8d8      	bhi.n	800d720 <__gethex+0x3b8>
 800d76e:	68a3      	ldr	r3, [r4, #8]
 800d770:	459b      	cmp	fp, r3
 800d772:	db19      	blt.n	800d7a8 <__gethex+0x440>
 800d774:	6861      	ldr	r1, [r4, #4]
 800d776:	ee18 0a10 	vmov	r0, s16
 800d77a:	3101      	adds	r1, #1
 800d77c:	f000 f92c 	bl	800d9d8 <_Balloc>
 800d780:	4681      	mov	r9, r0
 800d782:	b918      	cbnz	r0, 800d78c <__gethex+0x424>
 800d784:	4b1a      	ldr	r3, [pc, #104]	; (800d7f0 <__gethex+0x488>)
 800d786:	4602      	mov	r2, r0
 800d788:	2184      	movs	r1, #132	; 0x84
 800d78a:	e6a8      	b.n	800d4de <__gethex+0x176>
 800d78c:	6922      	ldr	r2, [r4, #16]
 800d78e:	3202      	adds	r2, #2
 800d790:	f104 010c 	add.w	r1, r4, #12
 800d794:	0092      	lsls	r2, r2, #2
 800d796:	300c      	adds	r0, #12
 800d798:	f000 f904 	bl	800d9a4 <memcpy>
 800d79c:	4621      	mov	r1, r4
 800d79e:	ee18 0a10 	vmov	r0, s16
 800d7a2:	f000 f959 	bl	800da58 <_Bfree>
 800d7a6:	464c      	mov	r4, r9
 800d7a8:	6923      	ldr	r3, [r4, #16]
 800d7aa:	1c5a      	adds	r2, r3, #1
 800d7ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d7b0:	6122      	str	r2, [r4, #16]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	615a      	str	r2, [r3, #20]
 800d7b6:	e7bb      	b.n	800d730 <__gethex+0x3c8>
 800d7b8:	6922      	ldr	r2, [r4, #16]
 800d7ba:	455a      	cmp	r2, fp
 800d7bc:	dd0b      	ble.n	800d7d6 <__gethex+0x46e>
 800d7be:	2101      	movs	r1, #1
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	f7ff fd69 	bl	800d298 <rshift>
 800d7c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d7ca:	3501      	adds	r5, #1
 800d7cc:	42ab      	cmp	r3, r5
 800d7ce:	f6ff aed0 	blt.w	800d572 <__gethex+0x20a>
 800d7d2:	2701      	movs	r7, #1
 800d7d4:	e7c0      	b.n	800d758 <__gethex+0x3f0>
 800d7d6:	f016 061f 	ands.w	r6, r6, #31
 800d7da:	d0fa      	beq.n	800d7d2 <__gethex+0x46a>
 800d7dc:	4453      	add	r3, sl
 800d7de:	f1c6 0620 	rsb	r6, r6, #32
 800d7e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d7e6:	f000 f9e9 	bl	800dbbc <__hi0bits>
 800d7ea:	42b0      	cmp	r0, r6
 800d7ec:	dbe7      	blt.n	800d7be <__gethex+0x456>
 800d7ee:	e7f0      	b.n	800d7d2 <__gethex+0x46a>
 800d7f0:	0800f916 	.word	0x0800f916

0800d7f4 <L_shift>:
 800d7f4:	f1c2 0208 	rsb	r2, r2, #8
 800d7f8:	0092      	lsls	r2, r2, #2
 800d7fa:	b570      	push	{r4, r5, r6, lr}
 800d7fc:	f1c2 0620 	rsb	r6, r2, #32
 800d800:	6843      	ldr	r3, [r0, #4]
 800d802:	6804      	ldr	r4, [r0, #0]
 800d804:	fa03 f506 	lsl.w	r5, r3, r6
 800d808:	432c      	orrs	r4, r5
 800d80a:	40d3      	lsrs	r3, r2
 800d80c:	6004      	str	r4, [r0, #0]
 800d80e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d812:	4288      	cmp	r0, r1
 800d814:	d3f4      	bcc.n	800d800 <L_shift+0xc>
 800d816:	bd70      	pop	{r4, r5, r6, pc}

0800d818 <__match>:
 800d818:	b530      	push	{r4, r5, lr}
 800d81a:	6803      	ldr	r3, [r0, #0]
 800d81c:	3301      	adds	r3, #1
 800d81e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d822:	b914      	cbnz	r4, 800d82a <__match+0x12>
 800d824:	6003      	str	r3, [r0, #0]
 800d826:	2001      	movs	r0, #1
 800d828:	bd30      	pop	{r4, r5, pc}
 800d82a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d82e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d832:	2d19      	cmp	r5, #25
 800d834:	bf98      	it	ls
 800d836:	3220      	addls	r2, #32
 800d838:	42a2      	cmp	r2, r4
 800d83a:	d0f0      	beq.n	800d81e <__match+0x6>
 800d83c:	2000      	movs	r0, #0
 800d83e:	e7f3      	b.n	800d828 <__match+0x10>

0800d840 <__hexnan>:
 800d840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d844:	680b      	ldr	r3, [r1, #0]
 800d846:	115e      	asrs	r6, r3, #5
 800d848:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d84c:	f013 031f 	ands.w	r3, r3, #31
 800d850:	b087      	sub	sp, #28
 800d852:	bf18      	it	ne
 800d854:	3604      	addne	r6, #4
 800d856:	2500      	movs	r5, #0
 800d858:	1f37      	subs	r7, r6, #4
 800d85a:	4690      	mov	r8, r2
 800d85c:	6802      	ldr	r2, [r0, #0]
 800d85e:	9301      	str	r3, [sp, #4]
 800d860:	4682      	mov	sl, r0
 800d862:	f846 5c04 	str.w	r5, [r6, #-4]
 800d866:	46b9      	mov	r9, r7
 800d868:	463c      	mov	r4, r7
 800d86a:	9502      	str	r5, [sp, #8]
 800d86c:	46ab      	mov	fp, r5
 800d86e:	7851      	ldrb	r1, [r2, #1]
 800d870:	1c53      	adds	r3, r2, #1
 800d872:	9303      	str	r3, [sp, #12]
 800d874:	b341      	cbz	r1, 800d8c8 <__hexnan+0x88>
 800d876:	4608      	mov	r0, r1
 800d878:	9205      	str	r2, [sp, #20]
 800d87a:	9104      	str	r1, [sp, #16]
 800d87c:	f7ff fd5e 	bl	800d33c <__hexdig_fun>
 800d880:	2800      	cmp	r0, #0
 800d882:	d14f      	bne.n	800d924 <__hexnan+0xe4>
 800d884:	9904      	ldr	r1, [sp, #16]
 800d886:	9a05      	ldr	r2, [sp, #20]
 800d888:	2920      	cmp	r1, #32
 800d88a:	d818      	bhi.n	800d8be <__hexnan+0x7e>
 800d88c:	9b02      	ldr	r3, [sp, #8]
 800d88e:	459b      	cmp	fp, r3
 800d890:	dd13      	ble.n	800d8ba <__hexnan+0x7a>
 800d892:	454c      	cmp	r4, r9
 800d894:	d206      	bcs.n	800d8a4 <__hexnan+0x64>
 800d896:	2d07      	cmp	r5, #7
 800d898:	dc04      	bgt.n	800d8a4 <__hexnan+0x64>
 800d89a:	462a      	mov	r2, r5
 800d89c:	4649      	mov	r1, r9
 800d89e:	4620      	mov	r0, r4
 800d8a0:	f7ff ffa8 	bl	800d7f4 <L_shift>
 800d8a4:	4544      	cmp	r4, r8
 800d8a6:	d950      	bls.n	800d94a <__hexnan+0x10a>
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	f1a4 0904 	sub.w	r9, r4, #4
 800d8ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800d8b2:	f8cd b008 	str.w	fp, [sp, #8]
 800d8b6:	464c      	mov	r4, r9
 800d8b8:	461d      	mov	r5, r3
 800d8ba:	9a03      	ldr	r2, [sp, #12]
 800d8bc:	e7d7      	b.n	800d86e <__hexnan+0x2e>
 800d8be:	2929      	cmp	r1, #41	; 0x29
 800d8c0:	d156      	bne.n	800d970 <__hexnan+0x130>
 800d8c2:	3202      	adds	r2, #2
 800d8c4:	f8ca 2000 	str.w	r2, [sl]
 800d8c8:	f1bb 0f00 	cmp.w	fp, #0
 800d8cc:	d050      	beq.n	800d970 <__hexnan+0x130>
 800d8ce:	454c      	cmp	r4, r9
 800d8d0:	d206      	bcs.n	800d8e0 <__hexnan+0xa0>
 800d8d2:	2d07      	cmp	r5, #7
 800d8d4:	dc04      	bgt.n	800d8e0 <__hexnan+0xa0>
 800d8d6:	462a      	mov	r2, r5
 800d8d8:	4649      	mov	r1, r9
 800d8da:	4620      	mov	r0, r4
 800d8dc:	f7ff ff8a 	bl	800d7f4 <L_shift>
 800d8e0:	4544      	cmp	r4, r8
 800d8e2:	d934      	bls.n	800d94e <__hexnan+0x10e>
 800d8e4:	f1a8 0204 	sub.w	r2, r8, #4
 800d8e8:	4623      	mov	r3, r4
 800d8ea:	f853 1b04 	ldr.w	r1, [r3], #4
 800d8ee:	f842 1f04 	str.w	r1, [r2, #4]!
 800d8f2:	429f      	cmp	r7, r3
 800d8f4:	d2f9      	bcs.n	800d8ea <__hexnan+0xaa>
 800d8f6:	1b3b      	subs	r3, r7, r4
 800d8f8:	f023 0303 	bic.w	r3, r3, #3
 800d8fc:	3304      	adds	r3, #4
 800d8fe:	3401      	adds	r4, #1
 800d900:	3e03      	subs	r6, #3
 800d902:	42b4      	cmp	r4, r6
 800d904:	bf88      	it	hi
 800d906:	2304      	movhi	r3, #4
 800d908:	4443      	add	r3, r8
 800d90a:	2200      	movs	r2, #0
 800d90c:	f843 2b04 	str.w	r2, [r3], #4
 800d910:	429f      	cmp	r7, r3
 800d912:	d2fb      	bcs.n	800d90c <__hexnan+0xcc>
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	b91b      	cbnz	r3, 800d920 <__hexnan+0xe0>
 800d918:	4547      	cmp	r7, r8
 800d91a:	d127      	bne.n	800d96c <__hexnan+0x12c>
 800d91c:	2301      	movs	r3, #1
 800d91e:	603b      	str	r3, [r7, #0]
 800d920:	2005      	movs	r0, #5
 800d922:	e026      	b.n	800d972 <__hexnan+0x132>
 800d924:	3501      	adds	r5, #1
 800d926:	2d08      	cmp	r5, #8
 800d928:	f10b 0b01 	add.w	fp, fp, #1
 800d92c:	dd06      	ble.n	800d93c <__hexnan+0xfc>
 800d92e:	4544      	cmp	r4, r8
 800d930:	d9c3      	bls.n	800d8ba <__hexnan+0x7a>
 800d932:	2300      	movs	r3, #0
 800d934:	f844 3c04 	str.w	r3, [r4, #-4]
 800d938:	2501      	movs	r5, #1
 800d93a:	3c04      	subs	r4, #4
 800d93c:	6822      	ldr	r2, [r4, #0]
 800d93e:	f000 000f 	and.w	r0, r0, #15
 800d942:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d946:	6022      	str	r2, [r4, #0]
 800d948:	e7b7      	b.n	800d8ba <__hexnan+0x7a>
 800d94a:	2508      	movs	r5, #8
 800d94c:	e7b5      	b.n	800d8ba <__hexnan+0x7a>
 800d94e:	9b01      	ldr	r3, [sp, #4]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d0df      	beq.n	800d914 <__hexnan+0xd4>
 800d954:	f04f 32ff 	mov.w	r2, #4294967295
 800d958:	f1c3 0320 	rsb	r3, r3, #32
 800d95c:	fa22 f303 	lsr.w	r3, r2, r3
 800d960:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d964:	401a      	ands	r2, r3
 800d966:	f846 2c04 	str.w	r2, [r6, #-4]
 800d96a:	e7d3      	b.n	800d914 <__hexnan+0xd4>
 800d96c:	3f04      	subs	r7, #4
 800d96e:	e7d1      	b.n	800d914 <__hexnan+0xd4>
 800d970:	2004      	movs	r0, #4
 800d972:	b007      	add	sp, #28
 800d974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d978 <_localeconv_r>:
 800d978:	4800      	ldr	r0, [pc, #0]	; (800d97c <_localeconv_r+0x4>)
 800d97a:	4770      	bx	lr
 800d97c:	2000018c 	.word	0x2000018c

0800d980 <__ascii_mbtowc>:
 800d980:	b082      	sub	sp, #8
 800d982:	b901      	cbnz	r1, 800d986 <__ascii_mbtowc+0x6>
 800d984:	a901      	add	r1, sp, #4
 800d986:	b142      	cbz	r2, 800d99a <__ascii_mbtowc+0x1a>
 800d988:	b14b      	cbz	r3, 800d99e <__ascii_mbtowc+0x1e>
 800d98a:	7813      	ldrb	r3, [r2, #0]
 800d98c:	600b      	str	r3, [r1, #0]
 800d98e:	7812      	ldrb	r2, [r2, #0]
 800d990:	1e10      	subs	r0, r2, #0
 800d992:	bf18      	it	ne
 800d994:	2001      	movne	r0, #1
 800d996:	b002      	add	sp, #8
 800d998:	4770      	bx	lr
 800d99a:	4610      	mov	r0, r2
 800d99c:	e7fb      	b.n	800d996 <__ascii_mbtowc+0x16>
 800d99e:	f06f 0001 	mvn.w	r0, #1
 800d9a2:	e7f8      	b.n	800d996 <__ascii_mbtowc+0x16>

0800d9a4 <memcpy>:
 800d9a4:	440a      	add	r2, r1
 800d9a6:	4291      	cmp	r1, r2
 800d9a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d9ac:	d100      	bne.n	800d9b0 <memcpy+0xc>
 800d9ae:	4770      	bx	lr
 800d9b0:	b510      	push	{r4, lr}
 800d9b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9ba:	4291      	cmp	r1, r2
 800d9bc:	d1f9      	bne.n	800d9b2 <memcpy+0xe>
 800d9be:	bd10      	pop	{r4, pc}

0800d9c0 <__malloc_lock>:
 800d9c0:	4801      	ldr	r0, [pc, #4]	; (800d9c8 <__malloc_lock+0x8>)
 800d9c2:	f001 ba3f 	b.w	800ee44 <__retarget_lock_acquire_recursive>
 800d9c6:	bf00      	nop
 800d9c8:	20002a28 	.word	0x20002a28

0800d9cc <__malloc_unlock>:
 800d9cc:	4801      	ldr	r0, [pc, #4]	; (800d9d4 <__malloc_unlock+0x8>)
 800d9ce:	f001 ba3a 	b.w	800ee46 <__retarget_lock_release_recursive>
 800d9d2:	bf00      	nop
 800d9d4:	20002a28 	.word	0x20002a28

0800d9d8 <_Balloc>:
 800d9d8:	b570      	push	{r4, r5, r6, lr}
 800d9da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d9dc:	4604      	mov	r4, r0
 800d9de:	460d      	mov	r5, r1
 800d9e0:	b976      	cbnz	r6, 800da00 <_Balloc+0x28>
 800d9e2:	2010      	movs	r0, #16
 800d9e4:	f7fc fe80 	bl	800a6e8 <malloc>
 800d9e8:	4602      	mov	r2, r0
 800d9ea:	6260      	str	r0, [r4, #36]	; 0x24
 800d9ec:	b920      	cbnz	r0, 800d9f8 <_Balloc+0x20>
 800d9ee:	4b18      	ldr	r3, [pc, #96]	; (800da50 <_Balloc+0x78>)
 800d9f0:	4818      	ldr	r0, [pc, #96]	; (800da54 <_Balloc+0x7c>)
 800d9f2:	2166      	movs	r1, #102	; 0x66
 800d9f4:	f7fe fda4 	bl	800c540 <__assert_func>
 800d9f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9fc:	6006      	str	r6, [r0, #0]
 800d9fe:	60c6      	str	r6, [r0, #12]
 800da00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800da02:	68f3      	ldr	r3, [r6, #12]
 800da04:	b183      	cbz	r3, 800da28 <_Balloc+0x50>
 800da06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da08:	68db      	ldr	r3, [r3, #12]
 800da0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800da0e:	b9b8      	cbnz	r0, 800da40 <_Balloc+0x68>
 800da10:	2101      	movs	r1, #1
 800da12:	fa01 f605 	lsl.w	r6, r1, r5
 800da16:	1d72      	adds	r2, r6, #5
 800da18:	0092      	lsls	r2, r2, #2
 800da1a:	4620      	mov	r0, r4
 800da1c:	f000 fc9d 	bl	800e35a <_calloc_r>
 800da20:	b160      	cbz	r0, 800da3c <_Balloc+0x64>
 800da22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800da26:	e00e      	b.n	800da46 <_Balloc+0x6e>
 800da28:	2221      	movs	r2, #33	; 0x21
 800da2a:	2104      	movs	r1, #4
 800da2c:	4620      	mov	r0, r4
 800da2e:	f000 fc94 	bl	800e35a <_calloc_r>
 800da32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da34:	60f0      	str	r0, [r6, #12]
 800da36:	68db      	ldr	r3, [r3, #12]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d1e4      	bne.n	800da06 <_Balloc+0x2e>
 800da3c:	2000      	movs	r0, #0
 800da3e:	bd70      	pop	{r4, r5, r6, pc}
 800da40:	6802      	ldr	r2, [r0, #0]
 800da42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800da46:	2300      	movs	r3, #0
 800da48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da4c:	e7f7      	b.n	800da3e <_Balloc+0x66>
 800da4e:	bf00      	nop
 800da50:	0800f6d8 	.word	0x0800f6d8
 800da54:	0800f9a0 	.word	0x0800f9a0

0800da58 <_Bfree>:
 800da58:	b570      	push	{r4, r5, r6, lr}
 800da5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800da5c:	4605      	mov	r5, r0
 800da5e:	460c      	mov	r4, r1
 800da60:	b976      	cbnz	r6, 800da80 <_Bfree+0x28>
 800da62:	2010      	movs	r0, #16
 800da64:	f7fc fe40 	bl	800a6e8 <malloc>
 800da68:	4602      	mov	r2, r0
 800da6a:	6268      	str	r0, [r5, #36]	; 0x24
 800da6c:	b920      	cbnz	r0, 800da78 <_Bfree+0x20>
 800da6e:	4b09      	ldr	r3, [pc, #36]	; (800da94 <_Bfree+0x3c>)
 800da70:	4809      	ldr	r0, [pc, #36]	; (800da98 <_Bfree+0x40>)
 800da72:	218a      	movs	r1, #138	; 0x8a
 800da74:	f7fe fd64 	bl	800c540 <__assert_func>
 800da78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da7c:	6006      	str	r6, [r0, #0]
 800da7e:	60c6      	str	r6, [r0, #12]
 800da80:	b13c      	cbz	r4, 800da92 <_Bfree+0x3a>
 800da82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800da84:	6862      	ldr	r2, [r4, #4]
 800da86:	68db      	ldr	r3, [r3, #12]
 800da88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da8c:	6021      	str	r1, [r4, #0]
 800da8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da92:	bd70      	pop	{r4, r5, r6, pc}
 800da94:	0800f6d8 	.word	0x0800f6d8
 800da98:	0800f9a0 	.word	0x0800f9a0

0800da9c <__multadd>:
 800da9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daa0:	690d      	ldr	r5, [r1, #16]
 800daa2:	4607      	mov	r7, r0
 800daa4:	460c      	mov	r4, r1
 800daa6:	461e      	mov	r6, r3
 800daa8:	f101 0c14 	add.w	ip, r1, #20
 800daac:	2000      	movs	r0, #0
 800daae:	f8dc 3000 	ldr.w	r3, [ip]
 800dab2:	b299      	uxth	r1, r3
 800dab4:	fb02 6101 	mla	r1, r2, r1, r6
 800dab8:	0c1e      	lsrs	r6, r3, #16
 800daba:	0c0b      	lsrs	r3, r1, #16
 800dabc:	fb02 3306 	mla	r3, r2, r6, r3
 800dac0:	b289      	uxth	r1, r1
 800dac2:	3001      	adds	r0, #1
 800dac4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dac8:	4285      	cmp	r5, r0
 800daca:	f84c 1b04 	str.w	r1, [ip], #4
 800dace:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dad2:	dcec      	bgt.n	800daae <__multadd+0x12>
 800dad4:	b30e      	cbz	r6, 800db1a <__multadd+0x7e>
 800dad6:	68a3      	ldr	r3, [r4, #8]
 800dad8:	42ab      	cmp	r3, r5
 800dada:	dc19      	bgt.n	800db10 <__multadd+0x74>
 800dadc:	6861      	ldr	r1, [r4, #4]
 800dade:	4638      	mov	r0, r7
 800dae0:	3101      	adds	r1, #1
 800dae2:	f7ff ff79 	bl	800d9d8 <_Balloc>
 800dae6:	4680      	mov	r8, r0
 800dae8:	b928      	cbnz	r0, 800daf6 <__multadd+0x5a>
 800daea:	4602      	mov	r2, r0
 800daec:	4b0c      	ldr	r3, [pc, #48]	; (800db20 <__multadd+0x84>)
 800daee:	480d      	ldr	r0, [pc, #52]	; (800db24 <__multadd+0x88>)
 800daf0:	21b5      	movs	r1, #181	; 0xb5
 800daf2:	f7fe fd25 	bl	800c540 <__assert_func>
 800daf6:	6922      	ldr	r2, [r4, #16]
 800daf8:	3202      	adds	r2, #2
 800dafa:	f104 010c 	add.w	r1, r4, #12
 800dafe:	0092      	lsls	r2, r2, #2
 800db00:	300c      	adds	r0, #12
 800db02:	f7ff ff4f 	bl	800d9a4 <memcpy>
 800db06:	4621      	mov	r1, r4
 800db08:	4638      	mov	r0, r7
 800db0a:	f7ff ffa5 	bl	800da58 <_Bfree>
 800db0e:	4644      	mov	r4, r8
 800db10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800db14:	3501      	adds	r5, #1
 800db16:	615e      	str	r6, [r3, #20]
 800db18:	6125      	str	r5, [r4, #16]
 800db1a:	4620      	mov	r0, r4
 800db1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db20:	0800f916 	.word	0x0800f916
 800db24:	0800f9a0 	.word	0x0800f9a0

0800db28 <__s2b>:
 800db28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db2c:	460c      	mov	r4, r1
 800db2e:	4615      	mov	r5, r2
 800db30:	461f      	mov	r7, r3
 800db32:	2209      	movs	r2, #9
 800db34:	3308      	adds	r3, #8
 800db36:	4606      	mov	r6, r0
 800db38:	fb93 f3f2 	sdiv	r3, r3, r2
 800db3c:	2100      	movs	r1, #0
 800db3e:	2201      	movs	r2, #1
 800db40:	429a      	cmp	r2, r3
 800db42:	db09      	blt.n	800db58 <__s2b+0x30>
 800db44:	4630      	mov	r0, r6
 800db46:	f7ff ff47 	bl	800d9d8 <_Balloc>
 800db4a:	b940      	cbnz	r0, 800db5e <__s2b+0x36>
 800db4c:	4602      	mov	r2, r0
 800db4e:	4b19      	ldr	r3, [pc, #100]	; (800dbb4 <__s2b+0x8c>)
 800db50:	4819      	ldr	r0, [pc, #100]	; (800dbb8 <__s2b+0x90>)
 800db52:	21ce      	movs	r1, #206	; 0xce
 800db54:	f7fe fcf4 	bl	800c540 <__assert_func>
 800db58:	0052      	lsls	r2, r2, #1
 800db5a:	3101      	adds	r1, #1
 800db5c:	e7f0      	b.n	800db40 <__s2b+0x18>
 800db5e:	9b08      	ldr	r3, [sp, #32]
 800db60:	6143      	str	r3, [r0, #20]
 800db62:	2d09      	cmp	r5, #9
 800db64:	f04f 0301 	mov.w	r3, #1
 800db68:	6103      	str	r3, [r0, #16]
 800db6a:	dd16      	ble.n	800db9a <__s2b+0x72>
 800db6c:	f104 0909 	add.w	r9, r4, #9
 800db70:	46c8      	mov	r8, r9
 800db72:	442c      	add	r4, r5
 800db74:	f818 3b01 	ldrb.w	r3, [r8], #1
 800db78:	4601      	mov	r1, r0
 800db7a:	3b30      	subs	r3, #48	; 0x30
 800db7c:	220a      	movs	r2, #10
 800db7e:	4630      	mov	r0, r6
 800db80:	f7ff ff8c 	bl	800da9c <__multadd>
 800db84:	45a0      	cmp	r8, r4
 800db86:	d1f5      	bne.n	800db74 <__s2b+0x4c>
 800db88:	f1a5 0408 	sub.w	r4, r5, #8
 800db8c:	444c      	add	r4, r9
 800db8e:	1b2d      	subs	r5, r5, r4
 800db90:	1963      	adds	r3, r4, r5
 800db92:	42bb      	cmp	r3, r7
 800db94:	db04      	blt.n	800dba0 <__s2b+0x78>
 800db96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db9a:	340a      	adds	r4, #10
 800db9c:	2509      	movs	r5, #9
 800db9e:	e7f6      	b.n	800db8e <__s2b+0x66>
 800dba0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dba4:	4601      	mov	r1, r0
 800dba6:	3b30      	subs	r3, #48	; 0x30
 800dba8:	220a      	movs	r2, #10
 800dbaa:	4630      	mov	r0, r6
 800dbac:	f7ff ff76 	bl	800da9c <__multadd>
 800dbb0:	e7ee      	b.n	800db90 <__s2b+0x68>
 800dbb2:	bf00      	nop
 800dbb4:	0800f916 	.word	0x0800f916
 800dbb8:	0800f9a0 	.word	0x0800f9a0

0800dbbc <__hi0bits>:
 800dbbc:	0c03      	lsrs	r3, r0, #16
 800dbbe:	041b      	lsls	r3, r3, #16
 800dbc0:	b9d3      	cbnz	r3, 800dbf8 <__hi0bits+0x3c>
 800dbc2:	0400      	lsls	r0, r0, #16
 800dbc4:	2310      	movs	r3, #16
 800dbc6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dbca:	bf04      	itt	eq
 800dbcc:	0200      	lsleq	r0, r0, #8
 800dbce:	3308      	addeq	r3, #8
 800dbd0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dbd4:	bf04      	itt	eq
 800dbd6:	0100      	lsleq	r0, r0, #4
 800dbd8:	3304      	addeq	r3, #4
 800dbda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dbde:	bf04      	itt	eq
 800dbe0:	0080      	lsleq	r0, r0, #2
 800dbe2:	3302      	addeq	r3, #2
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	db05      	blt.n	800dbf4 <__hi0bits+0x38>
 800dbe8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dbec:	f103 0301 	add.w	r3, r3, #1
 800dbf0:	bf08      	it	eq
 800dbf2:	2320      	moveq	r3, #32
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	4770      	bx	lr
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	e7e4      	b.n	800dbc6 <__hi0bits+0xa>

0800dbfc <__lo0bits>:
 800dbfc:	6803      	ldr	r3, [r0, #0]
 800dbfe:	f013 0207 	ands.w	r2, r3, #7
 800dc02:	4601      	mov	r1, r0
 800dc04:	d00b      	beq.n	800dc1e <__lo0bits+0x22>
 800dc06:	07da      	lsls	r2, r3, #31
 800dc08:	d423      	bmi.n	800dc52 <__lo0bits+0x56>
 800dc0a:	0798      	lsls	r0, r3, #30
 800dc0c:	bf49      	itett	mi
 800dc0e:	085b      	lsrmi	r3, r3, #1
 800dc10:	089b      	lsrpl	r3, r3, #2
 800dc12:	2001      	movmi	r0, #1
 800dc14:	600b      	strmi	r3, [r1, #0]
 800dc16:	bf5c      	itt	pl
 800dc18:	600b      	strpl	r3, [r1, #0]
 800dc1a:	2002      	movpl	r0, #2
 800dc1c:	4770      	bx	lr
 800dc1e:	b298      	uxth	r0, r3
 800dc20:	b9a8      	cbnz	r0, 800dc4e <__lo0bits+0x52>
 800dc22:	0c1b      	lsrs	r3, r3, #16
 800dc24:	2010      	movs	r0, #16
 800dc26:	b2da      	uxtb	r2, r3
 800dc28:	b90a      	cbnz	r2, 800dc2e <__lo0bits+0x32>
 800dc2a:	3008      	adds	r0, #8
 800dc2c:	0a1b      	lsrs	r3, r3, #8
 800dc2e:	071a      	lsls	r2, r3, #28
 800dc30:	bf04      	itt	eq
 800dc32:	091b      	lsreq	r3, r3, #4
 800dc34:	3004      	addeq	r0, #4
 800dc36:	079a      	lsls	r2, r3, #30
 800dc38:	bf04      	itt	eq
 800dc3a:	089b      	lsreq	r3, r3, #2
 800dc3c:	3002      	addeq	r0, #2
 800dc3e:	07da      	lsls	r2, r3, #31
 800dc40:	d403      	bmi.n	800dc4a <__lo0bits+0x4e>
 800dc42:	085b      	lsrs	r3, r3, #1
 800dc44:	f100 0001 	add.w	r0, r0, #1
 800dc48:	d005      	beq.n	800dc56 <__lo0bits+0x5a>
 800dc4a:	600b      	str	r3, [r1, #0]
 800dc4c:	4770      	bx	lr
 800dc4e:	4610      	mov	r0, r2
 800dc50:	e7e9      	b.n	800dc26 <__lo0bits+0x2a>
 800dc52:	2000      	movs	r0, #0
 800dc54:	4770      	bx	lr
 800dc56:	2020      	movs	r0, #32
 800dc58:	4770      	bx	lr
	...

0800dc5c <__i2b>:
 800dc5c:	b510      	push	{r4, lr}
 800dc5e:	460c      	mov	r4, r1
 800dc60:	2101      	movs	r1, #1
 800dc62:	f7ff feb9 	bl	800d9d8 <_Balloc>
 800dc66:	4602      	mov	r2, r0
 800dc68:	b928      	cbnz	r0, 800dc76 <__i2b+0x1a>
 800dc6a:	4b05      	ldr	r3, [pc, #20]	; (800dc80 <__i2b+0x24>)
 800dc6c:	4805      	ldr	r0, [pc, #20]	; (800dc84 <__i2b+0x28>)
 800dc6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dc72:	f7fe fc65 	bl	800c540 <__assert_func>
 800dc76:	2301      	movs	r3, #1
 800dc78:	6144      	str	r4, [r0, #20]
 800dc7a:	6103      	str	r3, [r0, #16]
 800dc7c:	bd10      	pop	{r4, pc}
 800dc7e:	bf00      	nop
 800dc80:	0800f916 	.word	0x0800f916
 800dc84:	0800f9a0 	.word	0x0800f9a0

0800dc88 <__multiply>:
 800dc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc8c:	4691      	mov	r9, r2
 800dc8e:	690a      	ldr	r2, [r1, #16]
 800dc90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc94:	429a      	cmp	r2, r3
 800dc96:	bfb8      	it	lt
 800dc98:	460b      	movlt	r3, r1
 800dc9a:	460c      	mov	r4, r1
 800dc9c:	bfbc      	itt	lt
 800dc9e:	464c      	movlt	r4, r9
 800dca0:	4699      	movlt	r9, r3
 800dca2:	6927      	ldr	r7, [r4, #16]
 800dca4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dca8:	68a3      	ldr	r3, [r4, #8]
 800dcaa:	6861      	ldr	r1, [r4, #4]
 800dcac:	eb07 060a 	add.w	r6, r7, sl
 800dcb0:	42b3      	cmp	r3, r6
 800dcb2:	b085      	sub	sp, #20
 800dcb4:	bfb8      	it	lt
 800dcb6:	3101      	addlt	r1, #1
 800dcb8:	f7ff fe8e 	bl	800d9d8 <_Balloc>
 800dcbc:	b930      	cbnz	r0, 800dccc <__multiply+0x44>
 800dcbe:	4602      	mov	r2, r0
 800dcc0:	4b44      	ldr	r3, [pc, #272]	; (800ddd4 <__multiply+0x14c>)
 800dcc2:	4845      	ldr	r0, [pc, #276]	; (800ddd8 <__multiply+0x150>)
 800dcc4:	f240 115d 	movw	r1, #349	; 0x15d
 800dcc8:	f7fe fc3a 	bl	800c540 <__assert_func>
 800dccc:	f100 0514 	add.w	r5, r0, #20
 800dcd0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dcd4:	462b      	mov	r3, r5
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	4543      	cmp	r3, r8
 800dcda:	d321      	bcc.n	800dd20 <__multiply+0x98>
 800dcdc:	f104 0314 	add.w	r3, r4, #20
 800dce0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dce4:	f109 0314 	add.w	r3, r9, #20
 800dce8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dcec:	9202      	str	r2, [sp, #8]
 800dcee:	1b3a      	subs	r2, r7, r4
 800dcf0:	3a15      	subs	r2, #21
 800dcf2:	f022 0203 	bic.w	r2, r2, #3
 800dcf6:	3204      	adds	r2, #4
 800dcf8:	f104 0115 	add.w	r1, r4, #21
 800dcfc:	428f      	cmp	r7, r1
 800dcfe:	bf38      	it	cc
 800dd00:	2204      	movcc	r2, #4
 800dd02:	9201      	str	r2, [sp, #4]
 800dd04:	9a02      	ldr	r2, [sp, #8]
 800dd06:	9303      	str	r3, [sp, #12]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d80c      	bhi.n	800dd26 <__multiply+0x9e>
 800dd0c:	2e00      	cmp	r6, #0
 800dd0e:	dd03      	ble.n	800dd18 <__multiply+0x90>
 800dd10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d05a      	beq.n	800ddce <__multiply+0x146>
 800dd18:	6106      	str	r6, [r0, #16]
 800dd1a:	b005      	add	sp, #20
 800dd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd20:	f843 2b04 	str.w	r2, [r3], #4
 800dd24:	e7d8      	b.n	800dcd8 <__multiply+0x50>
 800dd26:	f8b3 a000 	ldrh.w	sl, [r3]
 800dd2a:	f1ba 0f00 	cmp.w	sl, #0
 800dd2e:	d024      	beq.n	800dd7a <__multiply+0xf2>
 800dd30:	f104 0e14 	add.w	lr, r4, #20
 800dd34:	46a9      	mov	r9, r5
 800dd36:	f04f 0c00 	mov.w	ip, #0
 800dd3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dd3e:	f8d9 1000 	ldr.w	r1, [r9]
 800dd42:	fa1f fb82 	uxth.w	fp, r2
 800dd46:	b289      	uxth	r1, r1
 800dd48:	fb0a 110b 	mla	r1, sl, fp, r1
 800dd4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dd50:	f8d9 2000 	ldr.w	r2, [r9]
 800dd54:	4461      	add	r1, ip
 800dd56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dd5a:	fb0a c20b 	mla	r2, sl, fp, ip
 800dd5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dd62:	b289      	uxth	r1, r1
 800dd64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dd68:	4577      	cmp	r7, lr
 800dd6a:	f849 1b04 	str.w	r1, [r9], #4
 800dd6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dd72:	d8e2      	bhi.n	800dd3a <__multiply+0xb2>
 800dd74:	9a01      	ldr	r2, [sp, #4]
 800dd76:	f845 c002 	str.w	ip, [r5, r2]
 800dd7a:	9a03      	ldr	r2, [sp, #12]
 800dd7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dd80:	3304      	adds	r3, #4
 800dd82:	f1b9 0f00 	cmp.w	r9, #0
 800dd86:	d020      	beq.n	800ddca <__multiply+0x142>
 800dd88:	6829      	ldr	r1, [r5, #0]
 800dd8a:	f104 0c14 	add.w	ip, r4, #20
 800dd8e:	46ae      	mov	lr, r5
 800dd90:	f04f 0a00 	mov.w	sl, #0
 800dd94:	f8bc b000 	ldrh.w	fp, [ip]
 800dd98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dd9c:	fb09 220b 	mla	r2, r9, fp, r2
 800dda0:	4492      	add	sl, r2
 800dda2:	b289      	uxth	r1, r1
 800dda4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dda8:	f84e 1b04 	str.w	r1, [lr], #4
 800ddac:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ddb0:	f8be 1000 	ldrh.w	r1, [lr]
 800ddb4:	0c12      	lsrs	r2, r2, #16
 800ddb6:	fb09 1102 	mla	r1, r9, r2, r1
 800ddba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ddbe:	4567      	cmp	r7, ip
 800ddc0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ddc4:	d8e6      	bhi.n	800dd94 <__multiply+0x10c>
 800ddc6:	9a01      	ldr	r2, [sp, #4]
 800ddc8:	50a9      	str	r1, [r5, r2]
 800ddca:	3504      	adds	r5, #4
 800ddcc:	e79a      	b.n	800dd04 <__multiply+0x7c>
 800ddce:	3e01      	subs	r6, #1
 800ddd0:	e79c      	b.n	800dd0c <__multiply+0x84>
 800ddd2:	bf00      	nop
 800ddd4:	0800f916 	.word	0x0800f916
 800ddd8:	0800f9a0 	.word	0x0800f9a0

0800dddc <__pow5mult>:
 800dddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dde0:	4615      	mov	r5, r2
 800dde2:	f012 0203 	ands.w	r2, r2, #3
 800dde6:	4606      	mov	r6, r0
 800dde8:	460f      	mov	r7, r1
 800ddea:	d007      	beq.n	800ddfc <__pow5mult+0x20>
 800ddec:	4c25      	ldr	r4, [pc, #148]	; (800de84 <__pow5mult+0xa8>)
 800ddee:	3a01      	subs	r2, #1
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ddf6:	f7ff fe51 	bl	800da9c <__multadd>
 800ddfa:	4607      	mov	r7, r0
 800ddfc:	10ad      	asrs	r5, r5, #2
 800ddfe:	d03d      	beq.n	800de7c <__pow5mult+0xa0>
 800de00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800de02:	b97c      	cbnz	r4, 800de24 <__pow5mult+0x48>
 800de04:	2010      	movs	r0, #16
 800de06:	f7fc fc6f 	bl	800a6e8 <malloc>
 800de0a:	4602      	mov	r2, r0
 800de0c:	6270      	str	r0, [r6, #36]	; 0x24
 800de0e:	b928      	cbnz	r0, 800de1c <__pow5mult+0x40>
 800de10:	4b1d      	ldr	r3, [pc, #116]	; (800de88 <__pow5mult+0xac>)
 800de12:	481e      	ldr	r0, [pc, #120]	; (800de8c <__pow5mult+0xb0>)
 800de14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800de18:	f7fe fb92 	bl	800c540 <__assert_func>
 800de1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800de20:	6004      	str	r4, [r0, #0]
 800de22:	60c4      	str	r4, [r0, #12]
 800de24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800de28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800de2c:	b94c      	cbnz	r4, 800de42 <__pow5mult+0x66>
 800de2e:	f240 2171 	movw	r1, #625	; 0x271
 800de32:	4630      	mov	r0, r6
 800de34:	f7ff ff12 	bl	800dc5c <__i2b>
 800de38:	2300      	movs	r3, #0
 800de3a:	f8c8 0008 	str.w	r0, [r8, #8]
 800de3e:	4604      	mov	r4, r0
 800de40:	6003      	str	r3, [r0, #0]
 800de42:	f04f 0900 	mov.w	r9, #0
 800de46:	07eb      	lsls	r3, r5, #31
 800de48:	d50a      	bpl.n	800de60 <__pow5mult+0x84>
 800de4a:	4639      	mov	r1, r7
 800de4c:	4622      	mov	r2, r4
 800de4e:	4630      	mov	r0, r6
 800de50:	f7ff ff1a 	bl	800dc88 <__multiply>
 800de54:	4639      	mov	r1, r7
 800de56:	4680      	mov	r8, r0
 800de58:	4630      	mov	r0, r6
 800de5a:	f7ff fdfd 	bl	800da58 <_Bfree>
 800de5e:	4647      	mov	r7, r8
 800de60:	106d      	asrs	r5, r5, #1
 800de62:	d00b      	beq.n	800de7c <__pow5mult+0xa0>
 800de64:	6820      	ldr	r0, [r4, #0]
 800de66:	b938      	cbnz	r0, 800de78 <__pow5mult+0x9c>
 800de68:	4622      	mov	r2, r4
 800de6a:	4621      	mov	r1, r4
 800de6c:	4630      	mov	r0, r6
 800de6e:	f7ff ff0b 	bl	800dc88 <__multiply>
 800de72:	6020      	str	r0, [r4, #0]
 800de74:	f8c0 9000 	str.w	r9, [r0]
 800de78:	4604      	mov	r4, r0
 800de7a:	e7e4      	b.n	800de46 <__pow5mult+0x6a>
 800de7c:	4638      	mov	r0, r7
 800de7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de82:	bf00      	nop
 800de84:	0800faf0 	.word	0x0800faf0
 800de88:	0800f6d8 	.word	0x0800f6d8
 800de8c:	0800f9a0 	.word	0x0800f9a0

0800de90 <__lshift>:
 800de90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de94:	460c      	mov	r4, r1
 800de96:	6849      	ldr	r1, [r1, #4]
 800de98:	6923      	ldr	r3, [r4, #16]
 800de9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de9e:	68a3      	ldr	r3, [r4, #8]
 800dea0:	4607      	mov	r7, r0
 800dea2:	4691      	mov	r9, r2
 800dea4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dea8:	f108 0601 	add.w	r6, r8, #1
 800deac:	42b3      	cmp	r3, r6
 800deae:	db0b      	blt.n	800dec8 <__lshift+0x38>
 800deb0:	4638      	mov	r0, r7
 800deb2:	f7ff fd91 	bl	800d9d8 <_Balloc>
 800deb6:	4605      	mov	r5, r0
 800deb8:	b948      	cbnz	r0, 800dece <__lshift+0x3e>
 800deba:	4602      	mov	r2, r0
 800debc:	4b2a      	ldr	r3, [pc, #168]	; (800df68 <__lshift+0xd8>)
 800debe:	482b      	ldr	r0, [pc, #172]	; (800df6c <__lshift+0xdc>)
 800dec0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dec4:	f7fe fb3c 	bl	800c540 <__assert_func>
 800dec8:	3101      	adds	r1, #1
 800deca:	005b      	lsls	r3, r3, #1
 800decc:	e7ee      	b.n	800deac <__lshift+0x1c>
 800dece:	2300      	movs	r3, #0
 800ded0:	f100 0114 	add.w	r1, r0, #20
 800ded4:	f100 0210 	add.w	r2, r0, #16
 800ded8:	4618      	mov	r0, r3
 800deda:	4553      	cmp	r3, sl
 800dedc:	db37      	blt.n	800df4e <__lshift+0xbe>
 800dede:	6920      	ldr	r0, [r4, #16]
 800dee0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dee4:	f104 0314 	add.w	r3, r4, #20
 800dee8:	f019 091f 	ands.w	r9, r9, #31
 800deec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800def0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800def4:	d02f      	beq.n	800df56 <__lshift+0xc6>
 800def6:	f1c9 0e20 	rsb	lr, r9, #32
 800defa:	468a      	mov	sl, r1
 800defc:	f04f 0c00 	mov.w	ip, #0
 800df00:	681a      	ldr	r2, [r3, #0]
 800df02:	fa02 f209 	lsl.w	r2, r2, r9
 800df06:	ea42 020c 	orr.w	r2, r2, ip
 800df0a:	f84a 2b04 	str.w	r2, [sl], #4
 800df0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800df12:	4298      	cmp	r0, r3
 800df14:	fa22 fc0e 	lsr.w	ip, r2, lr
 800df18:	d8f2      	bhi.n	800df00 <__lshift+0x70>
 800df1a:	1b03      	subs	r3, r0, r4
 800df1c:	3b15      	subs	r3, #21
 800df1e:	f023 0303 	bic.w	r3, r3, #3
 800df22:	3304      	adds	r3, #4
 800df24:	f104 0215 	add.w	r2, r4, #21
 800df28:	4290      	cmp	r0, r2
 800df2a:	bf38      	it	cc
 800df2c:	2304      	movcc	r3, #4
 800df2e:	f841 c003 	str.w	ip, [r1, r3]
 800df32:	f1bc 0f00 	cmp.w	ip, #0
 800df36:	d001      	beq.n	800df3c <__lshift+0xac>
 800df38:	f108 0602 	add.w	r6, r8, #2
 800df3c:	3e01      	subs	r6, #1
 800df3e:	4638      	mov	r0, r7
 800df40:	612e      	str	r6, [r5, #16]
 800df42:	4621      	mov	r1, r4
 800df44:	f7ff fd88 	bl	800da58 <_Bfree>
 800df48:	4628      	mov	r0, r5
 800df4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df4e:	f842 0f04 	str.w	r0, [r2, #4]!
 800df52:	3301      	adds	r3, #1
 800df54:	e7c1      	b.n	800deda <__lshift+0x4a>
 800df56:	3904      	subs	r1, #4
 800df58:	f853 2b04 	ldr.w	r2, [r3], #4
 800df5c:	f841 2f04 	str.w	r2, [r1, #4]!
 800df60:	4298      	cmp	r0, r3
 800df62:	d8f9      	bhi.n	800df58 <__lshift+0xc8>
 800df64:	e7ea      	b.n	800df3c <__lshift+0xac>
 800df66:	bf00      	nop
 800df68:	0800f916 	.word	0x0800f916
 800df6c:	0800f9a0 	.word	0x0800f9a0

0800df70 <__mcmp>:
 800df70:	b530      	push	{r4, r5, lr}
 800df72:	6902      	ldr	r2, [r0, #16]
 800df74:	690c      	ldr	r4, [r1, #16]
 800df76:	1b12      	subs	r2, r2, r4
 800df78:	d10e      	bne.n	800df98 <__mcmp+0x28>
 800df7a:	f100 0314 	add.w	r3, r0, #20
 800df7e:	3114      	adds	r1, #20
 800df80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800df84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800df88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800df8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800df90:	42a5      	cmp	r5, r4
 800df92:	d003      	beq.n	800df9c <__mcmp+0x2c>
 800df94:	d305      	bcc.n	800dfa2 <__mcmp+0x32>
 800df96:	2201      	movs	r2, #1
 800df98:	4610      	mov	r0, r2
 800df9a:	bd30      	pop	{r4, r5, pc}
 800df9c:	4283      	cmp	r3, r0
 800df9e:	d3f3      	bcc.n	800df88 <__mcmp+0x18>
 800dfa0:	e7fa      	b.n	800df98 <__mcmp+0x28>
 800dfa2:	f04f 32ff 	mov.w	r2, #4294967295
 800dfa6:	e7f7      	b.n	800df98 <__mcmp+0x28>

0800dfa8 <__mdiff>:
 800dfa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfac:	460c      	mov	r4, r1
 800dfae:	4606      	mov	r6, r0
 800dfb0:	4611      	mov	r1, r2
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	4690      	mov	r8, r2
 800dfb6:	f7ff ffdb 	bl	800df70 <__mcmp>
 800dfba:	1e05      	subs	r5, r0, #0
 800dfbc:	d110      	bne.n	800dfe0 <__mdiff+0x38>
 800dfbe:	4629      	mov	r1, r5
 800dfc0:	4630      	mov	r0, r6
 800dfc2:	f7ff fd09 	bl	800d9d8 <_Balloc>
 800dfc6:	b930      	cbnz	r0, 800dfd6 <__mdiff+0x2e>
 800dfc8:	4b3a      	ldr	r3, [pc, #232]	; (800e0b4 <__mdiff+0x10c>)
 800dfca:	4602      	mov	r2, r0
 800dfcc:	f240 2132 	movw	r1, #562	; 0x232
 800dfd0:	4839      	ldr	r0, [pc, #228]	; (800e0b8 <__mdiff+0x110>)
 800dfd2:	f7fe fab5 	bl	800c540 <__assert_func>
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dfdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfe0:	bfa4      	itt	ge
 800dfe2:	4643      	movge	r3, r8
 800dfe4:	46a0      	movge	r8, r4
 800dfe6:	4630      	mov	r0, r6
 800dfe8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dfec:	bfa6      	itte	ge
 800dfee:	461c      	movge	r4, r3
 800dff0:	2500      	movge	r5, #0
 800dff2:	2501      	movlt	r5, #1
 800dff4:	f7ff fcf0 	bl	800d9d8 <_Balloc>
 800dff8:	b920      	cbnz	r0, 800e004 <__mdiff+0x5c>
 800dffa:	4b2e      	ldr	r3, [pc, #184]	; (800e0b4 <__mdiff+0x10c>)
 800dffc:	4602      	mov	r2, r0
 800dffe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e002:	e7e5      	b.n	800dfd0 <__mdiff+0x28>
 800e004:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e008:	6926      	ldr	r6, [r4, #16]
 800e00a:	60c5      	str	r5, [r0, #12]
 800e00c:	f104 0914 	add.w	r9, r4, #20
 800e010:	f108 0514 	add.w	r5, r8, #20
 800e014:	f100 0e14 	add.w	lr, r0, #20
 800e018:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e01c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e020:	f108 0210 	add.w	r2, r8, #16
 800e024:	46f2      	mov	sl, lr
 800e026:	2100      	movs	r1, #0
 800e028:	f859 3b04 	ldr.w	r3, [r9], #4
 800e02c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e030:	fa1f f883 	uxth.w	r8, r3
 800e034:	fa11 f18b 	uxtah	r1, r1, fp
 800e038:	0c1b      	lsrs	r3, r3, #16
 800e03a:	eba1 0808 	sub.w	r8, r1, r8
 800e03e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e042:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e046:	fa1f f888 	uxth.w	r8, r8
 800e04a:	1419      	asrs	r1, r3, #16
 800e04c:	454e      	cmp	r6, r9
 800e04e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e052:	f84a 3b04 	str.w	r3, [sl], #4
 800e056:	d8e7      	bhi.n	800e028 <__mdiff+0x80>
 800e058:	1b33      	subs	r3, r6, r4
 800e05a:	3b15      	subs	r3, #21
 800e05c:	f023 0303 	bic.w	r3, r3, #3
 800e060:	3304      	adds	r3, #4
 800e062:	3415      	adds	r4, #21
 800e064:	42a6      	cmp	r6, r4
 800e066:	bf38      	it	cc
 800e068:	2304      	movcc	r3, #4
 800e06a:	441d      	add	r5, r3
 800e06c:	4473      	add	r3, lr
 800e06e:	469e      	mov	lr, r3
 800e070:	462e      	mov	r6, r5
 800e072:	4566      	cmp	r6, ip
 800e074:	d30e      	bcc.n	800e094 <__mdiff+0xec>
 800e076:	f10c 0203 	add.w	r2, ip, #3
 800e07a:	1b52      	subs	r2, r2, r5
 800e07c:	f022 0203 	bic.w	r2, r2, #3
 800e080:	3d03      	subs	r5, #3
 800e082:	45ac      	cmp	ip, r5
 800e084:	bf38      	it	cc
 800e086:	2200      	movcc	r2, #0
 800e088:	441a      	add	r2, r3
 800e08a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e08e:	b17b      	cbz	r3, 800e0b0 <__mdiff+0x108>
 800e090:	6107      	str	r7, [r0, #16]
 800e092:	e7a3      	b.n	800dfdc <__mdiff+0x34>
 800e094:	f856 8b04 	ldr.w	r8, [r6], #4
 800e098:	fa11 f288 	uxtah	r2, r1, r8
 800e09c:	1414      	asrs	r4, r2, #16
 800e09e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e0a2:	b292      	uxth	r2, r2
 800e0a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e0a8:	f84e 2b04 	str.w	r2, [lr], #4
 800e0ac:	1421      	asrs	r1, r4, #16
 800e0ae:	e7e0      	b.n	800e072 <__mdiff+0xca>
 800e0b0:	3f01      	subs	r7, #1
 800e0b2:	e7ea      	b.n	800e08a <__mdiff+0xe2>
 800e0b4:	0800f916 	.word	0x0800f916
 800e0b8:	0800f9a0 	.word	0x0800f9a0

0800e0bc <__ulp>:
 800e0bc:	b082      	sub	sp, #8
 800e0be:	ed8d 0b00 	vstr	d0, [sp]
 800e0c2:	9b01      	ldr	r3, [sp, #4]
 800e0c4:	4912      	ldr	r1, [pc, #72]	; (800e110 <__ulp+0x54>)
 800e0c6:	4019      	ands	r1, r3
 800e0c8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e0cc:	2900      	cmp	r1, #0
 800e0ce:	dd05      	ble.n	800e0dc <__ulp+0x20>
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	460b      	mov	r3, r1
 800e0d4:	ec43 2b10 	vmov	d0, r2, r3
 800e0d8:	b002      	add	sp, #8
 800e0da:	4770      	bx	lr
 800e0dc:	4249      	negs	r1, r1
 800e0de:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e0e2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e0e6:	f04f 0200 	mov.w	r2, #0
 800e0ea:	f04f 0300 	mov.w	r3, #0
 800e0ee:	da04      	bge.n	800e0fa <__ulp+0x3e>
 800e0f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e0f4:	fa41 f300 	asr.w	r3, r1, r0
 800e0f8:	e7ec      	b.n	800e0d4 <__ulp+0x18>
 800e0fa:	f1a0 0114 	sub.w	r1, r0, #20
 800e0fe:	291e      	cmp	r1, #30
 800e100:	bfda      	itte	le
 800e102:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e106:	fa20 f101 	lsrle.w	r1, r0, r1
 800e10a:	2101      	movgt	r1, #1
 800e10c:	460a      	mov	r2, r1
 800e10e:	e7e1      	b.n	800e0d4 <__ulp+0x18>
 800e110:	7ff00000 	.word	0x7ff00000

0800e114 <__b2d>:
 800e114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e116:	6905      	ldr	r5, [r0, #16]
 800e118:	f100 0714 	add.w	r7, r0, #20
 800e11c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e120:	1f2e      	subs	r6, r5, #4
 800e122:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e126:	4620      	mov	r0, r4
 800e128:	f7ff fd48 	bl	800dbbc <__hi0bits>
 800e12c:	f1c0 0320 	rsb	r3, r0, #32
 800e130:	280a      	cmp	r0, #10
 800e132:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e1b0 <__b2d+0x9c>
 800e136:	600b      	str	r3, [r1, #0]
 800e138:	dc14      	bgt.n	800e164 <__b2d+0x50>
 800e13a:	f1c0 0e0b 	rsb	lr, r0, #11
 800e13e:	fa24 f10e 	lsr.w	r1, r4, lr
 800e142:	42b7      	cmp	r7, r6
 800e144:	ea41 030c 	orr.w	r3, r1, ip
 800e148:	bf34      	ite	cc
 800e14a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e14e:	2100      	movcs	r1, #0
 800e150:	3015      	adds	r0, #21
 800e152:	fa04 f000 	lsl.w	r0, r4, r0
 800e156:	fa21 f10e 	lsr.w	r1, r1, lr
 800e15a:	ea40 0201 	orr.w	r2, r0, r1
 800e15e:	ec43 2b10 	vmov	d0, r2, r3
 800e162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e164:	42b7      	cmp	r7, r6
 800e166:	bf3a      	itte	cc
 800e168:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e16c:	f1a5 0608 	subcc.w	r6, r5, #8
 800e170:	2100      	movcs	r1, #0
 800e172:	380b      	subs	r0, #11
 800e174:	d017      	beq.n	800e1a6 <__b2d+0x92>
 800e176:	f1c0 0c20 	rsb	ip, r0, #32
 800e17a:	fa04 f500 	lsl.w	r5, r4, r0
 800e17e:	42be      	cmp	r6, r7
 800e180:	fa21 f40c 	lsr.w	r4, r1, ip
 800e184:	ea45 0504 	orr.w	r5, r5, r4
 800e188:	bf8c      	ite	hi
 800e18a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e18e:	2400      	movls	r4, #0
 800e190:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e194:	fa01 f000 	lsl.w	r0, r1, r0
 800e198:	fa24 f40c 	lsr.w	r4, r4, ip
 800e19c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e1a0:	ea40 0204 	orr.w	r2, r0, r4
 800e1a4:	e7db      	b.n	800e15e <__b2d+0x4a>
 800e1a6:	ea44 030c 	orr.w	r3, r4, ip
 800e1aa:	460a      	mov	r2, r1
 800e1ac:	e7d7      	b.n	800e15e <__b2d+0x4a>
 800e1ae:	bf00      	nop
 800e1b0:	3ff00000 	.word	0x3ff00000

0800e1b4 <__d2b>:
 800e1b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e1b8:	4689      	mov	r9, r1
 800e1ba:	2101      	movs	r1, #1
 800e1bc:	ec57 6b10 	vmov	r6, r7, d0
 800e1c0:	4690      	mov	r8, r2
 800e1c2:	f7ff fc09 	bl	800d9d8 <_Balloc>
 800e1c6:	4604      	mov	r4, r0
 800e1c8:	b930      	cbnz	r0, 800e1d8 <__d2b+0x24>
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	4b25      	ldr	r3, [pc, #148]	; (800e264 <__d2b+0xb0>)
 800e1ce:	4826      	ldr	r0, [pc, #152]	; (800e268 <__d2b+0xb4>)
 800e1d0:	f240 310a 	movw	r1, #778	; 0x30a
 800e1d4:	f7fe f9b4 	bl	800c540 <__assert_func>
 800e1d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e1dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e1e0:	bb35      	cbnz	r5, 800e230 <__d2b+0x7c>
 800e1e2:	2e00      	cmp	r6, #0
 800e1e4:	9301      	str	r3, [sp, #4]
 800e1e6:	d028      	beq.n	800e23a <__d2b+0x86>
 800e1e8:	4668      	mov	r0, sp
 800e1ea:	9600      	str	r6, [sp, #0]
 800e1ec:	f7ff fd06 	bl	800dbfc <__lo0bits>
 800e1f0:	9900      	ldr	r1, [sp, #0]
 800e1f2:	b300      	cbz	r0, 800e236 <__d2b+0x82>
 800e1f4:	9a01      	ldr	r2, [sp, #4]
 800e1f6:	f1c0 0320 	rsb	r3, r0, #32
 800e1fa:	fa02 f303 	lsl.w	r3, r2, r3
 800e1fe:	430b      	orrs	r3, r1
 800e200:	40c2      	lsrs	r2, r0
 800e202:	6163      	str	r3, [r4, #20]
 800e204:	9201      	str	r2, [sp, #4]
 800e206:	9b01      	ldr	r3, [sp, #4]
 800e208:	61a3      	str	r3, [r4, #24]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	bf14      	ite	ne
 800e20e:	2202      	movne	r2, #2
 800e210:	2201      	moveq	r2, #1
 800e212:	6122      	str	r2, [r4, #16]
 800e214:	b1d5      	cbz	r5, 800e24c <__d2b+0x98>
 800e216:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e21a:	4405      	add	r5, r0
 800e21c:	f8c9 5000 	str.w	r5, [r9]
 800e220:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e224:	f8c8 0000 	str.w	r0, [r8]
 800e228:	4620      	mov	r0, r4
 800e22a:	b003      	add	sp, #12
 800e22c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e230:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e234:	e7d5      	b.n	800e1e2 <__d2b+0x2e>
 800e236:	6161      	str	r1, [r4, #20]
 800e238:	e7e5      	b.n	800e206 <__d2b+0x52>
 800e23a:	a801      	add	r0, sp, #4
 800e23c:	f7ff fcde 	bl	800dbfc <__lo0bits>
 800e240:	9b01      	ldr	r3, [sp, #4]
 800e242:	6163      	str	r3, [r4, #20]
 800e244:	2201      	movs	r2, #1
 800e246:	6122      	str	r2, [r4, #16]
 800e248:	3020      	adds	r0, #32
 800e24a:	e7e3      	b.n	800e214 <__d2b+0x60>
 800e24c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e250:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e254:	f8c9 0000 	str.w	r0, [r9]
 800e258:	6918      	ldr	r0, [r3, #16]
 800e25a:	f7ff fcaf 	bl	800dbbc <__hi0bits>
 800e25e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e262:	e7df      	b.n	800e224 <__d2b+0x70>
 800e264:	0800f916 	.word	0x0800f916
 800e268:	0800f9a0 	.word	0x0800f9a0

0800e26c <__ratio>:
 800e26c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e270:	4688      	mov	r8, r1
 800e272:	4669      	mov	r1, sp
 800e274:	4681      	mov	r9, r0
 800e276:	f7ff ff4d 	bl	800e114 <__b2d>
 800e27a:	a901      	add	r1, sp, #4
 800e27c:	4640      	mov	r0, r8
 800e27e:	ec55 4b10 	vmov	r4, r5, d0
 800e282:	f7ff ff47 	bl	800e114 <__b2d>
 800e286:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e28a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e28e:	eba3 0c02 	sub.w	ip, r3, r2
 800e292:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e296:	1a9b      	subs	r3, r3, r2
 800e298:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e29c:	ec51 0b10 	vmov	r0, r1, d0
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	bfd6      	itet	le
 800e2a4:	460a      	movle	r2, r1
 800e2a6:	462a      	movgt	r2, r5
 800e2a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e2ac:	468b      	mov	fp, r1
 800e2ae:	462f      	mov	r7, r5
 800e2b0:	bfd4      	ite	le
 800e2b2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e2b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e2ba:	4620      	mov	r0, r4
 800e2bc:	ee10 2a10 	vmov	r2, s0
 800e2c0:	465b      	mov	r3, fp
 800e2c2:	4639      	mov	r1, r7
 800e2c4:	f7f2 fac2 	bl	800084c <__aeabi_ddiv>
 800e2c8:	ec41 0b10 	vmov	d0, r0, r1
 800e2cc:	b003      	add	sp, #12
 800e2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e2d2 <__copybits>:
 800e2d2:	3901      	subs	r1, #1
 800e2d4:	b570      	push	{r4, r5, r6, lr}
 800e2d6:	1149      	asrs	r1, r1, #5
 800e2d8:	6914      	ldr	r4, [r2, #16]
 800e2da:	3101      	adds	r1, #1
 800e2dc:	f102 0314 	add.w	r3, r2, #20
 800e2e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e2e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e2e8:	1f05      	subs	r5, r0, #4
 800e2ea:	42a3      	cmp	r3, r4
 800e2ec:	d30c      	bcc.n	800e308 <__copybits+0x36>
 800e2ee:	1aa3      	subs	r3, r4, r2
 800e2f0:	3b11      	subs	r3, #17
 800e2f2:	f023 0303 	bic.w	r3, r3, #3
 800e2f6:	3211      	adds	r2, #17
 800e2f8:	42a2      	cmp	r2, r4
 800e2fa:	bf88      	it	hi
 800e2fc:	2300      	movhi	r3, #0
 800e2fe:	4418      	add	r0, r3
 800e300:	2300      	movs	r3, #0
 800e302:	4288      	cmp	r0, r1
 800e304:	d305      	bcc.n	800e312 <__copybits+0x40>
 800e306:	bd70      	pop	{r4, r5, r6, pc}
 800e308:	f853 6b04 	ldr.w	r6, [r3], #4
 800e30c:	f845 6f04 	str.w	r6, [r5, #4]!
 800e310:	e7eb      	b.n	800e2ea <__copybits+0x18>
 800e312:	f840 3b04 	str.w	r3, [r0], #4
 800e316:	e7f4      	b.n	800e302 <__copybits+0x30>

0800e318 <__any_on>:
 800e318:	f100 0214 	add.w	r2, r0, #20
 800e31c:	6900      	ldr	r0, [r0, #16]
 800e31e:	114b      	asrs	r3, r1, #5
 800e320:	4298      	cmp	r0, r3
 800e322:	b510      	push	{r4, lr}
 800e324:	db11      	blt.n	800e34a <__any_on+0x32>
 800e326:	dd0a      	ble.n	800e33e <__any_on+0x26>
 800e328:	f011 011f 	ands.w	r1, r1, #31
 800e32c:	d007      	beq.n	800e33e <__any_on+0x26>
 800e32e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e332:	fa24 f001 	lsr.w	r0, r4, r1
 800e336:	fa00 f101 	lsl.w	r1, r0, r1
 800e33a:	428c      	cmp	r4, r1
 800e33c:	d10b      	bne.n	800e356 <__any_on+0x3e>
 800e33e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e342:	4293      	cmp	r3, r2
 800e344:	d803      	bhi.n	800e34e <__any_on+0x36>
 800e346:	2000      	movs	r0, #0
 800e348:	bd10      	pop	{r4, pc}
 800e34a:	4603      	mov	r3, r0
 800e34c:	e7f7      	b.n	800e33e <__any_on+0x26>
 800e34e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e352:	2900      	cmp	r1, #0
 800e354:	d0f5      	beq.n	800e342 <__any_on+0x2a>
 800e356:	2001      	movs	r0, #1
 800e358:	e7f6      	b.n	800e348 <__any_on+0x30>

0800e35a <_calloc_r>:
 800e35a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e35c:	fba1 2402 	umull	r2, r4, r1, r2
 800e360:	b94c      	cbnz	r4, 800e376 <_calloc_r+0x1c>
 800e362:	4611      	mov	r1, r2
 800e364:	9201      	str	r2, [sp, #4]
 800e366:	f7fc fa3b 	bl	800a7e0 <_malloc_r>
 800e36a:	9a01      	ldr	r2, [sp, #4]
 800e36c:	4605      	mov	r5, r0
 800e36e:	b930      	cbnz	r0, 800e37e <_calloc_r+0x24>
 800e370:	4628      	mov	r0, r5
 800e372:	b003      	add	sp, #12
 800e374:	bd30      	pop	{r4, r5, pc}
 800e376:	220c      	movs	r2, #12
 800e378:	6002      	str	r2, [r0, #0]
 800e37a:	2500      	movs	r5, #0
 800e37c:	e7f8      	b.n	800e370 <_calloc_r+0x16>
 800e37e:	4621      	mov	r1, r4
 800e380:	f7fc f9ba 	bl	800a6f8 <memset>
 800e384:	e7f4      	b.n	800e370 <_calloc_r+0x16>

0800e386 <__ssputs_r>:
 800e386:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e38a:	688e      	ldr	r6, [r1, #8]
 800e38c:	429e      	cmp	r6, r3
 800e38e:	4682      	mov	sl, r0
 800e390:	460c      	mov	r4, r1
 800e392:	4690      	mov	r8, r2
 800e394:	461f      	mov	r7, r3
 800e396:	d838      	bhi.n	800e40a <__ssputs_r+0x84>
 800e398:	898a      	ldrh	r2, [r1, #12]
 800e39a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e39e:	d032      	beq.n	800e406 <__ssputs_r+0x80>
 800e3a0:	6825      	ldr	r5, [r4, #0]
 800e3a2:	6909      	ldr	r1, [r1, #16]
 800e3a4:	eba5 0901 	sub.w	r9, r5, r1
 800e3a8:	6965      	ldr	r5, [r4, #20]
 800e3aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e3ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	444b      	add	r3, r9
 800e3b6:	106d      	asrs	r5, r5, #1
 800e3b8:	429d      	cmp	r5, r3
 800e3ba:	bf38      	it	cc
 800e3bc:	461d      	movcc	r5, r3
 800e3be:	0553      	lsls	r3, r2, #21
 800e3c0:	d531      	bpl.n	800e426 <__ssputs_r+0xa0>
 800e3c2:	4629      	mov	r1, r5
 800e3c4:	f7fc fa0c 	bl	800a7e0 <_malloc_r>
 800e3c8:	4606      	mov	r6, r0
 800e3ca:	b950      	cbnz	r0, 800e3e2 <__ssputs_r+0x5c>
 800e3cc:	230c      	movs	r3, #12
 800e3ce:	f8ca 3000 	str.w	r3, [sl]
 800e3d2:	89a3      	ldrh	r3, [r4, #12]
 800e3d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3d8:	81a3      	strh	r3, [r4, #12]
 800e3da:	f04f 30ff 	mov.w	r0, #4294967295
 800e3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3e2:	6921      	ldr	r1, [r4, #16]
 800e3e4:	464a      	mov	r2, r9
 800e3e6:	f7ff fadd 	bl	800d9a4 <memcpy>
 800e3ea:	89a3      	ldrh	r3, [r4, #12]
 800e3ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e3f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3f4:	81a3      	strh	r3, [r4, #12]
 800e3f6:	6126      	str	r6, [r4, #16]
 800e3f8:	6165      	str	r5, [r4, #20]
 800e3fa:	444e      	add	r6, r9
 800e3fc:	eba5 0509 	sub.w	r5, r5, r9
 800e400:	6026      	str	r6, [r4, #0]
 800e402:	60a5      	str	r5, [r4, #8]
 800e404:	463e      	mov	r6, r7
 800e406:	42be      	cmp	r6, r7
 800e408:	d900      	bls.n	800e40c <__ssputs_r+0x86>
 800e40a:	463e      	mov	r6, r7
 800e40c:	6820      	ldr	r0, [r4, #0]
 800e40e:	4632      	mov	r2, r6
 800e410:	4641      	mov	r1, r8
 800e412:	f000 fd7f 	bl	800ef14 <memmove>
 800e416:	68a3      	ldr	r3, [r4, #8]
 800e418:	1b9b      	subs	r3, r3, r6
 800e41a:	60a3      	str	r3, [r4, #8]
 800e41c:	6823      	ldr	r3, [r4, #0]
 800e41e:	4433      	add	r3, r6
 800e420:	6023      	str	r3, [r4, #0]
 800e422:	2000      	movs	r0, #0
 800e424:	e7db      	b.n	800e3de <__ssputs_r+0x58>
 800e426:	462a      	mov	r2, r5
 800e428:	f000 fd8e 	bl	800ef48 <_realloc_r>
 800e42c:	4606      	mov	r6, r0
 800e42e:	2800      	cmp	r0, #0
 800e430:	d1e1      	bne.n	800e3f6 <__ssputs_r+0x70>
 800e432:	6921      	ldr	r1, [r4, #16]
 800e434:	4650      	mov	r0, sl
 800e436:	f7fc f967 	bl	800a708 <_free_r>
 800e43a:	e7c7      	b.n	800e3cc <__ssputs_r+0x46>

0800e43c <_svfiprintf_r>:
 800e43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e440:	4698      	mov	r8, r3
 800e442:	898b      	ldrh	r3, [r1, #12]
 800e444:	061b      	lsls	r3, r3, #24
 800e446:	b09d      	sub	sp, #116	; 0x74
 800e448:	4607      	mov	r7, r0
 800e44a:	460d      	mov	r5, r1
 800e44c:	4614      	mov	r4, r2
 800e44e:	d50e      	bpl.n	800e46e <_svfiprintf_r+0x32>
 800e450:	690b      	ldr	r3, [r1, #16]
 800e452:	b963      	cbnz	r3, 800e46e <_svfiprintf_r+0x32>
 800e454:	2140      	movs	r1, #64	; 0x40
 800e456:	f7fc f9c3 	bl	800a7e0 <_malloc_r>
 800e45a:	6028      	str	r0, [r5, #0]
 800e45c:	6128      	str	r0, [r5, #16]
 800e45e:	b920      	cbnz	r0, 800e46a <_svfiprintf_r+0x2e>
 800e460:	230c      	movs	r3, #12
 800e462:	603b      	str	r3, [r7, #0]
 800e464:	f04f 30ff 	mov.w	r0, #4294967295
 800e468:	e0d1      	b.n	800e60e <_svfiprintf_r+0x1d2>
 800e46a:	2340      	movs	r3, #64	; 0x40
 800e46c:	616b      	str	r3, [r5, #20]
 800e46e:	2300      	movs	r3, #0
 800e470:	9309      	str	r3, [sp, #36]	; 0x24
 800e472:	2320      	movs	r3, #32
 800e474:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e478:	f8cd 800c 	str.w	r8, [sp, #12]
 800e47c:	2330      	movs	r3, #48	; 0x30
 800e47e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e628 <_svfiprintf_r+0x1ec>
 800e482:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e486:	f04f 0901 	mov.w	r9, #1
 800e48a:	4623      	mov	r3, r4
 800e48c:	469a      	mov	sl, r3
 800e48e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e492:	b10a      	cbz	r2, 800e498 <_svfiprintf_r+0x5c>
 800e494:	2a25      	cmp	r2, #37	; 0x25
 800e496:	d1f9      	bne.n	800e48c <_svfiprintf_r+0x50>
 800e498:	ebba 0b04 	subs.w	fp, sl, r4
 800e49c:	d00b      	beq.n	800e4b6 <_svfiprintf_r+0x7a>
 800e49e:	465b      	mov	r3, fp
 800e4a0:	4622      	mov	r2, r4
 800e4a2:	4629      	mov	r1, r5
 800e4a4:	4638      	mov	r0, r7
 800e4a6:	f7ff ff6e 	bl	800e386 <__ssputs_r>
 800e4aa:	3001      	adds	r0, #1
 800e4ac:	f000 80aa 	beq.w	800e604 <_svfiprintf_r+0x1c8>
 800e4b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4b2:	445a      	add	r2, fp
 800e4b4:	9209      	str	r2, [sp, #36]	; 0x24
 800e4b6:	f89a 3000 	ldrb.w	r3, [sl]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	f000 80a2 	beq.w	800e604 <_svfiprintf_r+0x1c8>
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4ca:	f10a 0a01 	add.w	sl, sl, #1
 800e4ce:	9304      	str	r3, [sp, #16]
 800e4d0:	9307      	str	r3, [sp, #28]
 800e4d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e4d6:	931a      	str	r3, [sp, #104]	; 0x68
 800e4d8:	4654      	mov	r4, sl
 800e4da:	2205      	movs	r2, #5
 800e4dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4e0:	4851      	ldr	r0, [pc, #324]	; (800e628 <_svfiprintf_r+0x1ec>)
 800e4e2:	f7f1 fe7d 	bl	80001e0 <memchr>
 800e4e6:	9a04      	ldr	r2, [sp, #16]
 800e4e8:	b9d8      	cbnz	r0, 800e522 <_svfiprintf_r+0xe6>
 800e4ea:	06d0      	lsls	r0, r2, #27
 800e4ec:	bf44      	itt	mi
 800e4ee:	2320      	movmi	r3, #32
 800e4f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4f4:	0711      	lsls	r1, r2, #28
 800e4f6:	bf44      	itt	mi
 800e4f8:	232b      	movmi	r3, #43	; 0x2b
 800e4fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4fe:	f89a 3000 	ldrb.w	r3, [sl]
 800e502:	2b2a      	cmp	r3, #42	; 0x2a
 800e504:	d015      	beq.n	800e532 <_svfiprintf_r+0xf6>
 800e506:	9a07      	ldr	r2, [sp, #28]
 800e508:	4654      	mov	r4, sl
 800e50a:	2000      	movs	r0, #0
 800e50c:	f04f 0c0a 	mov.w	ip, #10
 800e510:	4621      	mov	r1, r4
 800e512:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e516:	3b30      	subs	r3, #48	; 0x30
 800e518:	2b09      	cmp	r3, #9
 800e51a:	d94e      	bls.n	800e5ba <_svfiprintf_r+0x17e>
 800e51c:	b1b0      	cbz	r0, 800e54c <_svfiprintf_r+0x110>
 800e51e:	9207      	str	r2, [sp, #28]
 800e520:	e014      	b.n	800e54c <_svfiprintf_r+0x110>
 800e522:	eba0 0308 	sub.w	r3, r0, r8
 800e526:	fa09 f303 	lsl.w	r3, r9, r3
 800e52a:	4313      	orrs	r3, r2
 800e52c:	9304      	str	r3, [sp, #16]
 800e52e:	46a2      	mov	sl, r4
 800e530:	e7d2      	b.n	800e4d8 <_svfiprintf_r+0x9c>
 800e532:	9b03      	ldr	r3, [sp, #12]
 800e534:	1d19      	adds	r1, r3, #4
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	9103      	str	r1, [sp, #12]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	bfbb      	ittet	lt
 800e53e:	425b      	neglt	r3, r3
 800e540:	f042 0202 	orrlt.w	r2, r2, #2
 800e544:	9307      	strge	r3, [sp, #28]
 800e546:	9307      	strlt	r3, [sp, #28]
 800e548:	bfb8      	it	lt
 800e54a:	9204      	strlt	r2, [sp, #16]
 800e54c:	7823      	ldrb	r3, [r4, #0]
 800e54e:	2b2e      	cmp	r3, #46	; 0x2e
 800e550:	d10c      	bne.n	800e56c <_svfiprintf_r+0x130>
 800e552:	7863      	ldrb	r3, [r4, #1]
 800e554:	2b2a      	cmp	r3, #42	; 0x2a
 800e556:	d135      	bne.n	800e5c4 <_svfiprintf_r+0x188>
 800e558:	9b03      	ldr	r3, [sp, #12]
 800e55a:	1d1a      	adds	r2, r3, #4
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	9203      	str	r2, [sp, #12]
 800e560:	2b00      	cmp	r3, #0
 800e562:	bfb8      	it	lt
 800e564:	f04f 33ff 	movlt.w	r3, #4294967295
 800e568:	3402      	adds	r4, #2
 800e56a:	9305      	str	r3, [sp, #20]
 800e56c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e638 <_svfiprintf_r+0x1fc>
 800e570:	7821      	ldrb	r1, [r4, #0]
 800e572:	2203      	movs	r2, #3
 800e574:	4650      	mov	r0, sl
 800e576:	f7f1 fe33 	bl	80001e0 <memchr>
 800e57a:	b140      	cbz	r0, 800e58e <_svfiprintf_r+0x152>
 800e57c:	2340      	movs	r3, #64	; 0x40
 800e57e:	eba0 000a 	sub.w	r0, r0, sl
 800e582:	fa03 f000 	lsl.w	r0, r3, r0
 800e586:	9b04      	ldr	r3, [sp, #16]
 800e588:	4303      	orrs	r3, r0
 800e58a:	3401      	adds	r4, #1
 800e58c:	9304      	str	r3, [sp, #16]
 800e58e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e592:	4826      	ldr	r0, [pc, #152]	; (800e62c <_svfiprintf_r+0x1f0>)
 800e594:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e598:	2206      	movs	r2, #6
 800e59a:	f7f1 fe21 	bl	80001e0 <memchr>
 800e59e:	2800      	cmp	r0, #0
 800e5a0:	d038      	beq.n	800e614 <_svfiprintf_r+0x1d8>
 800e5a2:	4b23      	ldr	r3, [pc, #140]	; (800e630 <_svfiprintf_r+0x1f4>)
 800e5a4:	bb1b      	cbnz	r3, 800e5ee <_svfiprintf_r+0x1b2>
 800e5a6:	9b03      	ldr	r3, [sp, #12]
 800e5a8:	3307      	adds	r3, #7
 800e5aa:	f023 0307 	bic.w	r3, r3, #7
 800e5ae:	3308      	adds	r3, #8
 800e5b0:	9303      	str	r3, [sp, #12]
 800e5b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5b4:	4433      	add	r3, r6
 800e5b6:	9309      	str	r3, [sp, #36]	; 0x24
 800e5b8:	e767      	b.n	800e48a <_svfiprintf_r+0x4e>
 800e5ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5be:	460c      	mov	r4, r1
 800e5c0:	2001      	movs	r0, #1
 800e5c2:	e7a5      	b.n	800e510 <_svfiprintf_r+0xd4>
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	3401      	adds	r4, #1
 800e5c8:	9305      	str	r3, [sp, #20]
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	f04f 0c0a 	mov.w	ip, #10
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5d6:	3a30      	subs	r2, #48	; 0x30
 800e5d8:	2a09      	cmp	r2, #9
 800e5da:	d903      	bls.n	800e5e4 <_svfiprintf_r+0x1a8>
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d0c5      	beq.n	800e56c <_svfiprintf_r+0x130>
 800e5e0:	9105      	str	r1, [sp, #20]
 800e5e2:	e7c3      	b.n	800e56c <_svfiprintf_r+0x130>
 800e5e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5e8:	4604      	mov	r4, r0
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	e7f0      	b.n	800e5d0 <_svfiprintf_r+0x194>
 800e5ee:	ab03      	add	r3, sp, #12
 800e5f0:	9300      	str	r3, [sp, #0]
 800e5f2:	462a      	mov	r2, r5
 800e5f4:	4b0f      	ldr	r3, [pc, #60]	; (800e634 <_svfiprintf_r+0x1f8>)
 800e5f6:	a904      	add	r1, sp, #16
 800e5f8:	4638      	mov	r0, r7
 800e5fa:	f7fc fa05 	bl	800aa08 <_printf_float>
 800e5fe:	1c42      	adds	r2, r0, #1
 800e600:	4606      	mov	r6, r0
 800e602:	d1d6      	bne.n	800e5b2 <_svfiprintf_r+0x176>
 800e604:	89ab      	ldrh	r3, [r5, #12]
 800e606:	065b      	lsls	r3, r3, #25
 800e608:	f53f af2c 	bmi.w	800e464 <_svfiprintf_r+0x28>
 800e60c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e60e:	b01d      	add	sp, #116	; 0x74
 800e610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e614:	ab03      	add	r3, sp, #12
 800e616:	9300      	str	r3, [sp, #0]
 800e618:	462a      	mov	r2, r5
 800e61a:	4b06      	ldr	r3, [pc, #24]	; (800e634 <_svfiprintf_r+0x1f8>)
 800e61c:	a904      	add	r1, sp, #16
 800e61e:	4638      	mov	r0, r7
 800e620:	f7fc fc96 	bl	800af50 <_printf_i>
 800e624:	e7eb      	b.n	800e5fe <_svfiprintf_r+0x1c2>
 800e626:	bf00      	nop
 800e628:	0800fafc 	.word	0x0800fafc
 800e62c:	0800fb06 	.word	0x0800fb06
 800e630:	0800aa09 	.word	0x0800aa09
 800e634:	0800e387 	.word	0x0800e387
 800e638:	0800fb02 	.word	0x0800fb02

0800e63c <__sfputc_r>:
 800e63c:	6893      	ldr	r3, [r2, #8]
 800e63e:	3b01      	subs	r3, #1
 800e640:	2b00      	cmp	r3, #0
 800e642:	b410      	push	{r4}
 800e644:	6093      	str	r3, [r2, #8]
 800e646:	da08      	bge.n	800e65a <__sfputc_r+0x1e>
 800e648:	6994      	ldr	r4, [r2, #24]
 800e64a:	42a3      	cmp	r3, r4
 800e64c:	db01      	blt.n	800e652 <__sfputc_r+0x16>
 800e64e:	290a      	cmp	r1, #10
 800e650:	d103      	bne.n	800e65a <__sfputc_r+0x1e>
 800e652:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e656:	f000 b967 	b.w	800e928 <__swbuf_r>
 800e65a:	6813      	ldr	r3, [r2, #0]
 800e65c:	1c58      	adds	r0, r3, #1
 800e65e:	6010      	str	r0, [r2, #0]
 800e660:	7019      	strb	r1, [r3, #0]
 800e662:	4608      	mov	r0, r1
 800e664:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e668:	4770      	bx	lr

0800e66a <__sfputs_r>:
 800e66a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e66c:	4606      	mov	r6, r0
 800e66e:	460f      	mov	r7, r1
 800e670:	4614      	mov	r4, r2
 800e672:	18d5      	adds	r5, r2, r3
 800e674:	42ac      	cmp	r4, r5
 800e676:	d101      	bne.n	800e67c <__sfputs_r+0x12>
 800e678:	2000      	movs	r0, #0
 800e67a:	e007      	b.n	800e68c <__sfputs_r+0x22>
 800e67c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e680:	463a      	mov	r2, r7
 800e682:	4630      	mov	r0, r6
 800e684:	f7ff ffda 	bl	800e63c <__sfputc_r>
 800e688:	1c43      	adds	r3, r0, #1
 800e68a:	d1f3      	bne.n	800e674 <__sfputs_r+0xa>
 800e68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e690 <_vfiprintf_r>:
 800e690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e694:	460d      	mov	r5, r1
 800e696:	b09d      	sub	sp, #116	; 0x74
 800e698:	4614      	mov	r4, r2
 800e69a:	4698      	mov	r8, r3
 800e69c:	4606      	mov	r6, r0
 800e69e:	b118      	cbz	r0, 800e6a8 <_vfiprintf_r+0x18>
 800e6a0:	6983      	ldr	r3, [r0, #24]
 800e6a2:	b90b      	cbnz	r3, 800e6a8 <_vfiprintf_r+0x18>
 800e6a4:	f000 fb30 	bl	800ed08 <__sinit>
 800e6a8:	4b89      	ldr	r3, [pc, #548]	; (800e8d0 <_vfiprintf_r+0x240>)
 800e6aa:	429d      	cmp	r5, r3
 800e6ac:	d11b      	bne.n	800e6e6 <_vfiprintf_r+0x56>
 800e6ae:	6875      	ldr	r5, [r6, #4]
 800e6b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6b2:	07d9      	lsls	r1, r3, #31
 800e6b4:	d405      	bmi.n	800e6c2 <_vfiprintf_r+0x32>
 800e6b6:	89ab      	ldrh	r3, [r5, #12]
 800e6b8:	059a      	lsls	r2, r3, #22
 800e6ba:	d402      	bmi.n	800e6c2 <_vfiprintf_r+0x32>
 800e6bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6be:	f000 fbc1 	bl	800ee44 <__retarget_lock_acquire_recursive>
 800e6c2:	89ab      	ldrh	r3, [r5, #12]
 800e6c4:	071b      	lsls	r3, r3, #28
 800e6c6:	d501      	bpl.n	800e6cc <_vfiprintf_r+0x3c>
 800e6c8:	692b      	ldr	r3, [r5, #16]
 800e6ca:	b9eb      	cbnz	r3, 800e708 <_vfiprintf_r+0x78>
 800e6cc:	4629      	mov	r1, r5
 800e6ce:	4630      	mov	r0, r6
 800e6d0:	f000 f98a 	bl	800e9e8 <__swsetup_r>
 800e6d4:	b1c0      	cbz	r0, 800e708 <_vfiprintf_r+0x78>
 800e6d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6d8:	07dc      	lsls	r4, r3, #31
 800e6da:	d50e      	bpl.n	800e6fa <_vfiprintf_r+0x6a>
 800e6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e6e0:	b01d      	add	sp, #116	; 0x74
 800e6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6e6:	4b7b      	ldr	r3, [pc, #492]	; (800e8d4 <_vfiprintf_r+0x244>)
 800e6e8:	429d      	cmp	r5, r3
 800e6ea:	d101      	bne.n	800e6f0 <_vfiprintf_r+0x60>
 800e6ec:	68b5      	ldr	r5, [r6, #8]
 800e6ee:	e7df      	b.n	800e6b0 <_vfiprintf_r+0x20>
 800e6f0:	4b79      	ldr	r3, [pc, #484]	; (800e8d8 <_vfiprintf_r+0x248>)
 800e6f2:	429d      	cmp	r5, r3
 800e6f4:	bf08      	it	eq
 800e6f6:	68f5      	ldreq	r5, [r6, #12]
 800e6f8:	e7da      	b.n	800e6b0 <_vfiprintf_r+0x20>
 800e6fa:	89ab      	ldrh	r3, [r5, #12]
 800e6fc:	0598      	lsls	r0, r3, #22
 800e6fe:	d4ed      	bmi.n	800e6dc <_vfiprintf_r+0x4c>
 800e700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e702:	f000 fba0 	bl	800ee46 <__retarget_lock_release_recursive>
 800e706:	e7e9      	b.n	800e6dc <_vfiprintf_r+0x4c>
 800e708:	2300      	movs	r3, #0
 800e70a:	9309      	str	r3, [sp, #36]	; 0x24
 800e70c:	2320      	movs	r3, #32
 800e70e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e712:	f8cd 800c 	str.w	r8, [sp, #12]
 800e716:	2330      	movs	r3, #48	; 0x30
 800e718:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e8dc <_vfiprintf_r+0x24c>
 800e71c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e720:	f04f 0901 	mov.w	r9, #1
 800e724:	4623      	mov	r3, r4
 800e726:	469a      	mov	sl, r3
 800e728:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e72c:	b10a      	cbz	r2, 800e732 <_vfiprintf_r+0xa2>
 800e72e:	2a25      	cmp	r2, #37	; 0x25
 800e730:	d1f9      	bne.n	800e726 <_vfiprintf_r+0x96>
 800e732:	ebba 0b04 	subs.w	fp, sl, r4
 800e736:	d00b      	beq.n	800e750 <_vfiprintf_r+0xc0>
 800e738:	465b      	mov	r3, fp
 800e73a:	4622      	mov	r2, r4
 800e73c:	4629      	mov	r1, r5
 800e73e:	4630      	mov	r0, r6
 800e740:	f7ff ff93 	bl	800e66a <__sfputs_r>
 800e744:	3001      	adds	r0, #1
 800e746:	f000 80aa 	beq.w	800e89e <_vfiprintf_r+0x20e>
 800e74a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e74c:	445a      	add	r2, fp
 800e74e:	9209      	str	r2, [sp, #36]	; 0x24
 800e750:	f89a 3000 	ldrb.w	r3, [sl]
 800e754:	2b00      	cmp	r3, #0
 800e756:	f000 80a2 	beq.w	800e89e <_vfiprintf_r+0x20e>
 800e75a:	2300      	movs	r3, #0
 800e75c:	f04f 32ff 	mov.w	r2, #4294967295
 800e760:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e764:	f10a 0a01 	add.w	sl, sl, #1
 800e768:	9304      	str	r3, [sp, #16]
 800e76a:	9307      	str	r3, [sp, #28]
 800e76c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e770:	931a      	str	r3, [sp, #104]	; 0x68
 800e772:	4654      	mov	r4, sl
 800e774:	2205      	movs	r2, #5
 800e776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e77a:	4858      	ldr	r0, [pc, #352]	; (800e8dc <_vfiprintf_r+0x24c>)
 800e77c:	f7f1 fd30 	bl	80001e0 <memchr>
 800e780:	9a04      	ldr	r2, [sp, #16]
 800e782:	b9d8      	cbnz	r0, 800e7bc <_vfiprintf_r+0x12c>
 800e784:	06d1      	lsls	r1, r2, #27
 800e786:	bf44      	itt	mi
 800e788:	2320      	movmi	r3, #32
 800e78a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e78e:	0713      	lsls	r3, r2, #28
 800e790:	bf44      	itt	mi
 800e792:	232b      	movmi	r3, #43	; 0x2b
 800e794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e798:	f89a 3000 	ldrb.w	r3, [sl]
 800e79c:	2b2a      	cmp	r3, #42	; 0x2a
 800e79e:	d015      	beq.n	800e7cc <_vfiprintf_r+0x13c>
 800e7a0:	9a07      	ldr	r2, [sp, #28]
 800e7a2:	4654      	mov	r4, sl
 800e7a4:	2000      	movs	r0, #0
 800e7a6:	f04f 0c0a 	mov.w	ip, #10
 800e7aa:	4621      	mov	r1, r4
 800e7ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7b0:	3b30      	subs	r3, #48	; 0x30
 800e7b2:	2b09      	cmp	r3, #9
 800e7b4:	d94e      	bls.n	800e854 <_vfiprintf_r+0x1c4>
 800e7b6:	b1b0      	cbz	r0, 800e7e6 <_vfiprintf_r+0x156>
 800e7b8:	9207      	str	r2, [sp, #28]
 800e7ba:	e014      	b.n	800e7e6 <_vfiprintf_r+0x156>
 800e7bc:	eba0 0308 	sub.w	r3, r0, r8
 800e7c0:	fa09 f303 	lsl.w	r3, r9, r3
 800e7c4:	4313      	orrs	r3, r2
 800e7c6:	9304      	str	r3, [sp, #16]
 800e7c8:	46a2      	mov	sl, r4
 800e7ca:	e7d2      	b.n	800e772 <_vfiprintf_r+0xe2>
 800e7cc:	9b03      	ldr	r3, [sp, #12]
 800e7ce:	1d19      	adds	r1, r3, #4
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	9103      	str	r1, [sp, #12]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	bfbb      	ittet	lt
 800e7d8:	425b      	neglt	r3, r3
 800e7da:	f042 0202 	orrlt.w	r2, r2, #2
 800e7de:	9307      	strge	r3, [sp, #28]
 800e7e0:	9307      	strlt	r3, [sp, #28]
 800e7e2:	bfb8      	it	lt
 800e7e4:	9204      	strlt	r2, [sp, #16]
 800e7e6:	7823      	ldrb	r3, [r4, #0]
 800e7e8:	2b2e      	cmp	r3, #46	; 0x2e
 800e7ea:	d10c      	bne.n	800e806 <_vfiprintf_r+0x176>
 800e7ec:	7863      	ldrb	r3, [r4, #1]
 800e7ee:	2b2a      	cmp	r3, #42	; 0x2a
 800e7f0:	d135      	bne.n	800e85e <_vfiprintf_r+0x1ce>
 800e7f2:	9b03      	ldr	r3, [sp, #12]
 800e7f4:	1d1a      	adds	r2, r3, #4
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	9203      	str	r2, [sp, #12]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	bfb8      	it	lt
 800e7fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800e802:	3402      	adds	r4, #2
 800e804:	9305      	str	r3, [sp, #20]
 800e806:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e8ec <_vfiprintf_r+0x25c>
 800e80a:	7821      	ldrb	r1, [r4, #0]
 800e80c:	2203      	movs	r2, #3
 800e80e:	4650      	mov	r0, sl
 800e810:	f7f1 fce6 	bl	80001e0 <memchr>
 800e814:	b140      	cbz	r0, 800e828 <_vfiprintf_r+0x198>
 800e816:	2340      	movs	r3, #64	; 0x40
 800e818:	eba0 000a 	sub.w	r0, r0, sl
 800e81c:	fa03 f000 	lsl.w	r0, r3, r0
 800e820:	9b04      	ldr	r3, [sp, #16]
 800e822:	4303      	orrs	r3, r0
 800e824:	3401      	adds	r4, #1
 800e826:	9304      	str	r3, [sp, #16]
 800e828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e82c:	482c      	ldr	r0, [pc, #176]	; (800e8e0 <_vfiprintf_r+0x250>)
 800e82e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e832:	2206      	movs	r2, #6
 800e834:	f7f1 fcd4 	bl	80001e0 <memchr>
 800e838:	2800      	cmp	r0, #0
 800e83a:	d03f      	beq.n	800e8bc <_vfiprintf_r+0x22c>
 800e83c:	4b29      	ldr	r3, [pc, #164]	; (800e8e4 <_vfiprintf_r+0x254>)
 800e83e:	bb1b      	cbnz	r3, 800e888 <_vfiprintf_r+0x1f8>
 800e840:	9b03      	ldr	r3, [sp, #12]
 800e842:	3307      	adds	r3, #7
 800e844:	f023 0307 	bic.w	r3, r3, #7
 800e848:	3308      	adds	r3, #8
 800e84a:	9303      	str	r3, [sp, #12]
 800e84c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e84e:	443b      	add	r3, r7
 800e850:	9309      	str	r3, [sp, #36]	; 0x24
 800e852:	e767      	b.n	800e724 <_vfiprintf_r+0x94>
 800e854:	fb0c 3202 	mla	r2, ip, r2, r3
 800e858:	460c      	mov	r4, r1
 800e85a:	2001      	movs	r0, #1
 800e85c:	e7a5      	b.n	800e7aa <_vfiprintf_r+0x11a>
 800e85e:	2300      	movs	r3, #0
 800e860:	3401      	adds	r4, #1
 800e862:	9305      	str	r3, [sp, #20]
 800e864:	4619      	mov	r1, r3
 800e866:	f04f 0c0a 	mov.w	ip, #10
 800e86a:	4620      	mov	r0, r4
 800e86c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e870:	3a30      	subs	r2, #48	; 0x30
 800e872:	2a09      	cmp	r2, #9
 800e874:	d903      	bls.n	800e87e <_vfiprintf_r+0x1ee>
 800e876:	2b00      	cmp	r3, #0
 800e878:	d0c5      	beq.n	800e806 <_vfiprintf_r+0x176>
 800e87a:	9105      	str	r1, [sp, #20]
 800e87c:	e7c3      	b.n	800e806 <_vfiprintf_r+0x176>
 800e87e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e882:	4604      	mov	r4, r0
 800e884:	2301      	movs	r3, #1
 800e886:	e7f0      	b.n	800e86a <_vfiprintf_r+0x1da>
 800e888:	ab03      	add	r3, sp, #12
 800e88a:	9300      	str	r3, [sp, #0]
 800e88c:	462a      	mov	r2, r5
 800e88e:	4b16      	ldr	r3, [pc, #88]	; (800e8e8 <_vfiprintf_r+0x258>)
 800e890:	a904      	add	r1, sp, #16
 800e892:	4630      	mov	r0, r6
 800e894:	f7fc f8b8 	bl	800aa08 <_printf_float>
 800e898:	4607      	mov	r7, r0
 800e89a:	1c78      	adds	r0, r7, #1
 800e89c:	d1d6      	bne.n	800e84c <_vfiprintf_r+0x1bc>
 800e89e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8a0:	07d9      	lsls	r1, r3, #31
 800e8a2:	d405      	bmi.n	800e8b0 <_vfiprintf_r+0x220>
 800e8a4:	89ab      	ldrh	r3, [r5, #12]
 800e8a6:	059a      	lsls	r2, r3, #22
 800e8a8:	d402      	bmi.n	800e8b0 <_vfiprintf_r+0x220>
 800e8aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8ac:	f000 facb 	bl	800ee46 <__retarget_lock_release_recursive>
 800e8b0:	89ab      	ldrh	r3, [r5, #12]
 800e8b2:	065b      	lsls	r3, r3, #25
 800e8b4:	f53f af12 	bmi.w	800e6dc <_vfiprintf_r+0x4c>
 800e8b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e8ba:	e711      	b.n	800e6e0 <_vfiprintf_r+0x50>
 800e8bc:	ab03      	add	r3, sp, #12
 800e8be:	9300      	str	r3, [sp, #0]
 800e8c0:	462a      	mov	r2, r5
 800e8c2:	4b09      	ldr	r3, [pc, #36]	; (800e8e8 <_vfiprintf_r+0x258>)
 800e8c4:	a904      	add	r1, sp, #16
 800e8c6:	4630      	mov	r0, r6
 800e8c8:	f7fc fb42 	bl	800af50 <_printf_i>
 800e8cc:	e7e4      	b.n	800e898 <_vfiprintf_r+0x208>
 800e8ce:	bf00      	nop
 800e8d0:	0800fb30 	.word	0x0800fb30
 800e8d4:	0800fb50 	.word	0x0800fb50
 800e8d8:	0800fb10 	.word	0x0800fb10
 800e8dc:	0800fafc 	.word	0x0800fafc
 800e8e0:	0800fb06 	.word	0x0800fb06
 800e8e4:	0800aa09 	.word	0x0800aa09
 800e8e8:	0800e66b 	.word	0x0800e66b
 800e8ec:	0800fb02 	.word	0x0800fb02

0800e8f0 <nan>:
 800e8f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e8f8 <nan+0x8>
 800e8f4:	4770      	bx	lr
 800e8f6:	bf00      	nop
 800e8f8:	00000000 	.word	0x00000000
 800e8fc:	7ff80000 	.word	0x7ff80000

0800e900 <strncmp>:
 800e900:	b510      	push	{r4, lr}
 800e902:	b17a      	cbz	r2, 800e924 <strncmp+0x24>
 800e904:	4603      	mov	r3, r0
 800e906:	3901      	subs	r1, #1
 800e908:	1884      	adds	r4, r0, r2
 800e90a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e90e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e912:	4290      	cmp	r0, r2
 800e914:	d101      	bne.n	800e91a <strncmp+0x1a>
 800e916:	42a3      	cmp	r3, r4
 800e918:	d101      	bne.n	800e91e <strncmp+0x1e>
 800e91a:	1a80      	subs	r0, r0, r2
 800e91c:	bd10      	pop	{r4, pc}
 800e91e:	2800      	cmp	r0, #0
 800e920:	d1f3      	bne.n	800e90a <strncmp+0xa>
 800e922:	e7fa      	b.n	800e91a <strncmp+0x1a>
 800e924:	4610      	mov	r0, r2
 800e926:	e7f9      	b.n	800e91c <strncmp+0x1c>

0800e928 <__swbuf_r>:
 800e928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e92a:	460e      	mov	r6, r1
 800e92c:	4614      	mov	r4, r2
 800e92e:	4605      	mov	r5, r0
 800e930:	b118      	cbz	r0, 800e93a <__swbuf_r+0x12>
 800e932:	6983      	ldr	r3, [r0, #24]
 800e934:	b90b      	cbnz	r3, 800e93a <__swbuf_r+0x12>
 800e936:	f000 f9e7 	bl	800ed08 <__sinit>
 800e93a:	4b21      	ldr	r3, [pc, #132]	; (800e9c0 <__swbuf_r+0x98>)
 800e93c:	429c      	cmp	r4, r3
 800e93e:	d12b      	bne.n	800e998 <__swbuf_r+0x70>
 800e940:	686c      	ldr	r4, [r5, #4]
 800e942:	69a3      	ldr	r3, [r4, #24]
 800e944:	60a3      	str	r3, [r4, #8]
 800e946:	89a3      	ldrh	r3, [r4, #12]
 800e948:	071a      	lsls	r2, r3, #28
 800e94a:	d52f      	bpl.n	800e9ac <__swbuf_r+0x84>
 800e94c:	6923      	ldr	r3, [r4, #16]
 800e94e:	b36b      	cbz	r3, 800e9ac <__swbuf_r+0x84>
 800e950:	6923      	ldr	r3, [r4, #16]
 800e952:	6820      	ldr	r0, [r4, #0]
 800e954:	1ac0      	subs	r0, r0, r3
 800e956:	6963      	ldr	r3, [r4, #20]
 800e958:	b2f6      	uxtb	r6, r6
 800e95a:	4283      	cmp	r3, r0
 800e95c:	4637      	mov	r7, r6
 800e95e:	dc04      	bgt.n	800e96a <__swbuf_r+0x42>
 800e960:	4621      	mov	r1, r4
 800e962:	4628      	mov	r0, r5
 800e964:	f000 f93c 	bl	800ebe0 <_fflush_r>
 800e968:	bb30      	cbnz	r0, 800e9b8 <__swbuf_r+0x90>
 800e96a:	68a3      	ldr	r3, [r4, #8]
 800e96c:	3b01      	subs	r3, #1
 800e96e:	60a3      	str	r3, [r4, #8]
 800e970:	6823      	ldr	r3, [r4, #0]
 800e972:	1c5a      	adds	r2, r3, #1
 800e974:	6022      	str	r2, [r4, #0]
 800e976:	701e      	strb	r6, [r3, #0]
 800e978:	6963      	ldr	r3, [r4, #20]
 800e97a:	3001      	adds	r0, #1
 800e97c:	4283      	cmp	r3, r0
 800e97e:	d004      	beq.n	800e98a <__swbuf_r+0x62>
 800e980:	89a3      	ldrh	r3, [r4, #12]
 800e982:	07db      	lsls	r3, r3, #31
 800e984:	d506      	bpl.n	800e994 <__swbuf_r+0x6c>
 800e986:	2e0a      	cmp	r6, #10
 800e988:	d104      	bne.n	800e994 <__swbuf_r+0x6c>
 800e98a:	4621      	mov	r1, r4
 800e98c:	4628      	mov	r0, r5
 800e98e:	f000 f927 	bl	800ebe0 <_fflush_r>
 800e992:	b988      	cbnz	r0, 800e9b8 <__swbuf_r+0x90>
 800e994:	4638      	mov	r0, r7
 800e996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e998:	4b0a      	ldr	r3, [pc, #40]	; (800e9c4 <__swbuf_r+0x9c>)
 800e99a:	429c      	cmp	r4, r3
 800e99c:	d101      	bne.n	800e9a2 <__swbuf_r+0x7a>
 800e99e:	68ac      	ldr	r4, [r5, #8]
 800e9a0:	e7cf      	b.n	800e942 <__swbuf_r+0x1a>
 800e9a2:	4b09      	ldr	r3, [pc, #36]	; (800e9c8 <__swbuf_r+0xa0>)
 800e9a4:	429c      	cmp	r4, r3
 800e9a6:	bf08      	it	eq
 800e9a8:	68ec      	ldreq	r4, [r5, #12]
 800e9aa:	e7ca      	b.n	800e942 <__swbuf_r+0x1a>
 800e9ac:	4621      	mov	r1, r4
 800e9ae:	4628      	mov	r0, r5
 800e9b0:	f000 f81a 	bl	800e9e8 <__swsetup_r>
 800e9b4:	2800      	cmp	r0, #0
 800e9b6:	d0cb      	beq.n	800e950 <__swbuf_r+0x28>
 800e9b8:	f04f 37ff 	mov.w	r7, #4294967295
 800e9bc:	e7ea      	b.n	800e994 <__swbuf_r+0x6c>
 800e9be:	bf00      	nop
 800e9c0:	0800fb30 	.word	0x0800fb30
 800e9c4:	0800fb50 	.word	0x0800fb50
 800e9c8:	0800fb10 	.word	0x0800fb10

0800e9cc <__ascii_wctomb>:
 800e9cc:	b149      	cbz	r1, 800e9e2 <__ascii_wctomb+0x16>
 800e9ce:	2aff      	cmp	r2, #255	; 0xff
 800e9d0:	bf85      	ittet	hi
 800e9d2:	238a      	movhi	r3, #138	; 0x8a
 800e9d4:	6003      	strhi	r3, [r0, #0]
 800e9d6:	700a      	strbls	r2, [r1, #0]
 800e9d8:	f04f 30ff 	movhi.w	r0, #4294967295
 800e9dc:	bf98      	it	ls
 800e9de:	2001      	movls	r0, #1
 800e9e0:	4770      	bx	lr
 800e9e2:	4608      	mov	r0, r1
 800e9e4:	4770      	bx	lr
	...

0800e9e8 <__swsetup_r>:
 800e9e8:	4b32      	ldr	r3, [pc, #200]	; (800eab4 <__swsetup_r+0xcc>)
 800e9ea:	b570      	push	{r4, r5, r6, lr}
 800e9ec:	681d      	ldr	r5, [r3, #0]
 800e9ee:	4606      	mov	r6, r0
 800e9f0:	460c      	mov	r4, r1
 800e9f2:	b125      	cbz	r5, 800e9fe <__swsetup_r+0x16>
 800e9f4:	69ab      	ldr	r3, [r5, #24]
 800e9f6:	b913      	cbnz	r3, 800e9fe <__swsetup_r+0x16>
 800e9f8:	4628      	mov	r0, r5
 800e9fa:	f000 f985 	bl	800ed08 <__sinit>
 800e9fe:	4b2e      	ldr	r3, [pc, #184]	; (800eab8 <__swsetup_r+0xd0>)
 800ea00:	429c      	cmp	r4, r3
 800ea02:	d10f      	bne.n	800ea24 <__swsetup_r+0x3c>
 800ea04:	686c      	ldr	r4, [r5, #4]
 800ea06:	89a3      	ldrh	r3, [r4, #12]
 800ea08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea0c:	0719      	lsls	r1, r3, #28
 800ea0e:	d42c      	bmi.n	800ea6a <__swsetup_r+0x82>
 800ea10:	06dd      	lsls	r5, r3, #27
 800ea12:	d411      	bmi.n	800ea38 <__swsetup_r+0x50>
 800ea14:	2309      	movs	r3, #9
 800ea16:	6033      	str	r3, [r6, #0]
 800ea18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ea1c:	81a3      	strh	r3, [r4, #12]
 800ea1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ea22:	e03e      	b.n	800eaa2 <__swsetup_r+0xba>
 800ea24:	4b25      	ldr	r3, [pc, #148]	; (800eabc <__swsetup_r+0xd4>)
 800ea26:	429c      	cmp	r4, r3
 800ea28:	d101      	bne.n	800ea2e <__swsetup_r+0x46>
 800ea2a:	68ac      	ldr	r4, [r5, #8]
 800ea2c:	e7eb      	b.n	800ea06 <__swsetup_r+0x1e>
 800ea2e:	4b24      	ldr	r3, [pc, #144]	; (800eac0 <__swsetup_r+0xd8>)
 800ea30:	429c      	cmp	r4, r3
 800ea32:	bf08      	it	eq
 800ea34:	68ec      	ldreq	r4, [r5, #12]
 800ea36:	e7e6      	b.n	800ea06 <__swsetup_r+0x1e>
 800ea38:	0758      	lsls	r0, r3, #29
 800ea3a:	d512      	bpl.n	800ea62 <__swsetup_r+0x7a>
 800ea3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea3e:	b141      	cbz	r1, 800ea52 <__swsetup_r+0x6a>
 800ea40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea44:	4299      	cmp	r1, r3
 800ea46:	d002      	beq.n	800ea4e <__swsetup_r+0x66>
 800ea48:	4630      	mov	r0, r6
 800ea4a:	f7fb fe5d 	bl	800a708 <_free_r>
 800ea4e:	2300      	movs	r3, #0
 800ea50:	6363      	str	r3, [r4, #52]	; 0x34
 800ea52:	89a3      	ldrh	r3, [r4, #12]
 800ea54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ea58:	81a3      	strh	r3, [r4, #12]
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	6063      	str	r3, [r4, #4]
 800ea5e:	6923      	ldr	r3, [r4, #16]
 800ea60:	6023      	str	r3, [r4, #0]
 800ea62:	89a3      	ldrh	r3, [r4, #12]
 800ea64:	f043 0308 	orr.w	r3, r3, #8
 800ea68:	81a3      	strh	r3, [r4, #12]
 800ea6a:	6923      	ldr	r3, [r4, #16]
 800ea6c:	b94b      	cbnz	r3, 800ea82 <__swsetup_r+0x9a>
 800ea6e:	89a3      	ldrh	r3, [r4, #12]
 800ea70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ea74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea78:	d003      	beq.n	800ea82 <__swsetup_r+0x9a>
 800ea7a:	4621      	mov	r1, r4
 800ea7c:	4630      	mov	r0, r6
 800ea7e:	f000 fa09 	bl	800ee94 <__smakebuf_r>
 800ea82:	89a0      	ldrh	r0, [r4, #12]
 800ea84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea88:	f010 0301 	ands.w	r3, r0, #1
 800ea8c:	d00a      	beq.n	800eaa4 <__swsetup_r+0xbc>
 800ea8e:	2300      	movs	r3, #0
 800ea90:	60a3      	str	r3, [r4, #8]
 800ea92:	6963      	ldr	r3, [r4, #20]
 800ea94:	425b      	negs	r3, r3
 800ea96:	61a3      	str	r3, [r4, #24]
 800ea98:	6923      	ldr	r3, [r4, #16]
 800ea9a:	b943      	cbnz	r3, 800eaae <__swsetup_r+0xc6>
 800ea9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eaa0:	d1ba      	bne.n	800ea18 <__swsetup_r+0x30>
 800eaa2:	bd70      	pop	{r4, r5, r6, pc}
 800eaa4:	0781      	lsls	r1, r0, #30
 800eaa6:	bf58      	it	pl
 800eaa8:	6963      	ldrpl	r3, [r4, #20]
 800eaaa:	60a3      	str	r3, [r4, #8]
 800eaac:	e7f4      	b.n	800ea98 <__swsetup_r+0xb0>
 800eaae:	2000      	movs	r0, #0
 800eab0:	e7f7      	b.n	800eaa2 <__swsetup_r+0xba>
 800eab2:	bf00      	nop
 800eab4:	20000034 	.word	0x20000034
 800eab8:	0800fb30 	.word	0x0800fb30
 800eabc:	0800fb50 	.word	0x0800fb50
 800eac0:	0800fb10 	.word	0x0800fb10

0800eac4 <abort>:
 800eac4:	b508      	push	{r3, lr}
 800eac6:	2006      	movs	r0, #6
 800eac8:	f000 fa96 	bl	800eff8 <raise>
 800eacc:	2001      	movs	r0, #1
 800eace:	f7f4 fc7b 	bl	80033c8 <_exit>
	...

0800ead4 <__sflush_r>:
 800ead4:	898a      	ldrh	r2, [r1, #12]
 800ead6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eada:	4605      	mov	r5, r0
 800eadc:	0710      	lsls	r0, r2, #28
 800eade:	460c      	mov	r4, r1
 800eae0:	d458      	bmi.n	800eb94 <__sflush_r+0xc0>
 800eae2:	684b      	ldr	r3, [r1, #4]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	dc05      	bgt.n	800eaf4 <__sflush_r+0x20>
 800eae8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	dc02      	bgt.n	800eaf4 <__sflush_r+0x20>
 800eaee:	2000      	movs	r0, #0
 800eaf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eaf6:	2e00      	cmp	r6, #0
 800eaf8:	d0f9      	beq.n	800eaee <__sflush_r+0x1a>
 800eafa:	2300      	movs	r3, #0
 800eafc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb00:	682f      	ldr	r7, [r5, #0]
 800eb02:	602b      	str	r3, [r5, #0]
 800eb04:	d032      	beq.n	800eb6c <__sflush_r+0x98>
 800eb06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb08:	89a3      	ldrh	r3, [r4, #12]
 800eb0a:	075a      	lsls	r2, r3, #29
 800eb0c:	d505      	bpl.n	800eb1a <__sflush_r+0x46>
 800eb0e:	6863      	ldr	r3, [r4, #4]
 800eb10:	1ac0      	subs	r0, r0, r3
 800eb12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb14:	b10b      	cbz	r3, 800eb1a <__sflush_r+0x46>
 800eb16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb18:	1ac0      	subs	r0, r0, r3
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb20:	6a21      	ldr	r1, [r4, #32]
 800eb22:	4628      	mov	r0, r5
 800eb24:	47b0      	blx	r6
 800eb26:	1c43      	adds	r3, r0, #1
 800eb28:	89a3      	ldrh	r3, [r4, #12]
 800eb2a:	d106      	bne.n	800eb3a <__sflush_r+0x66>
 800eb2c:	6829      	ldr	r1, [r5, #0]
 800eb2e:	291d      	cmp	r1, #29
 800eb30:	d82c      	bhi.n	800eb8c <__sflush_r+0xb8>
 800eb32:	4a2a      	ldr	r2, [pc, #168]	; (800ebdc <__sflush_r+0x108>)
 800eb34:	40ca      	lsrs	r2, r1
 800eb36:	07d6      	lsls	r6, r2, #31
 800eb38:	d528      	bpl.n	800eb8c <__sflush_r+0xb8>
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	6062      	str	r2, [r4, #4]
 800eb3e:	04d9      	lsls	r1, r3, #19
 800eb40:	6922      	ldr	r2, [r4, #16]
 800eb42:	6022      	str	r2, [r4, #0]
 800eb44:	d504      	bpl.n	800eb50 <__sflush_r+0x7c>
 800eb46:	1c42      	adds	r2, r0, #1
 800eb48:	d101      	bne.n	800eb4e <__sflush_r+0x7a>
 800eb4a:	682b      	ldr	r3, [r5, #0]
 800eb4c:	b903      	cbnz	r3, 800eb50 <__sflush_r+0x7c>
 800eb4e:	6560      	str	r0, [r4, #84]	; 0x54
 800eb50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb52:	602f      	str	r7, [r5, #0]
 800eb54:	2900      	cmp	r1, #0
 800eb56:	d0ca      	beq.n	800eaee <__sflush_r+0x1a>
 800eb58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb5c:	4299      	cmp	r1, r3
 800eb5e:	d002      	beq.n	800eb66 <__sflush_r+0x92>
 800eb60:	4628      	mov	r0, r5
 800eb62:	f7fb fdd1 	bl	800a708 <_free_r>
 800eb66:	2000      	movs	r0, #0
 800eb68:	6360      	str	r0, [r4, #52]	; 0x34
 800eb6a:	e7c1      	b.n	800eaf0 <__sflush_r+0x1c>
 800eb6c:	6a21      	ldr	r1, [r4, #32]
 800eb6e:	2301      	movs	r3, #1
 800eb70:	4628      	mov	r0, r5
 800eb72:	47b0      	blx	r6
 800eb74:	1c41      	adds	r1, r0, #1
 800eb76:	d1c7      	bne.n	800eb08 <__sflush_r+0x34>
 800eb78:	682b      	ldr	r3, [r5, #0]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d0c4      	beq.n	800eb08 <__sflush_r+0x34>
 800eb7e:	2b1d      	cmp	r3, #29
 800eb80:	d001      	beq.n	800eb86 <__sflush_r+0xb2>
 800eb82:	2b16      	cmp	r3, #22
 800eb84:	d101      	bne.n	800eb8a <__sflush_r+0xb6>
 800eb86:	602f      	str	r7, [r5, #0]
 800eb88:	e7b1      	b.n	800eaee <__sflush_r+0x1a>
 800eb8a:	89a3      	ldrh	r3, [r4, #12]
 800eb8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb90:	81a3      	strh	r3, [r4, #12]
 800eb92:	e7ad      	b.n	800eaf0 <__sflush_r+0x1c>
 800eb94:	690f      	ldr	r7, [r1, #16]
 800eb96:	2f00      	cmp	r7, #0
 800eb98:	d0a9      	beq.n	800eaee <__sflush_r+0x1a>
 800eb9a:	0793      	lsls	r3, r2, #30
 800eb9c:	680e      	ldr	r6, [r1, #0]
 800eb9e:	bf08      	it	eq
 800eba0:	694b      	ldreq	r3, [r1, #20]
 800eba2:	600f      	str	r7, [r1, #0]
 800eba4:	bf18      	it	ne
 800eba6:	2300      	movne	r3, #0
 800eba8:	eba6 0807 	sub.w	r8, r6, r7
 800ebac:	608b      	str	r3, [r1, #8]
 800ebae:	f1b8 0f00 	cmp.w	r8, #0
 800ebb2:	dd9c      	ble.n	800eaee <__sflush_r+0x1a>
 800ebb4:	6a21      	ldr	r1, [r4, #32]
 800ebb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ebb8:	4643      	mov	r3, r8
 800ebba:	463a      	mov	r2, r7
 800ebbc:	4628      	mov	r0, r5
 800ebbe:	47b0      	blx	r6
 800ebc0:	2800      	cmp	r0, #0
 800ebc2:	dc06      	bgt.n	800ebd2 <__sflush_r+0xfe>
 800ebc4:	89a3      	ldrh	r3, [r4, #12]
 800ebc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebca:	81a3      	strh	r3, [r4, #12]
 800ebcc:	f04f 30ff 	mov.w	r0, #4294967295
 800ebd0:	e78e      	b.n	800eaf0 <__sflush_r+0x1c>
 800ebd2:	4407      	add	r7, r0
 800ebd4:	eba8 0800 	sub.w	r8, r8, r0
 800ebd8:	e7e9      	b.n	800ebae <__sflush_r+0xda>
 800ebda:	bf00      	nop
 800ebdc:	20400001 	.word	0x20400001

0800ebe0 <_fflush_r>:
 800ebe0:	b538      	push	{r3, r4, r5, lr}
 800ebe2:	690b      	ldr	r3, [r1, #16]
 800ebe4:	4605      	mov	r5, r0
 800ebe6:	460c      	mov	r4, r1
 800ebe8:	b913      	cbnz	r3, 800ebf0 <_fflush_r+0x10>
 800ebea:	2500      	movs	r5, #0
 800ebec:	4628      	mov	r0, r5
 800ebee:	bd38      	pop	{r3, r4, r5, pc}
 800ebf0:	b118      	cbz	r0, 800ebfa <_fflush_r+0x1a>
 800ebf2:	6983      	ldr	r3, [r0, #24]
 800ebf4:	b90b      	cbnz	r3, 800ebfa <_fflush_r+0x1a>
 800ebf6:	f000 f887 	bl	800ed08 <__sinit>
 800ebfa:	4b14      	ldr	r3, [pc, #80]	; (800ec4c <_fflush_r+0x6c>)
 800ebfc:	429c      	cmp	r4, r3
 800ebfe:	d11b      	bne.n	800ec38 <_fflush_r+0x58>
 800ec00:	686c      	ldr	r4, [r5, #4]
 800ec02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d0ef      	beq.n	800ebea <_fflush_r+0xa>
 800ec0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec0c:	07d0      	lsls	r0, r2, #31
 800ec0e:	d404      	bmi.n	800ec1a <_fflush_r+0x3a>
 800ec10:	0599      	lsls	r1, r3, #22
 800ec12:	d402      	bmi.n	800ec1a <_fflush_r+0x3a>
 800ec14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec16:	f000 f915 	bl	800ee44 <__retarget_lock_acquire_recursive>
 800ec1a:	4628      	mov	r0, r5
 800ec1c:	4621      	mov	r1, r4
 800ec1e:	f7ff ff59 	bl	800ead4 <__sflush_r>
 800ec22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec24:	07da      	lsls	r2, r3, #31
 800ec26:	4605      	mov	r5, r0
 800ec28:	d4e0      	bmi.n	800ebec <_fflush_r+0xc>
 800ec2a:	89a3      	ldrh	r3, [r4, #12]
 800ec2c:	059b      	lsls	r3, r3, #22
 800ec2e:	d4dd      	bmi.n	800ebec <_fflush_r+0xc>
 800ec30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec32:	f000 f908 	bl	800ee46 <__retarget_lock_release_recursive>
 800ec36:	e7d9      	b.n	800ebec <_fflush_r+0xc>
 800ec38:	4b05      	ldr	r3, [pc, #20]	; (800ec50 <_fflush_r+0x70>)
 800ec3a:	429c      	cmp	r4, r3
 800ec3c:	d101      	bne.n	800ec42 <_fflush_r+0x62>
 800ec3e:	68ac      	ldr	r4, [r5, #8]
 800ec40:	e7df      	b.n	800ec02 <_fflush_r+0x22>
 800ec42:	4b04      	ldr	r3, [pc, #16]	; (800ec54 <_fflush_r+0x74>)
 800ec44:	429c      	cmp	r4, r3
 800ec46:	bf08      	it	eq
 800ec48:	68ec      	ldreq	r4, [r5, #12]
 800ec4a:	e7da      	b.n	800ec02 <_fflush_r+0x22>
 800ec4c:	0800fb30 	.word	0x0800fb30
 800ec50:	0800fb50 	.word	0x0800fb50
 800ec54:	0800fb10 	.word	0x0800fb10

0800ec58 <std>:
 800ec58:	2300      	movs	r3, #0
 800ec5a:	b510      	push	{r4, lr}
 800ec5c:	4604      	mov	r4, r0
 800ec5e:	e9c0 3300 	strd	r3, r3, [r0]
 800ec62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec66:	6083      	str	r3, [r0, #8]
 800ec68:	8181      	strh	r1, [r0, #12]
 800ec6a:	6643      	str	r3, [r0, #100]	; 0x64
 800ec6c:	81c2      	strh	r2, [r0, #14]
 800ec6e:	6183      	str	r3, [r0, #24]
 800ec70:	4619      	mov	r1, r3
 800ec72:	2208      	movs	r2, #8
 800ec74:	305c      	adds	r0, #92	; 0x5c
 800ec76:	f7fb fd3f 	bl	800a6f8 <memset>
 800ec7a:	4b05      	ldr	r3, [pc, #20]	; (800ec90 <std+0x38>)
 800ec7c:	6263      	str	r3, [r4, #36]	; 0x24
 800ec7e:	4b05      	ldr	r3, [pc, #20]	; (800ec94 <std+0x3c>)
 800ec80:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec82:	4b05      	ldr	r3, [pc, #20]	; (800ec98 <std+0x40>)
 800ec84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ec86:	4b05      	ldr	r3, [pc, #20]	; (800ec9c <std+0x44>)
 800ec88:	6224      	str	r4, [r4, #32]
 800ec8a:	6323      	str	r3, [r4, #48]	; 0x30
 800ec8c:	bd10      	pop	{r4, pc}
 800ec8e:	bf00      	nop
 800ec90:	0800f031 	.word	0x0800f031
 800ec94:	0800f053 	.word	0x0800f053
 800ec98:	0800f08b 	.word	0x0800f08b
 800ec9c:	0800f0af 	.word	0x0800f0af

0800eca0 <_cleanup_r>:
 800eca0:	4901      	ldr	r1, [pc, #4]	; (800eca8 <_cleanup_r+0x8>)
 800eca2:	f000 b8af 	b.w	800ee04 <_fwalk_reent>
 800eca6:	bf00      	nop
 800eca8:	0800ebe1 	.word	0x0800ebe1

0800ecac <__sfmoreglue>:
 800ecac:	b570      	push	{r4, r5, r6, lr}
 800ecae:	2268      	movs	r2, #104	; 0x68
 800ecb0:	1e4d      	subs	r5, r1, #1
 800ecb2:	4355      	muls	r5, r2
 800ecb4:	460e      	mov	r6, r1
 800ecb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ecba:	f7fb fd91 	bl	800a7e0 <_malloc_r>
 800ecbe:	4604      	mov	r4, r0
 800ecc0:	b140      	cbz	r0, 800ecd4 <__sfmoreglue+0x28>
 800ecc2:	2100      	movs	r1, #0
 800ecc4:	e9c0 1600 	strd	r1, r6, [r0]
 800ecc8:	300c      	adds	r0, #12
 800ecca:	60a0      	str	r0, [r4, #8]
 800eccc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ecd0:	f7fb fd12 	bl	800a6f8 <memset>
 800ecd4:	4620      	mov	r0, r4
 800ecd6:	bd70      	pop	{r4, r5, r6, pc}

0800ecd8 <__sfp_lock_acquire>:
 800ecd8:	4801      	ldr	r0, [pc, #4]	; (800ece0 <__sfp_lock_acquire+0x8>)
 800ecda:	f000 b8b3 	b.w	800ee44 <__retarget_lock_acquire_recursive>
 800ecde:	bf00      	nop
 800ece0:	20002a29 	.word	0x20002a29

0800ece4 <__sfp_lock_release>:
 800ece4:	4801      	ldr	r0, [pc, #4]	; (800ecec <__sfp_lock_release+0x8>)
 800ece6:	f000 b8ae 	b.w	800ee46 <__retarget_lock_release_recursive>
 800ecea:	bf00      	nop
 800ecec:	20002a29 	.word	0x20002a29

0800ecf0 <__sinit_lock_acquire>:
 800ecf0:	4801      	ldr	r0, [pc, #4]	; (800ecf8 <__sinit_lock_acquire+0x8>)
 800ecf2:	f000 b8a7 	b.w	800ee44 <__retarget_lock_acquire_recursive>
 800ecf6:	bf00      	nop
 800ecf8:	20002a2a 	.word	0x20002a2a

0800ecfc <__sinit_lock_release>:
 800ecfc:	4801      	ldr	r0, [pc, #4]	; (800ed04 <__sinit_lock_release+0x8>)
 800ecfe:	f000 b8a2 	b.w	800ee46 <__retarget_lock_release_recursive>
 800ed02:	bf00      	nop
 800ed04:	20002a2a 	.word	0x20002a2a

0800ed08 <__sinit>:
 800ed08:	b510      	push	{r4, lr}
 800ed0a:	4604      	mov	r4, r0
 800ed0c:	f7ff fff0 	bl	800ecf0 <__sinit_lock_acquire>
 800ed10:	69a3      	ldr	r3, [r4, #24]
 800ed12:	b11b      	cbz	r3, 800ed1c <__sinit+0x14>
 800ed14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed18:	f7ff bff0 	b.w	800ecfc <__sinit_lock_release>
 800ed1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ed20:	6523      	str	r3, [r4, #80]	; 0x50
 800ed22:	4b13      	ldr	r3, [pc, #76]	; (800ed70 <__sinit+0x68>)
 800ed24:	4a13      	ldr	r2, [pc, #76]	; (800ed74 <__sinit+0x6c>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	62a2      	str	r2, [r4, #40]	; 0x28
 800ed2a:	42a3      	cmp	r3, r4
 800ed2c:	bf04      	itt	eq
 800ed2e:	2301      	moveq	r3, #1
 800ed30:	61a3      	streq	r3, [r4, #24]
 800ed32:	4620      	mov	r0, r4
 800ed34:	f000 f820 	bl	800ed78 <__sfp>
 800ed38:	6060      	str	r0, [r4, #4]
 800ed3a:	4620      	mov	r0, r4
 800ed3c:	f000 f81c 	bl	800ed78 <__sfp>
 800ed40:	60a0      	str	r0, [r4, #8]
 800ed42:	4620      	mov	r0, r4
 800ed44:	f000 f818 	bl	800ed78 <__sfp>
 800ed48:	2200      	movs	r2, #0
 800ed4a:	60e0      	str	r0, [r4, #12]
 800ed4c:	2104      	movs	r1, #4
 800ed4e:	6860      	ldr	r0, [r4, #4]
 800ed50:	f7ff ff82 	bl	800ec58 <std>
 800ed54:	68a0      	ldr	r0, [r4, #8]
 800ed56:	2201      	movs	r2, #1
 800ed58:	2109      	movs	r1, #9
 800ed5a:	f7ff ff7d 	bl	800ec58 <std>
 800ed5e:	68e0      	ldr	r0, [r4, #12]
 800ed60:	2202      	movs	r2, #2
 800ed62:	2112      	movs	r1, #18
 800ed64:	f7ff ff78 	bl	800ec58 <std>
 800ed68:	2301      	movs	r3, #1
 800ed6a:	61a3      	str	r3, [r4, #24]
 800ed6c:	e7d2      	b.n	800ed14 <__sinit+0xc>
 800ed6e:	bf00      	nop
 800ed70:	0800f648 	.word	0x0800f648
 800ed74:	0800eca1 	.word	0x0800eca1

0800ed78 <__sfp>:
 800ed78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed7a:	4607      	mov	r7, r0
 800ed7c:	f7ff ffac 	bl	800ecd8 <__sfp_lock_acquire>
 800ed80:	4b1e      	ldr	r3, [pc, #120]	; (800edfc <__sfp+0x84>)
 800ed82:	681e      	ldr	r6, [r3, #0]
 800ed84:	69b3      	ldr	r3, [r6, #24]
 800ed86:	b913      	cbnz	r3, 800ed8e <__sfp+0x16>
 800ed88:	4630      	mov	r0, r6
 800ed8a:	f7ff ffbd 	bl	800ed08 <__sinit>
 800ed8e:	3648      	adds	r6, #72	; 0x48
 800ed90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ed94:	3b01      	subs	r3, #1
 800ed96:	d503      	bpl.n	800eda0 <__sfp+0x28>
 800ed98:	6833      	ldr	r3, [r6, #0]
 800ed9a:	b30b      	cbz	r3, 800ede0 <__sfp+0x68>
 800ed9c:	6836      	ldr	r6, [r6, #0]
 800ed9e:	e7f7      	b.n	800ed90 <__sfp+0x18>
 800eda0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eda4:	b9d5      	cbnz	r5, 800eddc <__sfp+0x64>
 800eda6:	4b16      	ldr	r3, [pc, #88]	; (800ee00 <__sfp+0x88>)
 800eda8:	60e3      	str	r3, [r4, #12]
 800edaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800edae:	6665      	str	r5, [r4, #100]	; 0x64
 800edb0:	f000 f847 	bl	800ee42 <__retarget_lock_init_recursive>
 800edb4:	f7ff ff96 	bl	800ece4 <__sfp_lock_release>
 800edb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800edbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800edc0:	6025      	str	r5, [r4, #0]
 800edc2:	61a5      	str	r5, [r4, #24]
 800edc4:	2208      	movs	r2, #8
 800edc6:	4629      	mov	r1, r5
 800edc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800edcc:	f7fb fc94 	bl	800a6f8 <memset>
 800edd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800edd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800edd8:	4620      	mov	r0, r4
 800edda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eddc:	3468      	adds	r4, #104	; 0x68
 800edde:	e7d9      	b.n	800ed94 <__sfp+0x1c>
 800ede0:	2104      	movs	r1, #4
 800ede2:	4638      	mov	r0, r7
 800ede4:	f7ff ff62 	bl	800ecac <__sfmoreglue>
 800ede8:	4604      	mov	r4, r0
 800edea:	6030      	str	r0, [r6, #0]
 800edec:	2800      	cmp	r0, #0
 800edee:	d1d5      	bne.n	800ed9c <__sfp+0x24>
 800edf0:	f7ff ff78 	bl	800ece4 <__sfp_lock_release>
 800edf4:	230c      	movs	r3, #12
 800edf6:	603b      	str	r3, [r7, #0]
 800edf8:	e7ee      	b.n	800edd8 <__sfp+0x60>
 800edfa:	bf00      	nop
 800edfc:	0800f648 	.word	0x0800f648
 800ee00:	ffff0001 	.word	0xffff0001

0800ee04 <_fwalk_reent>:
 800ee04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee08:	4606      	mov	r6, r0
 800ee0a:	4688      	mov	r8, r1
 800ee0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ee10:	2700      	movs	r7, #0
 800ee12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee16:	f1b9 0901 	subs.w	r9, r9, #1
 800ee1a:	d505      	bpl.n	800ee28 <_fwalk_reent+0x24>
 800ee1c:	6824      	ldr	r4, [r4, #0]
 800ee1e:	2c00      	cmp	r4, #0
 800ee20:	d1f7      	bne.n	800ee12 <_fwalk_reent+0xe>
 800ee22:	4638      	mov	r0, r7
 800ee24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee28:	89ab      	ldrh	r3, [r5, #12]
 800ee2a:	2b01      	cmp	r3, #1
 800ee2c:	d907      	bls.n	800ee3e <_fwalk_reent+0x3a>
 800ee2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee32:	3301      	adds	r3, #1
 800ee34:	d003      	beq.n	800ee3e <_fwalk_reent+0x3a>
 800ee36:	4629      	mov	r1, r5
 800ee38:	4630      	mov	r0, r6
 800ee3a:	47c0      	blx	r8
 800ee3c:	4307      	orrs	r7, r0
 800ee3e:	3568      	adds	r5, #104	; 0x68
 800ee40:	e7e9      	b.n	800ee16 <_fwalk_reent+0x12>

0800ee42 <__retarget_lock_init_recursive>:
 800ee42:	4770      	bx	lr

0800ee44 <__retarget_lock_acquire_recursive>:
 800ee44:	4770      	bx	lr

0800ee46 <__retarget_lock_release_recursive>:
 800ee46:	4770      	bx	lr

0800ee48 <__swhatbuf_r>:
 800ee48:	b570      	push	{r4, r5, r6, lr}
 800ee4a:	460e      	mov	r6, r1
 800ee4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee50:	2900      	cmp	r1, #0
 800ee52:	b096      	sub	sp, #88	; 0x58
 800ee54:	4614      	mov	r4, r2
 800ee56:	461d      	mov	r5, r3
 800ee58:	da08      	bge.n	800ee6c <__swhatbuf_r+0x24>
 800ee5a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	602a      	str	r2, [r5, #0]
 800ee62:	061a      	lsls	r2, r3, #24
 800ee64:	d410      	bmi.n	800ee88 <__swhatbuf_r+0x40>
 800ee66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee6a:	e00e      	b.n	800ee8a <__swhatbuf_r+0x42>
 800ee6c:	466a      	mov	r2, sp
 800ee6e:	f000 f945 	bl	800f0fc <_fstat_r>
 800ee72:	2800      	cmp	r0, #0
 800ee74:	dbf1      	blt.n	800ee5a <__swhatbuf_r+0x12>
 800ee76:	9a01      	ldr	r2, [sp, #4]
 800ee78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ee7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ee80:	425a      	negs	r2, r3
 800ee82:	415a      	adcs	r2, r3
 800ee84:	602a      	str	r2, [r5, #0]
 800ee86:	e7ee      	b.n	800ee66 <__swhatbuf_r+0x1e>
 800ee88:	2340      	movs	r3, #64	; 0x40
 800ee8a:	2000      	movs	r0, #0
 800ee8c:	6023      	str	r3, [r4, #0]
 800ee8e:	b016      	add	sp, #88	; 0x58
 800ee90:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ee94 <__smakebuf_r>:
 800ee94:	898b      	ldrh	r3, [r1, #12]
 800ee96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ee98:	079d      	lsls	r5, r3, #30
 800ee9a:	4606      	mov	r6, r0
 800ee9c:	460c      	mov	r4, r1
 800ee9e:	d507      	bpl.n	800eeb0 <__smakebuf_r+0x1c>
 800eea0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eea4:	6023      	str	r3, [r4, #0]
 800eea6:	6123      	str	r3, [r4, #16]
 800eea8:	2301      	movs	r3, #1
 800eeaa:	6163      	str	r3, [r4, #20]
 800eeac:	b002      	add	sp, #8
 800eeae:	bd70      	pop	{r4, r5, r6, pc}
 800eeb0:	ab01      	add	r3, sp, #4
 800eeb2:	466a      	mov	r2, sp
 800eeb4:	f7ff ffc8 	bl	800ee48 <__swhatbuf_r>
 800eeb8:	9900      	ldr	r1, [sp, #0]
 800eeba:	4605      	mov	r5, r0
 800eebc:	4630      	mov	r0, r6
 800eebe:	f7fb fc8f 	bl	800a7e0 <_malloc_r>
 800eec2:	b948      	cbnz	r0, 800eed8 <__smakebuf_r+0x44>
 800eec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eec8:	059a      	lsls	r2, r3, #22
 800eeca:	d4ef      	bmi.n	800eeac <__smakebuf_r+0x18>
 800eecc:	f023 0303 	bic.w	r3, r3, #3
 800eed0:	f043 0302 	orr.w	r3, r3, #2
 800eed4:	81a3      	strh	r3, [r4, #12]
 800eed6:	e7e3      	b.n	800eea0 <__smakebuf_r+0xc>
 800eed8:	4b0d      	ldr	r3, [pc, #52]	; (800ef10 <__smakebuf_r+0x7c>)
 800eeda:	62b3      	str	r3, [r6, #40]	; 0x28
 800eedc:	89a3      	ldrh	r3, [r4, #12]
 800eede:	6020      	str	r0, [r4, #0]
 800eee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eee4:	81a3      	strh	r3, [r4, #12]
 800eee6:	9b00      	ldr	r3, [sp, #0]
 800eee8:	6163      	str	r3, [r4, #20]
 800eeea:	9b01      	ldr	r3, [sp, #4]
 800eeec:	6120      	str	r0, [r4, #16]
 800eeee:	b15b      	cbz	r3, 800ef08 <__smakebuf_r+0x74>
 800eef0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eef4:	4630      	mov	r0, r6
 800eef6:	f000 f913 	bl	800f120 <_isatty_r>
 800eefa:	b128      	cbz	r0, 800ef08 <__smakebuf_r+0x74>
 800eefc:	89a3      	ldrh	r3, [r4, #12]
 800eefe:	f023 0303 	bic.w	r3, r3, #3
 800ef02:	f043 0301 	orr.w	r3, r3, #1
 800ef06:	81a3      	strh	r3, [r4, #12]
 800ef08:	89a0      	ldrh	r0, [r4, #12]
 800ef0a:	4305      	orrs	r5, r0
 800ef0c:	81a5      	strh	r5, [r4, #12]
 800ef0e:	e7cd      	b.n	800eeac <__smakebuf_r+0x18>
 800ef10:	0800eca1 	.word	0x0800eca1

0800ef14 <memmove>:
 800ef14:	4288      	cmp	r0, r1
 800ef16:	b510      	push	{r4, lr}
 800ef18:	eb01 0402 	add.w	r4, r1, r2
 800ef1c:	d902      	bls.n	800ef24 <memmove+0x10>
 800ef1e:	4284      	cmp	r4, r0
 800ef20:	4623      	mov	r3, r4
 800ef22:	d807      	bhi.n	800ef34 <memmove+0x20>
 800ef24:	1e43      	subs	r3, r0, #1
 800ef26:	42a1      	cmp	r1, r4
 800ef28:	d008      	beq.n	800ef3c <memmove+0x28>
 800ef2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef32:	e7f8      	b.n	800ef26 <memmove+0x12>
 800ef34:	4402      	add	r2, r0
 800ef36:	4601      	mov	r1, r0
 800ef38:	428a      	cmp	r2, r1
 800ef3a:	d100      	bne.n	800ef3e <memmove+0x2a>
 800ef3c:	bd10      	pop	{r4, pc}
 800ef3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ef46:	e7f7      	b.n	800ef38 <memmove+0x24>

0800ef48 <_realloc_r>:
 800ef48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef4c:	4680      	mov	r8, r0
 800ef4e:	4614      	mov	r4, r2
 800ef50:	460e      	mov	r6, r1
 800ef52:	b921      	cbnz	r1, 800ef5e <_realloc_r+0x16>
 800ef54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef58:	4611      	mov	r1, r2
 800ef5a:	f7fb bc41 	b.w	800a7e0 <_malloc_r>
 800ef5e:	b92a      	cbnz	r2, 800ef6c <_realloc_r+0x24>
 800ef60:	f7fb fbd2 	bl	800a708 <_free_r>
 800ef64:	4625      	mov	r5, r4
 800ef66:	4628      	mov	r0, r5
 800ef68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef6c:	f000 f8fa 	bl	800f164 <_malloc_usable_size_r>
 800ef70:	4284      	cmp	r4, r0
 800ef72:	4607      	mov	r7, r0
 800ef74:	d802      	bhi.n	800ef7c <_realloc_r+0x34>
 800ef76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ef7a:	d812      	bhi.n	800efa2 <_realloc_r+0x5a>
 800ef7c:	4621      	mov	r1, r4
 800ef7e:	4640      	mov	r0, r8
 800ef80:	f7fb fc2e 	bl	800a7e0 <_malloc_r>
 800ef84:	4605      	mov	r5, r0
 800ef86:	2800      	cmp	r0, #0
 800ef88:	d0ed      	beq.n	800ef66 <_realloc_r+0x1e>
 800ef8a:	42bc      	cmp	r4, r7
 800ef8c:	4622      	mov	r2, r4
 800ef8e:	4631      	mov	r1, r6
 800ef90:	bf28      	it	cs
 800ef92:	463a      	movcs	r2, r7
 800ef94:	f7fe fd06 	bl	800d9a4 <memcpy>
 800ef98:	4631      	mov	r1, r6
 800ef9a:	4640      	mov	r0, r8
 800ef9c:	f7fb fbb4 	bl	800a708 <_free_r>
 800efa0:	e7e1      	b.n	800ef66 <_realloc_r+0x1e>
 800efa2:	4635      	mov	r5, r6
 800efa4:	e7df      	b.n	800ef66 <_realloc_r+0x1e>

0800efa6 <_raise_r>:
 800efa6:	291f      	cmp	r1, #31
 800efa8:	b538      	push	{r3, r4, r5, lr}
 800efaa:	4604      	mov	r4, r0
 800efac:	460d      	mov	r5, r1
 800efae:	d904      	bls.n	800efba <_raise_r+0x14>
 800efb0:	2316      	movs	r3, #22
 800efb2:	6003      	str	r3, [r0, #0]
 800efb4:	f04f 30ff 	mov.w	r0, #4294967295
 800efb8:	bd38      	pop	{r3, r4, r5, pc}
 800efba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800efbc:	b112      	cbz	r2, 800efc4 <_raise_r+0x1e>
 800efbe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800efc2:	b94b      	cbnz	r3, 800efd8 <_raise_r+0x32>
 800efc4:	4620      	mov	r0, r4
 800efc6:	f000 f831 	bl	800f02c <_getpid_r>
 800efca:	462a      	mov	r2, r5
 800efcc:	4601      	mov	r1, r0
 800efce:	4620      	mov	r0, r4
 800efd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efd4:	f000 b818 	b.w	800f008 <_kill_r>
 800efd8:	2b01      	cmp	r3, #1
 800efda:	d00a      	beq.n	800eff2 <_raise_r+0x4c>
 800efdc:	1c59      	adds	r1, r3, #1
 800efde:	d103      	bne.n	800efe8 <_raise_r+0x42>
 800efe0:	2316      	movs	r3, #22
 800efe2:	6003      	str	r3, [r0, #0]
 800efe4:	2001      	movs	r0, #1
 800efe6:	e7e7      	b.n	800efb8 <_raise_r+0x12>
 800efe8:	2400      	movs	r4, #0
 800efea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800efee:	4628      	mov	r0, r5
 800eff0:	4798      	blx	r3
 800eff2:	2000      	movs	r0, #0
 800eff4:	e7e0      	b.n	800efb8 <_raise_r+0x12>
	...

0800eff8 <raise>:
 800eff8:	4b02      	ldr	r3, [pc, #8]	; (800f004 <raise+0xc>)
 800effa:	4601      	mov	r1, r0
 800effc:	6818      	ldr	r0, [r3, #0]
 800effe:	f7ff bfd2 	b.w	800efa6 <_raise_r>
 800f002:	bf00      	nop
 800f004:	20000034 	.word	0x20000034

0800f008 <_kill_r>:
 800f008:	b538      	push	{r3, r4, r5, lr}
 800f00a:	4d07      	ldr	r5, [pc, #28]	; (800f028 <_kill_r+0x20>)
 800f00c:	2300      	movs	r3, #0
 800f00e:	4604      	mov	r4, r0
 800f010:	4608      	mov	r0, r1
 800f012:	4611      	mov	r1, r2
 800f014:	602b      	str	r3, [r5, #0]
 800f016:	f7f4 f9c7 	bl	80033a8 <_kill>
 800f01a:	1c43      	adds	r3, r0, #1
 800f01c:	d102      	bne.n	800f024 <_kill_r+0x1c>
 800f01e:	682b      	ldr	r3, [r5, #0]
 800f020:	b103      	cbz	r3, 800f024 <_kill_r+0x1c>
 800f022:	6023      	str	r3, [r4, #0]
 800f024:	bd38      	pop	{r3, r4, r5, pc}
 800f026:	bf00      	nop
 800f028:	20002a24 	.word	0x20002a24

0800f02c <_getpid_r>:
 800f02c:	f7f4 b9b4 	b.w	8003398 <_getpid>

0800f030 <__sread>:
 800f030:	b510      	push	{r4, lr}
 800f032:	460c      	mov	r4, r1
 800f034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f038:	f000 f89c 	bl	800f174 <_read_r>
 800f03c:	2800      	cmp	r0, #0
 800f03e:	bfab      	itete	ge
 800f040:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f042:	89a3      	ldrhlt	r3, [r4, #12]
 800f044:	181b      	addge	r3, r3, r0
 800f046:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f04a:	bfac      	ite	ge
 800f04c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f04e:	81a3      	strhlt	r3, [r4, #12]
 800f050:	bd10      	pop	{r4, pc}

0800f052 <__swrite>:
 800f052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f056:	461f      	mov	r7, r3
 800f058:	898b      	ldrh	r3, [r1, #12]
 800f05a:	05db      	lsls	r3, r3, #23
 800f05c:	4605      	mov	r5, r0
 800f05e:	460c      	mov	r4, r1
 800f060:	4616      	mov	r6, r2
 800f062:	d505      	bpl.n	800f070 <__swrite+0x1e>
 800f064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f068:	2302      	movs	r3, #2
 800f06a:	2200      	movs	r2, #0
 800f06c:	f000 f868 	bl	800f140 <_lseek_r>
 800f070:	89a3      	ldrh	r3, [r4, #12]
 800f072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f07a:	81a3      	strh	r3, [r4, #12]
 800f07c:	4632      	mov	r2, r6
 800f07e:	463b      	mov	r3, r7
 800f080:	4628      	mov	r0, r5
 800f082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f086:	f000 b817 	b.w	800f0b8 <_write_r>

0800f08a <__sseek>:
 800f08a:	b510      	push	{r4, lr}
 800f08c:	460c      	mov	r4, r1
 800f08e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f092:	f000 f855 	bl	800f140 <_lseek_r>
 800f096:	1c43      	adds	r3, r0, #1
 800f098:	89a3      	ldrh	r3, [r4, #12]
 800f09a:	bf15      	itete	ne
 800f09c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f09e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f0a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f0a6:	81a3      	strheq	r3, [r4, #12]
 800f0a8:	bf18      	it	ne
 800f0aa:	81a3      	strhne	r3, [r4, #12]
 800f0ac:	bd10      	pop	{r4, pc}

0800f0ae <__sclose>:
 800f0ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0b2:	f000 b813 	b.w	800f0dc <_close_r>
	...

0800f0b8 <_write_r>:
 800f0b8:	b538      	push	{r3, r4, r5, lr}
 800f0ba:	4d07      	ldr	r5, [pc, #28]	; (800f0d8 <_write_r+0x20>)
 800f0bc:	4604      	mov	r4, r0
 800f0be:	4608      	mov	r0, r1
 800f0c0:	4611      	mov	r1, r2
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	602a      	str	r2, [r5, #0]
 800f0c6:	461a      	mov	r2, r3
 800f0c8:	f7f4 f9a5 	bl	8003416 <_write>
 800f0cc:	1c43      	adds	r3, r0, #1
 800f0ce:	d102      	bne.n	800f0d6 <_write_r+0x1e>
 800f0d0:	682b      	ldr	r3, [r5, #0]
 800f0d2:	b103      	cbz	r3, 800f0d6 <_write_r+0x1e>
 800f0d4:	6023      	str	r3, [r4, #0]
 800f0d6:	bd38      	pop	{r3, r4, r5, pc}
 800f0d8:	20002a24 	.word	0x20002a24

0800f0dc <_close_r>:
 800f0dc:	b538      	push	{r3, r4, r5, lr}
 800f0de:	4d06      	ldr	r5, [pc, #24]	; (800f0f8 <_close_r+0x1c>)
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	4604      	mov	r4, r0
 800f0e4:	4608      	mov	r0, r1
 800f0e6:	602b      	str	r3, [r5, #0]
 800f0e8:	f7f4 f9b1 	bl	800344e <_close>
 800f0ec:	1c43      	adds	r3, r0, #1
 800f0ee:	d102      	bne.n	800f0f6 <_close_r+0x1a>
 800f0f0:	682b      	ldr	r3, [r5, #0]
 800f0f2:	b103      	cbz	r3, 800f0f6 <_close_r+0x1a>
 800f0f4:	6023      	str	r3, [r4, #0]
 800f0f6:	bd38      	pop	{r3, r4, r5, pc}
 800f0f8:	20002a24 	.word	0x20002a24

0800f0fc <_fstat_r>:
 800f0fc:	b538      	push	{r3, r4, r5, lr}
 800f0fe:	4d07      	ldr	r5, [pc, #28]	; (800f11c <_fstat_r+0x20>)
 800f100:	2300      	movs	r3, #0
 800f102:	4604      	mov	r4, r0
 800f104:	4608      	mov	r0, r1
 800f106:	4611      	mov	r1, r2
 800f108:	602b      	str	r3, [r5, #0]
 800f10a:	f7f4 f9ac 	bl	8003466 <_fstat>
 800f10e:	1c43      	adds	r3, r0, #1
 800f110:	d102      	bne.n	800f118 <_fstat_r+0x1c>
 800f112:	682b      	ldr	r3, [r5, #0]
 800f114:	b103      	cbz	r3, 800f118 <_fstat_r+0x1c>
 800f116:	6023      	str	r3, [r4, #0]
 800f118:	bd38      	pop	{r3, r4, r5, pc}
 800f11a:	bf00      	nop
 800f11c:	20002a24 	.word	0x20002a24

0800f120 <_isatty_r>:
 800f120:	b538      	push	{r3, r4, r5, lr}
 800f122:	4d06      	ldr	r5, [pc, #24]	; (800f13c <_isatty_r+0x1c>)
 800f124:	2300      	movs	r3, #0
 800f126:	4604      	mov	r4, r0
 800f128:	4608      	mov	r0, r1
 800f12a:	602b      	str	r3, [r5, #0]
 800f12c:	f7f4 f9ab 	bl	8003486 <_isatty>
 800f130:	1c43      	adds	r3, r0, #1
 800f132:	d102      	bne.n	800f13a <_isatty_r+0x1a>
 800f134:	682b      	ldr	r3, [r5, #0]
 800f136:	b103      	cbz	r3, 800f13a <_isatty_r+0x1a>
 800f138:	6023      	str	r3, [r4, #0]
 800f13a:	bd38      	pop	{r3, r4, r5, pc}
 800f13c:	20002a24 	.word	0x20002a24

0800f140 <_lseek_r>:
 800f140:	b538      	push	{r3, r4, r5, lr}
 800f142:	4d07      	ldr	r5, [pc, #28]	; (800f160 <_lseek_r+0x20>)
 800f144:	4604      	mov	r4, r0
 800f146:	4608      	mov	r0, r1
 800f148:	4611      	mov	r1, r2
 800f14a:	2200      	movs	r2, #0
 800f14c:	602a      	str	r2, [r5, #0]
 800f14e:	461a      	mov	r2, r3
 800f150:	f7f4 f9a4 	bl	800349c <_lseek>
 800f154:	1c43      	adds	r3, r0, #1
 800f156:	d102      	bne.n	800f15e <_lseek_r+0x1e>
 800f158:	682b      	ldr	r3, [r5, #0]
 800f15a:	b103      	cbz	r3, 800f15e <_lseek_r+0x1e>
 800f15c:	6023      	str	r3, [r4, #0]
 800f15e:	bd38      	pop	{r3, r4, r5, pc}
 800f160:	20002a24 	.word	0x20002a24

0800f164 <_malloc_usable_size_r>:
 800f164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f168:	1f18      	subs	r0, r3, #4
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	bfbc      	itt	lt
 800f16e:	580b      	ldrlt	r3, [r1, r0]
 800f170:	18c0      	addlt	r0, r0, r3
 800f172:	4770      	bx	lr

0800f174 <_read_r>:
 800f174:	b538      	push	{r3, r4, r5, lr}
 800f176:	4d07      	ldr	r5, [pc, #28]	; (800f194 <_read_r+0x20>)
 800f178:	4604      	mov	r4, r0
 800f17a:	4608      	mov	r0, r1
 800f17c:	4611      	mov	r1, r2
 800f17e:	2200      	movs	r2, #0
 800f180:	602a      	str	r2, [r5, #0]
 800f182:	461a      	mov	r2, r3
 800f184:	f7f4 f92a 	bl	80033dc <_read>
 800f188:	1c43      	adds	r3, r0, #1
 800f18a:	d102      	bne.n	800f192 <_read_r+0x1e>
 800f18c:	682b      	ldr	r3, [r5, #0]
 800f18e:	b103      	cbz	r3, 800f192 <_read_r+0x1e>
 800f190:	6023      	str	r3, [r4, #0]
 800f192:	bd38      	pop	{r3, r4, r5, pc}
 800f194:	20002a24 	.word	0x20002a24

0800f198 <_init>:
 800f198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f19a:	bf00      	nop
 800f19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f19e:	bc08      	pop	{r3}
 800f1a0:	469e      	mov	lr, r3
 800f1a2:	4770      	bx	lr

0800f1a4 <_fini>:
 800f1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1a6:	bf00      	nop
 800f1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1aa:	bc08      	pop	{r3}
 800f1ac:	469e      	mov	lr, r3
 800f1ae:	4770      	bx	lr
