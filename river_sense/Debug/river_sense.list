
river_sense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c0  08010120  08010120  00020120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ae0  08010ae0  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  08010ae0  08010ae0  00020ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ae8  08010ae8  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ae8  08010ae8  00020ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010aec  08010aec  00020aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08010af0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028a4  20000208  08010cf8  00030208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002aac  08010cf8  00032aac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021c23  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004069  00000000  00000000  00051e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d20  00000000  00000000  00055ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b68  00000000  00000000  00057be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005fc7  00000000  00000000  00059750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002305a  00000000  00000000  0005f717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8985  00000000  00000000  00082771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016b0f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093b4  00000000  00000000  0016b148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010108 	.word	0x08010108

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	08010108 	.word	0x08010108

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 0 */



// ADC Callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	// TODO: unpack ADC data
	TDS_digital[TDS_digital_index++] = adcResultsDMA[0];
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <HAL_ADC_ConvCpltCallback+0x78>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	b299      	uxth	r1, r3
 8001006:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	b2d0      	uxtb	r0, r2
 800100e:	4a19      	ldr	r2, [pc, #100]	; (8001074 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001010:	7010      	strb	r0, [r2, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <HAL_ADC_ConvCpltCallback+0x80>)
 8001016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	if (TDS_digital_index == 10) {
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <HAL_ADC_ConvCpltCallback+0x7c>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b0a      	cmp	r3, #10
 8001020:	d120      	bne.n	8001064 <HAL_ADC_ConvCpltCallback+0x6c>
		uint32_t tempSum = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < 10; ++i) {
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	e009      	b.n	8001040 <HAL_ADC_ConvCpltCallback+0x48>
			tempSum += TDS_digital[i];
 800102c:	4a12      	ldr	r2, [pc, #72]	; (8001078 <HAL_ADC_ConvCpltCallback+0x80>)
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	4413      	add	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < 10; ++i) {
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	3301      	adds	r3, #1
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	2b09      	cmp	r3, #9
 8001044:	ddf2      	ble.n	800102c <HAL_ADC_ConvCpltCallback+0x34>
		}
		TDS_value = tempSum/10;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4a0c      	ldr	r2, [pc, #48]	; (800107c <HAL_ADC_ConvCpltCallback+0x84>)
 800104a:	fba2 2303 	umull	r2, r3, r2, r3
 800104e:	08db      	lsrs	r3, r3, #3
 8001050:	ee07 3a90 	vmov	s15, r3
 8001054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_ADC_ConvCpltCallback+0x88>)
 800105a:	edc3 7a00 	vstr	s15, [r3]
		TDS_digital_index = 0;
 800105e:	4b05      	ldr	r3, [pc, #20]	; (8001074 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
	}

}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	200023e4 	.word	0x200023e4
 8001074:	20002414 	.word	0x20002414
 8001078:	200023ec 	.word	0x200023ec
 800107c:	cccccccd 	.word	0xcccccccd
 8001080:	20002418 	.word	0x20002418

08001084 <HAL_UART_TxCpltCallback>:


// UART Transmit Callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <HAL_UART_RxCpltCallback>:

// UART Receive Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1) {
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <HAL_UART_RxCpltCallback+0x30>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d109      	bne.n	80010be <HAL_UART_RxCpltCallback+0x26>
		SIM_serialRX_Handler(serialRX_Data);
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <HAL_UART_RxCpltCallback+0x34>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 fe2e 	bl	8001d10 <SIM_serialRX_Handler>
		// Enabling interrupt receive again
		HAL_UART_Receive_IT(&huart1, &serialRX_Data, 1); // receive data (one character only)
 80010b4:	2201      	movs	r2, #1
 80010b6:	4905      	ldr	r1, [pc, #20]	; (80010cc <HAL_UART_RxCpltCallback+0x34>)
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <HAL_UART_RxCpltCallback+0x38>)
 80010ba:	f008 fa25 	bl	8009508 <HAL_UART_Receive_IT>
  }

}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40013800 	.word	0x40013800
 80010cc:	2000257f 	.word	0x2000257f
 80010d0:	200003f8 	.word	0x200003f8

080010d4 <HAL_TIM_PeriodElapsedCallback>:

// TIM Callback (100ms)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

	// Toggle LED; Just for fun
	if (isLD3_Flicker) {
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d004      	beq.n	80010f0 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80010e6:	2108      	movs	r1, #8
 80010e8:	4810      	ldr	r0, [pc, #64]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80010ea:	f004 fb97 	bl	800581c <HAL_GPIO_TogglePin>
 80010ee:	e004      	b.n	80010fa <HAL_TIM_PeriodElapsedCallback+0x26>
	}
	else {
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2108      	movs	r1, #8
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80010f6:	f004 fb79 	bl	80057ec <HAL_GPIO_WritePin>
	}

	// Call SIM Module handler
	if (sim_flag) {
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d008      	beq.n	8001116 <HAL_TIM_PeriodElapsedCallback+0x42>
		if (simState == SIM_STANDBY) {
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b07      	cmp	r3, #7
 800110a:	d102      	bne.n	8001112 <HAL_TIM_PeriodElapsedCallback+0x3e>
			simState = SIM_INIT;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
		}
		SIM_Handler();
 8001112:	f000 fdbd 	bl	8001c90 <SIM_Handler>
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, 4); // Start DMA for ADC
 8001116:	2204      	movs	r2, #4
 8001118:	4907      	ldr	r1, [pc, #28]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800111a:	4808      	ldr	r0, [pc, #32]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800111c:	f002 fee4 	bl	8003ee8 <HAL_ADC_Start_DMA>
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000000 	.word	0x20000000
 800112c:	48000400 	.word	0x48000400
 8001130:	2000047d 	.word	0x2000047d
 8001134:	2000000c 	.word	0x2000000c
 8001138:	200023e4 	.word	0x200023e4
 800113c:	20000224 	.word	0x20000224

08001140 <HAL_RTC_AlarmAEventCallback>:


// Alarm A callback function (for reading data from sensors)
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af02      	add	r7, sp, #8
 8001146:	6078      	str	r0, [r7, #4]
	get_time(currentTime);
 8001148:	482b      	ldr	r0, [pc, #172]	; (80011f8 <HAL_RTC_AlarmAEventCallback+0xb8>)
 800114a:	f000 fc37 	bl	80019bc <get_time>
	// TODO: write ADC data to forms
	if (currentFormArr==0) {
 800114e:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <HAL_RTC_AlarmAEventCallback+0xbc>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d121      	bne.n	800119a <HAL_RTC_AlarmAEventCallback+0x5a>
		sprintf(formsToPost_0[formsToPost_0_Index], "\"batt_%d\",\"%s,%.2f\"",formsToPost_0_Index,currentTime,TDS_value);
 8001156:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <HAL_RTC_AlarmAEventCallback+0xc0>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	4a27      	ldr	r2, [pc, #156]	; (8001204 <HAL_RTC_AlarmAEventCallback+0xc4>)
 8001166:	189c      	adds	r4, r3, r2
 8001168:	4b25      	ldr	r3, [pc, #148]	; (8001200 <HAL_RTC_AlarmAEventCallback+0xc0>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	461d      	mov	r5, r3
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <HAL_RTC_AlarmAEventCallback+0xc8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9e8 	bl	8000548 <__aeabi_f2d>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	e9cd 2300 	strd	r2, r3, [sp]
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <HAL_RTC_AlarmAEventCallback+0xb8>)
 8001182:	462a      	mov	r2, r5
 8001184:	4921      	ldr	r1, [pc, #132]	; (800120c <HAL_RTC_AlarmAEventCallback+0xcc>)
 8001186:	4620      	mov	r0, r4
 8001188:	f00b f9e6 	bl	800c558 <siprintf>
		++formsToPost_0_Index;
 800118c:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <HAL_RTC_AlarmAEventCallback+0xc0>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <HAL_RTC_AlarmAEventCallback+0xc0>)
 8001196:	801a      	strh	r2, [r3, #0]
 8001198:	e024      	b.n	80011e4 <HAL_RTC_AlarmAEventCallback+0xa4>
	}
	else if (currentFormArr==1) {
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_RTC_AlarmAEventCallback+0xbc>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d120      	bne.n	80011e4 <HAL_RTC_AlarmAEventCallback+0xa4>
		sprintf(formsToPost_1[formsToPost_1_Index], "\"batt_%d\",\"%s,%.2f\"",formsToPost_1_Index,currentTime,TDS_value);
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_RTC_AlarmAEventCallback+0xd0>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	4a18      	ldr	r2, [pc, #96]	; (8001214 <HAL_RTC_AlarmAEventCallback+0xd4>)
 80011b2:	189c      	adds	r4, r3, r2
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <HAL_RTC_AlarmAEventCallback+0xd0>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	461d      	mov	r5, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <HAL_RTC_AlarmAEventCallback+0xc8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f9c2 	bl	8000548 <__aeabi_f2d>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	e9cd 2300 	strd	r2, r3, [sp]
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_RTC_AlarmAEventCallback+0xb8>)
 80011ce:	462a      	mov	r2, r5
 80011d0:	490e      	ldr	r1, [pc, #56]	; (800120c <HAL_RTC_AlarmAEventCallback+0xcc>)
 80011d2:	4620      	mov	r0, r4
 80011d4:	f00b f9c0 	bl	800c558 <siprintf>
		++formsToPost_1_Index;
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <HAL_RTC_AlarmAEventCallback+0xd0>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	b29a      	uxth	r2, r3
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_RTC_AlarmAEventCallback+0xd0>)
 80011e2:	801a      	strh	r2, [r3, #0]
	}
	// TODO: write ADC data to SD card



	set_alarm_A(alarmA_SecondsOffset);
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <HAL_RTC_AlarmAEventCallback+0xd8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fc15 	bl	8001a18 <set_alarm_A>
	return;
 80011ee:	bf00      	nop
}
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bdb0      	pop	{r4, r5, r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200023d0 	.word	0x200023d0
 80011fc:	200023c4 	.word	0x200023c4
 8001200:	200023c0 	.word	0x200023c0
 8001204:	20000480 	.word	0x20000480
 8001208:	20002418 	.word	0x20002418
 800120c:	08010120 	.word	0x08010120
 8001210:	200023c2 	.word	0x200023c2
 8001214:	20001420 	.word	0x20001420
 8001218:	20000004 	.word	0x20000004

0800121c <HAL_RTCEx_AlarmBEventCallback>:

// Alarm B callback function (for posting data to RiverSense)
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	make_post_flag = 1;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_RTCEx_AlarmBEventCallback+0x3c>)
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
	sim_flag = 1;
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <HAL_RTCEx_AlarmBEventCallback+0x40>)
 800122c:	2201      	movs	r2, #1
 800122e:	701a      	strb	r2, [r3, #0]
	currentFormArr = !currentFormArr; // Switch between forms
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <HAL_RTCEx_AlarmBEventCallback+0x44>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	bf0c      	ite	eq
 8001238:	2301      	moveq	r3, #1
 800123a:	2300      	movne	r3, #0
 800123c:	b2db      	uxtb	r3, r3
 800123e:	461a      	mov	r2, r3
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <HAL_RTCEx_AlarmBEventCallback+0x44>)
 8001242:	701a      	strb	r2, [r3, #0]
	set_alarm_B(alarmB_SecondsOffset);
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <HAL_RTCEx_AlarmBEventCallback+0x48>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f000 fc81 	bl	8001b50 <set_alarm_B>
	return;
 800124e:	bf00      	nop
}
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	2000047e 	.word	0x2000047e
 800125c:	2000047d 	.word	0x2000047d
 8001260:	200023c4 	.word	0x200023c4
 8001264:	20000008 	.word	0x20000008

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126c:	f002 fa81 	bl	8003772 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001270:	f000 f848 	bl	8001304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001274:	f000 fafc 	bl	8001870 <MX_GPIO_Init>
  MX_DMA_Init();
 8001278:	f000 fadc 	bl	8001834 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800127c:	f000 faaa 	bl	80017d4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001280:	f000 fa5a 	bl	8001738 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001284:	f000 fa1a 	bl	80016bc <MX_SPI1_Init>
  MX_FATFS_Init();
 8001288:	f009 fbfc 	bl	800aa84 <MX_FATFS_Init>
  MX_RTC_Init();
 800128c:	f000 f970 	bl	8001570 <MX_RTC_Init>
  MX_ADC1_Init();
 8001290:	f000 f89a 	bl	80013c8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001294:	f000 f92c 	bl	80014f0 <MX_I2C1_Init>


  // Baud rate synchronization
  // SIM7000 Series_UART_ApplicationNote_V1.01 p11
  // TODO: incorporate this in a state
  HAL_UART_Transmit_IT(&huart1, (uint8_t *) "AT\r\n", strlen("AT\r\n"));
 8001298:	2204      	movs	r2, #4
 800129a:	4912      	ldr	r1, [pc, #72]	; (80012e4 <main+0x7c>)
 800129c:	4812      	ldr	r0, [pc, #72]	; (80012e8 <main+0x80>)
 800129e:	f008 f8c5 	bl	800942c <HAL_UART_Transmit_IT>
  HAL_Delay(1000);
 80012a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a6:	f002 fad9 	bl	800385c <HAL_Delay>
  HAL_UART_Transmit_IT(&huart1, (uint8_t *) "AT\r\n", strlen("AT\r\n"));
 80012aa:	2204      	movs	r2, #4
 80012ac:	490d      	ldr	r1, [pc, #52]	; (80012e4 <main+0x7c>)
 80012ae:	480e      	ldr	r0, [pc, #56]	; (80012e8 <main+0x80>)
 80012b0:	f008 f8bc 	bl	800942c <HAL_UART_Transmit_IT>
  HAL_Delay(1000);
 80012b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b8:	f002 fad0 	bl	800385c <HAL_Delay>


  // Enable Timer(s)
  HAL_TIM_Base_Start_IT(&htim2);
 80012bc:	480b      	ldr	r0, [pc, #44]	; (80012ec <main+0x84>)
 80012be:	f007 fc81 	bl	8008bc4 <HAL_TIM_Base_Start_IT>

  // Start ADC from DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, 4);
 80012c2:	2204      	movs	r2, #4
 80012c4:	490a      	ldr	r1, [pc, #40]	; (80012f0 <main+0x88>)
 80012c6:	480b      	ldr	r0, [pc, #44]	; (80012f4 <main+0x8c>)
 80012c8:	f002 fe0e 	bl	8003ee8 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  if (!time_synced_flag) { // Time should be sync from web server
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <main+0x90>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1fb      	bne.n	80012cc <main+0x64>
		  sim_flag = 1; // SIM operations should commence
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <main+0x94>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
		  make_post_flag = 0; // No POST should be made
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <main+0x98>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
	  if (!time_synced_flag) { // Time should be sync from web server
 80012e0:	e7f4      	b.n	80012cc <main+0x64>
 80012e2:	bf00      	nop
 80012e4:	08010134 	.word	0x08010134
 80012e8:	200003f8 	.word	0x200003f8
 80012ec:	200003ac 	.word	0x200003ac
 80012f0:	200023e4 	.word	0x200023e4
 80012f4:	20000224 	.word	0x20000224
 80012f8:	2000047c 	.word	0x2000047c
 80012fc:	2000047d 	.word	0x2000047d
 8001300:	2000047e 	.word	0x2000047e

08001304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b096      	sub	sp, #88	; 0x58
 8001308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	2244      	movs	r2, #68	; 0x44
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f00a f9a8 	bl	800b668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001318:	463b      	mov	r3, r7
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001326:	f44f 7000 	mov.w	r0, #512	; 0x200
 800132a:	f005 f96d 	bl	8006608 <HAL_PWREx_ControlVoltageScaling>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001334:	f000 fca6 	bl	8001c84 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001338:	f005 f948 	bl	80065cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800133c:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <SystemClock_Config+0xc0>)
 800133e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001342:	4a20      	ldr	r2, [pc, #128]	; (80013c4 <SystemClock_Config+0xc0>)
 8001344:	f023 0318 	bic.w	r3, r3, #24
 8001348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800134c:	2314      	movs	r3, #20
 800134e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001350:	2301      	movs	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001354:	2301      	movs	r3, #1
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800135c:	2360      	movs	r3, #96	; 0x60
 800135e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001360:	2302      	movs	r3, #2
 8001362:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001364:	2301      	movs	r3, #1
 8001366:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001368:	2301      	movs	r3, #1
 800136a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800136c:	2310      	movs	r3, #16
 800136e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001370:	2307      	movs	r3, #7
 8001372:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001374:	2302      	movs	r3, #2
 8001376:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001378:	2302      	movs	r3, #2
 800137a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4618      	mov	r0, r3
 8001382:	f005 f997 	bl	80066b4 <HAL_RCC_OscConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800138c:	f000 fc7a 	bl	8001c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001390:	230f      	movs	r3, #15
 8001392:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001394:	2303      	movs	r3, #3
 8001396:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	2101      	movs	r1, #1
 80013a8:	4618      	mov	r0, r3
 80013aa:	f005 fd97 	bl	8006edc <HAL_RCC_ClockConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80013b4:	f000 fc66 	bl	8001c84 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80013b8:	f006 f9aa 	bl	8007710 <HAL_RCCEx_EnableMSIPLLMode>
}
 80013bc:	bf00      	nop
 80013be:	3758      	adds	r7, #88	; 0x58
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40021000 	.word	0x40021000

080013c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ce:	463b      	mov	r3, r7
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013de:	4b3e      	ldr	r3, [pc, #248]	; (80014d8 <MX_ADC1_Init+0x110>)
 80013e0:	4a3e      	ldr	r2, [pc, #248]	; (80014dc <MX_ADC1_Init+0x114>)
 80013e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013e4:	4b3c      	ldr	r3, [pc, #240]	; (80014d8 <MX_ADC1_Init+0x110>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013ea:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <MX_ADC1_Init+0x110>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013f0:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <MX_ADC1_Init+0x110>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013f6:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <MX_ADC1_Init+0x110>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013fc:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <MX_ADC1_Init+0x110>)
 80013fe:	2204      	movs	r2, #4
 8001400:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001402:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <MX_ADC1_Init+0x110>)
 8001404:	2200      	movs	r2, #0
 8001406:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001408:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <MX_ADC1_Init+0x110>)
 800140a:	2200      	movs	r2, #0
 800140c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 800140e:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <MX_ADC1_Init+0x110>)
 8001410:	2204      	movs	r2, #4
 8001412:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001414:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <MX_ADC1_Init+0x110>)
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800141c:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <MX_ADC1_Init+0x110>)
 800141e:	2200      	movs	r2, #0
 8001420:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001422:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <MX_ADC1_Init+0x110>)
 8001424:	2200      	movs	r2, #0
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001428:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <MX_ADC1_Init+0x110>)
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001430:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <MX_ADC1_Init+0x110>)
 8001432:	2200      	movs	r2, #0
 8001434:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001436:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <MX_ADC1_Init+0x110>)
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800143e:	4826      	ldr	r0, [pc, #152]	; (80014d8 <MX_ADC1_Init+0x110>)
 8001440:	f002 fc0a 	bl	8003c58 <HAL_ADC_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800144a:	f000 fc1b 	bl	8001c84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800144e:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <MX_ADC1_Init+0x118>)
 8001450:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001452:	2306      	movs	r3, #6
 8001454:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001456:	2302      	movs	r3, #2
 8001458:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800145a:	237f      	movs	r3, #127	; 0x7f
 800145c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800145e:	2304      	movs	r3, #4
 8001460:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001466:	463b      	mov	r3, r7
 8001468:	4619      	mov	r1, r3
 800146a:	481b      	ldr	r0, [pc, #108]	; (80014d8 <MX_ADC1_Init+0x110>)
 800146c:	f002 ff92 	bl	8004394 <HAL_ADC_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001476:	f000 fc05 	bl	8001c84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <MX_ADC1_Init+0x11c>)
 800147c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800147e:	230c      	movs	r3, #12
 8001480:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001482:	463b      	mov	r3, r7
 8001484:	4619      	mov	r1, r3
 8001486:	4814      	ldr	r0, [pc, #80]	; (80014d8 <MX_ADC1_Init+0x110>)
 8001488:	f002 ff84 	bl	8004394 <HAL_ADC_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001492:	f000 fbf7 	bl	8001c84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_ADC1_Init+0x120>)
 8001498:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800149a:	2312      	movs	r3, #18
 800149c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149e:	463b      	mov	r3, r7
 80014a0:	4619      	mov	r1, r3
 80014a2:	480d      	ldr	r0, [pc, #52]	; (80014d8 <MX_ADC1_Init+0x110>)
 80014a4:	f002 ff76 	bl	8004394 <HAL_ADC_ConfigChannel>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80014ae:	f000 fbe9 	bl	8001c84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_ADC1_Init+0x124>)
 80014b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80014b6:	2318      	movs	r3, #24
 80014b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ba:	463b      	mov	r3, r7
 80014bc:	4619      	mov	r1, r3
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <MX_ADC1_Init+0x110>)
 80014c0:	f002 ff68 	bl	8004394 <HAL_ADC_ConfigChannel>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80014ca:	f000 fbdb 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000224 	.word	0x20000224
 80014dc:	50040000 	.word	0x50040000
 80014e0:	1d500080 	.word	0x1d500080
 80014e4:	21800100 	.word	0x21800100
 80014e8:	25b00200 	.word	0x25b00200
 80014ec:	2e300800 	.word	0x2e300800

080014f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <MX_I2C1_Init+0x74>)
 80014f6:	4a1c      	ldr	r2, [pc, #112]	; (8001568 <MX_I2C1_Init+0x78>)
 80014f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_I2C1_Init+0x74>)
 80014fc:	4a1b      	ldr	r2, [pc, #108]	; (800156c <MX_I2C1_Init+0x7c>)
 80014fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001500:	4b18      	ldr	r3, [pc, #96]	; (8001564 <MX_I2C1_Init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <MX_I2C1_Init+0x74>)
 8001508:	2201      	movs	r2, #1
 800150a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <MX_I2C1_Init+0x74>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <MX_I2C1_Init+0x74>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <MX_I2C1_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_I2C1_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_I2C1_Init+0x74>)
 8001526:	2200      	movs	r2, #0
 8001528:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800152a:	480e      	ldr	r0, [pc, #56]	; (8001564 <MX_I2C1_Init+0x74>)
 800152c:	f004 f990 	bl	8005850 <HAL_I2C_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001536:	f000 fba5 	bl	8001c84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800153a:	2100      	movs	r1, #0
 800153c:	4809      	ldr	r0, [pc, #36]	; (8001564 <MX_I2C1_Init+0x74>)
 800153e:	f004 ffae 	bl	800649e <HAL_I2CEx_ConfigAnalogFilter>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001548:	f000 fb9c 	bl	8001c84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800154c:	2100      	movs	r1, #0
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_I2C1_Init+0x74>)
 8001550:	f004 fff0 	bl	8006534 <HAL_I2CEx_ConfigDigitalFilter>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800155a:	f000 fb93 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200002d0 	.word	0x200002d0
 8001568:	40005400 	.word	0x40005400
 800156c:	00707cbb 	.word	0x00707cbb

08001570 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b092      	sub	sp, #72	; 0x48
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001576:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001586:	2300      	movs	r3, #0
 8001588:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	222c      	movs	r2, #44	; 0x2c
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f00a f869 	bl	800b668 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001596:	4b47      	ldr	r3, [pc, #284]	; (80016b4 <MX_RTC_Init+0x144>)
 8001598:	4a47      	ldr	r2, [pc, #284]	; (80016b8 <MX_RTC_Init+0x148>)
 800159a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800159c:	4b45      	ldr	r3, [pc, #276]	; (80016b4 <MX_RTC_Init+0x144>)
 800159e:	2200      	movs	r2, #0
 80015a0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80015a2:	4b44      	ldr	r3, [pc, #272]	; (80016b4 <MX_RTC_Init+0x144>)
 80015a4:	227f      	movs	r2, #127	; 0x7f
 80015a6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80015a8:	4b42      	ldr	r3, [pc, #264]	; (80016b4 <MX_RTC_Init+0x144>)
 80015aa:	22ff      	movs	r2, #255	; 0xff
 80015ac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015ae:	4b41      	ldr	r3, [pc, #260]	; (80016b4 <MX_RTC_Init+0x144>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015b4:	4b3f      	ldr	r3, [pc, #252]	; (80016b4 <MX_RTC_Init+0x144>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015ba:	4b3e      	ldr	r3, [pc, #248]	; (80016b4 <MX_RTC_Init+0x144>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015c0:	4b3c      	ldr	r3, [pc, #240]	; (80016b4 <MX_RTC_Init+0x144>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015c6:	483b      	ldr	r0, [pc, #236]	; (80016b4 <MX_RTC_Init+0x144>)
 80015c8:	f006 f9a4 	bl	8007914 <HAL_RTC_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80015d2:	f000 fb57 	bl	8001c84 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x13;
 80015d6:	2313      	movs	r3, #19
 80015d8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x15;
 80015dc:	2315      	movs	r3, #21
 80015de:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x30;
 80015e2:	2330      	movs	r3, #48	; 0x30
 80015e4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80015f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015f4:	2201      	movs	r2, #1
 80015f6:	4619      	mov	r1, r3
 80015f8:	482e      	ldr	r0, [pc, #184]	; (80016b4 <MX_RTC_Init+0x144>)
 80015fa:	f006 fa06 	bl	8007a0a <HAL_RTC_SetTime>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001604:	f000 fb3e 	bl	8001c84 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001608:	2302      	movs	r3, #2
 800160a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_AUGUST;
 800160e:	2308      	movs	r3, #8
 8001610:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x12;
 8001614:	2312      	movs	r3, #18
 8001616:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x97;
 800161a:	2397      	movs	r3, #151	; 0x97
 800161c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001620:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001624:	2201      	movs	r2, #1
 8001626:	4619      	mov	r1, r3
 8001628:	4822      	ldr	r0, [pc, #136]	; (80016b4 <MX_RTC_Init+0x144>)
 800162a:	f006 fae7 	bl	8007bfc <HAL_RTC_SetDate>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001634:	f000 fb26 	bl	8001c84 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x10;
 8001638:	2310      	movs	r3, #16
 800163a:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x10;
 800163c:	2310      	movs	r3, #16
 800163e:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x10;
 8001640:	2310      	movs	r3, #16
 8001642:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x10;
 8001644:	2310      	movs	r3, #16
 8001646:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001658:	2300      	movs	r3, #0
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 800165c:	2301      	movs	r3, #1
 800165e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	2201      	movs	r2, #1
 800166c:	4619      	mov	r1, r3
 800166e:	4811      	ldr	r0, [pc, #68]	; (80016b4 <MX_RTC_Init+0x144>)
 8001670:	f006 fb98 	bl	8007da4 <HAL_RTC_SetAlarm_IT>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 800167a:	f000 fb03 	bl	8001c84 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800167e:	2300      	movs	r3, #0
 8001680:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001682:	2300      	movs	r3, #0
 8001684:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001686:	2300      	movs	r3, #0
 8001688:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
  sAlarm.Alarm = RTC_ALARM_B;
 800168e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	2201      	movs	r2, #1
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	; (80016b4 <MX_RTC_Init+0x144>)
 800169c:	f006 fb82 	bl	8007da4 <HAL_RTC_SetAlarm_IT>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 80016a6:	f000 faed 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	3748      	adds	r7, #72	; 0x48
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000324 	.word	0x20000324
 80016b8:	40002800 	.word	0x40002800

080016bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <MX_SPI1_Init+0x74>)
 80016c2:	4a1c      	ldr	r2, [pc, #112]	; (8001734 <MX_SPI1_Init+0x78>)
 80016c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_SPI1_Init+0x74>)
 80016c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <MX_SPI1_Init+0x74>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_SPI1_Init+0x74>)
 80016d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_SPI1_Init+0x74>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <MX_SPI1_Init+0x74>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_SPI1_Init+0x74>)
 80016ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_SPI1_Init+0x74>)
 80016f2:	2230      	movs	r2, #48	; 0x30
 80016f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_SPI1_Init+0x74>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_SPI1_Init+0x74>)
 80016fe:	2200      	movs	r2, #0
 8001700:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <MX_SPI1_Init+0x74>)
 8001704:	2200      	movs	r2, #0
 8001706:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_SPI1_Init+0x74>)
 800170a:	2207      	movs	r2, #7
 800170c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <MX_SPI1_Init+0x74>)
 8001710:	2200      	movs	r2, #0
 8001712:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_SPI1_Init+0x74>)
 8001716:	2208      	movs	r2, #8
 8001718:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_SPI1_Init+0x74>)
 800171c:	f006 fddf 	bl	80082de <HAL_SPI_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001726:	f000 faad 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000348 	.word	0x20000348
 8001734:	40013000 	.word	0x40013000

08001738 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173e:	f107 0310 	add.w	r3, r7, #16
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001756:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <MX_TIM2_Init+0x98>)
 8001758:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800175c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 319;
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <MX_TIM2_Init+0x98>)
 8001760:	f240 123f 	movw	r2, #319	; 0x13f
 8001764:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <MX_TIM2_Init+0x98>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800176c:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <MX_TIM2_Init+0x98>)
 800176e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001772:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001774:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <MX_TIM2_Init+0x98>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <MX_TIM2_Init+0x98>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001780:	4813      	ldr	r0, [pc, #76]	; (80017d0 <MX_TIM2_Init+0x98>)
 8001782:	f007 f9c7 	bl	8008b14 <HAL_TIM_Base_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800178c:	f000 fa7a 	bl	8001c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001794:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	4619      	mov	r1, r3
 800179c:	480c      	ldr	r0, [pc, #48]	; (80017d0 <MX_TIM2_Init+0x98>)
 800179e:	f007 fb84 	bl	8008eaa <HAL_TIM_ConfigClockSource>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80017a8:	f000 fa6c 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ac:	2300      	movs	r3, #0
 80017ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	4619      	mov	r1, r3
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_TIM2_Init+0x98>)
 80017ba:	f007 fd65 	bl	8009288 <HAL_TIMEx_MasterConfigSynchronization>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80017c4:	f000 fa5e 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	200003ac 	.word	0x200003ac

080017d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <MX_USART1_UART_Init+0x58>)
 80017da:	4a15      	ldr	r2, [pc, #84]	; (8001830 <MX_USART1_UART_Init+0x5c>)
 80017dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <MX_USART1_UART_Init+0x58>)
 80017e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_USART1_UART_Init+0x58>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <MX_USART1_UART_Init+0x58>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_USART1_UART_Init+0x58>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_USART1_UART_Init+0x58>)
 80017fa:	220c      	movs	r2, #12
 80017fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <MX_USART1_UART_Init+0x58>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_USART1_UART_Init+0x58>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <MX_USART1_UART_Init+0x58>)
 800180c:	2200      	movs	r2, #0
 800180e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_USART1_UART_Init+0x58>)
 8001812:	2200      	movs	r2, #0
 8001814:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_USART1_UART_Init+0x58>)
 8001818:	f007 fdba 	bl	8009390 <HAL_UART_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001822:	f000 fa2f 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200003f8 	.word	0x200003f8
 8001830:	40013800 	.word	0x40013800

08001834 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800183a:	4b0c      	ldr	r3, [pc, #48]	; (800186c <MX_DMA_Init+0x38>)
 800183c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800183e:	4a0b      	ldr	r2, [pc, #44]	; (800186c <MX_DMA_Init+0x38>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6493      	str	r3, [r2, #72]	; 0x48
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <MX_DMA_Init+0x38>)
 8001848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	200b      	movs	r0, #11
 8001858:	f003 fba3 	bl	8004fa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800185c:	200b      	movs	r0, #11
 800185e:	f003 fbbc 	bl	8004fda <HAL_NVIC_EnableIRQ>

}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000

08001870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001886:	4b31      	ldr	r3, [pc, #196]	; (800194c <MX_GPIO_Init+0xdc>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	4a30      	ldr	r2, [pc, #192]	; (800194c <MX_GPIO_Init+0xdc>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001892:	4b2e      	ldr	r3, [pc, #184]	; (800194c <MX_GPIO_Init+0xdc>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	4b2b      	ldr	r3, [pc, #172]	; (800194c <MX_GPIO_Init+0xdc>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a2:	4a2a      	ldr	r2, [pc, #168]	; (800194c <MX_GPIO_Init+0xdc>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018aa:	4b28      	ldr	r3, [pc, #160]	; (800194c <MX_GPIO_Init+0xdc>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	4b25      	ldr	r3, [pc, #148]	; (800194c <MX_GPIO_Init+0xdc>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ba:	4a24      	ldr	r2, [pc, #144]	; (800194c <MX_GPIO_Init+0xdc>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <MX_GPIO_Init+0xdc>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2120      	movs	r1, #32
 80018d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d6:	f003 ff89 	bl	80057ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80018da:	2200      	movs	r2, #0
 80018dc:	2108      	movs	r1, #8
 80018de:	481c      	ldr	r0, [pc, #112]	; (8001950 <MX_GPIO_Init+0xe0>)
 80018e0:	f003 ff84 	bl	80057ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80018e4:	2320      	movs	r3, #32
 80018e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	4619      	mov	r1, r3
 80018fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fe:	f003 fe0b 	bl	8005518 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001914:	2303      	movs	r3, #3
 8001916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	4619      	mov	r1, r3
 800191e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001922:	f003 fdf9 	bl	8005518 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001926:	2308      	movs	r3, #8
 8001928:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192a:	2301      	movs	r3, #1
 800192c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001936:	f107 030c 	add.w	r3, r7, #12
 800193a:	4619      	mov	r1, r3
 800193c:	4804      	ldr	r0, [pc, #16]	; (8001950 <MX_GPIO_Init+0xe0>)
 800193e:	f003 fdeb 	bl	8005518 <HAL_GPIO_Init>

}
 8001942:	bf00      	nop
 8001944:	3720      	adds	r7, #32
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000
 8001950:	48000400 	.word	0x48000400

08001954 <set_time>:

/* USER CODE BEGIN 4 */

// Set time of RTC
void set_time(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	sDate.Year = currentDateTime[0]; // For some reason the date is off by 8 years (TODO: Fix)
 800195a:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <set_time+0x60>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	70fb      	strb	r3, [r7, #3]
	sDate.Month = currentDateTime[1];
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <set_time+0x60>)
 8001962:	785b      	ldrb	r3, [r3, #1]
 8001964:	707b      	strb	r3, [r7, #1]
	sDate.Date = currentDateTime[2];
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <set_time+0x60>)
 8001968:	789b      	ldrb	r3, [r3, #2]
 800196a:	70bb      	strb	r3, [r7, #2]
	sTime.Hours = currentDateTime[3];
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <set_time+0x60>)
 800196e:	78db      	ldrb	r3, [r3, #3]
 8001970:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = currentDateTime[4];
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <set_time+0x60>)
 8001974:	791b      	ldrb	r3, [r3, #4]
 8001976:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = currentDateTime[5];
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <set_time+0x60>)
 800197a:	795b      	ldrb	r3, [r3, #5]
 800197c:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
//	sDate.WeekDay = RTC_WEEKDAY_THURSDAY; // day
//	sDate.Month = RTC_MONTH_AUGUST; // month

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	2200      	movs	r2, #0
 800198a:	4619      	mov	r1, r3
 800198c:	480a      	ldr	r0, [pc, #40]	; (80019b8 <set_time+0x64>)
 800198e:	f006 f83c 	bl	8007a0a <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001992:	463b      	mov	r3, r7
 8001994:	2200      	movs	r2, #0
 8001996:	4619      	mov	r1, r3
 8001998:	4807      	ldr	r0, [pc, #28]	; (80019b8 <set_time+0x64>)
 800199a:	f006 f92f 	bl	8007bfc <HAL_RTC_SetDate>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register (random value being written now)
 800199e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80019a2:	2101      	movs	r1, #1
 80019a4:	4804      	ldr	r0, [pc, #16]	; (80019b8 <set_time+0x64>)
 80019a6:	f006 fc81 	bl	80082ac <HAL_RTCEx_BKUPWrite>
	return;
 80019aa:	bf00      	nop
}
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200023c8 	.word	0x200023c8
 80019b8:	20000324 	.word	0x20000324

080019bc <get_time>:

// Get time of RTC
void get_time(char* currentTime) {
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b08d      	sub	sp, #52	; 0x34
 80019c0:	af04      	add	r7, sp, #16
 80019c2:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;
	// Get the RTC current Time
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80019c4:	f107 0308 	add.w	r3, r7, #8
 80019c8:	2200      	movs	r2, #0
 80019ca:	4619      	mov	r1, r3
 80019cc:	480f      	ldr	r0, [pc, #60]	; (8001a0c <get_time+0x50>)
 80019ce:	f006 f8b9 	bl	8007b44 <HAL_RTC_GetTime>
	//  Get the RTC current Date
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	2200      	movs	r2, #0
 80019d8:	4619      	mov	r1, r3
 80019da:	480c      	ldr	r0, [pc, #48]	; (8001a0c <get_time+0x50>)
 80019dc:	f006 f995 	bl	8007d0a <HAL_RTC_GetDate>

//	sprintf(currentTime, "%d-%02d-%02d %02d:%02d:%02d", 2000+gDate.Year, gDate.Month, gDate.Date, gTime.Hours, gTime.Minutes, gTime.Seconds);
	sprintf(currentTime, "%d-%02d-%02d %02d:%02d:%02d", 2022, gDate.Month, gDate.Date, gTime.Hours, gTime.Minutes, gTime.Seconds);
 80019e0:	7f7b      	ldrb	r3, [r7, #29]
 80019e2:	461c      	mov	r4, r3
 80019e4:	7fbb      	ldrb	r3, [r7, #30]
 80019e6:	7a3a      	ldrb	r2, [r7, #8]
 80019e8:	7a79      	ldrb	r1, [r7, #9]
 80019ea:	7ab8      	ldrb	r0, [r7, #10]
 80019ec:	9003      	str	r0, [sp, #12]
 80019ee:	9102      	str	r1, [sp, #8]
 80019f0:	9201      	str	r2, [sp, #4]
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	4623      	mov	r3, r4
 80019f6:	f240 72e6 	movw	r2, #2022	; 0x7e6
 80019fa:	4905      	ldr	r1, [pc, #20]	; (8001a10 <get_time+0x54>)
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f00a fdab 	bl	800c558 <siprintf>
	return;
 8001a02:	bf00      	nop
}
 8001a04:	3724      	adds	r7, #36	; 0x24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd90      	pop	{r4, r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000324 	.word	0x20000324
 8001a10:	0801013c 	.word	0x0801013c
 8001a14:	00000000 	.word	0x00000000

08001a18 <set_alarm_A>:


// Set Alarm A
void set_alarm_A(uint32_t secondsOffset) {
 8001a18:	b5b0      	push	{r4, r5, r7, lr}
 8001a1a:	b094      	sub	sp, #80	; 0x50
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef cDate;
	RTC_TimeTypeDef cTime;
	RTC_AlarmTypeDef sAlarm;

	// Get RTC current date and time
	HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BIN);
 8001a20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a24:	2200      	movs	r2, #0
 8001a26:	4619      	mov	r1, r3
 8001a28:	4845      	ldr	r0, [pc, #276]	; (8001b40 <set_alarm_A+0x128>)
 8001a2a:	f006 f88b 	bl	8007b44 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BIN);
 8001a2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a32:	2200      	movs	r2, #0
 8001a34:	4619      	mov	r1, r3
 8001a36:	4842      	ldr	r0, [pc, #264]	; (8001b40 <set_alarm_A+0x128>)
 8001a38:	f006 f967 	bl	8007d0a <HAL_RTC_GetDate>

	// Convert secondsOffset to hours, minutes, seconds according to current time
	secondsOffset += cTime.Hours*3600 + cTime.Minutes*60 + cTime.Seconds;
 8001a3c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001a40:	461a      	mov	r2, r3
 8001a42:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001a46:	fb03 f202 	mul.w	r2, r3, r2
 8001a4a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001a4e:	4619      	mov	r1, r3
 8001a50:	460b      	mov	r3, r1
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	1a5b      	subs	r3, r3, r1
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001a5e:	4413      	add	r3, r2
 8001a60:	461a      	mov	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	607b      	str	r3, [r7, #4]
	uint8_t hr_offset = (uint8_t) (secondsOffset/3600);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a36      	ldr	r2, [pc, #216]	; (8001b44 <set_alarm_A+0x12c>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	0adb      	lsrs	r3, r3, #11
 8001a72:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t min_offset = (uint8_t) ((secondsOffset-3600.0*hr_offset)/60.0);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7fe fd44 	bl	8000504 <__aeabi_ui2d>
 8001a7c:	4604      	mov	r4, r0
 8001a7e:	460d      	mov	r5, r1
 8001a80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fd4d 	bl	8000524 <__aeabi_i2d>
 8001a8a:	a32b      	add	r3, pc, #172	; (adr r3, 8001b38 <set_alarm_A+0x120>)
 8001a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a90:	f7fe fdb2 	bl	80005f8 <__aeabi_dmul>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4620      	mov	r0, r4
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	f7fe fbf4 	bl	8000288 <__aeabi_dsub>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <set_alarm_A+0x130>)
 8001aae:	f7fe fecd 	bl	800084c <__aeabi_ddiv>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f7ff f875 	bl	8000ba8 <__aeabi_d2uiz>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t sec_offset = (uint8_t) (secondsOffset-3600*hr_offset-60*min_offset);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001ad8:	4619      	mov	r1, r3
 8001ada:	0109      	lsls	r1, r1, #4
 8001adc:	1acb      	subs	r3, r1, r3
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	// TODO: adjust time for going into next date as well

	// Set alarm A to current date and time + offset provided
	sAlarm.AlarmTime.Hours = hr_offset;
 8001ae8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001aec:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = min_offset;
 8001aee:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001af2:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = sec_offset;
 8001af4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001af8:	72bb      	strb	r3, [r7, #10]
	sAlarm.AlarmTime.SubSeconds = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
	sAlarm.AlarmDateWeekDay = cDate.Date;
 8001b12:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001b16:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sAlarm.Alarm = RTC_ALARM_A;
 8001b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b1e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8001b20:	f107 0308 	add.w	r3, r7, #8
 8001b24:	2200      	movs	r2, #0
 8001b26:	4619      	mov	r1, r3
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <set_alarm_A+0x128>)
 8001b2a:	f006 f93b 	bl	8007da4 <HAL_RTC_SetAlarm_IT>

	return;
 8001b2e:	bf00      	nop
}
 8001b30:	3750      	adds	r7, #80	; 0x50
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bdb0      	pop	{r4, r5, r7, pc}
 8001b36:	bf00      	nop
 8001b38:	00000000 	.word	0x00000000
 8001b3c:	40ac2000 	.word	0x40ac2000
 8001b40:	20000324 	.word	0x20000324
 8001b44:	91a2b3c5 	.word	0x91a2b3c5
 8001b48:	404e0000 	.word	0x404e0000
 8001b4c:	00000000 	.word	0x00000000

08001b50 <set_alarm_B>:

// Set Alarm B
void set_alarm_B(uint32_t secondsOffset) {
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	b094      	sub	sp, #80	; 0x50
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef cDate;
	RTC_TimeTypeDef cTime;
	RTC_AlarmTypeDef sAlarm;

	// Get RTC current date and time
	HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BIN);
 8001b58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4845      	ldr	r0, [pc, #276]	; (8001c78 <set_alarm_B+0x128>)
 8001b62:	f005 ffef 	bl	8007b44 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BIN);
 8001b66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4842      	ldr	r0, [pc, #264]	; (8001c78 <set_alarm_B+0x128>)
 8001b70:	f006 f8cb 	bl	8007d0a <HAL_RTC_GetDate>

	// Convert secondsOffset to hours, minutes, seconds according to current time
	secondsOffset += cTime.Hours*3600 + cTime.Minutes*60 + cTime.Seconds;
 8001b74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001b78:	461a      	mov	r2, r3
 8001b7a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001b7e:	fb03 f202 	mul.w	r2, r3, r2
 8001b82:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001b86:	4619      	mov	r1, r3
 8001b88:	460b      	mov	r3, r1
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	1a5b      	subs	r3, r3, r1
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001b96:	4413      	add	r3, r2
 8001b98:	461a      	mov	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	607b      	str	r3, [r7, #4]
	uint8_t hr_offset = (uint8_t) (secondsOffset/3600);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a36      	ldr	r2, [pc, #216]	; (8001c7c <set_alarm_B+0x12c>)
 8001ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba8:	0adb      	lsrs	r3, r3, #11
 8001baa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t min_offset = (uint8_t) ((secondsOffset-3600.0*hr_offset)/60.0);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7fe fca8 	bl	8000504 <__aeabi_ui2d>
 8001bb4:	4604      	mov	r4, r0
 8001bb6:	460d      	mov	r5, r1
 8001bb8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fcb1 	bl	8000524 <__aeabi_i2d>
 8001bc2:	a32b      	add	r3, pc, #172	; (adr r3, 8001c70 <set_alarm_B+0x120>)
 8001bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc8:	f7fe fd16 	bl	80005f8 <__aeabi_dmul>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	f7fe fb58 	bl	8000288 <__aeabi_dsub>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	4b26      	ldr	r3, [pc, #152]	; (8001c80 <set_alarm_B+0x130>)
 8001be6:	f7fe fe31 	bl	800084c <__aeabi_ddiv>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7fe ffd9 	bl	8000ba8 <__aeabi_d2uiz>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t sec_offset = (uint8_t) (secondsOffset-3600*hr_offset-60*min_offset);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001c10:	4619      	mov	r1, r3
 8001c12:	0109      	lsls	r1, r1, #4
 8001c14:	1acb      	subs	r3, r1, r3
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	// TODO: adjust time for going into next date as well

	// Set alarm B to current date and time + offset provided
	sAlarm.AlarmTime.Hours = hr_offset;
 8001c20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c24:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = min_offset;
 8001c26:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001c2a:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = sec_offset;
 8001c2c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c30:	72bb      	strb	r3, [r7, #10]
	sAlarm.AlarmTime.SubSeconds = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
	sAlarm.AlarmDateWeekDay = cDate.Date;
 8001c4a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001c4e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sAlarm.Alarm = RTC_ALARM_B;
 8001c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8001c58:	f107 0308 	add.w	r3, r7, #8
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4805      	ldr	r0, [pc, #20]	; (8001c78 <set_alarm_B+0x128>)
 8001c62:	f006 f89f 	bl	8007da4 <HAL_RTC_SetAlarm_IT>

	return;
 8001c66:	bf00      	nop
}
 8001c68:	3750      	adds	r7, #80	; 0x50
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	00000000 	.word	0x00000000
 8001c74:	40ac2000 	.word	0x40ac2000
 8001c78:	20000324 	.word	0x20000324
 8001c7c:	91a2b3c5 	.word	0x91a2b3c5
 8001c80:	404e0000 	.word	0x404e0000

08001c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c88:	b672      	cpsid	i
}
 8001c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <Error_Handler+0x8>
	...

08001c90 <SIM_Handler>:
// Buffer to store all data. TODO: remove later
uint8_t allRX_Data[1000] = {0};
uint8_t allRX_Data_Index = 0;


void SIM_Handler(void) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0

	switch (simState) {
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <SIM_Handler+0x74>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b05      	cmp	r3, #5
 8001c9c:	d82d      	bhi.n	8001cfa <SIM_Handler+0x6a>
 8001c9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ca4 <SIM_Handler+0x14>)
 8001ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca4:	08001cbd 	.word	0x08001cbd
 8001ca8:	08001cc3 	.word	0x08001cc3
 8001cac:	08001cc9 	.word	0x08001cc9
 8001cb0:	08001ccf 	.word	0x08001ccf
 8001cb4:	08001cf1 	.word	0x08001cf1
 8001cb8:	08001cf7 	.word	0x08001cf7
		case SIM_INIT:
			SIM_Init();
 8001cbc:	f000 f864 	bl	8001d88 <SIM_Init>
			break;
 8001cc0:	e01e      	b.n	8001d00 <SIM_Handler+0x70>
		case SIM_UE_CHECK:
			SIM_UE_Check();
 8001cc2:	f000 f909 	bl	8001ed8 <SIM_UE_Check>
			break;
 8001cc6:	e01b      	b.n	8001d00 <SIM_Handler+0x70>
		case SIM_PDN_ACTIVATION:
			SIM_PDN_Activation();
 8001cc8:	f000 f98e 	bl	8001fe8 <SIM_PDN_Activation>
			break;
 8001ccc:	e018      	b.n	8001d00 <SIM_Handler+0x70>
		case SIM_HTTP_BUILD:
			if (!time_synced_flag) {
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <SIM_Handler+0x78>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d103      	bne.n	8001cde <SIM_Handler+0x4e>
				SIM_HTTP_Build(SIM_HTTP_MAKE_GET);
 8001cd6:	2005      	movs	r0, #5
 8001cd8:	f000 faca 	bl	8002270 <SIM_HTTP_Build>
			} else if (make_post_flag) {
				SIM_HTTP_Build(SIM_HTTP_MAKE_POST);
			}
			break;
 8001cdc:	e00f      	b.n	8001cfe <SIM_Handler+0x6e>
			} else if (make_post_flag) {
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <SIM_Handler+0x7c>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00a      	beq.n	8001cfe <SIM_Handler+0x6e>
				SIM_HTTP_Build(SIM_HTTP_MAKE_POST);
 8001ce8:	2004      	movs	r0, #4
 8001cea:	f000 fac1 	bl	8002270 <SIM_HTTP_Build>
			break;
 8001cee:	e006      	b.n	8001cfe <SIM_Handler+0x6e>
		case SIM_HTTP_MAKE_POST:
			SIM_HTTP_Make_Post();
 8001cf0:	f000 fc2a 	bl	8002548 <SIM_HTTP_Make_Post>
			break;
 8001cf4:	e004      	b.n	8001d00 <SIM_Handler+0x70>
		case SIM_HTTP_MAKE_GET:
			SIM_HTTP_Make_Get();
 8001cf6:	f000 fee9 	bl	8002acc <SIM_HTTP_Make_Get>
		default:
			break;
 8001cfa:	bf00      	nop
 8001cfc:	e000      	b.n	8001d00 <SIM_Handler+0x70>
			break;
 8001cfe:	bf00      	nop
	}


	return;
 8001d00:	bf00      	nop
}
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	2000000c 	.word	0x2000000c
 8001d08:	2000047c 	.word	0x2000047c
 8001d0c:	2000047e 	.word	0x2000047e

08001d10 <SIM_serialRX_Handler>:


void SIM_serialRX_Handler(uint8_t charReceived) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]

	serialRX_Buffer[serialRX_BufferIndex++] = charReceived;
 8001d1a:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <SIM_serialRX_Handler+0x64>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	b2d1      	uxtb	r1, r2
 8001d22:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <SIM_serialRX_Handler+0x64>)
 8001d24:	7011      	strb	r1, [r2, #0]
 8001d26:	4619      	mov	r1, r3
 8001d28:	4a13      	ldr	r2, [pc, #76]	; (8001d78 <SIM_serialRX_Handler+0x68>)
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	5453      	strb	r3, [r2, r1]

	//TODO: Remove later; Just for tracking
	allRX_Data[allRX_Data_Index++] = charReceived;
 8001d2e:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <SIM_serialRX_Handler+0x6c>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	b2d1      	uxtb	r1, r2
 8001d36:	4a11      	ldr	r2, [pc, #68]	; (8001d7c <SIM_serialRX_Handler+0x6c>)
 8001d38:	7011      	strb	r1, [r2, #0]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4a10      	ldr	r2, [pc, #64]	; (8001d80 <SIM_serialRX_Handler+0x70>)
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	5453      	strb	r3, [r2, r1]

	if ((charReceived == (uint8_t)'\n')) {
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	2b0a      	cmp	r3, #10
 8001d46:	d101      	bne.n	8001d4c <SIM_serialRX_Handler+0x3c>
		SIM_Handler();
 8001d48:	f7ff ffa2 	bl	8001c90 <SIM_Handler>
	}

	if (clearBuffer) { // reset index and clear buffer
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <SIM_serialRX_Handler+0x74>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00b      	beq.n	8001d6c <SIM_serialRX_Handler+0x5c>
		serialRX_BufferIndex = 0;
 8001d54:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <SIM_serialRX_Handler+0x64>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
		memset(serialRX_Buffer, 0, sizeof(serialRX_Buffer));
 8001d5a:	22fa      	movs	r2, #250	; 0xfa
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4806      	ldr	r0, [pc, #24]	; (8001d78 <SIM_serialRX_Handler+0x68>)
 8001d60:	f009 fc82 	bl	800b668 <memset>
		clearBuffer = 0;
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <SIM_serialRX_Handler+0x74>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
	}


	return;
 8001d6a:	bf00      	nop
 8001d6c:	bf00      	nop
}
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	2000257e 	.word	0x2000257e
 8001d78:	20002484 	.word	0x20002484
 8001d7c:	20002a70 	.word	0x20002a70
 8001d80:	20002688 	.word	0x20002688
 8001d84:	20002580 	.word	0x20002580

08001d88 <SIM_Init>:


void SIM_Init(void) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
	// ---------------------------- TX ------------------------------- //
	// 0: AT
	// 1: AT+CPIN?
	// All good state change: SIM_INIT to SIM_UE_CHECK

	uint8_t maxCommand = 1;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	71bb      	strb	r3, [r7, #6]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 8001d92:	4b44      	ldr	r3, [pc, #272]	; (8001ea4 <SIM_Init+0x11c>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d034      	beq.n	8001e04 <SIM_Init+0x7c>
 8001d9a:	79bb      	ldrb	r3, [r7, #6]
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	4b42      	ldr	r3, [pc, #264]	; (8001ea8 <SIM_Init+0x120>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d32d      	bcc.n	8001e04 <SIM_Init+0x7c>
		// Next command should be transmitted

		switch (commandIndex) {
 8001da8:	4b3f      	ldr	r3, [pc, #252]	; (8001ea8 <SIM_Init+0x120>)
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d002      	beq.n	8001db8 <SIM_Init+0x30>
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d014      	beq.n	8001de0 <SIM_Init+0x58>
				// Check SIM card status
				sprintf(ATcommand, "AT+CPIN?\r\n");
				HAL_UART_Transmit_IT(&huart1, (uint8_t*) ATcommand, strlen(ATcommand));
				break;
			default:
				break;
 8001db6:	e022      	b.n	8001dfe <SIM_Init+0x76>
				sprintf(ATcommand, "AT\r\n");
 8001db8:	493c      	ldr	r1, [pc, #240]	; (8001eac <SIM_Init+0x124>)
 8001dba:	483d      	ldr	r0, [pc, #244]	; (8001eb0 <SIM_Init+0x128>)
 8001dbc:	f00a fbcc 	bl	800c558 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8001dc0:	483b      	ldr	r0, [pc, #236]	; (8001eb0 <SIM_Init+0x128>)
 8001dc2:	f7fe fa05 	bl	80001d0 <strlen>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4938      	ldr	r1, [pc, #224]	; (8001eb0 <SIM_Init+0x128>)
 8001dce:	4839      	ldr	r0, [pc, #228]	; (8001eb4 <SIM_Init+0x12c>)
 8001dd0:	f007 fb2c 	bl	800942c <HAL_UART_Transmit_IT>
				HAL_UART_Receive_IT(&huart1, &serialRX_Data, 1);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	4938      	ldr	r1, [pc, #224]	; (8001eb8 <SIM_Init+0x130>)
 8001dd8:	4836      	ldr	r0, [pc, #216]	; (8001eb4 <SIM_Init+0x12c>)
 8001dda:	f007 fb95 	bl	8009508 <HAL_UART_Receive_IT>
				break;
 8001dde:	e00e      	b.n	8001dfe <SIM_Init+0x76>
				sprintf(ATcommand, "AT+CPIN?\r\n");
 8001de0:	4936      	ldr	r1, [pc, #216]	; (8001ebc <SIM_Init+0x134>)
 8001de2:	4833      	ldr	r0, [pc, #204]	; (8001eb0 <SIM_Init+0x128>)
 8001de4:	f00a fbb8 	bl	800c558 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t*) ATcommand, strlen(ATcommand));
 8001de8:	4831      	ldr	r0, [pc, #196]	; (8001eb0 <SIM_Init+0x128>)
 8001dea:	f7fe f9f1 	bl	80001d0 <strlen>
 8001dee:	4603      	mov	r3, r0
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	492e      	ldr	r1, [pc, #184]	; (8001eb0 <SIM_Init+0x128>)
 8001df6:	482f      	ldr	r0, [pc, #188]	; (8001eb4 <SIM_Init+0x12c>)
 8001df8:	f007 fb18 	bl	800942c <HAL_UART_Transmit_IT>
				break;
 8001dfc:	bf00      	nop
		}

		shouldTransmit = 0; // no transmission until response has been read
 8001dfe:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <SIM_Init+0x11c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]

	} // if shouldTransmit
	// --------------------------------------------------------------- //

	// ---------------------------- RX ------------------------------- //
	uint8_t isIncrementCommand = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	71fb      	strb	r3, [r7, #7]

	switch (commandIndex) {
 8001e08:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <SIM_Init+0x120>)
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <SIM_Init+0x90>
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d00a      	beq.n	8001e2c <SIM_Init+0xa4>
				isStateChanged = 1;
			}

			break;
		default:
			break;
 8001e16:	e01c      	b.n	8001e52 <SIM_Init+0xca>
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8001e18:	4929      	ldr	r1, [pc, #164]	; (8001ec0 <SIM_Init+0x138>)
 8001e1a:	482a      	ldr	r0, [pc, #168]	; (8001ec4 <SIM_Init+0x13c>)
 8001e1c:	f00a fbde 	bl	800c5dc <strstr>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d012      	beq.n	8001e4c <SIM_Init+0xc4>
				isIncrementCommand = 1; // Increment to go to next command
 8001e26:	2301      	movs	r3, #1
 8001e28:	71fb      	strb	r3, [r7, #7]
			break;
 8001e2a:	e00f      	b.n	8001e4c <SIM_Init+0xc4>
			if (strstr((char*) serialRX_Buffer, "+CPIN: READY\r\n\r\nOK\r\n")) {
 8001e2c:	4926      	ldr	r1, [pc, #152]	; (8001ec8 <SIM_Init+0x140>)
 8001e2e:	4825      	ldr	r0, [pc, #148]	; (8001ec4 <SIM_Init+0x13c>)
 8001e30:	f00a fbd4 	bl	800c5dc <strstr>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00a      	beq.n	8001e50 <SIM_Init+0xc8>
				isIncrementCommand = 1; // Increment to go to next command
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	71fb      	strb	r3, [r7, #7]
				simState = SIM_UE_CHECK;
 8001e3e:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <SIM_Init+0x144>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
				isStateChanged = 1;
 8001e44:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <SIM_Init+0x148>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	701a      	strb	r2, [r3, #0]
			break;
 8001e4a:	e001      	b.n	8001e50 <SIM_Init+0xc8>
			break;
 8001e4c:	bf00      	nop
 8001e4e:	e000      	b.n	8001e52 <SIM_Init+0xca>
			break;
 8001e50:	bf00      	nop
	}

	if (isIncrementCommand) {
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00e      	beq.n	8001e76 <SIM_Init+0xee>
		++commandIndex; // Next command
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <SIM_Init+0x120>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	3301      	adds	r3, #1
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <SIM_Init+0x120>)
 8001e64:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 8001e66:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <SIM_Init+0x14c>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <SIM_Init+0x11c>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	71fb      	strb	r3, [r7, #7]
	}

	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 8001e76:	79bb      	ldrb	r3, [r7, #6]
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <SIM_Init+0x120>)
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d304      	bcc.n	8001e8e <SIM_Init+0x106>
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <SIM_Init+0x148>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d006      	beq.n	8001e9c <SIM_Init+0x114>
		commandIndex = 0;
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <SIM_Init+0x120>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 8001e94:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <SIM_Init+0x148>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
	}


	return;
 8001e9a:	bf00      	nop
 8001e9c:	bf00      	nop
}
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	2000000d 	.word	0x2000000d
 8001ea8:	20002480 	.word	0x20002480
 8001eac:	08010158 	.word	0x08010158
 8001eb0:	2000241c 	.word	0x2000241c
 8001eb4:	200003f8 	.word	0x200003f8
 8001eb8:	2000257f 	.word	0x2000257f
 8001ebc:	08010160 	.word	0x08010160
 8001ec0:	0801016c 	.word	0x0801016c
 8001ec4:	20002484 	.word	0x20002484
 8001ec8:	08010174 	.word	0x08010174
 8001ecc:	2000000c 	.word	0x2000000c
 8001ed0:	20002482 	.word	0x20002482
 8001ed4:	20002580 	.word	0x20002580

08001ed8 <SIM_UE_Check>:


void SIM_UE_Check(void) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0

	// ---------------------------- TX ------------------------------- //
	// 0: AT+CPSI?

	uint8_t maxCommand = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	71bb      	strb	r3, [r7, #6]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 8001ee2:	4b36      	ldr	r3, [pc, #216]	; (8001fbc <SIM_UE_Check+0xe4>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d01e      	beq.n	8001f28 <SIM_UE_Check+0x50>
 8001eea:	79bb      	ldrb	r3, [r7, #6]
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	4b34      	ldr	r3, [pc, #208]	; (8001fc0 <SIM_UE_Check+0xe8>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d317      	bcc.n	8001f28 <SIM_UE_Check+0x50>
		// Next command should be transmitted
		switch (commandIndex) {
 8001ef8:	4b31      	ldr	r3, [pc, #196]	; (8001fc0 <SIM_UE_Check+0xe8>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10e      	bne.n	8001f20 <SIM_UE_Check+0x48>
			case 0:
				// Inquire UE system information
				sprintf(ATcommand, "AT+CPSI?\r\n");
 8001f02:	4930      	ldr	r1, [pc, #192]	; (8001fc4 <SIM_UE_Check+0xec>)
 8001f04:	4830      	ldr	r0, [pc, #192]	; (8001fc8 <SIM_UE_Check+0xf0>)
 8001f06:	f00a fb27 	bl	800c558 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8001f0a:	482f      	ldr	r0, [pc, #188]	; (8001fc8 <SIM_UE_Check+0xf0>)
 8001f0c:	f7fe f960 	bl	80001d0 <strlen>
 8001f10:	4603      	mov	r3, r0
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	492c      	ldr	r1, [pc, #176]	; (8001fc8 <SIM_UE_Check+0xf0>)
 8001f18:	482c      	ldr	r0, [pc, #176]	; (8001fcc <SIM_UE_Check+0xf4>)
 8001f1a:	f007 fa87 	bl	800942c <HAL_UART_Transmit_IT>
				break;
 8001f1e:	e000      	b.n	8001f22 <SIM_UE_Check+0x4a>
			default:
				break;
 8001f20:	bf00      	nop
		}
		shouldTransmit = 0;
 8001f22:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <SIM_UE_Check+0xe4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]


	// ---------------------------- RX ------------------------------- //
	// If NB-IoT is online, change from SIM_UE_CHECK to SIM_PDN_ACTIVATION
	// If NB-IoT is NOT online, change from SIM_UE_CHECK to SIM_CONNECT_NBIOT
	uint8_t isIncrementCommand = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	71fb      	strb	r3, [r7, #7]

	switch (commandIndex) {
 8001f2c:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <SIM_UE_Check+0xe8>)
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d116      	bne.n	8001f64 <SIM_UE_Check+0x8c>
			case 0:
				// OK should be received
				// +CPSI: LTE NB-IOT,Online should be received
				if ((strstr((char*) serialRX_Buffer, "\nOK\r\n")) && (strstr((char*) serialRX_Buffer, "+CPSI: LTE NB-IOT,Online"))) {
 8001f36:	4926      	ldr	r1, [pc, #152]	; (8001fd0 <SIM_UE_Check+0xf8>)
 8001f38:	4826      	ldr	r0, [pc, #152]	; (8001fd4 <SIM_UE_Check+0xfc>)
 8001f3a:	f00a fb4f 	bl	800c5dc <strstr>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d011      	beq.n	8001f68 <SIM_UE_Check+0x90>
 8001f44:	4924      	ldr	r1, [pc, #144]	; (8001fd8 <SIM_UE_Check+0x100>)
 8001f46:	4823      	ldr	r0, [pc, #140]	; (8001fd4 <SIM_UE_Check+0xfc>)
 8001f48:	f00a fb48 	bl	800c5dc <strstr>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00a      	beq.n	8001f68 <SIM_UE_Check+0x90>
					isIncrementCommand = 1; // Increment to go to next command
 8001f52:	2301      	movs	r3, #1
 8001f54:	71fb      	strb	r3, [r7, #7]
					simState = SIM_PDN_ACTIVATION;
 8001f56:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <SIM_UE_Check+0x104>)
 8001f58:	2202      	movs	r2, #2
 8001f5a:	701a      	strb	r2, [r3, #0]
					isStateChanged = 1;
 8001f5c:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <SIM_UE_Check+0x108>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
				// TODO: If NB-IoT is not online
//				[16:37:45.613] +CPSI: NO SERVICE,Online
//				[16:37:45.613]
//				[16:37:45.613] OK

				break;
 8001f62:	e001      	b.n	8001f68 <SIM_UE_Check+0x90>
			default:
				break;
 8001f64:	bf00      	nop
 8001f66:	e000      	b.n	8001f6a <SIM_UE_Check+0x92>
				break;
 8001f68:	bf00      	nop
		}

	if (isIncrementCommand) {
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00e      	beq.n	8001f8e <SIM_UE_Check+0xb6>
		++commandIndex; // Next command
 8001f70:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <SIM_UE_Check+0xe8>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	3301      	adds	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <SIM_UE_Check+0xe8>)
 8001f7c:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 8001f7e:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <SIM_UE_Check+0x10c>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 8001f84:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <SIM_UE_Check+0xe4>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	71fb      	strb	r3, [r7, #7]
	}
	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 8001f8e:	79bb      	ldrb	r3, [r7, #6]
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <SIM_UE_Check+0xe8>)
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d304      	bcc.n	8001fa6 <SIM_UE_Check+0xce>
 8001f9c:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <SIM_UE_Check+0x108>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d006      	beq.n	8001fb4 <SIM_UE_Check+0xdc>
		commandIndex = 0;
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <SIM_UE_Check+0xe8>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <SIM_UE_Check+0x108>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
	}


	return;
 8001fb2:	bf00      	nop
 8001fb4:	bf00      	nop
}
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	2000000d 	.word	0x2000000d
 8001fc0:	20002480 	.word	0x20002480
 8001fc4:	0801018c 	.word	0x0801018c
 8001fc8:	2000241c 	.word	0x2000241c
 8001fcc:	200003f8 	.word	0x200003f8
 8001fd0:	0801016c 	.word	0x0801016c
 8001fd4:	20002484 	.word	0x20002484
 8001fd8:	08010198 	.word	0x08010198
 8001fdc:	2000000c 	.word	0x2000000c
 8001fe0:	20002482 	.word	0x20002482
 8001fe4:	20002580 	.word	0x20002580

08001fe8 <SIM_PDN_Activation>:



void SIM_PDN_Activation(void) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
	// 1: AT+COPS? - Network information, operator and network
	// 2: AT+CGNAPN - Query APN delivered by the network
	// 3: AT+CNACT? - Get local IP
	// 4: AT+CNACT=0,1 - Activate 0th PDP

	uint8_t maxCommand = 4;
 8001fee:	2304      	movs	r3, #4
 8001ff0:	71bb      	strb	r3, [r7, #6]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 8001ff2:	4b8b      	ldr	r3, [pc, #556]	; (8002220 <SIM_PDN_Activation+0x238>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d067      	beq.n	80020ca <SIM_PDN_Activation+0xe2>
 8001ffa:	79bb      	ldrb	r3, [r7, #6]
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	4b89      	ldr	r3, [pc, #548]	; (8002224 <SIM_PDN_Activation+0x23c>)
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	429a      	cmp	r2, r3
 8002006:	d360      	bcc.n	80020ca <SIM_PDN_Activation+0xe2>
		// Next command should be transmitted
		switch (commandIndex) {
 8002008:	4b86      	ldr	r3, [pc, #536]	; (8002224 <SIM_PDN_Activation+0x23c>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	b29b      	uxth	r3, r3
 800200e:	2b04      	cmp	r3, #4
 8002010:	d857      	bhi.n	80020c2 <SIM_PDN_Activation+0xda>
 8002012:	a201      	add	r2, pc, #4	; (adr r2, 8002018 <SIM_PDN_Activation+0x30>)
 8002014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002018:	0800202d 	.word	0x0800202d
 800201c:	0800204b 	.word	0x0800204b
 8002020:	08002069 	.word	0x08002069
 8002024:	08002087 	.word	0x08002087
 8002028:	080020a5 	.word	0x080020a5
			case 0:
				// Check PS service
				sprintf(ATcommand, "AT+CGATT?\r\n");
 800202c:	497e      	ldr	r1, [pc, #504]	; (8002228 <SIM_PDN_Activation+0x240>)
 800202e:	487f      	ldr	r0, [pc, #508]	; (800222c <SIM_PDN_Activation+0x244>)
 8002030:	f00a fa92 	bl	800c558 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8002034:	487d      	ldr	r0, [pc, #500]	; (800222c <SIM_PDN_Activation+0x244>)
 8002036:	f7fe f8cb 	bl	80001d0 <strlen>
 800203a:	4603      	mov	r3, r0
 800203c:	b29b      	uxth	r3, r3
 800203e:	461a      	mov	r2, r3
 8002040:	497a      	ldr	r1, [pc, #488]	; (800222c <SIM_PDN_Activation+0x244>)
 8002042:	487b      	ldr	r0, [pc, #492]	; (8002230 <SIM_PDN_Activation+0x248>)
 8002044:	f007 f9f2 	bl	800942c <HAL_UART_Transmit_IT>
				break;
 8002048:	e03c      	b.n	80020c4 <SIM_PDN_Activation+0xdc>

			case 1:
				// Network information
				sprintf(ATcommand, "AT+COPS?\r\n");
 800204a:	497a      	ldr	r1, [pc, #488]	; (8002234 <SIM_PDN_Activation+0x24c>)
 800204c:	4877      	ldr	r0, [pc, #476]	; (800222c <SIM_PDN_Activation+0x244>)
 800204e:	f00a fa83 	bl	800c558 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8002052:	4876      	ldr	r0, [pc, #472]	; (800222c <SIM_PDN_Activation+0x244>)
 8002054:	f7fe f8bc 	bl	80001d0 <strlen>
 8002058:	4603      	mov	r3, r0
 800205a:	b29b      	uxth	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	4973      	ldr	r1, [pc, #460]	; (800222c <SIM_PDN_Activation+0x244>)
 8002060:	4873      	ldr	r0, [pc, #460]	; (8002230 <SIM_PDN_Activation+0x248>)
 8002062:	f007 f9e3 	bl	800942c <HAL_UART_Transmit_IT>
				break;
 8002066:	e02d      	b.n	80020c4 <SIM_PDN_Activation+0xdc>

			case 2:
				// Network APN
				sprintf(ATcommand, "AT+CGNAPN\r\n");
 8002068:	4973      	ldr	r1, [pc, #460]	; (8002238 <SIM_PDN_Activation+0x250>)
 800206a:	4870      	ldr	r0, [pc, #448]	; (800222c <SIM_PDN_Activation+0x244>)
 800206c:	f00a fa74 	bl	800c558 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8002070:	486e      	ldr	r0, [pc, #440]	; (800222c <SIM_PDN_Activation+0x244>)
 8002072:	f7fe f8ad 	bl	80001d0 <strlen>
 8002076:	4603      	mov	r3, r0
 8002078:	b29b      	uxth	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	496b      	ldr	r1, [pc, #428]	; (800222c <SIM_PDN_Activation+0x244>)
 800207e:	486c      	ldr	r0, [pc, #432]	; (8002230 <SIM_PDN_Activation+0x248>)
 8002080:	f007 f9d4 	bl	800942c <HAL_UART_Transmit_IT>
				break;
 8002084:	e01e      	b.n	80020c4 <SIM_PDN_Activation+0xdc>

			case 3:
				// Local IP (to check if need to activate network)
				sprintf(ATcommand, "AT+CNACT?\r\n");
 8002086:	496d      	ldr	r1, [pc, #436]	; (800223c <SIM_PDN_Activation+0x254>)
 8002088:	4868      	ldr	r0, [pc, #416]	; (800222c <SIM_PDN_Activation+0x244>)
 800208a:	f00a fa65 	bl	800c558 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 800208e:	4867      	ldr	r0, [pc, #412]	; (800222c <SIM_PDN_Activation+0x244>)
 8002090:	f7fe f89e 	bl	80001d0 <strlen>
 8002094:	4603      	mov	r3, r0
 8002096:	b29b      	uxth	r3, r3
 8002098:	461a      	mov	r2, r3
 800209a:	4964      	ldr	r1, [pc, #400]	; (800222c <SIM_PDN_Activation+0x244>)
 800209c:	4864      	ldr	r0, [pc, #400]	; (8002230 <SIM_PDN_Activation+0x248>)
 800209e:	f007 f9c5 	bl	800942c <HAL_UART_Transmit_IT>
				break;
 80020a2:	e00f      	b.n	80020c4 <SIM_PDN_Activation+0xdc>

			case 4:
				// Activate network, Activate 0th PDP.
				sprintf(ATcommand, "AT+CNACT=0,1\r\n");
 80020a4:	4966      	ldr	r1, [pc, #408]	; (8002240 <SIM_PDN_Activation+0x258>)
 80020a6:	4861      	ldr	r0, [pc, #388]	; (800222c <SIM_PDN_Activation+0x244>)
 80020a8:	f00a fa56 	bl	800c558 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 80020ac:	485f      	ldr	r0, [pc, #380]	; (800222c <SIM_PDN_Activation+0x244>)
 80020ae:	f7fe f88f 	bl	80001d0 <strlen>
 80020b2:	4603      	mov	r3, r0
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	495c      	ldr	r1, [pc, #368]	; (800222c <SIM_PDN_Activation+0x244>)
 80020ba:	485d      	ldr	r0, [pc, #372]	; (8002230 <SIM_PDN_Activation+0x248>)
 80020bc:	f007 f9b6 	bl	800942c <HAL_UART_Transmit_IT>
				break;
 80020c0:	e000      	b.n	80020c4 <SIM_PDN_Activation+0xdc>


			default:
				break;
 80020c2:	bf00      	nop
		}
		shouldTransmit = 0;
 80020c4:	4b56      	ldr	r3, [pc, #344]	; (8002220 <SIM_PDN_Activation+0x238>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]



	// ---------------------------- RX ------------------------------- //

	uint8_t isIncrementCommand = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	71fb      	strb	r3, [r7, #7]

	switch (commandIndex) {
 80020ce:	4b55      	ldr	r3, [pc, #340]	; (8002224 <SIM_PDN_Activation+0x23c>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d871      	bhi.n	80021bc <SIM_PDN_Activation+0x1d4>
 80020d8:	a201      	add	r2, pc, #4	; (adr r2, 80020e0 <SIM_PDN_Activation+0xf8>)
 80020da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020de:	bf00      	nop
 80020e0:	080020f5 	.word	0x080020f5
 80020e4:	08002109 	.word	0x08002109
 80020e8:	0800211d 	.word	0x0800211d
 80020ec:	0800212f 	.word	0x0800212f
 80020f0:	08002195 	.word	0x08002195
			case 0:
				// CGATT: 1\r\n\r\nOK\r\n - Has attached
				if ( strstr((char*) serialRX_Buffer, "CGATT: 1\r\n\r\nOK\r\n") ) {
 80020f4:	4953      	ldr	r1, [pc, #332]	; (8002244 <SIM_PDN_Activation+0x25c>)
 80020f6:	4854      	ldr	r0, [pc, #336]	; (8002248 <SIM_PDN_Activation+0x260>)
 80020f8:	f00a fa70 	bl	800c5dc <strstr>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d05e      	beq.n	80021c0 <SIM_PDN_Activation+0x1d8>
					isIncrementCommand = 1; // Increment to go to next command
 8002102:	2301      	movs	r3, #1
 8002104:	71fb      	strb	r3, [r7, #7]
				}

				// TODO: If not attached to PS service
				break;
 8002106:	e05b      	b.n	80021c0 <SIM_PDN_Activation+0x1d8>

			case 1:
				// +COPS?\r\r\n+COPS: 1,0,\"VodaCom-SA\",9\r\n\r\nOK\r\n - 9: NB-IoT Network
				if (strstr((char*) serialRX_Buffer, "+COPS?\r\r\n+COPS: 1,0,\"VodaCom-SA\",9\r\n\r\nOK\r\n") ) {
 8002108:	4950      	ldr	r1, [pc, #320]	; (800224c <SIM_PDN_Activation+0x264>)
 800210a:	484f      	ldr	r0, [pc, #316]	; (8002248 <SIM_PDN_Activation+0x260>)
 800210c:	f00a fa66 	bl	800c5dc <strstr>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d056      	beq.n	80021c4 <SIM_PDN_Activation+0x1dc>
					isIncrementCommand = 1;
 8002116:	2301      	movs	r3, #1
 8002118:	71fb      	strb	r3, [r7, #7]
				}

				// TODO: If network information is wrong
				break;
 800211a:	e053      	b.n	80021c4 <SIM_PDN_Activation+0x1dc>

			case 2:
				// +CGNAPN: 1,\"internet\"\r\n\r\nOK\r\n
				if ( strstr((char*) serialRX_Buffer, "+CGNAPN: 1,\"internet\"\r\n\r\nOK\r\n") ) {
 800211c:	494c      	ldr	r1, [pc, #304]	; (8002250 <SIM_PDN_Activation+0x268>)
 800211e:	484a      	ldr	r0, [pc, #296]	; (8002248 <SIM_PDN_Activation+0x260>)
 8002120:	f00a fa5c 	bl	800c5dc <strstr>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <SIM_PDN_Activation+0x146>
					isIncrementCommand = 1;
 800212a:	2301      	movs	r3, #1
 800212c:	71fb      	strb	r3, [r7, #7]
				}

			case 3:
				// +CNACT: 0,0,\"0.0.0.0\" - Not activated
				// \r\nOK\r\n - End of response
				if ( (strstr((char*) serialRX_Buffer, "+CNACT: 0,0,\"0.0.0.0\"")) && (strstr((char*) serialRX_Buffer, "\r\nOK\r\n")) ) {
 800212e:	4949      	ldr	r1, [pc, #292]	; (8002254 <SIM_PDN_Activation+0x26c>)
 8002130:	4845      	ldr	r0, [pc, #276]	; (8002248 <SIM_PDN_Activation+0x260>)
 8002132:	f00a fa53 	bl	800c5dc <strstr>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d010      	beq.n	800215e <SIM_PDN_Activation+0x176>
 800213c:	4946      	ldr	r1, [pc, #280]	; (8002258 <SIM_PDN_Activation+0x270>)
 800213e:	4842      	ldr	r0, [pc, #264]	; (8002248 <SIM_PDN_Activation+0x260>)
 8002140:	f00a fa4c 	bl	800c5dc <strstr>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d009      	beq.n	800215e <SIM_PDN_Activation+0x176>
					// Set to correct command for activation; Clear buffer; Enable transmit next command
					commandIndex = 4;
 800214a:	4b36      	ldr	r3, [pc, #216]	; (8002224 <SIM_PDN_Activation+0x23c>)
 800214c:	2204      	movs	r2, #4
 800214e:	801a      	strh	r2, [r3, #0]
					clearBuffer = 1;
 8002150:	4b42      	ldr	r3, [pc, #264]	; (800225c <SIM_PDN_Activation+0x274>)
 8002152:	2201      	movs	r2, #1
 8002154:	701a      	strb	r2, [r3, #0]
					shouldTransmit = 1;
 8002156:	4b32      	ldr	r3, [pc, #200]	; (8002220 <SIM_PDN_Activation+0x238>)
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]
					simState = SIM_HTTP_BUILD;
					isStateChanged = 1;
					clearBuffer = 1;
					shouldTransmit = 1;
				}
				break;
 800215c:	e034      	b.n	80021c8 <SIM_PDN_Activation+0x1e0>
				else if ( (strstr((char*) serialRX_Buffer, "\r\n+CNACT: 0,1,")) && (strstr((char*) serialRX_Buffer, "\r\nOK\r\n"))) {
 800215e:	4940      	ldr	r1, [pc, #256]	; (8002260 <SIM_PDN_Activation+0x278>)
 8002160:	4839      	ldr	r0, [pc, #228]	; (8002248 <SIM_PDN_Activation+0x260>)
 8002162:	f00a fa3b 	bl	800c5dc <strstr>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d02d      	beq.n	80021c8 <SIM_PDN_Activation+0x1e0>
 800216c:	493a      	ldr	r1, [pc, #232]	; (8002258 <SIM_PDN_Activation+0x270>)
 800216e:	4836      	ldr	r0, [pc, #216]	; (8002248 <SIM_PDN_Activation+0x260>)
 8002170:	f00a fa34 	bl	800c5dc <strstr>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d026      	beq.n	80021c8 <SIM_PDN_Activation+0x1e0>
					simState = SIM_HTTP_BUILD;
 800217a:	4b3a      	ldr	r3, [pc, #232]	; (8002264 <SIM_PDN_Activation+0x27c>)
 800217c:	2203      	movs	r2, #3
 800217e:	701a      	strb	r2, [r3, #0]
					isStateChanged = 1;
 8002180:	4b39      	ldr	r3, [pc, #228]	; (8002268 <SIM_PDN_Activation+0x280>)
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
					clearBuffer = 1;
 8002186:	4b35      	ldr	r3, [pc, #212]	; (800225c <SIM_PDN_Activation+0x274>)
 8002188:	2201      	movs	r2, #1
 800218a:	701a      	strb	r2, [r3, #0]
					shouldTransmit = 1;
 800218c:	4b24      	ldr	r3, [pc, #144]	; (8002220 <SIM_PDN_Activation+0x238>)
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
				break;
 8002192:	e019      	b.n	80021c8 <SIM_PDN_Activation+0x1e0>

			case 4:
				// +APP PDP: 0,ACTIVE\r\n - Activated
				if ( strstr((char*) serialRX_Buffer, "+APP PDP: 0,ACTIVE\r\n") ) {
 8002194:	4935      	ldr	r1, [pc, #212]	; (800226c <SIM_PDN_Activation+0x284>)
 8002196:	482c      	ldr	r0, [pc, #176]	; (8002248 <SIM_PDN_Activation+0x260>)
 8002198:	f00a fa20 	bl	800c5dc <strstr>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d014      	beq.n	80021cc <SIM_PDN_Activation+0x1e4>
					// Successful network activation
					// Change state; Clear buffer; Enable transmit
					simState = SIM_HTTP_BUILD;
 80021a2:	4b30      	ldr	r3, [pc, #192]	; (8002264 <SIM_PDN_Activation+0x27c>)
 80021a4:	2203      	movs	r2, #3
 80021a6:	701a      	strb	r2, [r3, #0]
					isStateChanged = 1;
 80021a8:	4b2f      	ldr	r3, [pc, #188]	; (8002268 <SIM_PDN_Activation+0x280>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
					clearBuffer = 1;
 80021ae:	4b2b      	ldr	r3, [pc, #172]	; (800225c <SIM_PDN_Activation+0x274>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	701a      	strb	r2, [r3, #0]
					shouldTransmit = 1;
 80021b4:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <SIM_PDN_Activation+0x238>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	701a      	strb	r2, [r3, #0]
				}
				break;
 80021ba:	e007      	b.n	80021cc <SIM_PDN_Activation+0x1e4>

			default:
				break;
 80021bc:	bf00      	nop
 80021be:	e006      	b.n	80021ce <SIM_PDN_Activation+0x1e6>
				break;
 80021c0:	bf00      	nop
 80021c2:	e004      	b.n	80021ce <SIM_PDN_Activation+0x1e6>
				break;
 80021c4:	bf00      	nop
 80021c6:	e002      	b.n	80021ce <SIM_PDN_Activation+0x1e6>
				break;
 80021c8:	bf00      	nop
 80021ca:	e000      	b.n	80021ce <SIM_PDN_Activation+0x1e6>
				break;
 80021cc:	bf00      	nop
		}

	if (isIncrementCommand) {
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00e      	beq.n	80021f2 <SIM_PDN_Activation+0x20a>
		++commandIndex; // Next command
 80021d4:	4b13      	ldr	r3, [pc, #76]	; (8002224 <SIM_PDN_Activation+0x23c>)
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	b29b      	uxth	r3, r3
 80021da:	3301      	adds	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <SIM_PDN_Activation+0x23c>)
 80021e0:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 80021e2:	4b1e      	ldr	r3, [pc, #120]	; (800225c <SIM_PDN_Activation+0x274>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 80021e8:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <SIM_PDN_Activation+0x238>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	71fb      	strb	r3, [r7, #7]
	}
	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 80021f2:	79bb      	ldrb	r3, [r7, #6]
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <SIM_PDN_Activation+0x23c>)
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d304      	bcc.n	800220a <SIM_PDN_Activation+0x222>
 8002200:	4b19      	ldr	r3, [pc, #100]	; (8002268 <SIM_PDN_Activation+0x280>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d006      	beq.n	8002218 <SIM_PDN_Activation+0x230>
		commandIndex = 0;
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <SIM_PDN_Activation+0x23c>)
 800220c:	2200      	movs	r2, #0
 800220e:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 8002210:	4b15      	ldr	r3, [pc, #84]	; (8002268 <SIM_PDN_Activation+0x280>)
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
	}


	return;
 8002216:	bf00      	nop
 8002218:	bf00      	nop
}
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	2000000d 	.word	0x2000000d
 8002224:	20002480 	.word	0x20002480
 8002228:	080101b4 	.word	0x080101b4
 800222c:	2000241c 	.word	0x2000241c
 8002230:	200003f8 	.word	0x200003f8
 8002234:	080101c0 	.word	0x080101c0
 8002238:	080101cc 	.word	0x080101cc
 800223c:	080101d8 	.word	0x080101d8
 8002240:	080101e4 	.word	0x080101e4
 8002244:	080101f4 	.word	0x080101f4
 8002248:	20002484 	.word	0x20002484
 800224c:	08010208 	.word	0x08010208
 8002250:	08010234 	.word	0x08010234
 8002254:	08010254 	.word	0x08010254
 8002258:	0801026c 	.word	0x0801026c
 800225c:	20002580 	.word	0x20002580
 8002260:	08010274 	.word	0x08010274
 8002264:	2000000c 	.word	0x2000000c
 8002268:	20002482 	.word	0x20002482
 800226c:	08010284 	.word	0x08010284

08002270 <SIM_HTTP_Build>:

// nextState: State to go in next (POST or GET)
void SIM_HTTP_Build(simStateType nextState) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
	// 4: AT+SHCONF="HEADERLEN",350 - Set HTTP head length
	// 5: AT+SHCONN - HTTP build (retry if unsuccessful)
	// Change to either HTTP_MAKE_GET or to HTTP_MAKE_POST


	uint8_t maxCommand = 5;
 800227a:	2305      	movs	r3, #5
 800227c:	73bb      	strb	r3, [r7, #14]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 800227e:	4b9e      	ldr	r3, [pc, #632]	; (80024f8 <SIM_HTTP_Build+0x288>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d07b      	beq.n	800237e <SIM_HTTP_Build+0x10e>
 8002286:	7bbb      	ldrb	r3, [r7, #14]
 8002288:	b29a      	uxth	r2, r3
 800228a:	4b9c      	ldr	r3, [pc, #624]	; (80024fc <SIM_HTTP_Build+0x28c>)
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	b29b      	uxth	r3, r3
 8002290:	429a      	cmp	r2, r3
 8002292:	d374      	bcc.n	800237e <SIM_HTTP_Build+0x10e>
		// Next command should be transmitted

		switch (commandIndex) {
 8002294:	4b99      	ldr	r3, [pc, #612]	; (80024fc <SIM_HTTP_Build+0x28c>)
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b05      	cmp	r3, #5
 800229c:	d86b      	bhi.n	8002376 <SIM_HTTP_Build+0x106>
 800229e:	a201      	add	r2, pc, #4	; (adr r2, 80022a4 <SIM_HTTP_Build+0x34>)
 80022a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a4:	080022bd 	.word	0x080022bd
 80022a8:	080022db 	.word	0x080022db
 80022ac:	080022f9 	.word	0x080022f9
 80022b0:	08002317 	.word	0x08002317
 80022b4:	08002335 	.word	0x08002335
 80022b8:	08002353 	.word	0x08002353
			case 0:
				// Check if HTTP is connected
				sprintf(ATcommand, "AT+SHSTATE?\r\n");
 80022bc:	4990      	ldr	r1, [pc, #576]	; (8002500 <SIM_HTTP_Build+0x290>)
 80022be:	4891      	ldr	r0, [pc, #580]	; (8002504 <SIM_HTTP_Build+0x294>)
 80022c0:	f00a f94a 	bl	800c558 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 80022c4:	488f      	ldr	r0, [pc, #572]	; (8002504 <SIM_HTTP_Build+0x294>)
 80022c6:	f7fd ff83 	bl	80001d0 <strlen>
 80022ca:	4603      	mov	r3, r0
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	461a      	mov	r2, r3
 80022d0:	498c      	ldr	r1, [pc, #560]	; (8002504 <SIM_HTTP_Build+0x294>)
 80022d2:	488d      	ldr	r0, [pc, #564]	; (8002508 <SIM_HTTP_Build+0x298>)
 80022d4:	f007 f8aa 	bl	800942c <HAL_UART_Transmit_IT>
				break;
 80022d8:	e04e      	b.n	8002378 <SIM_HTTP_Build+0x108>

			case 1:
				// Disconnect HTTP
				sprintf(ATcommand, "AT+SHDISC\r\n");
 80022da:	498c      	ldr	r1, [pc, #560]	; (800250c <SIM_HTTP_Build+0x29c>)
 80022dc:	4889      	ldr	r0, [pc, #548]	; (8002504 <SIM_HTTP_Build+0x294>)
 80022de:	f00a f93b 	bl	800c558 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 80022e2:	4888      	ldr	r0, [pc, #544]	; (8002504 <SIM_HTTP_Build+0x294>)
 80022e4:	f7fd ff74 	bl	80001d0 <strlen>
 80022e8:	4603      	mov	r3, r0
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	4985      	ldr	r1, [pc, #532]	; (8002504 <SIM_HTTP_Build+0x294>)
 80022f0:	4885      	ldr	r0, [pc, #532]	; (8002508 <SIM_HTTP_Build+0x298>)
 80022f2:	f007 f89b 	bl	800942c <HAL_UART_Transmit_IT>
				break;
 80022f6:	e03f      	b.n	8002378 <SIM_HTTP_Build+0x108>

			case 2:
				// Set up server URL
				sprintf(ATcommand, "AT+SHCONF=\"URL\",\"http://riversense.herokuapp.com\"\r\n");
 80022f8:	4985      	ldr	r1, [pc, #532]	; (8002510 <SIM_HTTP_Build+0x2a0>)
 80022fa:	4882      	ldr	r0, [pc, #520]	; (8002504 <SIM_HTTP_Build+0x294>)
 80022fc:	f00a f92c 	bl	800c558 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 8002300:	4880      	ldr	r0, [pc, #512]	; (8002504 <SIM_HTTP_Build+0x294>)
 8002302:	f7fd ff65 	bl	80001d0 <strlen>
 8002306:	4603      	mov	r3, r0
 8002308:	b29b      	uxth	r3, r3
 800230a:	461a      	mov	r2, r3
 800230c:	497d      	ldr	r1, [pc, #500]	; (8002504 <SIM_HTTP_Build+0x294>)
 800230e:	487e      	ldr	r0, [pc, #504]	; (8002508 <SIM_HTTP_Build+0x298>)
 8002310:	f007 f88c 	bl	800942c <HAL_UART_Transmit_IT>
				break;
 8002314:	e030      	b.n	8002378 <SIM_HTTP_Build+0x108>

			case 3:
				// Set HTTP body length
				sprintf(ATcommand, "AT+SHCONF=\"BODYLEN\",1024\r\n");
 8002316:	497f      	ldr	r1, [pc, #508]	; (8002514 <SIM_HTTP_Build+0x2a4>)
 8002318:	487a      	ldr	r0, [pc, #488]	; (8002504 <SIM_HTTP_Build+0x294>)
 800231a:	f00a f91d 	bl	800c558 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 800231e:	4879      	ldr	r0, [pc, #484]	; (8002504 <SIM_HTTP_Build+0x294>)
 8002320:	f7fd ff56 	bl	80001d0 <strlen>
 8002324:	4603      	mov	r3, r0
 8002326:	b29b      	uxth	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	4976      	ldr	r1, [pc, #472]	; (8002504 <SIM_HTTP_Build+0x294>)
 800232c:	4876      	ldr	r0, [pc, #472]	; (8002508 <SIM_HTTP_Build+0x298>)
 800232e:	f007 f87d 	bl	800942c <HAL_UART_Transmit_IT>
				break;
 8002332:	e021      	b.n	8002378 <SIM_HTTP_Build+0x108>

			case 4:
				// Set HTTP head length
				sprintf(ATcommand, "AT+SHCONF=\"HEADERLEN\",350\r\n");
 8002334:	4978      	ldr	r1, [pc, #480]	; (8002518 <SIM_HTTP_Build+0x2a8>)
 8002336:	4873      	ldr	r0, [pc, #460]	; (8002504 <SIM_HTTP_Build+0x294>)
 8002338:	f00a f90e 	bl	800c558 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 800233c:	4871      	ldr	r0, [pc, #452]	; (8002504 <SIM_HTTP_Build+0x294>)
 800233e:	f7fd ff47 	bl	80001d0 <strlen>
 8002342:	4603      	mov	r3, r0
 8002344:	b29b      	uxth	r3, r3
 8002346:	461a      	mov	r2, r3
 8002348:	496e      	ldr	r1, [pc, #440]	; (8002504 <SIM_HTTP_Build+0x294>)
 800234a:	486f      	ldr	r0, [pc, #444]	; (8002508 <SIM_HTTP_Build+0x298>)
 800234c:	f007 f86e 	bl	800942c <HAL_UART_Transmit_IT>
				break;
 8002350:	e012      	b.n	8002378 <SIM_HTTP_Build+0x108>

			case 5:
				// HTTP connect (retry if unsuccessful)
				sprintf(ATcommand, "AT+SHCONN\r\n");
 8002352:	4972      	ldr	r1, [pc, #456]	; (800251c <SIM_HTTP_Build+0x2ac>)
 8002354:	486b      	ldr	r0, [pc, #428]	; (8002504 <SIM_HTTP_Build+0x294>)
 8002356:	f00a f8ff 	bl	800c558 <siprintf>
				HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand));
 800235a:	486a      	ldr	r0, [pc, #424]	; (8002504 <SIM_HTTP_Build+0x294>)
 800235c:	f7fd ff38 	bl	80001d0 <strlen>
 8002360:	4603      	mov	r3, r0
 8002362:	b29b      	uxth	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	4967      	ldr	r1, [pc, #412]	; (8002504 <SIM_HTTP_Build+0x294>)
 8002368:	4867      	ldr	r0, [pc, #412]	; (8002508 <SIM_HTTP_Build+0x298>)
 800236a:	f007 f85f 	bl	800942c <HAL_UART_Transmit_IT>
				isLD3_Flicker = 0; // TODO: remove later
 800236e:	4b6c      	ldr	r3, [pc, #432]	; (8002520 <SIM_HTTP_Build+0x2b0>)
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
				break;
 8002374:	e000      	b.n	8002378 <SIM_HTTP_Build+0x108>

			default:
				break;
 8002376:	bf00      	nop
		}

		shouldTransmit = 0; // no transmission until response has been read
 8002378:	4b5f      	ldr	r3, [pc, #380]	; (80024f8 <SIM_HTTP_Build+0x288>)
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]

	} // if shouldTransmit
	// --------------------------------------------------------------- //

	// ---------------------------- RX ------------------------------- //
	uint8_t isIncrementCommand = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]

	switch (commandIndex) {
 8002382:	4b5e      	ldr	r3, [pc, #376]	; (80024fc <SIM_HTTP_Build+0x28c>)
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	b29b      	uxth	r3, r3
 8002388:	2b05      	cmp	r3, #5
 800238a:	d87e      	bhi.n	800248a <SIM_HTTP_Build+0x21a>
 800238c:	a201      	add	r2, pc, #4	; (adr r2, 8002394 <SIM_HTTP_Build+0x124>)
 800238e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002392:	bf00      	nop
 8002394:	080023ad 	.word	0x080023ad
 8002398:	080023f1 	.word	0x080023f1
 800239c:	08002405 	.word	0x08002405
 80023a0:	08002419 	.word	0x08002419
 80023a4:	0800242d 	.word	0x0800242d
 80023a8:	08002441 	.word	0x08002441
		case 0:
			// +SHSTATE: 0\r\n\r\nOK\r\n - HTTP disconnect state
			if (strstr((char*) serialRX_Buffer, "+SHSTATE: 0\r\n\r\nOK\r\n")) {
 80023ac:	495d      	ldr	r1, [pc, #372]	; (8002524 <SIM_HTTP_Build+0x2b4>)
 80023ae:	485e      	ldr	r0, [pc, #376]	; (8002528 <SIM_HTTP_Build+0x2b8>)
 80023b0:	f00a f914 	bl	800c5dc <strstr>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <SIM_HTTP_Build+0x15e>
				commandIndex = 2; // AT+SHCONF=... next command
 80023ba:	4b50      	ldr	r3, [pc, #320]	; (80024fc <SIM_HTTP_Build+0x28c>)
 80023bc:	2202      	movs	r2, #2
 80023be:	801a      	strh	r2, [r3, #0]
				clearBuffer = 1; // Clear buffer to receive next response
 80023c0:	4b5a      	ldr	r3, [pc, #360]	; (800252c <SIM_HTTP_Build+0x2bc>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1; // Can transmit next command
 80023c6:	4b4c      	ldr	r3, [pc, #304]	; (80024f8 <SIM_HTTP_Build+0x288>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	701a      	strb	r2, [r3, #0]
			else if (strstr((char*) serialRX_Buffer, "+SHSTATE: 1\r\n\r\nOK\r\n")) {
				commandIndex = 1; // AT+SHDISC next command
				clearBuffer = 1; // Clear buffer to receive next response
				shouldTransmit = 1; // Can transmit next command
			}
			break;
 80023cc:	e05f      	b.n	800248e <SIM_HTTP_Build+0x21e>
			else if (strstr((char*) serialRX_Buffer, "+SHSTATE: 1\r\n\r\nOK\r\n")) {
 80023ce:	4958      	ldr	r1, [pc, #352]	; (8002530 <SIM_HTTP_Build+0x2c0>)
 80023d0:	4855      	ldr	r0, [pc, #340]	; (8002528 <SIM_HTTP_Build+0x2b8>)
 80023d2:	f00a f903 	bl	800c5dc <strstr>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d058      	beq.n	800248e <SIM_HTTP_Build+0x21e>
				commandIndex = 1; // AT+SHDISC next command
 80023dc:	4b47      	ldr	r3, [pc, #284]	; (80024fc <SIM_HTTP_Build+0x28c>)
 80023de:	2201      	movs	r2, #1
 80023e0:	801a      	strh	r2, [r3, #0]
				clearBuffer = 1; // Clear buffer to receive next response
 80023e2:	4b52      	ldr	r3, [pc, #328]	; (800252c <SIM_HTTP_Build+0x2bc>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1; // Can transmit next command
 80023e8:	4b43      	ldr	r3, [pc, #268]	; (80024f8 <SIM_HTTP_Build+0x288>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
			break;
 80023ee:	e04e      	b.n	800248e <SIM_HTTP_Build+0x21e>

		case 1:
			// OK should be received for successful disconnect
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 80023f0:	4950      	ldr	r1, [pc, #320]	; (8002534 <SIM_HTTP_Build+0x2c4>)
 80023f2:	484d      	ldr	r0, [pc, #308]	; (8002528 <SIM_HTTP_Build+0x2b8>)
 80023f4:	f00a f8f2 	bl	800c5dc <strstr>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d049      	beq.n	8002492 <SIM_HTTP_Build+0x222>
				isIncrementCommand = 1;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8002402:	e046      	b.n	8002492 <SIM_HTTP_Build+0x222>

		case 2:
			// OK should be received. URL setup
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8002404:	494b      	ldr	r1, [pc, #300]	; (8002534 <SIM_HTTP_Build+0x2c4>)
 8002406:	4848      	ldr	r0, [pc, #288]	; (8002528 <SIM_HTTP_Build+0x2b8>)
 8002408:	f00a f8e8 	bl	800c5dc <strstr>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d041      	beq.n	8002496 <SIM_HTTP_Build+0x226>
				isIncrementCommand = 1;
 8002412:	2301      	movs	r3, #1
 8002414:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8002416:	e03e      	b.n	8002496 <SIM_HTTP_Build+0x226>

		case 3:
			// OK should be received. HTTP body length
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8002418:	4946      	ldr	r1, [pc, #280]	; (8002534 <SIM_HTTP_Build+0x2c4>)
 800241a:	4843      	ldr	r0, [pc, #268]	; (8002528 <SIM_HTTP_Build+0x2b8>)
 800241c:	f00a f8de 	bl	800c5dc <strstr>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d039      	beq.n	800249a <SIM_HTTP_Build+0x22a>
				isIncrementCommand = 1;
 8002426:	2301      	movs	r3, #1
 8002428:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800242a:	e036      	b.n	800249a <SIM_HTTP_Build+0x22a>

		case 4:
			// OK should be received. HTTP head length
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 800242c:	4941      	ldr	r1, [pc, #260]	; (8002534 <SIM_HTTP_Build+0x2c4>)
 800242e:	483e      	ldr	r0, [pc, #248]	; (8002528 <SIM_HTTP_Build+0x2b8>)
 8002430:	f00a f8d4 	bl	800c5dc <strstr>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d031      	beq.n	800249e <SIM_HTTP_Build+0x22e>
				isIncrementCommand = 1; // Increment to go to next command
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800243e:	e02e      	b.n	800249e <SIM_HTTP_Build+0x22e>

		case 5:
			// Connection successful
			if (strstr((char*) serialRX_Buffer, "AT+SHCONN\r\r\nOK\r\n")) {
 8002440:	493d      	ldr	r1, [pc, #244]	; (8002538 <SIM_HTTP_Build+0x2c8>)
 8002442:	4839      	ldr	r0, [pc, #228]	; (8002528 <SIM_HTTP_Build+0x2b8>)
 8002444:	f00a f8ca 	bl	800c5dc <strstr>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00f      	beq.n	800246e <SIM_HTTP_Build+0x1fe>
				simState = nextState;
 800244e:	4a3b      	ldr	r2, [pc, #236]	; (800253c <SIM_HTTP_Build+0x2cc>)
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	7013      	strb	r3, [r2, #0]
				isStateChanged = 1;
 8002454:	4b3a      	ldr	r3, [pc, #232]	; (8002540 <SIM_HTTP_Build+0x2d0>)
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1;
 800245a:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <SIM_HTTP_Build+0x288>)
 800245c:	2201      	movs	r2, #1
 800245e:	701a      	strb	r2, [r3, #0]
				clearBuffer = 1;
 8002460:	4b32      	ldr	r3, [pc, #200]	; (800252c <SIM_HTTP_Build+0x2bc>)
 8002462:	2201      	movs	r2, #1
 8002464:	701a      	strb	r2, [r3, #0]

				isLD3_Flicker = 1; // TODO: remove later
 8002466:	4b2e      	ldr	r3, [pc, #184]	; (8002520 <SIM_HTTP_Build+0x2b0>)
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
			else if (strstr((char*) serialRX_Buffer, "AT+SHCONN\r\r\nERROR\r\n")) {
				// Resends HTTP build command
				clearBuffer = 1;
				shouldTransmit = 1;
			}
			break;
 800246c:	e019      	b.n	80024a2 <SIM_HTTP_Build+0x232>
			else if (strstr((char*) serialRX_Buffer, "AT+SHCONN\r\r\nERROR\r\n")) {
 800246e:	4935      	ldr	r1, [pc, #212]	; (8002544 <SIM_HTTP_Build+0x2d4>)
 8002470:	482d      	ldr	r0, [pc, #180]	; (8002528 <SIM_HTTP_Build+0x2b8>)
 8002472:	f00a f8b3 	bl	800c5dc <strstr>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d012      	beq.n	80024a2 <SIM_HTTP_Build+0x232>
				clearBuffer = 1;
 800247c:	4b2b      	ldr	r3, [pc, #172]	; (800252c <SIM_HTTP_Build+0x2bc>)
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1;
 8002482:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <SIM_HTTP_Build+0x288>)
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
			break;
 8002488:	e00b      	b.n	80024a2 <SIM_HTTP_Build+0x232>

		default:
			break;
 800248a:	bf00      	nop
 800248c:	e00a      	b.n	80024a4 <SIM_HTTP_Build+0x234>
			break;
 800248e:	bf00      	nop
 8002490:	e008      	b.n	80024a4 <SIM_HTTP_Build+0x234>
			break;
 8002492:	bf00      	nop
 8002494:	e006      	b.n	80024a4 <SIM_HTTP_Build+0x234>
			break;
 8002496:	bf00      	nop
 8002498:	e004      	b.n	80024a4 <SIM_HTTP_Build+0x234>
			break;
 800249a:	bf00      	nop
 800249c:	e002      	b.n	80024a4 <SIM_HTTP_Build+0x234>
			break;
 800249e:	bf00      	nop
 80024a0:	e000      	b.n	80024a4 <SIM_HTTP_Build+0x234>
			break;
 80024a2:	bf00      	nop
	}

	if (isIncrementCommand) {
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00e      	beq.n	80024c8 <SIM_HTTP_Build+0x258>
		++commandIndex; // Next command
 80024aa:	4b14      	ldr	r3, [pc, #80]	; (80024fc <SIM_HTTP_Build+0x28c>)
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3301      	adds	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <SIM_HTTP_Build+0x28c>)
 80024b6:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 80024b8:	4b1c      	ldr	r3, [pc, #112]	; (800252c <SIM_HTTP_Build+0x2bc>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <SIM_HTTP_Build+0x288>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]
	}

	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 80024c8:	7bbb      	ldrb	r3, [r7, #14]
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <SIM_HTTP_Build+0x28c>)
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d304      	bcc.n	80024e0 <SIM_HTTP_Build+0x270>
 80024d6:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <SIM_HTTP_Build+0x2d0>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d006      	beq.n	80024ee <SIM_HTTP_Build+0x27e>
		commandIndex = 0;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <SIM_HTTP_Build+0x28c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 80024e6:	4b16      	ldr	r3, [pc, #88]	; (8002540 <SIM_HTTP_Build+0x2d0>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
	}


	return;
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
}
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	2000000d 	.word	0x2000000d
 80024fc:	20002480 	.word	0x20002480
 8002500:	0801029c 	.word	0x0801029c
 8002504:	2000241c 	.word	0x2000241c
 8002508:	200003f8 	.word	0x200003f8
 800250c:	080102ac 	.word	0x080102ac
 8002510:	080102b8 	.word	0x080102b8
 8002514:	080102ec 	.word	0x080102ec
 8002518:	08010308 	.word	0x08010308
 800251c:	08010324 	.word	0x08010324
 8002520:	20000000 	.word	0x20000000
 8002524:	08010330 	.word	0x08010330
 8002528:	20002484 	.word	0x20002484
 800252c:	20002580 	.word	0x20002580
 8002530:	08010344 	.word	0x08010344
 8002534:	0801016c 	.word	0x0801016c
 8002538:	08010358 	.word	0x08010358
 800253c:	2000000c 	.word	0x2000000c
 8002540:	20002482 	.word	0x20002482
 8002544:	0801036c 	.word	0x0801036c

08002548 <SIM_HTTP_Make_Post>:

void SIM_HTTP_Make_Post(void) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
	// 8: AT+SHREQ="/api/update?API_KEY=9349da48-62ef-496b-831a-4720015ff72a",3 - Set request type is POST and send

	// 9: AT+SHREAD=0,2 // read http result (second variable dependant on result from SHREQ)
	// 10: AT+SHDISC - Disconnect HTTP connect

	uint8_t maxCommand = 10;
 800254e:	230a      	movs	r3, #10
 8002550:	73fb      	strb	r3, [r7, #15]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 8002552:	4bb4      	ldr	r3, [pc, #720]	; (8002824 <SIM_HTTP_Make_Post+0x2dc>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 80fa 	beq.w	8002750 <SIM_HTTP_Make_Post+0x208>
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	b29a      	uxth	r2, r3
 8002560:	4bb1      	ldr	r3, [pc, #708]	; (8002828 <SIM_HTTP_Make_Post+0x2e0>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	b29b      	uxth	r3, r3
 8002566:	429a      	cmp	r2, r3
 8002568:	f0c0 80f2 	bcc.w	8002750 <SIM_HTTP_Make_Post+0x208>
		// Next command should be transmitted

		switch (commandIndex) {
 800256c:	4bae      	ldr	r3, [pc, #696]	; (8002828 <SIM_HTTP_Make_Post+0x2e0>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b0a      	cmp	r3, #10
 8002574:	f200 80de 	bhi.w	8002734 <SIM_HTTP_Make_Post+0x1ec>
 8002578:	a201      	add	r2, pc, #4	; (adr r2, 8002580 <SIM_HTTP_Make_Post+0x38>)
 800257a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257e:	bf00      	nop
 8002580:	080025ad 	.word	0x080025ad
 8002584:	080025b7 	.word	0x080025b7
 8002588:	080025c1 	.word	0x080025c1
 800258c:	080025cb 	.word	0x080025cb
 8002590:	080025d5 	.word	0x080025d5
 8002594:	080025df 	.word	0x080025df
 8002598:	080025e9 	.word	0x080025e9
 800259c:	080025f3 	.word	0x080025f3
 80025a0:	080026ff 	.word	0x080026ff
 80025a4:	08002709 	.word	0x08002709
 80025a8:	0800272b 	.word	0x0800272b
			case 0:
				// Get HTTP header
				sprintf(ATcommand, "AT+SHSTATE?\r\n");
 80025ac:	499f      	ldr	r1, [pc, #636]	; (800282c <SIM_HTTP_Make_Post+0x2e4>)
 80025ae:	48a0      	ldr	r0, [pc, #640]	; (8002830 <SIM_HTTP_Make_Post+0x2e8>)
 80025b0:	f009 ffd2 	bl	800c558 <siprintf>
				break;
 80025b4:	e0bf      	b.n	8002736 <SIM_HTTP_Make_Post+0x1ee>

			case 1:
				// Clear HTTP header
				sprintf(ATcommand, "AT+SHCHEAD\r\n");
 80025b6:	499f      	ldr	r1, [pc, #636]	; (8002834 <SIM_HTTP_Make_Post+0x2ec>)
 80025b8:	489d      	ldr	r0, [pc, #628]	; (8002830 <SIM_HTTP_Make_Post+0x2e8>)
 80025ba:	f009 ffcd 	bl	800c558 <siprintf>
				break;
 80025be:	e0ba      	b.n	8002736 <SIM_HTTP_Make_Post+0x1ee>

			case 2:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Content-Type\",\"application/x-www-form-urlencoded\"\r\n");
 80025c0:	499d      	ldr	r1, [pc, #628]	; (8002838 <SIM_HTTP_Make_Post+0x2f0>)
 80025c2:	489b      	ldr	r0, [pc, #620]	; (8002830 <SIM_HTTP_Make_Post+0x2e8>)
 80025c4:	f009 ffc8 	bl	800c558 <siprintf>
				break;
 80025c8:	e0b5      	b.n	8002736 <SIM_HTTP_Make_Post+0x1ee>

			case 3:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Cache-control\",\"no-cache\"\r\n");
 80025ca:	499c      	ldr	r1, [pc, #624]	; (800283c <SIM_HTTP_Make_Post+0x2f4>)
 80025cc:	4898      	ldr	r0, [pc, #608]	; (8002830 <SIM_HTTP_Make_Post+0x2e8>)
 80025ce:	f009 ffc3 	bl	800c558 <siprintf>
				break;
 80025d2:	e0b0      	b.n	8002736 <SIM_HTTP_Make_Post+0x1ee>

			case 4:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Connection\",\"keep-alive\"\r\n");
 80025d4:	499a      	ldr	r1, [pc, #616]	; (8002840 <SIM_HTTP_Make_Post+0x2f8>)
 80025d6:	4896      	ldr	r0, [pc, #600]	; (8002830 <SIM_HTTP_Make_Post+0x2e8>)
 80025d8:	f009 ffbe 	bl	800c558 <siprintf>
				break;
 80025dc:	e0ab      	b.n	8002736 <SIM_HTTP_Make_Post+0x1ee>

			case 5:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Accept\",\"*/*\"\r\n");
 80025de:	4999      	ldr	r1, [pc, #612]	; (8002844 <SIM_HTTP_Make_Post+0x2fc>)
 80025e0:	4893      	ldr	r0, [pc, #588]	; (8002830 <SIM_HTTP_Make_Post+0x2e8>)
 80025e2:	f009 ffb9 	bl	800c558 <siprintf>
				break;
 80025e6:	e0a6      	b.n	8002736 <SIM_HTTP_Make_Post+0x1ee>

			case 6:
				// Clear body content parameter
				sprintf(ATcommand, "AT+SHCPARA\r\n");
 80025e8:	4997      	ldr	r1, [pc, #604]	; (8002848 <SIM_HTTP_Make_Post+0x300>)
 80025ea:	4891      	ldr	r0, [pc, #580]	; (8002830 <SIM_HTTP_Make_Post+0x2e8>)
 80025ec:	f009 ffb4 	bl	800c558 <siprintf>
				break;
 80025f0:	e0a1      	b.n	8002736 <SIM_HTTP_Make_Post+0x1ee>

			case 7:
				// Add body content parameter(s)
				memset(commandToSend, 0, sizeof(commandToSend)); // clear previous data
 80025f2:	2264      	movs	r2, #100	; 0x64
 80025f4:	2100      	movs	r1, #0
 80025f6:	4895      	ldr	r0, [pc, #596]	; (800284c <SIM_HTTP_Make_Post+0x304>)
 80025f8:	f009 f836 	bl	800b668 <memset>
				strcat(commandToSend, "AT+SHPARA=");
 80025fc:	4893      	ldr	r0, [pc, #588]	; (800284c <SIM_HTTP_Make_Post+0x304>)
 80025fe:	f7fd fde7 	bl	80001d0 <strlen>
 8002602:	4603      	mov	r3, r0
 8002604:	461a      	mov	r2, r3
 8002606:	4b91      	ldr	r3, [pc, #580]	; (800284c <SIM_HTTP_Make_Post+0x304>)
 8002608:	4413      	add	r3, r2
 800260a:	4991      	ldr	r1, [pc, #580]	; (8002850 <SIM_HTTP_Make_Post+0x308>)
 800260c:	461a      	mov	r2, r3
 800260e:	460b      	mov	r3, r1
 8002610:	cb03      	ldmia	r3!, {r0, r1}
 8002612:	6010      	str	r0, [r2, #0]
 8002614:	6051      	str	r1, [r2, #4]
 8002616:	8819      	ldrh	r1, [r3, #0]
 8002618:	789b      	ldrb	r3, [r3, #2]
 800261a:	8111      	strh	r1, [r2, #8]
 800261c:	7293      	strb	r3, [r2, #10]
				if (currentFormArr==0) {
 800261e:	4b8d      	ldr	r3, [pc, #564]	; (8002854 <SIM_HTTP_Make_Post+0x30c>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d12b      	bne.n	800267e <SIM_HTTP_Make_Post+0x136>
					strcat(commandToSend, (char*)(formsToPost_1 + formsToSendIndex));
 8002626:	4b8c      	ldr	r3, [pc, #560]	; (8002858 <SIM_HTTP_Make_Post+0x310>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	461a      	mov	r2, r3
 8002636:	4b89      	ldr	r3, [pc, #548]	; (800285c <SIM_HTTP_Make_Post+0x314>)
 8002638:	4413      	add	r3, r2
 800263a:	4619      	mov	r1, r3
 800263c:	4883      	ldr	r0, [pc, #524]	; (800284c <SIM_HTTP_Make_Post+0x304>)
 800263e:	f009 ffab 	bl	800c598 <strcat>
					++formsToSendIndex;
 8002642:	4b85      	ldr	r3, [pc, #532]	; (8002858 <SIM_HTTP_Make_Post+0x310>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	3301      	adds	r3, #1
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4b83      	ldr	r3, [pc, #524]	; (8002858 <SIM_HTTP_Make_Post+0x310>)
 800264c:	701a      	strb	r2, [r3, #0]
					if (formsToSendIndex == formsToPost_1_Index-1) {
 800264e:	4b82      	ldr	r3, [pc, #520]	; (8002858 <SIM_HTTP_Make_Post+0x310>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	4b82      	ldr	r3, [pc, #520]	; (8002860 <SIM_HTTP_Make_Post+0x318>)
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	3b01      	subs	r3, #1
 800265a:	429a      	cmp	r2, r3
 800265c:	d13e      	bne.n	80026dc <SIM_HTTP_Make_Post+0x194>
						formsSentFlag = 1;
 800265e:	4b81      	ldr	r3, [pc, #516]	; (8002864 <SIM_HTTP_Make_Post+0x31c>)
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
						formsToSendIndex = 0;
 8002664:	4b7c      	ldr	r3, [pc, #496]	; (8002858 <SIM_HTTP_Make_Post+0x310>)
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
						memset(formsToPost_1, 0, sizeof(formsToPost_1));
 800266a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800266e:	2100      	movs	r1, #0
 8002670:	487a      	ldr	r0, [pc, #488]	; (800285c <SIM_HTTP_Make_Post+0x314>)
 8002672:	f008 fff9 	bl	800b668 <memset>
						formsToPost_1_Index = 0;
 8002676:	4b7a      	ldr	r3, [pc, #488]	; (8002860 <SIM_HTTP_Make_Post+0x318>)
 8002678:	2200      	movs	r2, #0
 800267a:	801a      	strh	r2, [r3, #0]
 800267c:	e02e      	b.n	80026dc <SIM_HTTP_Make_Post+0x194>
					}
				} else if (currentFormArr==1) {
 800267e:	4b75      	ldr	r3, [pc, #468]	; (8002854 <SIM_HTTP_Make_Post+0x30c>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d12a      	bne.n	80026dc <SIM_HTTP_Make_Post+0x194>
					++formsToSendIndex;
 8002686:	4b74      	ldr	r3, [pc, #464]	; (8002858 <SIM_HTTP_Make_Post+0x310>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	3301      	adds	r3, #1
 800268c:	b2da      	uxtb	r2, r3
 800268e:	4b72      	ldr	r3, [pc, #456]	; (8002858 <SIM_HTTP_Make_Post+0x310>)
 8002690:	701a      	strb	r2, [r3, #0]
					strcat(commandToSend, (char*)(formsToPost_0 + formsToSendIndex));
 8002692:	4b71      	ldr	r3, [pc, #452]	; (8002858 <SIM_HTTP_Make_Post+0x310>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b71      	ldr	r3, [pc, #452]	; (8002868 <SIM_HTTP_Make_Post+0x320>)
 80026a4:	4413      	add	r3, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	4868      	ldr	r0, [pc, #416]	; (800284c <SIM_HTTP_Make_Post+0x304>)
 80026aa:	f009 ff75 	bl	800c598 <strcat>
					if (formsToSendIndex == formsToPost_0_Index-1) {
 80026ae:	4b6a      	ldr	r3, [pc, #424]	; (8002858 <SIM_HTTP_Make_Post+0x310>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	4b6d      	ldr	r3, [pc, #436]	; (800286c <SIM_HTTP_Make_Post+0x324>)
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d10e      	bne.n	80026dc <SIM_HTTP_Make_Post+0x194>
						formsSentFlag = 1;
 80026be:	4b69      	ldr	r3, [pc, #420]	; (8002864 <SIM_HTTP_Make_Post+0x31c>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]
						formsToSendIndex = 0;
 80026c4:	4b64      	ldr	r3, [pc, #400]	; (8002858 <SIM_HTTP_Make_Post+0x310>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
						memset(formsToPost_0, 0, sizeof(formsToPost_0)); // clear array data
 80026ca:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80026ce:	2100      	movs	r1, #0
 80026d0:	4865      	ldr	r0, [pc, #404]	; (8002868 <SIM_HTTP_Make_Post+0x320>)
 80026d2:	f008 ffc9 	bl	800b668 <memset>
						formsToPost_0_Index = 0; // Reset index of array
 80026d6:	4b65      	ldr	r3, [pc, #404]	; (800286c <SIM_HTTP_Make_Post+0x324>)
 80026d8:	2200      	movs	r2, #0
 80026da:	801a      	strh	r2, [r3, #0]
					}
				}
				strcat(commandToSend, "\r\n");
 80026dc:	485b      	ldr	r0, [pc, #364]	; (800284c <SIM_HTTP_Make_Post+0x304>)
 80026de:	f7fd fd77 	bl	80001d0 <strlen>
 80026e2:	4603      	mov	r3, r0
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b59      	ldr	r3, [pc, #356]	; (800284c <SIM_HTTP_Make_Post+0x304>)
 80026e8:	4413      	add	r3, r2
 80026ea:	4a61      	ldr	r2, [pc, #388]	; (8002870 <SIM_HTTP_Make_Post+0x328>)
 80026ec:	8811      	ldrh	r1, [r2, #0]
 80026ee:	7892      	ldrb	r2, [r2, #2]
 80026f0:	8019      	strh	r1, [r3, #0]
 80026f2:	709a      	strb	r2, [r3, #2]
//				sprintf(ATcommand, "AT+SHPARA=\"batt_1\",\"2022-09-07 18:47:06,7.89\"\r\n");
				sprintf(ATcommand, commandToSend);
 80026f4:	4955      	ldr	r1, [pc, #340]	; (800284c <SIM_HTTP_Make_Post+0x304>)
 80026f6:	484e      	ldr	r0, [pc, #312]	; (8002830 <SIM_HTTP_Make_Post+0x2e8>)
 80026f8:	f009 ff2e 	bl	800c558 <siprintf>
				break;
 80026fc:	e01b      	b.n	8002736 <SIM_HTTP_Make_Post+0x1ee>

			case 8:
				// Add header content
//				sprintf(ATcommand, "AT+SHREQ=\"/update?api_key=1EC4ZVYTHEJUAAIO&field1=60\",3\r\nAT\r\n");
				sprintf(ATcommand, "AT+SHREQ=\"/api/update?API_KEY=9349da48-62ef-496b-831a-4720015ff72a\",3\r\n");
 80026fe:	495d      	ldr	r1, [pc, #372]	; (8002874 <SIM_HTTP_Make_Post+0x32c>)
 8002700:	484b      	ldr	r0, [pc, #300]	; (8002830 <SIM_HTTP_Make_Post+0x2e8>)
 8002702:	f009 ff29 	bl	800c558 <siprintf>
				break;
 8002706:	e016      	b.n	8002736 <SIM_HTTP_Make_Post+0x1ee>

			case 9: ;
				// Read data after request
				char d[4];
				itoa(dataLengthVal, d, 10);
 8002708:	4b5b      	ldr	r3, [pc, #364]	; (8002878 <SIM_HTTP_Make_Post+0x330>)
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f107 0308 	add.w	r3, r7, #8
 8002712:	220a      	movs	r2, #10
 8002714:	4619      	mov	r1, r3
 8002716:	f008 ff9d 	bl	800b654 <itoa>
				sprintf(ATcommand, "AT+SHREAD=0,%s\r\n", d);
 800271a:	f107 0308 	add.w	r3, r7, #8
 800271e:	461a      	mov	r2, r3
 8002720:	4956      	ldr	r1, [pc, #344]	; (800287c <SIM_HTTP_Make_Post+0x334>)
 8002722:	4843      	ldr	r0, [pc, #268]	; (8002830 <SIM_HTTP_Make_Post+0x2e8>)
 8002724:	f009 ff18 	bl	800c558 <siprintf>
				break;
 8002728:	e005      	b.n	8002736 <SIM_HTTP_Make_Post+0x1ee>

			case 10:
				// Disconnect HTTP
				sprintf(ATcommand, "AT+SHDISC\r\n");
 800272a:	4955      	ldr	r1, [pc, #340]	; (8002880 <SIM_HTTP_Make_Post+0x338>)
 800272c:	4840      	ldr	r0, [pc, #256]	; (8002830 <SIM_HTTP_Make_Post+0x2e8>)
 800272e:	f009 ff13 	bl	800c558 <siprintf>
				break;
 8002732:	e000      	b.n	8002736 <SIM_HTTP_Make_Post+0x1ee>

			default:
				break;
 8002734:	bf00      	nop
		}

		HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand)); // Transmit AT command
 8002736:	483e      	ldr	r0, [pc, #248]	; (8002830 <SIM_HTTP_Make_Post+0x2e8>)
 8002738:	f7fd fd4a 	bl	80001d0 <strlen>
 800273c:	4603      	mov	r3, r0
 800273e:	b29b      	uxth	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	493b      	ldr	r1, [pc, #236]	; (8002830 <SIM_HTTP_Make_Post+0x2e8>)
 8002744:	484f      	ldr	r0, [pc, #316]	; (8002884 <SIM_HTTP_Make_Post+0x33c>)
 8002746:	f006 fe71 	bl	800942c <HAL_UART_Transmit_IT>
		shouldTransmit = 0; // no transmission until response has been read
 800274a:	4b36      	ldr	r3, [pc, #216]	; (8002824 <SIM_HTTP_Make_Post+0x2dc>)
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]

	} // if shouldTransmit
	// --------------------------------------------------------------- //

	// ---------------------------- RX ------------------------------- //
	uint8_t isIncrementCommand = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	75fb      	strb	r3, [r7, #23]

	switch (commandIndex) {
 8002754:	4b34      	ldr	r3, [pc, #208]	; (8002828 <SIM_HTTP_Make_Post+0x2e0>)
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b0a      	cmp	r3, #10
 800275c:	f200 814c 	bhi.w	80029f8 <SIM_HTTP_Make_Post+0x4b0>
 8002760:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <SIM_HTTP_Make_Post+0x220>)
 8002762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002766:	bf00      	nop
 8002768:	08002795 	.word	0x08002795
 800276c:	080027e1 	.word	0x080027e1
 8002770:	080027f7 	.word	0x080027f7
 8002774:	0800280d 	.word	0x0800280d
 8002778:	080028a5 	.word	0x080028a5
 800277c:	080028bb 	.word	0x080028bb
 8002780:	080028d1 	.word	0x080028d1
 8002784:	080028e7 	.word	0x080028e7
 8002788:	08002921 	.word	0x08002921
 800278c:	080029a9 	.word	0x080029a9
 8002790:	080029c7 	.word	0x080029c7
		case 0:
			// +SHSTATE: 0\r\n\r\nOK\r\n - HTTP disconnect state
			if (strstr((char*) serialRX_Buffer, "+SHSTATE: 0\r\n\r\nOK\r\n")) {
 8002794:	493c      	ldr	r1, [pc, #240]	; (8002888 <SIM_HTTP_Make_Post+0x340>)
 8002796:	483d      	ldr	r0, [pc, #244]	; (800288c <SIM_HTTP_Make_Post+0x344>)
 8002798:	f009 ff20 	bl	800c5dc <strstr>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00c      	beq.n	80027bc <SIM_HTTP_Make_Post+0x274>
				// If disconnected, build HTTP post
				simState = SIM_HTTP_BUILD;
 80027a2:	4b3b      	ldr	r3, [pc, #236]	; (8002890 <SIM_HTTP_Make_Post+0x348>)
 80027a4:	2203      	movs	r2, #3
 80027a6:	701a      	strb	r2, [r3, #0]
				isStateChanged = 1;
 80027a8:	4b3a      	ldr	r3, [pc, #232]	; (8002894 <SIM_HTTP_Make_Post+0x34c>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
				clearBuffer = 1; // Clear buffer to receive next response
 80027ae:	4b3a      	ldr	r3, [pc, #232]	; (8002898 <SIM_HTTP_Make_Post+0x350>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1; // Can transmit next command
 80027b4:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <SIM_HTTP_Make_Post+0x2dc>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]
			else if (strstr((char*) serialRX_Buffer, "+SHSTATE: 1\r\n\r\nOK\r\n")) {
				commandIndex = 1; // AT+SHDISC next command
				clearBuffer = 1; // Clear buffer to receive next response
				shouldTransmit = 1; // Can transmit next command
			}
			break;
 80027ba:	e11f      	b.n	80029fc <SIM_HTTP_Make_Post+0x4b4>
			else if (strstr((char*) serialRX_Buffer, "+SHSTATE: 1\r\n\r\nOK\r\n")) {
 80027bc:	4937      	ldr	r1, [pc, #220]	; (800289c <SIM_HTTP_Make_Post+0x354>)
 80027be:	4833      	ldr	r0, [pc, #204]	; (800288c <SIM_HTTP_Make_Post+0x344>)
 80027c0:	f009 ff0c 	bl	800c5dc <strstr>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 8118 	beq.w	80029fc <SIM_HTTP_Make_Post+0x4b4>
				commandIndex = 1; // AT+SHDISC next command
 80027cc:	4b16      	ldr	r3, [pc, #88]	; (8002828 <SIM_HTTP_Make_Post+0x2e0>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	801a      	strh	r2, [r3, #0]
				clearBuffer = 1; // Clear buffer to receive next response
 80027d2:	4b31      	ldr	r3, [pc, #196]	; (8002898 <SIM_HTTP_Make_Post+0x350>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1; // Can transmit next command
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <SIM_HTTP_Make_Post+0x2dc>)
 80027da:	2201      	movs	r2, #1
 80027dc:	701a      	strb	r2, [r3, #0]
			break;
 80027de:	e10d      	b.n	80029fc <SIM_HTTP_Make_Post+0x4b4>

		case 1:
			// OK received if header cleared
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 80027e0:	492f      	ldr	r1, [pc, #188]	; (80028a0 <SIM_HTTP_Make_Post+0x358>)
 80027e2:	482a      	ldr	r0, [pc, #168]	; (800288c <SIM_HTTP_Make_Post+0x344>)
 80027e4:	f009 fefa 	bl	800c5dc <strstr>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 8108 	beq.w	8002a00 <SIM_HTTP_Make_Post+0x4b8>
				isIncrementCommand = 1;
 80027f0:	2301      	movs	r3, #1
 80027f2:	75fb      	strb	r3, [r7, #23]
			}
			break;
 80027f4:	e104      	b.n	8002a00 <SIM_HTTP_Make_Post+0x4b8>

		case 2:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 80027f6:	492a      	ldr	r1, [pc, #168]	; (80028a0 <SIM_HTTP_Make_Post+0x358>)
 80027f8:	4824      	ldr	r0, [pc, #144]	; (800288c <SIM_HTTP_Make_Post+0x344>)
 80027fa:	f009 feef 	bl	800c5dc <strstr>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 80ff 	beq.w	8002a04 <SIM_HTTP_Make_Post+0x4bc>
				isIncrementCommand = 1;
 8002806:	2301      	movs	r3, #1
 8002808:	75fb      	strb	r3, [r7, #23]
			}
			break;
 800280a:	e0fb      	b.n	8002a04 <SIM_HTTP_Make_Post+0x4bc>

		case 3:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 800280c:	4924      	ldr	r1, [pc, #144]	; (80028a0 <SIM_HTTP_Make_Post+0x358>)
 800280e:	481f      	ldr	r0, [pc, #124]	; (800288c <SIM_HTTP_Make_Post+0x344>)
 8002810:	f009 fee4 	bl	800c5dc <strstr>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 80f6 	beq.w	8002a08 <SIM_HTTP_Make_Post+0x4c0>
				isIncrementCommand = 1;
 800281c:	2301      	movs	r3, #1
 800281e:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8002820:	e0f2      	b.n	8002a08 <SIM_HTTP_Make_Post+0x4c0>
 8002822:	bf00      	nop
 8002824:	2000000d 	.word	0x2000000d
 8002828:	20002480 	.word	0x20002480
 800282c:	0801029c 	.word	0x0801029c
 8002830:	2000241c 	.word	0x2000241c
 8002834:	08010380 	.word	0x08010380
 8002838:	08010390 	.word	0x08010390
 800283c:	080103d0 	.word	0x080103d0
 8002840:	080103f8 	.word	0x080103f8
 8002844:	08010420 	.word	0x08010420
 8002848:	0801043c 	.word	0x0801043c
 800284c:	20002584 	.word	0x20002584
 8002850:	0801044c 	.word	0x0801044c
 8002854:	200023c4 	.word	0x200023c4
 8002858:	20002685 	.word	0x20002685
 800285c:	20001420 	.word	0x20001420
 8002860:	200023c2 	.word	0x200023c2
 8002864:	20002684 	.word	0x20002684
 8002868:	20000480 	.word	0x20000480
 800286c:	200023c0 	.word	0x200023c0
 8002870:	08010458 	.word	0x08010458
 8002874:	0801045c 	.word	0x0801045c
 8002878:	2000261c 	.word	0x2000261c
 800287c:	080104a4 	.word	0x080104a4
 8002880:	080102ac 	.word	0x080102ac
 8002884:	200003f8 	.word	0x200003f8
 8002888:	08010330 	.word	0x08010330
 800288c:	20002484 	.word	0x20002484
 8002890:	2000000c 	.word	0x2000000c
 8002894:	20002482 	.word	0x20002482
 8002898:	20002580 	.word	0x20002580
 800289c:	08010344 	.word	0x08010344
 80028a0:	0801016c 	.word	0x0801016c

		case 4:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 80028a4:	4974      	ldr	r1, [pc, #464]	; (8002a78 <SIM_HTTP_Make_Post+0x530>)
 80028a6:	4875      	ldr	r0, [pc, #468]	; (8002a7c <SIM_HTTP_Make_Post+0x534>)
 80028a8:	f009 fe98 	bl	800c5dc <strstr>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 80ac 	beq.w	8002a0c <SIM_HTTP_Make_Post+0x4c4>
				isIncrementCommand = 1;
 80028b4:	2301      	movs	r3, #1
 80028b6:	75fb      	strb	r3, [r7, #23]
			}
			break;
 80028b8:	e0a8      	b.n	8002a0c <SIM_HTTP_Make_Post+0x4c4>

		case 5:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 80028ba:	496f      	ldr	r1, [pc, #444]	; (8002a78 <SIM_HTTP_Make_Post+0x530>)
 80028bc:	486f      	ldr	r0, [pc, #444]	; (8002a7c <SIM_HTTP_Make_Post+0x534>)
 80028be:	f009 fe8d 	bl	800c5dc <strstr>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80a3 	beq.w	8002a10 <SIM_HTTP_Make_Post+0x4c8>
				isIncrementCommand = 1;
 80028ca:	2301      	movs	r3, #1
 80028cc:	75fb      	strb	r3, [r7, #23]
			}
			break;
 80028ce:	e09f      	b.n	8002a10 <SIM_HTTP_Make_Post+0x4c8>

		case 6:
			// OK received if body content parameter has been cleared
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 80028d0:	4969      	ldr	r1, [pc, #420]	; (8002a78 <SIM_HTTP_Make_Post+0x530>)
 80028d2:	486a      	ldr	r0, [pc, #424]	; (8002a7c <SIM_HTTP_Make_Post+0x534>)
 80028d4:	f009 fe82 	bl	800c5dc <strstr>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 809a 	beq.w	8002a14 <SIM_HTTP_Make_Post+0x4cc>
				isIncrementCommand = 1;
 80028e0:	2301      	movs	r3, #1
 80028e2:	75fb      	strb	r3, [r7, #23]
			}
			break;
 80028e4:	e096      	b.n	8002a14 <SIM_HTTP_Make_Post+0x4cc>

		case 7:
			// OK received if body content parameter is added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 80028e6:	4964      	ldr	r1, [pc, #400]	; (8002a78 <SIM_HTTP_Make_Post+0x530>)
 80028e8:	4864      	ldr	r0, [pc, #400]	; (8002a7c <SIM_HTTP_Make_Post+0x534>)
 80028ea:	f009 fe77 	bl	800c5dc <strstr>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 8091 	beq.w	8002a18 <SIM_HTTP_Make_Post+0x4d0>
				if (!formsSentFlag) {
 80028f6:	4b62      	ldr	r3, [pc, #392]	; (8002a80 <SIM_HTTP_Make_Post+0x538>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d109      	bne.n	8002914 <SIM_HTTP_Make_Post+0x3cc>
					clearBuffer = 1;
 8002900:	4b60      	ldr	r3, [pc, #384]	; (8002a84 <SIM_HTTP_Make_Post+0x53c>)
 8002902:	2201      	movs	r2, #1
 8002904:	701a      	strb	r2, [r3, #0]
					shouldTransmit = 1;
 8002906:	4b60      	ldr	r3, [pc, #384]	; (8002a88 <SIM_HTTP_Make_Post+0x540>)
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
					commandIndex = 7;
 800290c:	4b5f      	ldr	r3, [pc, #380]	; (8002a8c <SIM_HTTP_Make_Post+0x544>)
 800290e:	2207      	movs	r2, #7
 8002910:	801a      	strh	r2, [r3, #0]
					isIncrementCommand = 1;
//					testFormsSentFlag = 0;
					formsSentFlag = 0;
				}
			}
			break;
 8002912:	e081      	b.n	8002a18 <SIM_HTTP_Make_Post+0x4d0>
					isIncrementCommand = 1;
 8002914:	2301      	movs	r3, #1
 8002916:	75fb      	strb	r3, [r7, #23]
					formsSentFlag = 0;
 8002918:	4b59      	ldr	r3, [pc, #356]	; (8002a80 <SIM_HTTP_Make_Post+0x538>)
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]
			break;
 800291e:	e07b      	b.n	8002a18 <SIM_HTTP_Make_Post+0x4d0>

		case 8:
			if (strstr((char*) serialRX_Buffer, "+SHREQ: \"POST\"")) {
 8002920:	495b      	ldr	r1, [pc, #364]	; (8002a90 <SIM_HTTP_Make_Post+0x548>)
 8002922:	4856      	ldr	r0, [pc, #344]	; (8002a7c <SIM_HTTP_Make_Post+0x534>)
 8002924:	f009 fe5a 	bl	800c5dc <strstr>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d076      	beq.n	8002a1c <SIM_HTTP_Make_Post+0x4d4>
				copySubstringFromMatch(responseSubstring, (char*)serialRX_Buffer, "+SHREQ: \"POST\"");
 800292e:	4a58      	ldr	r2, [pc, #352]	; (8002a90 <SIM_HTTP_Make_Post+0x548>)
 8002930:	4952      	ldr	r1, [pc, #328]	; (8002a7c <SIM_HTTP_Make_Post+0x534>)
 8002932:	4858      	ldr	r0, [pc, #352]	; (8002a94 <SIM_HTTP_Make_Post+0x54c>)
 8002934:	f000 fb14 	bl	8002f60 <copySubstringFromMatch>
				// +SHREQ: \"POST\",200,2\r\n
				uint8_t splittedValIndex = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	75bb      	strb	r3, [r7, #22]
				uint16_t splittedVal[4] = {0};
 800293c:	463b      	mov	r3, r7
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	605a      	str	r2, [r3, #4]
				char* token;
				if (strstr(responseSubstring, "\r\n")) { // response has finished transmitting
 8002944:	4954      	ldr	r1, [pc, #336]	; (8002a98 <SIM_HTTP_Make_Post+0x550>)
 8002946:	4853      	ldr	r0, [pc, #332]	; (8002a94 <SIM_HTTP_Make_Post+0x54c>)
 8002948:	f009 fe48 	bl	800c5dc <strstr>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d064      	beq.n	8002a1c <SIM_HTTP_Make_Post+0x4d4>
					token = strtok(responseSubstring, ",");
 8002952:	4952      	ldr	r1, [pc, #328]	; (8002a9c <SIM_HTTP_Make_Post+0x554>)
 8002954:	484f      	ldr	r0, [pc, #316]	; (8002a94 <SIM_HTTP_Make_Post+0x54c>)
 8002956:	f00a fc7f 	bl	800d258 <strtok>
 800295a:	6138      	str	r0, [r7, #16]
					while (token != NULL  && splittedValIndex<4) {
 800295c:	e012      	b.n	8002984 <SIM_HTTP_Make_Post+0x43c>
						splittedVal[++splittedValIndex] = atoi(token);
 800295e:	6938      	ldr	r0, [r7, #16]
 8002960:	f008 fe31 	bl	800b5c6 <atoi>
 8002964:	4602      	mov	r2, r0
 8002966:	7dbb      	ldrb	r3, [r7, #22]
 8002968:	3301      	adds	r3, #1
 800296a:	75bb      	strb	r3, [r7, #22]
 800296c:	7dbb      	ldrb	r3, [r7, #22]
 800296e:	b292      	uxth	r2, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	3318      	adds	r3, #24
 8002974:	443b      	add	r3, r7
 8002976:	f823 2c18 	strh.w	r2, [r3, #-24]
						token = strtok(NULL, ",");
 800297a:	4948      	ldr	r1, [pc, #288]	; (8002a9c <SIM_HTTP_Make_Post+0x554>)
 800297c:	2000      	movs	r0, #0
 800297e:	f00a fc6b 	bl	800d258 <strtok>
 8002982:	6138      	str	r0, [r7, #16]
					while (token != NULL  && splittedValIndex<4) {
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <SIM_HTTP_Make_Post+0x448>
 800298a:	7dbb      	ldrb	r3, [r7, #22]
 800298c:	2b03      	cmp	r3, #3
 800298e:	d9e6      	bls.n	800295e <SIM_HTTP_Make_Post+0x416>
					}
					statusCodeVal = splittedVal[2];
 8002990:	88ba      	ldrh	r2, [r7, #4]
 8002992:	4b43      	ldr	r3, [pc, #268]	; (8002aa0 <SIM_HTTP_Make_Post+0x558>)
 8002994:	801a      	strh	r2, [r3, #0]
					dataLengthVal = splittedVal[3];
 8002996:	88fa      	ldrh	r2, [r7, #6]
 8002998:	4b42      	ldr	r3, [pc, #264]	; (8002aa4 <SIM_HTTP_Make_Post+0x55c>)
 800299a:	801a      	strh	r2, [r3, #0]
					isIncrementCommand = 1;
 800299c:	2301      	movs	r3, #1
 800299e:	75fb      	strb	r3, [r7, #23]
					isLD3_Flicker = 0; // TODO: remove later
 80029a0:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <SIM_HTTP_Make_Post+0x560>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	701a      	strb	r2, [r3, #0]
				}

			}
			break;
 80029a6:	e039      	b.n	8002a1c <SIM_HTTP_Make_Post+0x4d4>

		case 9:
			// All data has been received
			if (strstr((char*) serialRX_Buffer, "}\n\r\n")) {
 80029a8:	4940      	ldr	r1, [pc, #256]	; (8002aac <SIM_HTTP_Make_Post+0x564>)
 80029aa:	4834      	ldr	r0, [pc, #208]	; (8002a7c <SIM_HTTP_Make_Post+0x534>)
 80029ac:	f009 fe16 	bl	800c5dc <strstr>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d034      	beq.n	8002a20 <SIM_HTTP_Make_Post+0x4d8>
				// Set flag
				copySubstringFromMatch(SHREAD_Data, (char*)serialRX_Buffer, "+SHREAD:");
 80029b6:	4a3e      	ldr	r2, [pc, #248]	; (8002ab0 <SIM_HTTP_Make_Post+0x568>)
 80029b8:	4930      	ldr	r1, [pc, #192]	; (8002a7c <SIM_HTTP_Make_Post+0x534>)
 80029ba:	483e      	ldr	r0, [pc, #248]	; (8002ab4 <SIM_HTTP_Make_Post+0x56c>)
 80029bc:	f000 fad0 	bl	8002f60 <copySubstringFromMatch>
				isIncrementCommand = 1;
 80029c0:	2301      	movs	r3, #1
 80029c2:	75fb      	strb	r3, [r7, #23]
			}
			break;
 80029c4:	e02c      	b.n	8002a20 <SIM_HTTP_Make_Post+0x4d8>

		case 10:
			// OK received. Successful disconnect.
			if (strstr((char*) serialRX_Buffer, "+SHDISC\r\r\nOK\r\n")) {
 80029c6:	493c      	ldr	r1, [pc, #240]	; (8002ab8 <SIM_HTTP_Make_Post+0x570>)
 80029c8:	482c      	ldr	r0, [pc, #176]	; (8002a7c <SIM_HTTP_Make_Post+0x534>)
 80029ca:	f009 fe07 	bl	800c5dc <strstr>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d027      	beq.n	8002a24 <SIM_HTTP_Make_Post+0x4dc>
				isIncrementCommand = 1;
 80029d4:	2301      	movs	r3, #1
 80029d6:	75fb      	strb	r3, [r7, #23]
				simState = SIM_STANDBY;
 80029d8:	4b38      	ldr	r3, [pc, #224]	; (8002abc <SIM_HTTP_Make_Post+0x574>)
 80029da:	2207      	movs	r2, #7
 80029dc:	701a      	strb	r2, [r3, #0]
				isStateChanged = 1;
 80029de:	4b38      	ldr	r3, [pc, #224]	; (8002ac0 <SIM_HTTP_Make_Post+0x578>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	701a      	strb	r2, [r3, #0]
				isLD3_Flicker = 1; // TODO: remove later
 80029e4:	4b30      	ldr	r3, [pc, #192]	; (8002aa8 <SIM_HTTP_Make_Post+0x560>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	701a      	strb	r2, [r3, #0]
				// Reset flags
				make_post_flag = 0;
 80029ea:	4b36      	ldr	r3, [pc, #216]	; (8002ac4 <SIM_HTTP_Make_Post+0x57c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]
				sim_flag = 0;
 80029f0:	4b35      	ldr	r3, [pc, #212]	; (8002ac8 <SIM_HTTP_Make_Post+0x580>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80029f6:	e015      	b.n	8002a24 <SIM_HTTP_Make_Post+0x4dc>

		default:
			break;
 80029f8:	bf00      	nop
 80029fa:	e014      	b.n	8002a26 <SIM_HTTP_Make_Post+0x4de>
			break;
 80029fc:	bf00      	nop
 80029fe:	e012      	b.n	8002a26 <SIM_HTTP_Make_Post+0x4de>
			break;
 8002a00:	bf00      	nop
 8002a02:	e010      	b.n	8002a26 <SIM_HTTP_Make_Post+0x4de>
			break;
 8002a04:	bf00      	nop
 8002a06:	e00e      	b.n	8002a26 <SIM_HTTP_Make_Post+0x4de>
			break;
 8002a08:	bf00      	nop
 8002a0a:	e00c      	b.n	8002a26 <SIM_HTTP_Make_Post+0x4de>
			break;
 8002a0c:	bf00      	nop
 8002a0e:	e00a      	b.n	8002a26 <SIM_HTTP_Make_Post+0x4de>
			break;
 8002a10:	bf00      	nop
 8002a12:	e008      	b.n	8002a26 <SIM_HTTP_Make_Post+0x4de>
			break;
 8002a14:	bf00      	nop
 8002a16:	e006      	b.n	8002a26 <SIM_HTTP_Make_Post+0x4de>
			break;
 8002a18:	bf00      	nop
 8002a1a:	e004      	b.n	8002a26 <SIM_HTTP_Make_Post+0x4de>
			break;
 8002a1c:	bf00      	nop
 8002a1e:	e002      	b.n	8002a26 <SIM_HTTP_Make_Post+0x4de>
			break;
 8002a20:	bf00      	nop
 8002a22:	e000      	b.n	8002a26 <SIM_HTTP_Make_Post+0x4de>
			break;
 8002a24:	bf00      	nop
	}

	if (isIncrementCommand) {
 8002a26:	7dfb      	ldrb	r3, [r7, #23]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00e      	beq.n	8002a4a <SIM_HTTP_Make_Post+0x502>
		++commandIndex; // Next command
 8002a2c:	4b17      	ldr	r3, [pc, #92]	; (8002a8c <SIM_HTTP_Make_Post+0x544>)
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	3301      	adds	r3, #1
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <SIM_HTTP_Make_Post+0x544>)
 8002a38:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 8002a3a:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <SIM_HTTP_Make_Post+0x53c>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <SIM_HTTP_Make_Post+0x540>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	75fb      	strb	r3, [r7, #23]
	}

	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <SIM_HTTP_Make_Post+0x544>)
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d304      	bcc.n	8002a62 <SIM_HTTP_Make_Post+0x51a>
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <SIM_HTTP_Make_Post+0x578>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d006      	beq.n	8002a70 <SIM_HTTP_Make_Post+0x528>
		commandIndex = 0;
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <SIM_HTTP_Make_Post+0x544>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 8002a68:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <SIM_HTTP_Make_Post+0x578>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	701a      	strb	r2, [r3, #0]
	}


	return;
 8002a6e:	bf00      	nop
 8002a70:	bf00      	nop
}
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	0801016c 	.word	0x0801016c
 8002a7c:	20002484 	.word	0x20002484
 8002a80:	20002684 	.word	0x20002684
 8002a84:	20002580 	.word	0x20002580
 8002a88:	2000000d 	.word	0x2000000d
 8002a8c:	20002480 	.word	0x20002480
 8002a90:	080104b8 	.word	0x080104b8
 8002a94:	200025e8 	.word	0x200025e8
 8002a98:	08010458 	.word	0x08010458
 8002a9c:	080104c8 	.word	0x080104c8
 8002aa0:	2000261a 	.word	0x2000261a
 8002aa4:	2000261c 	.word	0x2000261c
 8002aa8:	20000000 	.word	0x20000000
 8002aac:	080104cc 	.word	0x080104cc
 8002ab0:	080104d4 	.word	0x080104d4
 8002ab4:	20002620 	.word	0x20002620
 8002ab8:	080104e0 	.word	0x080104e0
 8002abc:	2000000c 	.word	0x2000000c
 8002ac0:	20002482 	.word	0x20002482
 8002ac4:	2000047e 	.word	0x2000047e
 8002ac8:	2000047d 	.word	0x2000047d

08002acc <SIM_HTTP_Make_Get>:



void SIM_HTTP_Make_Get(void) {
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
	// 5: AT+SHAHEAD="Accept","*/*"
	// 6: AT+SHREQ="/api/time?API_KEY=9349da48-62ef-496b-831a-4720015ff72a",1
	// 7: AT+SHREAD=0,2 // read http result (second variable dependant on result from SHREQ)
	// 8: AT+SHDISC - Disconnect HTTP connect

	uint8_t maxCommand = 8;
 8002ad2:	2308      	movs	r3, #8
 8002ad4:	73fb      	strb	r3, [r7, #15]

	if ((shouldTransmit) && (commandIndex <= maxCommand)) {
 8002ad6:	4b96      	ldr	r3, [pc, #600]	; (8002d30 <SIM_HTTP_Make_Get+0x264>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d067      	beq.n	8002bae <SIM_HTTP_Make_Get+0xe2>
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	4b94      	ldr	r3, [pc, #592]	; (8002d34 <SIM_HTTP_Make_Get+0x268>)
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d360      	bcc.n	8002bae <SIM_HTTP_Make_Get+0xe2>
		// Next command should be transmitted

		switch (commandIndex) {
 8002aec:	4b91      	ldr	r3, [pc, #580]	; (8002d34 <SIM_HTTP_Make_Get+0x268>)
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d84d      	bhi.n	8002b92 <SIM_HTTP_Make_Get+0xc6>
 8002af6:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <SIM_HTTP_Make_Get+0x30>)
 8002af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afc:	08002b21 	.word	0x08002b21
 8002b00:	08002b2b 	.word	0x08002b2b
 8002b04:	08002b35 	.word	0x08002b35
 8002b08:	08002b3f 	.word	0x08002b3f
 8002b0c:	08002b49 	.word	0x08002b49
 8002b10:	08002b53 	.word	0x08002b53
 8002b14:	08002b5d 	.word	0x08002b5d
 8002b18:	08002b67 	.word	0x08002b67
 8002b1c:	08002b89 	.word	0x08002b89
			case 0:
				// Get HTTP header
				sprintf(ATcommand, "AT+SHSTATE?\r\n");
 8002b20:	4985      	ldr	r1, [pc, #532]	; (8002d38 <SIM_HTTP_Make_Get+0x26c>)
 8002b22:	4886      	ldr	r0, [pc, #536]	; (8002d3c <SIM_HTTP_Make_Get+0x270>)
 8002b24:	f009 fd18 	bl	800c558 <siprintf>
				break;
 8002b28:	e034      	b.n	8002b94 <SIM_HTTP_Make_Get+0xc8>
			case 1:
				// Clear HTTP header
				sprintf(ATcommand, "AT+SHCHEAD\r\n");
 8002b2a:	4985      	ldr	r1, [pc, #532]	; (8002d40 <SIM_HTTP_Make_Get+0x274>)
 8002b2c:	4883      	ldr	r0, [pc, #524]	; (8002d3c <SIM_HTTP_Make_Get+0x270>)
 8002b2e:	f009 fd13 	bl	800c558 <siprintf>
				break;
 8002b32:	e02f      	b.n	8002b94 <SIM_HTTP_Make_Get+0xc8>
			case 2:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"User-Agent\",\"curl/7.47.0\"\r\n");
 8002b34:	4983      	ldr	r1, [pc, #524]	; (8002d44 <SIM_HTTP_Make_Get+0x278>)
 8002b36:	4881      	ldr	r0, [pc, #516]	; (8002d3c <SIM_HTTP_Make_Get+0x270>)
 8002b38:	f009 fd0e 	bl	800c558 <siprintf>
				break;
 8002b3c:	e02a      	b.n	8002b94 <SIM_HTTP_Make_Get+0xc8>
			case 3:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Cache-control\",\"no-cache\"\r\n");
 8002b3e:	4982      	ldr	r1, [pc, #520]	; (8002d48 <SIM_HTTP_Make_Get+0x27c>)
 8002b40:	487e      	ldr	r0, [pc, #504]	; (8002d3c <SIM_HTTP_Make_Get+0x270>)
 8002b42:	f009 fd09 	bl	800c558 <siprintf>
				break;
 8002b46:	e025      	b.n	8002b94 <SIM_HTTP_Make_Get+0xc8>
			case 4:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Connection\",\"keep-alive\"\r\n");
 8002b48:	4980      	ldr	r1, [pc, #512]	; (8002d4c <SIM_HTTP_Make_Get+0x280>)
 8002b4a:	487c      	ldr	r0, [pc, #496]	; (8002d3c <SIM_HTTP_Make_Get+0x270>)
 8002b4c:	f009 fd04 	bl	800c558 <siprintf>
				break;
 8002b50:	e020      	b.n	8002b94 <SIM_HTTP_Make_Get+0xc8>
			case 5:
				// Add header content
				sprintf(ATcommand, "AT+SHAHEAD=\"Accept\",\"*/*\"\r\n");
 8002b52:	497f      	ldr	r1, [pc, #508]	; (8002d50 <SIM_HTTP_Make_Get+0x284>)
 8002b54:	4879      	ldr	r0, [pc, #484]	; (8002d3c <SIM_HTTP_Make_Get+0x270>)
 8002b56:	f009 fcff 	bl	800c558 <siprintf>
				break;
 8002b5a:	e01b      	b.n	8002b94 <SIM_HTTP_Make_Get+0xc8>
			case 6:
				// Set request (1: GET)
				sprintf(ATcommand, "AT+SHREQ=\"/api/time?API_KEY=9349da48-62ef-496b-831a-4720015ff72a\",1\r\n");
 8002b5c:	497d      	ldr	r1, [pc, #500]	; (8002d54 <SIM_HTTP_Make_Get+0x288>)
 8002b5e:	4877      	ldr	r0, [pc, #476]	; (8002d3c <SIM_HTTP_Make_Get+0x270>)
 8002b60:	f009 fcfa 	bl	800c558 <siprintf>
				break;
 8002b64:	e016      	b.n	8002b94 <SIM_HTTP_Make_Get+0xc8>
			case 7: ;
				// Read data after request
				char d[4];
				itoa(dataLengthVal, d, 10);
 8002b66:	4b7c      	ldr	r3, [pc, #496]	; (8002d58 <SIM_HTTP_Make_Get+0x28c>)
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f107 0308 	add.w	r3, r7, #8
 8002b70:	220a      	movs	r2, #10
 8002b72:	4619      	mov	r1, r3
 8002b74:	f008 fd6e 	bl	800b654 <itoa>
				sprintf(ATcommand, "AT+SHREAD=0,%s\r\n", d);
 8002b78:	f107 0308 	add.w	r3, r7, #8
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4977      	ldr	r1, [pc, #476]	; (8002d5c <SIM_HTTP_Make_Get+0x290>)
 8002b80:	486e      	ldr	r0, [pc, #440]	; (8002d3c <SIM_HTTP_Make_Get+0x270>)
 8002b82:	f009 fce9 	bl	800c558 <siprintf>
				break;
 8002b86:	e005      	b.n	8002b94 <SIM_HTTP_Make_Get+0xc8>
			case 8:
				// Disconnect HTTP
				sprintf(ATcommand, "AT+SHDISC\r\n");
 8002b88:	4975      	ldr	r1, [pc, #468]	; (8002d60 <SIM_HTTP_Make_Get+0x294>)
 8002b8a:	486c      	ldr	r0, [pc, #432]	; (8002d3c <SIM_HTTP_Make_Get+0x270>)
 8002b8c:	f009 fce4 	bl	800c558 <siprintf>
				break;
 8002b90:	e000      	b.n	8002b94 <SIM_HTTP_Make_Get+0xc8>
			default:
				break;
 8002b92:	bf00      	nop
		}


		HAL_UART_Transmit_IT(&huart1, (uint8_t *) ATcommand, strlen(ATcommand)); // Transmit AT command
 8002b94:	4869      	ldr	r0, [pc, #420]	; (8002d3c <SIM_HTTP_Make_Get+0x270>)
 8002b96:	f7fd fb1b 	bl	80001d0 <strlen>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	4966      	ldr	r1, [pc, #408]	; (8002d3c <SIM_HTTP_Make_Get+0x270>)
 8002ba2:	4870      	ldr	r0, [pc, #448]	; (8002d64 <SIM_HTTP_Make_Get+0x298>)
 8002ba4:	f006 fc42 	bl	800942c <HAL_UART_Transmit_IT>
		shouldTransmit = 0; // no transmission until response has been read
 8002ba8:	4b61      	ldr	r3, [pc, #388]	; (8002d30 <SIM_HTTP_Make_Get+0x264>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]

	} // if shouldTransmit
	// --------------------------------------------------------------- //

	// ---------------------------- RX ------------------------------- //
	uint8_t isIncrementCommand = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	75fb      	strb	r3, [r7, #23]

	switch (commandIndex) {
 8002bb2:	4b60      	ldr	r3, [pc, #384]	; (8002d34 <SIM_HTTP_Make_Get+0x268>)
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	f200 8174 	bhi.w	8002ea6 <SIM_HTTP_Make_Get+0x3da>
 8002bbe:	a201      	add	r2, pc, #4	; (adr r2, 8002bc4 <SIM_HTTP_Make_Get+0xf8>)
 8002bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc4:	08002be9 	.word	0x08002be9
 8002bc8:	08002c35 	.word	0x08002c35
 8002bcc:	08002c4b 	.word	0x08002c4b
 8002bd0:	08002c61 	.word	0x08002c61
 8002bd4:	08002c77 	.word	0x08002c77
 8002bd8:	08002c8d 	.word	0x08002c8d
 8002bdc:	08002ca3 	.word	0x08002ca3
 8002be0:	08002d9d 	.word	0x08002d9d
 8002be4:	08002e7b 	.word	0x08002e7b
		case 0:
			// +SHSTATE: 0\r\n\r\nOK\r\n - HTTP disconnect state
			if (strstr((char*) serialRX_Buffer, "+SHSTATE: 0\r\n\r\nOK\r\n")) {
 8002be8:	495f      	ldr	r1, [pc, #380]	; (8002d68 <SIM_HTTP_Make_Get+0x29c>)
 8002bea:	4860      	ldr	r0, [pc, #384]	; (8002d6c <SIM_HTTP_Make_Get+0x2a0>)
 8002bec:	f009 fcf6 	bl	800c5dc <strstr>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00c      	beq.n	8002c10 <SIM_HTTP_Make_Get+0x144>
				// If disconnected, build HTTP post
				simState = SIM_HTTP_BUILD;
 8002bf6:	4b5e      	ldr	r3, [pc, #376]	; (8002d70 <SIM_HTTP_Make_Get+0x2a4>)
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	701a      	strb	r2, [r3, #0]
				isStateChanged = 1;
 8002bfc:	4b5d      	ldr	r3, [pc, #372]	; (8002d74 <SIM_HTTP_Make_Get+0x2a8>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	701a      	strb	r2, [r3, #0]
				clearBuffer = 1; // Clear buffer to receive next response
 8002c02:	4b5d      	ldr	r3, [pc, #372]	; (8002d78 <SIM_HTTP_Make_Get+0x2ac>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1; // Can transmit next command
 8002c08:	4b49      	ldr	r3, [pc, #292]	; (8002d30 <SIM_HTTP_Make_Get+0x264>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	701a      	strb	r2, [r3, #0]
			else if (strstr((char*) serialRX_Buffer, "+SHSTATE: 1\r\n\r\nOK\r\n")) {
				commandIndex = 1; // AT+SHDISC next command
				clearBuffer = 1; // Clear buffer to receive next response
				shouldTransmit = 1; // Can transmit next command
			}
			break;
 8002c0e:	e14c      	b.n	8002eaa <SIM_HTTP_Make_Get+0x3de>
			else if (strstr((char*) serialRX_Buffer, "+SHSTATE: 1\r\n\r\nOK\r\n")) {
 8002c10:	495a      	ldr	r1, [pc, #360]	; (8002d7c <SIM_HTTP_Make_Get+0x2b0>)
 8002c12:	4856      	ldr	r0, [pc, #344]	; (8002d6c <SIM_HTTP_Make_Get+0x2a0>)
 8002c14:	f009 fce2 	bl	800c5dc <strstr>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 8145 	beq.w	8002eaa <SIM_HTTP_Make_Get+0x3de>
				commandIndex = 1; // AT+SHDISC next command
 8002c20:	4b44      	ldr	r3, [pc, #272]	; (8002d34 <SIM_HTTP_Make_Get+0x268>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	801a      	strh	r2, [r3, #0]
				clearBuffer = 1; // Clear buffer to receive next response
 8002c26:	4b54      	ldr	r3, [pc, #336]	; (8002d78 <SIM_HTTP_Make_Get+0x2ac>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
				shouldTransmit = 1; // Can transmit next command
 8002c2c:	4b40      	ldr	r3, [pc, #256]	; (8002d30 <SIM_HTTP_Make_Get+0x264>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
			break;
 8002c32:	e13a      	b.n	8002eaa <SIM_HTTP_Make_Get+0x3de>
		case 1:
			// OK received. Header cleared.
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8002c34:	4952      	ldr	r1, [pc, #328]	; (8002d80 <SIM_HTTP_Make_Get+0x2b4>)
 8002c36:	484d      	ldr	r0, [pc, #308]	; (8002d6c <SIM_HTTP_Make_Get+0x2a0>)
 8002c38:	f009 fcd0 	bl	800c5dc <strstr>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 8135 	beq.w	8002eae <SIM_HTTP_Make_Get+0x3e2>
				isIncrementCommand = 1;
 8002c44:	2301      	movs	r3, #1
 8002c46:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8002c48:	e131      	b.n	8002eae <SIM_HTTP_Make_Get+0x3e2>
		case 2:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8002c4a:	494d      	ldr	r1, [pc, #308]	; (8002d80 <SIM_HTTP_Make_Get+0x2b4>)
 8002c4c:	4847      	ldr	r0, [pc, #284]	; (8002d6c <SIM_HTTP_Make_Get+0x2a0>)
 8002c4e:	f009 fcc5 	bl	800c5dc <strstr>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 812c 	beq.w	8002eb2 <SIM_HTTP_Make_Get+0x3e6>
				isIncrementCommand = 1;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8002c5e:	e128      	b.n	8002eb2 <SIM_HTTP_Make_Get+0x3e6>
		case 3:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8002c60:	4947      	ldr	r1, [pc, #284]	; (8002d80 <SIM_HTTP_Make_Get+0x2b4>)
 8002c62:	4842      	ldr	r0, [pc, #264]	; (8002d6c <SIM_HTTP_Make_Get+0x2a0>)
 8002c64:	f009 fcba 	bl	800c5dc <strstr>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 8123 	beq.w	8002eb6 <SIM_HTTP_Make_Get+0x3ea>
				isIncrementCommand = 1;
 8002c70:	2301      	movs	r3, #1
 8002c72:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8002c74:	e11f      	b.n	8002eb6 <SIM_HTTP_Make_Get+0x3ea>
		case 4:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8002c76:	4942      	ldr	r1, [pc, #264]	; (8002d80 <SIM_HTTP_Make_Get+0x2b4>)
 8002c78:	483c      	ldr	r0, [pc, #240]	; (8002d6c <SIM_HTTP_Make_Get+0x2a0>)
 8002c7a:	f009 fcaf 	bl	800c5dc <strstr>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 811a 	beq.w	8002eba <SIM_HTTP_Make_Get+0x3ee>
				isIncrementCommand = 1;
 8002c86:	2301      	movs	r3, #1
 8002c88:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8002c8a:	e116      	b.n	8002eba <SIM_HTTP_Make_Get+0x3ee>
		case 5:
			// OK received if header content was added
			if (strstr((char*) serialRX_Buffer, "\nOK\r\n")) {
 8002c8c:	493c      	ldr	r1, [pc, #240]	; (8002d80 <SIM_HTTP_Make_Get+0x2b4>)
 8002c8e:	4837      	ldr	r0, [pc, #220]	; (8002d6c <SIM_HTTP_Make_Get+0x2a0>)
 8002c90:	f009 fca4 	bl	800c5dc <strstr>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 8111 	beq.w	8002ebe <SIM_HTTP_Make_Get+0x3f2>
				isIncrementCommand = 1;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8002ca0:	e10d      	b.n	8002ebe <SIM_HTTP_Make_Get+0x3f2>
		case 6:
			if (strstr((char*) serialRX_Buffer, "+SHREQ: \"GET\"")) {
 8002ca2:	4938      	ldr	r1, [pc, #224]	; (8002d84 <SIM_HTTP_Make_Get+0x2b8>)
 8002ca4:	4831      	ldr	r0, [pc, #196]	; (8002d6c <SIM_HTTP_Make_Get+0x2a0>)
 8002ca6:	f009 fc99 	bl	800c5dc <strstr>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 8108 	beq.w	8002ec2 <SIM_HTTP_Make_Get+0x3f6>
				copySubstringFromMatch(responseSubstring, (char*)serialRX_Buffer, "+SHREQ: \"GET\"");
 8002cb2:	4a34      	ldr	r2, [pc, #208]	; (8002d84 <SIM_HTTP_Make_Get+0x2b8>)
 8002cb4:	492d      	ldr	r1, [pc, #180]	; (8002d6c <SIM_HTTP_Make_Get+0x2a0>)
 8002cb6:	4834      	ldr	r0, [pc, #208]	; (8002d88 <SIM_HTTP_Make_Get+0x2bc>)
 8002cb8:	f000 f952 	bl	8002f60 <copySubstringFromMatch>
				// +SHREQ: \"GET\",200,36\r\n
				uint8_t splittedValIndex = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	75bb      	strb	r3, [r7, #22]
				uint16_t splittedVal[4] = {0};
 8002cc0:	463b      	mov	r3, r7
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	605a      	str	r2, [r3, #4]
				char* token;
				if (strstr(responseSubstring, "\r\n")) { // response has finished transmitting
 8002cc8:	4930      	ldr	r1, [pc, #192]	; (8002d8c <SIM_HTTP_Make_Get+0x2c0>)
 8002cca:	482f      	ldr	r0, [pc, #188]	; (8002d88 <SIM_HTTP_Make_Get+0x2bc>)
 8002ccc:	f009 fc86 	bl	800c5dc <strstr>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80f5 	beq.w	8002ec2 <SIM_HTTP_Make_Get+0x3f6>
					token = strtok(responseSubstring, ",");
 8002cd8:	492d      	ldr	r1, [pc, #180]	; (8002d90 <SIM_HTTP_Make_Get+0x2c4>)
 8002cda:	482b      	ldr	r0, [pc, #172]	; (8002d88 <SIM_HTTP_Make_Get+0x2bc>)
 8002cdc:	f00a fabc 	bl	800d258 <strtok>
 8002ce0:	6138      	str	r0, [r7, #16]
					while (token != NULL  && splittedValIndex<4) {
 8002ce2:	e012      	b.n	8002d0a <SIM_HTTP_Make_Get+0x23e>
						splittedVal[++splittedValIndex] = atoi(token);
 8002ce4:	6938      	ldr	r0, [r7, #16]
 8002ce6:	f008 fc6e 	bl	800b5c6 <atoi>
 8002cea:	4602      	mov	r2, r0
 8002cec:	7dbb      	ldrb	r3, [r7, #22]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	75bb      	strb	r3, [r7, #22]
 8002cf2:	7dbb      	ldrb	r3, [r7, #22]
 8002cf4:	b292      	uxth	r2, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	3318      	adds	r3, #24
 8002cfa:	443b      	add	r3, r7
 8002cfc:	f823 2c18 	strh.w	r2, [r3, #-24]
						token = strtok(NULL, ",");
 8002d00:	4923      	ldr	r1, [pc, #140]	; (8002d90 <SIM_HTTP_Make_Get+0x2c4>)
 8002d02:	2000      	movs	r0, #0
 8002d04:	f00a faa8 	bl	800d258 <strtok>
 8002d08:	6138      	str	r0, [r7, #16]
					while (token != NULL  && splittedValIndex<4) {
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <SIM_HTTP_Make_Get+0x24a>
 8002d10:	7dbb      	ldrb	r3, [r7, #22]
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d9e6      	bls.n	8002ce4 <SIM_HTTP_Make_Get+0x218>
					}
					statusCodeVal = splittedVal[2]; // TODO: Wrong status code received? (Do the same for POST)
 8002d16:	88ba      	ldrh	r2, [r7, #4]
 8002d18:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <SIM_HTTP_Make_Get+0x2c8>)
 8002d1a:	801a      	strh	r2, [r3, #0]
					dataLengthVal = splittedVal[3];
 8002d1c:	88fa      	ldrh	r2, [r7, #6]
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <SIM_HTTP_Make_Get+0x28c>)
 8002d20:	801a      	strh	r2, [r3, #0]
					isIncrementCommand = 1;
 8002d22:	2301      	movs	r3, #1
 8002d24:	75fb      	strb	r3, [r7, #23]
					isLD3_Flicker = 0; // TODO: remove later
 8002d26:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <SIM_HTTP_Make_Get+0x2cc>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8002d2c:	e0c9      	b.n	8002ec2 <SIM_HTTP_Make_Get+0x3f6>
 8002d2e:	bf00      	nop
 8002d30:	2000000d 	.word	0x2000000d
 8002d34:	20002480 	.word	0x20002480
 8002d38:	0801029c 	.word	0x0801029c
 8002d3c:	2000241c 	.word	0x2000241c
 8002d40:	08010380 	.word	0x08010380
 8002d44:	080104f0 	.word	0x080104f0
 8002d48:	080103d0 	.word	0x080103d0
 8002d4c:	080103f8 	.word	0x080103f8
 8002d50:	08010420 	.word	0x08010420
 8002d54:	08010518 	.word	0x08010518
 8002d58:	2000261c 	.word	0x2000261c
 8002d5c:	080104a4 	.word	0x080104a4
 8002d60:	080102ac 	.word	0x080102ac
 8002d64:	200003f8 	.word	0x200003f8
 8002d68:	08010330 	.word	0x08010330
 8002d6c:	20002484 	.word	0x20002484
 8002d70:	2000000c 	.word	0x2000000c
 8002d74:	20002482 	.word	0x20002482
 8002d78:	20002580 	.word	0x20002580
 8002d7c:	08010344 	.word	0x08010344
 8002d80:	0801016c 	.word	0x0801016c
 8002d84:	08010560 	.word	0x08010560
 8002d88:	200025e8 	.word	0x200025e8
 8002d8c:	08010458 	.word	0x08010458
 8002d90:	080104c8 	.word	0x080104c8
 8002d94:	2000261a 	.word	0x2000261a
 8002d98:	20000000 	.word	0x20000000
		case 7:
			if (strstr((char*) serialRX_Buffer, "}\n\r\n")) {
 8002d9c:	4960      	ldr	r1, [pc, #384]	; (8002f20 <SIM_HTTP_Make_Get+0x454>)
 8002d9e:	4861      	ldr	r0, [pc, #388]	; (8002f24 <SIM_HTTP_Make_Get+0x458>)
 8002da0:	f009 fc1c 	bl	800c5dc <strstr>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 808d 	beq.w	8002ec6 <SIM_HTTP_Make_Get+0x3fa>
				copySubstringFromMatch(SHREAD_Data, (char*) serialRX_Buffer, "+SHREAD:");
 8002dac:	4a5e      	ldr	r2, [pc, #376]	; (8002f28 <SIM_HTTP_Make_Get+0x45c>)
 8002dae:	495d      	ldr	r1, [pc, #372]	; (8002f24 <SIM_HTTP_Make_Get+0x458>)
 8002db0:	485e      	ldr	r0, [pc, #376]	; (8002f2c <SIM_HTTP_Make_Get+0x460>)
 8002db2:	f000 f8d5 	bl	8002f60 <copySubstringFromMatch>
				isIncrementCommand = 1;
 8002db6:	2301      	movs	r3, #1
 8002db8:	75fb      	strb	r3, [r7, #23]
//				"+SHREAD: 36\r\n{\n  \"time\": \"2022-09-15 18:12:11\"\n}\n\r\n"
				currentDateTime[0] = atoi(substr(SHREAD_Data, 26, 30)) - 2000;
 8002dba:	221e      	movs	r2, #30
 8002dbc:	211a      	movs	r1, #26
 8002dbe:	485b      	ldr	r0, [pc, #364]	; (8002f2c <SIM_HTTP_Make_Get+0x460>)
 8002dc0:	f000 f8f7 	bl	8002fb2 <substr>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f008 fbfd 	bl	800b5c6 <atoi>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	3330      	adds	r3, #48	; 0x30
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	4b56      	ldr	r3, [pc, #344]	; (8002f30 <SIM_HTTP_Make_Get+0x464>)
 8002dd6:	701a      	strb	r2, [r3, #0]
				currentDateTime[1] = atoi(substr(SHREAD_Data, 31, 33));
 8002dd8:	2221      	movs	r2, #33	; 0x21
 8002dda:	211f      	movs	r1, #31
 8002ddc:	4853      	ldr	r0, [pc, #332]	; (8002f2c <SIM_HTTP_Make_Get+0x460>)
 8002dde:	f000 f8e8 	bl	8002fb2 <substr>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4618      	mov	r0, r3
 8002de6:	f008 fbee 	bl	800b5c6 <atoi>
 8002dea:	4603      	mov	r3, r0
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	4b50      	ldr	r3, [pc, #320]	; (8002f30 <SIM_HTTP_Make_Get+0x464>)
 8002df0:	705a      	strb	r2, [r3, #1]
				currentDateTime[2] = atoi(substr(SHREAD_Data, 34, 36));
 8002df2:	2224      	movs	r2, #36	; 0x24
 8002df4:	2122      	movs	r1, #34	; 0x22
 8002df6:	484d      	ldr	r0, [pc, #308]	; (8002f2c <SIM_HTTP_Make_Get+0x460>)
 8002df8:	f000 f8db 	bl	8002fb2 <substr>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f008 fbe1 	bl	800b5c6 <atoi>
 8002e04:	4603      	mov	r3, r0
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	4b49      	ldr	r3, [pc, #292]	; (8002f30 <SIM_HTTP_Make_Get+0x464>)
 8002e0a:	709a      	strb	r2, [r3, #2]
				currentDateTime[3] = atoi(substr(SHREAD_Data, 37, 39));
 8002e0c:	2227      	movs	r2, #39	; 0x27
 8002e0e:	2125      	movs	r1, #37	; 0x25
 8002e10:	4846      	ldr	r0, [pc, #280]	; (8002f2c <SIM_HTTP_Make_Get+0x460>)
 8002e12:	f000 f8ce 	bl	8002fb2 <substr>
 8002e16:	4603      	mov	r3, r0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f008 fbd4 	bl	800b5c6 <atoi>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	4b43      	ldr	r3, [pc, #268]	; (8002f30 <SIM_HTTP_Make_Get+0x464>)
 8002e24:	70da      	strb	r2, [r3, #3]
				currentDateTime[4] = atoi(substr(SHREAD_Data, 40, 42));
 8002e26:	222a      	movs	r2, #42	; 0x2a
 8002e28:	2128      	movs	r1, #40	; 0x28
 8002e2a:	4840      	ldr	r0, [pc, #256]	; (8002f2c <SIM_HTTP_Make_Get+0x460>)
 8002e2c:	f000 f8c1 	bl	8002fb2 <substr>
 8002e30:	4603      	mov	r3, r0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f008 fbc7 	bl	800b5c6 <atoi>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	4b3c      	ldr	r3, [pc, #240]	; (8002f30 <SIM_HTTP_Make_Get+0x464>)
 8002e3e:	711a      	strb	r2, [r3, #4]
				currentDateTime[5] = atoi(substr(SHREAD_Data, 43, 45));
 8002e40:	222d      	movs	r2, #45	; 0x2d
 8002e42:	212b      	movs	r1, #43	; 0x2b
 8002e44:	4839      	ldr	r0, [pc, #228]	; (8002f2c <SIM_HTTP_Make_Get+0x460>)
 8002e46:	f000 f8b4 	bl	8002fb2 <substr>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f008 fbba 	bl	800b5c6 <atoi>
 8002e52:	4603      	mov	r3, r0
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <SIM_HTTP_Make_Get+0x464>)
 8002e58:	715a      	strb	r2, [r3, #5]
				set_time();
 8002e5a:	f7fe fd7b 	bl	8001954 <set_time>
				set_alarm_B(alarmB_SecondsOffset);
 8002e5e:	4b35      	ldr	r3, [pc, #212]	; (8002f34 <SIM_HTTP_Make_Get+0x468>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe fe74 	bl	8001b50 <set_alarm_B>
				set_alarm_A(alarmA_SecondsOffset);
 8002e68:	4b33      	ldr	r3, [pc, #204]	; (8002f38 <SIM_HTTP_Make_Get+0x46c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fe fdd3 	bl	8001a18 <set_alarm_A>
				time_synced_flag = 1;
 8002e72:	4b32      	ldr	r3, [pc, #200]	; (8002f3c <SIM_HTTP_Make_Get+0x470>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002e78:	e025      	b.n	8002ec6 <SIM_HTTP_Make_Get+0x3fa>
		case 8:
			// OK received. Successful disconnect.
			if (strstr((char*) serialRX_Buffer, "+SHDISC\r\r\nOK\r\n")) {
 8002e7a:	4931      	ldr	r1, [pc, #196]	; (8002f40 <SIM_HTTP_Make_Get+0x474>)
 8002e7c:	4829      	ldr	r0, [pc, #164]	; (8002f24 <SIM_HTTP_Make_Get+0x458>)
 8002e7e:	f009 fbad 	bl	800c5dc <strstr>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d020      	beq.n	8002eca <SIM_HTTP_Make_Get+0x3fe>
				isIncrementCommand = 1;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	75fb      	strb	r3, [r7, #23]
				simState = SIM_STANDBY;
 8002e8c:	4b2d      	ldr	r3, [pc, #180]	; (8002f44 <SIM_HTTP_Make_Get+0x478>)
 8002e8e:	2207      	movs	r2, #7
 8002e90:	701a      	strb	r2, [r3, #0]
				sim_flag = 0;
 8002e92:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <SIM_HTTP_Make_Get+0x47c>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]
				isStateChanged = 1;
 8002e98:	4b2c      	ldr	r3, [pc, #176]	; (8002f4c <SIM_HTTP_Make_Get+0x480>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
				isLD3_Flicker = 1; // TODO: remove later
 8002e9e:	4b2c      	ldr	r3, [pc, #176]	; (8002f50 <SIM_HTTP_Make_Get+0x484>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002ea4:	e011      	b.n	8002eca <SIM_HTTP_Make_Get+0x3fe>
		default:
			break;
 8002ea6:	bf00      	nop
 8002ea8:	e010      	b.n	8002ecc <SIM_HTTP_Make_Get+0x400>
			break;
 8002eaa:	bf00      	nop
 8002eac:	e00e      	b.n	8002ecc <SIM_HTTP_Make_Get+0x400>
			break;
 8002eae:	bf00      	nop
 8002eb0:	e00c      	b.n	8002ecc <SIM_HTTP_Make_Get+0x400>
			break;
 8002eb2:	bf00      	nop
 8002eb4:	e00a      	b.n	8002ecc <SIM_HTTP_Make_Get+0x400>
			break;
 8002eb6:	bf00      	nop
 8002eb8:	e008      	b.n	8002ecc <SIM_HTTP_Make_Get+0x400>
			break;
 8002eba:	bf00      	nop
 8002ebc:	e006      	b.n	8002ecc <SIM_HTTP_Make_Get+0x400>
			break;
 8002ebe:	bf00      	nop
 8002ec0:	e004      	b.n	8002ecc <SIM_HTTP_Make_Get+0x400>
			break;
 8002ec2:	bf00      	nop
 8002ec4:	e002      	b.n	8002ecc <SIM_HTTP_Make_Get+0x400>
			break;
 8002ec6:	bf00      	nop
 8002ec8:	e000      	b.n	8002ecc <SIM_HTTP_Make_Get+0x400>
			break;
 8002eca:	bf00      	nop
	}

	if (isIncrementCommand) {
 8002ecc:	7dfb      	ldrb	r3, [r7, #23]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00e      	beq.n	8002ef0 <SIM_HTTP_Make_Get+0x424>
		++commandIndex; // Next command
 8002ed2:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <SIM_HTTP_Make_Get+0x488>)
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3301      	adds	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <SIM_HTTP_Make_Get+0x488>)
 8002ede:	801a      	strh	r2, [r3, #0]
		clearBuffer = 1; // Clear buffer to receive next response
 8002ee0:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <SIM_HTTP_Make_Get+0x48c>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	701a      	strb	r2, [r3, #0]
		shouldTransmit = 1; // Can transmit next command
 8002ee6:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <SIM_HTTP_Make_Get+0x490>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	701a      	strb	r2, [r3, #0]

		isIncrementCommand = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	75fb      	strb	r3, [r7, #23]
	}

	// --------------------------------------------------------------- //


	if ((commandIndex > maxCommand) || (isStateChanged)) {
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	4b17      	ldr	r3, [pc, #92]	; (8002f54 <SIM_HTTP_Make_Get+0x488>)
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d304      	bcc.n	8002f08 <SIM_HTTP_Make_Get+0x43c>
 8002efe:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <SIM_HTTP_Make_Get+0x480>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d006      	beq.n	8002f16 <SIM_HTTP_Make_Get+0x44a>
		commandIndex = 0;
 8002f08:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <SIM_HTTP_Make_Get+0x488>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	801a      	strh	r2, [r3, #0]
		isStateChanged = 0;
 8002f0e:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <SIM_HTTP_Make_Get+0x480>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
	}


	return;
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
}
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	080104cc 	.word	0x080104cc
 8002f24:	20002484 	.word	0x20002484
 8002f28:	080104d4 	.word	0x080104d4
 8002f2c:	20002620 	.word	0x20002620
 8002f30:	200023c8 	.word	0x200023c8
 8002f34:	20000008 	.word	0x20000008
 8002f38:	20000004 	.word	0x20000004
 8002f3c:	2000047c 	.word	0x2000047c
 8002f40:	080104e0 	.word	0x080104e0
 8002f44:	2000000c 	.word	0x2000000c
 8002f48:	2000047d 	.word	0x2000047d
 8002f4c:	20002482 	.word	0x20002482
 8002f50:	20000000 	.word	0x20000000
 8002f54:	20002480 	.word	0x20002480
 8002f58:	20002580 	.word	0x20002580
 8002f5c:	2000000d 	.word	0x2000000d

08002f60 <copySubstringFromMatch>:

// No check is implemented for destination that is smaller than the substring
void copySubstringFromMatch(char* destination, char* source, char* strToMatch) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
	char* firstOccurence = strstr(source, strToMatch);
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	68b8      	ldr	r0, [r7, #8]
 8002f70:	f009 fb34 	bl	800c5dc <strstr>
 8002f74:	6178      	str	r0, [r7, #20]
	if (!firstOccurence) { // string to match not found
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d016      	beq.n	8002faa <copySubstringFromMatch+0x4a>
		return;
	}

	uint16_t startPos = firstOccurence - source;
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	827b      	strh	r3, [r7, #18]
	uint16_t substringLength = strlen(source) - startPos;
 8002f84:	68b8      	ldr	r0, [r7, #8]
 8002f86:	f7fd f923 	bl	80001d0 <strlen>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	8a7b      	ldrh	r3, [r7, #18]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	823b      	strh	r3, [r7, #16]

	strncpy(destination, source+startPos, startPos+substringLength);
 8002f94:	8a7b      	ldrh	r3, [r7, #18]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	18d1      	adds	r1, r2, r3
 8002f9a:	8a7a      	ldrh	r2, [r7, #18]
 8002f9c:	8a3b      	ldrh	r3, [r7, #16]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f009 fb07 	bl	800c5b6 <strncpy>

	return;
 8002fa8:	e000      	b.n	8002fac <copySubstringFromMatch+0x4c>
		return;
 8002faa:	bf00      	nop
}
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <substr>:

// Following function extracts characters present in `src`
// between `m` and `n` (excluding `n`)
// https://www.techiedelight.com/implement-substr-function-c/#:~:text=The%20substr()%20function%20returns,string%20between%20two%20given%20indices.&text=It%20returns%20the%20substring%20of,ending%20at%20position%20n%2D1%20.
char* substr(const char *src, int m, int n)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b088      	sub	sp, #32
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
    // get the length of the destination string
    int len = n - m;
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	617b      	str	r3, [r7, #20]

    // allocate (len + 1) chars for destination (+1 for extra null character)
    char *dest = (char*)malloc(sizeof(char) * (len + 1));
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f008 fb44 	bl	800b658 <malloc>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	61fb      	str	r3, [r7, #28]

    // extracts characters between m'th and n'th index from source string
    // and copy them into the destination string
    for (int i = m; i < n && (*(src + i) != '\0'); i++)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	61bb      	str	r3, [r7, #24]
 8002fd8:	e00b      	b.n	8002ff2 <substr+0x40>
    {
        *dest = *(src + i);
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4413      	add	r3, r2
 8002fe0:	781a      	ldrb	r2, [r3, #0]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	701a      	strb	r2, [r3, #0]
        dest++;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	61fb      	str	r3, [r7, #28]
    for (int i = m; i < n && (*(src + i) != '\0'); i++)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	da05      	bge.n	8003006 <substr+0x54>
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4413      	add	r3, r2
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1e9      	bne.n	8002fda <substr+0x28>
    }

    // null-terminate the destination string
    *dest = '\0';
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	2200      	movs	r2, #0
 800300a:	701a      	strb	r2, [r3, #0]

    // return the destination string
    return dest - len;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	425b      	negs	r3, r3
 8003010:	69fa      	ldr	r2, [r7, #28]
 8003012:	4413      	add	r3, r2
}
 8003014:	4618      	mov	r0, r3
 8003016:	3720      	adds	r7, #32
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003022:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <HAL_MspInit+0x44>)
 8003024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003026:	4a0e      	ldr	r2, [pc, #56]	; (8003060 <HAL_MspInit+0x44>)
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	6613      	str	r3, [r2, #96]	; 0x60
 800302e:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <HAL_MspInit+0x44>)
 8003030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	607b      	str	r3, [r7, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800303a:	4b09      	ldr	r3, [pc, #36]	; (8003060 <HAL_MspInit+0x44>)
 800303c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303e:	4a08      	ldr	r2, [pc, #32]	; (8003060 <HAL_MspInit+0x44>)
 8003040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003044:	6593      	str	r3, [r2, #88]	; 0x58
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_MspInit+0x44>)
 8003048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40021000 	.word	0x40021000

08003064 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b09e      	sub	sp, #120	; 0x78
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	60da      	str	r2, [r3, #12]
 800307a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800307c:	f107 0310 	add.w	r3, r7, #16
 8003080:	2254      	movs	r2, #84	; 0x54
 8003082:	2100      	movs	r1, #0
 8003084:	4618      	mov	r0, r3
 8003086:	f008 faef 	bl	800b668 <memset>
  if(hadc->Instance==ADC1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a3f      	ldr	r2, [pc, #252]	; (800318c <HAL_ADC_MspInit+0x128>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d176      	bne.n	8003182 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003094:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003098:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800309a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800309e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80030a0:	2301      	movs	r3, #1
 80030a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80030a4:	2301      	movs	r3, #1
 80030a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80030a8:	2310      	movs	r3, #16
 80030aa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80030ac:	2307      	movs	r3, #7
 80030ae:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80030b0:	2302      	movs	r3, #2
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80030b4:	2302      	movs	r3, #2
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80030b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030be:	f107 0310 	add.w	r3, r7, #16
 80030c2:	4618      	mov	r0, r3
 80030c4:	f004 f92e 	bl	8007324 <HAL_RCCEx_PeriphCLKConfig>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80030ce:	f7fe fdd9 	bl	8001c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80030d2:	4b2f      	ldr	r3, [pc, #188]	; (8003190 <HAL_ADC_MspInit+0x12c>)
 80030d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d6:	4a2e      	ldr	r2, [pc, #184]	; (8003190 <HAL_ADC_MspInit+0x12c>)
 80030d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030de:	4b2c      	ldr	r3, [pc, #176]	; (8003190 <HAL_ADC_MspInit+0x12c>)
 80030e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ea:	4b29      	ldr	r3, [pc, #164]	; (8003190 <HAL_ADC_MspInit+0x12c>)
 80030ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ee:	4a28      	ldr	r2, [pc, #160]	; (8003190 <HAL_ADC_MspInit+0x12c>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030f6:	4b26      	ldr	r3, [pc, #152]	; (8003190 <HAL_ADC_MspInit+0x12c>)
 80030f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = TDS_ADC_IN_Pin|PH_ADC_IN_Pin|TEMP_ADC_IN_Pin|BATT_VOLT_ADC_IN_Pin;
 8003102:	235c      	movs	r3, #92	; 0x5c
 8003104:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003106:	230b      	movs	r3, #11
 8003108:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310a:	2300      	movs	r3, #0
 800310c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003112:	4619      	mov	r1, r3
 8003114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003118:	f002 f9fe 	bl	8005518 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800311c:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <HAL_ADC_MspInit+0x130>)
 800311e:	4a1e      	ldr	r2, [pc, #120]	; (8003198 <HAL_ADC_MspInit+0x134>)
 8003120:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003122:	4b1c      	ldr	r3, [pc, #112]	; (8003194 <HAL_ADC_MspInit+0x130>)
 8003124:	2200      	movs	r2, #0
 8003126:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003128:	4b1a      	ldr	r3, [pc, #104]	; (8003194 <HAL_ADC_MspInit+0x130>)
 800312a:	2200      	movs	r2, #0
 800312c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800312e:	4b19      	ldr	r3, [pc, #100]	; (8003194 <HAL_ADC_MspInit+0x130>)
 8003130:	2200      	movs	r2, #0
 8003132:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003134:	4b17      	ldr	r3, [pc, #92]	; (8003194 <HAL_ADC_MspInit+0x130>)
 8003136:	2280      	movs	r2, #128	; 0x80
 8003138:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800313a:	4b16      	ldr	r3, [pc, #88]	; (8003194 <HAL_ADC_MspInit+0x130>)
 800313c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003140:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003142:	4b14      	ldr	r3, [pc, #80]	; (8003194 <HAL_ADC_MspInit+0x130>)
 8003144:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003148:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800314a:	4b12      	ldr	r3, [pc, #72]	; (8003194 <HAL_ADC_MspInit+0x130>)
 800314c:	2200      	movs	r2, #0
 800314e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003150:	4b10      	ldr	r3, [pc, #64]	; (8003194 <HAL_ADC_MspInit+0x130>)
 8003152:	2200      	movs	r2, #0
 8003154:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003156:	480f      	ldr	r0, [pc, #60]	; (8003194 <HAL_ADC_MspInit+0x130>)
 8003158:	f001 ff5a 	bl	8005010 <HAL_DMA_Init>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8003162:	f7fe fd8f 	bl	8001c84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a0a      	ldr	r2, [pc, #40]	; (8003194 <HAL_ADC_MspInit+0x130>)
 800316a:	64da      	str	r2, [r3, #76]	; 0x4c
 800316c:	4a09      	ldr	r2, [pc, #36]	; (8003194 <HAL_ADC_MspInit+0x130>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8003172:	2200      	movs	r2, #0
 8003174:	2100      	movs	r1, #0
 8003176:	2012      	movs	r0, #18
 8003178:	f001 ff13 	bl	8004fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800317c:	2012      	movs	r0, #18
 800317e:	f001 ff2c 	bl	8004fda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003182:	bf00      	nop
 8003184:	3778      	adds	r7, #120	; 0x78
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	50040000 	.word	0x50040000
 8003190:	40021000 	.word	0x40021000
 8003194:	20000288 	.word	0x20000288
 8003198:	40020008 	.word	0x40020008

0800319c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b09e      	sub	sp, #120	; 0x78
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031b4:	f107 0310 	add.w	r3, r7, #16
 80031b8:	2254      	movs	r2, #84	; 0x54
 80031ba:	2100      	movs	r1, #0
 80031bc:	4618      	mov	r0, r3
 80031be:	f008 fa53 	bl	800b668 <memset>
  if(hi2c->Instance==I2C1)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a26      	ldr	r2, [pc, #152]	; (8003260 <HAL_I2C_MspInit+0xc4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d145      	bne.n	8003258 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80031cc:	2340      	movs	r3, #64	; 0x40
 80031ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80031d0:	2300      	movs	r3, #0
 80031d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031d4:	f107 0310 	add.w	r3, r7, #16
 80031d8:	4618      	mov	r0, r3
 80031da:	f004 f8a3 	bl	8007324 <HAL_RCCEx_PeriphCLKConfig>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80031e4:	f7fe fd4e 	bl	8001c84 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e8:	4b1e      	ldr	r3, [pc, #120]	; (8003264 <HAL_I2C_MspInit+0xc8>)
 80031ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ec:	4a1d      	ldr	r2, [pc, #116]	; (8003264 <HAL_I2C_MspInit+0xc8>)
 80031ee:	f043 0302 	orr.w	r3, r3, #2
 80031f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031f4:	4b1b      	ldr	r3, [pc, #108]	; (8003264 <HAL_I2C_MspInit+0xc8>)
 80031f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003200:	23c0      	movs	r3, #192	; 0xc0
 8003202:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003204:	2312      	movs	r3, #18
 8003206:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003208:	2300      	movs	r3, #0
 800320a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800320c:	2303      	movs	r3, #3
 800320e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003210:	2304      	movs	r3, #4
 8003212:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003214:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003218:	4619      	mov	r1, r3
 800321a:	4813      	ldr	r0, [pc, #76]	; (8003268 <HAL_I2C_MspInit+0xcc>)
 800321c:	f002 f97c 	bl	8005518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003220:	4b10      	ldr	r3, [pc, #64]	; (8003264 <HAL_I2C_MspInit+0xc8>)
 8003222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003224:	4a0f      	ldr	r2, [pc, #60]	; (8003264 <HAL_I2C_MspInit+0xc8>)
 8003226:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800322a:	6593      	str	r3, [r2, #88]	; 0x58
 800322c:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <HAL_I2C_MspInit+0xc8>)
 800322e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003238:	2200      	movs	r2, #0
 800323a:	2100      	movs	r1, #0
 800323c:	201f      	movs	r0, #31
 800323e:	f001 feb0 	bl	8004fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003242:	201f      	movs	r0, #31
 8003244:	f001 fec9 	bl	8004fda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003248:	2200      	movs	r2, #0
 800324a:	2100      	movs	r1, #0
 800324c:	2020      	movs	r0, #32
 800324e:	f001 fea8 	bl	8004fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003252:	2020      	movs	r0, #32
 8003254:	f001 fec1 	bl	8004fda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003258:	bf00      	nop
 800325a:	3778      	adds	r7, #120	; 0x78
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40005400 	.word	0x40005400
 8003264:	40021000 	.word	0x40021000
 8003268:	48000400 	.word	0x48000400

0800326c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b098      	sub	sp, #96	; 0x60
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003274:	f107 030c 	add.w	r3, r7, #12
 8003278:	2254      	movs	r2, #84	; 0x54
 800327a:	2100      	movs	r1, #0
 800327c:	4618      	mov	r0, r3
 800327e:	f008 f9f3 	bl	800b668 <memset>
  if(hrtc->Instance==RTC)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a17      	ldr	r2, [pc, #92]	; (80032e4 <HAL_RTC_MspInit+0x78>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d127      	bne.n	80032dc <HAL_RTC_MspInit+0x70>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800328c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003290:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003292:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003296:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003298:	f107 030c 	add.w	r3, r7, #12
 800329c:	4618      	mov	r0, r3
 800329e:	f004 f841 	bl	8007324 <HAL_RCCEx_PeriphCLKConfig>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80032a8:	f7fe fcec 	bl	8001c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80032ac:	4b0e      	ldr	r3, [pc, #56]	; (80032e8 <HAL_RTC_MspInit+0x7c>)
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b2:	4a0d      	ldr	r2, [pc, #52]	; (80032e8 <HAL_RTC_MspInit+0x7c>)
 80032b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80032bc:	2200      	movs	r2, #0
 80032be:	2100      	movs	r1, #0
 80032c0:	2003      	movs	r0, #3
 80032c2:	f001 fe6e 	bl	8004fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80032c6:	2003      	movs	r0, #3
 80032c8:	f001 fe87 	bl	8004fda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80032cc:	2200      	movs	r2, #0
 80032ce:	2100      	movs	r1, #0
 80032d0:	2029      	movs	r0, #41	; 0x29
 80032d2:	f001 fe66 	bl	8004fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80032d6:	2029      	movs	r0, #41	; 0x29
 80032d8:	f001 fe7f 	bl	8004fda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80032dc:	bf00      	nop
 80032de:	3760      	adds	r7, #96	; 0x60
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40002800 	.word	0x40002800
 80032e8:	40021000 	.word	0x40021000

080032ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08a      	sub	sp, #40	; 0x28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f4:	f107 0314 	add.w	r3, r7, #20
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	60da      	str	r2, [r3, #12]
 8003302:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a18      	ldr	r2, [pc, #96]	; (800336c <HAL_SPI_MspInit+0x80>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d129      	bne.n	8003362 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800330e:	4b18      	ldr	r3, [pc, #96]	; (8003370 <HAL_SPI_MspInit+0x84>)
 8003310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003312:	4a17      	ldr	r2, [pc, #92]	; (8003370 <HAL_SPI_MspInit+0x84>)
 8003314:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003318:	6613      	str	r3, [r2, #96]	; 0x60
 800331a:	4b15      	ldr	r3, [pc, #84]	; (8003370 <HAL_SPI_MspInit+0x84>)
 800331c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003322:	613b      	str	r3, [r7, #16]
 8003324:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003326:	4b12      	ldr	r3, [pc, #72]	; (8003370 <HAL_SPI_MspInit+0x84>)
 8003328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332a:	4a11      	ldr	r2, [pc, #68]	; (8003370 <HAL_SPI_MspInit+0x84>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003332:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <HAL_SPI_MspInit+0x84>)
 8003334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 800333e:	f641 0302 	movw	r3, #6146	; 0x1802
 8003342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003344:	2302      	movs	r3, #2
 8003346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	2300      	movs	r3, #0
 800334a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334c:	2303      	movs	r3, #3
 800334e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003350:	2305      	movs	r3, #5
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003354:	f107 0314 	add.w	r3, r7, #20
 8003358:	4619      	mov	r1, r3
 800335a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800335e:	f002 f8db 	bl	8005518 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003362:	bf00      	nop
 8003364:	3728      	adds	r7, #40	; 0x28
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40013000 	.word	0x40013000
 8003370:	40021000 	.word	0x40021000

08003374 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003384:	d113      	bne.n	80033ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003386:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <HAL_TIM_Base_MspInit+0x44>)
 8003388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338a:	4a0b      	ldr	r2, [pc, #44]	; (80033b8 <HAL_TIM_Base_MspInit+0x44>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6593      	str	r3, [r2, #88]	; 0x58
 8003392:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <HAL_TIM_Base_MspInit+0x44>)
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800339e:	2200      	movs	r2, #0
 80033a0:	2100      	movs	r1, #0
 80033a2:	201c      	movs	r0, #28
 80033a4:	f001 fdfd 	bl	8004fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033a8:	201c      	movs	r0, #28
 80033aa:	f001 fe16 	bl	8004fda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000

080033bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b09e      	sub	sp, #120	; 0x78
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033d4:	f107 0310 	add.w	r3, r7, #16
 80033d8:	2254      	movs	r2, #84	; 0x54
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f008 f943 	bl	800b668 <memset>
  if(huart->Instance==USART1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a23      	ldr	r2, [pc, #140]	; (8003474 <HAL_UART_MspInit+0xb8>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d13f      	bne.n	800346c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80033ec:	2301      	movs	r3, #1
 80033ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80033f0:	2300      	movs	r3, #0
 80033f2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033f4:	f107 0310 	add.w	r3, r7, #16
 80033f8:	4618      	mov	r0, r3
 80033fa:	f003 ff93 	bl	8007324 <HAL_RCCEx_PeriphCLKConfig>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003404:	f7fe fc3e 	bl	8001c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003408:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <HAL_UART_MspInit+0xbc>)
 800340a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340c:	4a1a      	ldr	r2, [pc, #104]	; (8003478 <HAL_UART_MspInit+0xbc>)
 800340e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003412:	6613      	str	r3, [r2, #96]	; 0x60
 8003414:	4b18      	ldr	r3, [pc, #96]	; (8003478 <HAL_UART_MspInit+0xbc>)
 8003416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003420:	4b15      	ldr	r3, [pc, #84]	; (8003478 <HAL_UART_MspInit+0xbc>)
 8003422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003424:	4a14      	ldr	r2, [pc, #80]	; (8003478 <HAL_UART_MspInit+0xbc>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800342c:	4b12      	ldr	r3, [pc, #72]	; (8003478 <HAL_UART_MspInit+0xbc>)
 800342e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_SIM_Pin|UART_RX_SIM_Pin;
 8003438:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800343c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343e:	2302      	movs	r3, #2
 8003440:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003442:	2300      	movs	r3, #0
 8003444:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003446:	2303      	movs	r3, #3
 8003448:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800344a:	2307      	movs	r3, #7
 800344c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003452:	4619      	mov	r1, r3
 8003454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003458:	f002 f85e 	bl	8005518 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800345c:	2200      	movs	r2, #0
 800345e:	2100      	movs	r1, #0
 8003460:	2025      	movs	r0, #37	; 0x25
 8003462:	f001 fd9e 	bl	8004fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003466:	2025      	movs	r0, #37	; 0x25
 8003468:	f001 fdb7 	bl	8004fda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800346c:	bf00      	nop
 800346e:	3778      	adds	r7, #120	; 0x78
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40013800 	.word	0x40013800
 8003478:	40021000 	.word	0x40021000

0800347c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003480:	e7fe      	b.n	8003480 <NMI_Handler+0x4>

08003482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003482:	b480      	push	{r7}
 8003484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003486:	e7fe      	b.n	8003486 <HardFault_Handler+0x4>

08003488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800348c:	e7fe      	b.n	800348c <MemManage_Handler+0x4>

0800348e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800348e:	b480      	push	{r7}
 8003490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003492:	e7fe      	b.n	8003492 <BusFault_Handler+0x4>

08003494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003498:	e7fe      	b.n	8003498 <UsageFault_Handler+0x4>

0800349a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800349a:	b480      	push	{r7}
 800349c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800349e:	bf00      	nop
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034b6:	b480      	push	{r7}
 80034b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034c8:	f000 f9a8 	bl	800381c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034cc:	bf00      	nop
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80034d4:	4802      	ldr	r0, [pc, #8]	; (80034e0 <RTC_WKUP_IRQHandler+0x10>)
 80034d6:	f004 feb9 	bl	800824c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000324 	.word	0x20000324

080034e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034e8:	4802      	ldr	r0, [pc, #8]	; (80034f4 <DMA1_Channel1_IRQHandler+0x10>)
 80034ea:	f001 ff28 	bl	800533e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000288 	.word	0x20000288

080034f8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80034fc:	4802      	ldr	r0, [pc, #8]	; (8003508 <ADC1_IRQHandler+0x10>)
 80034fe:	f000 fd77 	bl	8003ff0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20000224 	.word	0x20000224

0800350c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003510:	4802      	ldr	r0, [pc, #8]	; (800351c <TIM2_IRQHandler+0x10>)
 8003512:	f005 fbab 	bl	8008c6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	200003ac 	.word	0x200003ac

08003520 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003524:	4802      	ldr	r0, [pc, #8]	; (8003530 <I2C1_EV_IRQHandler+0x10>)
 8003526:	f002 fa22 	bl	800596e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	200002d0 	.word	0x200002d0

08003534 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003538:	4802      	ldr	r0, [pc, #8]	; (8003544 <I2C1_ER_IRQHandler+0x10>)
 800353a:	f002 fa32 	bl	80059a2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	200002d0 	.word	0x200002d0

08003548 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800354c:	4802      	ldr	r0, [pc, #8]	; (8003558 <USART1_IRQHandler+0x10>)
 800354e:	f006 f831 	bl	80095b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	200003f8 	.word	0x200003f8

0800355c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003560:	4802      	ldr	r0, [pc, #8]	; (800356c <RTC_Alarm_IRQHandler+0x10>)
 8003562:	f004 fd5b 	bl	800801c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000324 	.word	0x20000324

08003570 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
	return 1;
 8003574:	2301      	movs	r3, #1
}
 8003576:	4618      	mov	r0, r3
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <_kill>:

int _kill(int pid, int sig)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800358a:	f008 f821 	bl	800b5d0 <__errno>
 800358e:	4603      	mov	r3, r0
 8003590:	2216      	movs	r2, #22
 8003592:	601a      	str	r2, [r3, #0]
	return -1;
 8003594:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003598:	4618      	mov	r0, r3
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <_exit>:

void _exit (int status)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80035a8:	f04f 31ff 	mov.w	r1, #4294967295
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff ffe7 	bl	8003580 <_kill>
	while (1) {}		/* Make sure we hang here */
 80035b2:	e7fe      	b.n	80035b2 <_exit+0x12>

080035b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	e00a      	b.n	80035dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80035c6:	f3af 8000 	nop.w
 80035ca:	4601      	mov	r1, r0
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	60ba      	str	r2, [r7, #8]
 80035d2:	b2ca      	uxtb	r2, r1
 80035d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	3301      	adds	r3, #1
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	dbf0      	blt.n	80035c6 <_read+0x12>
	}

return len;
 80035e4:	687b      	ldr	r3, [r7, #4]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b086      	sub	sp, #24
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035fa:	2300      	movs	r3, #0
 80035fc:	617b      	str	r3, [r7, #20]
 80035fe:	e009      	b.n	8003614 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	60ba      	str	r2, [r7, #8]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	3301      	adds	r3, #1
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	429a      	cmp	r2, r3
 800361a:	dbf1      	blt.n	8003600 <_write+0x12>
	}
	return len;
 800361c:	687b      	ldr	r3, [r7, #4]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <_close>:

int _close(int file)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
	return -1;
 800362e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003632:	4618      	mov	r0, r3
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800364e:	605a      	str	r2, [r3, #4]
	return 0;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <_isatty>:

int _isatty(int file)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
	return 1;
 8003666:	2301      	movs	r3, #1
}
 8003668:	4618      	mov	r0, r3
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
	return 0;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
	...

08003690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003698:	4a14      	ldr	r2, [pc, #80]	; (80036ec <_sbrk+0x5c>)
 800369a:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <_sbrk+0x60>)
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036a4:	4b13      	ldr	r3, [pc, #76]	; (80036f4 <_sbrk+0x64>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036ac:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <_sbrk+0x64>)
 80036ae:	4a12      	ldr	r2, [pc, #72]	; (80036f8 <_sbrk+0x68>)
 80036b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036b2:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <_sbrk+0x64>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4413      	add	r3, r2
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d207      	bcs.n	80036d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036c0:	f007 ff86 	bl	800b5d0 <__errno>
 80036c4:	4603      	mov	r3, r0
 80036c6:	220c      	movs	r2, #12
 80036c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036ca:	f04f 33ff 	mov.w	r3, #4294967295
 80036ce:	e009      	b.n	80036e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036d0:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <_sbrk+0x64>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036d6:	4b07      	ldr	r3, [pc, #28]	; (80036f4 <_sbrk+0x64>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4413      	add	r3, r2
 80036de:	4a05      	ldr	r2, [pc, #20]	; (80036f4 <_sbrk+0x64>)
 80036e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036e2:	68fb      	ldr	r3, [r7, #12]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20010000 	.word	0x20010000
 80036f0:	00000400 	.word	0x00000400
 80036f4:	20002a74 	.word	0x20002a74
 80036f8:	20002ab0 	.word	0x20002ab0

080036fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003700:	4b06      	ldr	r3, [pc, #24]	; (800371c <SystemInit+0x20>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	4a05      	ldr	r2, [pc, #20]	; (800371c <SystemInit+0x20>)
 8003708:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800370c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003710:	bf00      	nop
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	e000ed00 	.word	0xe000ed00

08003720 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003758 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003724:	f7ff ffea 	bl	80036fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003728:	480c      	ldr	r0, [pc, #48]	; (800375c <LoopForever+0x6>)
  ldr r1, =_edata
 800372a:	490d      	ldr	r1, [pc, #52]	; (8003760 <LoopForever+0xa>)
  ldr r2, =_sidata
 800372c:	4a0d      	ldr	r2, [pc, #52]	; (8003764 <LoopForever+0xe>)
  movs r3, #0
 800372e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003730:	e002      	b.n	8003738 <LoopCopyDataInit>

08003732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003736:	3304      	adds	r3, #4

08003738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800373a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800373c:	d3f9      	bcc.n	8003732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800373e:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003740:	4c0a      	ldr	r4, [pc, #40]	; (800376c <LoopForever+0x16>)
  movs r3, #0
 8003742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003744:	e001      	b.n	800374a <LoopFillZerobss>

08003746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003748:	3204      	adds	r2, #4

0800374a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800374a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800374c:	d3fb      	bcc.n	8003746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800374e:	f007 ff45 	bl	800b5dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003752:	f7fd fd89 	bl	8001268 <main>

08003756 <LoopForever>:

LoopForever:
    b LoopForever
 8003756:	e7fe      	b.n	8003756 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003758:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800375c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003760:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8003764:	08010af0 	.word	0x08010af0
  ldr r2, =_sbss
 8003768:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 800376c:	20002aac 	.word	0x20002aac

08003770 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003770:	e7fe      	b.n	8003770 <CAN1_RX0_IRQHandler>

08003772 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800377c:	2003      	movs	r0, #3
 800377e:	f001 fc05 	bl	8004f8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003782:	2000      	movs	r0, #0
 8003784:	f000 f80e 	bl	80037a4 <HAL_InitTick>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	71fb      	strb	r3, [r7, #7]
 8003792:	e001      	b.n	8003798 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003794:	f7ff fc42 	bl	800301c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003798:	79fb      	ldrb	r3, [r7, #7]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80037b0:	4b17      	ldr	r3, [pc, #92]	; (8003810 <HAL_InitTick+0x6c>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d023      	beq.n	8003800 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80037b8:	4b16      	ldr	r3, [pc, #88]	; (8003814 <HAL_InitTick+0x70>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	4b14      	ldr	r3, [pc, #80]	; (8003810 <HAL_InitTick+0x6c>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	4619      	mov	r1, r3
 80037c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80037ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ce:	4618      	mov	r0, r3
 80037d0:	f001 fc11 	bl	8004ff6 <HAL_SYSTICK_Config>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10f      	bne.n	80037fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b0f      	cmp	r3, #15
 80037de:	d809      	bhi.n	80037f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037e0:	2200      	movs	r2, #0
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	f04f 30ff 	mov.w	r0, #4294967295
 80037e8:	f001 fbdb 	bl	8004fa2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037ec:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <HAL_InitTick+0x74>)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e007      	b.n	8003804 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
 80037f8:	e004      	b.n	8003804 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
 80037fe:	e001      	b.n	8003804 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003804:	7bfb      	ldrb	r3, [r7, #15]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20000018 	.word	0x20000018
 8003814:	20000010 	.word	0x20000010
 8003818:	20000014 	.word	0x20000014

0800381c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003820:	4b06      	ldr	r3, [pc, #24]	; (800383c <HAL_IncTick+0x20>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	461a      	mov	r2, r3
 8003826:	4b06      	ldr	r3, [pc, #24]	; (8003840 <HAL_IncTick+0x24>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4413      	add	r3, r2
 800382c:	4a04      	ldr	r2, [pc, #16]	; (8003840 <HAL_IncTick+0x24>)
 800382e:	6013      	str	r3, [r2, #0]
}
 8003830:	bf00      	nop
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	20000018 	.word	0x20000018
 8003840:	20002a78 	.word	0x20002a78

08003844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  return uwTick;
 8003848:	4b03      	ldr	r3, [pc, #12]	; (8003858 <HAL_GetTick+0x14>)
 800384a:	681b      	ldr	r3, [r3, #0]
}
 800384c:	4618      	mov	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	20002a78 	.word	0x20002a78

0800385c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003864:	f7ff ffee 	bl	8003844 <HAL_GetTick>
 8003868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003874:	d005      	beq.n	8003882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003876:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <HAL_Delay+0x44>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4413      	add	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003882:	bf00      	nop
 8003884:	f7ff ffde 	bl	8003844 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	429a      	cmp	r2, r3
 8003892:	d8f7      	bhi.n	8003884 <HAL_Delay+0x28>
  {
  }
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000018 	.word	0x20000018

080038a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	609a      	str	r2, [r3, #8]
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	609a      	str	r2, [r3, #8]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003900:	4618      	mov	r0, r3
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	3360      	adds	r3, #96	; 0x60
 800391e:	461a      	mov	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4b08      	ldr	r3, [pc, #32]	; (8003950 <LL_ADC_SetOffset+0x44>)
 800392e:	4013      	ands	r3, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	4313      	orrs	r3, r2
 800393c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003944:	bf00      	nop
 8003946:	371c      	adds	r7, #28
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	03fff000 	.word	0x03fff000

08003954 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3360      	adds	r3, #96	; 0x60
 8003962:	461a      	mov	r2, r3
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3360      	adds	r3, #96	; 0x60
 8003990:	461a      	mov	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	431a      	orrs	r2, r3
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80039aa:	bf00      	nop
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3330      	adds	r3, #48	; 0x30
 80039ec:	461a      	mov	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	0a1b      	lsrs	r3, r3, #8
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	f003 030c 	and.w	r3, r3, #12
 80039f8:	4413      	add	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f003 031f 	and.w	r3, r3, #31
 8003a06:	211f      	movs	r1, #31
 8003a08:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	401a      	ands	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	0e9b      	lsrs	r3, r3, #26
 8003a14:	f003 011f 	and.w	r1, r3, #31
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a22:	431a      	orrs	r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a28:	bf00      	nop
 8003a2a:	371c      	adds	r7, #28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a40:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e000      	b.n	8003a4e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b087      	sub	sp, #28
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3314      	adds	r3, #20
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	0e5b      	lsrs	r3, r3, #25
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	4413      	add	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	0d1b      	lsrs	r3, r3, #20
 8003a82:	f003 031f 	and.w	r3, r3, #31
 8003a86:	2107      	movs	r1, #7
 8003a88:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	401a      	ands	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	0d1b      	lsrs	r3, r3, #20
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003aa4:	bf00      	nop
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	401a      	ands	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f003 0318 	and.w	r3, r3, #24
 8003ad2:	4908      	ldr	r1, [pc, #32]	; (8003af4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003ad4:	40d9      	lsrs	r1, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	400b      	ands	r3, r1
 8003ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	0007ffff 	.word	0x0007ffff

08003af8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003b08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6093      	str	r3, [r2, #8]
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b30:	d101      	bne.n	8003b36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003b54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b80:	d101      	bne.n	8003b86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ba4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ba8:	f043 0201 	orr.w	r2, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <LL_ADC_IsEnabled+0x18>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <LL_ADC_IsEnabled+0x1a>
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bf2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bf6:	f043 0204 	orr.w	r2, r3, #4
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d101      	bne.n	8003c22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d101      	bne.n	8003c48 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
	...

08003c58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e12c      	b.n	8003ecc <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d109      	bne.n	8003c94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff f9ef 	bl	8003064 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff ff3f 	bl	8003b1c <LL_ADC_IsDeepPowerDownEnabled>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d004      	beq.n	8003cae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff ff25 	bl	8003af8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff ff5a 	bl	8003b6c <LL_ADC_IsInternalRegulatorEnabled>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d115      	bne.n	8003cea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff ff3e 	bl	8003b44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cc8:	4b82      	ldr	r3, [pc, #520]	; (8003ed4 <HAL_ADC_Init+0x27c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	099b      	lsrs	r3, r3, #6
 8003cce:	4a82      	ldr	r2, [pc, #520]	; (8003ed8 <HAL_ADC_Init+0x280>)
 8003cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd4:	099b      	lsrs	r3, r3, #6
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003cdc:	e002      	b.n	8003ce4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f9      	bne.n	8003cde <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff ff3c 	bl	8003b6c <LL_ADC_IsInternalRegulatorEnabled>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10d      	bne.n	8003d16 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfe:	f043 0210 	orr.w	r2, r3, #16
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0a:	f043 0201 	orr.w	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff ff75 	bl	8003c0a <LL_ADC_REG_IsConversionOngoing>
 8003d20:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d26:	f003 0310 	and.w	r3, r3, #16
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f040 80c5 	bne.w	8003eba <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f040 80c1 	bne.w	8003eba <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003d40:	f043 0202 	orr.w	r2, r3, #2
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff ff35 	bl	8003bbc <LL_ADC_IsEnabled>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10b      	bne.n	8003d70 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d58:	4860      	ldr	r0, [pc, #384]	; (8003edc <HAL_ADC_Init+0x284>)
 8003d5a:	f7ff ff2f 	bl	8003bbc <LL_ADC_IsEnabled>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d105      	bne.n	8003d70 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	485d      	ldr	r0, [pc, #372]	; (8003ee0 <HAL_ADC_Init+0x288>)
 8003d6c:	f7ff fd9a 	bl	80038a4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	7e5b      	ldrb	r3, [r3, #25]
 8003d74:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d7a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003d80:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003d86:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d8e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d106      	bne.n	8003dac <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	3b01      	subs	r3, #1
 8003da4:	045b      	lsls	r3, r3, #17
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d009      	beq.n	8003dc8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	4b45      	ldr	r3, [pc, #276]	; (8003ee4 <HAL_ADC_Init+0x28c>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	69b9      	ldr	r1, [r7, #24]
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff12 	bl	8003c0a <LL_ADC_REG_IsConversionOngoing>
 8003de6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff ff1f 	bl	8003c30 <LL_ADC_INJ_IsConversionOngoing>
 8003df2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d13d      	bne.n	8003e76 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d13a      	bne.n	8003e76 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e04:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e0c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e1c:	f023 0302 	bic.w	r3, r3, #2
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	69b9      	ldr	r1, [r7, #24]
 8003e26:	430b      	orrs	r3, r1
 8003e28:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d118      	bne.n	8003e66 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003e3e:	f023 0304 	bic.w	r3, r3, #4
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e4a:	4311      	orrs	r1, r2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e50:	4311      	orrs	r1, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e56:	430a      	orrs	r2, r1
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0201 	orr.w	r2, r2, #1
 8003e62:	611a      	str	r2, [r3, #16]
 8003e64:	e007      	b.n	8003e76 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0201 	bic.w	r2, r2, #1
 8003e74:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d10c      	bne.n	8003e98 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	f023 010f 	bic.w	r1, r3, #15
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	1e5a      	subs	r2, r3, #1
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	631a      	str	r2, [r3, #48]	; 0x30
 8003e96:	e007      	b.n	8003ea8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 020f 	bic.w	r2, r2, #15
 8003ea6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eac:	f023 0303 	bic.w	r3, r3, #3
 8003eb0:	f043 0201 	orr.w	r2, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	655a      	str	r2, [r3, #84]	; 0x54
 8003eb8:	e007      	b.n	8003eca <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebe:	f043 0210 	orr.w	r2, r3, #16
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003eca:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3720      	adds	r7, #32
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20000010 	.word	0x20000010
 8003ed8:	053e2d63 	.word	0x053e2d63
 8003edc:	50040000 	.word	0x50040000
 8003ee0:	50040300 	.word	0x50040300
 8003ee4:	fff0c007 	.word	0xfff0c007

08003ee8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff fe86 	bl	8003c0a <LL_ADC_REG_IsConversionOngoing>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d167      	bne.n	8003fd4 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d101      	bne.n	8003f12 <HAL_ADC_Start_DMA+0x2a>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	e063      	b.n	8003fda <HAL_ADC_Start_DMA+0xf2>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 fe1a 	bl	8004b54 <ADC_Enable>
 8003f20:	4603      	mov	r3, r0
 8003f22:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d14f      	bne.n	8003fca <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f32:	f023 0301 	bic.w	r3, r3, #1
 8003f36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d006      	beq.n	8003f58 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4e:	f023 0206 	bic.w	r2, r3, #6
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	659a      	str	r2, [r3, #88]	; 0x58
 8003f56:	e002      	b.n	8003f5e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f62:	4a20      	ldr	r2, [pc, #128]	; (8003fe4 <HAL_ADC_Start_DMA+0xfc>)
 8003f64:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6a:	4a1f      	ldr	r2, [pc, #124]	; (8003fe8 <HAL_ADC_Start_DMA+0x100>)
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f72:	4a1e      	ldr	r2, [pc, #120]	; (8003fec <HAL_ADC_Start_DMA+0x104>)
 8003f74:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	221c      	movs	r2, #28
 8003f7c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0210 	orr.w	r2, r2, #16
 8003f94:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0201 	orr.w	r2, r2, #1
 8003fa4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3340      	adds	r3, #64	; 0x40
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f001 f8e3 	bl	8005180 <HAL_DMA_Start_IT>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff fe0d 	bl	8003be2 <LL_ADC_REG_StartConversion>
 8003fc8:	e006      	b.n	8003fd8 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003fd2:	e001      	b.n	8003fd8 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	08004c61 	.word	0x08004c61
 8003fe8:	08004d39 	.word	0x08004d39
 8003fec:	08004d55 	.word	0x08004d55

08003ff0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d017      	beq.n	8004046 <HAL_ADC_IRQHandler+0x56>
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d012      	beq.n	8004046 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b00      	cmp	r3, #0
 800402a:	d105      	bne.n	8004038 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004030:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fecd 	bl	8004dd8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2202      	movs	r2, #2
 8004044:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d004      	beq.n	800405a <HAL_ADC_IRQHandler+0x6a>
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004060:	2b00      	cmp	r3, #0
 8004062:	d05e      	beq.n	8004122 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d059      	beq.n	8004122 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004072:	f003 0310 	and.w	r3, r3, #16
 8004076:	2b00      	cmp	r3, #0
 8004078:	d105      	bne.n	8004086 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff fc93 	bl	80039b6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d03e      	beq.n	8004114 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d135      	bne.n	8004114 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d12e      	bne.n	8004114 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff fda5 	bl	8003c0a <LL_ADC_REG_IsConversionOngoing>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d11a      	bne.n	80040fc <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 020c 	bic.w	r2, r2, #12
 80040d4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d112      	bne.n	8004114 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f2:	f043 0201 	orr.w	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	655a      	str	r2, [r3, #84]	; 0x54
 80040fa:	e00b      	b.n	8004114 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004100:	f043 0210 	orr.w	r2, r3, #16
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	f043 0201 	orr.w	r2, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7fc ff6f 	bl	8000ff8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	220c      	movs	r2, #12
 8004120:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	f003 0320 	and.w	r3, r3, #32
 8004128:	2b00      	cmp	r3, #0
 800412a:	d004      	beq.n	8004136 <HAL_ADC_IRQHandler+0x146>
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f003 0320 	and.w	r3, r3, #32
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800413c:	2b00      	cmp	r3, #0
 800413e:	d072      	beq.n	8004226 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	d06d      	beq.n	8004226 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414e:	f003 0310 	and.w	r3, r3, #16
 8004152:	2b00      	cmp	r3, #0
 8004154:	d105      	bne.n	8004162 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff fc64 	bl	8003a34 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800416c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff fc1f 	bl	80039b6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004178:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d047      	beq.n	8004218 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d007      	beq.n	80041a2 <HAL_ADC_IRQHandler+0x1b2>
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d03f      	beq.n	8004218 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d13a      	bne.n	8004218 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ac:	2b40      	cmp	r3, #64	; 0x40
 80041ae:	d133      	bne.n	8004218 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d12e      	bne.n	8004218 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff fd36 	bl	8003c30 <LL_ADC_INJ_IsConversionOngoing>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d11a      	bne.n	8004200 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041d8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d112      	bne.n	8004218 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f6:	f043 0201 	orr.w	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	655a      	str	r2, [r3, #84]	; 0x54
 80041fe:	e00b      	b.n	8004218 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004204:	f043 0210 	orr.w	r2, r3, #16
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004210:	f043 0201 	orr.w	r2, r3, #1
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fdb5 	bl	8004d88 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2260      	movs	r2, #96	; 0x60
 8004224:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422c:	2b00      	cmp	r3, #0
 800422e:	d011      	beq.n	8004254 <HAL_ADC_IRQHandler+0x264>
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00c      	beq.n	8004254 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f890 	bl	800436c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2280      	movs	r2, #128	; 0x80
 8004252:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d012      	beq.n	8004284 <HAL_ADC_IRQHandler+0x294>
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00d      	beq.n	8004284 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 fd9b 	bl	8004db0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004282:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800428a:	2b00      	cmp	r3, #0
 800428c:	d012      	beq.n	80042b4 <HAL_ADC_IRQHandler+0x2c4>
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00d      	beq.n	80042b4 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 fd8d 	bl	8004dc4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d02a      	beq.n	8004314 <HAL_ADC_IRQHandler+0x324>
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f003 0310 	and.w	r3, r3, #16
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d025      	beq.n	8004314 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d102      	bne.n	80042d6 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80042d0:	2301      	movs	r3, #1
 80042d2:	61fb      	str	r3, [r7, #28]
 80042d4:	e008      	b.n	80042e8 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80042e4:	2301      	movs	r3, #1
 80042e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d10e      	bne.n	800430c <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fe:	f043 0202 	orr.w	r2, r3, #2
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f83a 	bl	8004380 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2210      	movs	r2, #16
 8004312:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800431a:	2b00      	cmp	r3, #0
 800431c:	d018      	beq.n	8004350 <HAL_ADC_IRQHandler+0x360>
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004324:	2b00      	cmp	r3, #0
 8004326:	d013      	beq.n	8004350 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004338:	f043 0208 	orr.w	r2, r3, #8
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004348:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fd26 	bl	8004d9c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004350:	bf00      	nop
 8004352:	3720      	adds	r7, #32
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b0b6      	sub	sp, #216	; 0xd8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_ADC_ConfigChannel+0x22>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e3b9      	b.n	8004b2a <HAL_ADC_ConfigChannel+0x796>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff fc21 	bl	8003c0a <LL_ADC_REG_IsConversionOngoing>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f040 839e 	bne.w	8004b0c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b05      	cmp	r3, #5
 80043d6:	d824      	bhi.n	8004422 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	3b02      	subs	r3, #2
 80043de:	2b03      	cmp	r3, #3
 80043e0:	d81b      	bhi.n	800441a <HAL_ADC_ConfigChannel+0x86>
 80043e2:	a201      	add	r2, pc, #4	; (adr r2, 80043e8 <HAL_ADC_ConfigChannel+0x54>)
 80043e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e8:	080043f9 	.word	0x080043f9
 80043ec:	08004401 	.word	0x08004401
 80043f0:	08004409 	.word	0x08004409
 80043f4:	08004411 	.word	0x08004411
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	220c      	movs	r2, #12
 80043fc:	605a      	str	r2, [r3, #4]
          break;
 80043fe:	e011      	b.n	8004424 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2212      	movs	r2, #18
 8004404:	605a      	str	r2, [r3, #4]
          break;
 8004406:	e00d      	b.n	8004424 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2218      	movs	r2, #24
 800440c:	605a      	str	r2, [r3, #4]
          break;
 800440e:	e009      	b.n	8004424 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004416:	605a      	str	r2, [r3, #4]
          break;
 8004418:	e004      	b.n	8004424 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2206      	movs	r2, #6
 800441e:	605a      	str	r2, [r3, #4]
          break;
 8004420:	e000      	b.n	8004424 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004422:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	6859      	ldr	r1, [r3, #4]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	f7ff fad3 	bl	80039dc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff fbe5 	bl	8003c0a <LL_ADC_REG_IsConversionOngoing>
 8004440:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fbf1 	bl	8003c30 <LL_ADC_INJ_IsConversionOngoing>
 800444e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004452:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004456:	2b00      	cmp	r3, #0
 8004458:	f040 81a6 	bne.w	80047a8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800445c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004460:	2b00      	cmp	r3, #0
 8004462:	f040 81a1 	bne.w	80047a8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6818      	ldr	r0, [r3, #0]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	6819      	ldr	r1, [r3, #0]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	461a      	mov	r2, r3
 8004474:	f7ff faf1 	bl	8003a5a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	695a      	ldr	r2, [r3, #20]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	08db      	lsrs	r3, r3, #3
 8004484:	f003 0303 	and.w	r3, r3, #3
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b04      	cmp	r3, #4
 8004498:	d00a      	beq.n	80044b0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	6919      	ldr	r1, [r3, #16]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044aa:	f7ff fa2f 	bl	800390c <LL_ADC_SetOffset>
 80044ae:	e17b      	b.n	80047a8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2100      	movs	r1, #0
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff fa4c 	bl	8003954 <LL_ADC_GetOffsetChannel>
 80044bc:	4603      	mov	r3, r0
 80044be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x148>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2100      	movs	r1, #0
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff fa41 	bl	8003954 <LL_ADC_GetOffsetChannel>
 80044d2:	4603      	mov	r3, r0
 80044d4:	0e9b      	lsrs	r3, r3, #26
 80044d6:	f003 021f 	and.w	r2, r3, #31
 80044da:	e01e      	b.n	800451a <HAL_ADC_ConfigChannel+0x186>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2100      	movs	r1, #0
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff fa36 	bl	8003954 <LL_ADC_GetOffsetChannel>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80044f2:	fa93 f3a3 	rbit	r3, r3
 80044f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80044fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004502:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800450a:	2320      	movs	r3, #32
 800450c:	e004      	b.n	8004518 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800450e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004512:	fab3 f383 	clz	r3, r3
 8004516:	b2db      	uxtb	r3, r3
 8004518:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004522:	2b00      	cmp	r3, #0
 8004524:	d105      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x19e>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	0e9b      	lsrs	r3, r3, #26
 800452c:	f003 031f 	and.w	r3, r3, #31
 8004530:	e018      	b.n	8004564 <HAL_ADC_ConfigChannel+0x1d0>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800453e:	fa93 f3a3 	rbit	r3, r3
 8004542:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800454a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800454e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004556:	2320      	movs	r3, #32
 8004558:	e004      	b.n	8004564 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800455a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800455e:	fab3 f383 	clz	r3, r3
 8004562:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004564:	429a      	cmp	r2, r3
 8004566:	d106      	bne.n	8004576 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2200      	movs	r2, #0
 800456e:	2100      	movs	r1, #0
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff fa05 	bl	8003980 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2101      	movs	r1, #1
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff f9e9 	bl	8003954 <LL_ADC_GetOffsetChannel>
 8004582:	4603      	mov	r3, r0
 8004584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <HAL_ADC_ConfigChannel+0x20e>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2101      	movs	r1, #1
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff f9de 	bl	8003954 <LL_ADC_GetOffsetChannel>
 8004598:	4603      	mov	r3, r0
 800459a:	0e9b      	lsrs	r3, r3, #26
 800459c:	f003 021f 	and.w	r2, r3, #31
 80045a0:	e01e      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x24c>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2101      	movs	r1, #1
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff f9d3 	bl	8003954 <LL_ADC_GetOffsetChannel>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045b8:	fa93 f3a3 	rbit	r3, r3
 80045bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80045c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80045c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80045d0:	2320      	movs	r3, #32
 80045d2:	e004      	b.n	80045de <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80045d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045d8:	fab3 f383 	clz	r3, r3
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d105      	bne.n	80045f8 <HAL_ADC_ConfigChannel+0x264>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	0e9b      	lsrs	r3, r3, #26
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	e018      	b.n	800462a <HAL_ADC_ConfigChannel+0x296>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004600:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004604:	fa93 f3a3 	rbit	r3, r3
 8004608:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800460c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004610:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004614:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800461c:	2320      	movs	r3, #32
 800461e:	e004      	b.n	800462a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004620:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004624:	fab3 f383 	clz	r3, r3
 8004628:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800462a:	429a      	cmp	r2, r3
 800462c:	d106      	bne.n	800463c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2200      	movs	r2, #0
 8004634:	2101      	movs	r1, #1
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff f9a2 	bl	8003980 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2102      	movs	r1, #2
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff f986 	bl	8003954 <LL_ADC_GetOffsetChannel>
 8004648:	4603      	mov	r3, r0
 800464a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10a      	bne.n	8004668 <HAL_ADC_ConfigChannel+0x2d4>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2102      	movs	r1, #2
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff f97b 	bl	8003954 <LL_ADC_GetOffsetChannel>
 800465e:	4603      	mov	r3, r0
 8004660:	0e9b      	lsrs	r3, r3, #26
 8004662:	f003 021f 	and.w	r2, r3, #31
 8004666:	e01e      	b.n	80046a6 <HAL_ADC_ConfigChannel+0x312>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2102      	movs	r1, #2
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff f970 	bl	8003954 <LL_ADC_GetOffsetChannel>
 8004674:	4603      	mov	r3, r0
 8004676:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800467e:	fa93 f3a3 	rbit	r3, r3
 8004682:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004686:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800468a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800468e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004696:	2320      	movs	r3, #32
 8004698:	e004      	b.n	80046a4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800469a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800469e:	fab3 f383 	clz	r3, r3
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d105      	bne.n	80046be <HAL_ADC_ConfigChannel+0x32a>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	0e9b      	lsrs	r3, r3, #26
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	e016      	b.n	80046ec <HAL_ADC_ConfigChannel+0x358>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046ca:	fa93 f3a3 	rbit	r3, r3
 80046ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80046d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80046d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80046de:	2320      	movs	r3, #32
 80046e0:	e004      	b.n	80046ec <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80046e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046e6:	fab3 f383 	clz	r3, r3
 80046ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d106      	bne.n	80046fe <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2200      	movs	r2, #0
 80046f6:	2102      	movs	r1, #2
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff f941 	bl	8003980 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2103      	movs	r1, #3
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff f925 	bl	8003954 <LL_ADC_GetOffsetChannel>
 800470a:	4603      	mov	r3, r0
 800470c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10a      	bne.n	800472a <HAL_ADC_ConfigChannel+0x396>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2103      	movs	r1, #3
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff f91a 	bl	8003954 <LL_ADC_GetOffsetChannel>
 8004720:	4603      	mov	r3, r0
 8004722:	0e9b      	lsrs	r3, r3, #26
 8004724:	f003 021f 	and.w	r2, r3, #31
 8004728:	e017      	b.n	800475a <HAL_ADC_ConfigChannel+0x3c6>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2103      	movs	r1, #3
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff f90f 	bl	8003954 <LL_ADC_GetOffsetChannel>
 8004736:	4603      	mov	r3, r0
 8004738:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800473c:	fa93 f3a3 	rbit	r3, r3
 8004740:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004744:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004746:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800474c:	2320      	movs	r3, #32
 800474e:	e003      	b.n	8004758 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004752:	fab3 f383 	clz	r3, r3
 8004756:	b2db      	uxtb	r3, r3
 8004758:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004762:	2b00      	cmp	r3, #0
 8004764:	d105      	bne.n	8004772 <HAL_ADC_ConfigChannel+0x3de>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	0e9b      	lsrs	r3, r3, #26
 800476c:	f003 031f 	and.w	r3, r3, #31
 8004770:	e011      	b.n	8004796 <HAL_ADC_ConfigChannel+0x402>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800477a:	fa93 f3a3 	rbit	r3, r3
 800477e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004782:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800478a:	2320      	movs	r3, #32
 800478c:	e003      	b.n	8004796 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800478e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004790:	fab3 f383 	clz	r3, r3
 8004794:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004796:	429a      	cmp	r2, r3
 8004798:	d106      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2200      	movs	r2, #0
 80047a0:	2103      	movs	r1, #3
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff f8ec 	bl	8003980 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff fa05 	bl	8003bbc <LL_ADC_IsEnabled>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f040 813f 	bne.w	8004a38 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6819      	ldr	r1, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	461a      	mov	r2, r3
 80047c8:	f7ff f972 	bl	8003ab0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4a8e      	ldr	r2, [pc, #568]	; (8004a0c <HAL_ADC_ConfigChannel+0x678>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	f040 8130 	bne.w	8004a38 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10b      	bne.n	8004800 <HAL_ADC_ConfigChannel+0x46c>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	0e9b      	lsrs	r3, r3, #26
 80047ee:	3301      	adds	r3, #1
 80047f0:	f003 031f 	and.w	r3, r3, #31
 80047f4:	2b09      	cmp	r3, #9
 80047f6:	bf94      	ite	ls
 80047f8:	2301      	movls	r3, #1
 80047fa:	2300      	movhi	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	e019      	b.n	8004834 <HAL_ADC_ConfigChannel+0x4a0>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004808:	fa93 f3a3 	rbit	r3, r3
 800480c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800480e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004810:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004818:	2320      	movs	r3, #32
 800481a:	e003      	b.n	8004824 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800481c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800481e:	fab3 f383 	clz	r3, r3
 8004822:	b2db      	uxtb	r3, r3
 8004824:	3301      	adds	r3, #1
 8004826:	f003 031f 	and.w	r3, r3, #31
 800482a:	2b09      	cmp	r3, #9
 800482c:	bf94      	ite	ls
 800482e:	2301      	movls	r3, #1
 8004830:	2300      	movhi	r3, #0
 8004832:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004834:	2b00      	cmp	r3, #0
 8004836:	d079      	beq.n	800492c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004840:	2b00      	cmp	r3, #0
 8004842:	d107      	bne.n	8004854 <HAL_ADC_ConfigChannel+0x4c0>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	0e9b      	lsrs	r3, r3, #26
 800484a:	3301      	adds	r3, #1
 800484c:	069b      	lsls	r3, r3, #26
 800484e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004852:	e015      	b.n	8004880 <HAL_ADC_ConfigChannel+0x4ec>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800485c:	fa93 f3a3 	rbit	r3, r3
 8004860:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004864:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800486c:	2320      	movs	r3, #32
 800486e:	e003      	b.n	8004878 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004872:	fab3 f383 	clz	r3, r3
 8004876:	b2db      	uxtb	r3, r3
 8004878:	3301      	adds	r3, #1
 800487a:	069b      	lsls	r3, r3, #26
 800487c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004888:	2b00      	cmp	r3, #0
 800488a:	d109      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x50c>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	0e9b      	lsrs	r3, r3, #26
 8004892:	3301      	adds	r3, #1
 8004894:	f003 031f 	and.w	r3, r3, #31
 8004898:	2101      	movs	r1, #1
 800489a:	fa01 f303 	lsl.w	r3, r1, r3
 800489e:	e017      	b.n	80048d0 <HAL_ADC_ConfigChannel+0x53c>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048a8:	fa93 f3a3 	rbit	r3, r3
 80048ac:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80048ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80048b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80048b8:	2320      	movs	r3, #32
 80048ba:	e003      	b.n	80048c4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80048bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048be:	fab3 f383 	clz	r3, r3
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	3301      	adds	r3, #1
 80048c6:	f003 031f 	and.w	r3, r3, #31
 80048ca:	2101      	movs	r1, #1
 80048cc:	fa01 f303 	lsl.w	r3, r1, r3
 80048d0:	ea42 0103 	orr.w	r1, r2, r3
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <HAL_ADC_ConfigChannel+0x562>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	0e9b      	lsrs	r3, r3, #26
 80048e6:	3301      	adds	r3, #1
 80048e8:	f003 021f 	and.w	r2, r3, #31
 80048ec:	4613      	mov	r3, r2
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	4413      	add	r3, r2
 80048f2:	051b      	lsls	r3, r3, #20
 80048f4:	e018      	b.n	8004928 <HAL_ADC_ConfigChannel+0x594>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fe:	fa93 f3a3 	rbit	r3, r3
 8004902:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004906:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800490e:	2320      	movs	r3, #32
 8004910:	e003      	b.n	800491a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004914:	fab3 f383 	clz	r3, r3
 8004918:	b2db      	uxtb	r3, r3
 800491a:	3301      	adds	r3, #1
 800491c:	f003 021f 	and.w	r2, r3, #31
 8004920:	4613      	mov	r3, r2
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	4413      	add	r3, r2
 8004926:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004928:	430b      	orrs	r3, r1
 800492a:	e080      	b.n	8004a2e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004934:	2b00      	cmp	r3, #0
 8004936:	d107      	bne.n	8004948 <HAL_ADC_ConfigChannel+0x5b4>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	0e9b      	lsrs	r3, r3, #26
 800493e:	3301      	adds	r3, #1
 8004940:	069b      	lsls	r3, r3, #26
 8004942:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004946:	e015      	b.n	8004974 <HAL_ADC_ConfigChannel+0x5e0>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004950:	fa93 f3a3 	rbit	r3, r3
 8004954:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004960:	2320      	movs	r3, #32
 8004962:	e003      	b.n	800496c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004966:	fab3 f383 	clz	r3, r3
 800496a:	b2db      	uxtb	r3, r3
 800496c:	3301      	adds	r3, #1
 800496e:	069b      	lsls	r3, r3, #26
 8004970:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800497c:	2b00      	cmp	r3, #0
 800497e:	d109      	bne.n	8004994 <HAL_ADC_ConfigChannel+0x600>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	0e9b      	lsrs	r3, r3, #26
 8004986:	3301      	adds	r3, #1
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	2101      	movs	r1, #1
 800498e:	fa01 f303 	lsl.w	r3, r1, r3
 8004992:	e017      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x630>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	fa93 f3a3 	rbit	r3, r3
 80049a0:	61fb      	str	r3, [r7, #28]
  return result;
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80049ac:	2320      	movs	r3, #32
 80049ae:	e003      	b.n	80049b8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	fab3 f383 	clz	r3, r3
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	3301      	adds	r3, #1
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	2101      	movs	r1, #1
 80049c0:	fa01 f303 	lsl.w	r3, r1, r3
 80049c4:	ea42 0103 	orr.w	r1, r2, r3
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10d      	bne.n	80049f0 <HAL_ADC_ConfigChannel+0x65c>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	0e9b      	lsrs	r3, r3, #26
 80049da:	3301      	adds	r3, #1
 80049dc:	f003 021f 	and.w	r2, r3, #31
 80049e0:	4613      	mov	r3, r2
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	4413      	add	r3, r2
 80049e6:	3b1e      	subs	r3, #30
 80049e8:	051b      	lsls	r3, r3, #20
 80049ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049ee:	e01d      	b.n	8004a2c <HAL_ADC_ConfigChannel+0x698>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	fa93 f3a3 	rbit	r3, r3
 80049fc:	613b      	str	r3, [r7, #16]
  return result;
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d103      	bne.n	8004a10 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004a08:	2320      	movs	r3, #32
 8004a0a:	e005      	b.n	8004a18 <HAL_ADC_ConfigChannel+0x684>
 8004a0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	fab3 f383 	clz	r3, r3
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	3301      	adds	r3, #1
 8004a1a:	f003 021f 	and.w	r2, r3, #31
 8004a1e:	4613      	mov	r3, r2
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	4413      	add	r3, r2
 8004a24:	3b1e      	subs	r3, #30
 8004a26:	051b      	lsls	r3, r3, #20
 8004a28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	6892      	ldr	r2, [r2, #8]
 8004a32:	4619      	mov	r1, r3
 8004a34:	f7ff f811 	bl	8003a5a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	4b3d      	ldr	r3, [pc, #244]	; (8004b34 <HAL_ADC_ConfigChannel+0x7a0>)
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d06c      	beq.n	8004b1e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a44:	483c      	ldr	r0, [pc, #240]	; (8004b38 <HAL_ADC_ConfigChannel+0x7a4>)
 8004a46:	f7fe ff53 	bl	80038f0 <LL_ADC_GetCommonPathInternalCh>
 8004a4a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a3a      	ldr	r2, [pc, #232]	; (8004b3c <HAL_ADC_ConfigChannel+0x7a8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d127      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d121      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a35      	ldr	r2, [pc, #212]	; (8004b40 <HAL_ADC_ConfigChannel+0x7ac>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d157      	bne.n	8004b1e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a76:	4619      	mov	r1, r3
 8004a78:	482f      	ldr	r0, [pc, #188]	; (8004b38 <HAL_ADC_ConfigChannel+0x7a4>)
 8004a7a:	f7fe ff26 	bl	80038ca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a7e:	4b31      	ldr	r3, [pc, #196]	; (8004b44 <HAL_ADC_ConfigChannel+0x7b0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	099b      	lsrs	r3, r3, #6
 8004a84:	4a30      	ldr	r2, [pc, #192]	; (8004b48 <HAL_ADC_ConfigChannel+0x7b4>)
 8004a86:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8a:	099b      	lsrs	r3, r3, #6
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	4613      	mov	r3, r2
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	4413      	add	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a98:	e002      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f9      	bne.n	8004a9a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004aa6:	e03a      	b.n	8004b1e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a27      	ldr	r2, [pc, #156]	; (8004b4c <HAL_ADC_ConfigChannel+0x7b8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d113      	bne.n	8004ada <HAL_ADC_ConfigChannel+0x746>
 8004ab2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ab6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10d      	bne.n	8004ada <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a1f      	ldr	r2, [pc, #124]	; (8004b40 <HAL_ADC_ConfigChannel+0x7ac>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d12a      	bne.n	8004b1e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ac8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004acc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4819      	ldr	r0, [pc, #100]	; (8004b38 <HAL_ADC_ConfigChannel+0x7a4>)
 8004ad4:	f7fe fef9 	bl	80038ca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ad8:	e021      	b.n	8004b1e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1c      	ldr	r2, [pc, #112]	; (8004b50 <HAL_ADC_ConfigChannel+0x7bc>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d11c      	bne.n	8004b1e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ae4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ae8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d116      	bne.n	8004b1e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a12      	ldr	r2, [pc, #72]	; (8004b40 <HAL_ADC_ConfigChannel+0x7ac>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d111      	bne.n	8004b1e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004afa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004afe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b02:	4619      	mov	r1, r3
 8004b04:	480c      	ldr	r0, [pc, #48]	; (8004b38 <HAL_ADC_ConfigChannel+0x7a4>)
 8004b06:	f7fe fee0 	bl	80038ca <LL_ADC_SetCommonPathInternalCh>
 8004b0a:	e008      	b.n	8004b1e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b10:	f043 0220 	orr.w	r2, r3, #32
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004b26:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	37d8      	adds	r7, #216	; 0xd8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	80080000 	.word	0x80080000
 8004b38:	50040300 	.word	0x50040300
 8004b3c:	c7520000 	.word	0xc7520000
 8004b40:	50040000 	.word	0x50040000
 8004b44:	20000010 	.word	0x20000010
 8004b48:	053e2d63 	.word	0x053e2d63
 8004b4c:	cb840000 	.word	0xcb840000
 8004b50:	80000001 	.word	0x80000001

08004b54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff f829 	bl	8003bbc <LL_ADC_IsEnabled>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d169      	bne.n	8004c44 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	4b36      	ldr	r3, [pc, #216]	; (8004c50 <ADC_Enable+0xfc>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00d      	beq.n	8004b9a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b82:	f043 0210 	orr.w	r2, r3, #16
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8e:	f043 0201 	orr.w	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e055      	b.n	8004c46 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fe fff8 	bl	8003b94 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004ba4:	482b      	ldr	r0, [pc, #172]	; (8004c54 <ADC_Enable+0x100>)
 8004ba6:	f7fe fea3 	bl	80038f0 <LL_ADC_GetCommonPathInternalCh>
 8004baa:	4603      	mov	r3, r0
 8004bac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d013      	beq.n	8004bdc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bb4:	4b28      	ldr	r3, [pc, #160]	; (8004c58 <ADC_Enable+0x104>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	099b      	lsrs	r3, r3, #6
 8004bba:	4a28      	ldr	r2, [pc, #160]	; (8004c5c <ADC_Enable+0x108>)
 8004bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc0:	099b      	lsrs	r3, r3, #6
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	4413      	add	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004bce:	e002      	b.n	8004bd6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1f9      	bne.n	8004bd0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004bdc:	f7fe fe32 	bl	8003844 <HAL_GetTick>
 8004be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004be2:	e028      	b.n	8004c36 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7fe ffe7 	bl	8003bbc <LL_ADC_IsEnabled>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d104      	bne.n	8004bfe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fe ffcb 	bl	8003b94 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004bfe:	f7fe fe21 	bl	8003844 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d914      	bls.n	8004c36 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d00d      	beq.n	8004c36 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1e:	f043 0210 	orr.w	r2, r3, #16
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2a:	f043 0201 	orr.w	r2, r3, #1
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e007      	b.n	8004c46 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d1cf      	bne.n	8004be4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	8000003f 	.word	0x8000003f
 8004c54:	50040300 	.word	0x50040300
 8004c58:	20000010 	.word	0x20000010
 8004c5c:	053e2d63 	.word	0x053e2d63

08004c60 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c72:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d14b      	bne.n	8004d12 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d021      	beq.n	8004cd8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fe fe8c 	bl	80039b6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d032      	beq.n	8004d0a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d12b      	bne.n	8004d0a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d11f      	bne.n	8004d0a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cce:	f043 0201 	orr.w	r2, r3, #1
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	655a      	str	r2, [r3, #84]	; 0x54
 8004cd6:	e018      	b.n	8004d0a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d111      	bne.n	8004d0a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d105      	bne.n	8004d0a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d02:	f043 0201 	orr.w	r2, r3, #1
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f7fc f974 	bl	8000ff8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d10:	e00e      	b.n	8004d30 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d16:	f003 0310 	and.w	r3, r3, #16
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f7ff fb2e 	bl	8004380 <HAL_ADC_ErrorCallback>
}
 8004d24:	e004      	b.n	8004d30 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	4798      	blx	r3
}
 8004d30:	bf00      	nop
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f7ff fb06 	bl	8004358 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d4c:	bf00      	nop
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d72:	f043 0204 	orr.w	r2, r3, #4
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f7ff fb00 	bl	8004380 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d80:	bf00      	nop
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dfc:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <__NVIC_SetPriorityGrouping+0x44>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e08:	4013      	ands	r3, r2
 8004e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e1e:	4a04      	ldr	r2, [pc, #16]	; (8004e30 <__NVIC_SetPriorityGrouping+0x44>)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	60d3      	str	r3, [r2, #12]
}
 8004e24:	bf00      	nop
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	e000ed00 	.word	0xe000ed00

08004e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e38:	4b04      	ldr	r3, [pc, #16]	; (8004e4c <__NVIC_GetPriorityGrouping+0x18>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	0a1b      	lsrs	r3, r3, #8
 8004e3e:	f003 0307 	and.w	r3, r3, #7
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	e000ed00 	.word	0xe000ed00

08004e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	4603      	mov	r3, r0
 8004e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	db0b      	blt.n	8004e7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e62:	79fb      	ldrb	r3, [r7, #7]
 8004e64:	f003 021f 	and.w	r2, r3, #31
 8004e68:	4907      	ldr	r1, [pc, #28]	; (8004e88 <__NVIC_EnableIRQ+0x38>)
 8004e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e6e:	095b      	lsrs	r3, r3, #5
 8004e70:	2001      	movs	r0, #1
 8004e72:	fa00 f202 	lsl.w	r2, r0, r2
 8004e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	e000e100 	.word	0xe000e100

08004e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	4603      	mov	r3, r0
 8004e94:	6039      	str	r1, [r7, #0]
 8004e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	db0a      	blt.n	8004eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	490c      	ldr	r1, [pc, #48]	; (8004ed8 <__NVIC_SetPriority+0x4c>)
 8004ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eaa:	0112      	lsls	r2, r2, #4
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	440b      	add	r3, r1
 8004eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004eb4:	e00a      	b.n	8004ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	4908      	ldr	r1, [pc, #32]	; (8004edc <__NVIC_SetPriority+0x50>)
 8004ebc:	79fb      	ldrb	r3, [r7, #7]
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	3b04      	subs	r3, #4
 8004ec4:	0112      	lsls	r2, r2, #4
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	440b      	add	r3, r1
 8004eca:	761a      	strb	r2, [r3, #24]
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	e000e100 	.word	0xe000e100
 8004edc:	e000ed00 	.word	0xe000ed00

08004ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b089      	sub	sp, #36	; 0x24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f1c3 0307 	rsb	r3, r3, #7
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	bf28      	it	cs
 8004efe:	2304      	movcs	r3, #4
 8004f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	3304      	adds	r3, #4
 8004f06:	2b06      	cmp	r3, #6
 8004f08:	d902      	bls.n	8004f10 <NVIC_EncodePriority+0x30>
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	3b03      	subs	r3, #3
 8004f0e:	e000      	b.n	8004f12 <NVIC_EncodePriority+0x32>
 8004f10:	2300      	movs	r3, #0
 8004f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f14:	f04f 32ff 	mov.w	r2, #4294967295
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	43da      	mvns	r2, r3
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	401a      	ands	r2, r3
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f28:	f04f 31ff 	mov.w	r1, #4294967295
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f32:	43d9      	mvns	r1, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f38:	4313      	orrs	r3, r2
         );
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3724      	adds	r7, #36	; 0x24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
	...

08004f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f58:	d301      	bcc.n	8004f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e00f      	b.n	8004f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f5e:	4a0a      	ldr	r2, [pc, #40]	; (8004f88 <SysTick_Config+0x40>)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f66:	210f      	movs	r1, #15
 8004f68:	f04f 30ff 	mov.w	r0, #4294967295
 8004f6c:	f7ff ff8e 	bl	8004e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f70:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <SysTick_Config+0x40>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f76:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <SysTick_Config+0x40>)
 8004f78:	2207      	movs	r2, #7
 8004f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	e000e010 	.word	0xe000e010

08004f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff ff29 	bl	8004dec <__NVIC_SetPriorityGrouping>
}
 8004f9a:	bf00      	nop
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b086      	sub	sp, #24
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	4603      	mov	r3, r0
 8004faa:	60b9      	str	r1, [r7, #8]
 8004fac:	607a      	str	r2, [r7, #4]
 8004fae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004fb4:	f7ff ff3e 	bl	8004e34 <__NVIC_GetPriorityGrouping>
 8004fb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	68b9      	ldr	r1, [r7, #8]
 8004fbe:	6978      	ldr	r0, [r7, #20]
 8004fc0:	f7ff ff8e 	bl	8004ee0 <NVIC_EncodePriority>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fca:	4611      	mov	r1, r2
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff ff5d 	bl	8004e8c <__NVIC_SetPriority>
}
 8004fd2:	bf00      	nop
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b082      	sub	sp, #8
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff ff31 	bl	8004e50 <__NVIC_EnableIRQ>
}
 8004fee:	bf00      	nop
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b082      	sub	sp, #8
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7ff ffa2 	bl	8004f48 <SysTick_Config>
 8005004:	4603      	mov	r3, r0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e098      	b.n	8005154 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	4b4d      	ldr	r3, [pc, #308]	; (8005160 <HAL_DMA_Init+0x150>)
 800502a:	429a      	cmp	r2, r3
 800502c:	d80f      	bhi.n	800504e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	461a      	mov	r2, r3
 8005034:	4b4b      	ldr	r3, [pc, #300]	; (8005164 <HAL_DMA_Init+0x154>)
 8005036:	4413      	add	r3, r2
 8005038:	4a4b      	ldr	r2, [pc, #300]	; (8005168 <HAL_DMA_Init+0x158>)
 800503a:	fba2 2303 	umull	r2, r3, r2, r3
 800503e:	091b      	lsrs	r3, r3, #4
 8005040:	009a      	lsls	r2, r3, #2
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a48      	ldr	r2, [pc, #288]	; (800516c <HAL_DMA_Init+0x15c>)
 800504a:	641a      	str	r2, [r3, #64]	; 0x40
 800504c:	e00e      	b.n	800506c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	4b46      	ldr	r3, [pc, #280]	; (8005170 <HAL_DMA_Init+0x160>)
 8005056:	4413      	add	r3, r2
 8005058:	4a43      	ldr	r2, [pc, #268]	; (8005168 <HAL_DMA_Init+0x158>)
 800505a:	fba2 2303 	umull	r2, r3, r2, r3
 800505e:	091b      	lsrs	r3, r3, #4
 8005060:	009a      	lsls	r2, r3, #2
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a42      	ldr	r2, [pc, #264]	; (8005174 <HAL_DMA_Init+0x164>)
 800506a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005086:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005090:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800509c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050c6:	d039      	beq.n	800513c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	4a27      	ldr	r2, [pc, #156]	; (800516c <HAL_DMA_Init+0x15c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d11a      	bne.n	8005108 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80050d2:	4b29      	ldr	r3, [pc, #164]	; (8005178 <HAL_DMA_Init+0x168>)
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050da:	f003 031c 	and.w	r3, r3, #28
 80050de:	210f      	movs	r1, #15
 80050e0:	fa01 f303 	lsl.w	r3, r1, r3
 80050e4:	43db      	mvns	r3, r3
 80050e6:	4924      	ldr	r1, [pc, #144]	; (8005178 <HAL_DMA_Init+0x168>)
 80050e8:	4013      	ands	r3, r2
 80050ea:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80050ec:	4b22      	ldr	r3, [pc, #136]	; (8005178 <HAL_DMA_Init+0x168>)
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6859      	ldr	r1, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f8:	f003 031c 	and.w	r3, r3, #28
 80050fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005100:	491d      	ldr	r1, [pc, #116]	; (8005178 <HAL_DMA_Init+0x168>)
 8005102:	4313      	orrs	r3, r2
 8005104:	600b      	str	r3, [r1, #0]
 8005106:	e019      	b.n	800513c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005108:	4b1c      	ldr	r3, [pc, #112]	; (800517c <HAL_DMA_Init+0x16c>)
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005110:	f003 031c 	and.w	r3, r3, #28
 8005114:	210f      	movs	r1, #15
 8005116:	fa01 f303 	lsl.w	r3, r1, r3
 800511a:	43db      	mvns	r3, r3
 800511c:	4917      	ldr	r1, [pc, #92]	; (800517c <HAL_DMA_Init+0x16c>)
 800511e:	4013      	ands	r3, r2
 8005120:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005122:	4b16      	ldr	r3, [pc, #88]	; (800517c <HAL_DMA_Init+0x16c>)
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6859      	ldr	r1, [r3, #4]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512e:	f003 031c 	and.w	r3, r3, #28
 8005132:	fa01 f303 	lsl.w	r3, r1, r3
 8005136:	4911      	ldr	r1, [pc, #68]	; (800517c <HAL_DMA_Init+0x16c>)
 8005138:	4313      	orrs	r3, r2
 800513a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	40020407 	.word	0x40020407
 8005164:	bffdfff8 	.word	0xbffdfff8
 8005168:	cccccccd 	.word	0xcccccccd
 800516c:	40020000 	.word	0x40020000
 8005170:	bffdfbf8 	.word	0xbffdfbf8
 8005174:	40020400 	.word	0x40020400
 8005178:	400200a8 	.word	0x400200a8
 800517c:	400204a8 	.word	0x400204a8

08005180 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_DMA_Start_IT+0x20>
 800519c:	2302      	movs	r3, #2
 800519e:	e04b      	b.n	8005238 <HAL_DMA_Start_IT+0xb8>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d13a      	bne.n	800522a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0201 	bic.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	68b9      	ldr	r1, [r7, #8]
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 f96d 	bl	80054b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d008      	beq.n	80051f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 020e 	orr.w	r2, r2, #14
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	e00f      	b.n	8005218 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0204 	bic.w	r2, r2, #4
 8005206:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 020a 	orr.w	r2, r2, #10
 8005216:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0201 	orr.w	r2, r2, #1
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	e005      	b.n	8005236 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005232:	2302      	movs	r3, #2
 8005234:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005236:	7dfb      	ldrb	r3, [r7, #23]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d008      	beq.n	800526a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2204      	movs	r2, #4
 800525c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e022      	b.n	80052b0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 020e 	bic.w	r2, r2, #14
 8005278:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0201 	bic.w	r2, r2, #1
 8005288:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528e:	f003 021c 	and.w	r2, r3, #28
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	2101      	movs	r1, #1
 8005298:	fa01 f202 	lsl.w	r2, r1, r2
 800529c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d005      	beq.n	80052e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2204      	movs	r2, #4
 80052d8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	73fb      	strb	r3, [r7, #15]
 80052de:	e029      	b.n	8005334 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 020e 	bic.w	r2, r2, #14
 80052ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0201 	bic.w	r2, r2, #1
 80052fe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005304:	f003 021c 	and.w	r2, r3, #28
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	2101      	movs	r1, #1
 800530e:	fa01 f202 	lsl.w	r2, r1, r2
 8005312:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	4798      	blx	r3
    }
  }
  return status;
 8005334:	7bfb      	ldrb	r3, [r7, #15]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b084      	sub	sp, #16
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535a:	f003 031c 	and.w	r3, r3, #28
 800535e:	2204      	movs	r2, #4
 8005360:	409a      	lsls	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4013      	ands	r3, r2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d026      	beq.n	80053b8 <HAL_DMA_IRQHandler+0x7a>
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	d021      	beq.n	80053b8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	d107      	bne.n	8005392 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0204 	bic.w	r2, r2, #4
 8005390:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005396:	f003 021c 	and.w	r2, r3, #28
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	2104      	movs	r1, #4
 80053a0:	fa01 f202 	lsl.w	r2, r1, r2
 80053a4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d071      	beq.n	8005492 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80053b6:	e06c      	b.n	8005492 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053bc:	f003 031c 	and.w	r3, r3, #28
 80053c0:	2202      	movs	r2, #2
 80053c2:	409a      	lsls	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4013      	ands	r3, r2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d02e      	beq.n	800542a <HAL_DMA_IRQHandler+0xec>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d029      	beq.n	800542a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0320 	and.w	r3, r3, #32
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10b      	bne.n	80053fc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 020a 	bic.w	r2, r2, #10
 80053f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005400:	f003 021c 	and.w	r2, r3, #28
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005408:	2102      	movs	r1, #2
 800540a:	fa01 f202 	lsl.w	r2, r1, r2
 800540e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	2b00      	cmp	r3, #0
 800541e:	d038      	beq.n	8005492 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005428:	e033      	b.n	8005492 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542e:	f003 031c 	and.w	r3, r3, #28
 8005432:	2208      	movs	r2, #8
 8005434:	409a      	lsls	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4013      	ands	r3, r2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d02a      	beq.n	8005494 <HAL_DMA_IRQHandler+0x156>
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f003 0308 	and.w	r3, r3, #8
 8005444:	2b00      	cmp	r3, #0
 8005446:	d025      	beq.n	8005494 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 020e 	bic.w	r2, r2, #14
 8005456:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545c:	f003 021c 	and.w	r2, r3, #28
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005464:	2101      	movs	r1, #1
 8005466:	fa01 f202 	lsl.w	r2, r1, r2
 800546a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005486:	2b00      	cmp	r3, #0
 8005488:	d004      	beq.n	8005494 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005492:	bf00      	nop
 8005494:	bf00      	nop
}
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80054aa:	b2db      	uxtb	r3, r3
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ca:	f003 021c 	and.w	r2, r3, #28
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	2101      	movs	r1, #1
 80054d4:	fa01 f202 	lsl.w	r2, r1, r2
 80054d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	2b10      	cmp	r3, #16
 80054e8:	d108      	bne.n	80054fc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80054fa:	e007      	b.n	800550c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	60da      	str	r2, [r3, #12]
}
 800550c:	bf00      	nop
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005526:	e148      	b.n	80057ba <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	2101      	movs	r1, #1
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	fa01 f303 	lsl.w	r3, r1, r3
 8005534:	4013      	ands	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 813a 	beq.w	80057b4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f003 0303 	and.w	r3, r3, #3
 8005548:	2b01      	cmp	r3, #1
 800554a:	d005      	beq.n	8005558 <HAL_GPIO_Init+0x40>
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f003 0303 	and.w	r3, r3, #3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d130      	bne.n	80055ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	2203      	movs	r2, #3
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	43db      	mvns	r3, r3
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4013      	ands	r3, r2
 800556e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800558e:	2201      	movs	r2, #1
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	43db      	mvns	r3, r3
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	4013      	ands	r3, r2
 800559c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	091b      	lsrs	r3, r3, #4
 80055a4:	f003 0201 	and.w	r2, r3, #1
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	fa02 f303 	lsl.w	r3, r2, r3
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	2b03      	cmp	r3, #3
 80055c4:	d017      	beq.n	80055f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	2203      	movs	r2, #3
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	43db      	mvns	r3, r3
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4013      	ands	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	689a      	ldr	r2, [r3, #8]
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d123      	bne.n	800564a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	08da      	lsrs	r2, r3, #3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3208      	adds	r2, #8
 800560a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800560e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	220f      	movs	r2, #15
 800561a:	fa02 f303 	lsl.w	r3, r2, r3
 800561e:	43db      	mvns	r3, r3
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4013      	ands	r3, r2
 8005624:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	691a      	ldr	r2, [r3, #16]
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4313      	orrs	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	08da      	lsrs	r2, r3, #3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3208      	adds	r2, #8
 8005644:	6939      	ldr	r1, [r7, #16]
 8005646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	2203      	movs	r2, #3
 8005656:	fa02 f303 	lsl.w	r3, r2, r3
 800565a:	43db      	mvns	r3, r3
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	4013      	ands	r3, r2
 8005660:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f003 0203 	and.w	r2, r3, #3
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 8094 	beq.w	80057b4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800568c:	4b52      	ldr	r3, [pc, #328]	; (80057d8 <HAL_GPIO_Init+0x2c0>)
 800568e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005690:	4a51      	ldr	r2, [pc, #324]	; (80057d8 <HAL_GPIO_Init+0x2c0>)
 8005692:	f043 0301 	orr.w	r3, r3, #1
 8005696:	6613      	str	r3, [r2, #96]	; 0x60
 8005698:	4b4f      	ldr	r3, [pc, #316]	; (80057d8 <HAL_GPIO_Init+0x2c0>)
 800569a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	60bb      	str	r3, [r7, #8]
 80056a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80056a4:	4a4d      	ldr	r2, [pc, #308]	; (80057dc <HAL_GPIO_Init+0x2c4>)
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	089b      	lsrs	r3, r3, #2
 80056aa:	3302      	adds	r3, #2
 80056ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f003 0303 	and.w	r3, r3, #3
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	220f      	movs	r2, #15
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	43db      	mvns	r3, r3
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4013      	ands	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80056ce:	d00d      	beq.n	80056ec <HAL_GPIO_Init+0x1d4>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a43      	ldr	r2, [pc, #268]	; (80057e0 <HAL_GPIO_Init+0x2c8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d007      	beq.n	80056e8 <HAL_GPIO_Init+0x1d0>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a42      	ldr	r2, [pc, #264]	; (80057e4 <HAL_GPIO_Init+0x2cc>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d101      	bne.n	80056e4 <HAL_GPIO_Init+0x1cc>
 80056e0:	2302      	movs	r3, #2
 80056e2:	e004      	b.n	80056ee <HAL_GPIO_Init+0x1d6>
 80056e4:	2307      	movs	r3, #7
 80056e6:	e002      	b.n	80056ee <HAL_GPIO_Init+0x1d6>
 80056e8:	2301      	movs	r3, #1
 80056ea:	e000      	b.n	80056ee <HAL_GPIO_Init+0x1d6>
 80056ec:	2300      	movs	r3, #0
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	f002 0203 	and.w	r2, r2, #3
 80056f4:	0092      	lsls	r2, r2, #2
 80056f6:	4093      	lsls	r3, r2
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80056fe:	4937      	ldr	r1, [pc, #220]	; (80057dc <HAL_GPIO_Init+0x2c4>)
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	089b      	lsrs	r3, r3, #2
 8005704:	3302      	adds	r3, #2
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800570c:	4b36      	ldr	r3, [pc, #216]	; (80057e8 <HAL_GPIO_Init+0x2d0>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	43db      	mvns	r3, r3
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4013      	ands	r3, r2
 800571a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4313      	orrs	r3, r2
 800572e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005730:	4a2d      	ldr	r2, [pc, #180]	; (80057e8 <HAL_GPIO_Init+0x2d0>)
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005736:	4b2c      	ldr	r3, [pc, #176]	; (80057e8 <HAL_GPIO_Init+0x2d0>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	43db      	mvns	r3, r3
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4013      	ands	r3, r2
 8005744:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4313      	orrs	r3, r2
 8005758:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800575a:	4a23      	ldr	r2, [pc, #140]	; (80057e8 <HAL_GPIO_Init+0x2d0>)
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005760:	4b21      	ldr	r3, [pc, #132]	; (80057e8 <HAL_GPIO_Init+0x2d0>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	43db      	mvns	r3, r3
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	4013      	ands	r3, r2
 800576e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005784:	4a18      	ldr	r2, [pc, #96]	; (80057e8 <HAL_GPIO_Init+0x2d0>)
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800578a:	4b17      	ldr	r3, [pc, #92]	; (80057e8 <HAL_GPIO_Init+0x2d0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	43db      	mvns	r3, r3
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4013      	ands	r3, r2
 8005798:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80057ae:	4a0e      	ldr	r2, [pc, #56]	; (80057e8 <HAL_GPIO_Init+0x2d0>)
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	3301      	adds	r3, #1
 80057b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	fa22 f303 	lsr.w	r3, r2, r3
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f47f aeaf 	bne.w	8005528 <HAL_GPIO_Init+0x10>
  }
}
 80057ca:	bf00      	nop
 80057cc:	bf00      	nop
 80057ce:	371c      	adds	r7, #28
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	40021000 	.word	0x40021000
 80057dc:	40010000 	.word	0x40010000
 80057e0:	48000400 	.word	0x48000400
 80057e4:	48000800 	.word	0x48000800
 80057e8:	40010400 	.word	0x40010400

080057ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	807b      	strh	r3, [r7, #2]
 80057f8:	4613      	mov	r3, r2
 80057fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057fc:	787b      	ldrb	r3, [r7, #1]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005802:	887a      	ldrh	r2, [r7, #2]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005808:	e002      	b.n	8005810 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800580a:	887a      	ldrh	r2, [r7, #2]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	460b      	mov	r3, r1
 8005826:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800582e:	887a      	ldrh	r2, [r7, #2]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4013      	ands	r3, r2
 8005834:	041a      	lsls	r2, r3, #16
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	43d9      	mvns	r1, r3
 800583a:	887b      	ldrh	r3, [r7, #2]
 800583c:	400b      	ands	r3, r1
 800583e:	431a      	orrs	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	619a      	str	r2, [r3, #24]
}
 8005844:	bf00      	nop
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e081      	b.n	8005966 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fd fc90 	bl	800319c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2224      	movs	r2, #36	; 0x24
 8005880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0201 	bic.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d107      	bne.n	80058ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058c6:	609a      	str	r2, [r3, #8]
 80058c8:	e006      	b.n	80058d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80058d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d104      	bne.n	80058ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6812      	ldr	r2, [r2, #0]
 80058f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80058f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68da      	ldr	r2, [r3, #12]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800590c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691a      	ldr	r2, [r3, #16]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	69d9      	ldr	r1, [r3, #28]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a1a      	ldr	r2, [r3, #32]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0201 	orr.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2220      	movs	r2, #32
 8005952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b084      	sub	sp, #16
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598a:	2b00      	cmp	r3, #0
 800598c:	d005      	beq.n	800599a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	68f9      	ldr	r1, [r7, #12]
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	4798      	blx	r3
  }
}
 800599a:	bf00      	nop
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b086      	sub	sp, #24
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	0a1b      	lsrs	r3, r3, #8
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d010      	beq.n	80059e8 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	09db      	lsrs	r3, r3, #7
 80059ca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d6:	f043 0201 	orr.w	r2, r3, #1
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059e6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	0a9b      	lsrs	r3, r3, #10
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d010      	beq.n	8005a16 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	09db      	lsrs	r3, r3, #7
 80059f8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00a      	beq.n	8005a16 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a04:	f043 0208 	orr.w	r2, r3, #8
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a14:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	0a5b      	lsrs	r3, r3, #9
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d010      	beq.n	8005a44 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	09db      	lsrs	r3, r3, #7
 8005a26:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a32:	f043 0202 	orr.w	r2, r3, #2
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a42:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a48:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f003 030b 	and.w	r3, r3, #11
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005a54:	68f9      	ldr	r1, [r7, #12]
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fb8a 	bl	8006170 <I2C_ITError>
  }
}
 8005a5c:	bf00      	nop
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	460b      	mov	r3, r1
 8005a96:	70fb      	strb	r3, [r7, #3]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <I2C_Slave_ISR_IT+0x24>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e0ec      	b.n	8005ce2 <I2C_Slave_ISR_IT+0x1fe>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	095b      	lsrs	r3, r3, #5
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d009      	beq.n	8005b30 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	095b      	lsrs	r3, r3, #5
 8005b20:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005b28:	6939      	ldr	r1, [r7, #16]
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 f9c0 	bl	8005eb0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	091b      	lsrs	r3, r3, #4
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d04d      	beq.n	8005bd8 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	091b      	lsrs	r3, r3, #4
 8005b40:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d047      	beq.n	8005bd8 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d128      	bne.n	8005ba4 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b28      	cmp	r3, #40	; 0x28
 8005b5c:	d108      	bne.n	8005b70 <I2C_Slave_ISR_IT+0x8c>
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b64:	d104      	bne.n	8005b70 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005b66:	6939      	ldr	r1, [r7, #16]
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 faab 	bl	80060c4 <I2C_ITListenCplt>
 8005b6e:	e032      	b.n	8005bd6 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b29      	cmp	r3, #41	; 0x29
 8005b7a:	d10e      	bne.n	8005b9a <I2C_Slave_ISR_IT+0xb6>
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b82:	d00a      	beq.n	8005b9a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2210      	movs	r2, #16
 8005b8a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 fbe6 	bl	800635e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 f92d 	bl	8005df2 <I2C_ITSlaveSeqCplt>
 8005b98:	e01d      	b.n	8005bd6 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2210      	movs	r2, #16
 8005ba0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005ba2:	e096      	b.n	8005cd2 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2210      	movs	r2, #16
 8005baa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb0:	f043 0204 	orr.w	r2, r3, #4
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d004      	beq.n	8005bc8 <I2C_Slave_ISR_IT+0xe4>
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bc4:	f040 8085 	bne.w	8005cd2 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bcc:	4619      	mov	r1, r3
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 face 	bl	8006170 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005bd4:	e07d      	b.n	8005cd2 <I2C_Slave_ISR_IT+0x1ee>
 8005bd6:	e07c      	b.n	8005cd2 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	089b      	lsrs	r3, r3, #2
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d030      	beq.n	8005c46 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	089b      	lsrs	r3, r3, #2
 8005be8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d02a      	beq.n	8005c46 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d018      	beq.n	8005c2c <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	b2d2      	uxtb	r2, r2
 8005c06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c16:	3b01      	subs	r3, #1
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d14f      	bne.n	8005cd6 <I2C_Slave_ISR_IT+0x1f2>
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c3c:	d04b      	beq.n	8005cd6 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 f8d7 	bl	8005df2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005c44:	e047      	b.n	8005cd6 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	08db      	lsrs	r3, r3, #3
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	08db      	lsrs	r3, r3, #3
 8005c56:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d004      	beq.n	8005c68 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005c5e:	6939      	ldr	r1, [r7, #16]
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 f842 	bl	8005cea <I2C_ITAddrCplt>
 8005c66:	e037      	b.n	8005cd8 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	085b      	lsrs	r3, r3, #1
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d031      	beq.n	8005cd8 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	085b      	lsrs	r3, r3, #1
 8005c78:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d02b      	beq.n	8005cd8 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d018      	beq.n	8005cbc <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	781a      	ldrb	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	851a      	strh	r2, [r3, #40]	; 0x28
 8005cba:	e00d      	b.n	8005cd8 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cc2:	d002      	beq.n	8005cca <I2C_Slave_ISR_IT+0x1e6>
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d106      	bne.n	8005cd8 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 f891 	bl	8005df2 <I2C_ITSlaveSeqCplt>
 8005cd0:	e002      	b.n	8005cd8 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005cd2:	bf00      	nop
 8005cd4:	e000      	b.n	8005cd8 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005cd6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d00:	2b28      	cmp	r3, #40	; 0x28
 8005d02:	d16a      	bne.n	8005dda <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	0c1b      	lsrs	r3, r3, #16
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	0c1b      	lsrs	r3, r3, #16
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005d22:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d30:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005d3e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d138      	bne.n	8005dba <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005d48:	897b      	ldrh	r3, [r7, #10]
 8005d4a:	09db      	lsrs	r3, r3, #7
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	89bb      	ldrh	r3, [r7, #12]
 8005d50:	4053      	eors	r3, r2
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	f003 0306 	and.w	r3, r3, #6
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d11c      	bne.n	8005d96 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005d5c:	897b      	ldrh	r3, [r7, #10]
 8005d5e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d13b      	bne.n	8005dea <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2208      	movs	r2, #8
 8005d7e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005d88:	89ba      	ldrh	r2, [r7, #12]
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff fe7c 	bl	8005a8c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005d94:	e029      	b.n	8005dea <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005d96:	893b      	ldrh	r3, [r7, #8]
 8005d98:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005d9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fb1f 	bl	80063e2 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005dac:	89ba      	ldrh	r2, [r7, #12]
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
 8005db0:	4619      	mov	r1, r3
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7ff fe6a 	bl	8005a8c <HAL_I2C_AddrCallback>
}
 8005db8:	e017      	b.n	8005dea <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fb0f 	bl	80063e2 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005dcc:	89ba      	ldrh	r2, [r7, #12]
 8005dce:	7bfb      	ldrb	r3, [r7, #15]
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7ff fe5a 	bl	8005a8c <HAL_I2C_AddrCallback>
}
 8005dd8:	e007      	b.n	8005dea <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2208      	movs	r2, #8
 8005de0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005dea:	bf00      	nop
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	0b9b      	lsrs	r3, r3, #14
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d008      	beq.n	8005e28 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	e00d      	b.n	8005e44 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	0bdb      	lsrs	r3, r3, #15
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d007      	beq.n	8005e44 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e42:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b29      	cmp	r3, #41	; 0x29
 8005e4e:	d112      	bne.n	8005e76 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2228      	movs	r2, #40	; 0x28
 8005e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2221      	movs	r2, #33	; 0x21
 8005e5c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005e5e:	2101      	movs	r1, #1
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fabe 	bl	80063e2 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7ff fdf8 	bl	8005a64 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005e74:	e017      	b.n	8005ea6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b2a      	cmp	r3, #42	; 0x2a
 8005e80:	d111      	bne.n	8005ea6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2228      	movs	r2, #40	; 0x28
 8005e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2222      	movs	r2, #34	; 0x22
 8005e8e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005e90:	2102      	movs	r1, #2
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 faa5 	bl	80063e2 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff fde9 	bl	8005a78 <HAL_I2C_SlaveRxCpltCallback>
}
 8005ea6:	bf00      	nop
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
	...

08005eb0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ecc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	2b21      	cmp	r3, #33	; 0x21
 8005eda:	d002      	beq.n	8005ee2 <I2C_ITSlaveCplt+0x32>
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
 8005ede:	2b29      	cmp	r3, #41	; 0x29
 8005ee0:	d108      	bne.n	8005ef4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005ee2:	f248 0101 	movw	r1, #32769	; 0x8001
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fa7b 	bl	80063e2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2221      	movs	r2, #33	; 0x21
 8005ef0:	631a      	str	r2, [r3, #48]	; 0x30
 8005ef2:	e00d      	b.n	8005f10 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
 8005ef6:	2b22      	cmp	r3, #34	; 0x22
 8005ef8:	d002      	beq.n	8005f00 <I2C_ITSlaveCplt+0x50>
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
 8005efc:	2b2a      	cmp	r3, #42	; 0x2a
 8005efe:	d107      	bne.n	8005f10 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005f00:	f248 0102 	movw	r1, #32770	; 0x8002
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fa6c 	bl	80063e2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2222      	movs	r2, #34	; 0x22
 8005f0e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f1e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6859      	ldr	r1, [r3, #4]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	4b64      	ldr	r3, [pc, #400]	; (80060bc <I2C_ITSlaveCplt+0x20c>)
 8005f2c:	400b      	ands	r3, r1
 8005f2e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fa14 	bl	800635e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	0b9b      	lsrs	r3, r3, #14
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d013      	beq.n	8005f6a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f50:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d020      	beq.n	8005f9c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f68:	e018      	b.n	8005f9c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	0bdb      	lsrs	r3, r3, #15
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d012      	beq.n	8005f9c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f84:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d006      	beq.n	8005f9c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	089b      	lsrs	r3, r3, #2
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d020      	beq.n	8005fea <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f023 0304 	bic.w	r3, r3, #4
 8005fae:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00c      	beq.n	8005fea <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d005      	beq.n	8006000 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff8:	f043 0204 	orr.w	r2, r3, #4
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006012:	2b00      	cmp	r3, #0
 8006014:	d010      	beq.n	8006038 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601a:	4619      	mov	r1, r3
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f8a7 	bl	8006170 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b28      	cmp	r3, #40	; 0x28
 800602c:	d141      	bne.n	80060b2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800602e:	6979      	ldr	r1, [r7, #20]
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f847 	bl	80060c4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006036:	e03c      	b.n	80060b2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006040:	d014      	beq.n	800606c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7ff fed5 	bl	8005df2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a1d      	ldr	r2, [pc, #116]	; (80060c0 <I2C_ITSlaveCplt+0x210>)
 800604c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2220      	movs	r2, #32
 8006052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff fd1f 	bl	8005aa8 <HAL_I2C_ListenCpltCallback>
}
 800606a:	e022      	b.n	80060b2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b22      	cmp	r3, #34	; 0x22
 8006076:	d10e      	bne.n	8006096 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff fcf2 	bl	8005a78 <HAL_I2C_SlaveRxCpltCallback>
}
 8006094:	e00d      	b.n	80060b2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7ff fcd9 	bl	8005a64 <HAL_I2C_SlaveTxCpltCallback>
}
 80060b2:	bf00      	nop
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	fe00e800 	.word	0xfe00e800
 80060c0:	ffff0000 	.word	0xffff0000

080060c4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a26      	ldr	r2, [pc, #152]	; (800616c <I2C_ITListenCplt+0xa8>)
 80060d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2220      	movs	r2, #32
 80060de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	089b      	lsrs	r3, r3, #2
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d022      	beq.n	8006142 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006118:	2b00      	cmp	r3, #0
 800611a:	d012      	beq.n	8006142 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006120:	3b01      	subs	r3, #1
 8006122:	b29a      	uxth	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613a:	f043 0204 	orr.w	r2, r3, #4
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006142:	f248 0103 	movw	r1, #32771	; 0x8003
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f94b 	bl	80063e2 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2210      	movs	r2, #16
 8006152:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff fca3 	bl	8005aa8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006162:	bf00      	nop
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	ffff0000 	.word	0xffff0000

08006170 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006180:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a5d      	ldr	r2, [pc, #372]	; (8006304 <I2C_ITError+0x194>)
 800618e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	431a      	orrs	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
 80061a4:	2b28      	cmp	r3, #40	; 0x28
 80061a6:	d005      	beq.n	80061b4 <I2C_ITError+0x44>
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	2b29      	cmp	r3, #41	; 0x29
 80061ac:	d002      	beq.n	80061b4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	2b2a      	cmp	r3, #42	; 0x2a
 80061b2:	d10b      	bne.n	80061cc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80061b4:	2103      	movs	r1, #3
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f913 	bl	80063e2 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2228      	movs	r2, #40	; 0x28
 80061c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a50      	ldr	r2, [pc, #320]	; (8006308 <I2C_ITError+0x198>)
 80061c8:	635a      	str	r2, [r3, #52]	; 0x34
 80061ca:	e011      	b.n	80061f0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80061cc:	f248 0103 	movw	r1, #32771	; 0x8003
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f906 	bl	80063e2 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b60      	cmp	r3, #96	; 0x60
 80061e0:	d003      	beq.n	80061ea <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2220      	movs	r2, #32
 80061e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d039      	beq.n	8006272 <I2C_ITError+0x102>
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2b11      	cmp	r3, #17
 8006202:	d002      	beq.n	800620a <I2C_ITError+0x9a>
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b21      	cmp	r3, #33	; 0x21
 8006208:	d133      	bne.n	8006272 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006214:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006218:	d107      	bne.n	800622a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006228:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622e:	4618      	mov	r0, r3
 8006230:	f7ff f934 	bl	800549c <HAL_DMA_GetState>
 8006234:	4603      	mov	r3, r0
 8006236:	2b01      	cmp	r3, #1
 8006238:	d017      	beq.n	800626a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	4a33      	ldr	r2, [pc, #204]	; (800630c <I2C_ITError+0x19c>)
 8006240:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff f834 	bl	80052bc <HAL_DMA_Abort_IT>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d04d      	beq.n	80062f6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006264:	4610      	mov	r0, r2
 8006266:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006268:	e045      	b.n	80062f6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f850 	bl	8006310 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006270:	e041      	b.n	80062f6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006276:	2b00      	cmp	r3, #0
 8006278:	d039      	beq.n	80062ee <I2C_ITError+0x17e>
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b12      	cmp	r3, #18
 800627e:	d002      	beq.n	8006286 <I2C_ITError+0x116>
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b22      	cmp	r3, #34	; 0x22
 8006284:	d133      	bne.n	80062ee <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006294:	d107      	bne.n	80062a6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062a4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7ff f8f6 	bl	800549c <HAL_DMA_GetState>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d017      	beq.n	80062e6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ba:	4a14      	ldr	r2, [pc, #80]	; (800630c <I2C_ITError+0x19c>)
 80062bc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fe fff6 	bl	80052bc <HAL_DMA_Abort_IT>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d011      	beq.n	80062fa <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80062e0:	4610      	mov	r0, r2
 80062e2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062e4:	e009      	b.n	80062fa <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f812 	bl	8006310 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062ec:	e005      	b.n	80062fa <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f80e 	bl	8006310 <I2C_TreatErrorCallback>
  }
}
 80062f4:	e002      	b.n	80062fc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80062f6:	bf00      	nop
 80062f8:	e000      	b.n	80062fc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062fa:	bf00      	nop
}
 80062fc:	bf00      	nop
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	ffff0000 	.word	0xffff0000
 8006308:	08005ae5 	.word	0x08005ae5
 800630c:	080063a7 	.word	0x080063a7

08006310 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b60      	cmp	r3, #96	; 0x60
 8006322:	d10e      	bne.n	8006342 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2220      	movs	r2, #32
 8006328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff fbc8 	bl	8005ad0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006340:	e009      	b.n	8006356 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7ff fbb3 	bl	8005abc <HAL_I2C_ErrorCallback>
}
 8006356:	bf00      	nop
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800635e:	b480      	push	{r7}
 8006360:	b083      	sub	sp, #12
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b02      	cmp	r3, #2
 8006372:	d103      	bne.n	800637c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2200      	movs	r2, #0
 800637a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b01      	cmp	r3, #1
 8006388:	d007      	beq.n	800639a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	699a      	ldr	r2, [r3, #24]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f042 0201 	orr.w	r2, r2, #1
 8006398:	619a      	str	r2, [r3, #24]
  }
}
 800639a:	bf00      	nop
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b084      	sub	sp, #16
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c0:	2200      	movs	r2, #0
 80063c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d0:	2200      	movs	r2, #0
 80063d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f7ff ff9b 	bl	8006310 <I2C_TreatErrorCallback>
}
 80063da:	bf00      	nop
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b085      	sub	sp, #20
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	460b      	mov	r3, r1
 80063ec:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80063f2:	887b      	ldrh	r3, [r7, #2]
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00f      	beq.n	800641c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006402:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800640a:	b2db      	uxtb	r3, r3
 800640c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006410:	2b28      	cmp	r3, #40	; 0x28
 8006412:	d003      	beq.n	800641c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800641a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800641c:	887b      	ldrh	r3, [r7, #2]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00f      	beq.n	8006446 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800642c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006434:	b2db      	uxtb	r3, r3
 8006436:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800643a:	2b28      	cmp	r3, #40	; 0x28
 800643c:	d003      	beq.n	8006446 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006444:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006446:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800644a:	2b00      	cmp	r3, #0
 800644c:	da03      	bge.n	8006456 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006454:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006456:	887b      	ldrh	r3, [r7, #2]
 8006458:	2b10      	cmp	r3, #16
 800645a:	d103      	bne.n	8006464 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006462:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006464:	887b      	ldrh	r3, [r7, #2]
 8006466:	2b20      	cmp	r3, #32
 8006468:	d103      	bne.n	8006472 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f043 0320 	orr.w	r3, r3, #32
 8006470:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006472:	887b      	ldrh	r3, [r7, #2]
 8006474:	2b40      	cmp	r3, #64	; 0x40
 8006476:	d103      	bne.n	8006480 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800647e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6819      	ldr	r1, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	43da      	mvns	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	400a      	ands	r2, r1
 8006490:	601a      	str	r2, [r3, #0]
}
 8006492:	bf00      	nop
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b20      	cmp	r3, #32
 80064b2:	d138      	bne.n	8006526 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d101      	bne.n	80064c2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80064be:	2302      	movs	r3, #2
 80064c0:	e032      	b.n	8006528 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2224      	movs	r2, #36	; 0x24
 80064ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f022 0201 	bic.w	r2, r2, #1
 80064e0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80064f0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6819      	ldr	r1, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0201 	orr.w	r2, r2, #1
 8006510:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	e000      	b.n	8006528 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006526:	2302      	movs	r3, #2
  }
}
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b20      	cmp	r3, #32
 8006548:	d139      	bne.n	80065be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006550:	2b01      	cmp	r3, #1
 8006552:	d101      	bne.n	8006558 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006554:	2302      	movs	r3, #2
 8006556:	e033      	b.n	80065c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2224      	movs	r2, #36	; 0x24
 8006564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 0201 	bic.w	r2, r2, #1
 8006576:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006586:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	021b      	lsls	r3, r3, #8
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f042 0201 	orr.w	r2, r2, #1
 80065a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2220      	movs	r2, #32
 80065ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	e000      	b.n	80065c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80065be:	2302      	movs	r3, #2
  }
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065d0:	4b05      	ldr	r3, [pc, #20]	; (80065e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a04      	ldr	r2, [pc, #16]	; (80065e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80065d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065da:	6013      	str	r3, [r2, #0]
}
 80065dc:	bf00      	nop
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	40007000 	.word	0x40007000

080065ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80065f0:	4b04      	ldr	r3, [pc, #16]	; (8006604 <HAL_PWREx_GetVoltageRange+0x18>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40007000 	.word	0x40007000

08006608 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006616:	d130      	bne.n	800667a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006618:	4b23      	ldr	r3, [pc, #140]	; (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006624:	d038      	beq.n	8006698 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006626:	4b20      	ldr	r3, [pc, #128]	; (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800662e:	4a1e      	ldr	r2, [pc, #120]	; (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006630:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006634:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006636:	4b1d      	ldr	r3, [pc, #116]	; (80066ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2232      	movs	r2, #50	; 0x32
 800663c:	fb02 f303 	mul.w	r3, r2, r3
 8006640:	4a1b      	ldr	r2, [pc, #108]	; (80066b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006642:	fba2 2303 	umull	r2, r3, r2, r3
 8006646:	0c9b      	lsrs	r3, r3, #18
 8006648:	3301      	adds	r3, #1
 800664a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800664c:	e002      	b.n	8006654 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3b01      	subs	r3, #1
 8006652:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006654:	4b14      	ldr	r3, [pc, #80]	; (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800665c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006660:	d102      	bne.n	8006668 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1f2      	bne.n	800664e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006668:	4b0f      	ldr	r3, [pc, #60]	; (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006674:	d110      	bne.n	8006698 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e00f      	b.n	800669a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800667a:	4b0b      	ldr	r3, [pc, #44]	; (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006686:	d007      	beq.n	8006698 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006688:	4b07      	ldr	r3, [pc, #28]	; (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006690:	4a05      	ldr	r2, [pc, #20]	; (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006696:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	40007000 	.word	0x40007000
 80066ac:	20000010 	.word	0x20000010
 80066b0:	431bde83 	.word	0x431bde83

080066b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b088      	sub	sp, #32
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d102      	bne.n	80066c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	f000 bc02 	b.w	8006ecc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066c8:	4b96      	ldr	r3, [pc, #600]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f003 030c 	and.w	r3, r3, #12
 80066d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066d2:	4b94      	ldr	r3, [pc, #592]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f003 0303 	and.w	r3, r3, #3
 80066da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0310 	and.w	r3, r3, #16
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 80e4 	beq.w	80068b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d007      	beq.n	8006700 <HAL_RCC_OscConfig+0x4c>
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	2b0c      	cmp	r3, #12
 80066f4:	f040 808b 	bne.w	800680e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	f040 8087 	bne.w	800680e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006700:	4b88      	ldr	r3, [pc, #544]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0302 	and.w	r3, r3, #2
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <HAL_RCC_OscConfig+0x64>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e3d9      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a1a      	ldr	r2, [r3, #32]
 800671c:	4b81      	ldr	r3, [pc, #516]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0308 	and.w	r3, r3, #8
 8006724:	2b00      	cmp	r3, #0
 8006726:	d004      	beq.n	8006732 <HAL_RCC_OscConfig+0x7e>
 8006728:	4b7e      	ldr	r3, [pc, #504]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006730:	e005      	b.n	800673e <HAL_RCC_OscConfig+0x8a>
 8006732:	4b7c      	ldr	r3, [pc, #496]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 8006734:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006738:	091b      	lsrs	r3, r3, #4
 800673a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800673e:	4293      	cmp	r3, r2
 8006740:	d223      	bcs.n	800678a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fd8c 	bl	8007264 <RCC_SetFlashLatencyFromMSIRange>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d001      	beq.n	8006756 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e3ba      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006756:	4b73      	ldr	r3, [pc, #460]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a72      	ldr	r2, [pc, #456]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 800675c:	f043 0308 	orr.w	r3, r3, #8
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	4b70      	ldr	r3, [pc, #448]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	496d      	ldr	r1, [pc, #436]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 8006770:	4313      	orrs	r3, r2
 8006772:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006774:	4b6b      	ldr	r3, [pc, #428]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	021b      	lsls	r3, r3, #8
 8006782:	4968      	ldr	r1, [pc, #416]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 8006784:	4313      	orrs	r3, r2
 8006786:	604b      	str	r3, [r1, #4]
 8006788:	e025      	b.n	80067d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800678a:	4b66      	ldr	r3, [pc, #408]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a65      	ldr	r2, [pc, #404]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 8006790:	f043 0308 	orr.w	r3, r3, #8
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	4b63      	ldr	r3, [pc, #396]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	4960      	ldr	r1, [pc, #384]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80067a8:	4b5e      	ldr	r3, [pc, #376]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	021b      	lsls	r3, r3, #8
 80067b6:	495b      	ldr	r1, [pc, #364]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 fd4c 	bl	8007264 <RCC_SetFlashLatencyFromMSIRange>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e37a      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80067d6:	f000 fc81 	bl	80070dc <HAL_RCC_GetSysClockFreq>
 80067da:	4602      	mov	r2, r0
 80067dc:	4b51      	ldr	r3, [pc, #324]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	091b      	lsrs	r3, r3, #4
 80067e2:	f003 030f 	and.w	r3, r3, #15
 80067e6:	4950      	ldr	r1, [pc, #320]	; (8006928 <HAL_RCC_OscConfig+0x274>)
 80067e8:	5ccb      	ldrb	r3, [r1, r3]
 80067ea:	f003 031f 	and.w	r3, r3, #31
 80067ee:	fa22 f303 	lsr.w	r3, r2, r3
 80067f2:	4a4e      	ldr	r2, [pc, #312]	; (800692c <HAL_RCC_OscConfig+0x278>)
 80067f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80067f6:	4b4e      	ldr	r3, [pc, #312]	; (8006930 <HAL_RCC_OscConfig+0x27c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fc ffd2 	bl	80037a4 <HAL_InitTick>
 8006800:	4603      	mov	r3, r0
 8006802:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d052      	beq.n	80068b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800680a:	7bfb      	ldrb	r3, [r7, #15]
 800680c:	e35e      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d032      	beq.n	800687c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006816:	4b43      	ldr	r3, [pc, #268]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a42      	ldr	r2, [pc, #264]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 800681c:	f043 0301 	orr.w	r3, r3, #1
 8006820:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006822:	f7fd f80f 	bl	8003844 <HAL_GetTick>
 8006826:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006828:	e008      	b.n	800683c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800682a:	f7fd f80b 	bl	8003844 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d901      	bls.n	800683c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e347      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800683c:	4b39      	ldr	r3, [pc, #228]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d0f0      	beq.n	800682a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006848:	4b36      	ldr	r3, [pc, #216]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a35      	ldr	r2, [pc, #212]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 800684e:	f043 0308 	orr.w	r3, r3, #8
 8006852:	6013      	str	r3, [r2, #0]
 8006854:	4b33      	ldr	r3, [pc, #204]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	4930      	ldr	r1, [pc, #192]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 8006862:	4313      	orrs	r3, r2
 8006864:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006866:	4b2f      	ldr	r3, [pc, #188]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	021b      	lsls	r3, r3, #8
 8006874:	492b      	ldr	r1, [pc, #172]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 8006876:	4313      	orrs	r3, r2
 8006878:	604b      	str	r3, [r1, #4]
 800687a:	e01a      	b.n	80068b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800687c:	4b29      	ldr	r3, [pc, #164]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a28      	ldr	r2, [pc, #160]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 8006882:	f023 0301 	bic.w	r3, r3, #1
 8006886:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006888:	f7fc ffdc 	bl	8003844 <HAL_GetTick>
 800688c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006890:	f7fc ffd8 	bl	8003844 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e314      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80068a2:	4b20      	ldr	r3, [pc, #128]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1f0      	bne.n	8006890 <HAL_RCC_OscConfig+0x1dc>
 80068ae:	e000      	b.n	80068b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80068b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d073      	beq.n	80069a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d005      	beq.n	80068d0 <HAL_RCC_OscConfig+0x21c>
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	2b0c      	cmp	r3, #12
 80068c8:	d10e      	bne.n	80068e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2b03      	cmp	r3, #3
 80068ce:	d10b      	bne.n	80068e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d0:	4b14      	ldr	r3, [pc, #80]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d063      	beq.n	80069a4 <HAL_RCC_OscConfig+0x2f0>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d15f      	bne.n	80069a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e2f1      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f0:	d106      	bne.n	8006900 <HAL_RCC_OscConfig+0x24c>
 80068f2:	4b0c      	ldr	r3, [pc, #48]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a0b      	ldr	r2, [pc, #44]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 80068f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068fc:	6013      	str	r3, [r2, #0]
 80068fe:	e025      	b.n	800694c <HAL_RCC_OscConfig+0x298>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006908:	d114      	bne.n	8006934 <HAL_RCC_OscConfig+0x280>
 800690a:	4b06      	ldr	r3, [pc, #24]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a05      	ldr	r2, [pc, #20]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 8006910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	4b03      	ldr	r3, [pc, #12]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a02      	ldr	r2, [pc, #8]	; (8006924 <HAL_RCC_OscConfig+0x270>)
 800691c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	e013      	b.n	800694c <HAL_RCC_OscConfig+0x298>
 8006924:	40021000 	.word	0x40021000
 8006928:	08010570 	.word	0x08010570
 800692c:	20000010 	.word	0x20000010
 8006930:	20000014 	.word	0x20000014
 8006934:	4ba0      	ldr	r3, [pc, #640]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a9f      	ldr	r2, [pc, #636]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 800693a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	4b9d      	ldr	r3, [pc, #628]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a9c      	ldr	r2, [pc, #624]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800694a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d013      	beq.n	800697c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006954:	f7fc ff76 	bl	8003844 <HAL_GetTick>
 8006958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800695a:	e008      	b.n	800696e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800695c:	f7fc ff72 	bl	8003844 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b64      	cmp	r3, #100	; 0x64
 8006968:	d901      	bls.n	800696e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e2ae      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800696e:	4b92      	ldr	r3, [pc, #584]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0f0      	beq.n	800695c <HAL_RCC_OscConfig+0x2a8>
 800697a:	e014      	b.n	80069a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697c:	f7fc ff62 	bl	8003844 <HAL_GetTick>
 8006980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006982:	e008      	b.n	8006996 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006984:	f7fc ff5e 	bl	8003844 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b64      	cmp	r3, #100	; 0x64
 8006990:	d901      	bls.n	8006996 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e29a      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006996:	4b88      	ldr	r3, [pc, #544]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1f0      	bne.n	8006984 <HAL_RCC_OscConfig+0x2d0>
 80069a2:	e000      	b.n	80069a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d060      	beq.n	8006a74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	d005      	beq.n	80069c4 <HAL_RCC_OscConfig+0x310>
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	2b0c      	cmp	r3, #12
 80069bc:	d119      	bne.n	80069f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d116      	bne.n	80069f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069c4:	4b7c      	ldr	r3, [pc, #496]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d005      	beq.n	80069dc <HAL_RCC_OscConfig+0x328>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e277      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069dc:	4b76      	ldr	r3, [pc, #472]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	061b      	lsls	r3, r3, #24
 80069ea:	4973      	ldr	r1, [pc, #460]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069f0:	e040      	b.n	8006a74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d023      	beq.n	8006a42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069fa:	4b6f      	ldr	r3, [pc, #444]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a6e      	ldr	r2, [pc, #440]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a06:	f7fc ff1d 	bl	8003844 <HAL_GetTick>
 8006a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a0c:	e008      	b.n	8006a20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a0e:	f7fc ff19 	bl	8003844 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d901      	bls.n	8006a20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e255      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a20:	4b65      	ldr	r3, [pc, #404]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d0f0      	beq.n	8006a0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a2c:	4b62      	ldr	r3, [pc, #392]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	061b      	lsls	r3, r3, #24
 8006a3a:	495f      	ldr	r1, [pc, #380]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	604b      	str	r3, [r1, #4]
 8006a40:	e018      	b.n	8006a74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a42:	4b5d      	ldr	r3, [pc, #372]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a5c      	ldr	r2, [pc, #368]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4e:	f7fc fef9 	bl	8003844 <HAL_GetTick>
 8006a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a54:	e008      	b.n	8006a68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a56:	f7fc fef5 	bl	8003844 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d901      	bls.n	8006a68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e231      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a68:	4b53      	ldr	r3, [pc, #332]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1f0      	bne.n	8006a56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0308 	and.w	r3, r3, #8
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d03c      	beq.n	8006afa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d01c      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a88:	4b4b      	ldr	r3, [pc, #300]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a8e:	4a4a      	ldr	r2, [pc, #296]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006a90:	f043 0301 	orr.w	r3, r3, #1
 8006a94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a98:	f7fc fed4 	bl	8003844 <HAL_GetTick>
 8006a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006aa0:	f7fc fed0 	bl	8003844 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e20c      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ab2:	4b41      	ldr	r3, [pc, #260]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d0ef      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x3ec>
 8006ac0:	e01b      	b.n	8006afa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ac2:	4b3d      	ldr	r3, [pc, #244]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ac8:	4a3b      	ldr	r2, [pc, #236]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006aca:	f023 0301 	bic.w	r3, r3, #1
 8006ace:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad2:	f7fc feb7 	bl	8003844 <HAL_GetTick>
 8006ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ad8:	e008      	b.n	8006aec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ada:	f7fc feb3 	bl	8003844 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d901      	bls.n	8006aec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e1ef      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006aec:	4b32      	ldr	r3, [pc, #200]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1ef      	bne.n	8006ada <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0304 	and.w	r3, r3, #4
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 80a6 	beq.w	8006c54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006b0c:	4b2a      	ldr	r3, [pc, #168]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10d      	bne.n	8006b34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b18:	4b27      	ldr	r3, [pc, #156]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b1c:	4a26      	ldr	r2, [pc, #152]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b22:	6593      	str	r3, [r2, #88]	; 0x58
 8006b24:	4b24      	ldr	r3, [pc, #144]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b2c:	60bb      	str	r3, [r7, #8]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b30:	2301      	movs	r3, #1
 8006b32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b34:	4b21      	ldr	r3, [pc, #132]	; (8006bbc <HAL_RCC_OscConfig+0x508>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d118      	bne.n	8006b72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b40:	4b1e      	ldr	r3, [pc, #120]	; (8006bbc <HAL_RCC_OscConfig+0x508>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a1d      	ldr	r2, [pc, #116]	; (8006bbc <HAL_RCC_OscConfig+0x508>)
 8006b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b4c:	f7fc fe7a 	bl	8003844 <HAL_GetTick>
 8006b50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b52:	e008      	b.n	8006b66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b54:	f7fc fe76 	bl	8003844 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e1b2      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b66:	4b15      	ldr	r3, [pc, #84]	; (8006bbc <HAL_RCC_OscConfig+0x508>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0f0      	beq.n	8006b54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d108      	bne.n	8006b8c <HAL_RCC_OscConfig+0x4d8>
 8006b7a:	4b0f      	ldr	r3, [pc, #60]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b80:	4a0d      	ldr	r2, [pc, #52]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006b82:	f043 0301 	orr.w	r3, r3, #1
 8006b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b8a:	e029      	b.n	8006be0 <HAL_RCC_OscConfig+0x52c>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	2b05      	cmp	r3, #5
 8006b92:	d115      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x50c>
 8006b94:	4b08      	ldr	r3, [pc, #32]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b9a:	4a07      	ldr	r2, [pc, #28]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006b9c:	f043 0304 	orr.w	r3, r3, #4
 8006ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ba4:	4b04      	ldr	r3, [pc, #16]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006baa:	4a03      	ldr	r2, [pc, #12]	; (8006bb8 <HAL_RCC_OscConfig+0x504>)
 8006bac:	f043 0301 	orr.w	r3, r3, #1
 8006bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006bb4:	e014      	b.n	8006be0 <HAL_RCC_OscConfig+0x52c>
 8006bb6:	bf00      	nop
 8006bb8:	40021000 	.word	0x40021000
 8006bbc:	40007000 	.word	0x40007000
 8006bc0:	4b9a      	ldr	r3, [pc, #616]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc6:	4a99      	ldr	r2, [pc, #612]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006bc8:	f023 0301 	bic.w	r3, r3, #1
 8006bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006bd0:	4b96      	ldr	r3, [pc, #600]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd6:	4a95      	ldr	r2, [pc, #596]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006bd8:	f023 0304 	bic.w	r3, r3, #4
 8006bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d016      	beq.n	8006c16 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be8:	f7fc fe2c 	bl	8003844 <HAL_GetTick>
 8006bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bee:	e00a      	b.n	8006c06 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bf0:	f7fc fe28 	bl	8003844 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e162      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c06:	4b89      	ldr	r3, [pc, #548]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d0ed      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x53c>
 8006c14:	e015      	b.n	8006c42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c16:	f7fc fe15 	bl	8003844 <HAL_GetTick>
 8006c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c1c:	e00a      	b.n	8006c34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c1e:	f7fc fe11 	bl	8003844 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d901      	bls.n	8006c34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e14b      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c34:	4b7d      	ldr	r3, [pc, #500]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1ed      	bne.n	8006c1e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c42:	7ffb      	ldrb	r3, [r7, #31]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d105      	bne.n	8006c54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c48:	4b78      	ldr	r3, [pc, #480]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c4c:	4a77      	ldr	r2, [pc, #476]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c52:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0320 	and.w	r3, r3, #32
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d03c      	beq.n	8006cda <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d01c      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c68:	4b70      	ldr	r3, [pc, #448]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006c6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c6e:	4a6f      	ldr	r2, [pc, #444]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006c70:	f043 0301 	orr.w	r3, r3, #1
 8006c74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c78:	f7fc fde4 	bl	8003844 <HAL_GetTick>
 8006c7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006c7e:	e008      	b.n	8006c92 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c80:	f7fc fde0 	bl	8003844 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e11c      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006c92:	4b66      	ldr	r3, [pc, #408]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006c94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d0ef      	beq.n	8006c80 <HAL_RCC_OscConfig+0x5cc>
 8006ca0:	e01b      	b.n	8006cda <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ca2:	4b62      	ldr	r3, [pc, #392]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006ca4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ca8:	4a60      	ldr	r2, [pc, #384]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006caa:	f023 0301 	bic.w	r3, r3, #1
 8006cae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb2:	f7fc fdc7 	bl	8003844 <HAL_GetTick>
 8006cb6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006cb8:	e008      	b.n	8006ccc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cba:	f7fc fdc3 	bl	8003844 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d901      	bls.n	8006ccc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e0ff      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ccc:	4b57      	ldr	r3, [pc, #348]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006cce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1ef      	bne.n	8006cba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 80f3 	beq.w	8006eca <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	f040 80c9 	bne.w	8006e80 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006cee:	4b4f      	ldr	r3, [pc, #316]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f003 0203 	and.w	r2, r3, #3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d12c      	bne.n	8006d5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d123      	bne.n	8006d5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d11b      	bne.n	8006d5c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d113      	bne.n	8006d5c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3e:	085b      	lsrs	r3, r3, #1
 8006d40:	3b01      	subs	r3, #1
 8006d42:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d109      	bne.n	8006d5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	085b      	lsrs	r3, r3, #1
 8006d54:	3b01      	subs	r3, #1
 8006d56:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d06b      	beq.n	8006e34 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	2b0c      	cmp	r3, #12
 8006d60:	d062      	beq.n	8006e28 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006d62:	4b32      	ldr	r3, [pc, #200]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e0ac      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006d72:	4b2e      	ldr	r3, [pc, #184]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a2d      	ldr	r2, [pc, #180]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006d78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d7c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006d7e:	f7fc fd61 	bl	8003844 <HAL_GetTick>
 8006d82:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d84:	e008      	b.n	8006d98 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d86:	f7fc fd5d 	bl	8003844 <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d901      	bls.n	8006d98 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e099      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d98:	4b24      	ldr	r3, [pc, #144]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1f0      	bne.n	8006d86 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006da4:	4b21      	ldr	r3, [pc, #132]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	4b21      	ldr	r3, [pc, #132]	; (8006e30 <HAL_RCC_OscConfig+0x77c>)
 8006daa:	4013      	ands	r3, r2
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006db4:	3a01      	subs	r2, #1
 8006db6:	0112      	lsls	r2, r2, #4
 8006db8:	4311      	orrs	r1, r2
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006dbe:	0212      	lsls	r2, r2, #8
 8006dc0:	4311      	orrs	r1, r2
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006dc6:	0852      	lsrs	r2, r2, #1
 8006dc8:	3a01      	subs	r2, #1
 8006dca:	0552      	lsls	r2, r2, #21
 8006dcc:	4311      	orrs	r1, r2
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006dd2:	0852      	lsrs	r2, r2, #1
 8006dd4:	3a01      	subs	r2, #1
 8006dd6:	0652      	lsls	r2, r2, #25
 8006dd8:	4311      	orrs	r1, r2
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006dde:	06d2      	lsls	r2, r2, #27
 8006de0:	430a      	orrs	r2, r1
 8006de2:	4912      	ldr	r1, [pc, #72]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006de8:	4b10      	ldr	r3, [pc, #64]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a0f      	ldr	r2, [pc, #60]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006df2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006df4:	4b0d      	ldr	r3, [pc, #52]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	4a0c      	ldr	r2, [pc, #48]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006dfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dfe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006e00:	f7fc fd20 	bl	8003844 <HAL_GetTick>
 8006e04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e06:	e008      	b.n	8006e1a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e08:	f7fc fd1c 	bl	8003844 <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d901      	bls.n	8006e1a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e058      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e1a:	4b04      	ldr	r3, [pc, #16]	; (8006e2c <HAL_RCC_OscConfig+0x778>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d0f0      	beq.n	8006e08 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e26:	e050      	b.n	8006eca <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e04f      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
 8006e2c:	40021000 	.word	0x40021000
 8006e30:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e34:	4b27      	ldr	r3, [pc, #156]	; (8006ed4 <HAL_RCC_OscConfig+0x820>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d144      	bne.n	8006eca <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006e40:	4b24      	ldr	r3, [pc, #144]	; (8006ed4 <HAL_RCC_OscConfig+0x820>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a23      	ldr	r2, [pc, #140]	; (8006ed4 <HAL_RCC_OscConfig+0x820>)
 8006e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e4c:	4b21      	ldr	r3, [pc, #132]	; (8006ed4 <HAL_RCC_OscConfig+0x820>)
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	4a20      	ldr	r2, [pc, #128]	; (8006ed4 <HAL_RCC_OscConfig+0x820>)
 8006e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006e58:	f7fc fcf4 	bl	8003844 <HAL_GetTick>
 8006e5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e5e:	e008      	b.n	8006e72 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e60:	f7fc fcf0 	bl	8003844 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d901      	bls.n	8006e72 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e02c      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e72:	4b18      	ldr	r3, [pc, #96]	; (8006ed4 <HAL_RCC_OscConfig+0x820>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d0f0      	beq.n	8006e60 <HAL_RCC_OscConfig+0x7ac>
 8006e7e:	e024      	b.n	8006eca <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	2b0c      	cmp	r3, #12
 8006e84:	d01f      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e86:	4b13      	ldr	r3, [pc, #76]	; (8006ed4 <HAL_RCC_OscConfig+0x820>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a12      	ldr	r2, [pc, #72]	; (8006ed4 <HAL_RCC_OscConfig+0x820>)
 8006e8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e92:	f7fc fcd7 	bl	8003844 <HAL_GetTick>
 8006e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e98:	e008      	b.n	8006eac <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e9a:	f7fc fcd3 	bl	8003844 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d901      	bls.n	8006eac <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e00f      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006eac:	4b09      	ldr	r3, [pc, #36]	; (8006ed4 <HAL_RCC_OscConfig+0x820>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1f0      	bne.n	8006e9a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006eb8:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <HAL_RCC_OscConfig+0x820>)
 8006eba:	68da      	ldr	r2, [r3, #12]
 8006ebc:	4905      	ldr	r1, [pc, #20]	; (8006ed4 <HAL_RCC_OscConfig+0x820>)
 8006ebe:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <HAL_RCC_OscConfig+0x824>)
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	60cb      	str	r3, [r1, #12]
 8006ec4:	e001      	b.n	8006eca <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e000      	b.n	8006ecc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3720      	adds	r7, #32
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	40021000 	.word	0x40021000
 8006ed8:	feeefffc 	.word	0xfeeefffc

08006edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e0e7      	b.n	80070c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ef0:	4b75      	ldr	r3, [pc, #468]	; (80070c8 <HAL_RCC_ClockConfig+0x1ec>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0307 	and.w	r3, r3, #7
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d910      	bls.n	8006f20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006efe:	4b72      	ldr	r3, [pc, #456]	; (80070c8 <HAL_RCC_ClockConfig+0x1ec>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f023 0207 	bic.w	r2, r3, #7
 8006f06:	4970      	ldr	r1, [pc, #448]	; (80070c8 <HAL_RCC_ClockConfig+0x1ec>)
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f0e:	4b6e      	ldr	r3, [pc, #440]	; (80070c8 <HAL_RCC_ClockConfig+0x1ec>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0307 	and.w	r3, r3, #7
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d001      	beq.n	8006f20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e0cf      	b.n	80070c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d010      	beq.n	8006f4e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	4b66      	ldr	r3, [pc, #408]	; (80070cc <HAL_RCC_ClockConfig+0x1f0>)
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d908      	bls.n	8006f4e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f3c:	4b63      	ldr	r3, [pc, #396]	; (80070cc <HAL_RCC_ClockConfig+0x1f0>)
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	4960      	ldr	r1, [pc, #384]	; (80070cc <HAL_RCC_ClockConfig+0x1f0>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d04c      	beq.n	8006ff4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	2b03      	cmp	r3, #3
 8006f60:	d107      	bne.n	8006f72 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f62:	4b5a      	ldr	r3, [pc, #360]	; (80070cc <HAL_RCC_ClockConfig+0x1f0>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d121      	bne.n	8006fb2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e0a6      	b.n	80070c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d107      	bne.n	8006f8a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f7a:	4b54      	ldr	r3, [pc, #336]	; (80070cc <HAL_RCC_ClockConfig+0x1f0>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d115      	bne.n	8006fb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e09a      	b.n	80070c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d107      	bne.n	8006fa2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006f92:	4b4e      	ldr	r3, [pc, #312]	; (80070cc <HAL_RCC_ClockConfig+0x1f0>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d109      	bne.n	8006fb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e08e      	b.n	80070c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fa2:	4b4a      	ldr	r3, [pc, #296]	; (80070cc <HAL_RCC_ClockConfig+0x1f0>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e086      	b.n	80070c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006fb2:	4b46      	ldr	r3, [pc, #280]	; (80070cc <HAL_RCC_ClockConfig+0x1f0>)
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f023 0203 	bic.w	r2, r3, #3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	4943      	ldr	r1, [pc, #268]	; (80070cc <HAL_RCC_ClockConfig+0x1f0>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fc4:	f7fc fc3e 	bl	8003844 <HAL_GetTick>
 8006fc8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fca:	e00a      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fcc:	f7fc fc3a 	bl	8003844 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d901      	bls.n	8006fe2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e06e      	b.n	80070c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fe2:	4b3a      	ldr	r3, [pc, #232]	; (80070cc <HAL_RCC_ClockConfig+0x1f0>)
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f003 020c 	and.w	r2, r3, #12
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d1eb      	bne.n	8006fcc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d010      	beq.n	8007022 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689a      	ldr	r2, [r3, #8]
 8007004:	4b31      	ldr	r3, [pc, #196]	; (80070cc <HAL_RCC_ClockConfig+0x1f0>)
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800700c:	429a      	cmp	r2, r3
 800700e:	d208      	bcs.n	8007022 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007010:	4b2e      	ldr	r3, [pc, #184]	; (80070cc <HAL_RCC_ClockConfig+0x1f0>)
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	492b      	ldr	r1, [pc, #172]	; (80070cc <HAL_RCC_ClockConfig+0x1f0>)
 800701e:	4313      	orrs	r3, r2
 8007020:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007022:	4b29      	ldr	r3, [pc, #164]	; (80070c8 <HAL_RCC_ClockConfig+0x1ec>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0307 	and.w	r3, r3, #7
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	429a      	cmp	r2, r3
 800702e:	d210      	bcs.n	8007052 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007030:	4b25      	ldr	r3, [pc, #148]	; (80070c8 <HAL_RCC_ClockConfig+0x1ec>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f023 0207 	bic.w	r2, r3, #7
 8007038:	4923      	ldr	r1, [pc, #140]	; (80070c8 <HAL_RCC_ClockConfig+0x1ec>)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	4313      	orrs	r3, r2
 800703e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007040:	4b21      	ldr	r3, [pc, #132]	; (80070c8 <HAL_RCC_ClockConfig+0x1ec>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0307 	and.w	r3, r3, #7
 8007048:	683a      	ldr	r2, [r7, #0]
 800704a:	429a      	cmp	r2, r3
 800704c:	d001      	beq.n	8007052 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e036      	b.n	80070c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0304 	and.w	r3, r3, #4
 800705a:	2b00      	cmp	r3, #0
 800705c:	d008      	beq.n	8007070 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800705e:	4b1b      	ldr	r3, [pc, #108]	; (80070cc <HAL_RCC_ClockConfig+0x1f0>)
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	4918      	ldr	r1, [pc, #96]	; (80070cc <HAL_RCC_ClockConfig+0x1f0>)
 800706c:	4313      	orrs	r3, r2
 800706e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0308 	and.w	r3, r3, #8
 8007078:	2b00      	cmp	r3, #0
 800707a:	d009      	beq.n	8007090 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800707c:	4b13      	ldr	r3, [pc, #76]	; (80070cc <HAL_RCC_ClockConfig+0x1f0>)
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	00db      	lsls	r3, r3, #3
 800708a:	4910      	ldr	r1, [pc, #64]	; (80070cc <HAL_RCC_ClockConfig+0x1f0>)
 800708c:	4313      	orrs	r3, r2
 800708e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007090:	f000 f824 	bl	80070dc <HAL_RCC_GetSysClockFreq>
 8007094:	4602      	mov	r2, r0
 8007096:	4b0d      	ldr	r3, [pc, #52]	; (80070cc <HAL_RCC_ClockConfig+0x1f0>)
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	091b      	lsrs	r3, r3, #4
 800709c:	f003 030f 	and.w	r3, r3, #15
 80070a0:	490b      	ldr	r1, [pc, #44]	; (80070d0 <HAL_RCC_ClockConfig+0x1f4>)
 80070a2:	5ccb      	ldrb	r3, [r1, r3]
 80070a4:	f003 031f 	and.w	r3, r3, #31
 80070a8:	fa22 f303 	lsr.w	r3, r2, r3
 80070ac:	4a09      	ldr	r2, [pc, #36]	; (80070d4 <HAL_RCC_ClockConfig+0x1f8>)
 80070ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80070b0:	4b09      	ldr	r3, [pc, #36]	; (80070d8 <HAL_RCC_ClockConfig+0x1fc>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fc fb75 	bl	80037a4 <HAL_InitTick>
 80070ba:	4603      	mov	r3, r0
 80070bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80070be:	7afb      	ldrb	r3, [r7, #11]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	40022000 	.word	0x40022000
 80070cc:	40021000 	.word	0x40021000
 80070d0:	08010570 	.word	0x08010570
 80070d4:	20000010 	.word	0x20000010
 80070d8:	20000014 	.word	0x20000014

080070dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070dc:	b480      	push	{r7}
 80070de:	b089      	sub	sp, #36	; 0x24
 80070e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	61fb      	str	r3, [r7, #28]
 80070e6:	2300      	movs	r3, #0
 80070e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070ea:	4b3e      	ldr	r3, [pc, #248]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f003 030c 	and.w	r3, r3, #12
 80070f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070f4:	4b3b      	ldr	r3, [pc, #236]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f003 0303 	and.w	r3, r3, #3
 80070fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d005      	beq.n	8007110 <HAL_RCC_GetSysClockFreq+0x34>
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	2b0c      	cmp	r3, #12
 8007108:	d121      	bne.n	800714e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d11e      	bne.n	800714e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007110:	4b34      	ldr	r3, [pc, #208]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0308 	and.w	r3, r3, #8
 8007118:	2b00      	cmp	r3, #0
 800711a:	d107      	bne.n	800712c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800711c:	4b31      	ldr	r3, [pc, #196]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800711e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007122:	0a1b      	lsrs	r3, r3, #8
 8007124:	f003 030f 	and.w	r3, r3, #15
 8007128:	61fb      	str	r3, [r7, #28]
 800712a:	e005      	b.n	8007138 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800712c:	4b2d      	ldr	r3, [pc, #180]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	091b      	lsrs	r3, r3, #4
 8007132:	f003 030f 	and.w	r3, r3, #15
 8007136:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007138:	4a2b      	ldr	r2, [pc, #172]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007140:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10d      	bne.n	8007164 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800714c:	e00a      	b.n	8007164 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	2b04      	cmp	r3, #4
 8007152:	d102      	bne.n	800715a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007154:	4b25      	ldr	r3, [pc, #148]	; (80071ec <HAL_RCC_GetSysClockFreq+0x110>)
 8007156:	61bb      	str	r3, [r7, #24]
 8007158:	e004      	b.n	8007164 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	2b08      	cmp	r3, #8
 800715e:	d101      	bne.n	8007164 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007160:	4b23      	ldr	r3, [pc, #140]	; (80071f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8007162:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	2b0c      	cmp	r3, #12
 8007168:	d134      	bne.n	80071d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800716a:	4b1e      	ldr	r3, [pc, #120]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	2b02      	cmp	r3, #2
 8007178:	d003      	beq.n	8007182 <HAL_RCC_GetSysClockFreq+0xa6>
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	2b03      	cmp	r3, #3
 800717e:	d003      	beq.n	8007188 <HAL_RCC_GetSysClockFreq+0xac>
 8007180:	e005      	b.n	800718e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007182:	4b1a      	ldr	r3, [pc, #104]	; (80071ec <HAL_RCC_GetSysClockFreq+0x110>)
 8007184:	617b      	str	r3, [r7, #20]
      break;
 8007186:	e005      	b.n	8007194 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007188:	4b19      	ldr	r3, [pc, #100]	; (80071f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800718a:	617b      	str	r3, [r7, #20]
      break;
 800718c:	e002      	b.n	8007194 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	617b      	str	r3, [r7, #20]
      break;
 8007192:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007194:	4b13      	ldr	r3, [pc, #76]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	091b      	lsrs	r3, r3, #4
 800719a:	f003 0307 	and.w	r3, r3, #7
 800719e:	3301      	adds	r3, #1
 80071a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80071a2:	4b10      	ldr	r3, [pc, #64]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	0a1b      	lsrs	r3, r3, #8
 80071a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	fb03 f202 	mul.w	r2, r3, r2
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80071ba:	4b0a      	ldr	r3, [pc, #40]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	0e5b      	lsrs	r3, r3, #25
 80071c0:	f003 0303 	and.w	r3, r3, #3
 80071c4:	3301      	adds	r3, #1
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80071d4:	69bb      	ldr	r3, [r7, #24]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3724      	adds	r7, #36	; 0x24
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	40021000 	.word	0x40021000
 80071e8:	08010588 	.word	0x08010588
 80071ec:	00f42400 	.word	0x00f42400
 80071f0:	007a1200 	.word	0x007a1200

080071f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071f8:	4b03      	ldr	r3, [pc, #12]	; (8007208 <HAL_RCC_GetHCLKFreq+0x14>)
 80071fa:	681b      	ldr	r3, [r3, #0]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	20000010 	.word	0x20000010

0800720c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007210:	f7ff fff0 	bl	80071f4 <HAL_RCC_GetHCLKFreq>
 8007214:	4602      	mov	r2, r0
 8007216:	4b06      	ldr	r3, [pc, #24]	; (8007230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	0a1b      	lsrs	r3, r3, #8
 800721c:	f003 0307 	and.w	r3, r3, #7
 8007220:	4904      	ldr	r1, [pc, #16]	; (8007234 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007222:	5ccb      	ldrb	r3, [r1, r3]
 8007224:	f003 031f 	and.w	r3, r3, #31
 8007228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800722c:	4618      	mov	r0, r3
 800722e:	bd80      	pop	{r7, pc}
 8007230:	40021000 	.word	0x40021000
 8007234:	08010580 	.word	0x08010580

08007238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800723c:	f7ff ffda 	bl	80071f4 <HAL_RCC_GetHCLKFreq>
 8007240:	4602      	mov	r2, r0
 8007242:	4b06      	ldr	r3, [pc, #24]	; (800725c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	0adb      	lsrs	r3, r3, #11
 8007248:	f003 0307 	and.w	r3, r3, #7
 800724c:	4904      	ldr	r1, [pc, #16]	; (8007260 <HAL_RCC_GetPCLK2Freq+0x28>)
 800724e:	5ccb      	ldrb	r3, [r1, r3]
 8007250:	f003 031f 	and.w	r3, r3, #31
 8007254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007258:	4618      	mov	r0, r3
 800725a:	bd80      	pop	{r7, pc}
 800725c:	40021000 	.word	0x40021000
 8007260:	08010580 	.word	0x08010580

08007264 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800726c:	2300      	movs	r3, #0
 800726e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007270:	4b2a      	ldr	r3, [pc, #168]	; (800731c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800727c:	f7ff f9b6 	bl	80065ec <HAL_PWREx_GetVoltageRange>
 8007280:	6178      	str	r0, [r7, #20]
 8007282:	e014      	b.n	80072ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007284:	4b25      	ldr	r3, [pc, #148]	; (800731c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007288:	4a24      	ldr	r2, [pc, #144]	; (800731c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800728a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800728e:	6593      	str	r3, [r2, #88]	; 0x58
 8007290:	4b22      	ldr	r3, [pc, #136]	; (800731c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007298:	60fb      	str	r3, [r7, #12]
 800729a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800729c:	f7ff f9a6 	bl	80065ec <HAL_PWREx_GetVoltageRange>
 80072a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80072a2:	4b1e      	ldr	r3, [pc, #120]	; (800731c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80072a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a6:	4a1d      	ldr	r2, [pc, #116]	; (800731c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80072a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072b4:	d10b      	bne.n	80072ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b80      	cmp	r3, #128	; 0x80
 80072ba:	d919      	bls.n	80072f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2ba0      	cmp	r3, #160	; 0xa0
 80072c0:	d902      	bls.n	80072c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80072c2:	2302      	movs	r3, #2
 80072c4:	613b      	str	r3, [r7, #16]
 80072c6:	e013      	b.n	80072f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80072c8:	2301      	movs	r3, #1
 80072ca:	613b      	str	r3, [r7, #16]
 80072cc:	e010      	b.n	80072f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b80      	cmp	r3, #128	; 0x80
 80072d2:	d902      	bls.n	80072da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80072d4:	2303      	movs	r3, #3
 80072d6:	613b      	str	r3, [r7, #16]
 80072d8:	e00a      	b.n	80072f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b80      	cmp	r3, #128	; 0x80
 80072de:	d102      	bne.n	80072e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80072e0:	2302      	movs	r3, #2
 80072e2:	613b      	str	r3, [r7, #16]
 80072e4:	e004      	b.n	80072f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b70      	cmp	r3, #112	; 0x70
 80072ea:	d101      	bne.n	80072f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80072ec:	2301      	movs	r3, #1
 80072ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80072f0:	4b0b      	ldr	r3, [pc, #44]	; (8007320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f023 0207 	bic.w	r2, r3, #7
 80072f8:	4909      	ldr	r1, [pc, #36]	; (8007320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007300:	4b07      	ldr	r3, [pc, #28]	; (8007320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	429a      	cmp	r2, r3
 800730c:	d001      	beq.n	8007312 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e000      	b.n	8007314 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3718      	adds	r7, #24
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	40021000 	.word	0x40021000
 8007320:	40022000 	.word	0x40022000

08007324 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800732c:	2300      	movs	r3, #0
 800732e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007330:	2300      	movs	r3, #0
 8007332:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800733c:	2b00      	cmp	r3, #0
 800733e:	d031      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007344:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007348:	d01a      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800734a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800734e:	d814      	bhi.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007350:	2b00      	cmp	r3, #0
 8007352:	d009      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007354:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007358:	d10f      	bne.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800735a:	4b5d      	ldr	r3, [pc, #372]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	4a5c      	ldr	r2, [pc, #368]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007364:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007366:	e00c      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	3304      	adds	r3, #4
 800736c:	2100      	movs	r1, #0
 800736e:	4618      	mov	r0, r3
 8007370:	f000 f9de 	bl	8007730 <RCCEx_PLLSAI1_Config>
 8007374:	4603      	mov	r3, r0
 8007376:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007378:	e003      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	74fb      	strb	r3, [r7, #19]
      break;
 800737e:	e000      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007380:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007382:	7cfb      	ldrb	r3, [r7, #19]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10b      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007388:	4b51      	ldr	r3, [pc, #324]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800738a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800738e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007396:	494e      	ldr	r1, [pc, #312]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007398:	4313      	orrs	r3, r2
 800739a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800739e:	e001      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a0:	7cfb      	ldrb	r3, [r7, #19]
 80073a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 809e 	beq.w	80074ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073b2:	2300      	movs	r3, #0
 80073b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80073b6:	4b46      	ldr	r3, [pc, #280]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80073c2:	2301      	movs	r3, #1
 80073c4:	e000      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80073c6:	2300      	movs	r3, #0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00d      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073cc:	4b40      	ldr	r3, [pc, #256]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d0:	4a3f      	ldr	r2, [pc, #252]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073d6:	6593      	str	r3, [r2, #88]	; 0x58
 80073d8:	4b3d      	ldr	r3, [pc, #244]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073e0:	60bb      	str	r3, [r7, #8]
 80073e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073e4:	2301      	movs	r3, #1
 80073e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073e8:	4b3a      	ldr	r3, [pc, #232]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a39      	ldr	r2, [pc, #228]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80073ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073f4:	f7fc fa26 	bl	8003844 <HAL_GetTick>
 80073f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80073fa:	e009      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073fc:	f7fc fa22 	bl	8003844 <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	2b02      	cmp	r3, #2
 8007408:	d902      	bls.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	74fb      	strb	r3, [r7, #19]
        break;
 800740e:	e005      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007410:	4b30      	ldr	r3, [pc, #192]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007418:	2b00      	cmp	r3, #0
 800741a:	d0ef      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800741c:	7cfb      	ldrb	r3, [r7, #19]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d15a      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007422:	4b2b      	ldr	r3, [pc, #172]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007428:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800742c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d01e      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	429a      	cmp	r2, r3
 800743c:	d019      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800743e:	4b24      	ldr	r3, [pc, #144]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007448:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800744a:	4b21      	ldr	r3, [pc, #132]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800744c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007450:	4a1f      	ldr	r2, [pc, #124]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800745a:	4b1d      	ldr	r3, [pc, #116]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800745c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007460:	4a1b      	ldr	r2, [pc, #108]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800746a:	4a19      	ldr	r2, [pc, #100]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	d016      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800747c:	f7fc f9e2 	bl	8003844 <HAL_GetTick>
 8007480:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007482:	e00b      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007484:	f7fc f9de 	bl	8003844 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007492:	4293      	cmp	r3, r2
 8007494:	d902      	bls.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	74fb      	strb	r3, [r7, #19]
            break;
 800749a:	e006      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800749c:	4b0c      	ldr	r3, [pc, #48]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800749e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a2:	f003 0302 	and.w	r3, r3, #2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d0ec      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80074aa:	7cfb      	ldrb	r3, [r7, #19]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10b      	bne.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074b0:	4b07      	ldr	r3, [pc, #28]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80074b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074be:	4904      	ldr	r1, [pc, #16]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80074c6:	e009      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80074c8:	7cfb      	ldrb	r3, [r7, #19]
 80074ca:	74bb      	strb	r3, [r7, #18]
 80074cc:	e006      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80074ce:	bf00      	nop
 80074d0:	40021000 	.word	0x40021000
 80074d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d8:	7cfb      	ldrb	r3, [r7, #19]
 80074da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074dc:	7c7b      	ldrb	r3, [r7, #17]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d105      	bne.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074e2:	4b8a      	ldr	r3, [pc, #552]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e6:	4a89      	ldr	r2, [pc, #548]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80074fa:	4b84      	ldr	r3, [pc, #528]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007500:	f023 0203 	bic.w	r2, r3, #3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a1b      	ldr	r3, [r3, #32]
 8007508:	4980      	ldr	r1, [pc, #512]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800750a:	4313      	orrs	r3, r2
 800750c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0302 	and.w	r3, r3, #2
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00a      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800751c:	4b7b      	ldr	r3, [pc, #492]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800751e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007522:	f023 020c 	bic.w	r2, r3, #12
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	4978      	ldr	r1, [pc, #480]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800752c:	4313      	orrs	r3, r2
 800752e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0320 	and.w	r3, r3, #32
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800753e:	4b73      	ldr	r3, [pc, #460]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007544:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754c:	496f      	ldr	r1, [pc, #444]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800754e:	4313      	orrs	r3, r2
 8007550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00a      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007560:	4b6a      	ldr	r3, [pc, #424]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007566:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756e:	4967      	ldr	r1, [pc, #412]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007570:	4313      	orrs	r3, r2
 8007572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00a      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007582:	4b62      	ldr	r3, [pc, #392]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007588:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007590:	495e      	ldr	r1, [pc, #376]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007592:	4313      	orrs	r3, r2
 8007594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00a      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075a4:	4b59      	ldr	r3, [pc, #356]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80075a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b2:	4956      	ldr	r1, [pc, #344]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075c6:	4b51      	ldr	r3, [pc, #324]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80075c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d4:	494d      	ldr	r1, [pc, #308]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d028      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075e8:	4b48      	ldr	r3, [pc, #288]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80075ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	4945      	ldr	r1, [pc, #276]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007606:	d106      	bne.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007608:	4b40      	ldr	r3, [pc, #256]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	4a3f      	ldr	r2, [pc, #252]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800760e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007612:	60d3      	str	r3, [r2, #12]
 8007614:	e011      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800761e:	d10c      	bne.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	3304      	adds	r3, #4
 8007624:	2101      	movs	r1, #1
 8007626:	4618      	mov	r0, r3
 8007628:	f000 f882 	bl	8007730 <RCCEx_PLLSAI1_Config>
 800762c:	4603      	mov	r3, r0
 800762e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007630:	7cfb      	ldrb	r3, [r7, #19]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8007636:	7cfb      	ldrb	r3, [r7, #19]
 8007638:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d028      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007646:	4b31      	ldr	r3, [pc, #196]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800764c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007654:	492d      	ldr	r1, [pc, #180]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007656:	4313      	orrs	r3, r2
 8007658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007664:	d106      	bne.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007666:	4b29      	ldr	r3, [pc, #164]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	4a28      	ldr	r2, [pc, #160]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800766c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007670:	60d3      	str	r3, [r2, #12]
 8007672:	e011      	b.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800767c:	d10c      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	3304      	adds	r3, #4
 8007682:	2101      	movs	r1, #1
 8007684:	4618      	mov	r0, r3
 8007686:	f000 f853 	bl	8007730 <RCCEx_PLLSAI1_Config>
 800768a:	4603      	mov	r3, r0
 800768c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800768e:	7cfb      	ldrb	r3, [r7, #19]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8007694:	7cfb      	ldrb	r3, [r7, #19]
 8007696:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d01c      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076a4:	4b19      	ldr	r3, [pc, #100]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80076a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076b2:	4916      	ldr	r1, [pc, #88]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076c2:	d10c      	bne.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	3304      	adds	r3, #4
 80076c8:	2102      	movs	r1, #2
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 f830 	bl	8007730 <RCCEx_PLLSAI1_Config>
 80076d0:	4603      	mov	r3, r0
 80076d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80076d4:	7cfb      	ldrb	r3, [r7, #19]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80076da:	7cfb      	ldrb	r3, [r7, #19]
 80076dc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00a      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80076ea:	4b08      	ldr	r3, [pc, #32]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80076ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f8:	4904      	ldr	r1, [pc, #16]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007700:	7cbb      	ldrb	r3, [r7, #18]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	40021000 	.word	0x40021000

08007710 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007710:	b480      	push	{r7}
 8007712:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007714:	4b05      	ldr	r3, [pc, #20]	; (800772c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a04      	ldr	r2, [pc, #16]	; (800772c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800771a:	f043 0304 	orr.w	r3, r3, #4
 800771e:	6013      	str	r3, [r2, #0]
}
 8007720:	bf00      	nop
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	40021000 	.word	0x40021000

08007730 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800773e:	4b74      	ldr	r3, [pc, #464]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d018      	beq.n	800777c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800774a:	4b71      	ldr	r3, [pc, #452]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	f003 0203 	and.w	r2, r3, #3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	429a      	cmp	r2, r3
 8007758:	d10d      	bne.n	8007776 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
       ||
 800775e:	2b00      	cmp	r3, #0
 8007760:	d009      	beq.n	8007776 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007762:	4b6b      	ldr	r3, [pc, #428]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	091b      	lsrs	r3, r3, #4
 8007768:	f003 0307 	and.w	r3, r3, #7
 800776c:	1c5a      	adds	r2, r3, #1
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
       ||
 8007772:	429a      	cmp	r2, r3
 8007774:	d047      	beq.n	8007806 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	73fb      	strb	r3, [r7, #15]
 800777a:	e044      	b.n	8007806 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b03      	cmp	r3, #3
 8007782:	d018      	beq.n	80077b6 <RCCEx_PLLSAI1_Config+0x86>
 8007784:	2b03      	cmp	r3, #3
 8007786:	d825      	bhi.n	80077d4 <RCCEx_PLLSAI1_Config+0xa4>
 8007788:	2b01      	cmp	r3, #1
 800778a:	d002      	beq.n	8007792 <RCCEx_PLLSAI1_Config+0x62>
 800778c:	2b02      	cmp	r3, #2
 800778e:	d009      	beq.n	80077a4 <RCCEx_PLLSAI1_Config+0x74>
 8007790:	e020      	b.n	80077d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007792:	4b5f      	ldr	r3, [pc, #380]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 0302 	and.w	r3, r3, #2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d11d      	bne.n	80077da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077a2:	e01a      	b.n	80077da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80077a4:	4b5a      	ldr	r3, [pc, #360]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d116      	bne.n	80077de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077b4:	e013      	b.n	80077de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80077b6:	4b56      	ldr	r3, [pc, #344]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10f      	bne.n	80077e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80077c2:	4b53      	ldr	r3, [pc, #332]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d109      	bne.n	80077e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80077d2:	e006      	b.n	80077e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	73fb      	strb	r3, [r7, #15]
      break;
 80077d8:	e004      	b.n	80077e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80077da:	bf00      	nop
 80077dc:	e002      	b.n	80077e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80077de:	bf00      	nop
 80077e0:	e000      	b.n	80077e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80077e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10d      	bne.n	8007806 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80077ea:	4b49      	ldr	r3, [pc, #292]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6819      	ldr	r1, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	011b      	lsls	r3, r3, #4
 80077fe:	430b      	orrs	r3, r1
 8007800:	4943      	ldr	r1, [pc, #268]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007802:	4313      	orrs	r3, r2
 8007804:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007806:	7bfb      	ldrb	r3, [r7, #15]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d17c      	bne.n	8007906 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800780c:	4b40      	ldr	r3, [pc, #256]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a3f      	ldr	r2, [pc, #252]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007812:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007816:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007818:	f7fc f814 	bl	8003844 <HAL_GetTick>
 800781c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800781e:	e009      	b.n	8007834 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007820:	f7fc f810 	bl	8003844 <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	2b02      	cmp	r3, #2
 800782c:	d902      	bls.n	8007834 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	73fb      	strb	r3, [r7, #15]
        break;
 8007832:	e005      	b.n	8007840 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007834:	4b36      	ldr	r3, [pc, #216]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1ef      	bne.n	8007820 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007840:	7bfb      	ldrb	r3, [r7, #15]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d15f      	bne.n	8007906 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d110      	bne.n	800786e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800784c:	4b30      	ldr	r3, [pc, #192]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007854:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	6892      	ldr	r2, [r2, #8]
 800785c:	0211      	lsls	r1, r2, #8
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	68d2      	ldr	r2, [r2, #12]
 8007862:	06d2      	lsls	r2, r2, #27
 8007864:	430a      	orrs	r2, r1
 8007866:	492a      	ldr	r1, [pc, #168]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007868:	4313      	orrs	r3, r2
 800786a:	610b      	str	r3, [r1, #16]
 800786c:	e027      	b.n	80078be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d112      	bne.n	800789a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007874:	4b26      	ldr	r3, [pc, #152]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800787c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	6892      	ldr	r2, [r2, #8]
 8007884:	0211      	lsls	r1, r2, #8
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	6912      	ldr	r2, [r2, #16]
 800788a:	0852      	lsrs	r2, r2, #1
 800788c:	3a01      	subs	r2, #1
 800788e:	0552      	lsls	r2, r2, #21
 8007890:	430a      	orrs	r2, r1
 8007892:	491f      	ldr	r1, [pc, #124]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007894:	4313      	orrs	r3, r2
 8007896:	610b      	str	r3, [r1, #16]
 8007898:	e011      	b.n	80078be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800789a:	4b1d      	ldr	r3, [pc, #116]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80078a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	6892      	ldr	r2, [r2, #8]
 80078aa:	0211      	lsls	r1, r2, #8
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	6952      	ldr	r2, [r2, #20]
 80078b0:	0852      	lsrs	r2, r2, #1
 80078b2:	3a01      	subs	r2, #1
 80078b4:	0652      	lsls	r2, r2, #25
 80078b6:	430a      	orrs	r2, r1
 80078b8:	4915      	ldr	r1, [pc, #84]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80078be:	4b14      	ldr	r3, [pc, #80]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a13      	ldr	r2, [pc, #76]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ca:	f7fb ffbb 	bl	8003844 <HAL_GetTick>
 80078ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80078d0:	e009      	b.n	80078e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078d2:	f7fb ffb7 	bl	8003844 <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d902      	bls.n	80078e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	73fb      	strb	r3, [r7, #15]
          break;
 80078e4:	e005      	b.n	80078f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80078e6:	4b0a      	ldr	r3, [pc, #40]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d0ef      	beq.n	80078d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d106      	bne.n	8007906 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80078f8:	4b05      	ldr	r3, [pc, #20]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80078fa:	691a      	ldr	r2, [r3, #16]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	4903      	ldr	r1, [pc, #12]	; (8007910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007902:	4313      	orrs	r3, r2
 8007904:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007906:	7bfb      	ldrb	r3, [r7, #15]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	40021000 	.word	0x40021000

08007914 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d06c      	beq.n	8007a00 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b00      	cmp	r3, #0
 8007930:	d106      	bne.n	8007940 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7fb fc96 	bl	800326c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2202      	movs	r2, #2
 8007944:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	22ca      	movs	r2, #202	; 0xca
 800794e:	625a      	str	r2, [r3, #36]	; 0x24
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2253      	movs	r2, #83	; 0x53
 8007956:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fbcb 	bl	80080f4 <RTC_EnterInitMode>
 800795e:	4603      	mov	r3, r0
 8007960:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007962:	7bfb      	ldrb	r3, [r7, #15]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d14b      	bne.n	8007a00 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	6812      	ldr	r2, [r2, #0]
 8007972:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800797a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6899      	ldr	r1, [r3, #8]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	431a      	orrs	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	430a      	orrs	r2, r1
 8007998:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	68d2      	ldr	r2, [r2, #12]
 80079a2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6919      	ldr	r1, [r3, #16]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	041a      	lsls	r2, r3, #16
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	430a      	orrs	r2, r1
 80079b6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 fbcf 	bl	800815c <RTC_ExitInitMode>
 80079be:	4603      	mov	r3, r0
 80079c0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d11b      	bne.n	8007a00 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f022 0203 	bic.w	r2, r2, #3
 80079d6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	69da      	ldr	r2, [r3, #28]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	431a      	orrs	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	430a      	orrs	r2, r1
 80079ee:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	22ff      	movs	r2, #255	; 0xff
 80079f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007a0a:	b590      	push	{r4, r7, lr}
 8007a0c:	b087      	sub	sp, #28
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	60f8      	str	r0, [r7, #12]
 8007a12:	60b9      	str	r1, [r7, #8]
 8007a14:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d101      	bne.n	8007a24 <HAL_RTC_SetTime+0x1a>
 8007a20:	2302      	movs	r3, #2
 8007a22:	e08b      	b.n	8007b3c <HAL_RTC_SetTime+0x132>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	22ca      	movs	r2, #202	; 0xca
 8007a3a:	625a      	str	r2, [r3, #36]	; 0x24
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2253      	movs	r2, #83	; 0x53
 8007a42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 fb55 	bl	80080f4 <RTC_EnterInitMode>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007a4e:	7cfb      	ldrb	r3, [r7, #19]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d163      	bne.n	8007b1c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d126      	bne.n	8007aa8 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d102      	bne.n	8007a6e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f000 fbb0 	bl	80081d8 <RTC_ByteToBcd2>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	785b      	ldrb	r3, [r3, #1]
 8007a80:	4618      	mov	r0, r3
 8007a82:	f000 fba9 	bl	80081d8 <RTC_ByteToBcd2>
 8007a86:	4603      	mov	r3, r0
 8007a88:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007a8a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	789b      	ldrb	r3, [r3, #2]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 fba1 	bl	80081d8 <RTC_ByteToBcd2>
 8007a96:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007a98:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	78db      	ldrb	r3, [r3, #3]
 8007aa0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	617b      	str	r3, [r7, #20]
 8007aa6:	e018      	b.n	8007ada <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d102      	bne.n	8007abc <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	785b      	ldrb	r3, [r3, #1]
 8007ac6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007ac8:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007ace:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	78db      	ldrb	r3, [r3, #3]
 8007ad4:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007ae4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007ae8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	689a      	ldr	r2, [r3, #8]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007af8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6899      	ldr	r1, [r3, #8]
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	68da      	ldr	r2, [r3, #12]
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 fb22 	bl	800815c <RTC_ExitInitMode>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	22ff      	movs	r2, #255	; 0xff
 8007b22:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007b24:	7cfb      	ldrb	r3, [r7, #19]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d103      	bne.n	8007b32 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007b3a:	7cfb      	ldrb	r3, [r7, #19]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	371c      	adds	r7, #28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd90      	pop	{r4, r7, pc}

08007b44 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007b72:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007b76:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	0c1b      	lsrs	r3, r3, #16
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	0a1b      	lsrs	r3, r3, #8
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b92:	b2da      	uxtb	r2, r3
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	0d9b      	lsrs	r3, r3, #22
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	f003 0301 	and.w	r3, r3, #1
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d11a      	bne.n	8007bf2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 fb29 	bl	8008218 <RTC_Bcd2ToByte>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	461a      	mov	r2, r3
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	785b      	ldrb	r3, [r3, #1]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 fb20 	bl	8008218 <RTC_Bcd2ToByte>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	461a      	mov	r2, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	789b      	ldrb	r3, [r3, #2]
 8007be4:	4618      	mov	r0, r3
 8007be6:	f000 fb17 	bl	8008218 <RTC_Bcd2ToByte>
 8007bea:	4603      	mov	r3, r0
 8007bec:	461a      	mov	r2, r3
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3718      	adds	r7, #24
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007bfc:	b590      	push	{r4, r7, lr}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d101      	bne.n	8007c16 <HAL_RTC_SetDate+0x1a>
 8007c12:	2302      	movs	r3, #2
 8007c14:	e075      	b.n	8007d02 <HAL_RTC_SetDate+0x106>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2202      	movs	r2, #2
 8007c22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10e      	bne.n	8007c4a <HAL_RTC_SetDate+0x4e>
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	785b      	ldrb	r3, [r3, #1]
 8007c30:	f003 0310 	and.w	r3, r3, #16
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d008      	beq.n	8007c4a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	785b      	ldrb	r3, [r3, #1]
 8007c3c:	f023 0310 	bic.w	r3, r3, #16
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	330a      	adds	r3, #10
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d11c      	bne.n	8007c8a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	78db      	ldrb	r3, [r3, #3]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f000 fabf 	bl	80081d8 <RTC_ByteToBcd2>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	785b      	ldrb	r3, [r3, #1]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 fab8 	bl	80081d8 <RTC_ByteToBcd2>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007c6c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	789b      	ldrb	r3, [r3, #2]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 fab0 	bl	80081d8 <RTC_ByteToBcd2>
 8007c78:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007c7a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007c84:	4313      	orrs	r3, r2
 8007c86:	617b      	str	r3, [r7, #20]
 8007c88:	e00e      	b.n	8007ca8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	78db      	ldrb	r3, [r3, #3]
 8007c8e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	785b      	ldrb	r3, [r3, #1]
 8007c94:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007c96:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007c9c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	22ca      	movs	r2, #202	; 0xca
 8007cae:	625a      	str	r2, [r3, #36]	; 0x24
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2253      	movs	r2, #83	; 0x53
 8007cb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f000 fa1b 	bl	80080f4 <RTC_EnterInitMode>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007cc2:	7cfb      	ldrb	r3, [r7, #19]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10c      	bne.n	8007ce2 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007cd2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007cd6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 fa3f 	bl	800815c <RTC_ExitInitMode>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	22ff      	movs	r2, #255	; 0xff
 8007ce8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007cea:	7cfb      	ldrb	r3, [r7, #19]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d103      	bne.n	8007cf8 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007d00:	7cfb      	ldrb	r3, [r7, #19]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	371c      	adds	r7, #28
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd90      	pop	{r4, r7, pc}

08007d0a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b086      	sub	sp, #24
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	60f8      	str	r0, [r7, #12]
 8007d12:	60b9      	str	r1, [r7, #8]
 8007d14:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007d20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d24:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	0c1b      	lsrs	r3, r3, #16
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	0a1b      	lsrs	r3, r3, #8
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	f003 031f 	and.w	r3, r3, #31
 8007d3a:	b2da      	uxtb	r2, r3
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	0b5b      	lsrs	r3, r3, #13
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	f003 0307 	and.w	r3, r3, #7
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d11a      	bne.n	8007d9a <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	78db      	ldrb	r3, [r3, #3]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 fa55 	bl	8008218 <RTC_Bcd2ToByte>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	461a      	mov	r2, r3
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	785b      	ldrb	r3, [r3, #1]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 fa4c 	bl	8008218 <RTC_Bcd2ToByte>
 8007d80:	4603      	mov	r3, r0
 8007d82:	461a      	mov	r2, r3
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	789b      	ldrb	r3, [r3, #2]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 fa43 	bl	8008218 <RTC_Bcd2ToByte>
 8007d92:	4603      	mov	r3, r0
 8007d94:	461a      	mov	r2, r3
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3718      	adds	r7, #24
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007da4:	b590      	push	{r4, r7, lr}
 8007da6:	b089      	sub	sp, #36	; 0x24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d101      	bne.n	8007dbe <HAL_RTC_SetAlarm_IT+0x1a>
 8007dba:	2302      	movs	r3, #2
 8007dbc:	e127      	b.n	800800e <HAL_RTC_SetAlarm_IT+0x26a>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d137      	bne.n	8007e44 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d102      	bne.n	8007de8 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2200      	movs	r2, #0
 8007de6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f000 f9f3 	bl	80081d8 <RTC_ByteToBcd2>
 8007df2:	4603      	mov	r3, r0
 8007df4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	785b      	ldrb	r3, [r3, #1]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f000 f9ec 	bl	80081d8 <RTC_ByteToBcd2>
 8007e00:	4603      	mov	r3, r0
 8007e02:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007e04:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	789b      	ldrb	r3, [r3, #2]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 f9e4 	bl	80081d8 <RTC_ByteToBcd2>
 8007e10:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007e12:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	78db      	ldrb	r3, [r3, #3]
 8007e1a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007e1c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 f9d6 	bl	80081d8 <RTC_ByteToBcd2>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007e30:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007e38:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	61fb      	str	r3, [r7, #28]
 8007e42:	e023      	b.n	8007e8c <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d102      	bne.n	8007e58 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	2200      	movs	r2, #0
 8007e56:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	785b      	ldrb	r3, [r3, #1]
 8007e62:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007e64:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007e6a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	78db      	ldrb	r3, [r3, #3]
 8007e70:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007e72:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e7a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007e7c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007e82:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	69db      	ldr	r3, [r3, #28]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	22ca      	movs	r2, #202	; 0xca
 8007e9e:	625a      	str	r2, [r3, #36]	; 0x24
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2253      	movs	r2, #83	; 0x53
 8007ea6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eb0:	d14a      	bne.n	8007f48 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	689a      	ldr	r2, [r3, #8]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ec0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007ed2:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8007ed4:	f7fb fcb6 	bl	8003844 <HAL_GetTick>
 8007ed8:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007eda:	e015      	b.n	8007f08 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007edc:	f7fb fcb2 	bl	8003844 <HAL_GetTick>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007eea:	d90d      	bls.n	8007f08 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	22ff      	movs	r2, #255	; 0xff
 8007ef2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2203      	movs	r2, #3
 8007ef8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007f04:	2303      	movs	r3, #3
 8007f06:	e082      	b.n	800800e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d0e2      	beq.n	8007edc <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	69fa      	ldr	r2, [r7, #28]
 8007f1c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	689a      	ldr	r2, [r3, #8]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f34:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	689a      	ldr	r2, [r3, #8]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f44:	609a      	str	r2, [r3, #8]
 8007f46:	e049      	b.n	8007fdc <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	689a      	ldr	r2, [r3, #8]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007f56:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	b2da      	uxtb	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007f68:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8007f6a:	f7fb fc6b 	bl	8003844 <HAL_GetTick>
 8007f6e:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007f70:	e015      	b.n	8007f9e <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f72:	f7fb fc67 	bl	8003844 <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f80:	d90d      	bls.n	8007f9e <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	22ff      	movs	r2, #255	; 0xff
 8007f88:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2203      	movs	r2, #3
 8007f8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e037      	b.n	800800e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	f003 0302 	and.w	r3, r3, #2
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d0e2      	beq.n	8007f72 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	69fa      	ldr	r2, [r7, #28]
 8007fb2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	69ba      	ldr	r2, [r7, #24]
 8007fba:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689a      	ldr	r2, [r3, #8]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fca:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	689a      	ldr	r2, [r3, #8]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fda:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007fdc:	4b0e      	ldr	r3, [pc, #56]	; (8008018 <HAL_RTC_SetAlarm_IT+0x274>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a0d      	ldr	r2, [pc, #52]	; (8008018 <HAL_RTC_SetAlarm_IT+0x274>)
 8007fe2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fe6:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007fe8:	4b0b      	ldr	r3, [pc, #44]	; (8008018 <HAL_RTC_SetAlarm_IT+0x274>)
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	4a0a      	ldr	r2, [pc, #40]	; (8008018 <HAL_RTC_SetAlarm_IT+0x274>)
 8007fee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ff2:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	22ff      	movs	r2, #255	; 0xff
 8007ffa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3724      	adds	r7, #36	; 0x24
 8008012:	46bd      	mov	sp, r7
 8008014:	bd90      	pop	{r4, r7, pc}
 8008016:	bf00      	nop
 8008018:	40010400 	.word	0x40010400

0800801c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008024:	4b1f      	ldr	r3, [pc, #124]	; (80080a4 <HAL_RTC_AlarmIRQHandler+0x88>)
 8008026:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800802a:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d012      	beq.n	8008060 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00b      	beq.n	8008060 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	b2da      	uxtb	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008058:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7f9 f870 	bl	8001140 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d012      	beq.n	8008094 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00b      	beq.n	8008094 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	b2da      	uxtb	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f462 7220 	orn	r2, r2, #640	; 0x280
 800808c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7f9 f8c4 	bl	800121c <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800809c:	bf00      	nop
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	40010400 	.word	0x40010400

080080a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68da      	ldr	r2, [r3, #12]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80080be:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80080c0:	f7fb fbc0 	bl	8003844 <HAL_GetTick>
 80080c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80080c6:	e009      	b.n	80080dc <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80080c8:	f7fb fbbc 	bl	8003844 <HAL_GetTick>
 80080cc:	4602      	mov	r2, r0
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080d6:	d901      	bls.n	80080dc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	e007      	b.n	80080ec <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f003 0320 	and.w	r3, r3, #32
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d0ee      	beq.n	80080c8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800810a:	2b00      	cmp	r3, #0
 800810c:	d120      	bne.n	8008150 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f04f 32ff 	mov.w	r2, #4294967295
 8008116:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008118:	f7fb fb94 	bl	8003844 <HAL_GetTick>
 800811c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800811e:	e00d      	b.n	800813c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008120:	f7fb fb90 	bl	8003844 <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800812e:	d905      	bls.n	800813c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2203      	movs	r2, #3
 8008138:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008146:	2b00      	cmp	r3, #0
 8008148:	d102      	bne.n	8008150 <RTC_EnterInitMode+0x5c>
 800814a:	7bfb      	ldrb	r3, [r7, #15]
 800814c:	2b03      	cmp	r3, #3
 800814e:	d1e7      	bne.n	8008120 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008150:	7bfb      	ldrb	r3, [r7, #15]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
	...

0800815c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008164:	2300      	movs	r3, #0
 8008166:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008168:	4b1a      	ldr	r3, [pc, #104]	; (80081d4 <RTC_ExitInitMode+0x78>)
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	4a19      	ldr	r2, [pc, #100]	; (80081d4 <RTC_ExitInitMode+0x78>)
 800816e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008172:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008174:	4b17      	ldr	r3, [pc, #92]	; (80081d4 <RTC_ExitInitMode+0x78>)
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f003 0320 	and.w	r3, r3, #32
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10c      	bne.n	800819a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f7ff ff91 	bl	80080a8 <HAL_RTC_WaitForSynchro>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d01e      	beq.n	80081ca <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2203      	movs	r2, #3
 8008190:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008194:	2303      	movs	r3, #3
 8008196:	73fb      	strb	r3, [r7, #15]
 8008198:	e017      	b.n	80081ca <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800819a:	4b0e      	ldr	r3, [pc, #56]	; (80081d4 <RTC_ExitInitMode+0x78>)
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	4a0d      	ldr	r2, [pc, #52]	; (80081d4 <RTC_ExitInitMode+0x78>)
 80081a0:	f023 0320 	bic.w	r3, r3, #32
 80081a4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7ff ff7e 	bl	80080a8 <HAL_RTC_WaitForSynchro>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d005      	beq.n	80081be <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2203      	movs	r2, #3
 80081b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80081be:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <RTC_ExitInitMode+0x78>)
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	4a04      	ldr	r2, [pc, #16]	; (80081d4 <RTC_ExitInitMode+0x78>)
 80081c4:	f043 0320 	orr.w	r3, r3, #32
 80081c8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80081ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	40002800 	.word	0x40002800

080081d8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	4603      	mov	r3, r0
 80081e0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80081e6:	79fb      	ldrb	r3, [r7, #7]
 80081e8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80081ea:	e005      	b.n	80081f8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	3301      	adds	r3, #1
 80081f0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80081f2:	7afb      	ldrb	r3, [r7, #11]
 80081f4:	3b0a      	subs	r3, #10
 80081f6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80081f8:	7afb      	ldrb	r3, [r7, #11]
 80081fa:	2b09      	cmp	r3, #9
 80081fc:	d8f6      	bhi.n	80081ec <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	b2db      	uxtb	r3, r3
 8008202:	011b      	lsls	r3, r3, #4
 8008204:	b2da      	uxtb	r2, r3
 8008206:	7afb      	ldrb	r3, [r7, #11]
 8008208:	4313      	orrs	r3, r2
 800820a:	b2db      	uxtb	r3, r3
}
 800820c:	4618      	mov	r0, r3
 800820e:	3714      	adds	r7, #20
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	4603      	mov	r3, r0
 8008220:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8008222:	79fb      	ldrb	r3, [r7, #7]
 8008224:	091b      	lsrs	r3, r3, #4
 8008226:	b2db      	uxtb	r3, r3
 8008228:	461a      	mov	r2, r3
 800822a:	0092      	lsls	r2, r2, #2
 800822c:	4413      	add	r3, r2
 800822e:	005b      	lsls	r3, r3, #1
 8008230:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8008232:	79fb      	ldrb	r3, [r7, #7]
 8008234:	f003 030f 	and.w	r3, r3, #15
 8008238:	b2da      	uxtb	r2, r3
 800823a:	7bfb      	ldrb	r3, [r7, #15]
 800823c:	4413      	add	r3, r2
 800823e:	b2db      	uxtb	r3, r3
}
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8008254:	4b0f      	ldr	r3, [pc, #60]	; (8008294 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8008256:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800825a:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00b      	beq.n	8008282 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	b2da      	uxtb	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800827a:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f80b 	bl	8008298 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800828a:	bf00      	nop
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	40010400 	.word	0x40010400

08008298 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b087      	sub	sp, #28
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	3350      	adds	r3, #80	; 0x50
 80082be:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	009a      	lsls	r2, r3, #2
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	4413      	add	r3, r2
 80082c8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	461a      	mov	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6013      	str	r3, [r2, #0]
}
 80082d2:	bf00      	nop
 80082d4:	371c      	adds	r7, #28
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b084      	sub	sp, #16
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e095      	b.n	800841c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d108      	bne.n	800830a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008300:	d009      	beq.n	8008316 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	61da      	str	r2, [r3, #28]
 8008308:	e005      	b.n	8008316 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b00      	cmp	r3, #0
 8008326:	d106      	bne.n	8008336 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f7fa ffdb 	bl	80032ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2202      	movs	r2, #2
 800833a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800834c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008356:	d902      	bls.n	800835e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008358:	2300      	movs	r3, #0
 800835a:	60fb      	str	r3, [r7, #12]
 800835c:	e002      	b.n	8008364 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800835e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008362:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800836c:	d007      	beq.n	800837e <HAL_SPI_Init+0xa0>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008376:	d002      	beq.n	800837e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800838e:	431a      	orrs	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	f003 0302 	and.w	r3, r3, #2
 8008398:	431a      	orrs	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	f003 0301 	and.w	r3, r3, #1
 80083a2:	431a      	orrs	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083ac:	431a      	orrs	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083b6:	431a      	orrs	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a1b      	ldr	r3, [r3, #32]
 80083bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c0:	ea42 0103 	orr.w	r1, r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	430a      	orrs	r2, r1
 80083d2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	0c1b      	lsrs	r3, r3, #16
 80083da:	f003 0204 	and.w	r2, r3, #4
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e2:	f003 0310 	and.w	r3, r3, #16
 80083e6:	431a      	orrs	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ec:	f003 0308 	and.w	r3, r3, #8
 80083f0:	431a      	orrs	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80083fa:	ea42 0103 	orr.w	r1, r2, r3
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	430a      	orrs	r2, r1
 800840a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b08a      	sub	sp, #40	; 0x28
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
 8008430:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008432:	2301      	movs	r3, #1
 8008434:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008442:	2b01      	cmp	r3, #1
 8008444:	d101      	bne.n	800844a <HAL_SPI_TransmitReceive+0x26>
 8008446:	2302      	movs	r3, #2
 8008448:	e1fb      	b.n	8008842 <HAL_SPI_TransmitReceive+0x41e>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008452:	f7fb f9f7 	bl	8003844 <HAL_GetTick>
 8008456:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800845e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008466:	887b      	ldrh	r3, [r7, #2]
 8008468:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800846a:	887b      	ldrh	r3, [r7, #2]
 800846c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800846e:	7efb      	ldrb	r3, [r7, #27]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d00e      	beq.n	8008492 <HAL_SPI_TransmitReceive+0x6e>
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800847a:	d106      	bne.n	800848a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d102      	bne.n	800848a <HAL_SPI_TransmitReceive+0x66>
 8008484:	7efb      	ldrb	r3, [r7, #27]
 8008486:	2b04      	cmp	r3, #4
 8008488:	d003      	beq.n	8008492 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800848a:	2302      	movs	r3, #2
 800848c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008490:	e1cd      	b.n	800882e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d005      	beq.n	80084a4 <HAL_SPI_TransmitReceive+0x80>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d002      	beq.n	80084a4 <HAL_SPI_TransmitReceive+0x80>
 800849e:	887b      	ldrh	r3, [r7, #2]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d103      	bne.n	80084ac <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80084aa:	e1c0      	b.n	800882e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b04      	cmp	r3, #4
 80084b6:	d003      	beq.n	80084c0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2205      	movs	r2, #5
 80084bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	887a      	ldrh	r2, [r7, #2]
 80084d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	887a      	ldrh	r2, [r7, #2]
 80084d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	887a      	ldrh	r2, [r7, #2]
 80084e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	887a      	ldrh	r2, [r7, #2]
 80084ec:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008502:	d802      	bhi.n	800850a <HAL_SPI_TransmitReceive+0xe6>
 8008504:	8a3b      	ldrh	r3, [r7, #16]
 8008506:	2b01      	cmp	r3, #1
 8008508:	d908      	bls.n	800851c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008518:	605a      	str	r2, [r3, #4]
 800851a:	e007      	b.n	800852c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	685a      	ldr	r2, [r3, #4]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800852a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008536:	2b40      	cmp	r3, #64	; 0x40
 8008538:	d007      	beq.n	800854a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008548:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008552:	d97c      	bls.n	800864e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d002      	beq.n	8008562 <HAL_SPI_TransmitReceive+0x13e>
 800855c:	8a7b      	ldrh	r3, [r7, #18]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d169      	bne.n	8008636 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008566:	881a      	ldrh	r2, [r3, #0]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008572:	1c9a      	adds	r2, r3, #2
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800857c:	b29b      	uxth	r3, r3
 800857e:	3b01      	subs	r3, #1
 8008580:	b29a      	uxth	r2, r3
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008586:	e056      	b.n	8008636 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f003 0302 	and.w	r3, r3, #2
 8008592:	2b02      	cmp	r3, #2
 8008594:	d11b      	bne.n	80085ce <HAL_SPI_TransmitReceive+0x1aa>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800859a:	b29b      	uxth	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	d016      	beq.n	80085ce <HAL_SPI_TransmitReceive+0x1aa>
 80085a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d113      	bne.n	80085ce <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085aa:	881a      	ldrh	r2, [r3, #0]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b6:	1c9a      	adds	r2, r3, #2
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	3b01      	subs	r3, #1
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085ca:	2300      	movs	r3, #0
 80085cc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f003 0301 	and.w	r3, r3, #1
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d11c      	bne.n	8008616 <HAL_SPI_TransmitReceive+0x1f2>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d016      	beq.n	8008616 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68da      	ldr	r2, [r3, #12]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f2:	b292      	uxth	r2, r2
 80085f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fa:	1c9a      	adds	r2, r3, #2
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008606:	b29b      	uxth	r3, r3
 8008608:	3b01      	subs	r3, #1
 800860a:	b29a      	uxth	r2, r3
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008612:	2301      	movs	r3, #1
 8008614:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008616:	f7fb f915 	bl	8003844 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008622:	429a      	cmp	r2, r3
 8008624:	d807      	bhi.n	8008636 <HAL_SPI_TransmitReceive+0x212>
 8008626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800862c:	d003      	beq.n	8008636 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800862e:	2303      	movs	r3, #3
 8008630:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008634:	e0fb      	b.n	800882e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800863a:	b29b      	uxth	r3, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1a3      	bne.n	8008588 <HAL_SPI_TransmitReceive+0x164>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008646:	b29b      	uxth	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d19d      	bne.n	8008588 <HAL_SPI_TransmitReceive+0x164>
 800864c:	e0df      	b.n	800880e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <HAL_SPI_TransmitReceive+0x23a>
 8008656:	8a7b      	ldrh	r3, [r7, #18]
 8008658:	2b01      	cmp	r3, #1
 800865a:	f040 80cb 	bne.w	80087f4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008662:	b29b      	uxth	r3, r3
 8008664:	2b01      	cmp	r3, #1
 8008666:	d912      	bls.n	800868e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800866c:	881a      	ldrh	r2, [r3, #0]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008678:	1c9a      	adds	r2, r3, #2
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008682:	b29b      	uxth	r3, r3
 8008684:	3b02      	subs	r3, #2
 8008686:	b29a      	uxth	r2, r3
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800868c:	e0b2      	b.n	80087f4 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	330c      	adds	r3, #12
 8008698:	7812      	ldrb	r2, [r2, #0]
 800869a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	3b01      	subs	r3, #1
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086b4:	e09e      	b.n	80087f4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f003 0302 	and.w	r3, r3, #2
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d134      	bne.n	800872e <HAL_SPI_TransmitReceive+0x30a>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d02f      	beq.n	800872e <HAL_SPI_TransmitReceive+0x30a>
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d12c      	bne.n	800872e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086d8:	b29b      	uxth	r3, r3
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d912      	bls.n	8008704 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e2:	881a      	ldrh	r2, [r3, #0]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ee:	1c9a      	adds	r2, r3, #2
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	3b02      	subs	r3, #2
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008702:	e012      	b.n	800872a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	330c      	adds	r3, #12
 800870e:	7812      	ldrb	r2, [r2, #0]
 8008710:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008716:	1c5a      	adds	r2, r3, #1
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008720:	b29b      	uxth	r3, r3
 8008722:	3b01      	subs	r3, #1
 8008724:	b29a      	uxth	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800872a:	2300      	movs	r3, #0
 800872c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f003 0301 	and.w	r3, r3, #1
 8008738:	2b01      	cmp	r3, #1
 800873a:	d148      	bne.n	80087ce <HAL_SPI_TransmitReceive+0x3aa>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008742:	b29b      	uxth	r3, r3
 8008744:	2b00      	cmp	r3, #0
 8008746:	d042      	beq.n	80087ce <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800874e:	b29b      	uxth	r3, r3
 8008750:	2b01      	cmp	r3, #1
 8008752:	d923      	bls.n	800879c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68da      	ldr	r2, [r3, #12]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875e:	b292      	uxth	r2, r2
 8008760:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008766:	1c9a      	adds	r2, r3, #2
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008772:	b29b      	uxth	r3, r3
 8008774:	3b02      	subs	r3, #2
 8008776:	b29a      	uxth	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008784:	b29b      	uxth	r3, r3
 8008786:	2b01      	cmp	r3, #1
 8008788:	d81f      	bhi.n	80087ca <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008798:	605a      	str	r2, [r3, #4]
 800879a:	e016      	b.n	80087ca <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f103 020c 	add.w	r2, r3, #12
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a8:	7812      	ldrb	r2, [r2, #0]
 80087aa:	b2d2      	uxtb	r2, r2
 80087ac:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b2:	1c5a      	adds	r2, r3, #1
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087be:	b29b      	uxth	r3, r3
 80087c0:	3b01      	subs	r3, #1
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80087ca:	2301      	movs	r3, #1
 80087cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80087ce:	f7fb f839 	bl	8003844 <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087da:	429a      	cmp	r2, r3
 80087dc:	d803      	bhi.n	80087e6 <HAL_SPI_TransmitReceive+0x3c2>
 80087de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e4:	d102      	bne.n	80087ec <HAL_SPI_TransmitReceive+0x3c8>
 80087e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d103      	bne.n	80087f4 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80087ec:	2303      	movs	r3, #3
 80087ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80087f2:	e01c      	b.n	800882e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f47f af5b 	bne.w	80086b6 <HAL_SPI_TransmitReceive+0x292>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008806:	b29b      	uxth	r3, r3
 8008808:	2b00      	cmp	r3, #0
 800880a:	f47f af54 	bne.w	80086b6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800880e:	69fa      	ldr	r2, [r7, #28]
 8008810:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f000 f938 	bl	8008a88 <SPI_EndRxTxTransaction>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d006      	beq.n	800882c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2220      	movs	r2, #32
 8008828:	661a      	str	r2, [r3, #96]	; 0x60
 800882a:	e000      	b.n	800882e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800882c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800883e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008842:	4618      	mov	r0, r3
 8008844:	3728      	adds	r7, #40	; 0x28
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
	...

0800884c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b088      	sub	sp, #32
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	603b      	str	r3, [r7, #0]
 8008858:	4613      	mov	r3, r2
 800885a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800885c:	f7fa fff2 	bl	8003844 <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008864:	1a9b      	subs	r3, r3, r2
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	4413      	add	r3, r2
 800886a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800886c:	f7fa ffea 	bl	8003844 <HAL_GetTick>
 8008870:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008872:	4b39      	ldr	r3, [pc, #228]	; (8008958 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	015b      	lsls	r3, r3, #5
 8008878:	0d1b      	lsrs	r3, r3, #20
 800887a:	69fa      	ldr	r2, [r7, #28]
 800887c:	fb02 f303 	mul.w	r3, r2, r3
 8008880:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008882:	e054      	b.n	800892e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800888a:	d050      	beq.n	800892e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800888c:	f7fa ffda 	bl	8003844 <HAL_GetTick>
 8008890:	4602      	mov	r2, r0
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	69fa      	ldr	r2, [r7, #28]
 8008898:	429a      	cmp	r2, r3
 800889a:	d902      	bls.n	80088a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d13d      	bne.n	800891e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	685a      	ldr	r2, [r3, #4]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80088b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088ba:	d111      	bne.n	80088e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088c4:	d004      	beq.n	80088d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088ce:	d107      	bne.n	80088e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088e8:	d10f      	bne.n	800890a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80088f8:	601a      	str	r2, [r3, #0]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008908:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e017      	b.n	800894e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008924:	2300      	movs	r3, #0
 8008926:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	3b01      	subs	r3, #1
 800892c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	689a      	ldr	r2, [r3, #8]
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	4013      	ands	r3, r2
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	429a      	cmp	r2, r3
 800893c:	bf0c      	ite	eq
 800893e:	2301      	moveq	r3, #1
 8008940:	2300      	movne	r3, #0
 8008942:	b2db      	uxtb	r3, r3
 8008944:	461a      	mov	r2, r3
 8008946:	79fb      	ldrb	r3, [r7, #7]
 8008948:	429a      	cmp	r2, r3
 800894a:	d19b      	bne.n	8008884 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3720      	adds	r7, #32
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	20000010 	.word	0x20000010

0800895c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b08a      	sub	sp, #40	; 0x28
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
 8008968:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800896a:	2300      	movs	r3, #0
 800896c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800896e:	f7fa ff69 	bl	8003844 <HAL_GetTick>
 8008972:	4602      	mov	r2, r0
 8008974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008976:	1a9b      	subs	r3, r3, r2
 8008978:	683a      	ldr	r2, [r7, #0]
 800897a:	4413      	add	r3, r2
 800897c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800897e:	f7fa ff61 	bl	8003844 <HAL_GetTick>
 8008982:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	330c      	adds	r3, #12
 800898a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800898c:	4b3d      	ldr	r3, [pc, #244]	; (8008a84 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	4613      	mov	r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	00da      	lsls	r2, r3, #3
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	0d1b      	lsrs	r3, r3, #20
 800899c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800899e:	fb02 f303 	mul.w	r3, r2, r3
 80089a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80089a4:	e060      	b.n	8008a68 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80089ac:	d107      	bne.n	80089be <SPI_WaitFifoStateUntilTimeout+0x62>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d104      	bne.n	80089be <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80089bc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c4:	d050      	beq.n	8008a68 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80089c6:	f7fa ff3d 	bl	8003844 <HAL_GetTick>
 80089ca:	4602      	mov	r2, r0
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d902      	bls.n	80089dc <SPI_WaitFifoStateUntilTimeout+0x80>
 80089d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d13d      	bne.n	8008a58 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	685a      	ldr	r2, [r3, #4]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80089ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089f4:	d111      	bne.n	8008a1a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089fe:	d004      	beq.n	8008a0a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a08:	d107      	bne.n	8008a1a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a18:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a22:	d10f      	bne.n	8008a44 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e010      	b.n	8008a7a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	3b01      	subs	r3, #1
 8008a66:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	689a      	ldr	r2, [r3, #8]
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	4013      	ands	r3, r2
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d196      	bne.n	80089a6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3728      	adds	r7, #40	; 0x28
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	20000010 	.word	0x20000010

08008a88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af02      	add	r7, sp, #8
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f7ff ff5b 	bl	800895c <SPI_WaitFifoStateUntilTimeout>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d007      	beq.n	8008abc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ab0:	f043 0220 	orr.w	r2, r3, #32
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e027      	b.n	8008b0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	2180      	movs	r1, #128	; 0x80
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f7ff fec0 	bl	800884c <SPI_WaitFlagStateUntilTimeout>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d007      	beq.n	8008ae2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ad6:	f043 0220 	orr.w	r2, r3, #32
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e014      	b.n	8008b0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f7ff ff34 	bl	800895c <SPI_WaitFifoStateUntilTimeout>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d007      	beq.n	8008b0a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008afe:	f043 0220 	orr.w	r2, r3, #32
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008b06:	2303      	movs	r3, #3
 8008b08:	e000      	b.n	8008b0c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d101      	bne.n	8008b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e049      	b.n	8008bba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d106      	bne.n	8008b40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f7fa fc1a 	bl	8003374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2202      	movs	r2, #2
 8008b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	3304      	adds	r3, #4
 8008b50:	4619      	mov	r1, r3
 8008b52:	4610      	mov	r0, r2
 8008b54:	f000 fa9a 	bl	800908c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
	...

08008bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d001      	beq.n	8008bdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e03b      	b.n	8008c54 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2202      	movs	r2, #2
 8008be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68da      	ldr	r2, [r3, #12]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f042 0201 	orr.w	r2, r2, #1
 8008bf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a19      	ldr	r2, [pc, #100]	; (8008c60 <HAL_TIM_Base_Start_IT+0x9c>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d009      	beq.n	8008c12 <HAL_TIM_Base_Start_IT+0x4e>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c06:	d004      	beq.n	8008c12 <HAL_TIM_Base_Start_IT+0x4e>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a15      	ldr	r2, [pc, #84]	; (8008c64 <HAL_TIM_Base_Start_IT+0xa0>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d115      	bne.n	8008c3e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	689a      	ldr	r2, [r3, #8]
 8008c18:	4b13      	ldr	r3, [pc, #76]	; (8008c68 <HAL_TIM_Base_Start_IT+0xa4>)
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2b06      	cmp	r3, #6
 8008c22:	d015      	beq.n	8008c50 <HAL_TIM_Base_Start_IT+0x8c>
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c2a:	d011      	beq.n	8008c50 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f042 0201 	orr.w	r2, r2, #1
 8008c3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c3c:	e008      	b.n	8008c50 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f042 0201 	orr.w	r2, r2, #1
 8008c4c:	601a      	str	r2, [r3, #0]
 8008c4e:	e000      	b.n	8008c52 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr
 8008c60:	40012c00 	.word	0x40012c00
 8008c64:	40014000 	.word	0x40014000
 8008c68:	00010007 	.word	0x00010007

08008c6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	f003 0302 	and.w	r3, r3, #2
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d122      	bne.n	8008cc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	f003 0302 	and.w	r3, r3, #2
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d11b      	bne.n	8008cc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f06f 0202 	mvn.w	r2, #2
 8008c98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	699b      	ldr	r3, [r3, #24]
 8008ca6:	f003 0303 	and.w	r3, r3, #3
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f9ce 	bl	8009050 <HAL_TIM_IC_CaptureCallback>
 8008cb4:	e005      	b.n	8008cc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f9c0 	bl	800903c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f9d1 	bl	8009064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	f003 0304 	and.w	r3, r3, #4
 8008cd2:	2b04      	cmp	r3, #4
 8008cd4:	d122      	bne.n	8008d1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	f003 0304 	and.w	r3, r3, #4
 8008ce0:	2b04      	cmp	r3, #4
 8008ce2:	d11b      	bne.n	8008d1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f06f 0204 	mvn.w	r2, #4
 8008cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2202      	movs	r2, #2
 8008cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d003      	beq.n	8008d0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f9a4 	bl	8009050 <HAL_TIM_IC_CaptureCallback>
 8008d08:	e005      	b.n	8008d16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f996 	bl	800903c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f9a7 	bl	8009064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	f003 0308 	and.w	r3, r3, #8
 8008d26:	2b08      	cmp	r3, #8
 8008d28:	d122      	bne.n	8008d70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	f003 0308 	and.w	r3, r3, #8
 8008d34:	2b08      	cmp	r3, #8
 8008d36:	d11b      	bne.n	8008d70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f06f 0208 	mvn.w	r2, #8
 8008d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2204      	movs	r2, #4
 8008d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	69db      	ldr	r3, [r3, #28]
 8008d4e:	f003 0303 	and.w	r3, r3, #3
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d003      	beq.n	8008d5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f97a 	bl	8009050 <HAL_TIM_IC_CaptureCallback>
 8008d5c:	e005      	b.n	8008d6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f96c 	bl	800903c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 f97d 	bl	8009064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	f003 0310 	and.w	r3, r3, #16
 8008d7a:	2b10      	cmp	r3, #16
 8008d7c:	d122      	bne.n	8008dc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	f003 0310 	and.w	r3, r3, #16
 8008d88:	2b10      	cmp	r3, #16
 8008d8a:	d11b      	bne.n	8008dc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f06f 0210 	mvn.w	r2, #16
 8008d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2208      	movs	r2, #8
 8008d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d003      	beq.n	8008db2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f950 	bl	8009050 <HAL_TIM_IC_CaptureCallback>
 8008db0:	e005      	b.n	8008dbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f942 	bl	800903c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f953 	bl	8009064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	f003 0301 	and.w	r3, r3, #1
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d10e      	bne.n	8008df0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	f003 0301 	and.w	r3, r3, #1
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d107      	bne.n	8008df0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f06f 0201 	mvn.w	r2, #1
 8008de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7f8 f972 	bl	80010d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dfa:	2b80      	cmp	r3, #128	; 0x80
 8008dfc:	d10e      	bne.n	8008e1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e08:	2b80      	cmp	r3, #128	; 0x80
 8008e0a:	d107      	bne.n	8008e1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 faa6 	bl	8009368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e2a:	d10e      	bne.n	8008e4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e36:	2b80      	cmp	r3, #128	; 0x80
 8008e38:	d107      	bne.n	8008e4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fa99 	bl	800937c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	691b      	ldr	r3, [r3, #16]
 8008e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e54:	2b40      	cmp	r3, #64	; 0x40
 8008e56:	d10e      	bne.n	8008e76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e62:	2b40      	cmp	r3, #64	; 0x40
 8008e64:	d107      	bne.n	8008e76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f901 	bl	8009078 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	f003 0320 	and.w	r3, r3, #32
 8008e80:	2b20      	cmp	r3, #32
 8008e82:	d10e      	bne.n	8008ea2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	f003 0320 	and.w	r3, r3, #32
 8008e8e:	2b20      	cmp	r3, #32
 8008e90:	d107      	bne.n	8008ea2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f06f 0220 	mvn.w	r2, #32
 8008e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fa59 	bl	8009354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ea2:	bf00      	nop
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b084      	sub	sp, #16
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d101      	bne.n	8008ec6 <HAL_TIM_ConfigClockSource+0x1c>
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	e0b6      	b.n	8009034 <HAL_TIM_ConfigClockSource+0x18a>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2202      	movs	r2, #2
 8008ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ee4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008ee8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ef0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f02:	d03e      	beq.n	8008f82 <HAL_TIM_ConfigClockSource+0xd8>
 8008f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f08:	f200 8087 	bhi.w	800901a <HAL_TIM_ConfigClockSource+0x170>
 8008f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f10:	f000 8086 	beq.w	8009020 <HAL_TIM_ConfigClockSource+0x176>
 8008f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f18:	d87f      	bhi.n	800901a <HAL_TIM_ConfigClockSource+0x170>
 8008f1a:	2b70      	cmp	r3, #112	; 0x70
 8008f1c:	d01a      	beq.n	8008f54 <HAL_TIM_ConfigClockSource+0xaa>
 8008f1e:	2b70      	cmp	r3, #112	; 0x70
 8008f20:	d87b      	bhi.n	800901a <HAL_TIM_ConfigClockSource+0x170>
 8008f22:	2b60      	cmp	r3, #96	; 0x60
 8008f24:	d050      	beq.n	8008fc8 <HAL_TIM_ConfigClockSource+0x11e>
 8008f26:	2b60      	cmp	r3, #96	; 0x60
 8008f28:	d877      	bhi.n	800901a <HAL_TIM_ConfigClockSource+0x170>
 8008f2a:	2b50      	cmp	r3, #80	; 0x50
 8008f2c:	d03c      	beq.n	8008fa8 <HAL_TIM_ConfigClockSource+0xfe>
 8008f2e:	2b50      	cmp	r3, #80	; 0x50
 8008f30:	d873      	bhi.n	800901a <HAL_TIM_ConfigClockSource+0x170>
 8008f32:	2b40      	cmp	r3, #64	; 0x40
 8008f34:	d058      	beq.n	8008fe8 <HAL_TIM_ConfigClockSource+0x13e>
 8008f36:	2b40      	cmp	r3, #64	; 0x40
 8008f38:	d86f      	bhi.n	800901a <HAL_TIM_ConfigClockSource+0x170>
 8008f3a:	2b30      	cmp	r3, #48	; 0x30
 8008f3c:	d064      	beq.n	8009008 <HAL_TIM_ConfigClockSource+0x15e>
 8008f3e:	2b30      	cmp	r3, #48	; 0x30
 8008f40:	d86b      	bhi.n	800901a <HAL_TIM_ConfigClockSource+0x170>
 8008f42:	2b20      	cmp	r3, #32
 8008f44:	d060      	beq.n	8009008 <HAL_TIM_ConfigClockSource+0x15e>
 8008f46:	2b20      	cmp	r3, #32
 8008f48:	d867      	bhi.n	800901a <HAL_TIM_ConfigClockSource+0x170>
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d05c      	beq.n	8009008 <HAL_TIM_ConfigClockSource+0x15e>
 8008f4e:	2b10      	cmp	r3, #16
 8008f50:	d05a      	beq.n	8009008 <HAL_TIM_ConfigClockSource+0x15e>
 8008f52:	e062      	b.n	800901a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6818      	ldr	r0, [r3, #0]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	6899      	ldr	r1, [r3, #8]
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	685a      	ldr	r2, [r3, #4]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	f000 f970 	bl	8009248 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008f76:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	609a      	str	r2, [r3, #8]
      break;
 8008f80:	e04f      	b.n	8009022 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6818      	ldr	r0, [r3, #0]
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	6899      	ldr	r1, [r3, #8]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	f000 f959 	bl	8009248 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689a      	ldr	r2, [r3, #8]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008fa4:	609a      	str	r2, [r3, #8]
      break;
 8008fa6:	e03c      	b.n	8009022 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6818      	ldr	r0, [r3, #0]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	6859      	ldr	r1, [r3, #4]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	f000 f8cd 	bl	8009154 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2150      	movs	r1, #80	; 0x50
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 f926 	bl	8009212 <TIM_ITRx_SetConfig>
      break;
 8008fc6:	e02c      	b.n	8009022 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6818      	ldr	r0, [r3, #0]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	6859      	ldr	r1, [r3, #4]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	f000 f8ec 	bl	80091b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2160      	movs	r1, #96	; 0x60
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 f916 	bl	8009212 <TIM_ITRx_SetConfig>
      break;
 8008fe6:	e01c      	b.n	8009022 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6818      	ldr	r0, [r3, #0]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	6859      	ldr	r1, [r3, #4]
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	f000 f8ad 	bl	8009154 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2140      	movs	r1, #64	; 0x40
 8009000:	4618      	mov	r0, r3
 8009002:	f000 f906 	bl	8009212 <TIM_ITRx_SetConfig>
      break;
 8009006:	e00c      	b.n	8009022 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4619      	mov	r1, r3
 8009012:	4610      	mov	r0, r2
 8009014:	f000 f8fd 	bl	8009212 <TIM_ITRx_SetConfig>
      break;
 8009018:	e003      	b.n	8009022 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	73fb      	strb	r3, [r7, #15]
      break;
 800901e:	e000      	b.n	8009022 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009020:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009032:	7bfb      	ldrb	r3, [r7, #15]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009044:	bf00      	nop
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009058:	bf00      	nop
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009080:	bf00      	nop
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a2a      	ldr	r2, [pc, #168]	; (8009148 <TIM_Base_SetConfig+0xbc>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d003      	beq.n	80090ac <TIM_Base_SetConfig+0x20>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090aa:	d108      	bne.n	80090be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a21      	ldr	r2, [pc, #132]	; (8009148 <TIM_Base_SetConfig+0xbc>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d00b      	beq.n	80090de <TIM_Base_SetConfig+0x52>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090cc:	d007      	beq.n	80090de <TIM_Base_SetConfig+0x52>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a1e      	ldr	r2, [pc, #120]	; (800914c <TIM_Base_SetConfig+0xc0>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d003      	beq.n	80090de <TIM_Base_SetConfig+0x52>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a1d      	ldr	r2, [pc, #116]	; (8009150 <TIM_Base_SetConfig+0xc4>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d108      	bne.n	80090f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	689a      	ldr	r2, [r3, #8]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a0c      	ldr	r2, [pc, #48]	; (8009148 <TIM_Base_SetConfig+0xbc>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d007      	beq.n	800912c <TIM_Base_SetConfig+0xa0>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a0b      	ldr	r2, [pc, #44]	; (800914c <TIM_Base_SetConfig+0xc0>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d003      	beq.n	800912c <TIM_Base_SetConfig+0xa0>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a0a      	ldr	r2, [pc, #40]	; (8009150 <TIM_Base_SetConfig+0xc4>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d103      	bne.n	8009134 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	691a      	ldr	r2, [r3, #16]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	615a      	str	r2, [r3, #20]
}
 800913a:	bf00      	nop
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	40012c00 	.word	0x40012c00
 800914c:	40014000 	.word	0x40014000
 8009150:	40014400 	.word	0x40014400

08009154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009154:	b480      	push	{r7}
 8009156:	b087      	sub	sp, #28
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6a1b      	ldr	r3, [r3, #32]
 8009164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6a1b      	ldr	r3, [r3, #32]
 800916a:	f023 0201 	bic.w	r2, r3, #1
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800917e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	011b      	lsls	r3, r3, #4
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	4313      	orrs	r3, r2
 8009188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	f023 030a 	bic.w	r3, r3, #10
 8009190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009192:	697a      	ldr	r2, [r7, #20]
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	4313      	orrs	r3, r2
 8009198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	697a      	ldr	r2, [r7, #20]
 80091a4:	621a      	str	r2, [r3, #32]
}
 80091a6:	bf00      	nop
 80091a8:	371c      	adds	r7, #28
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b087      	sub	sp, #28
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	60f8      	str	r0, [r7, #12]
 80091ba:	60b9      	str	r1, [r7, #8]
 80091bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6a1b      	ldr	r3, [r3, #32]
 80091c2:	f023 0210 	bic.w	r2, r3, #16
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6a1b      	ldr	r3, [r3, #32]
 80091d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	031b      	lsls	r3, r3, #12
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80091ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	011b      	lsls	r3, r3, #4
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	697a      	ldr	r2, [r7, #20]
 80091fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	693a      	ldr	r2, [r7, #16]
 8009204:	621a      	str	r2, [r3, #32]
}
 8009206:	bf00      	nop
 8009208:	371c      	adds	r7, #28
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009212:	b480      	push	{r7}
 8009214:	b085      	sub	sp, #20
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800922a:	683a      	ldr	r2, [r7, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	4313      	orrs	r3, r2
 8009230:	f043 0307 	orr.w	r3, r3, #7
 8009234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	609a      	str	r2, [r3, #8]
}
 800923c:	bf00      	nop
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009248:	b480      	push	{r7}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
 8009254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	021a      	lsls	r2, r3, #8
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	431a      	orrs	r2, r3
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	4313      	orrs	r3, r2
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	4313      	orrs	r3, r2
 8009274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	609a      	str	r2, [r3, #8]
}
 800927c:	bf00      	nop
 800927e:	371c      	adds	r7, #28
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009298:	2b01      	cmp	r3, #1
 800929a:	d101      	bne.n	80092a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800929c:	2302      	movs	r3, #2
 800929e:	e04f      	b.n	8009340 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2202      	movs	r2, #2
 80092ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a21      	ldr	r2, [pc, #132]	; (800934c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d108      	bne.n	80092dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80092d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	4313      	orrs	r3, r2
 80092da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a14      	ldr	r2, [pc, #80]	; (800934c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d009      	beq.n	8009314 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009308:	d004      	beq.n	8009314 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a10      	ldr	r2, [pc, #64]	; (8009350 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d10c      	bne.n	800932e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800931a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	4313      	orrs	r3, r2
 8009324:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2201      	movs	r2, #1
 8009332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	40012c00 	.word	0x40012c00
 8009350:	40014000 	.word	0x40014000

08009354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800935c:	bf00      	nop
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009370:	bf00      	nop
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d101      	bne.n	80093a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	e040      	b.n	8009424 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d106      	bne.n	80093b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f7fa f802 	bl	80033bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2224      	movs	r2, #36	; 0x24
 80093bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f022 0201 	bic.w	r2, r2, #1
 80093cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fbe8 	bl	8009ba4 <UART_SetConfig>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d101      	bne.n	80093de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	e022      	b.n	8009424 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d002      	beq.n	80093ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fe08 	bl	8009ffc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	685a      	ldr	r2, [r3, #4]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80093fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	689a      	ldr	r2, [r3, #8]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800940a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f042 0201 	orr.w	r2, r2, #1
 800941a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fe8f 	bl	800a140 <UART_CheckIdleState>
 8009422:	4603      	mov	r3, r0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800942c:	b480      	push	{r7}
 800942e:	b08b      	sub	sp, #44	; 0x2c
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	4613      	mov	r3, r2
 8009438:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800943e:	2b20      	cmp	r3, #32
 8009440:	d156      	bne.n	80094f0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <HAL_UART_Transmit_IT+0x22>
 8009448:	88fb      	ldrh	r3, [r7, #6]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d101      	bne.n	8009452 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	e04f      	b.n	80094f2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009458:	2b01      	cmp	r3, #1
 800945a:	d101      	bne.n	8009460 <HAL_UART_Transmit_IT+0x34>
 800945c:	2302      	movs	r3, #2
 800945e:	e048      	b.n	80094f2 <HAL_UART_Transmit_IT+0xc6>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	88fa      	ldrh	r2, [r7, #6]
 8009472:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	88fa      	ldrh	r2, [r7, #6]
 800947a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2200      	movs	r2, #0
 8009488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2221      	movs	r2, #33	; 0x21
 8009490:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800949a:	d107      	bne.n	80094ac <HAL_UART_Transmit_IT+0x80>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d103      	bne.n	80094ac <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	4a16      	ldr	r2, [pc, #88]	; (8009500 <HAL_UART_Transmit_IT+0xd4>)
 80094a8:	669a      	str	r2, [r3, #104]	; 0x68
 80094aa:	e002      	b.n	80094b2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	4a15      	ldr	r2, [pc, #84]	; (8009504 <HAL_UART_Transmit_IT+0xd8>)
 80094b0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	e853 3f00 	ldrex	r3, [r3]
 80094c6:	613b      	str	r3, [r7, #16]
   return(result);
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094ce:	627b      	str	r3, [r7, #36]	; 0x24
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	461a      	mov	r2, r3
 80094d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d8:	623b      	str	r3, [r7, #32]
 80094da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094dc:	69f9      	ldr	r1, [r7, #28]
 80094de:	6a3a      	ldr	r2, [r7, #32]
 80094e0:	e841 2300 	strex	r3, r2, [r1]
 80094e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1e6      	bne.n	80094ba <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	e000      	b.n	80094f2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80094f0:	2302      	movs	r3, #2
  }
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	372c      	adds	r7, #44	; 0x2c
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	0800a69b 	.word	0x0800a69b
 8009504:	0800a5e3 	.word	0x0800a5e3

08009508 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b08a      	sub	sp, #40	; 0x28
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	4613      	mov	r3, r2
 8009514:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800951a:	2b20      	cmp	r3, #32
 800951c:	d142      	bne.n	80095a4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d002      	beq.n	800952a <HAL_UART_Receive_IT+0x22>
 8009524:	88fb      	ldrh	r3, [r7, #6]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e03b      	b.n	80095a6 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009534:	2b01      	cmp	r3, #1
 8009536:	d101      	bne.n	800953c <HAL_UART_Receive_IT+0x34>
 8009538:	2302      	movs	r3, #2
 800953a:	e034      	b.n	80095a6 <HAL_UART_Receive_IT+0x9e>
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2200      	movs	r2, #0
 8009548:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a18      	ldr	r2, [pc, #96]	; (80095b0 <HAL_UART_Receive_IT+0xa8>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d01f      	beq.n	8009594 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d018      	beq.n	8009594 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	e853 3f00 	ldrex	r3, [r3]
 800956e:	613b      	str	r3, [r7, #16]
   return(result);
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009576:	627b      	str	r3, [r7, #36]	; 0x24
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	461a      	mov	r2, r3
 800957e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009580:	623b      	str	r3, [r7, #32]
 8009582:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009584:	69f9      	ldr	r1, [r7, #28]
 8009586:	6a3a      	ldr	r2, [r7, #32]
 8009588:	e841 2300 	strex	r3, r2, [r1]
 800958c:	61bb      	str	r3, [r7, #24]
   return(result);
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1e6      	bne.n	8009562 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009594:	88fb      	ldrh	r3, [r7, #6]
 8009596:	461a      	mov	r2, r3
 8009598:	68b9      	ldr	r1, [r7, #8]
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f000 fede 	bl	800a35c <UART_Start_Receive_IT>
 80095a0:	4603      	mov	r3, r0
 80095a2:	e000      	b.n	80095a6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80095a4:	2302      	movs	r3, #2
  }
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3728      	adds	r7, #40	; 0x28
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	40008000 	.word	0x40008000

080095b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b0ba      	sub	sp, #232	; 0xe8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	69db      	ldr	r3, [r3, #28]
 80095c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80095da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80095de:	f640 030f 	movw	r3, #2063	; 0x80f
 80095e2:	4013      	ands	r3, r2
 80095e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80095e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d115      	bne.n	800961c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80095f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095f4:	f003 0320 	and.w	r3, r3, #32
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00f      	beq.n	800961c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80095fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009600:	f003 0320 	and.w	r3, r3, #32
 8009604:	2b00      	cmp	r3, #0
 8009606:	d009      	beq.n	800961c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800960c:	2b00      	cmp	r3, #0
 800960e:	f000 82a6 	beq.w	8009b5e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	4798      	blx	r3
      }
      return;
 800961a:	e2a0      	b.n	8009b5e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800961c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009620:	2b00      	cmp	r3, #0
 8009622:	f000 8117 	beq.w	8009854 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800962a:	f003 0301 	and.w	r3, r3, #1
 800962e:	2b00      	cmp	r3, #0
 8009630:	d106      	bne.n	8009640 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009632:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009636:	4b85      	ldr	r3, [pc, #532]	; (800984c <HAL_UART_IRQHandler+0x298>)
 8009638:	4013      	ands	r3, r2
 800963a:	2b00      	cmp	r3, #0
 800963c:	f000 810a 	beq.w	8009854 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009644:	f003 0301 	and.w	r3, r3, #1
 8009648:	2b00      	cmp	r3, #0
 800964a:	d011      	beq.n	8009670 <HAL_UART_IRQHandler+0xbc>
 800964c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00b      	beq.n	8009670 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2201      	movs	r2, #1
 800965e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009666:	f043 0201 	orr.w	r2, r3, #1
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009674:	f003 0302 	and.w	r3, r3, #2
 8009678:	2b00      	cmp	r3, #0
 800967a:	d011      	beq.n	80096a0 <HAL_UART_IRQHandler+0xec>
 800967c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009680:	f003 0301 	and.w	r3, r3, #1
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00b      	beq.n	80096a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2202      	movs	r2, #2
 800968e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009696:	f043 0204 	orr.w	r2, r3, #4
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096a4:	f003 0304 	and.w	r3, r3, #4
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d011      	beq.n	80096d0 <HAL_UART_IRQHandler+0x11c>
 80096ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096b0:	f003 0301 	and.w	r3, r3, #1
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00b      	beq.n	80096d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2204      	movs	r2, #4
 80096be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096c6:	f043 0202 	orr.w	r2, r3, #2
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80096d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096d4:	f003 0308 	and.w	r3, r3, #8
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d017      	beq.n	800970c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80096dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096e0:	f003 0320 	and.w	r3, r3, #32
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d105      	bne.n	80096f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80096e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00b      	beq.n	800970c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2208      	movs	r2, #8
 80096fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009702:	f043 0208 	orr.w	r2, r3, #8
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800970c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009714:	2b00      	cmp	r3, #0
 8009716:	d012      	beq.n	800973e <HAL_UART_IRQHandler+0x18a>
 8009718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800971c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00c      	beq.n	800973e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800972c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009734:	f043 0220 	orr.w	r2, r3, #32
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009744:	2b00      	cmp	r3, #0
 8009746:	f000 820c 	beq.w	8009b62 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800974a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800974e:	f003 0320 	and.w	r3, r3, #32
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00d      	beq.n	8009772 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800975a:	f003 0320 	and.w	r3, r3, #32
 800975e:	2b00      	cmp	r3, #0
 8009760:	d007      	beq.n	8009772 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009766:	2b00      	cmp	r3, #0
 8009768:	d003      	beq.n	8009772 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009778:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009786:	2b40      	cmp	r3, #64	; 0x40
 8009788:	d005      	beq.n	8009796 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800978a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800978e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009792:	2b00      	cmp	r3, #0
 8009794:	d04f      	beq.n	8009836 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 feaa 	bl	800a4f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a6:	2b40      	cmp	r3, #64	; 0x40
 80097a8:	d141      	bne.n	800982e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	3308      	adds	r3, #8
 80097b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097b8:	e853 3f00 	ldrex	r3, [r3]
 80097bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80097c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	3308      	adds	r3, #8
 80097d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80097d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80097da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80097e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80097e6:	e841 2300 	strex	r3, r2, [r1]
 80097ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80097ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1d9      	bne.n	80097aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d013      	beq.n	8009826 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009802:	4a13      	ldr	r2, [pc, #76]	; (8009850 <HAL_UART_IRQHandler+0x29c>)
 8009804:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800980a:	4618      	mov	r0, r3
 800980c:	f7fb fd56 	bl	80052bc <HAL_DMA_Abort_IT>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d017      	beq.n	8009846 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800981a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009820:	4610      	mov	r0, r2
 8009822:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009824:	e00f      	b.n	8009846 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f9a6 	bl	8009b78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800982c:	e00b      	b.n	8009846 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 f9a2 	bl	8009b78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009834:	e007      	b.n	8009846 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 f99e 	bl	8009b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009844:	e18d      	b.n	8009b62 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009846:	bf00      	nop
    return;
 8009848:	e18b      	b.n	8009b62 <HAL_UART_IRQHandler+0x5ae>
 800984a:	bf00      	nop
 800984c:	04000120 	.word	0x04000120
 8009850:	0800a5b7 	.word	0x0800a5b7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009858:	2b01      	cmp	r3, #1
 800985a:	f040 8146 	bne.w	8009aea <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800985e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009862:	f003 0310 	and.w	r3, r3, #16
 8009866:	2b00      	cmp	r3, #0
 8009868:	f000 813f 	beq.w	8009aea <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800986c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009870:	f003 0310 	and.w	r3, r3, #16
 8009874:	2b00      	cmp	r3, #0
 8009876:	f000 8138 	beq.w	8009aea <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2210      	movs	r2, #16
 8009880:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800988c:	2b40      	cmp	r3, #64	; 0x40
 800988e:	f040 80b4 	bne.w	80099fa <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800989e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f000 815f 	beq.w	8009b66 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80098ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80098b2:	429a      	cmp	r2, r3
 80098b4:	f080 8157 	bcs.w	8009b66 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80098be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 0320 	and.w	r3, r3, #32
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f040 8085 	bne.w	80099de <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098e0:	e853 3f00 	ldrex	r3, [r3]
 80098e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80098e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	461a      	mov	r2, r3
 80098fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80098fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009902:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009906:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800990a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800990e:	e841 2300 	strex	r3, r2, [r1]
 8009912:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009916:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1da      	bne.n	80098d4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	3308      	adds	r3, #8
 8009924:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009926:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009928:	e853 3f00 	ldrex	r3, [r3]
 800992c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800992e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009930:	f023 0301 	bic.w	r3, r3, #1
 8009934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	3308      	adds	r3, #8
 800993e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009942:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009946:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009948:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800994a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800994e:	e841 2300 	strex	r3, r2, [r1]
 8009952:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1e1      	bne.n	800991e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	3308      	adds	r3, #8
 8009960:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009962:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009964:	e853 3f00 	ldrex	r3, [r3]
 8009968:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800996a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800996c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009970:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	3308      	adds	r3, #8
 800997a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800997e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009980:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009982:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009984:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009986:	e841 2300 	strex	r3, r2, [r1]
 800998a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800998c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1e3      	bne.n	800995a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2220      	movs	r2, #32
 8009996:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099a6:	e853 3f00 	ldrex	r3, [r3]
 80099aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80099ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099ae:	f023 0310 	bic.w	r3, r3, #16
 80099b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	461a      	mov	r2, r3
 80099bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80099c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80099c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099c8:	e841 2300 	strex	r3, r2, [r1]
 80099cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80099ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1e4      	bne.n	800999e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099d8:	4618      	mov	r0, r3
 80099da:	f7fb fc31 	bl	8005240 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	4619      	mov	r1, r3
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f8ca 	bl	8009b8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80099f8:	e0b5      	b.n	8009b66 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f000 80a7 	beq.w	8009b6a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8009a1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	f000 80a2 	beq.w	8009b6a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2e:	e853 3f00 	ldrex	r3, [r3]
 8009a32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	461a      	mov	r2, r3
 8009a44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009a48:	647b      	str	r3, [r7, #68]	; 0x44
 8009a4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a50:	e841 2300 	strex	r3, r2, [r1]
 8009a54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d1e4      	bne.n	8009a26 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3308      	adds	r3, #8
 8009a62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a66:	e853 3f00 	ldrex	r3, [r3]
 8009a6a:	623b      	str	r3, [r7, #32]
   return(result);
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	f023 0301 	bic.w	r3, r3, #1
 8009a72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3308      	adds	r3, #8
 8009a7c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009a80:	633a      	str	r2, [r7, #48]	; 0x30
 8009a82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a88:	e841 2300 	strex	r3, r2, [r1]
 8009a8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1e3      	bne.n	8009a5c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2220      	movs	r2, #32
 8009a98:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	e853 3f00 	ldrex	r3, [r3]
 8009ab2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f023 0310 	bic.w	r3, r3, #16
 8009aba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009ac8:	61fb      	str	r3, [r7, #28]
 8009aca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009acc:	69b9      	ldr	r1, [r7, #24]
 8009ace:	69fa      	ldr	r2, [r7, #28]
 8009ad0:	e841 2300 	strex	r3, r2, [r1]
 8009ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1e4      	bne.n	8009aa6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f852 	bl	8009b8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009ae8:	e03f      	b.n	8009b6a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00e      	beq.n	8009b14 <HAL_UART_IRQHandler+0x560>
 8009af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d008      	beq.n	8009b14 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009b0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 ffae 	bl	800aa6e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b12:	e02d      	b.n	8009b70 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d00e      	beq.n	8009b3e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d008      	beq.n	8009b3e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d01c      	beq.n	8009b6e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	4798      	blx	r3
    }
    return;
 8009b3c:	e017      	b.n	8009b6e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d012      	beq.n	8009b70 <HAL_UART_IRQHandler+0x5bc>
 8009b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00c      	beq.n	8009b70 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fdff 	bl	800a75a <UART_EndTransmit_IT>
    return;
 8009b5c:	e008      	b.n	8009b70 <HAL_UART_IRQHandler+0x5bc>
      return;
 8009b5e:	bf00      	nop
 8009b60:	e006      	b.n	8009b70 <HAL_UART_IRQHandler+0x5bc>
    return;
 8009b62:	bf00      	nop
 8009b64:	e004      	b.n	8009b70 <HAL_UART_IRQHandler+0x5bc>
      return;
 8009b66:	bf00      	nop
 8009b68:	e002      	b.n	8009b70 <HAL_UART_IRQHandler+0x5bc>
      return;
 8009b6a:	bf00      	nop
 8009b6c:	e000      	b.n	8009b70 <HAL_UART_IRQHandler+0x5bc>
    return;
 8009b6e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009b70:	37e8      	adds	r7, #232	; 0xe8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop

08009b78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	460b      	mov	r3, r1
 8009b96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b98:	bf00      	nop
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ba8:	b08a      	sub	sp, #40	; 0x28
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	689a      	ldr	r2, [r3, #8]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	431a      	orrs	r2, r3
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	695b      	ldr	r3, [r3, #20]
 8009bc2:	431a      	orrs	r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	69db      	ldr	r3, [r3, #28]
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	4bb4      	ldr	r3, [pc, #720]	; (8009ea4 <UART_SetConfig+0x300>)
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	6812      	ldr	r2, [r2, #0]
 8009bda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bdc:	430b      	orrs	r3, r1
 8009bde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	68da      	ldr	r2, [r3, #12]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4aa9      	ldr	r2, [pc, #676]	; (8009ea8 <UART_SetConfig+0x304>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d004      	beq.n	8009c10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6a1b      	ldr	r3, [r3, #32]
 8009c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c20:	430a      	orrs	r2, r1
 8009c22:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4aa0      	ldr	r2, [pc, #640]	; (8009eac <UART_SetConfig+0x308>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d126      	bne.n	8009c7c <UART_SetConfig+0xd8>
 8009c2e:	4ba0      	ldr	r3, [pc, #640]	; (8009eb0 <UART_SetConfig+0x30c>)
 8009c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c34:	f003 0303 	and.w	r3, r3, #3
 8009c38:	2b03      	cmp	r3, #3
 8009c3a:	d81b      	bhi.n	8009c74 <UART_SetConfig+0xd0>
 8009c3c:	a201      	add	r2, pc, #4	; (adr r2, 8009c44 <UART_SetConfig+0xa0>)
 8009c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c42:	bf00      	nop
 8009c44:	08009c55 	.word	0x08009c55
 8009c48:	08009c65 	.word	0x08009c65
 8009c4c:	08009c5d 	.word	0x08009c5d
 8009c50:	08009c6d 	.word	0x08009c6d
 8009c54:	2301      	movs	r3, #1
 8009c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c5a:	e080      	b.n	8009d5e <UART_SetConfig+0x1ba>
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c62:	e07c      	b.n	8009d5e <UART_SetConfig+0x1ba>
 8009c64:	2304      	movs	r3, #4
 8009c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c6a:	e078      	b.n	8009d5e <UART_SetConfig+0x1ba>
 8009c6c:	2308      	movs	r3, #8
 8009c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c72:	e074      	b.n	8009d5e <UART_SetConfig+0x1ba>
 8009c74:	2310      	movs	r3, #16
 8009c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c7a:	e070      	b.n	8009d5e <UART_SetConfig+0x1ba>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a8c      	ldr	r2, [pc, #560]	; (8009eb4 <UART_SetConfig+0x310>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d138      	bne.n	8009cf8 <UART_SetConfig+0x154>
 8009c86:	4b8a      	ldr	r3, [pc, #552]	; (8009eb0 <UART_SetConfig+0x30c>)
 8009c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c8c:	f003 030c 	and.w	r3, r3, #12
 8009c90:	2b0c      	cmp	r3, #12
 8009c92:	d82d      	bhi.n	8009cf0 <UART_SetConfig+0x14c>
 8009c94:	a201      	add	r2, pc, #4	; (adr r2, 8009c9c <UART_SetConfig+0xf8>)
 8009c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9a:	bf00      	nop
 8009c9c:	08009cd1 	.word	0x08009cd1
 8009ca0:	08009cf1 	.word	0x08009cf1
 8009ca4:	08009cf1 	.word	0x08009cf1
 8009ca8:	08009cf1 	.word	0x08009cf1
 8009cac:	08009ce1 	.word	0x08009ce1
 8009cb0:	08009cf1 	.word	0x08009cf1
 8009cb4:	08009cf1 	.word	0x08009cf1
 8009cb8:	08009cf1 	.word	0x08009cf1
 8009cbc:	08009cd9 	.word	0x08009cd9
 8009cc0:	08009cf1 	.word	0x08009cf1
 8009cc4:	08009cf1 	.word	0x08009cf1
 8009cc8:	08009cf1 	.word	0x08009cf1
 8009ccc:	08009ce9 	.word	0x08009ce9
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009cd6:	e042      	b.n	8009d5e <UART_SetConfig+0x1ba>
 8009cd8:	2302      	movs	r3, #2
 8009cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009cde:	e03e      	b.n	8009d5e <UART_SetConfig+0x1ba>
 8009ce0:	2304      	movs	r3, #4
 8009ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ce6:	e03a      	b.n	8009d5e <UART_SetConfig+0x1ba>
 8009ce8:	2308      	movs	r3, #8
 8009cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009cee:	e036      	b.n	8009d5e <UART_SetConfig+0x1ba>
 8009cf0:	2310      	movs	r3, #16
 8009cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009cf6:	e032      	b.n	8009d5e <UART_SetConfig+0x1ba>
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a6a      	ldr	r2, [pc, #424]	; (8009ea8 <UART_SetConfig+0x304>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d12a      	bne.n	8009d58 <UART_SetConfig+0x1b4>
 8009d02:	4b6b      	ldr	r3, [pc, #428]	; (8009eb0 <UART_SetConfig+0x30c>)
 8009d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009d0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d10:	d01a      	beq.n	8009d48 <UART_SetConfig+0x1a4>
 8009d12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d16:	d81b      	bhi.n	8009d50 <UART_SetConfig+0x1ac>
 8009d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d1c:	d00c      	beq.n	8009d38 <UART_SetConfig+0x194>
 8009d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d22:	d815      	bhi.n	8009d50 <UART_SetConfig+0x1ac>
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d003      	beq.n	8009d30 <UART_SetConfig+0x18c>
 8009d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d2c:	d008      	beq.n	8009d40 <UART_SetConfig+0x19c>
 8009d2e:	e00f      	b.n	8009d50 <UART_SetConfig+0x1ac>
 8009d30:	2300      	movs	r3, #0
 8009d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d36:	e012      	b.n	8009d5e <UART_SetConfig+0x1ba>
 8009d38:	2302      	movs	r3, #2
 8009d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d3e:	e00e      	b.n	8009d5e <UART_SetConfig+0x1ba>
 8009d40:	2304      	movs	r3, #4
 8009d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d46:	e00a      	b.n	8009d5e <UART_SetConfig+0x1ba>
 8009d48:	2308      	movs	r3, #8
 8009d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d4e:	e006      	b.n	8009d5e <UART_SetConfig+0x1ba>
 8009d50:	2310      	movs	r3, #16
 8009d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d56:	e002      	b.n	8009d5e <UART_SetConfig+0x1ba>
 8009d58:	2310      	movs	r3, #16
 8009d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a51      	ldr	r2, [pc, #324]	; (8009ea8 <UART_SetConfig+0x304>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d17a      	bne.n	8009e5e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009d68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d6c:	2b08      	cmp	r3, #8
 8009d6e:	d824      	bhi.n	8009dba <UART_SetConfig+0x216>
 8009d70:	a201      	add	r2, pc, #4	; (adr r2, 8009d78 <UART_SetConfig+0x1d4>)
 8009d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d76:	bf00      	nop
 8009d78:	08009d9d 	.word	0x08009d9d
 8009d7c:	08009dbb 	.word	0x08009dbb
 8009d80:	08009da5 	.word	0x08009da5
 8009d84:	08009dbb 	.word	0x08009dbb
 8009d88:	08009dab 	.word	0x08009dab
 8009d8c:	08009dbb 	.word	0x08009dbb
 8009d90:	08009dbb 	.word	0x08009dbb
 8009d94:	08009dbb 	.word	0x08009dbb
 8009d98:	08009db3 	.word	0x08009db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d9c:	f7fd fa36 	bl	800720c <HAL_RCC_GetPCLK1Freq>
 8009da0:	61f8      	str	r0, [r7, #28]
        break;
 8009da2:	e010      	b.n	8009dc6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009da4:	4b44      	ldr	r3, [pc, #272]	; (8009eb8 <UART_SetConfig+0x314>)
 8009da6:	61fb      	str	r3, [r7, #28]
        break;
 8009da8:	e00d      	b.n	8009dc6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009daa:	f7fd f997 	bl	80070dc <HAL_RCC_GetSysClockFreq>
 8009dae:	61f8      	str	r0, [r7, #28]
        break;
 8009db0:	e009      	b.n	8009dc6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009db6:	61fb      	str	r3, [r7, #28]
        break;
 8009db8:	e005      	b.n	8009dc6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009dc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f000 8107 	beq.w	8009fdc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	685a      	ldr	r2, [r3, #4]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	4413      	add	r3, r2
 8009dd8:	69fa      	ldr	r2, [r7, #28]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d305      	bcc.n	8009dea <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009de4:	69fa      	ldr	r2, [r7, #28]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d903      	bls.n	8009df2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009df0:	e0f4      	b.n	8009fdc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	2200      	movs	r2, #0
 8009df6:	461c      	mov	r4, r3
 8009df8:	4615      	mov	r5, r2
 8009dfa:	f04f 0200 	mov.w	r2, #0
 8009dfe:	f04f 0300 	mov.w	r3, #0
 8009e02:	022b      	lsls	r3, r5, #8
 8009e04:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009e08:	0222      	lsls	r2, r4, #8
 8009e0a:	68f9      	ldr	r1, [r7, #12]
 8009e0c:	6849      	ldr	r1, [r1, #4]
 8009e0e:	0849      	lsrs	r1, r1, #1
 8009e10:	2000      	movs	r0, #0
 8009e12:	4688      	mov	r8, r1
 8009e14:	4681      	mov	r9, r0
 8009e16:	eb12 0a08 	adds.w	sl, r2, r8
 8009e1a:	eb43 0b09 	adc.w	fp, r3, r9
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	603b      	str	r3, [r7, #0]
 8009e26:	607a      	str	r2, [r7, #4]
 8009e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e2c:	4650      	mov	r0, sl
 8009e2e:	4659      	mov	r1, fp
 8009e30:	f7f6 ff2a 	bl	8000c88 <__aeabi_uldivmod>
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	4613      	mov	r3, r2
 8009e3a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e42:	d308      	bcc.n	8009e56 <UART_SetConfig+0x2b2>
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e4a:	d204      	bcs.n	8009e56 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	69ba      	ldr	r2, [r7, #24]
 8009e52:	60da      	str	r2, [r3, #12]
 8009e54:	e0c2      	b.n	8009fdc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009e5c:	e0be      	b.n	8009fdc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	69db      	ldr	r3, [r3, #28]
 8009e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e66:	d16a      	bne.n	8009f3e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8009e68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e6c:	2b08      	cmp	r3, #8
 8009e6e:	d834      	bhi.n	8009eda <UART_SetConfig+0x336>
 8009e70:	a201      	add	r2, pc, #4	; (adr r2, 8009e78 <UART_SetConfig+0x2d4>)
 8009e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e76:	bf00      	nop
 8009e78:	08009e9d 	.word	0x08009e9d
 8009e7c:	08009ebd 	.word	0x08009ebd
 8009e80:	08009ec5 	.word	0x08009ec5
 8009e84:	08009edb 	.word	0x08009edb
 8009e88:	08009ecb 	.word	0x08009ecb
 8009e8c:	08009edb 	.word	0x08009edb
 8009e90:	08009edb 	.word	0x08009edb
 8009e94:	08009edb 	.word	0x08009edb
 8009e98:	08009ed3 	.word	0x08009ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e9c:	f7fd f9b6 	bl	800720c <HAL_RCC_GetPCLK1Freq>
 8009ea0:	61f8      	str	r0, [r7, #28]
        break;
 8009ea2:	e020      	b.n	8009ee6 <UART_SetConfig+0x342>
 8009ea4:	efff69f3 	.word	0xefff69f3
 8009ea8:	40008000 	.word	0x40008000
 8009eac:	40013800 	.word	0x40013800
 8009eb0:	40021000 	.word	0x40021000
 8009eb4:	40004400 	.word	0x40004400
 8009eb8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ebc:	f7fd f9bc 	bl	8007238 <HAL_RCC_GetPCLK2Freq>
 8009ec0:	61f8      	str	r0, [r7, #28]
        break;
 8009ec2:	e010      	b.n	8009ee6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ec4:	4b4c      	ldr	r3, [pc, #304]	; (8009ff8 <UART_SetConfig+0x454>)
 8009ec6:	61fb      	str	r3, [r7, #28]
        break;
 8009ec8:	e00d      	b.n	8009ee6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009eca:	f7fd f907 	bl	80070dc <HAL_RCC_GetSysClockFreq>
 8009ece:	61f8      	str	r0, [r7, #28]
        break;
 8009ed0:	e009      	b.n	8009ee6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ed6:	61fb      	str	r3, [r7, #28]
        break;
 8009ed8:	e005      	b.n	8009ee6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8009eda:	2300      	movs	r3, #0
 8009edc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009ee4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d077      	beq.n	8009fdc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	005a      	lsls	r2, r3, #1
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	085b      	lsrs	r3, r3, #1
 8009ef6:	441a      	add	r2, r3
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	2b0f      	cmp	r3, #15
 8009f06:	d916      	bls.n	8009f36 <UART_SetConfig+0x392>
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f0e:	d212      	bcs.n	8009f36 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	f023 030f 	bic.w	r3, r3, #15
 8009f18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	085b      	lsrs	r3, r3, #1
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	f003 0307 	and.w	r3, r3, #7
 8009f24:	b29a      	uxth	r2, r3
 8009f26:	8afb      	ldrh	r3, [r7, #22]
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	8afa      	ldrh	r2, [r7, #22]
 8009f32:	60da      	str	r2, [r3, #12]
 8009f34:	e052      	b.n	8009fdc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009f3c:	e04e      	b.n	8009fdc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f42:	2b08      	cmp	r3, #8
 8009f44:	d827      	bhi.n	8009f96 <UART_SetConfig+0x3f2>
 8009f46:	a201      	add	r2, pc, #4	; (adr r2, 8009f4c <UART_SetConfig+0x3a8>)
 8009f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4c:	08009f71 	.word	0x08009f71
 8009f50:	08009f79 	.word	0x08009f79
 8009f54:	08009f81 	.word	0x08009f81
 8009f58:	08009f97 	.word	0x08009f97
 8009f5c:	08009f87 	.word	0x08009f87
 8009f60:	08009f97 	.word	0x08009f97
 8009f64:	08009f97 	.word	0x08009f97
 8009f68:	08009f97 	.word	0x08009f97
 8009f6c:	08009f8f 	.word	0x08009f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f70:	f7fd f94c 	bl	800720c <HAL_RCC_GetPCLK1Freq>
 8009f74:	61f8      	str	r0, [r7, #28]
        break;
 8009f76:	e014      	b.n	8009fa2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f78:	f7fd f95e 	bl	8007238 <HAL_RCC_GetPCLK2Freq>
 8009f7c:	61f8      	str	r0, [r7, #28]
        break;
 8009f7e:	e010      	b.n	8009fa2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f80:	4b1d      	ldr	r3, [pc, #116]	; (8009ff8 <UART_SetConfig+0x454>)
 8009f82:	61fb      	str	r3, [r7, #28]
        break;
 8009f84:	e00d      	b.n	8009fa2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f86:	f7fd f8a9 	bl	80070dc <HAL_RCC_GetSysClockFreq>
 8009f8a:	61f8      	str	r0, [r7, #28]
        break;
 8009f8c:	e009      	b.n	8009fa2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f92:	61fb      	str	r3, [r7, #28]
        break;
 8009f94:	e005      	b.n	8009fa2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8009f96:	2300      	movs	r3, #0
 8009f98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009fa0:	bf00      	nop
    }

    if (pclk != 0U)
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d019      	beq.n	8009fdc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	085a      	lsrs	r2, r3, #1
 8009fae:	69fb      	ldr	r3, [r7, #28]
 8009fb0:	441a      	add	r2, r3
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	2b0f      	cmp	r3, #15
 8009fc0:	d909      	bls.n	8009fd6 <UART_SetConfig+0x432>
 8009fc2:	69bb      	ldr	r3, [r7, #24]
 8009fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fc8:	d205      	bcs.n	8009fd6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	60da      	str	r2, [r3, #12]
 8009fd4:	e002      	b.n	8009fdc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009fe8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3728      	adds	r7, #40	; 0x28
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ff6:	bf00      	nop
 8009ff8:	00f42400 	.word	0x00f42400

08009ffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a008:	f003 0301 	and.w	r3, r3, #1
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d00a      	beq.n	800a026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	430a      	orrs	r2, r1
 800a024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02a:	f003 0302 	and.w	r3, r3, #2
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00a      	beq.n	800a048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	430a      	orrs	r2, r1
 800a046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04c:	f003 0304 	and.w	r3, r3, #4
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00a      	beq.n	800a06a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	430a      	orrs	r2, r1
 800a068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06e:	f003 0308 	and.w	r3, r3, #8
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00a      	beq.n	800a08c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	430a      	orrs	r2, r1
 800a08a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a090:	f003 0310 	and.w	r3, r3, #16
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00a      	beq.n	800a0ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	430a      	orrs	r2, r1
 800a0ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b2:	f003 0320 	and.w	r3, r3, #32
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00a      	beq.n	800a0d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	430a      	orrs	r2, r1
 800a0ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d01a      	beq.n	800a112 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	430a      	orrs	r2, r1
 800a0f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0fa:	d10a      	bne.n	800a112 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	430a      	orrs	r2, r1
 800a110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00a      	beq.n	800a134 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	430a      	orrs	r2, r1
 800a132:	605a      	str	r2, [r3, #4]
  }
}
 800a134:	bf00      	nop
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af02      	add	r7, sp, #8
 800a146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a150:	f7f9 fb78 	bl	8003844 <HAL_GetTick>
 800a154:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f003 0308 	and.w	r3, r3, #8
 800a160:	2b08      	cmp	r3, #8
 800a162:	d10e      	bne.n	800a182 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f82d 	bl	800a1d2 <UART_WaitOnFlagUntilTimeout>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a17e:	2303      	movs	r3, #3
 800a180:	e023      	b.n	800a1ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f003 0304 	and.w	r3, r3, #4
 800a18c:	2b04      	cmp	r3, #4
 800a18e:	d10e      	bne.n	800a1ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a190:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2200      	movs	r2, #0
 800a19a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 f817 	bl	800a1d2 <UART_WaitOnFlagUntilTimeout>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d001      	beq.n	800a1ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	e00d      	b.n	800a1ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2220      	movs	r2, #32
 800a1b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2220      	movs	r2, #32
 800a1b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b09c      	sub	sp, #112	; 0x70
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	60f8      	str	r0, [r7, #12]
 800a1da:	60b9      	str	r1, [r7, #8]
 800a1dc:	603b      	str	r3, [r7, #0]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1e2:	e0a5      	b.n	800a330 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ea:	f000 80a1 	beq.w	800a330 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1ee:	f7f9 fb29 	bl	8003844 <HAL_GetTick>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d302      	bcc.n	800a204 <UART_WaitOnFlagUntilTimeout+0x32>
 800a1fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a200:	2b00      	cmp	r3, #0
 800a202:	d13e      	bne.n	800a282 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a20c:	e853 3f00 	ldrex	r3, [r3]
 800a210:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a214:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a218:	667b      	str	r3, [r7, #100]	; 0x64
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	461a      	mov	r2, r3
 800a220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a222:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a224:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a226:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a228:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a22a:	e841 2300 	strex	r3, r2, [r1]
 800a22e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1e6      	bne.n	800a204 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	3308      	adds	r3, #8
 800a23c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a240:	e853 3f00 	ldrex	r3, [r3]
 800a244:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a248:	f023 0301 	bic.w	r3, r3, #1
 800a24c:	663b      	str	r3, [r7, #96]	; 0x60
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	3308      	adds	r3, #8
 800a254:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a256:	64ba      	str	r2, [r7, #72]	; 0x48
 800a258:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a25c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a25e:	e841 2300 	strex	r3, r2, [r1]
 800a262:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1e5      	bne.n	800a236 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2220      	movs	r2, #32
 800a26e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2220      	movs	r2, #32
 800a274:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2200      	movs	r2, #0
 800a27a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a27e:	2303      	movs	r3, #3
 800a280:	e067      	b.n	800a352 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f003 0304 	and.w	r3, r3, #4
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d04f      	beq.n	800a330 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	69db      	ldr	r3, [r3, #28]
 800a296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a29a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a29e:	d147      	bne.n	800a330 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2a8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b2:	e853 3f00 	ldrex	r3, [r3]
 800a2b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2be:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2c8:	637b      	str	r3, [r7, #52]	; 0x34
 800a2ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2d0:	e841 2300 	strex	r3, r2, [r1]
 800a2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d1e6      	bne.n	800a2aa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	3308      	adds	r3, #8
 800a2e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	e853 3f00 	ldrex	r3, [r3]
 800a2ea:	613b      	str	r3, [r7, #16]
   return(result);
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	f023 0301 	bic.w	r3, r3, #1
 800a2f2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	3308      	adds	r3, #8
 800a2fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a2fc:	623a      	str	r2, [r7, #32]
 800a2fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a300:	69f9      	ldr	r1, [r7, #28]
 800a302:	6a3a      	ldr	r2, [r7, #32]
 800a304:	e841 2300 	strex	r3, r2, [r1]
 800a308:	61bb      	str	r3, [r7, #24]
   return(result);
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1e5      	bne.n	800a2dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2220      	movs	r2, #32
 800a314:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2220      	movs	r2, #32
 800a31a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2220      	movs	r2, #32
 800a320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2200      	movs	r2, #0
 800a328:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a32c:	2303      	movs	r3, #3
 800a32e:	e010      	b.n	800a352 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	69da      	ldr	r2, [r3, #28]
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	4013      	ands	r3, r2
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	bf0c      	ite	eq
 800a340:	2301      	moveq	r3, #1
 800a342:	2300      	movne	r3, #0
 800a344:	b2db      	uxtb	r3, r3
 800a346:	461a      	mov	r2, r3
 800a348:	79fb      	ldrb	r3, [r7, #7]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	f43f af4a 	beq.w	800a1e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3770      	adds	r7, #112	; 0x70
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
	...

0800a35c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b097      	sub	sp, #92	; 0x5c
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	4613      	mov	r3, r2
 800a368:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	68ba      	ldr	r2, [r7, #8]
 800a36e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	88fa      	ldrh	r2, [r7, #6]
 800a374:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	88fa      	ldrh	r2, [r7, #6]
 800a37c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2200      	movs	r2, #0
 800a384:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a38e:	d10e      	bne.n	800a3ae <UART_Start_Receive_IT+0x52>
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	691b      	ldr	r3, [r3, #16]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d105      	bne.n	800a3a4 <UART_Start_Receive_IT+0x48>
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a39e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a3a2:	e02d      	b.n	800a400 <UART_Start_Receive_IT+0xa4>
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	22ff      	movs	r2, #255	; 0xff
 800a3a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a3ac:	e028      	b.n	800a400 <UART_Start_Receive_IT+0xa4>
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10d      	bne.n	800a3d2 <UART_Start_Receive_IT+0x76>
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d104      	bne.n	800a3c8 <UART_Start_Receive_IT+0x6c>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	22ff      	movs	r2, #255	; 0xff
 800a3c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a3c6:	e01b      	b.n	800a400 <UART_Start_Receive_IT+0xa4>
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	227f      	movs	r2, #127	; 0x7f
 800a3cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a3d0:	e016      	b.n	800a400 <UART_Start_Receive_IT+0xa4>
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3da:	d10d      	bne.n	800a3f8 <UART_Start_Receive_IT+0x9c>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	691b      	ldr	r3, [r3, #16]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d104      	bne.n	800a3ee <UART_Start_Receive_IT+0x92>
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	227f      	movs	r2, #127	; 0x7f
 800a3e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a3ec:	e008      	b.n	800a400 <UART_Start_Receive_IT+0xa4>
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	223f      	movs	r2, #63	; 0x3f
 800a3f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a3f6:	e003      	b.n	800a400 <UART_Start_Receive_IT+0xa4>
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2222      	movs	r2, #34	; 0x22
 800a40c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	3308      	adds	r3, #8
 800a414:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a418:	e853 3f00 	ldrex	r3, [r3]
 800a41c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a420:	f043 0301 	orr.w	r3, r3, #1
 800a424:	657b      	str	r3, [r7, #84]	; 0x54
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	3308      	adds	r3, #8
 800a42c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a42e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a430:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a432:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a434:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a436:	e841 2300 	strex	r3, r2, [r1]
 800a43a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a43c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1e5      	bne.n	800a40e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a44a:	d107      	bne.n	800a45c <UART_Start_Receive_IT+0x100>
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d103      	bne.n	800a45c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	4a24      	ldr	r2, [pc, #144]	; (800a4e8 <UART_Start_Receive_IT+0x18c>)
 800a458:	665a      	str	r2, [r3, #100]	; 0x64
 800a45a:	e002      	b.n	800a462 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	4a23      	ldr	r2, [pc, #140]	; (800a4ec <UART_Start_Receive_IT+0x190>)
 800a460:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2200      	movs	r2, #0
 800a466:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d019      	beq.n	800a4a6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47a:	e853 3f00 	ldrex	r3, [r3]
 800a47e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a486:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	461a      	mov	r2, r3
 800a48e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a490:	637b      	str	r3, [r7, #52]	; 0x34
 800a492:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a494:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a498:	e841 2300 	strex	r3, r2, [r1]
 800a49c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1e6      	bne.n	800a472 <UART_Start_Receive_IT+0x116>
 800a4a4:	e018      	b.n	800a4d8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	e853 3f00 	ldrex	r3, [r3]
 800a4b2:	613b      	str	r3, [r7, #16]
   return(result);
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	f043 0320 	orr.w	r3, r3, #32
 800a4ba:	653b      	str	r3, [r7, #80]	; 0x50
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4c4:	623b      	str	r3, [r7, #32]
 800a4c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c8:	69f9      	ldr	r1, [r7, #28]
 800a4ca:	6a3a      	ldr	r2, [r7, #32]
 800a4cc:	e841 2300 	strex	r3, r2, [r1]
 800a4d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d1e6      	bne.n	800a4a6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	375c      	adds	r7, #92	; 0x5c
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop
 800a4e8:	0800a90f 	.word	0x0800a90f
 800a4ec:	0800a7af 	.word	0x0800a7af

0800a4f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b095      	sub	sp, #84	; 0x54
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a500:	e853 3f00 	ldrex	r3, [r3]
 800a504:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a508:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a50c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	461a      	mov	r2, r3
 800a514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a516:	643b      	str	r3, [r7, #64]	; 0x40
 800a518:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a51c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a51e:	e841 2300 	strex	r3, r2, [r1]
 800a522:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1e6      	bne.n	800a4f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	3308      	adds	r3, #8
 800a530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a532:	6a3b      	ldr	r3, [r7, #32]
 800a534:	e853 3f00 	ldrex	r3, [r3]
 800a538:	61fb      	str	r3, [r7, #28]
   return(result);
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	f023 0301 	bic.w	r3, r3, #1
 800a540:	64bb      	str	r3, [r7, #72]	; 0x48
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	3308      	adds	r3, #8
 800a548:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a54a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a54c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a552:	e841 2300 	strex	r3, r2, [r1]
 800a556:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d1e5      	bne.n	800a52a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a562:	2b01      	cmp	r3, #1
 800a564:	d118      	bne.n	800a598 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	e853 3f00 	ldrex	r3, [r3]
 800a572:	60bb      	str	r3, [r7, #8]
   return(result);
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	f023 0310 	bic.w	r3, r3, #16
 800a57a:	647b      	str	r3, [r7, #68]	; 0x44
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	461a      	mov	r2, r3
 800a582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a584:	61bb      	str	r3, [r7, #24]
 800a586:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a588:	6979      	ldr	r1, [r7, #20]
 800a58a:	69ba      	ldr	r2, [r7, #24]
 800a58c:	e841 2300 	strex	r3, r2, [r1]
 800a590:	613b      	str	r3, [r7, #16]
   return(result);
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d1e6      	bne.n	800a566 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2220      	movs	r2, #32
 800a59c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a5aa:	bf00      	nop
 800a5ac:	3754      	adds	r7, #84	; 0x54
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr

0800a5b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b084      	sub	sp, #16
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f7ff facf 	bl	8009b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5da:	bf00      	nop
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b08f      	sub	sp, #60	; 0x3c
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5ee:	2b21      	cmp	r3, #33	; 0x21
 800a5f0:	d14d      	bne.n	800a68e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d132      	bne.n	800a664 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a604:	6a3b      	ldr	r3, [r7, #32]
 800a606:	e853 3f00 	ldrex	r3, [r3]
 800a60a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a612:	637b      	str	r3, [r7, #52]	; 0x34
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	461a      	mov	r2, r3
 800a61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a61c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a61e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a620:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a624:	e841 2300 	strex	r3, r2, [r1]
 800a628:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1e6      	bne.n	800a5fe <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	e853 3f00 	ldrex	r3, [r3]
 800a63c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a644:	633b      	str	r3, [r7, #48]	; 0x30
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	461a      	mov	r2, r3
 800a64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64e:	61bb      	str	r3, [r7, #24]
 800a650:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a652:	6979      	ldr	r1, [r7, #20]
 800a654:	69ba      	ldr	r2, [r7, #24]
 800a656:	e841 2300 	strex	r3, r2, [r1]
 800a65a:	613b      	str	r3, [r7, #16]
   return(result);
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d1e6      	bne.n	800a630 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a662:	e014      	b.n	800a68e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a668:	781a      	ldrb	r2, [r3, #0]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	b292      	uxth	r2, r2
 800a670:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a676:	1c5a      	adds	r2, r3, #1
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a682:	b29b      	uxth	r3, r3
 800a684:	3b01      	subs	r3, #1
 800a686:	b29a      	uxth	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a68e:	bf00      	nop
 800a690:	373c      	adds	r7, #60	; 0x3c
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr

0800a69a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a69a:	b480      	push	{r7}
 800a69c:	b091      	sub	sp, #68	; 0x44
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a6a6:	2b21      	cmp	r3, #33	; 0x21
 800a6a8:	d151      	bne.n	800a74e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d132      	bne.n	800a71c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6be:	e853 3f00 	ldrex	r3, [r3]
 800a6c2:	623b      	str	r3, [r7, #32]
   return(result);
 800a6c4:	6a3b      	ldr	r3, [r7, #32]
 800a6c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d4:	633b      	str	r3, [r7, #48]	; 0x30
 800a6d6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6dc:	e841 2300 	strex	r3, r2, [r1]
 800a6e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d1e6      	bne.n	800a6b6 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	e853 3f00 	ldrex	r3, [r3]
 800a6f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6fc:	637b      	str	r3, [r7, #52]	; 0x34
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	461a      	mov	r2, r3
 800a704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a706:	61fb      	str	r3, [r7, #28]
 800a708:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70a:	69b9      	ldr	r1, [r7, #24]
 800a70c:	69fa      	ldr	r2, [r7, #28]
 800a70e:	e841 2300 	strex	r3, r2, [r1]
 800a712:	617b      	str	r3, [r7, #20]
   return(result);
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1e6      	bne.n	800a6e8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a71a:	e018      	b.n	800a74e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a720:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a724:	881a      	ldrh	r2, [r3, #0]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a72e:	b292      	uxth	r2, r2
 800a730:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a736:	1c9a      	adds	r2, r3, #2
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a742:	b29b      	uxth	r3, r3
 800a744:	3b01      	subs	r3, #1
 800a746:	b29a      	uxth	r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a74e:	bf00      	nop
 800a750:	3744      	adds	r7, #68	; 0x44
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr

0800a75a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a75a:	b580      	push	{r7, lr}
 800a75c:	b088      	sub	sp, #32
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	e853 3f00 	ldrex	r3, [r3]
 800a76e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a776:	61fb      	str	r3, [r7, #28]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	461a      	mov	r2, r3
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	61bb      	str	r3, [r7, #24]
 800a782:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a784:	6979      	ldr	r1, [r7, #20]
 800a786:	69ba      	ldr	r2, [r7, #24]
 800a788:	e841 2300 	strex	r3, r2, [r1]
 800a78c:	613b      	str	r3, [r7, #16]
   return(result);
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d1e6      	bne.n	800a762 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2220      	movs	r2, #32
 800a798:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f7f6 fc6f 	bl	8001084 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7a6:	bf00      	nop
 800a7a8:	3720      	adds	r7, #32
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b096      	sub	sp, #88	; 0x58
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a7bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7c4:	2b22      	cmp	r3, #34	; 0x22
 800a7c6:	f040 8094 	bne.w	800a8f2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a7d0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a7d4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a7d8:	b2d9      	uxtb	r1, r3
 800a7da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a7de:	b2da      	uxtb	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7e4:	400a      	ands	r2, r1
 800a7e6:	b2d2      	uxtb	r2, r2
 800a7e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ee:	1c5a      	adds	r2, r3, #1
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	3b01      	subs	r3, #1
 800a7fe:	b29a      	uxth	r2, r3
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d179      	bne.n	800a906 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81a:	e853 3f00 	ldrex	r3, [r3]
 800a81e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a822:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a826:	653b      	str	r3, [r7, #80]	; 0x50
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	461a      	mov	r2, r3
 800a82e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a830:	647b      	str	r3, [r7, #68]	; 0x44
 800a832:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a834:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a836:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a838:	e841 2300 	strex	r3, r2, [r1]
 800a83c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a83e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1e6      	bne.n	800a812 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	3308      	adds	r3, #8
 800a84a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84e:	e853 3f00 	ldrex	r3, [r3]
 800a852:	623b      	str	r3, [r7, #32]
   return(result);
 800a854:	6a3b      	ldr	r3, [r7, #32]
 800a856:	f023 0301 	bic.w	r3, r3, #1
 800a85a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	3308      	adds	r3, #8
 800a862:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a864:	633a      	str	r2, [r7, #48]	; 0x30
 800a866:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a868:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a86a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a86c:	e841 2300 	strex	r3, r2, [r1]
 800a870:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1e5      	bne.n	800a844 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2220      	movs	r2, #32
 800a87c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d12e      	bne.n	800a8ea <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	e853 3f00 	ldrex	r3, [r3]
 800a89e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f023 0310 	bic.w	r3, r3, #16
 800a8a6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8b0:	61fb      	str	r3, [r7, #28]
 800a8b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b4:	69b9      	ldr	r1, [r7, #24]
 800a8b6:	69fa      	ldr	r2, [r7, #28]
 800a8b8:	e841 2300 	strex	r3, r2, [r1]
 800a8bc:	617b      	str	r3, [r7, #20]
   return(result);
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1e6      	bne.n	800a892 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	69db      	ldr	r3, [r3, #28]
 800a8ca:	f003 0310 	and.w	r3, r3, #16
 800a8ce:	2b10      	cmp	r3, #16
 800a8d0:	d103      	bne.n	800a8da <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2210      	movs	r2, #16
 800a8d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f7ff f952 	bl	8009b8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a8e8:	e00d      	b.n	800a906 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7f6 fbd4 	bl	8001098 <HAL_UART_RxCpltCallback>
}
 800a8f0:	e009      	b.n	800a906 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	8b1b      	ldrh	r3, [r3, #24]
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f042 0208 	orr.w	r2, r2, #8
 800a902:	b292      	uxth	r2, r2
 800a904:	831a      	strh	r2, [r3, #24]
}
 800a906:	bf00      	nop
 800a908:	3758      	adds	r7, #88	; 0x58
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b096      	sub	sp, #88	; 0x58
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a91c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a924:	2b22      	cmp	r3, #34	; 0x22
 800a926:	f040 8094 	bne.w	800aa52 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a930:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a938:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a93a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a93e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a942:	4013      	ands	r3, r2
 800a944:	b29a      	uxth	r2, r3
 800a946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a948:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a94e:	1c9a      	adds	r2, r3, #2
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	3b01      	subs	r3, #1
 800a95e:	b29a      	uxth	r2, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d179      	bne.n	800aa66 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a97a:	e853 3f00 	ldrex	r3, [r3]
 800a97e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a982:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a986:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	461a      	mov	r2, r3
 800a98e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a990:	643b      	str	r3, [r7, #64]	; 0x40
 800a992:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a994:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a996:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a998:	e841 2300 	strex	r3, r2, [r1]
 800a99c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d1e6      	bne.n	800a972 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	3308      	adds	r3, #8
 800a9aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ac:	6a3b      	ldr	r3, [r7, #32]
 800a9ae:	e853 3f00 	ldrex	r3, [r3]
 800a9b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	f023 0301 	bic.w	r3, r3, #1
 800a9ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	3308      	adds	r3, #8
 800a9c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a9c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a9ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9cc:	e841 2300 	strex	r3, r2, [r1]
 800a9d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1e5      	bne.n	800a9a4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2220      	movs	r2, #32
 800a9dc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d12e      	bne.n	800aa4a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	e853 3f00 	ldrex	r3, [r3]
 800a9fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	f023 0310 	bic.w	r3, r3, #16
 800aa06:	647b      	str	r3, [r7, #68]	; 0x44
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa10:	61bb      	str	r3, [r7, #24]
 800aa12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa14:	6979      	ldr	r1, [r7, #20]
 800aa16:	69ba      	ldr	r2, [r7, #24]
 800aa18:	e841 2300 	strex	r3, r2, [r1]
 800aa1c:	613b      	str	r3, [r7, #16]
   return(result);
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d1e6      	bne.n	800a9f2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	69db      	ldr	r3, [r3, #28]
 800aa2a:	f003 0310 	and.w	r3, r3, #16
 800aa2e:	2b10      	cmp	r3, #16
 800aa30:	d103      	bne.n	800aa3a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2210      	movs	r2, #16
 800aa38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800aa40:	4619      	mov	r1, r3
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f7ff f8a2 	bl	8009b8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aa48:	e00d      	b.n	800aa66 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f7f6 fb24 	bl	8001098 <HAL_UART_RxCpltCallback>
}
 800aa50:	e009      	b.n	800aa66 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	8b1b      	ldrh	r3, [r3, #24]
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f042 0208 	orr.w	r2, r2, #8
 800aa62:	b292      	uxth	r2, r2
 800aa64:	831a      	strh	r2, [r3, #24]
}
 800aa66:	bf00      	nop
 800aa68:	3758      	adds	r7, #88	; 0x58
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}

0800aa6e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aa6e:	b480      	push	{r7}
 800aa70:	b083      	sub	sp, #12
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa76:	bf00      	nop
 800aa78:	370c      	adds	r7, #12
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
	...

0800aa84 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800aa88:	4904      	ldr	r1, [pc, #16]	; (800aa9c <MX_FATFS_Init+0x18>)
 800aa8a:	4805      	ldr	r0, [pc, #20]	; (800aaa0 <MX_FATFS_Init+0x1c>)
 800aa8c:	f000 fd8c 	bl	800b5a8 <FATFS_LinkDriver>
 800aa90:	4603      	mov	r3, r0
 800aa92:	461a      	mov	r2, r3
 800aa94:	4b03      	ldr	r3, [pc, #12]	; (800aaa4 <MX_FATFS_Init+0x20>)
 800aa96:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aa98:	bf00      	nop
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	20002a80 	.word	0x20002a80
 800aaa0:	2000001c 	.word	0x2000001c
 800aaa4:	20002a7c 	.word	0x20002a7c

0800aaa8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	4603      	mov	r3, r0
 800aab0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT; 	--- Commented out
//    return Stat;			--- Commented out
	return USER_SPI_initialize(pdrv); // ADDED
 800aab2:	79fb      	ldrb	r3, [r7, #7]
 800aab4:	4618      	mov	r0, r3
 800aab6:	f000 f9d7 	bl	800ae68 <USER_SPI_initialize>
 800aaba:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3708      	adds	r7, #8
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	4603      	mov	r3, r0
 800aacc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;		--- Commented out
//    return Stat;				--- Commented out
	return USER_SPI_status(pdrv); // ADDED
 800aace:	79fb      	ldrb	r3, [r7, #7]
 800aad0:	4618      	mov	r0, r3
 800aad2:	f000 fab5 	bl	800b040 <USER_SPI_status>
 800aad6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3708      	adds	r7, #8
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60b9      	str	r1, [r7, #8]
 800aae8:	607a      	str	r2, [r7, #4]
 800aaea:	603b      	str	r3, [r7, #0]
 800aaec:	4603      	mov	r3, r0
 800aaee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;			--- Commented out
	return USER_SPI_read(pdrv, buff, sector, count); // ADDED
 800aaf0:	7bf8      	ldrb	r0, [r7, #15]
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	68b9      	ldr	r1, [r7, #8]
 800aaf8:	f000 fab8 	bl	800b06c <USER_SPI_read>
 800aafc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3710      	adds	r7, #16
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}

0800ab06 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ab06:	b580      	push	{r7, lr}
 800ab08:	b084      	sub	sp, #16
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
 800ab10:	603b      	str	r3, [r7, #0]
 800ab12:	4603      	mov	r3, r0
 800ab14:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;			--- Commented out
	return USER_SPI_write(pdrv, buff, sector, count); // ADDED
 800ab16:	7bf8      	ldrb	r0, [r7, #15]
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	68b9      	ldr	r1, [r7, #8]
 800ab1e:	f000 fb0b 	bl	800b138 <USER_SPI_write>
 800ab22:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3710      	adds	r7, #16
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	4603      	mov	r3, r0
 800ab34:	603a      	str	r2, [r7, #0]
 800ab36:	71fb      	strb	r3, [r7, #7]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;	--- Commented out
//    return res;				--- Commented out
	return USER_SPI_ioctl(pdrv, cmd, buff); // ADDED
 800ab3c:	79b9      	ldrb	r1, [r7, #6]
 800ab3e:	79fb      	ldrb	r3, [r7, #7]
 800ab40:	683a      	ldr	r2, [r7, #0]
 800ab42:	4618      	mov	r0, r3
 800ab44:	f000 fb74 	bl	800b230 <USER_SPI_ioctl>
 800ab48:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3708      	adds	r7, #8
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
	...

0800ab54 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800ab5c:	f7f8 fe72 	bl	8003844 <HAL_GetTick>
 800ab60:	4603      	mov	r3, r0
 800ab62:	4a04      	ldr	r2, [pc, #16]	; (800ab74 <SPI_Timer_On+0x20>)
 800ab64:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800ab66:	4a04      	ldr	r2, [pc, #16]	; (800ab78 <SPI_Timer_On+0x24>)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6013      	str	r3, [r2, #0]
}
 800ab6c:	bf00      	nop
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	20002a88 	.word	0x20002a88
 800ab78:	20002a8c 	.word	0x20002a8c

0800ab7c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800ab80:	f7f8 fe60 	bl	8003844 <HAL_GetTick>
 800ab84:	4602      	mov	r2, r0
 800ab86:	4b06      	ldr	r3, [pc, #24]	; (800aba0 <SPI_Timer_Status+0x24>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	1ad2      	subs	r2, r2, r3
 800ab8c:	4b05      	ldr	r3, [pc, #20]	; (800aba4 <SPI_Timer_Status+0x28>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	bf34      	ite	cc
 800ab94:	2301      	movcc	r3, #1
 800ab96:	2300      	movcs	r3, #0
 800ab98:	b2db      	uxtb	r3, r3
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	20002a88 	.word	0x20002a88
 800aba4:	20002a8c 	.word	0x20002a8c

0800aba8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af02      	add	r7, sp, #8
 800abae:	4603      	mov	r3, r0
 800abb0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800abb2:	f107 020f 	add.w	r2, r7, #15
 800abb6:	1df9      	adds	r1, r7, #7
 800abb8:	2332      	movs	r3, #50	; 0x32
 800abba:	9300      	str	r3, [sp, #0]
 800abbc:	2301      	movs	r3, #1
 800abbe:	4804      	ldr	r0, [pc, #16]	; (800abd0 <xchg_spi+0x28>)
 800abc0:	f7fd fc30 	bl	8008424 <HAL_SPI_TransmitReceive>
    return rxDat;
 800abc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
 800abce:	bf00      	nop
 800abd0:	20000348 	.word	0x20000348

0800abd4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800abd4:	b590      	push	{r4, r7, lr}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800abde:	2300      	movs	r3, #0
 800abe0:	60fb      	str	r3, [r7, #12]
 800abe2:	e00a      	b.n	800abfa <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	18d4      	adds	r4, r2, r3
 800abea:	20ff      	movs	r0, #255	; 0xff
 800abec:	f7ff ffdc 	bl	800aba8 <xchg_spi>
 800abf0:	4603      	mov	r3, r0
 800abf2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	3301      	adds	r3, #1
 800abf8:	60fb      	str	r3, [r7, #12]
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d3f0      	bcc.n	800abe4 <rcvr_spi_multi+0x10>
	}
}
 800ac02:	bf00      	nop
 800ac04:	bf00      	nop
 800ac06:	3714      	adds	r7, #20
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd90      	pop	{r4, r7, pc}

0800ac0c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800ac16:	2300      	movs	r3, #0
 800ac18:	60fb      	str	r3, [r7, #12]
 800ac1a:	e009      	b.n	800ac30 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	4413      	add	r3, r2
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7ff ffbf 	bl	800aba8 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	60fb      	str	r3, [r7, #12]
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d3f1      	bcc.n	800ac1c <xmit_spi_multi+0x10>
	}
}
 800ac38:	bf00      	nop
 800ac3a:	bf00      	nop
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b086      	sub	sp, #24
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800ac4a:	f7f8 fdfb 	bl	8003844 <HAL_GetTick>
 800ac4e:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800ac54:	20ff      	movs	r0, #255	; 0xff
 800ac56:	f7ff ffa7 	bl	800aba8 <xchg_spi>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800ac5e:	7bfb      	ldrb	r3, [r7, #15]
 800ac60:	2bff      	cmp	r3, #255	; 0xff
 800ac62:	d007      	beq.n	800ac74 <wait_ready+0x32>
 800ac64:	f7f8 fdee 	bl	8003844 <HAL_GetTick>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	693a      	ldr	r2, [r7, #16]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d8ef      	bhi.n	800ac54 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800ac74:	7bfb      	ldrb	r3, [r7, #15]
 800ac76:	2bff      	cmp	r3, #255	; 0xff
 800ac78:	bf0c      	ite	eq
 800ac7a:	2301      	moveq	r3, #1
 800ac7c:	2300      	movne	r3, #0
 800ac7e:	b2db      	uxtb	r3, r3
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3718      	adds	r7, #24
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	2120      	movs	r1, #32
 800ac90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ac94:	f7fa fdaa 	bl	80057ec <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800ac98:	20ff      	movs	r0, #255	; 0xff
 800ac9a:	f7ff ff85 	bl	800aba8 <xchg_spi>

}
 800ac9e:	bf00      	nop
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800aca2:	b580      	push	{r7, lr}
 800aca4:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800aca6:	2200      	movs	r2, #0
 800aca8:	2120      	movs	r1, #32
 800acaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800acae:	f7fa fd9d 	bl	80057ec <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800acb2:	20ff      	movs	r0, #255	; 0xff
 800acb4:	f7ff ff78 	bl	800aba8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800acb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800acbc:	f7ff ffc1 	bl	800ac42 <wait_ready>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d001      	beq.n	800acca <spiselect+0x28>
 800acc6:	2301      	movs	r3, #1
 800acc8:	e002      	b.n	800acd0 <spiselect+0x2e>

	despiselect();
 800acca:	f7ff ffdd 	bl	800ac88 <despiselect>
	return 0;	/* Timeout */
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b084      	sub	sp, #16
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800acde:	20c8      	movs	r0, #200	; 0xc8
 800ace0:	f7ff ff38 	bl	800ab54 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800ace4:	20ff      	movs	r0, #255	; 0xff
 800ace6:	f7ff ff5f 	bl	800aba8 <xchg_spi>
 800acea:	4603      	mov	r3, r0
 800acec:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800acee:	7bfb      	ldrb	r3, [r7, #15]
 800acf0:	2bff      	cmp	r3, #255	; 0xff
 800acf2:	d104      	bne.n	800acfe <rcvr_datablock+0x2a>
 800acf4:	f7ff ff42 	bl	800ab7c <SPI_Timer_Status>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d1f2      	bne.n	800ace4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800acfe:	7bfb      	ldrb	r3, [r7, #15]
 800ad00:	2bfe      	cmp	r3, #254	; 0xfe
 800ad02:	d001      	beq.n	800ad08 <rcvr_datablock+0x34>
 800ad04:	2300      	movs	r3, #0
 800ad06:	e00a      	b.n	800ad1e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800ad08:	6839      	ldr	r1, [r7, #0]
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f7ff ff62 	bl	800abd4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800ad10:	20ff      	movs	r0, #255	; 0xff
 800ad12:	f7ff ff49 	bl	800aba8 <xchg_spi>
 800ad16:	20ff      	movs	r0, #255	; 0xff
 800ad18:	f7ff ff46 	bl	800aba8 <xchg_spi>

	return 1;						/* Function succeeded */
 800ad1c:	2301      	movs	r3, #1
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b084      	sub	sp, #16
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	460b      	mov	r3, r1
 800ad30:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800ad32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ad36:	f7ff ff84 	bl	800ac42 <wait_ready>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d101      	bne.n	800ad44 <xmit_datablock+0x1e>
 800ad40:	2300      	movs	r3, #0
 800ad42:	e01e      	b.n	800ad82 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800ad44:	78fb      	ldrb	r3, [r7, #3]
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7ff ff2e 	bl	800aba8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800ad4c:	78fb      	ldrb	r3, [r7, #3]
 800ad4e:	2bfd      	cmp	r3, #253	; 0xfd
 800ad50:	d016      	beq.n	800ad80 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800ad52:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f7ff ff58 	bl	800ac0c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800ad5c:	20ff      	movs	r0, #255	; 0xff
 800ad5e:	f7ff ff23 	bl	800aba8 <xchg_spi>
 800ad62:	20ff      	movs	r0, #255	; 0xff
 800ad64:	f7ff ff20 	bl	800aba8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800ad68:	20ff      	movs	r0, #255	; 0xff
 800ad6a:	f7ff ff1d 	bl	800aba8 <xchg_spi>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800ad72:	7bfb      	ldrb	r3, [r7, #15]
 800ad74:	f003 031f 	and.w	r3, r3, #31
 800ad78:	2b05      	cmp	r3, #5
 800ad7a:	d001      	beq.n	800ad80 <xmit_datablock+0x5a>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	e000      	b.n	800ad82 <xmit_datablock+0x5c>
	}
	return 1;
 800ad80:	2301      	movs	r3, #1
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3710      	adds	r7, #16
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b084      	sub	sp, #16
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	4603      	mov	r3, r0
 800ad92:	6039      	str	r1, [r7, #0]
 800ad94:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800ad96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	da0e      	bge.n	800adbc <send_cmd+0x32>
		cmd &= 0x7F;
 800ad9e:	79fb      	ldrb	r3, [r7, #7]
 800ada0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ada4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800ada6:	2100      	movs	r1, #0
 800ada8:	2037      	movs	r0, #55	; 0x37
 800adaa:	f7ff ffee 	bl	800ad8a <send_cmd>
 800adae:	4603      	mov	r3, r0
 800adb0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800adb2:	7bbb      	ldrb	r3, [r7, #14]
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d901      	bls.n	800adbc <send_cmd+0x32>
 800adb8:	7bbb      	ldrb	r3, [r7, #14]
 800adba:	e051      	b.n	800ae60 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800adbc:	79fb      	ldrb	r3, [r7, #7]
 800adbe:	2b0c      	cmp	r3, #12
 800adc0:	d008      	beq.n	800add4 <send_cmd+0x4a>
		despiselect();
 800adc2:	f7ff ff61 	bl	800ac88 <despiselect>
		if (!spiselect()) return 0xFF;
 800adc6:	f7ff ff6c 	bl	800aca2 <spiselect>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d101      	bne.n	800add4 <send_cmd+0x4a>
 800add0:	23ff      	movs	r3, #255	; 0xff
 800add2:	e045      	b.n	800ae60 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800add4:	79fb      	ldrb	r3, [r7, #7]
 800add6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adda:	b2db      	uxtb	r3, r3
 800addc:	4618      	mov	r0, r3
 800adde:	f7ff fee3 	bl	800aba8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	0e1b      	lsrs	r3, r3, #24
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	4618      	mov	r0, r3
 800adea:	f7ff fedd 	bl	800aba8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	0c1b      	lsrs	r3, r3, #16
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7ff fed7 	bl	800aba8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	0a1b      	lsrs	r3, r3, #8
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	4618      	mov	r0, r3
 800ae02:	f7ff fed1 	bl	800aba8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7ff fecc 	bl	800aba8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800ae10:	2301      	movs	r3, #1
 800ae12:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800ae14:	79fb      	ldrb	r3, [r7, #7]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d101      	bne.n	800ae1e <send_cmd+0x94>
 800ae1a:	2395      	movs	r3, #149	; 0x95
 800ae1c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800ae1e:	79fb      	ldrb	r3, [r7, #7]
 800ae20:	2b08      	cmp	r3, #8
 800ae22:	d101      	bne.n	800ae28 <send_cmd+0x9e>
 800ae24:	2387      	movs	r3, #135	; 0x87
 800ae26:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800ae28:	7bfb      	ldrb	r3, [r7, #15]
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7ff febc 	bl	800aba8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800ae30:	79fb      	ldrb	r3, [r7, #7]
 800ae32:	2b0c      	cmp	r3, #12
 800ae34:	d102      	bne.n	800ae3c <send_cmd+0xb2>
 800ae36:	20ff      	movs	r0, #255	; 0xff
 800ae38:	f7ff feb6 	bl	800aba8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800ae3c:	230a      	movs	r3, #10
 800ae3e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800ae40:	20ff      	movs	r0, #255	; 0xff
 800ae42:	f7ff feb1 	bl	800aba8 <xchg_spi>
 800ae46:	4603      	mov	r3, r0
 800ae48:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800ae4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	da05      	bge.n	800ae5e <send_cmd+0xd4>
 800ae52:	7bfb      	ldrb	r3, [r7, #15]
 800ae54:	3b01      	subs	r3, #1
 800ae56:	73fb      	strb	r3, [r7, #15]
 800ae58:	7bfb      	ldrb	r3, [r7, #15]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d1f0      	bne.n	800ae40 <send_cmd+0xb6>

	return res;							/* Return received response */
 800ae5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800ae68:	b590      	push	{r4, r7, lr}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	4603      	mov	r3, r0
 800ae70:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800ae72:	79fb      	ldrb	r3, [r7, #7]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d001      	beq.n	800ae7c <USER_SPI_initialize+0x14>
 800ae78:	2301      	movs	r3, #1
 800ae7a:	e0d6      	b.n	800b02a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800ae7c:	4b6d      	ldr	r3, [pc, #436]	; (800b034 <USER_SPI_initialize+0x1cc>)
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	f003 0302 	and.w	r3, r3, #2
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d003      	beq.n	800ae92 <USER_SPI_initialize+0x2a>
 800ae8a:	4b6a      	ldr	r3, [pc, #424]	; (800b034 <USER_SPI_initialize+0x1cc>)
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	e0cb      	b.n	800b02a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800ae92:	4b69      	ldr	r3, [pc, #420]	; (800b038 <USER_SPI_initialize+0x1d0>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ae9c:	4b66      	ldr	r3, [pc, #408]	; (800b038 <USER_SPI_initialize+0x1d0>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800aea4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800aea6:	230a      	movs	r3, #10
 800aea8:	73fb      	strb	r3, [r7, #15]
 800aeaa:	e005      	b.n	800aeb8 <USER_SPI_initialize+0x50>
 800aeac:	20ff      	movs	r0, #255	; 0xff
 800aeae:	f7ff fe7b 	bl	800aba8 <xchg_spi>
 800aeb2:	7bfb      	ldrb	r3, [r7, #15]
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	73fb      	strb	r3, [r7, #15]
 800aeb8:	7bfb      	ldrb	r3, [r7, #15]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1f6      	bne.n	800aeac <USER_SPI_initialize+0x44>

	ty = 0;
 800aebe:	2300      	movs	r3, #0
 800aec0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800aec2:	2100      	movs	r1, #0
 800aec4:	2000      	movs	r0, #0
 800aec6:	f7ff ff60 	bl	800ad8a <send_cmd>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b01      	cmp	r3, #1
 800aece:	f040 808b 	bne.w	800afe8 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800aed2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800aed6:	f7ff fe3d 	bl	800ab54 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800aeda:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aede:	2008      	movs	r0, #8
 800aee0:	f7ff ff53 	bl	800ad8a <send_cmd>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d151      	bne.n	800af8e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800aeea:	2300      	movs	r3, #0
 800aeec:	73fb      	strb	r3, [r7, #15]
 800aeee:	e00d      	b.n	800af0c <USER_SPI_initialize+0xa4>
 800aef0:	7bfc      	ldrb	r4, [r7, #15]
 800aef2:	20ff      	movs	r0, #255	; 0xff
 800aef4:	f7ff fe58 	bl	800aba8 <xchg_spi>
 800aef8:	4603      	mov	r3, r0
 800aefa:	461a      	mov	r2, r3
 800aefc:	f104 0310 	add.w	r3, r4, #16
 800af00:	443b      	add	r3, r7
 800af02:	f803 2c08 	strb.w	r2, [r3, #-8]
 800af06:	7bfb      	ldrb	r3, [r7, #15]
 800af08:	3301      	adds	r3, #1
 800af0a:	73fb      	strb	r3, [r7, #15]
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
 800af0e:	2b03      	cmp	r3, #3
 800af10:	d9ee      	bls.n	800aef0 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800af12:	7abb      	ldrb	r3, [r7, #10]
 800af14:	2b01      	cmp	r3, #1
 800af16:	d167      	bne.n	800afe8 <USER_SPI_initialize+0x180>
 800af18:	7afb      	ldrb	r3, [r7, #11]
 800af1a:	2baa      	cmp	r3, #170	; 0xaa
 800af1c:	d164      	bne.n	800afe8 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800af1e:	bf00      	nop
 800af20:	f7ff fe2c 	bl	800ab7c <SPI_Timer_Status>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d007      	beq.n	800af3a <USER_SPI_initialize+0xd2>
 800af2a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800af2e:	20a9      	movs	r0, #169	; 0xa9
 800af30:	f7ff ff2b 	bl	800ad8a <send_cmd>
 800af34:	4603      	mov	r3, r0
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1f2      	bne.n	800af20 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800af3a:	f7ff fe1f 	bl	800ab7c <SPI_Timer_Status>
 800af3e:	4603      	mov	r3, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d051      	beq.n	800afe8 <USER_SPI_initialize+0x180>
 800af44:	2100      	movs	r1, #0
 800af46:	203a      	movs	r0, #58	; 0x3a
 800af48:	f7ff ff1f 	bl	800ad8a <send_cmd>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d14a      	bne.n	800afe8 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800af52:	2300      	movs	r3, #0
 800af54:	73fb      	strb	r3, [r7, #15]
 800af56:	e00d      	b.n	800af74 <USER_SPI_initialize+0x10c>
 800af58:	7bfc      	ldrb	r4, [r7, #15]
 800af5a:	20ff      	movs	r0, #255	; 0xff
 800af5c:	f7ff fe24 	bl	800aba8 <xchg_spi>
 800af60:	4603      	mov	r3, r0
 800af62:	461a      	mov	r2, r3
 800af64:	f104 0310 	add.w	r3, r4, #16
 800af68:	443b      	add	r3, r7
 800af6a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800af6e:	7bfb      	ldrb	r3, [r7, #15]
 800af70:	3301      	adds	r3, #1
 800af72:	73fb      	strb	r3, [r7, #15]
 800af74:	7bfb      	ldrb	r3, [r7, #15]
 800af76:	2b03      	cmp	r3, #3
 800af78:	d9ee      	bls.n	800af58 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800af7a:	7a3b      	ldrb	r3, [r7, #8]
 800af7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af80:	2b00      	cmp	r3, #0
 800af82:	d001      	beq.n	800af88 <USER_SPI_initialize+0x120>
 800af84:	230c      	movs	r3, #12
 800af86:	e000      	b.n	800af8a <USER_SPI_initialize+0x122>
 800af88:	2304      	movs	r3, #4
 800af8a:	737b      	strb	r3, [r7, #13]
 800af8c:	e02c      	b.n	800afe8 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800af8e:	2100      	movs	r1, #0
 800af90:	20a9      	movs	r0, #169	; 0xa9
 800af92:	f7ff fefa 	bl	800ad8a <send_cmd>
 800af96:	4603      	mov	r3, r0
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d804      	bhi.n	800afa6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800af9c:	2302      	movs	r3, #2
 800af9e:	737b      	strb	r3, [r7, #13]
 800afa0:	23a9      	movs	r3, #169	; 0xa9
 800afa2:	73bb      	strb	r3, [r7, #14]
 800afa4:	e003      	b.n	800afae <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800afa6:	2301      	movs	r3, #1
 800afa8:	737b      	strb	r3, [r7, #13]
 800afaa:	2301      	movs	r3, #1
 800afac:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800afae:	bf00      	nop
 800afb0:	f7ff fde4 	bl	800ab7c <SPI_Timer_Status>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d007      	beq.n	800afca <USER_SPI_initialize+0x162>
 800afba:	7bbb      	ldrb	r3, [r7, #14]
 800afbc:	2100      	movs	r1, #0
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7ff fee3 	bl	800ad8a <send_cmd>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1f2      	bne.n	800afb0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800afca:	f7ff fdd7 	bl	800ab7c <SPI_Timer_Status>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d007      	beq.n	800afe4 <USER_SPI_initialize+0x17c>
 800afd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800afd8:	2010      	movs	r0, #16
 800afda:	f7ff fed6 	bl	800ad8a <send_cmd>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d001      	beq.n	800afe8 <USER_SPI_initialize+0x180>
				ty = 0;
 800afe4:	2300      	movs	r3, #0
 800afe6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800afe8:	4a14      	ldr	r2, [pc, #80]	; (800b03c <USER_SPI_initialize+0x1d4>)
 800afea:	7b7b      	ldrb	r3, [r7, #13]
 800afec:	7013      	strb	r3, [r2, #0]
	despiselect();
 800afee:	f7ff fe4b 	bl	800ac88 <despiselect>

	if (ty) {			/* OK */
 800aff2:	7b7b      	ldrb	r3, [r7, #13]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d012      	beq.n	800b01e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800aff8:	4b0f      	ldr	r3, [pc, #60]	; (800b038 <USER_SPI_initialize+0x1d0>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b002:	4b0d      	ldr	r3, [pc, #52]	; (800b038 <USER_SPI_initialize+0x1d0>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f042 0210 	orr.w	r2, r2, #16
 800b00a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800b00c:	4b09      	ldr	r3, [pc, #36]	; (800b034 <USER_SPI_initialize+0x1cc>)
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	b2db      	uxtb	r3, r3
 800b012:	f023 0301 	bic.w	r3, r3, #1
 800b016:	b2da      	uxtb	r2, r3
 800b018:	4b06      	ldr	r3, [pc, #24]	; (800b034 <USER_SPI_initialize+0x1cc>)
 800b01a:	701a      	strb	r2, [r3, #0]
 800b01c:	e002      	b.n	800b024 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800b01e:	4b05      	ldr	r3, [pc, #20]	; (800b034 <USER_SPI_initialize+0x1cc>)
 800b020:	2201      	movs	r2, #1
 800b022:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800b024:	4b03      	ldr	r3, [pc, #12]	; (800b034 <USER_SPI_initialize+0x1cc>)
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	b2db      	uxtb	r3, r3
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3714      	adds	r7, #20
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd90      	pop	{r4, r7, pc}
 800b032:	bf00      	nop
 800b034:	20000030 	.word	0x20000030
 800b038:	20000348 	.word	0x20000348
 800b03c:	20002a84 	.word	0x20002a84

0800b040 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	4603      	mov	r3, r0
 800b048:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800b04a:	79fb      	ldrb	r3, [r7, #7]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d001      	beq.n	800b054 <USER_SPI_status+0x14>
 800b050:	2301      	movs	r3, #1
 800b052:	e002      	b.n	800b05a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800b054:	4b04      	ldr	r3, [pc, #16]	; (800b068 <USER_SPI_status+0x28>)
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	b2db      	uxtb	r3, r3
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	370c      	adds	r7, #12
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	20000030 	.word	0x20000030

0800b06c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	60b9      	str	r1, [r7, #8]
 800b074:	607a      	str	r2, [r7, #4]
 800b076:	603b      	str	r3, [r7, #0]
 800b078:	4603      	mov	r3, r0
 800b07a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b07c:	7bfb      	ldrb	r3, [r7, #15]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d102      	bne.n	800b088 <USER_SPI_read+0x1c>
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d101      	bne.n	800b08c <USER_SPI_read+0x20>
 800b088:	2304      	movs	r3, #4
 800b08a:	e04d      	b.n	800b128 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b08c:	4b28      	ldr	r3, [pc, #160]	; (800b130 <USER_SPI_read+0xc4>)
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	b2db      	uxtb	r3, r3
 800b092:	f003 0301 	and.w	r3, r3, #1
 800b096:	2b00      	cmp	r3, #0
 800b098:	d001      	beq.n	800b09e <USER_SPI_read+0x32>
 800b09a:	2303      	movs	r3, #3
 800b09c:	e044      	b.n	800b128 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800b09e:	4b25      	ldr	r3, [pc, #148]	; (800b134 <USER_SPI_read+0xc8>)
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	f003 0308 	and.w	r3, r3, #8
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d102      	bne.n	800b0b0 <USER_SPI_read+0x44>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	025b      	lsls	r3, r3, #9
 800b0ae:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d111      	bne.n	800b0da <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800b0b6:	6879      	ldr	r1, [r7, #4]
 800b0b8:	2011      	movs	r0, #17
 800b0ba:	f7ff fe66 	bl	800ad8a <send_cmd>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d129      	bne.n	800b118 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800b0c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b0c8:	68b8      	ldr	r0, [r7, #8]
 800b0ca:	f7ff fe03 	bl	800acd4 <rcvr_datablock>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d021      	beq.n	800b118 <USER_SPI_read+0xac>
			count = 0;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	603b      	str	r3, [r7, #0]
 800b0d8:	e01e      	b.n	800b118 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800b0da:	6879      	ldr	r1, [r7, #4]
 800b0dc:	2012      	movs	r0, #18
 800b0de:	f7ff fe54 	bl	800ad8a <send_cmd>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d117      	bne.n	800b118 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800b0e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b0ec:	68b8      	ldr	r0, [r7, #8]
 800b0ee:	f7ff fdf1 	bl	800acd4 <rcvr_datablock>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d00a      	beq.n	800b10e <USER_SPI_read+0xa2>
				buff += 512;
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b0fe:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	3b01      	subs	r3, #1
 800b104:	603b      	str	r3, [r7, #0]
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d1ed      	bne.n	800b0e8 <USER_SPI_read+0x7c>
 800b10c:	e000      	b.n	800b110 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800b10e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800b110:	2100      	movs	r1, #0
 800b112:	200c      	movs	r0, #12
 800b114:	f7ff fe39 	bl	800ad8a <send_cmd>
		}
	}
	despiselect();
 800b118:	f7ff fdb6 	bl	800ac88 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	bf14      	ite	ne
 800b122:	2301      	movne	r3, #1
 800b124:	2300      	moveq	r3, #0
 800b126:	b2db      	uxtb	r3, r3
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3710      	adds	r7, #16
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	20000030 	.word	0x20000030
 800b134:	20002a84 	.word	0x20002a84

0800b138 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60b9      	str	r1, [r7, #8]
 800b140:	607a      	str	r2, [r7, #4]
 800b142:	603b      	str	r3, [r7, #0]
 800b144:	4603      	mov	r3, r0
 800b146:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b148:	7bfb      	ldrb	r3, [r7, #15]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d102      	bne.n	800b154 <USER_SPI_write+0x1c>
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d101      	bne.n	800b158 <USER_SPI_write+0x20>
 800b154:	2304      	movs	r3, #4
 800b156:	e063      	b.n	800b220 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800b158:	4b33      	ldr	r3, [pc, #204]	; (800b228 <USER_SPI_write+0xf0>)
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	f003 0301 	and.w	r3, r3, #1
 800b162:	2b00      	cmp	r3, #0
 800b164:	d001      	beq.n	800b16a <USER_SPI_write+0x32>
 800b166:	2303      	movs	r3, #3
 800b168:	e05a      	b.n	800b220 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800b16a:	4b2f      	ldr	r3, [pc, #188]	; (800b228 <USER_SPI_write+0xf0>)
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	f003 0304 	and.w	r3, r3, #4
 800b174:	2b00      	cmp	r3, #0
 800b176:	d001      	beq.n	800b17c <USER_SPI_write+0x44>
 800b178:	2302      	movs	r3, #2
 800b17a:	e051      	b.n	800b220 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800b17c:	4b2b      	ldr	r3, [pc, #172]	; (800b22c <USER_SPI_write+0xf4>)
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	f003 0308 	and.w	r3, r3, #8
 800b184:	2b00      	cmp	r3, #0
 800b186:	d102      	bne.n	800b18e <USER_SPI_write+0x56>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	025b      	lsls	r3, r3, #9
 800b18c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	2b01      	cmp	r3, #1
 800b192:	d110      	bne.n	800b1b6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800b194:	6879      	ldr	r1, [r7, #4]
 800b196:	2018      	movs	r0, #24
 800b198:	f7ff fdf7 	bl	800ad8a <send_cmd>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d136      	bne.n	800b210 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800b1a2:	21fe      	movs	r1, #254	; 0xfe
 800b1a4:	68b8      	ldr	r0, [r7, #8]
 800b1a6:	f7ff fdbe 	bl	800ad26 <xmit_datablock>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d02f      	beq.n	800b210 <USER_SPI_write+0xd8>
			count = 0;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	603b      	str	r3, [r7, #0]
 800b1b4:	e02c      	b.n	800b210 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800b1b6:	4b1d      	ldr	r3, [pc, #116]	; (800b22c <USER_SPI_write+0xf4>)
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	f003 0306 	and.w	r3, r3, #6
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d003      	beq.n	800b1ca <USER_SPI_write+0x92>
 800b1c2:	6839      	ldr	r1, [r7, #0]
 800b1c4:	2097      	movs	r0, #151	; 0x97
 800b1c6:	f7ff fde0 	bl	800ad8a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800b1ca:	6879      	ldr	r1, [r7, #4]
 800b1cc:	2019      	movs	r0, #25
 800b1ce:	f7ff fddc 	bl	800ad8a <send_cmd>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d11b      	bne.n	800b210 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800b1d8:	21fc      	movs	r1, #252	; 0xfc
 800b1da:	68b8      	ldr	r0, [r7, #8]
 800b1dc:	f7ff fda3 	bl	800ad26 <xmit_datablock>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d00a      	beq.n	800b1fc <USER_SPI_write+0xc4>
				buff += 512;
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b1ec:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	603b      	str	r3, [r7, #0]
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d1ee      	bne.n	800b1d8 <USER_SPI_write+0xa0>
 800b1fa:	e000      	b.n	800b1fe <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800b1fc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800b1fe:	21fd      	movs	r1, #253	; 0xfd
 800b200:	2000      	movs	r0, #0
 800b202:	f7ff fd90 	bl	800ad26 <xmit_datablock>
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d101      	bne.n	800b210 <USER_SPI_write+0xd8>
 800b20c:	2301      	movs	r3, #1
 800b20e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800b210:	f7ff fd3a 	bl	800ac88 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	bf14      	ite	ne
 800b21a:	2301      	movne	r3, #1
 800b21c:	2300      	moveq	r3, #0
 800b21e:	b2db      	uxtb	r3, r3
}
 800b220:	4618      	mov	r0, r3
 800b222:	3710      	adds	r7, #16
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	20000030 	.word	0x20000030
 800b22c:	20002a84 	.word	0x20002a84

0800b230 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b08c      	sub	sp, #48	; 0x30
 800b234:	af00      	add	r7, sp, #0
 800b236:	4603      	mov	r3, r0
 800b238:	603a      	str	r2, [r7, #0]
 800b23a:	71fb      	strb	r3, [r7, #7]
 800b23c:	460b      	mov	r3, r1
 800b23e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800b240:	79fb      	ldrb	r3, [r7, #7]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d001      	beq.n	800b24a <USER_SPI_ioctl+0x1a>
 800b246:	2304      	movs	r3, #4
 800b248:	e15a      	b.n	800b500 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b24a:	4baf      	ldr	r3, [pc, #700]	; (800b508 <USER_SPI_ioctl+0x2d8>)
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	f003 0301 	and.w	r3, r3, #1
 800b254:	2b00      	cmp	r3, #0
 800b256:	d001      	beq.n	800b25c <USER_SPI_ioctl+0x2c>
 800b258:	2303      	movs	r3, #3
 800b25a:	e151      	b.n	800b500 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800b262:	79bb      	ldrb	r3, [r7, #6]
 800b264:	2b04      	cmp	r3, #4
 800b266:	f200 8136 	bhi.w	800b4d6 <USER_SPI_ioctl+0x2a6>
 800b26a:	a201      	add	r2, pc, #4	; (adr r2, 800b270 <USER_SPI_ioctl+0x40>)
 800b26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b270:	0800b285 	.word	0x0800b285
 800b274:	0800b299 	.word	0x0800b299
 800b278:	0800b4d7 	.word	0x0800b4d7
 800b27c:	0800b345 	.word	0x0800b345
 800b280:	0800b43b 	.word	0x0800b43b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800b284:	f7ff fd0d 	bl	800aca2 <spiselect>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f000 8127 	beq.w	800b4de <USER_SPI_ioctl+0x2ae>
 800b290:	2300      	movs	r3, #0
 800b292:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800b296:	e122      	b.n	800b4de <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800b298:	2100      	movs	r1, #0
 800b29a:	2009      	movs	r0, #9
 800b29c:	f7ff fd75 	bl	800ad8a <send_cmd>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f040 811d 	bne.w	800b4e2 <USER_SPI_ioctl+0x2b2>
 800b2a8:	f107 030c 	add.w	r3, r7, #12
 800b2ac:	2110      	movs	r1, #16
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7ff fd10 	bl	800acd4 <rcvr_datablock>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	f000 8113 	beq.w	800b4e2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800b2bc:	7b3b      	ldrb	r3, [r7, #12]
 800b2be:	099b      	lsrs	r3, r3, #6
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d111      	bne.n	800b2ea <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800b2c6:	7d7b      	ldrb	r3, [r7, #21]
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	7d3b      	ldrb	r3, [r7, #20]
 800b2cc:	021b      	lsls	r3, r3, #8
 800b2ce:	4413      	add	r3, r2
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	7cfb      	ldrb	r3, [r7, #19]
 800b2d4:	041b      	lsls	r3, r3, #16
 800b2d6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800b2da:	4413      	add	r3, r2
 800b2dc:	3301      	adds	r3, #1
 800b2de:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	029a      	lsls	r2, r3, #10
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	601a      	str	r2, [r3, #0]
 800b2e8:	e028      	b.n	800b33c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800b2ea:	7c7b      	ldrb	r3, [r7, #17]
 800b2ec:	f003 030f 	and.w	r3, r3, #15
 800b2f0:	b2da      	uxtb	r2, r3
 800b2f2:	7dbb      	ldrb	r3, [r7, #22]
 800b2f4:	09db      	lsrs	r3, r3, #7
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	4413      	add	r3, r2
 800b2fa:	b2da      	uxtb	r2, r3
 800b2fc:	7d7b      	ldrb	r3, [r7, #21]
 800b2fe:	005b      	lsls	r3, r3, #1
 800b300:	b2db      	uxtb	r3, r3
 800b302:	f003 0306 	and.w	r3, r3, #6
 800b306:	b2db      	uxtb	r3, r3
 800b308:	4413      	add	r3, r2
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	3302      	adds	r3, #2
 800b30e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800b312:	7d3b      	ldrb	r3, [r7, #20]
 800b314:	099b      	lsrs	r3, r3, #6
 800b316:	b2db      	uxtb	r3, r3
 800b318:	461a      	mov	r2, r3
 800b31a:	7cfb      	ldrb	r3, [r7, #19]
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	441a      	add	r2, r3
 800b320:	7cbb      	ldrb	r3, [r7, #18]
 800b322:	029b      	lsls	r3, r3, #10
 800b324:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b328:	4413      	add	r3, r2
 800b32a:	3301      	adds	r3, #1
 800b32c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800b32e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b332:	3b09      	subs	r3, #9
 800b334:	69fa      	ldr	r2, [r7, #28]
 800b336:	409a      	lsls	r2, r3
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800b33c:	2300      	movs	r3, #0
 800b33e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800b342:	e0ce      	b.n	800b4e2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800b344:	4b71      	ldr	r3, [pc, #452]	; (800b50c <USER_SPI_ioctl+0x2dc>)
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	f003 0304 	and.w	r3, r3, #4
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d031      	beq.n	800b3b4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800b350:	2100      	movs	r1, #0
 800b352:	208d      	movs	r0, #141	; 0x8d
 800b354:	f7ff fd19 	bl	800ad8a <send_cmd>
 800b358:	4603      	mov	r3, r0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	f040 80c3 	bne.w	800b4e6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800b360:	20ff      	movs	r0, #255	; 0xff
 800b362:	f7ff fc21 	bl	800aba8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800b366:	f107 030c 	add.w	r3, r7, #12
 800b36a:	2110      	movs	r1, #16
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7ff fcb1 	bl	800acd4 <rcvr_datablock>
 800b372:	4603      	mov	r3, r0
 800b374:	2b00      	cmp	r3, #0
 800b376:	f000 80b6 	beq.w	800b4e6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800b37a:	2330      	movs	r3, #48	; 0x30
 800b37c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800b380:	e007      	b.n	800b392 <USER_SPI_ioctl+0x162>
 800b382:	20ff      	movs	r0, #255	; 0xff
 800b384:	f7ff fc10 	bl	800aba8 <xchg_spi>
 800b388:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b38c:	3b01      	subs	r3, #1
 800b38e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800b392:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1f3      	bne.n	800b382 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800b39a:	7dbb      	ldrb	r3, [r7, #22]
 800b39c:	091b      	lsrs	r3, r3, #4
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	2310      	movs	r3, #16
 800b3a4:	fa03 f202 	lsl.w	r2, r3, r2
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800b3b2:	e098      	b.n	800b4e6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	2009      	movs	r0, #9
 800b3b8:	f7ff fce7 	bl	800ad8a <send_cmd>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	f040 8091 	bne.w	800b4e6 <USER_SPI_ioctl+0x2b6>
 800b3c4:	f107 030c 	add.w	r3, r7, #12
 800b3c8:	2110      	movs	r1, #16
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7ff fc82 	bl	800acd4 <rcvr_datablock>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	f000 8087 	beq.w	800b4e6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800b3d8:	4b4c      	ldr	r3, [pc, #304]	; (800b50c <USER_SPI_ioctl+0x2dc>)
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	f003 0302 	and.w	r3, r3, #2
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d012      	beq.n	800b40a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800b3e4:	7dbb      	ldrb	r3, [r7, #22]
 800b3e6:	005b      	lsls	r3, r3, #1
 800b3e8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800b3ec:	7dfa      	ldrb	r2, [r7, #23]
 800b3ee:	09d2      	lsrs	r2, r2, #7
 800b3f0:	b2d2      	uxtb	r2, r2
 800b3f2:	4413      	add	r3, r2
 800b3f4:	1c5a      	adds	r2, r3, #1
 800b3f6:	7e7b      	ldrb	r3, [r7, #25]
 800b3f8:	099b      	lsrs	r3, r3, #6
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b402:	461a      	mov	r2, r3
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	601a      	str	r2, [r3, #0]
 800b408:	e013      	b.n	800b432 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800b40a:	7dbb      	ldrb	r3, [r7, #22]
 800b40c:	109b      	asrs	r3, r3, #2
 800b40e:	b29b      	uxth	r3, r3
 800b410:	f003 031f 	and.w	r3, r3, #31
 800b414:	3301      	adds	r3, #1
 800b416:	7dfa      	ldrb	r2, [r7, #23]
 800b418:	00d2      	lsls	r2, r2, #3
 800b41a:	f002 0218 	and.w	r2, r2, #24
 800b41e:	7df9      	ldrb	r1, [r7, #23]
 800b420:	0949      	lsrs	r1, r1, #5
 800b422:	b2c9      	uxtb	r1, r1
 800b424:	440a      	add	r2, r1
 800b426:	3201      	adds	r2, #1
 800b428:	fb02 f303 	mul.w	r3, r2, r3
 800b42c:	461a      	mov	r2, r3
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800b432:	2300      	movs	r3, #0
 800b434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800b438:	e055      	b.n	800b4e6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b43a:	4b34      	ldr	r3, [pc, #208]	; (800b50c <USER_SPI_ioctl+0x2dc>)
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	f003 0306 	and.w	r3, r3, #6
 800b442:	2b00      	cmp	r3, #0
 800b444:	d051      	beq.n	800b4ea <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b446:	f107 020c 	add.w	r2, r7, #12
 800b44a:	79fb      	ldrb	r3, [r7, #7]
 800b44c:	210b      	movs	r1, #11
 800b44e:	4618      	mov	r0, r3
 800b450:	f7ff feee 	bl	800b230 <USER_SPI_ioctl>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d149      	bne.n	800b4ee <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b45a:	7b3b      	ldrb	r3, [r7, #12]
 800b45c:	099b      	lsrs	r3, r3, #6
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	2b00      	cmp	r3, #0
 800b462:	d104      	bne.n	800b46e <USER_SPI_ioctl+0x23e>
 800b464:	7dbb      	ldrb	r3, [r7, #22]
 800b466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d041      	beq.n	800b4f2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	623b      	str	r3, [r7, #32]
 800b472:	6a3b      	ldr	r3, [r7, #32]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	62bb      	str	r3, [r7, #40]	; 0x28
 800b478:	6a3b      	ldr	r3, [r7, #32]
 800b47a:	685b      	ldr	r3, [r3, #4]
 800b47c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800b47e:	4b23      	ldr	r3, [pc, #140]	; (800b50c <USER_SPI_ioctl+0x2dc>)
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	f003 0308 	and.w	r3, r3, #8
 800b486:	2b00      	cmp	r3, #0
 800b488:	d105      	bne.n	800b496 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800b48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48c:	025b      	lsls	r3, r3, #9
 800b48e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b492:	025b      	lsls	r3, r3, #9
 800b494:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800b496:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b498:	2020      	movs	r0, #32
 800b49a:	f7ff fc76 	bl	800ad8a <send_cmd>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d128      	bne.n	800b4f6 <USER_SPI_ioctl+0x2c6>
 800b4a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b4a6:	2021      	movs	r0, #33	; 0x21
 800b4a8:	f7ff fc6f 	bl	800ad8a <send_cmd>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d121      	bne.n	800b4f6 <USER_SPI_ioctl+0x2c6>
 800b4b2:	2100      	movs	r1, #0
 800b4b4:	2026      	movs	r0, #38	; 0x26
 800b4b6:	f7ff fc68 	bl	800ad8a <send_cmd>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d11a      	bne.n	800b4f6 <USER_SPI_ioctl+0x2c6>
 800b4c0:	f247 5030 	movw	r0, #30000	; 0x7530
 800b4c4:	f7ff fbbd 	bl	800ac42 <wait_ready>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d013      	beq.n	800b4f6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800b4d4:	e00f      	b.n	800b4f6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800b4d6:	2304      	movs	r3, #4
 800b4d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b4dc:	e00c      	b.n	800b4f8 <USER_SPI_ioctl+0x2c8>
		break;
 800b4de:	bf00      	nop
 800b4e0:	e00a      	b.n	800b4f8 <USER_SPI_ioctl+0x2c8>
		break;
 800b4e2:	bf00      	nop
 800b4e4:	e008      	b.n	800b4f8 <USER_SPI_ioctl+0x2c8>
		break;
 800b4e6:	bf00      	nop
 800b4e8:	e006      	b.n	800b4f8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b4ea:	bf00      	nop
 800b4ec:	e004      	b.n	800b4f8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b4ee:	bf00      	nop
 800b4f0:	e002      	b.n	800b4f8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b4f2:	bf00      	nop
 800b4f4:	e000      	b.n	800b4f8 <USER_SPI_ioctl+0x2c8>
		break;
 800b4f6:	bf00      	nop
	}

	despiselect();
 800b4f8:	f7ff fbc6 	bl	800ac88 <despiselect>

	return res;
 800b4fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b500:	4618      	mov	r0, r3
 800b502:	3730      	adds	r7, #48	; 0x30
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	20000030 	.word	0x20000030
 800b50c:	20002a84 	.word	0x20002a84

0800b510 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b510:	b480      	push	{r7}
 800b512:	b087      	sub	sp, #28
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	4613      	mov	r3, r2
 800b51c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b51e:	2301      	movs	r3, #1
 800b520:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b522:	2300      	movs	r3, #0
 800b524:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b526:	4b1f      	ldr	r3, [pc, #124]	; (800b5a4 <FATFS_LinkDriverEx+0x94>)
 800b528:	7a5b      	ldrb	r3, [r3, #9]
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d131      	bne.n	800b594 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b530:	4b1c      	ldr	r3, [pc, #112]	; (800b5a4 <FATFS_LinkDriverEx+0x94>)
 800b532:	7a5b      	ldrb	r3, [r3, #9]
 800b534:	b2db      	uxtb	r3, r3
 800b536:	461a      	mov	r2, r3
 800b538:	4b1a      	ldr	r3, [pc, #104]	; (800b5a4 <FATFS_LinkDriverEx+0x94>)
 800b53a:	2100      	movs	r1, #0
 800b53c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b53e:	4b19      	ldr	r3, [pc, #100]	; (800b5a4 <FATFS_LinkDriverEx+0x94>)
 800b540:	7a5b      	ldrb	r3, [r3, #9]
 800b542:	b2db      	uxtb	r3, r3
 800b544:	4a17      	ldr	r2, [pc, #92]	; (800b5a4 <FATFS_LinkDriverEx+0x94>)
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	4413      	add	r3, r2
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b54e:	4b15      	ldr	r3, [pc, #84]	; (800b5a4 <FATFS_LinkDriverEx+0x94>)
 800b550:	7a5b      	ldrb	r3, [r3, #9]
 800b552:	b2db      	uxtb	r3, r3
 800b554:	461a      	mov	r2, r3
 800b556:	4b13      	ldr	r3, [pc, #76]	; (800b5a4 <FATFS_LinkDriverEx+0x94>)
 800b558:	4413      	add	r3, r2
 800b55a:	79fa      	ldrb	r2, [r7, #7]
 800b55c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b55e:	4b11      	ldr	r3, [pc, #68]	; (800b5a4 <FATFS_LinkDriverEx+0x94>)
 800b560:	7a5b      	ldrb	r3, [r3, #9]
 800b562:	b2db      	uxtb	r3, r3
 800b564:	1c5a      	adds	r2, r3, #1
 800b566:	b2d1      	uxtb	r1, r2
 800b568:	4a0e      	ldr	r2, [pc, #56]	; (800b5a4 <FATFS_LinkDriverEx+0x94>)
 800b56a:	7251      	strb	r1, [r2, #9]
 800b56c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b56e:	7dbb      	ldrb	r3, [r7, #22]
 800b570:	3330      	adds	r3, #48	; 0x30
 800b572:	b2da      	uxtb	r2, r3
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	3301      	adds	r3, #1
 800b57c:	223a      	movs	r2, #58	; 0x3a
 800b57e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	3302      	adds	r3, #2
 800b584:	222f      	movs	r2, #47	; 0x2f
 800b586:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	3303      	adds	r3, #3
 800b58c:	2200      	movs	r2, #0
 800b58e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b590:	2300      	movs	r3, #0
 800b592:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b594:	7dfb      	ldrb	r3, [r7, #23]
}
 800b596:	4618      	mov	r0, r3
 800b598:	371c      	adds	r7, #28
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	20002a90 	.word	0x20002a90

0800b5a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	6839      	ldr	r1, [r7, #0]
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f7ff ffaa 	bl	800b510 <FATFS_LinkDriverEx>
 800b5bc:	4603      	mov	r3, r0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3708      	adds	r7, #8
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <atoi>:
 800b5c6:	220a      	movs	r2, #10
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	f001 bf25 	b.w	800d418 <strtol>
	...

0800b5d0 <__errno>:
 800b5d0:	4b01      	ldr	r3, [pc, #4]	; (800b5d8 <__errno+0x8>)
 800b5d2:	6818      	ldr	r0, [r3, #0]
 800b5d4:	4770      	bx	lr
 800b5d6:	bf00      	nop
 800b5d8:	20000034 	.word	0x20000034

0800b5dc <__libc_init_array>:
 800b5dc:	b570      	push	{r4, r5, r6, lr}
 800b5de:	4d0d      	ldr	r5, [pc, #52]	; (800b614 <__libc_init_array+0x38>)
 800b5e0:	4c0d      	ldr	r4, [pc, #52]	; (800b618 <__libc_init_array+0x3c>)
 800b5e2:	1b64      	subs	r4, r4, r5
 800b5e4:	10a4      	asrs	r4, r4, #2
 800b5e6:	2600      	movs	r6, #0
 800b5e8:	42a6      	cmp	r6, r4
 800b5ea:	d109      	bne.n	800b600 <__libc_init_array+0x24>
 800b5ec:	4d0b      	ldr	r5, [pc, #44]	; (800b61c <__libc_init_array+0x40>)
 800b5ee:	4c0c      	ldr	r4, [pc, #48]	; (800b620 <__libc_init_array+0x44>)
 800b5f0:	f004 fd8a 	bl	8010108 <_init>
 800b5f4:	1b64      	subs	r4, r4, r5
 800b5f6:	10a4      	asrs	r4, r4, #2
 800b5f8:	2600      	movs	r6, #0
 800b5fa:	42a6      	cmp	r6, r4
 800b5fc:	d105      	bne.n	800b60a <__libc_init_array+0x2e>
 800b5fe:	bd70      	pop	{r4, r5, r6, pc}
 800b600:	f855 3b04 	ldr.w	r3, [r5], #4
 800b604:	4798      	blx	r3
 800b606:	3601      	adds	r6, #1
 800b608:	e7ee      	b.n	800b5e8 <__libc_init_array+0xc>
 800b60a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b60e:	4798      	blx	r3
 800b610:	3601      	adds	r6, #1
 800b612:	e7f2      	b.n	800b5fa <__libc_init_array+0x1e>
 800b614:	08010ae8 	.word	0x08010ae8
 800b618:	08010ae8 	.word	0x08010ae8
 800b61c:	08010ae8 	.word	0x08010ae8
 800b620:	08010aec 	.word	0x08010aec

0800b624 <__itoa>:
 800b624:	1e93      	subs	r3, r2, #2
 800b626:	2b22      	cmp	r3, #34	; 0x22
 800b628:	b510      	push	{r4, lr}
 800b62a:	460c      	mov	r4, r1
 800b62c:	d904      	bls.n	800b638 <__itoa+0x14>
 800b62e:	2300      	movs	r3, #0
 800b630:	700b      	strb	r3, [r1, #0]
 800b632:	461c      	mov	r4, r3
 800b634:	4620      	mov	r0, r4
 800b636:	bd10      	pop	{r4, pc}
 800b638:	2a0a      	cmp	r2, #10
 800b63a:	d109      	bne.n	800b650 <__itoa+0x2c>
 800b63c:	2800      	cmp	r0, #0
 800b63e:	da07      	bge.n	800b650 <__itoa+0x2c>
 800b640:	232d      	movs	r3, #45	; 0x2d
 800b642:	700b      	strb	r3, [r1, #0]
 800b644:	4240      	negs	r0, r0
 800b646:	2101      	movs	r1, #1
 800b648:	4421      	add	r1, r4
 800b64a:	f001 feef 	bl	800d42c <__utoa>
 800b64e:	e7f1      	b.n	800b634 <__itoa+0x10>
 800b650:	2100      	movs	r1, #0
 800b652:	e7f9      	b.n	800b648 <__itoa+0x24>

0800b654 <itoa>:
 800b654:	f7ff bfe6 	b.w	800b624 <__itoa>

0800b658 <malloc>:
 800b658:	4b02      	ldr	r3, [pc, #8]	; (800b664 <malloc+0xc>)
 800b65a:	4601      	mov	r1, r0
 800b65c:	6818      	ldr	r0, [r3, #0]
 800b65e:	f000 b877 	b.w	800b750 <_malloc_r>
 800b662:	bf00      	nop
 800b664:	20000034 	.word	0x20000034

0800b668 <memset>:
 800b668:	4402      	add	r2, r0
 800b66a:	4603      	mov	r3, r0
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d100      	bne.n	800b672 <memset+0xa>
 800b670:	4770      	bx	lr
 800b672:	f803 1b01 	strb.w	r1, [r3], #1
 800b676:	e7f9      	b.n	800b66c <memset+0x4>

0800b678 <_free_r>:
 800b678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b67a:	2900      	cmp	r1, #0
 800b67c:	d044      	beq.n	800b708 <_free_r+0x90>
 800b67e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b682:	9001      	str	r0, [sp, #4]
 800b684:	2b00      	cmp	r3, #0
 800b686:	f1a1 0404 	sub.w	r4, r1, #4
 800b68a:	bfb8      	it	lt
 800b68c:	18e4      	addlt	r4, r4, r3
 800b68e:	f003 f94f 	bl	800e930 <__malloc_lock>
 800b692:	4a1e      	ldr	r2, [pc, #120]	; (800b70c <_free_r+0x94>)
 800b694:	9801      	ldr	r0, [sp, #4]
 800b696:	6813      	ldr	r3, [r2, #0]
 800b698:	b933      	cbnz	r3, 800b6a8 <_free_r+0x30>
 800b69a:	6063      	str	r3, [r4, #4]
 800b69c:	6014      	str	r4, [r2, #0]
 800b69e:	b003      	add	sp, #12
 800b6a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6a4:	f003 b94a 	b.w	800e93c <__malloc_unlock>
 800b6a8:	42a3      	cmp	r3, r4
 800b6aa:	d908      	bls.n	800b6be <_free_r+0x46>
 800b6ac:	6825      	ldr	r5, [r4, #0]
 800b6ae:	1961      	adds	r1, r4, r5
 800b6b0:	428b      	cmp	r3, r1
 800b6b2:	bf01      	itttt	eq
 800b6b4:	6819      	ldreq	r1, [r3, #0]
 800b6b6:	685b      	ldreq	r3, [r3, #4]
 800b6b8:	1949      	addeq	r1, r1, r5
 800b6ba:	6021      	streq	r1, [r4, #0]
 800b6bc:	e7ed      	b.n	800b69a <_free_r+0x22>
 800b6be:	461a      	mov	r2, r3
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	b10b      	cbz	r3, 800b6c8 <_free_r+0x50>
 800b6c4:	42a3      	cmp	r3, r4
 800b6c6:	d9fa      	bls.n	800b6be <_free_r+0x46>
 800b6c8:	6811      	ldr	r1, [r2, #0]
 800b6ca:	1855      	adds	r5, r2, r1
 800b6cc:	42a5      	cmp	r5, r4
 800b6ce:	d10b      	bne.n	800b6e8 <_free_r+0x70>
 800b6d0:	6824      	ldr	r4, [r4, #0]
 800b6d2:	4421      	add	r1, r4
 800b6d4:	1854      	adds	r4, r2, r1
 800b6d6:	42a3      	cmp	r3, r4
 800b6d8:	6011      	str	r1, [r2, #0]
 800b6da:	d1e0      	bne.n	800b69e <_free_r+0x26>
 800b6dc:	681c      	ldr	r4, [r3, #0]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	6053      	str	r3, [r2, #4]
 800b6e2:	4421      	add	r1, r4
 800b6e4:	6011      	str	r1, [r2, #0]
 800b6e6:	e7da      	b.n	800b69e <_free_r+0x26>
 800b6e8:	d902      	bls.n	800b6f0 <_free_r+0x78>
 800b6ea:	230c      	movs	r3, #12
 800b6ec:	6003      	str	r3, [r0, #0]
 800b6ee:	e7d6      	b.n	800b69e <_free_r+0x26>
 800b6f0:	6825      	ldr	r5, [r4, #0]
 800b6f2:	1961      	adds	r1, r4, r5
 800b6f4:	428b      	cmp	r3, r1
 800b6f6:	bf04      	itt	eq
 800b6f8:	6819      	ldreq	r1, [r3, #0]
 800b6fa:	685b      	ldreq	r3, [r3, #4]
 800b6fc:	6063      	str	r3, [r4, #4]
 800b6fe:	bf04      	itt	eq
 800b700:	1949      	addeq	r1, r1, r5
 800b702:	6021      	streq	r1, [r4, #0]
 800b704:	6054      	str	r4, [r2, #4]
 800b706:	e7ca      	b.n	800b69e <_free_r+0x26>
 800b708:	b003      	add	sp, #12
 800b70a:	bd30      	pop	{r4, r5, pc}
 800b70c:	20002a9c 	.word	0x20002a9c

0800b710 <sbrk_aligned>:
 800b710:	b570      	push	{r4, r5, r6, lr}
 800b712:	4e0e      	ldr	r6, [pc, #56]	; (800b74c <sbrk_aligned+0x3c>)
 800b714:	460c      	mov	r4, r1
 800b716:	6831      	ldr	r1, [r6, #0]
 800b718:	4605      	mov	r5, r0
 800b71a:	b911      	cbnz	r1, 800b722 <sbrk_aligned+0x12>
 800b71c:	f000 ff06 	bl	800c52c <_sbrk_r>
 800b720:	6030      	str	r0, [r6, #0]
 800b722:	4621      	mov	r1, r4
 800b724:	4628      	mov	r0, r5
 800b726:	f000 ff01 	bl	800c52c <_sbrk_r>
 800b72a:	1c43      	adds	r3, r0, #1
 800b72c:	d00a      	beq.n	800b744 <sbrk_aligned+0x34>
 800b72e:	1cc4      	adds	r4, r0, #3
 800b730:	f024 0403 	bic.w	r4, r4, #3
 800b734:	42a0      	cmp	r0, r4
 800b736:	d007      	beq.n	800b748 <sbrk_aligned+0x38>
 800b738:	1a21      	subs	r1, r4, r0
 800b73a:	4628      	mov	r0, r5
 800b73c:	f000 fef6 	bl	800c52c <_sbrk_r>
 800b740:	3001      	adds	r0, #1
 800b742:	d101      	bne.n	800b748 <sbrk_aligned+0x38>
 800b744:	f04f 34ff 	mov.w	r4, #4294967295
 800b748:	4620      	mov	r0, r4
 800b74a:	bd70      	pop	{r4, r5, r6, pc}
 800b74c:	20002aa0 	.word	0x20002aa0

0800b750 <_malloc_r>:
 800b750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b754:	1ccd      	adds	r5, r1, #3
 800b756:	f025 0503 	bic.w	r5, r5, #3
 800b75a:	3508      	adds	r5, #8
 800b75c:	2d0c      	cmp	r5, #12
 800b75e:	bf38      	it	cc
 800b760:	250c      	movcc	r5, #12
 800b762:	2d00      	cmp	r5, #0
 800b764:	4607      	mov	r7, r0
 800b766:	db01      	blt.n	800b76c <_malloc_r+0x1c>
 800b768:	42a9      	cmp	r1, r5
 800b76a:	d905      	bls.n	800b778 <_malloc_r+0x28>
 800b76c:	230c      	movs	r3, #12
 800b76e:	603b      	str	r3, [r7, #0]
 800b770:	2600      	movs	r6, #0
 800b772:	4630      	mov	r0, r6
 800b774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b778:	4e2e      	ldr	r6, [pc, #184]	; (800b834 <_malloc_r+0xe4>)
 800b77a:	f003 f8d9 	bl	800e930 <__malloc_lock>
 800b77e:	6833      	ldr	r3, [r6, #0]
 800b780:	461c      	mov	r4, r3
 800b782:	bb34      	cbnz	r4, 800b7d2 <_malloc_r+0x82>
 800b784:	4629      	mov	r1, r5
 800b786:	4638      	mov	r0, r7
 800b788:	f7ff ffc2 	bl	800b710 <sbrk_aligned>
 800b78c:	1c43      	adds	r3, r0, #1
 800b78e:	4604      	mov	r4, r0
 800b790:	d14d      	bne.n	800b82e <_malloc_r+0xde>
 800b792:	6834      	ldr	r4, [r6, #0]
 800b794:	4626      	mov	r6, r4
 800b796:	2e00      	cmp	r6, #0
 800b798:	d140      	bne.n	800b81c <_malloc_r+0xcc>
 800b79a:	6823      	ldr	r3, [r4, #0]
 800b79c:	4631      	mov	r1, r6
 800b79e:	4638      	mov	r0, r7
 800b7a0:	eb04 0803 	add.w	r8, r4, r3
 800b7a4:	f000 fec2 	bl	800c52c <_sbrk_r>
 800b7a8:	4580      	cmp	r8, r0
 800b7aa:	d13a      	bne.n	800b822 <_malloc_r+0xd2>
 800b7ac:	6821      	ldr	r1, [r4, #0]
 800b7ae:	3503      	adds	r5, #3
 800b7b0:	1a6d      	subs	r5, r5, r1
 800b7b2:	f025 0503 	bic.w	r5, r5, #3
 800b7b6:	3508      	adds	r5, #8
 800b7b8:	2d0c      	cmp	r5, #12
 800b7ba:	bf38      	it	cc
 800b7bc:	250c      	movcc	r5, #12
 800b7be:	4629      	mov	r1, r5
 800b7c0:	4638      	mov	r0, r7
 800b7c2:	f7ff ffa5 	bl	800b710 <sbrk_aligned>
 800b7c6:	3001      	adds	r0, #1
 800b7c8:	d02b      	beq.n	800b822 <_malloc_r+0xd2>
 800b7ca:	6823      	ldr	r3, [r4, #0]
 800b7cc:	442b      	add	r3, r5
 800b7ce:	6023      	str	r3, [r4, #0]
 800b7d0:	e00e      	b.n	800b7f0 <_malloc_r+0xa0>
 800b7d2:	6822      	ldr	r2, [r4, #0]
 800b7d4:	1b52      	subs	r2, r2, r5
 800b7d6:	d41e      	bmi.n	800b816 <_malloc_r+0xc6>
 800b7d8:	2a0b      	cmp	r2, #11
 800b7da:	d916      	bls.n	800b80a <_malloc_r+0xba>
 800b7dc:	1961      	adds	r1, r4, r5
 800b7de:	42a3      	cmp	r3, r4
 800b7e0:	6025      	str	r5, [r4, #0]
 800b7e2:	bf18      	it	ne
 800b7e4:	6059      	strne	r1, [r3, #4]
 800b7e6:	6863      	ldr	r3, [r4, #4]
 800b7e8:	bf08      	it	eq
 800b7ea:	6031      	streq	r1, [r6, #0]
 800b7ec:	5162      	str	r2, [r4, r5]
 800b7ee:	604b      	str	r3, [r1, #4]
 800b7f0:	4638      	mov	r0, r7
 800b7f2:	f104 060b 	add.w	r6, r4, #11
 800b7f6:	f003 f8a1 	bl	800e93c <__malloc_unlock>
 800b7fa:	f026 0607 	bic.w	r6, r6, #7
 800b7fe:	1d23      	adds	r3, r4, #4
 800b800:	1af2      	subs	r2, r6, r3
 800b802:	d0b6      	beq.n	800b772 <_malloc_r+0x22>
 800b804:	1b9b      	subs	r3, r3, r6
 800b806:	50a3      	str	r3, [r4, r2]
 800b808:	e7b3      	b.n	800b772 <_malloc_r+0x22>
 800b80a:	6862      	ldr	r2, [r4, #4]
 800b80c:	42a3      	cmp	r3, r4
 800b80e:	bf0c      	ite	eq
 800b810:	6032      	streq	r2, [r6, #0]
 800b812:	605a      	strne	r2, [r3, #4]
 800b814:	e7ec      	b.n	800b7f0 <_malloc_r+0xa0>
 800b816:	4623      	mov	r3, r4
 800b818:	6864      	ldr	r4, [r4, #4]
 800b81a:	e7b2      	b.n	800b782 <_malloc_r+0x32>
 800b81c:	4634      	mov	r4, r6
 800b81e:	6876      	ldr	r6, [r6, #4]
 800b820:	e7b9      	b.n	800b796 <_malloc_r+0x46>
 800b822:	230c      	movs	r3, #12
 800b824:	603b      	str	r3, [r7, #0]
 800b826:	4638      	mov	r0, r7
 800b828:	f003 f888 	bl	800e93c <__malloc_unlock>
 800b82c:	e7a1      	b.n	800b772 <_malloc_r+0x22>
 800b82e:	6025      	str	r5, [r4, #0]
 800b830:	e7de      	b.n	800b7f0 <_malloc_r+0xa0>
 800b832:	bf00      	nop
 800b834:	20002a9c 	.word	0x20002a9c

0800b838 <__cvt>:
 800b838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b83c:	ec55 4b10 	vmov	r4, r5, d0
 800b840:	2d00      	cmp	r5, #0
 800b842:	460e      	mov	r6, r1
 800b844:	4619      	mov	r1, r3
 800b846:	462b      	mov	r3, r5
 800b848:	bfbb      	ittet	lt
 800b84a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b84e:	461d      	movlt	r5, r3
 800b850:	2300      	movge	r3, #0
 800b852:	232d      	movlt	r3, #45	; 0x2d
 800b854:	700b      	strb	r3, [r1, #0]
 800b856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b858:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b85c:	4691      	mov	r9, r2
 800b85e:	f023 0820 	bic.w	r8, r3, #32
 800b862:	bfbc      	itt	lt
 800b864:	4622      	movlt	r2, r4
 800b866:	4614      	movlt	r4, r2
 800b868:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b86c:	d005      	beq.n	800b87a <__cvt+0x42>
 800b86e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b872:	d100      	bne.n	800b876 <__cvt+0x3e>
 800b874:	3601      	adds	r6, #1
 800b876:	2102      	movs	r1, #2
 800b878:	e000      	b.n	800b87c <__cvt+0x44>
 800b87a:	2103      	movs	r1, #3
 800b87c:	ab03      	add	r3, sp, #12
 800b87e:	9301      	str	r3, [sp, #4]
 800b880:	ab02      	add	r3, sp, #8
 800b882:	9300      	str	r3, [sp, #0]
 800b884:	ec45 4b10 	vmov	d0, r4, r5
 800b888:	4653      	mov	r3, sl
 800b88a:	4632      	mov	r2, r6
 800b88c:	f001 febc 	bl	800d608 <_dtoa_r>
 800b890:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b894:	4607      	mov	r7, r0
 800b896:	d102      	bne.n	800b89e <__cvt+0x66>
 800b898:	f019 0f01 	tst.w	r9, #1
 800b89c:	d022      	beq.n	800b8e4 <__cvt+0xac>
 800b89e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b8a2:	eb07 0906 	add.w	r9, r7, r6
 800b8a6:	d110      	bne.n	800b8ca <__cvt+0x92>
 800b8a8:	783b      	ldrb	r3, [r7, #0]
 800b8aa:	2b30      	cmp	r3, #48	; 0x30
 800b8ac:	d10a      	bne.n	800b8c4 <__cvt+0x8c>
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	4629      	mov	r1, r5
 800b8b6:	f7f5 f907 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8ba:	b918      	cbnz	r0, 800b8c4 <__cvt+0x8c>
 800b8bc:	f1c6 0601 	rsb	r6, r6, #1
 800b8c0:	f8ca 6000 	str.w	r6, [sl]
 800b8c4:	f8da 3000 	ldr.w	r3, [sl]
 800b8c8:	4499      	add	r9, r3
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	4629      	mov	r1, r5
 800b8d2:	f7f5 f8f9 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8d6:	b108      	cbz	r0, 800b8dc <__cvt+0xa4>
 800b8d8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b8dc:	2230      	movs	r2, #48	; 0x30
 800b8de:	9b03      	ldr	r3, [sp, #12]
 800b8e0:	454b      	cmp	r3, r9
 800b8e2:	d307      	bcc.n	800b8f4 <__cvt+0xbc>
 800b8e4:	9b03      	ldr	r3, [sp, #12]
 800b8e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8e8:	1bdb      	subs	r3, r3, r7
 800b8ea:	4638      	mov	r0, r7
 800b8ec:	6013      	str	r3, [r2, #0]
 800b8ee:	b004      	add	sp, #16
 800b8f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8f4:	1c59      	adds	r1, r3, #1
 800b8f6:	9103      	str	r1, [sp, #12]
 800b8f8:	701a      	strb	r2, [r3, #0]
 800b8fa:	e7f0      	b.n	800b8de <__cvt+0xa6>

0800b8fc <__exponent>:
 800b8fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8fe:	4603      	mov	r3, r0
 800b900:	2900      	cmp	r1, #0
 800b902:	bfb8      	it	lt
 800b904:	4249      	neglt	r1, r1
 800b906:	f803 2b02 	strb.w	r2, [r3], #2
 800b90a:	bfb4      	ite	lt
 800b90c:	222d      	movlt	r2, #45	; 0x2d
 800b90e:	222b      	movge	r2, #43	; 0x2b
 800b910:	2909      	cmp	r1, #9
 800b912:	7042      	strb	r2, [r0, #1]
 800b914:	dd2a      	ble.n	800b96c <__exponent+0x70>
 800b916:	f10d 0407 	add.w	r4, sp, #7
 800b91a:	46a4      	mov	ip, r4
 800b91c:	270a      	movs	r7, #10
 800b91e:	46a6      	mov	lr, r4
 800b920:	460a      	mov	r2, r1
 800b922:	fb91 f6f7 	sdiv	r6, r1, r7
 800b926:	fb07 1516 	mls	r5, r7, r6, r1
 800b92a:	3530      	adds	r5, #48	; 0x30
 800b92c:	2a63      	cmp	r2, #99	; 0x63
 800b92e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b932:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b936:	4631      	mov	r1, r6
 800b938:	dcf1      	bgt.n	800b91e <__exponent+0x22>
 800b93a:	3130      	adds	r1, #48	; 0x30
 800b93c:	f1ae 0502 	sub.w	r5, lr, #2
 800b940:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b944:	1c44      	adds	r4, r0, #1
 800b946:	4629      	mov	r1, r5
 800b948:	4561      	cmp	r1, ip
 800b94a:	d30a      	bcc.n	800b962 <__exponent+0x66>
 800b94c:	f10d 0209 	add.w	r2, sp, #9
 800b950:	eba2 020e 	sub.w	r2, r2, lr
 800b954:	4565      	cmp	r5, ip
 800b956:	bf88      	it	hi
 800b958:	2200      	movhi	r2, #0
 800b95a:	4413      	add	r3, r2
 800b95c:	1a18      	subs	r0, r3, r0
 800b95e:	b003      	add	sp, #12
 800b960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b962:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b966:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b96a:	e7ed      	b.n	800b948 <__exponent+0x4c>
 800b96c:	2330      	movs	r3, #48	; 0x30
 800b96e:	3130      	adds	r1, #48	; 0x30
 800b970:	7083      	strb	r3, [r0, #2]
 800b972:	70c1      	strb	r1, [r0, #3]
 800b974:	1d03      	adds	r3, r0, #4
 800b976:	e7f1      	b.n	800b95c <__exponent+0x60>

0800b978 <_printf_float>:
 800b978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b97c:	ed2d 8b02 	vpush	{d8}
 800b980:	b08d      	sub	sp, #52	; 0x34
 800b982:	460c      	mov	r4, r1
 800b984:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b988:	4616      	mov	r6, r2
 800b98a:	461f      	mov	r7, r3
 800b98c:	4605      	mov	r5, r0
 800b98e:	f002 ffab 	bl	800e8e8 <_localeconv_r>
 800b992:	f8d0 a000 	ldr.w	sl, [r0]
 800b996:	4650      	mov	r0, sl
 800b998:	f7f4 fc1a 	bl	80001d0 <strlen>
 800b99c:	2300      	movs	r3, #0
 800b99e:	930a      	str	r3, [sp, #40]	; 0x28
 800b9a0:	6823      	ldr	r3, [r4, #0]
 800b9a2:	9305      	str	r3, [sp, #20]
 800b9a4:	f8d8 3000 	ldr.w	r3, [r8]
 800b9a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b9ac:	3307      	adds	r3, #7
 800b9ae:	f023 0307 	bic.w	r3, r3, #7
 800b9b2:	f103 0208 	add.w	r2, r3, #8
 800b9b6:	f8c8 2000 	str.w	r2, [r8]
 800b9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b9c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b9c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b9ca:	9307      	str	r3, [sp, #28]
 800b9cc:	f8cd 8018 	str.w	r8, [sp, #24]
 800b9d0:	ee08 0a10 	vmov	s16, r0
 800b9d4:	4b9f      	ldr	r3, [pc, #636]	; (800bc54 <_printf_float+0x2dc>)
 800b9d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9da:	f04f 32ff 	mov.w	r2, #4294967295
 800b9de:	f7f5 f8a5 	bl	8000b2c <__aeabi_dcmpun>
 800b9e2:	bb88      	cbnz	r0, 800ba48 <_printf_float+0xd0>
 800b9e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9e8:	4b9a      	ldr	r3, [pc, #616]	; (800bc54 <_printf_float+0x2dc>)
 800b9ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ee:	f7f5 f87f 	bl	8000af0 <__aeabi_dcmple>
 800b9f2:	bb48      	cbnz	r0, 800ba48 <_printf_float+0xd0>
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	4640      	mov	r0, r8
 800b9fa:	4649      	mov	r1, r9
 800b9fc:	f7f5 f86e 	bl	8000adc <__aeabi_dcmplt>
 800ba00:	b110      	cbz	r0, 800ba08 <_printf_float+0x90>
 800ba02:	232d      	movs	r3, #45	; 0x2d
 800ba04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba08:	4b93      	ldr	r3, [pc, #588]	; (800bc58 <_printf_float+0x2e0>)
 800ba0a:	4894      	ldr	r0, [pc, #592]	; (800bc5c <_printf_float+0x2e4>)
 800ba0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ba10:	bf94      	ite	ls
 800ba12:	4698      	movls	r8, r3
 800ba14:	4680      	movhi	r8, r0
 800ba16:	2303      	movs	r3, #3
 800ba18:	6123      	str	r3, [r4, #16]
 800ba1a:	9b05      	ldr	r3, [sp, #20]
 800ba1c:	f023 0204 	bic.w	r2, r3, #4
 800ba20:	6022      	str	r2, [r4, #0]
 800ba22:	f04f 0900 	mov.w	r9, #0
 800ba26:	9700      	str	r7, [sp, #0]
 800ba28:	4633      	mov	r3, r6
 800ba2a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ba2c:	4621      	mov	r1, r4
 800ba2e:	4628      	mov	r0, r5
 800ba30:	f000 f9d8 	bl	800bde4 <_printf_common>
 800ba34:	3001      	adds	r0, #1
 800ba36:	f040 8090 	bne.w	800bb5a <_printf_float+0x1e2>
 800ba3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba3e:	b00d      	add	sp, #52	; 0x34
 800ba40:	ecbd 8b02 	vpop	{d8}
 800ba44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba48:	4642      	mov	r2, r8
 800ba4a:	464b      	mov	r3, r9
 800ba4c:	4640      	mov	r0, r8
 800ba4e:	4649      	mov	r1, r9
 800ba50:	f7f5 f86c 	bl	8000b2c <__aeabi_dcmpun>
 800ba54:	b140      	cbz	r0, 800ba68 <_printf_float+0xf0>
 800ba56:	464b      	mov	r3, r9
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	bfbc      	itt	lt
 800ba5c:	232d      	movlt	r3, #45	; 0x2d
 800ba5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ba62:	487f      	ldr	r0, [pc, #508]	; (800bc60 <_printf_float+0x2e8>)
 800ba64:	4b7f      	ldr	r3, [pc, #508]	; (800bc64 <_printf_float+0x2ec>)
 800ba66:	e7d1      	b.n	800ba0c <_printf_float+0x94>
 800ba68:	6863      	ldr	r3, [r4, #4]
 800ba6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ba6e:	9206      	str	r2, [sp, #24]
 800ba70:	1c5a      	adds	r2, r3, #1
 800ba72:	d13f      	bne.n	800baf4 <_printf_float+0x17c>
 800ba74:	2306      	movs	r3, #6
 800ba76:	6063      	str	r3, [r4, #4]
 800ba78:	9b05      	ldr	r3, [sp, #20]
 800ba7a:	6861      	ldr	r1, [r4, #4]
 800ba7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ba80:	2300      	movs	r3, #0
 800ba82:	9303      	str	r3, [sp, #12]
 800ba84:	ab0a      	add	r3, sp, #40	; 0x28
 800ba86:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ba8a:	ab09      	add	r3, sp, #36	; 0x24
 800ba8c:	ec49 8b10 	vmov	d0, r8, r9
 800ba90:	9300      	str	r3, [sp, #0]
 800ba92:	6022      	str	r2, [r4, #0]
 800ba94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ba98:	4628      	mov	r0, r5
 800ba9a:	f7ff fecd 	bl	800b838 <__cvt>
 800ba9e:	9b06      	ldr	r3, [sp, #24]
 800baa0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800baa2:	2b47      	cmp	r3, #71	; 0x47
 800baa4:	4680      	mov	r8, r0
 800baa6:	d108      	bne.n	800baba <_printf_float+0x142>
 800baa8:	1cc8      	adds	r0, r1, #3
 800baaa:	db02      	blt.n	800bab2 <_printf_float+0x13a>
 800baac:	6863      	ldr	r3, [r4, #4]
 800baae:	4299      	cmp	r1, r3
 800bab0:	dd41      	ble.n	800bb36 <_printf_float+0x1be>
 800bab2:	f1ab 0b02 	sub.w	fp, fp, #2
 800bab6:	fa5f fb8b 	uxtb.w	fp, fp
 800baba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800babe:	d820      	bhi.n	800bb02 <_printf_float+0x18a>
 800bac0:	3901      	subs	r1, #1
 800bac2:	465a      	mov	r2, fp
 800bac4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bac8:	9109      	str	r1, [sp, #36]	; 0x24
 800baca:	f7ff ff17 	bl	800b8fc <__exponent>
 800bace:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bad0:	1813      	adds	r3, r2, r0
 800bad2:	2a01      	cmp	r2, #1
 800bad4:	4681      	mov	r9, r0
 800bad6:	6123      	str	r3, [r4, #16]
 800bad8:	dc02      	bgt.n	800bae0 <_printf_float+0x168>
 800bada:	6822      	ldr	r2, [r4, #0]
 800badc:	07d2      	lsls	r2, r2, #31
 800bade:	d501      	bpl.n	800bae4 <_printf_float+0x16c>
 800bae0:	3301      	adds	r3, #1
 800bae2:	6123      	str	r3, [r4, #16]
 800bae4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d09c      	beq.n	800ba26 <_printf_float+0xae>
 800baec:	232d      	movs	r3, #45	; 0x2d
 800baee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800baf2:	e798      	b.n	800ba26 <_printf_float+0xae>
 800baf4:	9a06      	ldr	r2, [sp, #24]
 800baf6:	2a47      	cmp	r2, #71	; 0x47
 800baf8:	d1be      	bne.n	800ba78 <_printf_float+0x100>
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d1bc      	bne.n	800ba78 <_printf_float+0x100>
 800bafe:	2301      	movs	r3, #1
 800bb00:	e7b9      	b.n	800ba76 <_printf_float+0xfe>
 800bb02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bb06:	d118      	bne.n	800bb3a <_printf_float+0x1c2>
 800bb08:	2900      	cmp	r1, #0
 800bb0a:	6863      	ldr	r3, [r4, #4]
 800bb0c:	dd0b      	ble.n	800bb26 <_printf_float+0x1ae>
 800bb0e:	6121      	str	r1, [r4, #16]
 800bb10:	b913      	cbnz	r3, 800bb18 <_printf_float+0x1a0>
 800bb12:	6822      	ldr	r2, [r4, #0]
 800bb14:	07d0      	lsls	r0, r2, #31
 800bb16:	d502      	bpl.n	800bb1e <_printf_float+0x1a6>
 800bb18:	3301      	adds	r3, #1
 800bb1a:	440b      	add	r3, r1
 800bb1c:	6123      	str	r3, [r4, #16]
 800bb1e:	65a1      	str	r1, [r4, #88]	; 0x58
 800bb20:	f04f 0900 	mov.w	r9, #0
 800bb24:	e7de      	b.n	800bae4 <_printf_float+0x16c>
 800bb26:	b913      	cbnz	r3, 800bb2e <_printf_float+0x1b6>
 800bb28:	6822      	ldr	r2, [r4, #0]
 800bb2a:	07d2      	lsls	r2, r2, #31
 800bb2c:	d501      	bpl.n	800bb32 <_printf_float+0x1ba>
 800bb2e:	3302      	adds	r3, #2
 800bb30:	e7f4      	b.n	800bb1c <_printf_float+0x1a4>
 800bb32:	2301      	movs	r3, #1
 800bb34:	e7f2      	b.n	800bb1c <_printf_float+0x1a4>
 800bb36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bb3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb3c:	4299      	cmp	r1, r3
 800bb3e:	db05      	blt.n	800bb4c <_printf_float+0x1d4>
 800bb40:	6823      	ldr	r3, [r4, #0]
 800bb42:	6121      	str	r1, [r4, #16]
 800bb44:	07d8      	lsls	r0, r3, #31
 800bb46:	d5ea      	bpl.n	800bb1e <_printf_float+0x1a6>
 800bb48:	1c4b      	adds	r3, r1, #1
 800bb4a:	e7e7      	b.n	800bb1c <_printf_float+0x1a4>
 800bb4c:	2900      	cmp	r1, #0
 800bb4e:	bfd4      	ite	le
 800bb50:	f1c1 0202 	rsble	r2, r1, #2
 800bb54:	2201      	movgt	r2, #1
 800bb56:	4413      	add	r3, r2
 800bb58:	e7e0      	b.n	800bb1c <_printf_float+0x1a4>
 800bb5a:	6823      	ldr	r3, [r4, #0]
 800bb5c:	055a      	lsls	r2, r3, #21
 800bb5e:	d407      	bmi.n	800bb70 <_printf_float+0x1f8>
 800bb60:	6923      	ldr	r3, [r4, #16]
 800bb62:	4642      	mov	r2, r8
 800bb64:	4631      	mov	r1, r6
 800bb66:	4628      	mov	r0, r5
 800bb68:	47b8      	blx	r7
 800bb6a:	3001      	adds	r0, #1
 800bb6c:	d12c      	bne.n	800bbc8 <_printf_float+0x250>
 800bb6e:	e764      	b.n	800ba3a <_printf_float+0xc2>
 800bb70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bb74:	f240 80e0 	bls.w	800bd38 <_printf_float+0x3c0>
 800bb78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	2300      	movs	r3, #0
 800bb80:	f7f4 ffa2 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb84:	2800      	cmp	r0, #0
 800bb86:	d034      	beq.n	800bbf2 <_printf_float+0x27a>
 800bb88:	4a37      	ldr	r2, [pc, #220]	; (800bc68 <_printf_float+0x2f0>)
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	4631      	mov	r1, r6
 800bb8e:	4628      	mov	r0, r5
 800bb90:	47b8      	blx	r7
 800bb92:	3001      	adds	r0, #1
 800bb94:	f43f af51 	beq.w	800ba3a <_printf_float+0xc2>
 800bb98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	db02      	blt.n	800bba6 <_printf_float+0x22e>
 800bba0:	6823      	ldr	r3, [r4, #0]
 800bba2:	07d8      	lsls	r0, r3, #31
 800bba4:	d510      	bpl.n	800bbc8 <_printf_float+0x250>
 800bba6:	ee18 3a10 	vmov	r3, s16
 800bbaa:	4652      	mov	r2, sl
 800bbac:	4631      	mov	r1, r6
 800bbae:	4628      	mov	r0, r5
 800bbb0:	47b8      	blx	r7
 800bbb2:	3001      	adds	r0, #1
 800bbb4:	f43f af41 	beq.w	800ba3a <_printf_float+0xc2>
 800bbb8:	f04f 0800 	mov.w	r8, #0
 800bbbc:	f104 091a 	add.w	r9, r4, #26
 800bbc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbc2:	3b01      	subs	r3, #1
 800bbc4:	4543      	cmp	r3, r8
 800bbc6:	dc09      	bgt.n	800bbdc <_printf_float+0x264>
 800bbc8:	6823      	ldr	r3, [r4, #0]
 800bbca:	079b      	lsls	r3, r3, #30
 800bbcc:	f100 8105 	bmi.w	800bdda <_printf_float+0x462>
 800bbd0:	68e0      	ldr	r0, [r4, #12]
 800bbd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbd4:	4298      	cmp	r0, r3
 800bbd6:	bfb8      	it	lt
 800bbd8:	4618      	movlt	r0, r3
 800bbda:	e730      	b.n	800ba3e <_printf_float+0xc6>
 800bbdc:	2301      	movs	r3, #1
 800bbde:	464a      	mov	r2, r9
 800bbe0:	4631      	mov	r1, r6
 800bbe2:	4628      	mov	r0, r5
 800bbe4:	47b8      	blx	r7
 800bbe6:	3001      	adds	r0, #1
 800bbe8:	f43f af27 	beq.w	800ba3a <_printf_float+0xc2>
 800bbec:	f108 0801 	add.w	r8, r8, #1
 800bbf0:	e7e6      	b.n	800bbc0 <_printf_float+0x248>
 800bbf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	dc39      	bgt.n	800bc6c <_printf_float+0x2f4>
 800bbf8:	4a1b      	ldr	r2, [pc, #108]	; (800bc68 <_printf_float+0x2f0>)
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	4631      	mov	r1, r6
 800bbfe:	4628      	mov	r0, r5
 800bc00:	47b8      	blx	r7
 800bc02:	3001      	adds	r0, #1
 800bc04:	f43f af19 	beq.w	800ba3a <_printf_float+0xc2>
 800bc08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	d102      	bne.n	800bc16 <_printf_float+0x29e>
 800bc10:	6823      	ldr	r3, [r4, #0]
 800bc12:	07d9      	lsls	r1, r3, #31
 800bc14:	d5d8      	bpl.n	800bbc8 <_printf_float+0x250>
 800bc16:	ee18 3a10 	vmov	r3, s16
 800bc1a:	4652      	mov	r2, sl
 800bc1c:	4631      	mov	r1, r6
 800bc1e:	4628      	mov	r0, r5
 800bc20:	47b8      	blx	r7
 800bc22:	3001      	adds	r0, #1
 800bc24:	f43f af09 	beq.w	800ba3a <_printf_float+0xc2>
 800bc28:	f04f 0900 	mov.w	r9, #0
 800bc2c:	f104 0a1a 	add.w	sl, r4, #26
 800bc30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc32:	425b      	negs	r3, r3
 800bc34:	454b      	cmp	r3, r9
 800bc36:	dc01      	bgt.n	800bc3c <_printf_float+0x2c4>
 800bc38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc3a:	e792      	b.n	800bb62 <_printf_float+0x1ea>
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	4652      	mov	r2, sl
 800bc40:	4631      	mov	r1, r6
 800bc42:	4628      	mov	r0, r5
 800bc44:	47b8      	blx	r7
 800bc46:	3001      	adds	r0, #1
 800bc48:	f43f aef7 	beq.w	800ba3a <_printf_float+0xc2>
 800bc4c:	f109 0901 	add.w	r9, r9, #1
 800bc50:	e7ee      	b.n	800bc30 <_printf_float+0x2b8>
 800bc52:	bf00      	nop
 800bc54:	7fefffff 	.word	0x7fefffff
 800bc58:	080105bc 	.word	0x080105bc
 800bc5c:	080105c0 	.word	0x080105c0
 800bc60:	080105c8 	.word	0x080105c8
 800bc64:	080105c4 	.word	0x080105c4
 800bc68:	080105cc 	.word	0x080105cc
 800bc6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc70:	429a      	cmp	r2, r3
 800bc72:	bfa8      	it	ge
 800bc74:	461a      	movge	r2, r3
 800bc76:	2a00      	cmp	r2, #0
 800bc78:	4691      	mov	r9, r2
 800bc7a:	dc37      	bgt.n	800bcec <_printf_float+0x374>
 800bc7c:	f04f 0b00 	mov.w	fp, #0
 800bc80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc84:	f104 021a 	add.w	r2, r4, #26
 800bc88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc8a:	9305      	str	r3, [sp, #20]
 800bc8c:	eba3 0309 	sub.w	r3, r3, r9
 800bc90:	455b      	cmp	r3, fp
 800bc92:	dc33      	bgt.n	800bcfc <_printf_float+0x384>
 800bc94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	db3b      	blt.n	800bd14 <_printf_float+0x39c>
 800bc9c:	6823      	ldr	r3, [r4, #0]
 800bc9e:	07da      	lsls	r2, r3, #31
 800bca0:	d438      	bmi.n	800bd14 <_printf_float+0x39c>
 800bca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bca4:	9a05      	ldr	r2, [sp, #20]
 800bca6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bca8:	1a9a      	subs	r2, r3, r2
 800bcaa:	eba3 0901 	sub.w	r9, r3, r1
 800bcae:	4591      	cmp	r9, r2
 800bcb0:	bfa8      	it	ge
 800bcb2:	4691      	movge	r9, r2
 800bcb4:	f1b9 0f00 	cmp.w	r9, #0
 800bcb8:	dc35      	bgt.n	800bd26 <_printf_float+0x3ae>
 800bcba:	f04f 0800 	mov.w	r8, #0
 800bcbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bcc2:	f104 0a1a 	add.w	sl, r4, #26
 800bcc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bcca:	1a9b      	subs	r3, r3, r2
 800bccc:	eba3 0309 	sub.w	r3, r3, r9
 800bcd0:	4543      	cmp	r3, r8
 800bcd2:	f77f af79 	ble.w	800bbc8 <_printf_float+0x250>
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	4652      	mov	r2, sl
 800bcda:	4631      	mov	r1, r6
 800bcdc:	4628      	mov	r0, r5
 800bcde:	47b8      	blx	r7
 800bce0:	3001      	adds	r0, #1
 800bce2:	f43f aeaa 	beq.w	800ba3a <_printf_float+0xc2>
 800bce6:	f108 0801 	add.w	r8, r8, #1
 800bcea:	e7ec      	b.n	800bcc6 <_printf_float+0x34e>
 800bcec:	4613      	mov	r3, r2
 800bcee:	4631      	mov	r1, r6
 800bcf0:	4642      	mov	r2, r8
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	47b8      	blx	r7
 800bcf6:	3001      	adds	r0, #1
 800bcf8:	d1c0      	bne.n	800bc7c <_printf_float+0x304>
 800bcfa:	e69e      	b.n	800ba3a <_printf_float+0xc2>
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	4631      	mov	r1, r6
 800bd00:	4628      	mov	r0, r5
 800bd02:	9205      	str	r2, [sp, #20]
 800bd04:	47b8      	blx	r7
 800bd06:	3001      	adds	r0, #1
 800bd08:	f43f ae97 	beq.w	800ba3a <_printf_float+0xc2>
 800bd0c:	9a05      	ldr	r2, [sp, #20]
 800bd0e:	f10b 0b01 	add.w	fp, fp, #1
 800bd12:	e7b9      	b.n	800bc88 <_printf_float+0x310>
 800bd14:	ee18 3a10 	vmov	r3, s16
 800bd18:	4652      	mov	r2, sl
 800bd1a:	4631      	mov	r1, r6
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	47b8      	blx	r7
 800bd20:	3001      	adds	r0, #1
 800bd22:	d1be      	bne.n	800bca2 <_printf_float+0x32a>
 800bd24:	e689      	b.n	800ba3a <_printf_float+0xc2>
 800bd26:	9a05      	ldr	r2, [sp, #20]
 800bd28:	464b      	mov	r3, r9
 800bd2a:	4442      	add	r2, r8
 800bd2c:	4631      	mov	r1, r6
 800bd2e:	4628      	mov	r0, r5
 800bd30:	47b8      	blx	r7
 800bd32:	3001      	adds	r0, #1
 800bd34:	d1c1      	bne.n	800bcba <_printf_float+0x342>
 800bd36:	e680      	b.n	800ba3a <_printf_float+0xc2>
 800bd38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd3a:	2a01      	cmp	r2, #1
 800bd3c:	dc01      	bgt.n	800bd42 <_printf_float+0x3ca>
 800bd3e:	07db      	lsls	r3, r3, #31
 800bd40:	d538      	bpl.n	800bdb4 <_printf_float+0x43c>
 800bd42:	2301      	movs	r3, #1
 800bd44:	4642      	mov	r2, r8
 800bd46:	4631      	mov	r1, r6
 800bd48:	4628      	mov	r0, r5
 800bd4a:	47b8      	blx	r7
 800bd4c:	3001      	adds	r0, #1
 800bd4e:	f43f ae74 	beq.w	800ba3a <_printf_float+0xc2>
 800bd52:	ee18 3a10 	vmov	r3, s16
 800bd56:	4652      	mov	r2, sl
 800bd58:	4631      	mov	r1, r6
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	47b8      	blx	r7
 800bd5e:	3001      	adds	r0, #1
 800bd60:	f43f ae6b 	beq.w	800ba3a <_printf_float+0xc2>
 800bd64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bd68:	2200      	movs	r2, #0
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	f7f4 feac 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd70:	b9d8      	cbnz	r0, 800bdaa <_printf_float+0x432>
 800bd72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd74:	f108 0201 	add.w	r2, r8, #1
 800bd78:	3b01      	subs	r3, #1
 800bd7a:	4631      	mov	r1, r6
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	47b8      	blx	r7
 800bd80:	3001      	adds	r0, #1
 800bd82:	d10e      	bne.n	800bda2 <_printf_float+0x42a>
 800bd84:	e659      	b.n	800ba3a <_printf_float+0xc2>
 800bd86:	2301      	movs	r3, #1
 800bd88:	4652      	mov	r2, sl
 800bd8a:	4631      	mov	r1, r6
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	47b8      	blx	r7
 800bd90:	3001      	adds	r0, #1
 800bd92:	f43f ae52 	beq.w	800ba3a <_printf_float+0xc2>
 800bd96:	f108 0801 	add.w	r8, r8, #1
 800bd9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd9c:	3b01      	subs	r3, #1
 800bd9e:	4543      	cmp	r3, r8
 800bda0:	dcf1      	bgt.n	800bd86 <_printf_float+0x40e>
 800bda2:	464b      	mov	r3, r9
 800bda4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bda8:	e6dc      	b.n	800bb64 <_printf_float+0x1ec>
 800bdaa:	f04f 0800 	mov.w	r8, #0
 800bdae:	f104 0a1a 	add.w	sl, r4, #26
 800bdb2:	e7f2      	b.n	800bd9a <_printf_float+0x422>
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	4642      	mov	r2, r8
 800bdb8:	e7df      	b.n	800bd7a <_printf_float+0x402>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	464a      	mov	r2, r9
 800bdbe:	4631      	mov	r1, r6
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	47b8      	blx	r7
 800bdc4:	3001      	adds	r0, #1
 800bdc6:	f43f ae38 	beq.w	800ba3a <_printf_float+0xc2>
 800bdca:	f108 0801 	add.w	r8, r8, #1
 800bdce:	68e3      	ldr	r3, [r4, #12]
 800bdd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bdd2:	1a5b      	subs	r3, r3, r1
 800bdd4:	4543      	cmp	r3, r8
 800bdd6:	dcf0      	bgt.n	800bdba <_printf_float+0x442>
 800bdd8:	e6fa      	b.n	800bbd0 <_printf_float+0x258>
 800bdda:	f04f 0800 	mov.w	r8, #0
 800bdde:	f104 0919 	add.w	r9, r4, #25
 800bde2:	e7f4      	b.n	800bdce <_printf_float+0x456>

0800bde4 <_printf_common>:
 800bde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bde8:	4616      	mov	r6, r2
 800bdea:	4699      	mov	r9, r3
 800bdec:	688a      	ldr	r2, [r1, #8]
 800bdee:	690b      	ldr	r3, [r1, #16]
 800bdf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	bfb8      	it	lt
 800bdf8:	4613      	movlt	r3, r2
 800bdfa:	6033      	str	r3, [r6, #0]
 800bdfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be00:	4607      	mov	r7, r0
 800be02:	460c      	mov	r4, r1
 800be04:	b10a      	cbz	r2, 800be0a <_printf_common+0x26>
 800be06:	3301      	adds	r3, #1
 800be08:	6033      	str	r3, [r6, #0]
 800be0a:	6823      	ldr	r3, [r4, #0]
 800be0c:	0699      	lsls	r1, r3, #26
 800be0e:	bf42      	ittt	mi
 800be10:	6833      	ldrmi	r3, [r6, #0]
 800be12:	3302      	addmi	r3, #2
 800be14:	6033      	strmi	r3, [r6, #0]
 800be16:	6825      	ldr	r5, [r4, #0]
 800be18:	f015 0506 	ands.w	r5, r5, #6
 800be1c:	d106      	bne.n	800be2c <_printf_common+0x48>
 800be1e:	f104 0a19 	add.w	sl, r4, #25
 800be22:	68e3      	ldr	r3, [r4, #12]
 800be24:	6832      	ldr	r2, [r6, #0]
 800be26:	1a9b      	subs	r3, r3, r2
 800be28:	42ab      	cmp	r3, r5
 800be2a:	dc26      	bgt.n	800be7a <_printf_common+0x96>
 800be2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be30:	1e13      	subs	r3, r2, #0
 800be32:	6822      	ldr	r2, [r4, #0]
 800be34:	bf18      	it	ne
 800be36:	2301      	movne	r3, #1
 800be38:	0692      	lsls	r2, r2, #26
 800be3a:	d42b      	bmi.n	800be94 <_printf_common+0xb0>
 800be3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be40:	4649      	mov	r1, r9
 800be42:	4638      	mov	r0, r7
 800be44:	47c0      	blx	r8
 800be46:	3001      	adds	r0, #1
 800be48:	d01e      	beq.n	800be88 <_printf_common+0xa4>
 800be4a:	6823      	ldr	r3, [r4, #0]
 800be4c:	68e5      	ldr	r5, [r4, #12]
 800be4e:	6832      	ldr	r2, [r6, #0]
 800be50:	f003 0306 	and.w	r3, r3, #6
 800be54:	2b04      	cmp	r3, #4
 800be56:	bf08      	it	eq
 800be58:	1aad      	subeq	r5, r5, r2
 800be5a:	68a3      	ldr	r3, [r4, #8]
 800be5c:	6922      	ldr	r2, [r4, #16]
 800be5e:	bf0c      	ite	eq
 800be60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be64:	2500      	movne	r5, #0
 800be66:	4293      	cmp	r3, r2
 800be68:	bfc4      	itt	gt
 800be6a:	1a9b      	subgt	r3, r3, r2
 800be6c:	18ed      	addgt	r5, r5, r3
 800be6e:	2600      	movs	r6, #0
 800be70:	341a      	adds	r4, #26
 800be72:	42b5      	cmp	r5, r6
 800be74:	d11a      	bne.n	800beac <_printf_common+0xc8>
 800be76:	2000      	movs	r0, #0
 800be78:	e008      	b.n	800be8c <_printf_common+0xa8>
 800be7a:	2301      	movs	r3, #1
 800be7c:	4652      	mov	r2, sl
 800be7e:	4649      	mov	r1, r9
 800be80:	4638      	mov	r0, r7
 800be82:	47c0      	blx	r8
 800be84:	3001      	adds	r0, #1
 800be86:	d103      	bne.n	800be90 <_printf_common+0xac>
 800be88:	f04f 30ff 	mov.w	r0, #4294967295
 800be8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be90:	3501      	adds	r5, #1
 800be92:	e7c6      	b.n	800be22 <_printf_common+0x3e>
 800be94:	18e1      	adds	r1, r4, r3
 800be96:	1c5a      	adds	r2, r3, #1
 800be98:	2030      	movs	r0, #48	; 0x30
 800be9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be9e:	4422      	add	r2, r4
 800bea0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bea4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bea8:	3302      	adds	r3, #2
 800beaa:	e7c7      	b.n	800be3c <_printf_common+0x58>
 800beac:	2301      	movs	r3, #1
 800beae:	4622      	mov	r2, r4
 800beb0:	4649      	mov	r1, r9
 800beb2:	4638      	mov	r0, r7
 800beb4:	47c0      	blx	r8
 800beb6:	3001      	adds	r0, #1
 800beb8:	d0e6      	beq.n	800be88 <_printf_common+0xa4>
 800beba:	3601      	adds	r6, #1
 800bebc:	e7d9      	b.n	800be72 <_printf_common+0x8e>
	...

0800bec0 <_printf_i>:
 800bec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bec4:	7e0f      	ldrb	r7, [r1, #24]
 800bec6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bec8:	2f78      	cmp	r7, #120	; 0x78
 800beca:	4691      	mov	r9, r2
 800becc:	4680      	mov	r8, r0
 800bece:	460c      	mov	r4, r1
 800bed0:	469a      	mov	sl, r3
 800bed2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bed6:	d807      	bhi.n	800bee8 <_printf_i+0x28>
 800bed8:	2f62      	cmp	r7, #98	; 0x62
 800beda:	d80a      	bhi.n	800bef2 <_printf_i+0x32>
 800bedc:	2f00      	cmp	r7, #0
 800bede:	f000 80d8 	beq.w	800c092 <_printf_i+0x1d2>
 800bee2:	2f58      	cmp	r7, #88	; 0x58
 800bee4:	f000 80a3 	beq.w	800c02e <_printf_i+0x16e>
 800bee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800beec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bef0:	e03a      	b.n	800bf68 <_printf_i+0xa8>
 800bef2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bef6:	2b15      	cmp	r3, #21
 800bef8:	d8f6      	bhi.n	800bee8 <_printf_i+0x28>
 800befa:	a101      	add	r1, pc, #4	; (adr r1, 800bf00 <_printf_i+0x40>)
 800befc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf00:	0800bf59 	.word	0x0800bf59
 800bf04:	0800bf6d 	.word	0x0800bf6d
 800bf08:	0800bee9 	.word	0x0800bee9
 800bf0c:	0800bee9 	.word	0x0800bee9
 800bf10:	0800bee9 	.word	0x0800bee9
 800bf14:	0800bee9 	.word	0x0800bee9
 800bf18:	0800bf6d 	.word	0x0800bf6d
 800bf1c:	0800bee9 	.word	0x0800bee9
 800bf20:	0800bee9 	.word	0x0800bee9
 800bf24:	0800bee9 	.word	0x0800bee9
 800bf28:	0800bee9 	.word	0x0800bee9
 800bf2c:	0800c079 	.word	0x0800c079
 800bf30:	0800bf9d 	.word	0x0800bf9d
 800bf34:	0800c05b 	.word	0x0800c05b
 800bf38:	0800bee9 	.word	0x0800bee9
 800bf3c:	0800bee9 	.word	0x0800bee9
 800bf40:	0800c09b 	.word	0x0800c09b
 800bf44:	0800bee9 	.word	0x0800bee9
 800bf48:	0800bf9d 	.word	0x0800bf9d
 800bf4c:	0800bee9 	.word	0x0800bee9
 800bf50:	0800bee9 	.word	0x0800bee9
 800bf54:	0800c063 	.word	0x0800c063
 800bf58:	682b      	ldr	r3, [r5, #0]
 800bf5a:	1d1a      	adds	r2, r3, #4
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	602a      	str	r2, [r5, #0]
 800bf60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf68:	2301      	movs	r3, #1
 800bf6a:	e0a3      	b.n	800c0b4 <_printf_i+0x1f4>
 800bf6c:	6820      	ldr	r0, [r4, #0]
 800bf6e:	6829      	ldr	r1, [r5, #0]
 800bf70:	0606      	lsls	r6, r0, #24
 800bf72:	f101 0304 	add.w	r3, r1, #4
 800bf76:	d50a      	bpl.n	800bf8e <_printf_i+0xce>
 800bf78:	680e      	ldr	r6, [r1, #0]
 800bf7a:	602b      	str	r3, [r5, #0]
 800bf7c:	2e00      	cmp	r6, #0
 800bf7e:	da03      	bge.n	800bf88 <_printf_i+0xc8>
 800bf80:	232d      	movs	r3, #45	; 0x2d
 800bf82:	4276      	negs	r6, r6
 800bf84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf88:	485e      	ldr	r0, [pc, #376]	; (800c104 <_printf_i+0x244>)
 800bf8a:	230a      	movs	r3, #10
 800bf8c:	e019      	b.n	800bfc2 <_printf_i+0x102>
 800bf8e:	680e      	ldr	r6, [r1, #0]
 800bf90:	602b      	str	r3, [r5, #0]
 800bf92:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bf96:	bf18      	it	ne
 800bf98:	b236      	sxthne	r6, r6
 800bf9a:	e7ef      	b.n	800bf7c <_printf_i+0xbc>
 800bf9c:	682b      	ldr	r3, [r5, #0]
 800bf9e:	6820      	ldr	r0, [r4, #0]
 800bfa0:	1d19      	adds	r1, r3, #4
 800bfa2:	6029      	str	r1, [r5, #0]
 800bfa4:	0601      	lsls	r1, r0, #24
 800bfa6:	d501      	bpl.n	800bfac <_printf_i+0xec>
 800bfa8:	681e      	ldr	r6, [r3, #0]
 800bfaa:	e002      	b.n	800bfb2 <_printf_i+0xf2>
 800bfac:	0646      	lsls	r6, r0, #25
 800bfae:	d5fb      	bpl.n	800bfa8 <_printf_i+0xe8>
 800bfb0:	881e      	ldrh	r6, [r3, #0]
 800bfb2:	4854      	ldr	r0, [pc, #336]	; (800c104 <_printf_i+0x244>)
 800bfb4:	2f6f      	cmp	r7, #111	; 0x6f
 800bfb6:	bf0c      	ite	eq
 800bfb8:	2308      	moveq	r3, #8
 800bfba:	230a      	movne	r3, #10
 800bfbc:	2100      	movs	r1, #0
 800bfbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bfc2:	6865      	ldr	r5, [r4, #4]
 800bfc4:	60a5      	str	r5, [r4, #8]
 800bfc6:	2d00      	cmp	r5, #0
 800bfc8:	bfa2      	ittt	ge
 800bfca:	6821      	ldrge	r1, [r4, #0]
 800bfcc:	f021 0104 	bicge.w	r1, r1, #4
 800bfd0:	6021      	strge	r1, [r4, #0]
 800bfd2:	b90e      	cbnz	r6, 800bfd8 <_printf_i+0x118>
 800bfd4:	2d00      	cmp	r5, #0
 800bfd6:	d04d      	beq.n	800c074 <_printf_i+0x1b4>
 800bfd8:	4615      	mov	r5, r2
 800bfda:	fbb6 f1f3 	udiv	r1, r6, r3
 800bfde:	fb03 6711 	mls	r7, r3, r1, r6
 800bfe2:	5dc7      	ldrb	r7, [r0, r7]
 800bfe4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bfe8:	4637      	mov	r7, r6
 800bfea:	42bb      	cmp	r3, r7
 800bfec:	460e      	mov	r6, r1
 800bfee:	d9f4      	bls.n	800bfda <_printf_i+0x11a>
 800bff0:	2b08      	cmp	r3, #8
 800bff2:	d10b      	bne.n	800c00c <_printf_i+0x14c>
 800bff4:	6823      	ldr	r3, [r4, #0]
 800bff6:	07de      	lsls	r6, r3, #31
 800bff8:	d508      	bpl.n	800c00c <_printf_i+0x14c>
 800bffa:	6923      	ldr	r3, [r4, #16]
 800bffc:	6861      	ldr	r1, [r4, #4]
 800bffe:	4299      	cmp	r1, r3
 800c000:	bfde      	ittt	le
 800c002:	2330      	movle	r3, #48	; 0x30
 800c004:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c008:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c00c:	1b52      	subs	r2, r2, r5
 800c00e:	6122      	str	r2, [r4, #16]
 800c010:	f8cd a000 	str.w	sl, [sp]
 800c014:	464b      	mov	r3, r9
 800c016:	aa03      	add	r2, sp, #12
 800c018:	4621      	mov	r1, r4
 800c01a:	4640      	mov	r0, r8
 800c01c:	f7ff fee2 	bl	800bde4 <_printf_common>
 800c020:	3001      	adds	r0, #1
 800c022:	d14c      	bne.n	800c0be <_printf_i+0x1fe>
 800c024:	f04f 30ff 	mov.w	r0, #4294967295
 800c028:	b004      	add	sp, #16
 800c02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c02e:	4835      	ldr	r0, [pc, #212]	; (800c104 <_printf_i+0x244>)
 800c030:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c034:	6829      	ldr	r1, [r5, #0]
 800c036:	6823      	ldr	r3, [r4, #0]
 800c038:	f851 6b04 	ldr.w	r6, [r1], #4
 800c03c:	6029      	str	r1, [r5, #0]
 800c03e:	061d      	lsls	r5, r3, #24
 800c040:	d514      	bpl.n	800c06c <_printf_i+0x1ac>
 800c042:	07df      	lsls	r7, r3, #31
 800c044:	bf44      	itt	mi
 800c046:	f043 0320 	orrmi.w	r3, r3, #32
 800c04a:	6023      	strmi	r3, [r4, #0]
 800c04c:	b91e      	cbnz	r6, 800c056 <_printf_i+0x196>
 800c04e:	6823      	ldr	r3, [r4, #0]
 800c050:	f023 0320 	bic.w	r3, r3, #32
 800c054:	6023      	str	r3, [r4, #0]
 800c056:	2310      	movs	r3, #16
 800c058:	e7b0      	b.n	800bfbc <_printf_i+0xfc>
 800c05a:	6823      	ldr	r3, [r4, #0]
 800c05c:	f043 0320 	orr.w	r3, r3, #32
 800c060:	6023      	str	r3, [r4, #0]
 800c062:	2378      	movs	r3, #120	; 0x78
 800c064:	4828      	ldr	r0, [pc, #160]	; (800c108 <_printf_i+0x248>)
 800c066:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c06a:	e7e3      	b.n	800c034 <_printf_i+0x174>
 800c06c:	0659      	lsls	r1, r3, #25
 800c06e:	bf48      	it	mi
 800c070:	b2b6      	uxthmi	r6, r6
 800c072:	e7e6      	b.n	800c042 <_printf_i+0x182>
 800c074:	4615      	mov	r5, r2
 800c076:	e7bb      	b.n	800bff0 <_printf_i+0x130>
 800c078:	682b      	ldr	r3, [r5, #0]
 800c07a:	6826      	ldr	r6, [r4, #0]
 800c07c:	6961      	ldr	r1, [r4, #20]
 800c07e:	1d18      	adds	r0, r3, #4
 800c080:	6028      	str	r0, [r5, #0]
 800c082:	0635      	lsls	r5, r6, #24
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	d501      	bpl.n	800c08c <_printf_i+0x1cc>
 800c088:	6019      	str	r1, [r3, #0]
 800c08a:	e002      	b.n	800c092 <_printf_i+0x1d2>
 800c08c:	0670      	lsls	r0, r6, #25
 800c08e:	d5fb      	bpl.n	800c088 <_printf_i+0x1c8>
 800c090:	8019      	strh	r1, [r3, #0]
 800c092:	2300      	movs	r3, #0
 800c094:	6123      	str	r3, [r4, #16]
 800c096:	4615      	mov	r5, r2
 800c098:	e7ba      	b.n	800c010 <_printf_i+0x150>
 800c09a:	682b      	ldr	r3, [r5, #0]
 800c09c:	1d1a      	adds	r2, r3, #4
 800c09e:	602a      	str	r2, [r5, #0]
 800c0a0:	681d      	ldr	r5, [r3, #0]
 800c0a2:	6862      	ldr	r2, [r4, #4]
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	4628      	mov	r0, r5
 800c0a8:	f7f4 f89a 	bl	80001e0 <memchr>
 800c0ac:	b108      	cbz	r0, 800c0b2 <_printf_i+0x1f2>
 800c0ae:	1b40      	subs	r0, r0, r5
 800c0b0:	6060      	str	r0, [r4, #4]
 800c0b2:	6863      	ldr	r3, [r4, #4]
 800c0b4:	6123      	str	r3, [r4, #16]
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0bc:	e7a8      	b.n	800c010 <_printf_i+0x150>
 800c0be:	6923      	ldr	r3, [r4, #16]
 800c0c0:	462a      	mov	r2, r5
 800c0c2:	4649      	mov	r1, r9
 800c0c4:	4640      	mov	r0, r8
 800c0c6:	47d0      	blx	sl
 800c0c8:	3001      	adds	r0, #1
 800c0ca:	d0ab      	beq.n	800c024 <_printf_i+0x164>
 800c0cc:	6823      	ldr	r3, [r4, #0]
 800c0ce:	079b      	lsls	r3, r3, #30
 800c0d0:	d413      	bmi.n	800c0fa <_printf_i+0x23a>
 800c0d2:	68e0      	ldr	r0, [r4, #12]
 800c0d4:	9b03      	ldr	r3, [sp, #12]
 800c0d6:	4298      	cmp	r0, r3
 800c0d8:	bfb8      	it	lt
 800c0da:	4618      	movlt	r0, r3
 800c0dc:	e7a4      	b.n	800c028 <_printf_i+0x168>
 800c0de:	2301      	movs	r3, #1
 800c0e0:	4632      	mov	r2, r6
 800c0e2:	4649      	mov	r1, r9
 800c0e4:	4640      	mov	r0, r8
 800c0e6:	47d0      	blx	sl
 800c0e8:	3001      	adds	r0, #1
 800c0ea:	d09b      	beq.n	800c024 <_printf_i+0x164>
 800c0ec:	3501      	adds	r5, #1
 800c0ee:	68e3      	ldr	r3, [r4, #12]
 800c0f0:	9903      	ldr	r1, [sp, #12]
 800c0f2:	1a5b      	subs	r3, r3, r1
 800c0f4:	42ab      	cmp	r3, r5
 800c0f6:	dcf2      	bgt.n	800c0de <_printf_i+0x21e>
 800c0f8:	e7eb      	b.n	800c0d2 <_printf_i+0x212>
 800c0fa:	2500      	movs	r5, #0
 800c0fc:	f104 0619 	add.w	r6, r4, #25
 800c100:	e7f5      	b.n	800c0ee <_printf_i+0x22e>
 800c102:	bf00      	nop
 800c104:	080105ce 	.word	0x080105ce
 800c108:	080105df 	.word	0x080105df

0800c10c <_scanf_float>:
 800c10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c110:	b087      	sub	sp, #28
 800c112:	4617      	mov	r7, r2
 800c114:	9303      	str	r3, [sp, #12]
 800c116:	688b      	ldr	r3, [r1, #8]
 800c118:	1e5a      	subs	r2, r3, #1
 800c11a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c11e:	bf83      	ittte	hi
 800c120:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c124:	195b      	addhi	r3, r3, r5
 800c126:	9302      	strhi	r3, [sp, #8]
 800c128:	2300      	movls	r3, #0
 800c12a:	bf86      	itte	hi
 800c12c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c130:	608b      	strhi	r3, [r1, #8]
 800c132:	9302      	strls	r3, [sp, #8]
 800c134:	680b      	ldr	r3, [r1, #0]
 800c136:	468b      	mov	fp, r1
 800c138:	2500      	movs	r5, #0
 800c13a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c13e:	f84b 3b1c 	str.w	r3, [fp], #28
 800c142:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c146:	4680      	mov	r8, r0
 800c148:	460c      	mov	r4, r1
 800c14a:	465e      	mov	r6, fp
 800c14c:	46aa      	mov	sl, r5
 800c14e:	46a9      	mov	r9, r5
 800c150:	9501      	str	r5, [sp, #4]
 800c152:	68a2      	ldr	r2, [r4, #8]
 800c154:	b152      	cbz	r2, 800c16c <_scanf_float+0x60>
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	2b4e      	cmp	r3, #78	; 0x4e
 800c15c:	d864      	bhi.n	800c228 <_scanf_float+0x11c>
 800c15e:	2b40      	cmp	r3, #64	; 0x40
 800c160:	d83c      	bhi.n	800c1dc <_scanf_float+0xd0>
 800c162:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c166:	b2c8      	uxtb	r0, r1
 800c168:	280e      	cmp	r0, #14
 800c16a:	d93a      	bls.n	800c1e2 <_scanf_float+0xd6>
 800c16c:	f1b9 0f00 	cmp.w	r9, #0
 800c170:	d003      	beq.n	800c17a <_scanf_float+0x6e>
 800c172:	6823      	ldr	r3, [r4, #0]
 800c174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c178:	6023      	str	r3, [r4, #0]
 800c17a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c17e:	f1ba 0f01 	cmp.w	sl, #1
 800c182:	f200 8113 	bhi.w	800c3ac <_scanf_float+0x2a0>
 800c186:	455e      	cmp	r6, fp
 800c188:	f200 8105 	bhi.w	800c396 <_scanf_float+0x28a>
 800c18c:	2501      	movs	r5, #1
 800c18e:	4628      	mov	r0, r5
 800c190:	b007      	add	sp, #28
 800c192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c196:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c19a:	2a0d      	cmp	r2, #13
 800c19c:	d8e6      	bhi.n	800c16c <_scanf_float+0x60>
 800c19e:	a101      	add	r1, pc, #4	; (adr r1, 800c1a4 <_scanf_float+0x98>)
 800c1a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c1a4:	0800c2e3 	.word	0x0800c2e3
 800c1a8:	0800c16d 	.word	0x0800c16d
 800c1ac:	0800c16d 	.word	0x0800c16d
 800c1b0:	0800c16d 	.word	0x0800c16d
 800c1b4:	0800c343 	.word	0x0800c343
 800c1b8:	0800c31b 	.word	0x0800c31b
 800c1bc:	0800c16d 	.word	0x0800c16d
 800c1c0:	0800c16d 	.word	0x0800c16d
 800c1c4:	0800c2f1 	.word	0x0800c2f1
 800c1c8:	0800c16d 	.word	0x0800c16d
 800c1cc:	0800c16d 	.word	0x0800c16d
 800c1d0:	0800c16d 	.word	0x0800c16d
 800c1d4:	0800c16d 	.word	0x0800c16d
 800c1d8:	0800c2a9 	.word	0x0800c2a9
 800c1dc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c1e0:	e7db      	b.n	800c19a <_scanf_float+0x8e>
 800c1e2:	290e      	cmp	r1, #14
 800c1e4:	d8c2      	bhi.n	800c16c <_scanf_float+0x60>
 800c1e6:	a001      	add	r0, pc, #4	; (adr r0, 800c1ec <_scanf_float+0xe0>)
 800c1e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c1ec:	0800c29b 	.word	0x0800c29b
 800c1f0:	0800c16d 	.word	0x0800c16d
 800c1f4:	0800c29b 	.word	0x0800c29b
 800c1f8:	0800c32f 	.word	0x0800c32f
 800c1fc:	0800c16d 	.word	0x0800c16d
 800c200:	0800c249 	.word	0x0800c249
 800c204:	0800c285 	.word	0x0800c285
 800c208:	0800c285 	.word	0x0800c285
 800c20c:	0800c285 	.word	0x0800c285
 800c210:	0800c285 	.word	0x0800c285
 800c214:	0800c285 	.word	0x0800c285
 800c218:	0800c285 	.word	0x0800c285
 800c21c:	0800c285 	.word	0x0800c285
 800c220:	0800c285 	.word	0x0800c285
 800c224:	0800c285 	.word	0x0800c285
 800c228:	2b6e      	cmp	r3, #110	; 0x6e
 800c22a:	d809      	bhi.n	800c240 <_scanf_float+0x134>
 800c22c:	2b60      	cmp	r3, #96	; 0x60
 800c22e:	d8b2      	bhi.n	800c196 <_scanf_float+0x8a>
 800c230:	2b54      	cmp	r3, #84	; 0x54
 800c232:	d077      	beq.n	800c324 <_scanf_float+0x218>
 800c234:	2b59      	cmp	r3, #89	; 0x59
 800c236:	d199      	bne.n	800c16c <_scanf_float+0x60>
 800c238:	2d07      	cmp	r5, #7
 800c23a:	d197      	bne.n	800c16c <_scanf_float+0x60>
 800c23c:	2508      	movs	r5, #8
 800c23e:	e029      	b.n	800c294 <_scanf_float+0x188>
 800c240:	2b74      	cmp	r3, #116	; 0x74
 800c242:	d06f      	beq.n	800c324 <_scanf_float+0x218>
 800c244:	2b79      	cmp	r3, #121	; 0x79
 800c246:	e7f6      	b.n	800c236 <_scanf_float+0x12a>
 800c248:	6821      	ldr	r1, [r4, #0]
 800c24a:	05c8      	lsls	r0, r1, #23
 800c24c:	d51a      	bpl.n	800c284 <_scanf_float+0x178>
 800c24e:	9b02      	ldr	r3, [sp, #8]
 800c250:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c254:	6021      	str	r1, [r4, #0]
 800c256:	f109 0901 	add.w	r9, r9, #1
 800c25a:	b11b      	cbz	r3, 800c264 <_scanf_float+0x158>
 800c25c:	3b01      	subs	r3, #1
 800c25e:	3201      	adds	r2, #1
 800c260:	9302      	str	r3, [sp, #8]
 800c262:	60a2      	str	r2, [r4, #8]
 800c264:	68a3      	ldr	r3, [r4, #8]
 800c266:	3b01      	subs	r3, #1
 800c268:	60a3      	str	r3, [r4, #8]
 800c26a:	6923      	ldr	r3, [r4, #16]
 800c26c:	3301      	adds	r3, #1
 800c26e:	6123      	str	r3, [r4, #16]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	3b01      	subs	r3, #1
 800c274:	2b00      	cmp	r3, #0
 800c276:	607b      	str	r3, [r7, #4]
 800c278:	f340 8084 	ble.w	800c384 <_scanf_float+0x278>
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	3301      	adds	r3, #1
 800c280:	603b      	str	r3, [r7, #0]
 800c282:	e766      	b.n	800c152 <_scanf_float+0x46>
 800c284:	eb1a 0f05 	cmn.w	sl, r5
 800c288:	f47f af70 	bne.w	800c16c <_scanf_float+0x60>
 800c28c:	6822      	ldr	r2, [r4, #0]
 800c28e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c292:	6022      	str	r2, [r4, #0]
 800c294:	f806 3b01 	strb.w	r3, [r6], #1
 800c298:	e7e4      	b.n	800c264 <_scanf_float+0x158>
 800c29a:	6822      	ldr	r2, [r4, #0]
 800c29c:	0610      	lsls	r0, r2, #24
 800c29e:	f57f af65 	bpl.w	800c16c <_scanf_float+0x60>
 800c2a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c2a6:	e7f4      	b.n	800c292 <_scanf_float+0x186>
 800c2a8:	f1ba 0f00 	cmp.w	sl, #0
 800c2ac:	d10e      	bne.n	800c2cc <_scanf_float+0x1c0>
 800c2ae:	f1b9 0f00 	cmp.w	r9, #0
 800c2b2:	d10e      	bne.n	800c2d2 <_scanf_float+0x1c6>
 800c2b4:	6822      	ldr	r2, [r4, #0]
 800c2b6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c2ba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c2be:	d108      	bne.n	800c2d2 <_scanf_float+0x1c6>
 800c2c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c2c4:	6022      	str	r2, [r4, #0]
 800c2c6:	f04f 0a01 	mov.w	sl, #1
 800c2ca:	e7e3      	b.n	800c294 <_scanf_float+0x188>
 800c2cc:	f1ba 0f02 	cmp.w	sl, #2
 800c2d0:	d055      	beq.n	800c37e <_scanf_float+0x272>
 800c2d2:	2d01      	cmp	r5, #1
 800c2d4:	d002      	beq.n	800c2dc <_scanf_float+0x1d0>
 800c2d6:	2d04      	cmp	r5, #4
 800c2d8:	f47f af48 	bne.w	800c16c <_scanf_float+0x60>
 800c2dc:	3501      	adds	r5, #1
 800c2de:	b2ed      	uxtb	r5, r5
 800c2e0:	e7d8      	b.n	800c294 <_scanf_float+0x188>
 800c2e2:	f1ba 0f01 	cmp.w	sl, #1
 800c2e6:	f47f af41 	bne.w	800c16c <_scanf_float+0x60>
 800c2ea:	f04f 0a02 	mov.w	sl, #2
 800c2ee:	e7d1      	b.n	800c294 <_scanf_float+0x188>
 800c2f0:	b97d      	cbnz	r5, 800c312 <_scanf_float+0x206>
 800c2f2:	f1b9 0f00 	cmp.w	r9, #0
 800c2f6:	f47f af3c 	bne.w	800c172 <_scanf_float+0x66>
 800c2fa:	6822      	ldr	r2, [r4, #0]
 800c2fc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c300:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c304:	f47f af39 	bne.w	800c17a <_scanf_float+0x6e>
 800c308:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c30c:	6022      	str	r2, [r4, #0]
 800c30e:	2501      	movs	r5, #1
 800c310:	e7c0      	b.n	800c294 <_scanf_float+0x188>
 800c312:	2d03      	cmp	r5, #3
 800c314:	d0e2      	beq.n	800c2dc <_scanf_float+0x1d0>
 800c316:	2d05      	cmp	r5, #5
 800c318:	e7de      	b.n	800c2d8 <_scanf_float+0x1cc>
 800c31a:	2d02      	cmp	r5, #2
 800c31c:	f47f af26 	bne.w	800c16c <_scanf_float+0x60>
 800c320:	2503      	movs	r5, #3
 800c322:	e7b7      	b.n	800c294 <_scanf_float+0x188>
 800c324:	2d06      	cmp	r5, #6
 800c326:	f47f af21 	bne.w	800c16c <_scanf_float+0x60>
 800c32a:	2507      	movs	r5, #7
 800c32c:	e7b2      	b.n	800c294 <_scanf_float+0x188>
 800c32e:	6822      	ldr	r2, [r4, #0]
 800c330:	0591      	lsls	r1, r2, #22
 800c332:	f57f af1b 	bpl.w	800c16c <_scanf_float+0x60>
 800c336:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c33a:	6022      	str	r2, [r4, #0]
 800c33c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c340:	e7a8      	b.n	800c294 <_scanf_float+0x188>
 800c342:	6822      	ldr	r2, [r4, #0]
 800c344:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c348:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c34c:	d006      	beq.n	800c35c <_scanf_float+0x250>
 800c34e:	0550      	lsls	r0, r2, #21
 800c350:	f57f af0c 	bpl.w	800c16c <_scanf_float+0x60>
 800c354:	f1b9 0f00 	cmp.w	r9, #0
 800c358:	f43f af0f 	beq.w	800c17a <_scanf_float+0x6e>
 800c35c:	0591      	lsls	r1, r2, #22
 800c35e:	bf58      	it	pl
 800c360:	9901      	ldrpl	r1, [sp, #4]
 800c362:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c366:	bf58      	it	pl
 800c368:	eba9 0101 	subpl.w	r1, r9, r1
 800c36c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c370:	bf58      	it	pl
 800c372:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c376:	6022      	str	r2, [r4, #0]
 800c378:	f04f 0900 	mov.w	r9, #0
 800c37c:	e78a      	b.n	800c294 <_scanf_float+0x188>
 800c37e:	f04f 0a03 	mov.w	sl, #3
 800c382:	e787      	b.n	800c294 <_scanf_float+0x188>
 800c384:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c388:	4639      	mov	r1, r7
 800c38a:	4640      	mov	r0, r8
 800c38c:	4798      	blx	r3
 800c38e:	2800      	cmp	r0, #0
 800c390:	f43f aedf 	beq.w	800c152 <_scanf_float+0x46>
 800c394:	e6ea      	b.n	800c16c <_scanf_float+0x60>
 800c396:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c39a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c39e:	463a      	mov	r2, r7
 800c3a0:	4640      	mov	r0, r8
 800c3a2:	4798      	blx	r3
 800c3a4:	6923      	ldr	r3, [r4, #16]
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	6123      	str	r3, [r4, #16]
 800c3aa:	e6ec      	b.n	800c186 <_scanf_float+0x7a>
 800c3ac:	1e6b      	subs	r3, r5, #1
 800c3ae:	2b06      	cmp	r3, #6
 800c3b0:	d825      	bhi.n	800c3fe <_scanf_float+0x2f2>
 800c3b2:	2d02      	cmp	r5, #2
 800c3b4:	d836      	bhi.n	800c424 <_scanf_float+0x318>
 800c3b6:	455e      	cmp	r6, fp
 800c3b8:	f67f aee8 	bls.w	800c18c <_scanf_float+0x80>
 800c3bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3c0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c3c4:	463a      	mov	r2, r7
 800c3c6:	4640      	mov	r0, r8
 800c3c8:	4798      	blx	r3
 800c3ca:	6923      	ldr	r3, [r4, #16]
 800c3cc:	3b01      	subs	r3, #1
 800c3ce:	6123      	str	r3, [r4, #16]
 800c3d0:	e7f1      	b.n	800c3b6 <_scanf_float+0x2aa>
 800c3d2:	9802      	ldr	r0, [sp, #8]
 800c3d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3d8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c3dc:	9002      	str	r0, [sp, #8]
 800c3de:	463a      	mov	r2, r7
 800c3e0:	4640      	mov	r0, r8
 800c3e2:	4798      	blx	r3
 800c3e4:	6923      	ldr	r3, [r4, #16]
 800c3e6:	3b01      	subs	r3, #1
 800c3e8:	6123      	str	r3, [r4, #16]
 800c3ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c3ee:	fa5f fa8a 	uxtb.w	sl, sl
 800c3f2:	f1ba 0f02 	cmp.w	sl, #2
 800c3f6:	d1ec      	bne.n	800c3d2 <_scanf_float+0x2c6>
 800c3f8:	3d03      	subs	r5, #3
 800c3fa:	b2ed      	uxtb	r5, r5
 800c3fc:	1b76      	subs	r6, r6, r5
 800c3fe:	6823      	ldr	r3, [r4, #0]
 800c400:	05da      	lsls	r2, r3, #23
 800c402:	d52f      	bpl.n	800c464 <_scanf_float+0x358>
 800c404:	055b      	lsls	r3, r3, #21
 800c406:	d510      	bpl.n	800c42a <_scanf_float+0x31e>
 800c408:	455e      	cmp	r6, fp
 800c40a:	f67f aebf 	bls.w	800c18c <_scanf_float+0x80>
 800c40e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c412:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c416:	463a      	mov	r2, r7
 800c418:	4640      	mov	r0, r8
 800c41a:	4798      	blx	r3
 800c41c:	6923      	ldr	r3, [r4, #16]
 800c41e:	3b01      	subs	r3, #1
 800c420:	6123      	str	r3, [r4, #16]
 800c422:	e7f1      	b.n	800c408 <_scanf_float+0x2fc>
 800c424:	46aa      	mov	sl, r5
 800c426:	9602      	str	r6, [sp, #8]
 800c428:	e7df      	b.n	800c3ea <_scanf_float+0x2de>
 800c42a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c42e:	6923      	ldr	r3, [r4, #16]
 800c430:	2965      	cmp	r1, #101	; 0x65
 800c432:	f103 33ff 	add.w	r3, r3, #4294967295
 800c436:	f106 35ff 	add.w	r5, r6, #4294967295
 800c43a:	6123      	str	r3, [r4, #16]
 800c43c:	d00c      	beq.n	800c458 <_scanf_float+0x34c>
 800c43e:	2945      	cmp	r1, #69	; 0x45
 800c440:	d00a      	beq.n	800c458 <_scanf_float+0x34c>
 800c442:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c446:	463a      	mov	r2, r7
 800c448:	4640      	mov	r0, r8
 800c44a:	4798      	blx	r3
 800c44c:	6923      	ldr	r3, [r4, #16]
 800c44e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c452:	3b01      	subs	r3, #1
 800c454:	1eb5      	subs	r5, r6, #2
 800c456:	6123      	str	r3, [r4, #16]
 800c458:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c45c:	463a      	mov	r2, r7
 800c45e:	4640      	mov	r0, r8
 800c460:	4798      	blx	r3
 800c462:	462e      	mov	r6, r5
 800c464:	6825      	ldr	r5, [r4, #0]
 800c466:	f015 0510 	ands.w	r5, r5, #16
 800c46a:	d159      	bne.n	800c520 <_scanf_float+0x414>
 800c46c:	7035      	strb	r5, [r6, #0]
 800c46e:	6823      	ldr	r3, [r4, #0]
 800c470:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c478:	d11b      	bne.n	800c4b2 <_scanf_float+0x3a6>
 800c47a:	9b01      	ldr	r3, [sp, #4]
 800c47c:	454b      	cmp	r3, r9
 800c47e:	eba3 0209 	sub.w	r2, r3, r9
 800c482:	d123      	bne.n	800c4cc <_scanf_float+0x3c0>
 800c484:	2200      	movs	r2, #0
 800c486:	4659      	mov	r1, fp
 800c488:	4640      	mov	r0, r8
 800c48a:	f000 fedf 	bl	800d24c <_strtod_r>
 800c48e:	6822      	ldr	r2, [r4, #0]
 800c490:	9b03      	ldr	r3, [sp, #12]
 800c492:	f012 0f02 	tst.w	r2, #2
 800c496:	ec57 6b10 	vmov	r6, r7, d0
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	d021      	beq.n	800c4e2 <_scanf_float+0x3d6>
 800c49e:	9903      	ldr	r1, [sp, #12]
 800c4a0:	1d1a      	adds	r2, r3, #4
 800c4a2:	600a      	str	r2, [r1, #0]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	e9c3 6700 	strd	r6, r7, [r3]
 800c4aa:	68e3      	ldr	r3, [r4, #12]
 800c4ac:	3301      	adds	r3, #1
 800c4ae:	60e3      	str	r3, [r4, #12]
 800c4b0:	e66d      	b.n	800c18e <_scanf_float+0x82>
 800c4b2:	9b04      	ldr	r3, [sp, #16]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d0e5      	beq.n	800c484 <_scanf_float+0x378>
 800c4b8:	9905      	ldr	r1, [sp, #20]
 800c4ba:	230a      	movs	r3, #10
 800c4bc:	462a      	mov	r2, r5
 800c4be:	3101      	adds	r1, #1
 800c4c0:	4640      	mov	r0, r8
 800c4c2:	f000 ffa7 	bl	800d414 <_strtol_r>
 800c4c6:	9b04      	ldr	r3, [sp, #16]
 800c4c8:	9e05      	ldr	r6, [sp, #20]
 800c4ca:	1ac2      	subs	r2, r0, r3
 800c4cc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c4d0:	429e      	cmp	r6, r3
 800c4d2:	bf28      	it	cs
 800c4d4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c4d8:	4912      	ldr	r1, [pc, #72]	; (800c524 <_scanf_float+0x418>)
 800c4da:	4630      	mov	r0, r6
 800c4dc:	f000 f83c 	bl	800c558 <siprintf>
 800c4e0:	e7d0      	b.n	800c484 <_scanf_float+0x378>
 800c4e2:	9903      	ldr	r1, [sp, #12]
 800c4e4:	f012 0f04 	tst.w	r2, #4
 800c4e8:	f103 0204 	add.w	r2, r3, #4
 800c4ec:	600a      	str	r2, [r1, #0]
 800c4ee:	d1d9      	bne.n	800c4a4 <_scanf_float+0x398>
 800c4f0:	f8d3 8000 	ldr.w	r8, [r3]
 800c4f4:	ee10 2a10 	vmov	r2, s0
 800c4f8:	ee10 0a10 	vmov	r0, s0
 800c4fc:	463b      	mov	r3, r7
 800c4fe:	4639      	mov	r1, r7
 800c500:	f7f4 fb14 	bl	8000b2c <__aeabi_dcmpun>
 800c504:	b128      	cbz	r0, 800c512 <_scanf_float+0x406>
 800c506:	4808      	ldr	r0, [pc, #32]	; (800c528 <_scanf_float+0x41c>)
 800c508:	f000 f820 	bl	800c54c <nanf>
 800c50c:	ed88 0a00 	vstr	s0, [r8]
 800c510:	e7cb      	b.n	800c4aa <_scanf_float+0x39e>
 800c512:	4630      	mov	r0, r6
 800c514:	4639      	mov	r1, r7
 800c516:	f7f4 fb67 	bl	8000be8 <__aeabi_d2f>
 800c51a:	f8c8 0000 	str.w	r0, [r8]
 800c51e:	e7c4      	b.n	800c4aa <_scanf_float+0x39e>
 800c520:	2500      	movs	r5, #0
 800c522:	e634      	b.n	800c18e <_scanf_float+0x82>
 800c524:	080105f0 	.word	0x080105f0
 800c528:	0801071c 	.word	0x0801071c

0800c52c <_sbrk_r>:
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	4d06      	ldr	r5, [pc, #24]	; (800c548 <_sbrk_r+0x1c>)
 800c530:	2300      	movs	r3, #0
 800c532:	4604      	mov	r4, r0
 800c534:	4608      	mov	r0, r1
 800c536:	602b      	str	r3, [r5, #0]
 800c538:	f7f7 f8aa 	bl	8003690 <_sbrk>
 800c53c:	1c43      	adds	r3, r0, #1
 800c53e:	d102      	bne.n	800c546 <_sbrk_r+0x1a>
 800c540:	682b      	ldr	r3, [r5, #0]
 800c542:	b103      	cbz	r3, 800c546 <_sbrk_r+0x1a>
 800c544:	6023      	str	r3, [r4, #0]
 800c546:	bd38      	pop	{r3, r4, r5, pc}
 800c548:	20002aa4 	.word	0x20002aa4

0800c54c <nanf>:
 800c54c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c554 <nanf+0x8>
 800c550:	4770      	bx	lr
 800c552:	bf00      	nop
 800c554:	7fc00000 	.word	0x7fc00000

0800c558 <siprintf>:
 800c558:	b40e      	push	{r1, r2, r3}
 800c55a:	b500      	push	{lr}
 800c55c:	b09c      	sub	sp, #112	; 0x70
 800c55e:	ab1d      	add	r3, sp, #116	; 0x74
 800c560:	9002      	str	r0, [sp, #8]
 800c562:	9006      	str	r0, [sp, #24]
 800c564:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c568:	4809      	ldr	r0, [pc, #36]	; (800c590 <siprintf+0x38>)
 800c56a:	9107      	str	r1, [sp, #28]
 800c56c:	9104      	str	r1, [sp, #16]
 800c56e:	4909      	ldr	r1, [pc, #36]	; (800c594 <siprintf+0x3c>)
 800c570:	f853 2b04 	ldr.w	r2, [r3], #4
 800c574:	9105      	str	r1, [sp, #20]
 800c576:	6800      	ldr	r0, [r0, #0]
 800c578:	9301      	str	r3, [sp, #4]
 800c57a:	a902      	add	r1, sp, #8
 800c57c:	f002 ff16 	bl	800f3ac <_svfiprintf_r>
 800c580:	9b02      	ldr	r3, [sp, #8]
 800c582:	2200      	movs	r2, #0
 800c584:	701a      	strb	r2, [r3, #0]
 800c586:	b01c      	add	sp, #112	; 0x70
 800c588:	f85d eb04 	ldr.w	lr, [sp], #4
 800c58c:	b003      	add	sp, #12
 800c58e:	4770      	bx	lr
 800c590:	20000034 	.word	0x20000034
 800c594:	ffff0208 	.word	0xffff0208

0800c598 <strcat>:
 800c598:	b510      	push	{r4, lr}
 800c59a:	4602      	mov	r2, r0
 800c59c:	7814      	ldrb	r4, [r2, #0]
 800c59e:	4613      	mov	r3, r2
 800c5a0:	3201      	adds	r2, #1
 800c5a2:	2c00      	cmp	r4, #0
 800c5a4:	d1fa      	bne.n	800c59c <strcat+0x4>
 800c5a6:	3b01      	subs	r3, #1
 800c5a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5b0:	2a00      	cmp	r2, #0
 800c5b2:	d1f9      	bne.n	800c5a8 <strcat+0x10>
 800c5b4:	bd10      	pop	{r4, pc}

0800c5b6 <strncpy>:
 800c5b6:	b510      	push	{r4, lr}
 800c5b8:	3901      	subs	r1, #1
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	b132      	cbz	r2, 800c5cc <strncpy+0x16>
 800c5be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c5c2:	f803 4b01 	strb.w	r4, [r3], #1
 800c5c6:	3a01      	subs	r2, #1
 800c5c8:	2c00      	cmp	r4, #0
 800c5ca:	d1f7      	bne.n	800c5bc <strncpy+0x6>
 800c5cc:	441a      	add	r2, r3
 800c5ce:	2100      	movs	r1, #0
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d100      	bne.n	800c5d6 <strncpy+0x20>
 800c5d4:	bd10      	pop	{r4, pc}
 800c5d6:	f803 1b01 	strb.w	r1, [r3], #1
 800c5da:	e7f9      	b.n	800c5d0 <strncpy+0x1a>

0800c5dc <strstr>:
 800c5dc:	780a      	ldrb	r2, [r1, #0]
 800c5de:	b570      	push	{r4, r5, r6, lr}
 800c5e0:	b96a      	cbnz	r2, 800c5fe <strstr+0x22>
 800c5e2:	bd70      	pop	{r4, r5, r6, pc}
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d109      	bne.n	800c5fc <strstr+0x20>
 800c5e8:	460c      	mov	r4, r1
 800c5ea:	4605      	mov	r5, r0
 800c5ec:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d0f6      	beq.n	800c5e2 <strstr+0x6>
 800c5f4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c5f8:	429e      	cmp	r6, r3
 800c5fa:	d0f7      	beq.n	800c5ec <strstr+0x10>
 800c5fc:	3001      	adds	r0, #1
 800c5fe:	7803      	ldrb	r3, [r0, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1ef      	bne.n	800c5e4 <strstr+0x8>
 800c604:	4618      	mov	r0, r3
 800c606:	e7ec      	b.n	800c5e2 <strstr+0x6>

0800c608 <sulp>:
 800c608:	b570      	push	{r4, r5, r6, lr}
 800c60a:	4604      	mov	r4, r0
 800c60c:	460d      	mov	r5, r1
 800c60e:	ec45 4b10 	vmov	d0, r4, r5
 800c612:	4616      	mov	r6, r2
 800c614:	f002 fd0a 	bl	800f02c <__ulp>
 800c618:	ec51 0b10 	vmov	r0, r1, d0
 800c61c:	b17e      	cbz	r6, 800c63e <sulp+0x36>
 800c61e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c622:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c626:	2b00      	cmp	r3, #0
 800c628:	dd09      	ble.n	800c63e <sulp+0x36>
 800c62a:	051b      	lsls	r3, r3, #20
 800c62c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c630:	2400      	movs	r4, #0
 800c632:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c636:	4622      	mov	r2, r4
 800c638:	462b      	mov	r3, r5
 800c63a:	f7f3 ffdd 	bl	80005f8 <__aeabi_dmul>
 800c63e:	bd70      	pop	{r4, r5, r6, pc}

0800c640 <_strtod_l>:
 800c640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c644:	ed2d 8b02 	vpush	{d8}
 800c648:	b09d      	sub	sp, #116	; 0x74
 800c64a:	461f      	mov	r7, r3
 800c64c:	2300      	movs	r3, #0
 800c64e:	9318      	str	r3, [sp, #96]	; 0x60
 800c650:	4ba2      	ldr	r3, [pc, #648]	; (800c8dc <_strtod_l+0x29c>)
 800c652:	9213      	str	r2, [sp, #76]	; 0x4c
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	9305      	str	r3, [sp, #20]
 800c658:	4604      	mov	r4, r0
 800c65a:	4618      	mov	r0, r3
 800c65c:	4688      	mov	r8, r1
 800c65e:	f7f3 fdb7 	bl	80001d0 <strlen>
 800c662:	f04f 0a00 	mov.w	sl, #0
 800c666:	4605      	mov	r5, r0
 800c668:	f04f 0b00 	mov.w	fp, #0
 800c66c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c670:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c672:	781a      	ldrb	r2, [r3, #0]
 800c674:	2a2b      	cmp	r2, #43	; 0x2b
 800c676:	d04e      	beq.n	800c716 <_strtod_l+0xd6>
 800c678:	d83b      	bhi.n	800c6f2 <_strtod_l+0xb2>
 800c67a:	2a0d      	cmp	r2, #13
 800c67c:	d834      	bhi.n	800c6e8 <_strtod_l+0xa8>
 800c67e:	2a08      	cmp	r2, #8
 800c680:	d834      	bhi.n	800c6ec <_strtod_l+0xac>
 800c682:	2a00      	cmp	r2, #0
 800c684:	d03e      	beq.n	800c704 <_strtod_l+0xc4>
 800c686:	2300      	movs	r3, #0
 800c688:	930a      	str	r3, [sp, #40]	; 0x28
 800c68a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c68c:	7833      	ldrb	r3, [r6, #0]
 800c68e:	2b30      	cmp	r3, #48	; 0x30
 800c690:	f040 80b0 	bne.w	800c7f4 <_strtod_l+0x1b4>
 800c694:	7873      	ldrb	r3, [r6, #1]
 800c696:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c69a:	2b58      	cmp	r3, #88	; 0x58
 800c69c:	d168      	bne.n	800c770 <_strtod_l+0x130>
 800c69e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6a0:	9301      	str	r3, [sp, #4]
 800c6a2:	ab18      	add	r3, sp, #96	; 0x60
 800c6a4:	9702      	str	r7, [sp, #8]
 800c6a6:	9300      	str	r3, [sp, #0]
 800c6a8:	4a8d      	ldr	r2, [pc, #564]	; (800c8e0 <_strtod_l+0x2a0>)
 800c6aa:	ab19      	add	r3, sp, #100	; 0x64
 800c6ac:	a917      	add	r1, sp, #92	; 0x5c
 800c6ae:	4620      	mov	r0, r4
 800c6b0:	f001 fe12 	bl	800e2d8 <__gethex>
 800c6b4:	f010 0707 	ands.w	r7, r0, #7
 800c6b8:	4605      	mov	r5, r0
 800c6ba:	d005      	beq.n	800c6c8 <_strtod_l+0x88>
 800c6bc:	2f06      	cmp	r7, #6
 800c6be:	d12c      	bne.n	800c71a <_strtod_l+0xda>
 800c6c0:	3601      	adds	r6, #1
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	9617      	str	r6, [sp, #92]	; 0x5c
 800c6c6:	930a      	str	r3, [sp, #40]	; 0x28
 800c6c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	f040 8590 	bne.w	800d1f0 <_strtod_l+0xbb0>
 800c6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6d2:	b1eb      	cbz	r3, 800c710 <_strtod_l+0xd0>
 800c6d4:	4652      	mov	r2, sl
 800c6d6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c6da:	ec43 2b10 	vmov	d0, r2, r3
 800c6de:	b01d      	add	sp, #116	; 0x74
 800c6e0:	ecbd 8b02 	vpop	{d8}
 800c6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e8:	2a20      	cmp	r2, #32
 800c6ea:	d1cc      	bne.n	800c686 <_strtod_l+0x46>
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	9317      	str	r3, [sp, #92]	; 0x5c
 800c6f0:	e7be      	b.n	800c670 <_strtod_l+0x30>
 800c6f2:	2a2d      	cmp	r2, #45	; 0x2d
 800c6f4:	d1c7      	bne.n	800c686 <_strtod_l+0x46>
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	920a      	str	r2, [sp, #40]	; 0x28
 800c6fa:	1c5a      	adds	r2, r3, #1
 800c6fc:	9217      	str	r2, [sp, #92]	; 0x5c
 800c6fe:	785b      	ldrb	r3, [r3, #1]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d1c2      	bne.n	800c68a <_strtod_l+0x4a>
 800c704:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c706:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	f040 856e 	bne.w	800d1ec <_strtod_l+0xbac>
 800c710:	4652      	mov	r2, sl
 800c712:	465b      	mov	r3, fp
 800c714:	e7e1      	b.n	800c6da <_strtod_l+0x9a>
 800c716:	2200      	movs	r2, #0
 800c718:	e7ee      	b.n	800c6f8 <_strtod_l+0xb8>
 800c71a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c71c:	b13a      	cbz	r2, 800c72e <_strtod_l+0xee>
 800c71e:	2135      	movs	r1, #53	; 0x35
 800c720:	a81a      	add	r0, sp, #104	; 0x68
 800c722:	f002 fd8e 	bl	800f242 <__copybits>
 800c726:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c728:	4620      	mov	r0, r4
 800c72a:	f002 f94d 	bl	800e9c8 <_Bfree>
 800c72e:	3f01      	subs	r7, #1
 800c730:	2f04      	cmp	r7, #4
 800c732:	d806      	bhi.n	800c742 <_strtod_l+0x102>
 800c734:	e8df f007 	tbb	[pc, r7]
 800c738:	1714030a 	.word	0x1714030a
 800c73c:	0a          	.byte	0x0a
 800c73d:	00          	.byte	0x00
 800c73e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c742:	0728      	lsls	r0, r5, #28
 800c744:	d5c0      	bpl.n	800c6c8 <_strtod_l+0x88>
 800c746:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c74a:	e7bd      	b.n	800c6c8 <_strtod_l+0x88>
 800c74c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c750:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c752:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c756:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c75a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c75e:	e7f0      	b.n	800c742 <_strtod_l+0x102>
 800c760:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c8e4 <_strtod_l+0x2a4>
 800c764:	e7ed      	b.n	800c742 <_strtod_l+0x102>
 800c766:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c76a:	f04f 3aff 	mov.w	sl, #4294967295
 800c76e:	e7e8      	b.n	800c742 <_strtod_l+0x102>
 800c770:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c772:	1c5a      	adds	r2, r3, #1
 800c774:	9217      	str	r2, [sp, #92]	; 0x5c
 800c776:	785b      	ldrb	r3, [r3, #1]
 800c778:	2b30      	cmp	r3, #48	; 0x30
 800c77a:	d0f9      	beq.n	800c770 <_strtod_l+0x130>
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d0a3      	beq.n	800c6c8 <_strtod_l+0x88>
 800c780:	2301      	movs	r3, #1
 800c782:	f04f 0900 	mov.w	r9, #0
 800c786:	9304      	str	r3, [sp, #16]
 800c788:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c78a:	9308      	str	r3, [sp, #32]
 800c78c:	f8cd 901c 	str.w	r9, [sp, #28]
 800c790:	464f      	mov	r7, r9
 800c792:	220a      	movs	r2, #10
 800c794:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c796:	7806      	ldrb	r6, [r0, #0]
 800c798:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c79c:	b2d9      	uxtb	r1, r3
 800c79e:	2909      	cmp	r1, #9
 800c7a0:	d92a      	bls.n	800c7f8 <_strtod_l+0x1b8>
 800c7a2:	9905      	ldr	r1, [sp, #20]
 800c7a4:	462a      	mov	r2, r5
 800c7a6:	f003 f863 	bl	800f870 <strncmp>
 800c7aa:	b398      	cbz	r0, 800c814 <_strtod_l+0x1d4>
 800c7ac:	2000      	movs	r0, #0
 800c7ae:	4632      	mov	r2, r6
 800c7b0:	463d      	mov	r5, r7
 800c7b2:	9005      	str	r0, [sp, #20]
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	2a65      	cmp	r2, #101	; 0x65
 800c7b8:	d001      	beq.n	800c7be <_strtod_l+0x17e>
 800c7ba:	2a45      	cmp	r2, #69	; 0x45
 800c7bc:	d118      	bne.n	800c7f0 <_strtod_l+0x1b0>
 800c7be:	b91d      	cbnz	r5, 800c7c8 <_strtod_l+0x188>
 800c7c0:	9a04      	ldr	r2, [sp, #16]
 800c7c2:	4302      	orrs	r2, r0
 800c7c4:	d09e      	beq.n	800c704 <_strtod_l+0xc4>
 800c7c6:	2500      	movs	r5, #0
 800c7c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c7cc:	f108 0201 	add.w	r2, r8, #1
 800c7d0:	9217      	str	r2, [sp, #92]	; 0x5c
 800c7d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c7d6:	2a2b      	cmp	r2, #43	; 0x2b
 800c7d8:	d075      	beq.n	800c8c6 <_strtod_l+0x286>
 800c7da:	2a2d      	cmp	r2, #45	; 0x2d
 800c7dc:	d07b      	beq.n	800c8d6 <_strtod_l+0x296>
 800c7de:	f04f 0c00 	mov.w	ip, #0
 800c7e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c7e6:	2909      	cmp	r1, #9
 800c7e8:	f240 8082 	bls.w	800c8f0 <_strtod_l+0x2b0>
 800c7ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c7f0:	2600      	movs	r6, #0
 800c7f2:	e09d      	b.n	800c930 <_strtod_l+0x2f0>
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	e7c4      	b.n	800c782 <_strtod_l+0x142>
 800c7f8:	2f08      	cmp	r7, #8
 800c7fa:	bfd8      	it	le
 800c7fc:	9907      	ldrle	r1, [sp, #28]
 800c7fe:	f100 0001 	add.w	r0, r0, #1
 800c802:	bfda      	itte	le
 800c804:	fb02 3301 	mlale	r3, r2, r1, r3
 800c808:	9307      	strle	r3, [sp, #28]
 800c80a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c80e:	3701      	adds	r7, #1
 800c810:	9017      	str	r0, [sp, #92]	; 0x5c
 800c812:	e7bf      	b.n	800c794 <_strtod_l+0x154>
 800c814:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c816:	195a      	adds	r2, r3, r5
 800c818:	9217      	str	r2, [sp, #92]	; 0x5c
 800c81a:	5d5a      	ldrb	r2, [r3, r5]
 800c81c:	2f00      	cmp	r7, #0
 800c81e:	d037      	beq.n	800c890 <_strtod_l+0x250>
 800c820:	9005      	str	r0, [sp, #20]
 800c822:	463d      	mov	r5, r7
 800c824:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c828:	2b09      	cmp	r3, #9
 800c82a:	d912      	bls.n	800c852 <_strtod_l+0x212>
 800c82c:	2301      	movs	r3, #1
 800c82e:	e7c2      	b.n	800c7b6 <_strtod_l+0x176>
 800c830:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c832:	1c5a      	adds	r2, r3, #1
 800c834:	9217      	str	r2, [sp, #92]	; 0x5c
 800c836:	785a      	ldrb	r2, [r3, #1]
 800c838:	3001      	adds	r0, #1
 800c83a:	2a30      	cmp	r2, #48	; 0x30
 800c83c:	d0f8      	beq.n	800c830 <_strtod_l+0x1f0>
 800c83e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c842:	2b08      	cmp	r3, #8
 800c844:	f200 84d9 	bhi.w	800d1fa <_strtod_l+0xbba>
 800c848:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c84a:	9005      	str	r0, [sp, #20]
 800c84c:	2000      	movs	r0, #0
 800c84e:	9308      	str	r3, [sp, #32]
 800c850:	4605      	mov	r5, r0
 800c852:	3a30      	subs	r2, #48	; 0x30
 800c854:	f100 0301 	add.w	r3, r0, #1
 800c858:	d014      	beq.n	800c884 <_strtod_l+0x244>
 800c85a:	9905      	ldr	r1, [sp, #20]
 800c85c:	4419      	add	r1, r3
 800c85e:	9105      	str	r1, [sp, #20]
 800c860:	462b      	mov	r3, r5
 800c862:	eb00 0e05 	add.w	lr, r0, r5
 800c866:	210a      	movs	r1, #10
 800c868:	4573      	cmp	r3, lr
 800c86a:	d113      	bne.n	800c894 <_strtod_l+0x254>
 800c86c:	182b      	adds	r3, r5, r0
 800c86e:	2b08      	cmp	r3, #8
 800c870:	f105 0501 	add.w	r5, r5, #1
 800c874:	4405      	add	r5, r0
 800c876:	dc1c      	bgt.n	800c8b2 <_strtod_l+0x272>
 800c878:	9907      	ldr	r1, [sp, #28]
 800c87a:	230a      	movs	r3, #10
 800c87c:	fb03 2301 	mla	r3, r3, r1, r2
 800c880:	9307      	str	r3, [sp, #28]
 800c882:	2300      	movs	r3, #0
 800c884:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c886:	1c51      	adds	r1, r2, #1
 800c888:	9117      	str	r1, [sp, #92]	; 0x5c
 800c88a:	7852      	ldrb	r2, [r2, #1]
 800c88c:	4618      	mov	r0, r3
 800c88e:	e7c9      	b.n	800c824 <_strtod_l+0x1e4>
 800c890:	4638      	mov	r0, r7
 800c892:	e7d2      	b.n	800c83a <_strtod_l+0x1fa>
 800c894:	2b08      	cmp	r3, #8
 800c896:	dc04      	bgt.n	800c8a2 <_strtod_l+0x262>
 800c898:	9e07      	ldr	r6, [sp, #28]
 800c89a:	434e      	muls	r6, r1
 800c89c:	9607      	str	r6, [sp, #28]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	e7e2      	b.n	800c868 <_strtod_l+0x228>
 800c8a2:	f103 0c01 	add.w	ip, r3, #1
 800c8a6:	f1bc 0f10 	cmp.w	ip, #16
 800c8aa:	bfd8      	it	le
 800c8ac:	fb01 f909 	mulle.w	r9, r1, r9
 800c8b0:	e7f5      	b.n	800c89e <_strtod_l+0x25e>
 800c8b2:	2d10      	cmp	r5, #16
 800c8b4:	bfdc      	itt	le
 800c8b6:	230a      	movle	r3, #10
 800c8b8:	fb03 2909 	mlale	r9, r3, r9, r2
 800c8bc:	e7e1      	b.n	800c882 <_strtod_l+0x242>
 800c8be:	2300      	movs	r3, #0
 800c8c0:	9305      	str	r3, [sp, #20]
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	e77c      	b.n	800c7c0 <_strtod_l+0x180>
 800c8c6:	f04f 0c00 	mov.w	ip, #0
 800c8ca:	f108 0202 	add.w	r2, r8, #2
 800c8ce:	9217      	str	r2, [sp, #92]	; 0x5c
 800c8d0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c8d4:	e785      	b.n	800c7e2 <_strtod_l+0x1a2>
 800c8d6:	f04f 0c01 	mov.w	ip, #1
 800c8da:	e7f6      	b.n	800c8ca <_strtod_l+0x28a>
 800c8dc:	080108fc 	.word	0x080108fc
 800c8e0:	080105f8 	.word	0x080105f8
 800c8e4:	7ff00000 	.word	0x7ff00000
 800c8e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c8ea:	1c51      	adds	r1, r2, #1
 800c8ec:	9117      	str	r1, [sp, #92]	; 0x5c
 800c8ee:	7852      	ldrb	r2, [r2, #1]
 800c8f0:	2a30      	cmp	r2, #48	; 0x30
 800c8f2:	d0f9      	beq.n	800c8e8 <_strtod_l+0x2a8>
 800c8f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c8f8:	2908      	cmp	r1, #8
 800c8fa:	f63f af79 	bhi.w	800c7f0 <_strtod_l+0x1b0>
 800c8fe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c902:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c904:	9206      	str	r2, [sp, #24]
 800c906:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c908:	1c51      	adds	r1, r2, #1
 800c90a:	9117      	str	r1, [sp, #92]	; 0x5c
 800c90c:	7852      	ldrb	r2, [r2, #1]
 800c90e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c912:	2e09      	cmp	r6, #9
 800c914:	d937      	bls.n	800c986 <_strtod_l+0x346>
 800c916:	9e06      	ldr	r6, [sp, #24]
 800c918:	1b89      	subs	r1, r1, r6
 800c91a:	2908      	cmp	r1, #8
 800c91c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c920:	dc02      	bgt.n	800c928 <_strtod_l+0x2e8>
 800c922:	4576      	cmp	r6, lr
 800c924:	bfa8      	it	ge
 800c926:	4676      	movge	r6, lr
 800c928:	f1bc 0f00 	cmp.w	ip, #0
 800c92c:	d000      	beq.n	800c930 <_strtod_l+0x2f0>
 800c92e:	4276      	negs	r6, r6
 800c930:	2d00      	cmp	r5, #0
 800c932:	d14d      	bne.n	800c9d0 <_strtod_l+0x390>
 800c934:	9904      	ldr	r1, [sp, #16]
 800c936:	4301      	orrs	r1, r0
 800c938:	f47f aec6 	bne.w	800c6c8 <_strtod_l+0x88>
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	f47f aee1 	bne.w	800c704 <_strtod_l+0xc4>
 800c942:	2a69      	cmp	r2, #105	; 0x69
 800c944:	d027      	beq.n	800c996 <_strtod_l+0x356>
 800c946:	dc24      	bgt.n	800c992 <_strtod_l+0x352>
 800c948:	2a49      	cmp	r2, #73	; 0x49
 800c94a:	d024      	beq.n	800c996 <_strtod_l+0x356>
 800c94c:	2a4e      	cmp	r2, #78	; 0x4e
 800c94e:	f47f aed9 	bne.w	800c704 <_strtod_l+0xc4>
 800c952:	499f      	ldr	r1, [pc, #636]	; (800cbd0 <_strtod_l+0x590>)
 800c954:	a817      	add	r0, sp, #92	; 0x5c
 800c956:	f001 ff17 	bl	800e788 <__match>
 800c95a:	2800      	cmp	r0, #0
 800c95c:	f43f aed2 	beq.w	800c704 <_strtod_l+0xc4>
 800c960:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	2b28      	cmp	r3, #40	; 0x28
 800c966:	d12d      	bne.n	800c9c4 <_strtod_l+0x384>
 800c968:	499a      	ldr	r1, [pc, #616]	; (800cbd4 <_strtod_l+0x594>)
 800c96a:	aa1a      	add	r2, sp, #104	; 0x68
 800c96c:	a817      	add	r0, sp, #92	; 0x5c
 800c96e:	f001 ff1f 	bl	800e7b0 <__hexnan>
 800c972:	2805      	cmp	r0, #5
 800c974:	d126      	bne.n	800c9c4 <_strtod_l+0x384>
 800c976:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c978:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c97c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c980:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c984:	e6a0      	b.n	800c6c8 <_strtod_l+0x88>
 800c986:	210a      	movs	r1, #10
 800c988:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c98c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c990:	e7b9      	b.n	800c906 <_strtod_l+0x2c6>
 800c992:	2a6e      	cmp	r2, #110	; 0x6e
 800c994:	e7db      	b.n	800c94e <_strtod_l+0x30e>
 800c996:	4990      	ldr	r1, [pc, #576]	; (800cbd8 <_strtod_l+0x598>)
 800c998:	a817      	add	r0, sp, #92	; 0x5c
 800c99a:	f001 fef5 	bl	800e788 <__match>
 800c99e:	2800      	cmp	r0, #0
 800c9a0:	f43f aeb0 	beq.w	800c704 <_strtod_l+0xc4>
 800c9a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c9a6:	498d      	ldr	r1, [pc, #564]	; (800cbdc <_strtod_l+0x59c>)
 800c9a8:	3b01      	subs	r3, #1
 800c9aa:	a817      	add	r0, sp, #92	; 0x5c
 800c9ac:	9317      	str	r3, [sp, #92]	; 0x5c
 800c9ae:	f001 feeb 	bl	800e788 <__match>
 800c9b2:	b910      	cbnz	r0, 800c9ba <_strtod_l+0x37a>
 800c9b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	9317      	str	r3, [sp, #92]	; 0x5c
 800c9ba:	f8df b230 	ldr.w	fp, [pc, #560]	; 800cbec <_strtod_l+0x5ac>
 800c9be:	f04f 0a00 	mov.w	sl, #0
 800c9c2:	e681      	b.n	800c6c8 <_strtod_l+0x88>
 800c9c4:	4886      	ldr	r0, [pc, #536]	; (800cbe0 <_strtod_l+0x5a0>)
 800c9c6:	f002 ff4b 	bl	800f860 <nan>
 800c9ca:	ec5b ab10 	vmov	sl, fp, d0
 800c9ce:	e67b      	b.n	800c6c8 <_strtod_l+0x88>
 800c9d0:	9b05      	ldr	r3, [sp, #20]
 800c9d2:	9807      	ldr	r0, [sp, #28]
 800c9d4:	1af3      	subs	r3, r6, r3
 800c9d6:	2f00      	cmp	r7, #0
 800c9d8:	bf08      	it	eq
 800c9da:	462f      	moveq	r7, r5
 800c9dc:	2d10      	cmp	r5, #16
 800c9de:	9306      	str	r3, [sp, #24]
 800c9e0:	46a8      	mov	r8, r5
 800c9e2:	bfa8      	it	ge
 800c9e4:	f04f 0810 	movge.w	r8, #16
 800c9e8:	f7f3 fd8c 	bl	8000504 <__aeabi_ui2d>
 800c9ec:	2d09      	cmp	r5, #9
 800c9ee:	4682      	mov	sl, r0
 800c9f0:	468b      	mov	fp, r1
 800c9f2:	dd13      	ble.n	800ca1c <_strtod_l+0x3dc>
 800c9f4:	4b7b      	ldr	r3, [pc, #492]	; (800cbe4 <_strtod_l+0x5a4>)
 800c9f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c9fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c9fe:	f7f3 fdfb 	bl	80005f8 <__aeabi_dmul>
 800ca02:	4682      	mov	sl, r0
 800ca04:	4648      	mov	r0, r9
 800ca06:	468b      	mov	fp, r1
 800ca08:	f7f3 fd7c 	bl	8000504 <__aeabi_ui2d>
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	460b      	mov	r3, r1
 800ca10:	4650      	mov	r0, sl
 800ca12:	4659      	mov	r1, fp
 800ca14:	f7f3 fc3a 	bl	800028c <__adddf3>
 800ca18:	4682      	mov	sl, r0
 800ca1a:	468b      	mov	fp, r1
 800ca1c:	2d0f      	cmp	r5, #15
 800ca1e:	dc38      	bgt.n	800ca92 <_strtod_l+0x452>
 800ca20:	9b06      	ldr	r3, [sp, #24]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f43f ae50 	beq.w	800c6c8 <_strtod_l+0x88>
 800ca28:	dd24      	ble.n	800ca74 <_strtod_l+0x434>
 800ca2a:	2b16      	cmp	r3, #22
 800ca2c:	dc0b      	bgt.n	800ca46 <_strtod_l+0x406>
 800ca2e:	496d      	ldr	r1, [pc, #436]	; (800cbe4 <_strtod_l+0x5a4>)
 800ca30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ca34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca38:	4652      	mov	r2, sl
 800ca3a:	465b      	mov	r3, fp
 800ca3c:	f7f3 fddc 	bl	80005f8 <__aeabi_dmul>
 800ca40:	4682      	mov	sl, r0
 800ca42:	468b      	mov	fp, r1
 800ca44:	e640      	b.n	800c6c8 <_strtod_l+0x88>
 800ca46:	9a06      	ldr	r2, [sp, #24]
 800ca48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	db20      	blt.n	800ca92 <_strtod_l+0x452>
 800ca50:	4c64      	ldr	r4, [pc, #400]	; (800cbe4 <_strtod_l+0x5a4>)
 800ca52:	f1c5 050f 	rsb	r5, r5, #15
 800ca56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ca5a:	4652      	mov	r2, sl
 800ca5c:	465b      	mov	r3, fp
 800ca5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca62:	f7f3 fdc9 	bl	80005f8 <__aeabi_dmul>
 800ca66:	9b06      	ldr	r3, [sp, #24]
 800ca68:	1b5d      	subs	r5, r3, r5
 800ca6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ca6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ca72:	e7e3      	b.n	800ca3c <_strtod_l+0x3fc>
 800ca74:	9b06      	ldr	r3, [sp, #24]
 800ca76:	3316      	adds	r3, #22
 800ca78:	db0b      	blt.n	800ca92 <_strtod_l+0x452>
 800ca7a:	9b05      	ldr	r3, [sp, #20]
 800ca7c:	1b9e      	subs	r6, r3, r6
 800ca7e:	4b59      	ldr	r3, [pc, #356]	; (800cbe4 <_strtod_l+0x5a4>)
 800ca80:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ca84:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca88:	4650      	mov	r0, sl
 800ca8a:	4659      	mov	r1, fp
 800ca8c:	f7f3 fede 	bl	800084c <__aeabi_ddiv>
 800ca90:	e7d6      	b.n	800ca40 <_strtod_l+0x400>
 800ca92:	9b06      	ldr	r3, [sp, #24]
 800ca94:	eba5 0808 	sub.w	r8, r5, r8
 800ca98:	4498      	add	r8, r3
 800ca9a:	f1b8 0f00 	cmp.w	r8, #0
 800ca9e:	dd74      	ble.n	800cb8a <_strtod_l+0x54a>
 800caa0:	f018 030f 	ands.w	r3, r8, #15
 800caa4:	d00a      	beq.n	800cabc <_strtod_l+0x47c>
 800caa6:	494f      	ldr	r1, [pc, #316]	; (800cbe4 <_strtod_l+0x5a4>)
 800caa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800caac:	4652      	mov	r2, sl
 800caae:	465b      	mov	r3, fp
 800cab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cab4:	f7f3 fda0 	bl	80005f8 <__aeabi_dmul>
 800cab8:	4682      	mov	sl, r0
 800caba:	468b      	mov	fp, r1
 800cabc:	f038 080f 	bics.w	r8, r8, #15
 800cac0:	d04f      	beq.n	800cb62 <_strtod_l+0x522>
 800cac2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800cac6:	dd22      	ble.n	800cb0e <_strtod_l+0x4ce>
 800cac8:	2500      	movs	r5, #0
 800caca:	462e      	mov	r6, r5
 800cacc:	9507      	str	r5, [sp, #28]
 800cace:	9505      	str	r5, [sp, #20]
 800cad0:	2322      	movs	r3, #34	; 0x22
 800cad2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800cbec <_strtod_l+0x5ac>
 800cad6:	6023      	str	r3, [r4, #0]
 800cad8:	f04f 0a00 	mov.w	sl, #0
 800cadc:	9b07      	ldr	r3, [sp, #28]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	f43f adf2 	beq.w	800c6c8 <_strtod_l+0x88>
 800cae4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cae6:	4620      	mov	r0, r4
 800cae8:	f001 ff6e 	bl	800e9c8 <_Bfree>
 800caec:	9905      	ldr	r1, [sp, #20]
 800caee:	4620      	mov	r0, r4
 800caf0:	f001 ff6a 	bl	800e9c8 <_Bfree>
 800caf4:	4631      	mov	r1, r6
 800caf6:	4620      	mov	r0, r4
 800caf8:	f001 ff66 	bl	800e9c8 <_Bfree>
 800cafc:	9907      	ldr	r1, [sp, #28]
 800cafe:	4620      	mov	r0, r4
 800cb00:	f001 ff62 	bl	800e9c8 <_Bfree>
 800cb04:	4629      	mov	r1, r5
 800cb06:	4620      	mov	r0, r4
 800cb08:	f001 ff5e 	bl	800e9c8 <_Bfree>
 800cb0c:	e5dc      	b.n	800c6c8 <_strtod_l+0x88>
 800cb0e:	4b36      	ldr	r3, [pc, #216]	; (800cbe8 <_strtod_l+0x5a8>)
 800cb10:	9304      	str	r3, [sp, #16]
 800cb12:	2300      	movs	r3, #0
 800cb14:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cb18:	4650      	mov	r0, sl
 800cb1a:	4659      	mov	r1, fp
 800cb1c:	4699      	mov	r9, r3
 800cb1e:	f1b8 0f01 	cmp.w	r8, #1
 800cb22:	dc21      	bgt.n	800cb68 <_strtod_l+0x528>
 800cb24:	b10b      	cbz	r3, 800cb2a <_strtod_l+0x4ea>
 800cb26:	4682      	mov	sl, r0
 800cb28:	468b      	mov	fp, r1
 800cb2a:	4b2f      	ldr	r3, [pc, #188]	; (800cbe8 <_strtod_l+0x5a8>)
 800cb2c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cb30:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800cb34:	4652      	mov	r2, sl
 800cb36:	465b      	mov	r3, fp
 800cb38:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cb3c:	f7f3 fd5c 	bl	80005f8 <__aeabi_dmul>
 800cb40:	4b2a      	ldr	r3, [pc, #168]	; (800cbec <_strtod_l+0x5ac>)
 800cb42:	460a      	mov	r2, r1
 800cb44:	400b      	ands	r3, r1
 800cb46:	492a      	ldr	r1, [pc, #168]	; (800cbf0 <_strtod_l+0x5b0>)
 800cb48:	428b      	cmp	r3, r1
 800cb4a:	4682      	mov	sl, r0
 800cb4c:	d8bc      	bhi.n	800cac8 <_strtod_l+0x488>
 800cb4e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cb52:	428b      	cmp	r3, r1
 800cb54:	bf86      	itte	hi
 800cb56:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800cbf4 <_strtod_l+0x5b4>
 800cb5a:	f04f 3aff 	movhi.w	sl, #4294967295
 800cb5e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cb62:	2300      	movs	r3, #0
 800cb64:	9304      	str	r3, [sp, #16]
 800cb66:	e084      	b.n	800cc72 <_strtod_l+0x632>
 800cb68:	f018 0f01 	tst.w	r8, #1
 800cb6c:	d005      	beq.n	800cb7a <_strtod_l+0x53a>
 800cb6e:	9b04      	ldr	r3, [sp, #16]
 800cb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb74:	f7f3 fd40 	bl	80005f8 <__aeabi_dmul>
 800cb78:	2301      	movs	r3, #1
 800cb7a:	9a04      	ldr	r2, [sp, #16]
 800cb7c:	3208      	adds	r2, #8
 800cb7e:	f109 0901 	add.w	r9, r9, #1
 800cb82:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cb86:	9204      	str	r2, [sp, #16]
 800cb88:	e7c9      	b.n	800cb1e <_strtod_l+0x4de>
 800cb8a:	d0ea      	beq.n	800cb62 <_strtod_l+0x522>
 800cb8c:	f1c8 0800 	rsb	r8, r8, #0
 800cb90:	f018 020f 	ands.w	r2, r8, #15
 800cb94:	d00a      	beq.n	800cbac <_strtod_l+0x56c>
 800cb96:	4b13      	ldr	r3, [pc, #76]	; (800cbe4 <_strtod_l+0x5a4>)
 800cb98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb9c:	4650      	mov	r0, sl
 800cb9e:	4659      	mov	r1, fp
 800cba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba4:	f7f3 fe52 	bl	800084c <__aeabi_ddiv>
 800cba8:	4682      	mov	sl, r0
 800cbaa:	468b      	mov	fp, r1
 800cbac:	ea5f 1828 	movs.w	r8, r8, asr #4
 800cbb0:	d0d7      	beq.n	800cb62 <_strtod_l+0x522>
 800cbb2:	f1b8 0f1f 	cmp.w	r8, #31
 800cbb6:	dd1f      	ble.n	800cbf8 <_strtod_l+0x5b8>
 800cbb8:	2500      	movs	r5, #0
 800cbba:	462e      	mov	r6, r5
 800cbbc:	9507      	str	r5, [sp, #28]
 800cbbe:	9505      	str	r5, [sp, #20]
 800cbc0:	2322      	movs	r3, #34	; 0x22
 800cbc2:	f04f 0a00 	mov.w	sl, #0
 800cbc6:	f04f 0b00 	mov.w	fp, #0
 800cbca:	6023      	str	r3, [r4, #0]
 800cbcc:	e786      	b.n	800cadc <_strtod_l+0x49c>
 800cbce:	bf00      	nop
 800cbd0:	080105c9 	.word	0x080105c9
 800cbd4:	0801060c 	.word	0x0801060c
 800cbd8:	080105c1 	.word	0x080105c1
 800cbdc:	08010821 	.word	0x08010821
 800cbe0:	0801071c 	.word	0x0801071c
 800cbe4:	08010998 	.word	0x08010998
 800cbe8:	08010970 	.word	0x08010970
 800cbec:	7ff00000 	.word	0x7ff00000
 800cbf0:	7ca00000 	.word	0x7ca00000
 800cbf4:	7fefffff 	.word	0x7fefffff
 800cbf8:	f018 0310 	ands.w	r3, r8, #16
 800cbfc:	bf18      	it	ne
 800cbfe:	236a      	movne	r3, #106	; 0x6a
 800cc00:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800cfb0 <_strtod_l+0x970>
 800cc04:	9304      	str	r3, [sp, #16]
 800cc06:	4650      	mov	r0, sl
 800cc08:	4659      	mov	r1, fp
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	f018 0f01 	tst.w	r8, #1
 800cc10:	d004      	beq.n	800cc1c <_strtod_l+0x5dc>
 800cc12:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cc16:	f7f3 fcef 	bl	80005f8 <__aeabi_dmul>
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cc20:	f109 0908 	add.w	r9, r9, #8
 800cc24:	d1f2      	bne.n	800cc0c <_strtod_l+0x5cc>
 800cc26:	b10b      	cbz	r3, 800cc2c <_strtod_l+0x5ec>
 800cc28:	4682      	mov	sl, r0
 800cc2a:	468b      	mov	fp, r1
 800cc2c:	9b04      	ldr	r3, [sp, #16]
 800cc2e:	b1c3      	cbz	r3, 800cc62 <_strtod_l+0x622>
 800cc30:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cc34:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	4659      	mov	r1, fp
 800cc3c:	dd11      	ble.n	800cc62 <_strtod_l+0x622>
 800cc3e:	2b1f      	cmp	r3, #31
 800cc40:	f340 8124 	ble.w	800ce8c <_strtod_l+0x84c>
 800cc44:	2b34      	cmp	r3, #52	; 0x34
 800cc46:	bfde      	ittt	le
 800cc48:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800cc4c:	f04f 33ff 	movle.w	r3, #4294967295
 800cc50:	fa03 f202 	lslle.w	r2, r3, r2
 800cc54:	f04f 0a00 	mov.w	sl, #0
 800cc58:	bfcc      	ite	gt
 800cc5a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cc5e:	ea02 0b01 	andle.w	fp, r2, r1
 800cc62:	2200      	movs	r2, #0
 800cc64:	2300      	movs	r3, #0
 800cc66:	4650      	mov	r0, sl
 800cc68:	4659      	mov	r1, fp
 800cc6a:	f7f3 ff2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	d1a2      	bne.n	800cbb8 <_strtod_l+0x578>
 800cc72:	9b07      	ldr	r3, [sp, #28]
 800cc74:	9300      	str	r3, [sp, #0]
 800cc76:	9908      	ldr	r1, [sp, #32]
 800cc78:	462b      	mov	r3, r5
 800cc7a:	463a      	mov	r2, r7
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	f001 ff0b 	bl	800ea98 <__s2b>
 800cc82:	9007      	str	r0, [sp, #28]
 800cc84:	2800      	cmp	r0, #0
 800cc86:	f43f af1f 	beq.w	800cac8 <_strtod_l+0x488>
 800cc8a:	9b05      	ldr	r3, [sp, #20]
 800cc8c:	1b9e      	subs	r6, r3, r6
 800cc8e:	9b06      	ldr	r3, [sp, #24]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	bfb4      	ite	lt
 800cc94:	4633      	movlt	r3, r6
 800cc96:	2300      	movge	r3, #0
 800cc98:	930c      	str	r3, [sp, #48]	; 0x30
 800cc9a:	9b06      	ldr	r3, [sp, #24]
 800cc9c:	2500      	movs	r5, #0
 800cc9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cca2:	9312      	str	r3, [sp, #72]	; 0x48
 800cca4:	462e      	mov	r6, r5
 800cca6:	9b07      	ldr	r3, [sp, #28]
 800cca8:	4620      	mov	r0, r4
 800ccaa:	6859      	ldr	r1, [r3, #4]
 800ccac:	f001 fe4c 	bl	800e948 <_Balloc>
 800ccb0:	9005      	str	r0, [sp, #20]
 800ccb2:	2800      	cmp	r0, #0
 800ccb4:	f43f af0c 	beq.w	800cad0 <_strtod_l+0x490>
 800ccb8:	9b07      	ldr	r3, [sp, #28]
 800ccba:	691a      	ldr	r2, [r3, #16]
 800ccbc:	3202      	adds	r2, #2
 800ccbe:	f103 010c 	add.w	r1, r3, #12
 800ccc2:	0092      	lsls	r2, r2, #2
 800ccc4:	300c      	adds	r0, #12
 800ccc6:	f001 fe25 	bl	800e914 <memcpy>
 800ccca:	ec4b ab10 	vmov	d0, sl, fp
 800ccce:	aa1a      	add	r2, sp, #104	; 0x68
 800ccd0:	a919      	add	r1, sp, #100	; 0x64
 800ccd2:	4620      	mov	r0, r4
 800ccd4:	f002 fa26 	bl	800f124 <__d2b>
 800ccd8:	ec4b ab18 	vmov	d8, sl, fp
 800ccdc:	9018      	str	r0, [sp, #96]	; 0x60
 800ccde:	2800      	cmp	r0, #0
 800cce0:	f43f aef6 	beq.w	800cad0 <_strtod_l+0x490>
 800cce4:	2101      	movs	r1, #1
 800cce6:	4620      	mov	r0, r4
 800cce8:	f001 ff70 	bl	800ebcc <__i2b>
 800ccec:	4606      	mov	r6, r0
 800ccee:	2800      	cmp	r0, #0
 800ccf0:	f43f aeee 	beq.w	800cad0 <_strtod_l+0x490>
 800ccf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ccf6:	9904      	ldr	r1, [sp, #16]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	bfab      	itete	ge
 800ccfc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ccfe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800cd00:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800cd02:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800cd06:	bfac      	ite	ge
 800cd08:	eb03 0902 	addge.w	r9, r3, r2
 800cd0c:	1ad7      	sublt	r7, r2, r3
 800cd0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cd10:	eba3 0801 	sub.w	r8, r3, r1
 800cd14:	4490      	add	r8, r2
 800cd16:	4ba1      	ldr	r3, [pc, #644]	; (800cf9c <_strtod_l+0x95c>)
 800cd18:	f108 38ff 	add.w	r8, r8, #4294967295
 800cd1c:	4598      	cmp	r8, r3
 800cd1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cd22:	f280 80c7 	bge.w	800ceb4 <_strtod_l+0x874>
 800cd26:	eba3 0308 	sub.w	r3, r3, r8
 800cd2a:	2b1f      	cmp	r3, #31
 800cd2c:	eba2 0203 	sub.w	r2, r2, r3
 800cd30:	f04f 0101 	mov.w	r1, #1
 800cd34:	f300 80b1 	bgt.w	800ce9a <_strtod_l+0x85a>
 800cd38:	fa01 f303 	lsl.w	r3, r1, r3
 800cd3c:	930d      	str	r3, [sp, #52]	; 0x34
 800cd3e:	2300      	movs	r3, #0
 800cd40:	9308      	str	r3, [sp, #32]
 800cd42:	eb09 0802 	add.w	r8, r9, r2
 800cd46:	9b04      	ldr	r3, [sp, #16]
 800cd48:	45c1      	cmp	r9, r8
 800cd4a:	4417      	add	r7, r2
 800cd4c:	441f      	add	r7, r3
 800cd4e:	464b      	mov	r3, r9
 800cd50:	bfa8      	it	ge
 800cd52:	4643      	movge	r3, r8
 800cd54:	42bb      	cmp	r3, r7
 800cd56:	bfa8      	it	ge
 800cd58:	463b      	movge	r3, r7
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	bfc2      	ittt	gt
 800cd5e:	eba8 0803 	subgt.w	r8, r8, r3
 800cd62:	1aff      	subgt	r7, r7, r3
 800cd64:	eba9 0903 	subgt.w	r9, r9, r3
 800cd68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	dd17      	ble.n	800cd9e <_strtod_l+0x75e>
 800cd6e:	4631      	mov	r1, r6
 800cd70:	461a      	mov	r2, r3
 800cd72:	4620      	mov	r0, r4
 800cd74:	f001 ffea 	bl	800ed4c <__pow5mult>
 800cd78:	4606      	mov	r6, r0
 800cd7a:	2800      	cmp	r0, #0
 800cd7c:	f43f aea8 	beq.w	800cad0 <_strtod_l+0x490>
 800cd80:	4601      	mov	r1, r0
 800cd82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cd84:	4620      	mov	r0, r4
 800cd86:	f001 ff37 	bl	800ebf8 <__multiply>
 800cd8a:	900b      	str	r0, [sp, #44]	; 0x2c
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	f43f ae9f 	beq.w	800cad0 <_strtod_l+0x490>
 800cd92:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd94:	4620      	mov	r0, r4
 800cd96:	f001 fe17 	bl	800e9c8 <_Bfree>
 800cd9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd9c:	9318      	str	r3, [sp, #96]	; 0x60
 800cd9e:	f1b8 0f00 	cmp.w	r8, #0
 800cda2:	f300 808c 	bgt.w	800cebe <_strtod_l+0x87e>
 800cda6:	9b06      	ldr	r3, [sp, #24]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	dd08      	ble.n	800cdbe <_strtod_l+0x77e>
 800cdac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cdae:	9905      	ldr	r1, [sp, #20]
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	f001 ffcb 	bl	800ed4c <__pow5mult>
 800cdb6:	9005      	str	r0, [sp, #20]
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	f43f ae89 	beq.w	800cad0 <_strtod_l+0x490>
 800cdbe:	2f00      	cmp	r7, #0
 800cdc0:	dd08      	ble.n	800cdd4 <_strtod_l+0x794>
 800cdc2:	9905      	ldr	r1, [sp, #20]
 800cdc4:	463a      	mov	r2, r7
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	f002 f81a 	bl	800ee00 <__lshift>
 800cdcc:	9005      	str	r0, [sp, #20]
 800cdce:	2800      	cmp	r0, #0
 800cdd0:	f43f ae7e 	beq.w	800cad0 <_strtod_l+0x490>
 800cdd4:	f1b9 0f00 	cmp.w	r9, #0
 800cdd8:	dd08      	ble.n	800cdec <_strtod_l+0x7ac>
 800cdda:	4631      	mov	r1, r6
 800cddc:	464a      	mov	r2, r9
 800cdde:	4620      	mov	r0, r4
 800cde0:	f002 f80e 	bl	800ee00 <__lshift>
 800cde4:	4606      	mov	r6, r0
 800cde6:	2800      	cmp	r0, #0
 800cde8:	f43f ae72 	beq.w	800cad0 <_strtod_l+0x490>
 800cdec:	9a05      	ldr	r2, [sp, #20]
 800cdee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	f002 f891 	bl	800ef18 <__mdiff>
 800cdf6:	4605      	mov	r5, r0
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	f43f ae69 	beq.w	800cad0 <_strtod_l+0x490>
 800cdfe:	68c3      	ldr	r3, [r0, #12]
 800ce00:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce02:	2300      	movs	r3, #0
 800ce04:	60c3      	str	r3, [r0, #12]
 800ce06:	4631      	mov	r1, r6
 800ce08:	f002 f86a 	bl	800eee0 <__mcmp>
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	da60      	bge.n	800ced2 <_strtod_l+0x892>
 800ce10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce12:	ea53 030a 	orrs.w	r3, r3, sl
 800ce16:	f040 8082 	bne.w	800cf1e <_strtod_l+0x8de>
 800ce1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d17d      	bne.n	800cf1e <_strtod_l+0x8de>
 800ce22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ce26:	0d1b      	lsrs	r3, r3, #20
 800ce28:	051b      	lsls	r3, r3, #20
 800ce2a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ce2e:	d976      	bls.n	800cf1e <_strtod_l+0x8de>
 800ce30:	696b      	ldr	r3, [r5, #20]
 800ce32:	b913      	cbnz	r3, 800ce3a <_strtod_l+0x7fa>
 800ce34:	692b      	ldr	r3, [r5, #16]
 800ce36:	2b01      	cmp	r3, #1
 800ce38:	dd71      	ble.n	800cf1e <_strtod_l+0x8de>
 800ce3a:	4629      	mov	r1, r5
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f001 ffde 	bl	800ee00 <__lshift>
 800ce44:	4631      	mov	r1, r6
 800ce46:	4605      	mov	r5, r0
 800ce48:	f002 f84a 	bl	800eee0 <__mcmp>
 800ce4c:	2800      	cmp	r0, #0
 800ce4e:	dd66      	ble.n	800cf1e <_strtod_l+0x8de>
 800ce50:	9904      	ldr	r1, [sp, #16]
 800ce52:	4a53      	ldr	r2, [pc, #332]	; (800cfa0 <_strtod_l+0x960>)
 800ce54:	465b      	mov	r3, fp
 800ce56:	2900      	cmp	r1, #0
 800ce58:	f000 8081 	beq.w	800cf5e <_strtod_l+0x91e>
 800ce5c:	ea02 010b 	and.w	r1, r2, fp
 800ce60:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ce64:	dc7b      	bgt.n	800cf5e <_strtod_l+0x91e>
 800ce66:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ce6a:	f77f aea9 	ble.w	800cbc0 <_strtod_l+0x580>
 800ce6e:	4b4d      	ldr	r3, [pc, #308]	; (800cfa4 <_strtod_l+0x964>)
 800ce70:	4650      	mov	r0, sl
 800ce72:	4659      	mov	r1, fp
 800ce74:	2200      	movs	r2, #0
 800ce76:	f7f3 fbbf 	bl	80005f8 <__aeabi_dmul>
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	4303      	orrs	r3, r0
 800ce7e:	bf08      	it	eq
 800ce80:	2322      	moveq	r3, #34	; 0x22
 800ce82:	4682      	mov	sl, r0
 800ce84:	468b      	mov	fp, r1
 800ce86:	bf08      	it	eq
 800ce88:	6023      	streq	r3, [r4, #0]
 800ce8a:	e62b      	b.n	800cae4 <_strtod_l+0x4a4>
 800ce8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce90:	fa02 f303 	lsl.w	r3, r2, r3
 800ce94:	ea03 0a0a 	and.w	sl, r3, sl
 800ce98:	e6e3      	b.n	800cc62 <_strtod_l+0x622>
 800ce9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ce9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800cea2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800cea6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ceaa:	fa01 f308 	lsl.w	r3, r1, r8
 800ceae:	9308      	str	r3, [sp, #32]
 800ceb0:	910d      	str	r1, [sp, #52]	; 0x34
 800ceb2:	e746      	b.n	800cd42 <_strtod_l+0x702>
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	9308      	str	r3, [sp, #32]
 800ceb8:	2301      	movs	r3, #1
 800ceba:	930d      	str	r3, [sp, #52]	; 0x34
 800cebc:	e741      	b.n	800cd42 <_strtod_l+0x702>
 800cebe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cec0:	4642      	mov	r2, r8
 800cec2:	4620      	mov	r0, r4
 800cec4:	f001 ff9c 	bl	800ee00 <__lshift>
 800cec8:	9018      	str	r0, [sp, #96]	; 0x60
 800ceca:	2800      	cmp	r0, #0
 800cecc:	f47f af6b 	bne.w	800cda6 <_strtod_l+0x766>
 800ced0:	e5fe      	b.n	800cad0 <_strtod_l+0x490>
 800ced2:	465f      	mov	r7, fp
 800ced4:	d16e      	bne.n	800cfb4 <_strtod_l+0x974>
 800ced6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ced8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cedc:	b342      	cbz	r2, 800cf30 <_strtod_l+0x8f0>
 800cede:	4a32      	ldr	r2, [pc, #200]	; (800cfa8 <_strtod_l+0x968>)
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d128      	bne.n	800cf36 <_strtod_l+0x8f6>
 800cee4:	9b04      	ldr	r3, [sp, #16]
 800cee6:	4651      	mov	r1, sl
 800cee8:	b1eb      	cbz	r3, 800cf26 <_strtod_l+0x8e6>
 800ceea:	4b2d      	ldr	r3, [pc, #180]	; (800cfa0 <_strtod_l+0x960>)
 800ceec:	403b      	ands	r3, r7
 800ceee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cef2:	f04f 32ff 	mov.w	r2, #4294967295
 800cef6:	d819      	bhi.n	800cf2c <_strtod_l+0x8ec>
 800cef8:	0d1b      	lsrs	r3, r3, #20
 800cefa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cefe:	fa02 f303 	lsl.w	r3, r2, r3
 800cf02:	4299      	cmp	r1, r3
 800cf04:	d117      	bne.n	800cf36 <_strtod_l+0x8f6>
 800cf06:	4b29      	ldr	r3, [pc, #164]	; (800cfac <_strtod_l+0x96c>)
 800cf08:	429f      	cmp	r7, r3
 800cf0a:	d102      	bne.n	800cf12 <_strtod_l+0x8d2>
 800cf0c:	3101      	adds	r1, #1
 800cf0e:	f43f addf 	beq.w	800cad0 <_strtod_l+0x490>
 800cf12:	4b23      	ldr	r3, [pc, #140]	; (800cfa0 <_strtod_l+0x960>)
 800cf14:	403b      	ands	r3, r7
 800cf16:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800cf1a:	f04f 0a00 	mov.w	sl, #0
 800cf1e:	9b04      	ldr	r3, [sp, #16]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d1a4      	bne.n	800ce6e <_strtod_l+0x82e>
 800cf24:	e5de      	b.n	800cae4 <_strtod_l+0x4a4>
 800cf26:	f04f 33ff 	mov.w	r3, #4294967295
 800cf2a:	e7ea      	b.n	800cf02 <_strtod_l+0x8c2>
 800cf2c:	4613      	mov	r3, r2
 800cf2e:	e7e8      	b.n	800cf02 <_strtod_l+0x8c2>
 800cf30:	ea53 030a 	orrs.w	r3, r3, sl
 800cf34:	d08c      	beq.n	800ce50 <_strtod_l+0x810>
 800cf36:	9b08      	ldr	r3, [sp, #32]
 800cf38:	b1db      	cbz	r3, 800cf72 <_strtod_l+0x932>
 800cf3a:	423b      	tst	r3, r7
 800cf3c:	d0ef      	beq.n	800cf1e <_strtod_l+0x8de>
 800cf3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf40:	9a04      	ldr	r2, [sp, #16]
 800cf42:	4650      	mov	r0, sl
 800cf44:	4659      	mov	r1, fp
 800cf46:	b1c3      	cbz	r3, 800cf7a <_strtod_l+0x93a>
 800cf48:	f7ff fb5e 	bl	800c608 <sulp>
 800cf4c:	4602      	mov	r2, r0
 800cf4e:	460b      	mov	r3, r1
 800cf50:	ec51 0b18 	vmov	r0, r1, d8
 800cf54:	f7f3 f99a 	bl	800028c <__adddf3>
 800cf58:	4682      	mov	sl, r0
 800cf5a:	468b      	mov	fp, r1
 800cf5c:	e7df      	b.n	800cf1e <_strtod_l+0x8de>
 800cf5e:	4013      	ands	r3, r2
 800cf60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cf64:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cf68:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cf6c:	f04f 3aff 	mov.w	sl, #4294967295
 800cf70:	e7d5      	b.n	800cf1e <_strtod_l+0x8de>
 800cf72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf74:	ea13 0f0a 	tst.w	r3, sl
 800cf78:	e7e0      	b.n	800cf3c <_strtod_l+0x8fc>
 800cf7a:	f7ff fb45 	bl	800c608 <sulp>
 800cf7e:	4602      	mov	r2, r0
 800cf80:	460b      	mov	r3, r1
 800cf82:	ec51 0b18 	vmov	r0, r1, d8
 800cf86:	f7f3 f97f 	bl	8000288 <__aeabi_dsub>
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	4682      	mov	sl, r0
 800cf90:	468b      	mov	fp, r1
 800cf92:	f7f3 fd99 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	d0c1      	beq.n	800cf1e <_strtod_l+0x8de>
 800cf9a:	e611      	b.n	800cbc0 <_strtod_l+0x580>
 800cf9c:	fffffc02 	.word	0xfffffc02
 800cfa0:	7ff00000 	.word	0x7ff00000
 800cfa4:	39500000 	.word	0x39500000
 800cfa8:	000fffff 	.word	0x000fffff
 800cfac:	7fefffff 	.word	0x7fefffff
 800cfb0:	08010620 	.word	0x08010620
 800cfb4:	4631      	mov	r1, r6
 800cfb6:	4628      	mov	r0, r5
 800cfb8:	f002 f910 	bl	800f1dc <__ratio>
 800cfbc:	ec59 8b10 	vmov	r8, r9, d0
 800cfc0:	ee10 0a10 	vmov	r0, s0
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cfca:	4649      	mov	r1, r9
 800cfcc:	f7f3 fd90 	bl	8000af0 <__aeabi_dcmple>
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	d07a      	beq.n	800d0ca <_strtod_l+0xa8a>
 800cfd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d04a      	beq.n	800d070 <_strtod_l+0xa30>
 800cfda:	4b95      	ldr	r3, [pc, #596]	; (800d230 <_strtod_l+0xbf0>)
 800cfdc:	2200      	movs	r2, #0
 800cfde:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cfe2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d230 <_strtod_l+0xbf0>
 800cfe6:	f04f 0800 	mov.w	r8, #0
 800cfea:	4b92      	ldr	r3, [pc, #584]	; (800d234 <_strtod_l+0xbf4>)
 800cfec:	403b      	ands	r3, r7
 800cfee:	930d      	str	r3, [sp, #52]	; 0x34
 800cff0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cff2:	4b91      	ldr	r3, [pc, #580]	; (800d238 <_strtod_l+0xbf8>)
 800cff4:	429a      	cmp	r2, r3
 800cff6:	f040 80b0 	bne.w	800d15a <_strtod_l+0xb1a>
 800cffa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cffe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d002:	ec4b ab10 	vmov	d0, sl, fp
 800d006:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d00a:	f002 f80f 	bl	800f02c <__ulp>
 800d00e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d012:	ec53 2b10 	vmov	r2, r3, d0
 800d016:	f7f3 faef 	bl	80005f8 <__aeabi_dmul>
 800d01a:	4652      	mov	r2, sl
 800d01c:	465b      	mov	r3, fp
 800d01e:	f7f3 f935 	bl	800028c <__adddf3>
 800d022:	460b      	mov	r3, r1
 800d024:	4983      	ldr	r1, [pc, #524]	; (800d234 <_strtod_l+0xbf4>)
 800d026:	4a85      	ldr	r2, [pc, #532]	; (800d23c <_strtod_l+0xbfc>)
 800d028:	4019      	ands	r1, r3
 800d02a:	4291      	cmp	r1, r2
 800d02c:	4682      	mov	sl, r0
 800d02e:	d960      	bls.n	800d0f2 <_strtod_l+0xab2>
 800d030:	ee18 3a90 	vmov	r3, s17
 800d034:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d038:	4293      	cmp	r3, r2
 800d03a:	d104      	bne.n	800d046 <_strtod_l+0xa06>
 800d03c:	ee18 3a10 	vmov	r3, s16
 800d040:	3301      	adds	r3, #1
 800d042:	f43f ad45 	beq.w	800cad0 <_strtod_l+0x490>
 800d046:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d248 <_strtod_l+0xc08>
 800d04a:	f04f 3aff 	mov.w	sl, #4294967295
 800d04e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d050:	4620      	mov	r0, r4
 800d052:	f001 fcb9 	bl	800e9c8 <_Bfree>
 800d056:	9905      	ldr	r1, [sp, #20]
 800d058:	4620      	mov	r0, r4
 800d05a:	f001 fcb5 	bl	800e9c8 <_Bfree>
 800d05e:	4631      	mov	r1, r6
 800d060:	4620      	mov	r0, r4
 800d062:	f001 fcb1 	bl	800e9c8 <_Bfree>
 800d066:	4629      	mov	r1, r5
 800d068:	4620      	mov	r0, r4
 800d06a:	f001 fcad 	bl	800e9c8 <_Bfree>
 800d06e:	e61a      	b.n	800cca6 <_strtod_l+0x666>
 800d070:	f1ba 0f00 	cmp.w	sl, #0
 800d074:	d11b      	bne.n	800d0ae <_strtod_l+0xa6e>
 800d076:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d07a:	b9f3      	cbnz	r3, 800d0ba <_strtod_l+0xa7a>
 800d07c:	4b6c      	ldr	r3, [pc, #432]	; (800d230 <_strtod_l+0xbf0>)
 800d07e:	2200      	movs	r2, #0
 800d080:	4640      	mov	r0, r8
 800d082:	4649      	mov	r1, r9
 800d084:	f7f3 fd2a 	bl	8000adc <__aeabi_dcmplt>
 800d088:	b9d0      	cbnz	r0, 800d0c0 <_strtod_l+0xa80>
 800d08a:	4640      	mov	r0, r8
 800d08c:	4649      	mov	r1, r9
 800d08e:	4b6c      	ldr	r3, [pc, #432]	; (800d240 <_strtod_l+0xc00>)
 800d090:	2200      	movs	r2, #0
 800d092:	f7f3 fab1 	bl	80005f8 <__aeabi_dmul>
 800d096:	4680      	mov	r8, r0
 800d098:	4689      	mov	r9, r1
 800d09a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d09e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d0a2:	9315      	str	r3, [sp, #84]	; 0x54
 800d0a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d0a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d0ac:	e79d      	b.n	800cfea <_strtod_l+0x9aa>
 800d0ae:	f1ba 0f01 	cmp.w	sl, #1
 800d0b2:	d102      	bne.n	800d0ba <_strtod_l+0xa7a>
 800d0b4:	2f00      	cmp	r7, #0
 800d0b6:	f43f ad83 	beq.w	800cbc0 <_strtod_l+0x580>
 800d0ba:	4b62      	ldr	r3, [pc, #392]	; (800d244 <_strtod_l+0xc04>)
 800d0bc:	2200      	movs	r2, #0
 800d0be:	e78e      	b.n	800cfde <_strtod_l+0x99e>
 800d0c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d240 <_strtod_l+0xc00>
 800d0c4:	f04f 0800 	mov.w	r8, #0
 800d0c8:	e7e7      	b.n	800d09a <_strtod_l+0xa5a>
 800d0ca:	4b5d      	ldr	r3, [pc, #372]	; (800d240 <_strtod_l+0xc00>)
 800d0cc:	4640      	mov	r0, r8
 800d0ce:	4649      	mov	r1, r9
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	f7f3 fa91 	bl	80005f8 <__aeabi_dmul>
 800d0d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0d8:	4680      	mov	r8, r0
 800d0da:	4689      	mov	r9, r1
 800d0dc:	b933      	cbnz	r3, 800d0ec <_strtod_l+0xaac>
 800d0de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d0e2:	900e      	str	r0, [sp, #56]	; 0x38
 800d0e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d0ea:	e7dd      	b.n	800d0a8 <_strtod_l+0xa68>
 800d0ec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d0f0:	e7f9      	b.n	800d0e6 <_strtod_l+0xaa6>
 800d0f2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d0f6:	9b04      	ldr	r3, [sp, #16]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d1a8      	bne.n	800d04e <_strtod_l+0xa0e>
 800d0fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d100:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d102:	0d1b      	lsrs	r3, r3, #20
 800d104:	051b      	lsls	r3, r3, #20
 800d106:	429a      	cmp	r2, r3
 800d108:	d1a1      	bne.n	800d04e <_strtod_l+0xa0e>
 800d10a:	4640      	mov	r0, r8
 800d10c:	4649      	mov	r1, r9
 800d10e:	f7f3 fdd3 	bl	8000cb8 <__aeabi_d2lz>
 800d112:	f7f3 fa43 	bl	800059c <__aeabi_l2d>
 800d116:	4602      	mov	r2, r0
 800d118:	460b      	mov	r3, r1
 800d11a:	4640      	mov	r0, r8
 800d11c:	4649      	mov	r1, r9
 800d11e:	f7f3 f8b3 	bl	8000288 <__aeabi_dsub>
 800d122:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d124:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d128:	ea43 030a 	orr.w	r3, r3, sl
 800d12c:	4313      	orrs	r3, r2
 800d12e:	4680      	mov	r8, r0
 800d130:	4689      	mov	r9, r1
 800d132:	d055      	beq.n	800d1e0 <_strtod_l+0xba0>
 800d134:	a336      	add	r3, pc, #216	; (adr r3, 800d210 <_strtod_l+0xbd0>)
 800d136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13a:	f7f3 fccf 	bl	8000adc <__aeabi_dcmplt>
 800d13e:	2800      	cmp	r0, #0
 800d140:	f47f acd0 	bne.w	800cae4 <_strtod_l+0x4a4>
 800d144:	a334      	add	r3, pc, #208	; (adr r3, 800d218 <_strtod_l+0xbd8>)
 800d146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14a:	4640      	mov	r0, r8
 800d14c:	4649      	mov	r1, r9
 800d14e:	f7f3 fce3 	bl	8000b18 <__aeabi_dcmpgt>
 800d152:	2800      	cmp	r0, #0
 800d154:	f43f af7b 	beq.w	800d04e <_strtod_l+0xa0e>
 800d158:	e4c4      	b.n	800cae4 <_strtod_l+0x4a4>
 800d15a:	9b04      	ldr	r3, [sp, #16]
 800d15c:	b333      	cbz	r3, 800d1ac <_strtod_l+0xb6c>
 800d15e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d160:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d164:	d822      	bhi.n	800d1ac <_strtod_l+0xb6c>
 800d166:	a32e      	add	r3, pc, #184	; (adr r3, 800d220 <_strtod_l+0xbe0>)
 800d168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16c:	4640      	mov	r0, r8
 800d16e:	4649      	mov	r1, r9
 800d170:	f7f3 fcbe 	bl	8000af0 <__aeabi_dcmple>
 800d174:	b1a0      	cbz	r0, 800d1a0 <_strtod_l+0xb60>
 800d176:	4649      	mov	r1, r9
 800d178:	4640      	mov	r0, r8
 800d17a:	f7f3 fd15 	bl	8000ba8 <__aeabi_d2uiz>
 800d17e:	2801      	cmp	r0, #1
 800d180:	bf38      	it	cc
 800d182:	2001      	movcc	r0, #1
 800d184:	f7f3 f9be 	bl	8000504 <__aeabi_ui2d>
 800d188:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d18a:	4680      	mov	r8, r0
 800d18c:	4689      	mov	r9, r1
 800d18e:	bb23      	cbnz	r3, 800d1da <_strtod_l+0xb9a>
 800d190:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d194:	9010      	str	r0, [sp, #64]	; 0x40
 800d196:	9311      	str	r3, [sp, #68]	; 0x44
 800d198:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d19c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d1a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d1a4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d1a8:	1a9b      	subs	r3, r3, r2
 800d1aa:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d1b0:	eeb0 0a48 	vmov.f32	s0, s16
 800d1b4:	eef0 0a68 	vmov.f32	s1, s17
 800d1b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d1bc:	f001 ff36 	bl	800f02c <__ulp>
 800d1c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d1c4:	ec53 2b10 	vmov	r2, r3, d0
 800d1c8:	f7f3 fa16 	bl	80005f8 <__aeabi_dmul>
 800d1cc:	ec53 2b18 	vmov	r2, r3, d8
 800d1d0:	f7f3 f85c 	bl	800028c <__adddf3>
 800d1d4:	4682      	mov	sl, r0
 800d1d6:	468b      	mov	fp, r1
 800d1d8:	e78d      	b.n	800d0f6 <_strtod_l+0xab6>
 800d1da:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d1de:	e7db      	b.n	800d198 <_strtod_l+0xb58>
 800d1e0:	a311      	add	r3, pc, #68	; (adr r3, 800d228 <_strtod_l+0xbe8>)
 800d1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e6:	f7f3 fc79 	bl	8000adc <__aeabi_dcmplt>
 800d1ea:	e7b2      	b.n	800d152 <_strtod_l+0xb12>
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	930a      	str	r3, [sp, #40]	; 0x28
 800d1f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d1f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d1f4:	6013      	str	r3, [r2, #0]
 800d1f6:	f7ff ba6b 	b.w	800c6d0 <_strtod_l+0x90>
 800d1fa:	2a65      	cmp	r2, #101	; 0x65
 800d1fc:	f43f ab5f 	beq.w	800c8be <_strtod_l+0x27e>
 800d200:	2a45      	cmp	r2, #69	; 0x45
 800d202:	f43f ab5c 	beq.w	800c8be <_strtod_l+0x27e>
 800d206:	2301      	movs	r3, #1
 800d208:	f7ff bb94 	b.w	800c934 <_strtod_l+0x2f4>
 800d20c:	f3af 8000 	nop.w
 800d210:	94a03595 	.word	0x94a03595
 800d214:	3fdfffff 	.word	0x3fdfffff
 800d218:	35afe535 	.word	0x35afe535
 800d21c:	3fe00000 	.word	0x3fe00000
 800d220:	ffc00000 	.word	0xffc00000
 800d224:	41dfffff 	.word	0x41dfffff
 800d228:	94a03595 	.word	0x94a03595
 800d22c:	3fcfffff 	.word	0x3fcfffff
 800d230:	3ff00000 	.word	0x3ff00000
 800d234:	7ff00000 	.word	0x7ff00000
 800d238:	7fe00000 	.word	0x7fe00000
 800d23c:	7c9fffff 	.word	0x7c9fffff
 800d240:	3fe00000 	.word	0x3fe00000
 800d244:	bff00000 	.word	0xbff00000
 800d248:	7fefffff 	.word	0x7fefffff

0800d24c <_strtod_r>:
 800d24c:	4b01      	ldr	r3, [pc, #4]	; (800d254 <_strtod_r+0x8>)
 800d24e:	f7ff b9f7 	b.w	800c640 <_strtod_l>
 800d252:	bf00      	nop
 800d254:	2000009c 	.word	0x2000009c

0800d258 <strtok>:
 800d258:	4b16      	ldr	r3, [pc, #88]	; (800d2b4 <strtok+0x5c>)
 800d25a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d25c:	681e      	ldr	r6, [r3, #0]
 800d25e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800d260:	4605      	mov	r5, r0
 800d262:	b9fc      	cbnz	r4, 800d2a4 <strtok+0x4c>
 800d264:	2050      	movs	r0, #80	; 0x50
 800d266:	9101      	str	r1, [sp, #4]
 800d268:	f7fe f9f6 	bl	800b658 <malloc>
 800d26c:	9901      	ldr	r1, [sp, #4]
 800d26e:	65b0      	str	r0, [r6, #88]	; 0x58
 800d270:	4602      	mov	r2, r0
 800d272:	b920      	cbnz	r0, 800d27e <strtok+0x26>
 800d274:	4b10      	ldr	r3, [pc, #64]	; (800d2b8 <strtok+0x60>)
 800d276:	4811      	ldr	r0, [pc, #68]	; (800d2bc <strtok+0x64>)
 800d278:	2157      	movs	r1, #87	; 0x57
 800d27a:	f000 f919 	bl	800d4b0 <__assert_func>
 800d27e:	e9c0 4400 	strd	r4, r4, [r0]
 800d282:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d286:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d28a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d28e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d292:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d296:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d29a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d29e:	6184      	str	r4, [r0, #24]
 800d2a0:	7704      	strb	r4, [r0, #28]
 800d2a2:	6244      	str	r4, [r0, #36]	; 0x24
 800d2a4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	b002      	add	sp, #8
 800d2ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d2b0:	f000 b806 	b.w	800d2c0 <__strtok_r>
 800d2b4:	20000034 	.word	0x20000034
 800d2b8:	08010648 	.word	0x08010648
 800d2bc:	0801065f 	.word	0x0801065f

0800d2c0 <__strtok_r>:
 800d2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2c2:	b908      	cbnz	r0, 800d2c8 <__strtok_r+0x8>
 800d2c4:	6810      	ldr	r0, [r2, #0]
 800d2c6:	b188      	cbz	r0, 800d2ec <__strtok_r+0x2c>
 800d2c8:	4604      	mov	r4, r0
 800d2ca:	4620      	mov	r0, r4
 800d2cc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d2d0:	460f      	mov	r7, r1
 800d2d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d2d6:	b91e      	cbnz	r6, 800d2e0 <__strtok_r+0x20>
 800d2d8:	b965      	cbnz	r5, 800d2f4 <__strtok_r+0x34>
 800d2da:	6015      	str	r5, [r2, #0]
 800d2dc:	4628      	mov	r0, r5
 800d2de:	e005      	b.n	800d2ec <__strtok_r+0x2c>
 800d2e0:	42b5      	cmp	r5, r6
 800d2e2:	d1f6      	bne.n	800d2d2 <__strtok_r+0x12>
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d1f0      	bne.n	800d2ca <__strtok_r+0xa>
 800d2e8:	6014      	str	r4, [r2, #0]
 800d2ea:	7003      	strb	r3, [r0, #0]
 800d2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2ee:	461c      	mov	r4, r3
 800d2f0:	e00c      	b.n	800d30c <__strtok_r+0x4c>
 800d2f2:	b915      	cbnz	r5, 800d2fa <__strtok_r+0x3a>
 800d2f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d2f8:	460e      	mov	r6, r1
 800d2fa:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d2fe:	42ab      	cmp	r3, r5
 800d300:	d1f7      	bne.n	800d2f2 <__strtok_r+0x32>
 800d302:	2b00      	cmp	r3, #0
 800d304:	d0f3      	beq.n	800d2ee <__strtok_r+0x2e>
 800d306:	2300      	movs	r3, #0
 800d308:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d30c:	6014      	str	r4, [r2, #0]
 800d30e:	e7ed      	b.n	800d2ec <__strtok_r+0x2c>

0800d310 <_strtol_l.constprop.0>:
 800d310:	2b01      	cmp	r3, #1
 800d312:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d316:	d001      	beq.n	800d31c <_strtol_l.constprop.0+0xc>
 800d318:	2b24      	cmp	r3, #36	; 0x24
 800d31a:	d906      	bls.n	800d32a <_strtol_l.constprop.0+0x1a>
 800d31c:	f7fe f958 	bl	800b5d0 <__errno>
 800d320:	2316      	movs	r3, #22
 800d322:	6003      	str	r3, [r0, #0]
 800d324:	2000      	movs	r0, #0
 800d326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d32a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d410 <_strtol_l.constprop.0+0x100>
 800d32e:	460d      	mov	r5, r1
 800d330:	462e      	mov	r6, r5
 800d332:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d336:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d33a:	f017 0708 	ands.w	r7, r7, #8
 800d33e:	d1f7      	bne.n	800d330 <_strtol_l.constprop.0+0x20>
 800d340:	2c2d      	cmp	r4, #45	; 0x2d
 800d342:	d132      	bne.n	800d3aa <_strtol_l.constprop.0+0x9a>
 800d344:	782c      	ldrb	r4, [r5, #0]
 800d346:	2701      	movs	r7, #1
 800d348:	1cb5      	adds	r5, r6, #2
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d05b      	beq.n	800d406 <_strtol_l.constprop.0+0xf6>
 800d34e:	2b10      	cmp	r3, #16
 800d350:	d109      	bne.n	800d366 <_strtol_l.constprop.0+0x56>
 800d352:	2c30      	cmp	r4, #48	; 0x30
 800d354:	d107      	bne.n	800d366 <_strtol_l.constprop.0+0x56>
 800d356:	782c      	ldrb	r4, [r5, #0]
 800d358:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d35c:	2c58      	cmp	r4, #88	; 0x58
 800d35e:	d14d      	bne.n	800d3fc <_strtol_l.constprop.0+0xec>
 800d360:	786c      	ldrb	r4, [r5, #1]
 800d362:	2310      	movs	r3, #16
 800d364:	3502      	adds	r5, #2
 800d366:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d36a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d36e:	f04f 0c00 	mov.w	ip, #0
 800d372:	fbb8 f9f3 	udiv	r9, r8, r3
 800d376:	4666      	mov	r6, ip
 800d378:	fb03 8a19 	mls	sl, r3, r9, r8
 800d37c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d380:	f1be 0f09 	cmp.w	lr, #9
 800d384:	d816      	bhi.n	800d3b4 <_strtol_l.constprop.0+0xa4>
 800d386:	4674      	mov	r4, lr
 800d388:	42a3      	cmp	r3, r4
 800d38a:	dd24      	ble.n	800d3d6 <_strtol_l.constprop.0+0xc6>
 800d38c:	f1bc 0f00 	cmp.w	ip, #0
 800d390:	db1e      	blt.n	800d3d0 <_strtol_l.constprop.0+0xc0>
 800d392:	45b1      	cmp	r9, r6
 800d394:	d31c      	bcc.n	800d3d0 <_strtol_l.constprop.0+0xc0>
 800d396:	d101      	bne.n	800d39c <_strtol_l.constprop.0+0x8c>
 800d398:	45a2      	cmp	sl, r4
 800d39a:	db19      	blt.n	800d3d0 <_strtol_l.constprop.0+0xc0>
 800d39c:	fb06 4603 	mla	r6, r6, r3, r4
 800d3a0:	f04f 0c01 	mov.w	ip, #1
 800d3a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d3a8:	e7e8      	b.n	800d37c <_strtol_l.constprop.0+0x6c>
 800d3aa:	2c2b      	cmp	r4, #43	; 0x2b
 800d3ac:	bf04      	itt	eq
 800d3ae:	782c      	ldrbeq	r4, [r5, #0]
 800d3b0:	1cb5      	addeq	r5, r6, #2
 800d3b2:	e7ca      	b.n	800d34a <_strtol_l.constprop.0+0x3a>
 800d3b4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d3b8:	f1be 0f19 	cmp.w	lr, #25
 800d3bc:	d801      	bhi.n	800d3c2 <_strtol_l.constprop.0+0xb2>
 800d3be:	3c37      	subs	r4, #55	; 0x37
 800d3c0:	e7e2      	b.n	800d388 <_strtol_l.constprop.0+0x78>
 800d3c2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d3c6:	f1be 0f19 	cmp.w	lr, #25
 800d3ca:	d804      	bhi.n	800d3d6 <_strtol_l.constprop.0+0xc6>
 800d3cc:	3c57      	subs	r4, #87	; 0x57
 800d3ce:	e7db      	b.n	800d388 <_strtol_l.constprop.0+0x78>
 800d3d0:	f04f 3cff 	mov.w	ip, #4294967295
 800d3d4:	e7e6      	b.n	800d3a4 <_strtol_l.constprop.0+0x94>
 800d3d6:	f1bc 0f00 	cmp.w	ip, #0
 800d3da:	da05      	bge.n	800d3e8 <_strtol_l.constprop.0+0xd8>
 800d3dc:	2322      	movs	r3, #34	; 0x22
 800d3de:	6003      	str	r3, [r0, #0]
 800d3e0:	4646      	mov	r6, r8
 800d3e2:	b942      	cbnz	r2, 800d3f6 <_strtol_l.constprop.0+0xe6>
 800d3e4:	4630      	mov	r0, r6
 800d3e6:	e79e      	b.n	800d326 <_strtol_l.constprop.0+0x16>
 800d3e8:	b107      	cbz	r7, 800d3ec <_strtol_l.constprop.0+0xdc>
 800d3ea:	4276      	negs	r6, r6
 800d3ec:	2a00      	cmp	r2, #0
 800d3ee:	d0f9      	beq.n	800d3e4 <_strtol_l.constprop.0+0xd4>
 800d3f0:	f1bc 0f00 	cmp.w	ip, #0
 800d3f4:	d000      	beq.n	800d3f8 <_strtol_l.constprop.0+0xe8>
 800d3f6:	1e69      	subs	r1, r5, #1
 800d3f8:	6011      	str	r1, [r2, #0]
 800d3fa:	e7f3      	b.n	800d3e4 <_strtol_l.constprop.0+0xd4>
 800d3fc:	2430      	movs	r4, #48	; 0x30
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d1b1      	bne.n	800d366 <_strtol_l.constprop.0+0x56>
 800d402:	2308      	movs	r3, #8
 800d404:	e7af      	b.n	800d366 <_strtol_l.constprop.0+0x56>
 800d406:	2c30      	cmp	r4, #48	; 0x30
 800d408:	d0a5      	beq.n	800d356 <_strtol_l.constprop.0+0x46>
 800d40a:	230a      	movs	r3, #10
 800d40c:	e7ab      	b.n	800d366 <_strtol_l.constprop.0+0x56>
 800d40e:	bf00      	nop
 800d410:	0801071e 	.word	0x0801071e

0800d414 <_strtol_r>:
 800d414:	f7ff bf7c 	b.w	800d310 <_strtol_l.constprop.0>

0800d418 <strtol>:
 800d418:	4613      	mov	r3, r2
 800d41a:	460a      	mov	r2, r1
 800d41c:	4601      	mov	r1, r0
 800d41e:	4802      	ldr	r0, [pc, #8]	; (800d428 <strtol+0x10>)
 800d420:	6800      	ldr	r0, [r0, #0]
 800d422:	f7ff bf75 	b.w	800d310 <_strtol_l.constprop.0>
 800d426:	bf00      	nop
 800d428:	20000034 	.word	0x20000034

0800d42c <__utoa>:
 800d42c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d42e:	4c1f      	ldr	r4, [pc, #124]	; (800d4ac <__utoa+0x80>)
 800d430:	b08b      	sub	sp, #44	; 0x2c
 800d432:	4605      	mov	r5, r0
 800d434:	460b      	mov	r3, r1
 800d436:	466e      	mov	r6, sp
 800d438:	f104 0c20 	add.w	ip, r4, #32
 800d43c:	6820      	ldr	r0, [r4, #0]
 800d43e:	6861      	ldr	r1, [r4, #4]
 800d440:	4637      	mov	r7, r6
 800d442:	c703      	stmia	r7!, {r0, r1}
 800d444:	3408      	adds	r4, #8
 800d446:	4564      	cmp	r4, ip
 800d448:	463e      	mov	r6, r7
 800d44a:	d1f7      	bne.n	800d43c <__utoa+0x10>
 800d44c:	7921      	ldrb	r1, [r4, #4]
 800d44e:	7139      	strb	r1, [r7, #4]
 800d450:	1e91      	subs	r1, r2, #2
 800d452:	6820      	ldr	r0, [r4, #0]
 800d454:	6038      	str	r0, [r7, #0]
 800d456:	2922      	cmp	r1, #34	; 0x22
 800d458:	f04f 0100 	mov.w	r1, #0
 800d45c:	d904      	bls.n	800d468 <__utoa+0x3c>
 800d45e:	7019      	strb	r1, [r3, #0]
 800d460:	460b      	mov	r3, r1
 800d462:	4618      	mov	r0, r3
 800d464:	b00b      	add	sp, #44	; 0x2c
 800d466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d468:	1e58      	subs	r0, r3, #1
 800d46a:	4684      	mov	ip, r0
 800d46c:	fbb5 f7f2 	udiv	r7, r5, r2
 800d470:	fb02 5617 	mls	r6, r2, r7, r5
 800d474:	3628      	adds	r6, #40	; 0x28
 800d476:	446e      	add	r6, sp
 800d478:	460c      	mov	r4, r1
 800d47a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d47e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d482:	462e      	mov	r6, r5
 800d484:	42b2      	cmp	r2, r6
 800d486:	f101 0101 	add.w	r1, r1, #1
 800d48a:	463d      	mov	r5, r7
 800d48c:	d9ee      	bls.n	800d46c <__utoa+0x40>
 800d48e:	2200      	movs	r2, #0
 800d490:	545a      	strb	r2, [r3, r1]
 800d492:	1919      	adds	r1, r3, r4
 800d494:	1aa5      	subs	r5, r4, r2
 800d496:	42aa      	cmp	r2, r5
 800d498:	dae3      	bge.n	800d462 <__utoa+0x36>
 800d49a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d49e:	780e      	ldrb	r6, [r1, #0]
 800d4a0:	7006      	strb	r6, [r0, #0]
 800d4a2:	3201      	adds	r2, #1
 800d4a4:	f801 5901 	strb.w	r5, [r1], #-1
 800d4a8:	e7f4      	b.n	800d494 <__utoa+0x68>
 800d4aa:	bf00      	nop
 800d4ac:	080106bc 	.word	0x080106bc

0800d4b0 <__assert_func>:
 800d4b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4b2:	4614      	mov	r4, r2
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	4b09      	ldr	r3, [pc, #36]	; (800d4dc <__assert_func+0x2c>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	4605      	mov	r5, r0
 800d4bc:	68d8      	ldr	r0, [r3, #12]
 800d4be:	b14c      	cbz	r4, 800d4d4 <__assert_func+0x24>
 800d4c0:	4b07      	ldr	r3, [pc, #28]	; (800d4e0 <__assert_func+0x30>)
 800d4c2:	9100      	str	r1, [sp, #0]
 800d4c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d4c8:	4906      	ldr	r1, [pc, #24]	; (800d4e4 <__assert_func+0x34>)
 800d4ca:	462b      	mov	r3, r5
 800d4cc:	f000 fe8a 	bl	800e1e4 <fiprintf>
 800d4d0:	f002 fab0 	bl	800fa34 <abort>
 800d4d4:	4b04      	ldr	r3, [pc, #16]	; (800d4e8 <__assert_func+0x38>)
 800d4d6:	461c      	mov	r4, r3
 800d4d8:	e7f3      	b.n	800d4c2 <__assert_func+0x12>
 800d4da:	bf00      	nop
 800d4dc:	20000034 	.word	0x20000034
 800d4e0:	080106e1 	.word	0x080106e1
 800d4e4:	080106ee 	.word	0x080106ee
 800d4e8:	0801071c 	.word	0x0801071c

0800d4ec <quorem>:
 800d4ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f0:	6903      	ldr	r3, [r0, #16]
 800d4f2:	690c      	ldr	r4, [r1, #16]
 800d4f4:	42a3      	cmp	r3, r4
 800d4f6:	4607      	mov	r7, r0
 800d4f8:	f2c0 8081 	blt.w	800d5fe <quorem+0x112>
 800d4fc:	3c01      	subs	r4, #1
 800d4fe:	f101 0814 	add.w	r8, r1, #20
 800d502:	f100 0514 	add.w	r5, r0, #20
 800d506:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d50a:	9301      	str	r3, [sp, #4]
 800d50c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d510:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d514:	3301      	adds	r3, #1
 800d516:	429a      	cmp	r2, r3
 800d518:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d51c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d520:	fbb2 f6f3 	udiv	r6, r2, r3
 800d524:	d331      	bcc.n	800d58a <quorem+0x9e>
 800d526:	f04f 0e00 	mov.w	lr, #0
 800d52a:	4640      	mov	r0, r8
 800d52c:	46ac      	mov	ip, r5
 800d52e:	46f2      	mov	sl, lr
 800d530:	f850 2b04 	ldr.w	r2, [r0], #4
 800d534:	b293      	uxth	r3, r2
 800d536:	fb06 e303 	mla	r3, r6, r3, lr
 800d53a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d53e:	b29b      	uxth	r3, r3
 800d540:	ebaa 0303 	sub.w	r3, sl, r3
 800d544:	f8dc a000 	ldr.w	sl, [ip]
 800d548:	0c12      	lsrs	r2, r2, #16
 800d54a:	fa13 f38a 	uxtah	r3, r3, sl
 800d54e:	fb06 e202 	mla	r2, r6, r2, lr
 800d552:	9300      	str	r3, [sp, #0]
 800d554:	9b00      	ldr	r3, [sp, #0]
 800d556:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d55a:	b292      	uxth	r2, r2
 800d55c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d560:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d564:	f8bd 3000 	ldrh.w	r3, [sp]
 800d568:	4581      	cmp	r9, r0
 800d56a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d56e:	f84c 3b04 	str.w	r3, [ip], #4
 800d572:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d576:	d2db      	bcs.n	800d530 <quorem+0x44>
 800d578:	f855 300b 	ldr.w	r3, [r5, fp]
 800d57c:	b92b      	cbnz	r3, 800d58a <quorem+0x9e>
 800d57e:	9b01      	ldr	r3, [sp, #4]
 800d580:	3b04      	subs	r3, #4
 800d582:	429d      	cmp	r5, r3
 800d584:	461a      	mov	r2, r3
 800d586:	d32e      	bcc.n	800d5e6 <quorem+0xfa>
 800d588:	613c      	str	r4, [r7, #16]
 800d58a:	4638      	mov	r0, r7
 800d58c:	f001 fca8 	bl	800eee0 <__mcmp>
 800d590:	2800      	cmp	r0, #0
 800d592:	db24      	blt.n	800d5de <quorem+0xf2>
 800d594:	3601      	adds	r6, #1
 800d596:	4628      	mov	r0, r5
 800d598:	f04f 0c00 	mov.w	ip, #0
 800d59c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d5a0:	f8d0 e000 	ldr.w	lr, [r0]
 800d5a4:	b293      	uxth	r3, r2
 800d5a6:	ebac 0303 	sub.w	r3, ip, r3
 800d5aa:	0c12      	lsrs	r2, r2, #16
 800d5ac:	fa13 f38e 	uxtah	r3, r3, lr
 800d5b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d5b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d5b8:	b29b      	uxth	r3, r3
 800d5ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5be:	45c1      	cmp	r9, r8
 800d5c0:	f840 3b04 	str.w	r3, [r0], #4
 800d5c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d5c8:	d2e8      	bcs.n	800d59c <quorem+0xb0>
 800d5ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d5ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d5d2:	b922      	cbnz	r2, 800d5de <quorem+0xf2>
 800d5d4:	3b04      	subs	r3, #4
 800d5d6:	429d      	cmp	r5, r3
 800d5d8:	461a      	mov	r2, r3
 800d5da:	d30a      	bcc.n	800d5f2 <quorem+0x106>
 800d5dc:	613c      	str	r4, [r7, #16]
 800d5de:	4630      	mov	r0, r6
 800d5e0:	b003      	add	sp, #12
 800d5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e6:	6812      	ldr	r2, [r2, #0]
 800d5e8:	3b04      	subs	r3, #4
 800d5ea:	2a00      	cmp	r2, #0
 800d5ec:	d1cc      	bne.n	800d588 <quorem+0x9c>
 800d5ee:	3c01      	subs	r4, #1
 800d5f0:	e7c7      	b.n	800d582 <quorem+0x96>
 800d5f2:	6812      	ldr	r2, [r2, #0]
 800d5f4:	3b04      	subs	r3, #4
 800d5f6:	2a00      	cmp	r2, #0
 800d5f8:	d1f0      	bne.n	800d5dc <quorem+0xf0>
 800d5fa:	3c01      	subs	r4, #1
 800d5fc:	e7eb      	b.n	800d5d6 <quorem+0xea>
 800d5fe:	2000      	movs	r0, #0
 800d600:	e7ee      	b.n	800d5e0 <quorem+0xf4>
 800d602:	0000      	movs	r0, r0
 800d604:	0000      	movs	r0, r0
	...

0800d608 <_dtoa_r>:
 800d608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d60c:	ed2d 8b04 	vpush	{d8-d9}
 800d610:	ec57 6b10 	vmov	r6, r7, d0
 800d614:	b093      	sub	sp, #76	; 0x4c
 800d616:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d618:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d61c:	9106      	str	r1, [sp, #24]
 800d61e:	ee10 aa10 	vmov	sl, s0
 800d622:	4604      	mov	r4, r0
 800d624:	9209      	str	r2, [sp, #36]	; 0x24
 800d626:	930c      	str	r3, [sp, #48]	; 0x30
 800d628:	46bb      	mov	fp, r7
 800d62a:	b975      	cbnz	r5, 800d64a <_dtoa_r+0x42>
 800d62c:	2010      	movs	r0, #16
 800d62e:	f7fe f813 	bl	800b658 <malloc>
 800d632:	4602      	mov	r2, r0
 800d634:	6260      	str	r0, [r4, #36]	; 0x24
 800d636:	b920      	cbnz	r0, 800d642 <_dtoa_r+0x3a>
 800d638:	4ba7      	ldr	r3, [pc, #668]	; (800d8d8 <_dtoa_r+0x2d0>)
 800d63a:	21ea      	movs	r1, #234	; 0xea
 800d63c:	48a7      	ldr	r0, [pc, #668]	; (800d8dc <_dtoa_r+0x2d4>)
 800d63e:	f7ff ff37 	bl	800d4b0 <__assert_func>
 800d642:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d646:	6005      	str	r5, [r0, #0]
 800d648:	60c5      	str	r5, [r0, #12]
 800d64a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d64c:	6819      	ldr	r1, [r3, #0]
 800d64e:	b151      	cbz	r1, 800d666 <_dtoa_r+0x5e>
 800d650:	685a      	ldr	r2, [r3, #4]
 800d652:	604a      	str	r2, [r1, #4]
 800d654:	2301      	movs	r3, #1
 800d656:	4093      	lsls	r3, r2
 800d658:	608b      	str	r3, [r1, #8]
 800d65a:	4620      	mov	r0, r4
 800d65c:	f001 f9b4 	bl	800e9c8 <_Bfree>
 800d660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d662:	2200      	movs	r2, #0
 800d664:	601a      	str	r2, [r3, #0]
 800d666:	1e3b      	subs	r3, r7, #0
 800d668:	bfaa      	itet	ge
 800d66a:	2300      	movge	r3, #0
 800d66c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d670:	f8c8 3000 	strge.w	r3, [r8]
 800d674:	4b9a      	ldr	r3, [pc, #616]	; (800d8e0 <_dtoa_r+0x2d8>)
 800d676:	bfbc      	itt	lt
 800d678:	2201      	movlt	r2, #1
 800d67a:	f8c8 2000 	strlt.w	r2, [r8]
 800d67e:	ea33 030b 	bics.w	r3, r3, fp
 800d682:	d11b      	bne.n	800d6bc <_dtoa_r+0xb4>
 800d684:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d686:	f242 730f 	movw	r3, #9999	; 0x270f
 800d68a:	6013      	str	r3, [r2, #0]
 800d68c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d690:	4333      	orrs	r3, r6
 800d692:	f000 8592 	beq.w	800e1ba <_dtoa_r+0xbb2>
 800d696:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d698:	b963      	cbnz	r3, 800d6b4 <_dtoa_r+0xac>
 800d69a:	4b92      	ldr	r3, [pc, #584]	; (800d8e4 <_dtoa_r+0x2dc>)
 800d69c:	e022      	b.n	800d6e4 <_dtoa_r+0xdc>
 800d69e:	4b92      	ldr	r3, [pc, #584]	; (800d8e8 <_dtoa_r+0x2e0>)
 800d6a0:	9301      	str	r3, [sp, #4]
 800d6a2:	3308      	adds	r3, #8
 800d6a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d6a6:	6013      	str	r3, [r2, #0]
 800d6a8:	9801      	ldr	r0, [sp, #4]
 800d6aa:	b013      	add	sp, #76	; 0x4c
 800d6ac:	ecbd 8b04 	vpop	{d8-d9}
 800d6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b4:	4b8b      	ldr	r3, [pc, #556]	; (800d8e4 <_dtoa_r+0x2dc>)
 800d6b6:	9301      	str	r3, [sp, #4]
 800d6b8:	3303      	adds	r3, #3
 800d6ba:	e7f3      	b.n	800d6a4 <_dtoa_r+0x9c>
 800d6bc:	2200      	movs	r2, #0
 800d6be:	2300      	movs	r3, #0
 800d6c0:	4650      	mov	r0, sl
 800d6c2:	4659      	mov	r1, fp
 800d6c4:	f7f3 fa00 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6c8:	ec4b ab19 	vmov	d9, sl, fp
 800d6cc:	4680      	mov	r8, r0
 800d6ce:	b158      	cbz	r0, 800d6e8 <_dtoa_r+0xe0>
 800d6d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	6013      	str	r3, [r2, #0]
 800d6d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	f000 856b 	beq.w	800e1b4 <_dtoa_r+0xbac>
 800d6de:	4883      	ldr	r0, [pc, #524]	; (800d8ec <_dtoa_r+0x2e4>)
 800d6e0:	6018      	str	r0, [r3, #0]
 800d6e2:	1e43      	subs	r3, r0, #1
 800d6e4:	9301      	str	r3, [sp, #4]
 800d6e6:	e7df      	b.n	800d6a8 <_dtoa_r+0xa0>
 800d6e8:	ec4b ab10 	vmov	d0, sl, fp
 800d6ec:	aa10      	add	r2, sp, #64	; 0x40
 800d6ee:	a911      	add	r1, sp, #68	; 0x44
 800d6f0:	4620      	mov	r0, r4
 800d6f2:	f001 fd17 	bl	800f124 <__d2b>
 800d6f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d6fa:	ee08 0a10 	vmov	s16, r0
 800d6fe:	2d00      	cmp	r5, #0
 800d700:	f000 8084 	beq.w	800d80c <_dtoa_r+0x204>
 800d704:	ee19 3a90 	vmov	r3, s19
 800d708:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d70c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d710:	4656      	mov	r6, sl
 800d712:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d716:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d71a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d71e:	4b74      	ldr	r3, [pc, #464]	; (800d8f0 <_dtoa_r+0x2e8>)
 800d720:	2200      	movs	r2, #0
 800d722:	4630      	mov	r0, r6
 800d724:	4639      	mov	r1, r7
 800d726:	f7f2 fdaf 	bl	8000288 <__aeabi_dsub>
 800d72a:	a365      	add	r3, pc, #404	; (adr r3, 800d8c0 <_dtoa_r+0x2b8>)
 800d72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d730:	f7f2 ff62 	bl	80005f8 <__aeabi_dmul>
 800d734:	a364      	add	r3, pc, #400	; (adr r3, 800d8c8 <_dtoa_r+0x2c0>)
 800d736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d73a:	f7f2 fda7 	bl	800028c <__adddf3>
 800d73e:	4606      	mov	r6, r0
 800d740:	4628      	mov	r0, r5
 800d742:	460f      	mov	r7, r1
 800d744:	f7f2 feee 	bl	8000524 <__aeabi_i2d>
 800d748:	a361      	add	r3, pc, #388	; (adr r3, 800d8d0 <_dtoa_r+0x2c8>)
 800d74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74e:	f7f2 ff53 	bl	80005f8 <__aeabi_dmul>
 800d752:	4602      	mov	r2, r0
 800d754:	460b      	mov	r3, r1
 800d756:	4630      	mov	r0, r6
 800d758:	4639      	mov	r1, r7
 800d75a:	f7f2 fd97 	bl	800028c <__adddf3>
 800d75e:	4606      	mov	r6, r0
 800d760:	460f      	mov	r7, r1
 800d762:	f7f3 f9f9 	bl	8000b58 <__aeabi_d2iz>
 800d766:	2200      	movs	r2, #0
 800d768:	9000      	str	r0, [sp, #0]
 800d76a:	2300      	movs	r3, #0
 800d76c:	4630      	mov	r0, r6
 800d76e:	4639      	mov	r1, r7
 800d770:	f7f3 f9b4 	bl	8000adc <__aeabi_dcmplt>
 800d774:	b150      	cbz	r0, 800d78c <_dtoa_r+0x184>
 800d776:	9800      	ldr	r0, [sp, #0]
 800d778:	f7f2 fed4 	bl	8000524 <__aeabi_i2d>
 800d77c:	4632      	mov	r2, r6
 800d77e:	463b      	mov	r3, r7
 800d780:	f7f3 f9a2 	bl	8000ac8 <__aeabi_dcmpeq>
 800d784:	b910      	cbnz	r0, 800d78c <_dtoa_r+0x184>
 800d786:	9b00      	ldr	r3, [sp, #0]
 800d788:	3b01      	subs	r3, #1
 800d78a:	9300      	str	r3, [sp, #0]
 800d78c:	9b00      	ldr	r3, [sp, #0]
 800d78e:	2b16      	cmp	r3, #22
 800d790:	d85a      	bhi.n	800d848 <_dtoa_r+0x240>
 800d792:	9a00      	ldr	r2, [sp, #0]
 800d794:	4b57      	ldr	r3, [pc, #348]	; (800d8f4 <_dtoa_r+0x2ec>)
 800d796:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79e:	ec51 0b19 	vmov	r0, r1, d9
 800d7a2:	f7f3 f99b 	bl	8000adc <__aeabi_dcmplt>
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	d050      	beq.n	800d84c <_dtoa_r+0x244>
 800d7aa:	9b00      	ldr	r3, [sp, #0]
 800d7ac:	3b01      	subs	r3, #1
 800d7ae:	9300      	str	r3, [sp, #0]
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d7b6:	1b5d      	subs	r5, r3, r5
 800d7b8:	1e6b      	subs	r3, r5, #1
 800d7ba:	9305      	str	r3, [sp, #20]
 800d7bc:	bf45      	ittet	mi
 800d7be:	f1c5 0301 	rsbmi	r3, r5, #1
 800d7c2:	9304      	strmi	r3, [sp, #16]
 800d7c4:	2300      	movpl	r3, #0
 800d7c6:	2300      	movmi	r3, #0
 800d7c8:	bf4c      	ite	mi
 800d7ca:	9305      	strmi	r3, [sp, #20]
 800d7cc:	9304      	strpl	r3, [sp, #16]
 800d7ce:	9b00      	ldr	r3, [sp, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	db3d      	blt.n	800d850 <_dtoa_r+0x248>
 800d7d4:	9b05      	ldr	r3, [sp, #20]
 800d7d6:	9a00      	ldr	r2, [sp, #0]
 800d7d8:	920a      	str	r2, [sp, #40]	; 0x28
 800d7da:	4413      	add	r3, r2
 800d7dc:	9305      	str	r3, [sp, #20]
 800d7de:	2300      	movs	r3, #0
 800d7e0:	9307      	str	r3, [sp, #28]
 800d7e2:	9b06      	ldr	r3, [sp, #24]
 800d7e4:	2b09      	cmp	r3, #9
 800d7e6:	f200 8089 	bhi.w	800d8fc <_dtoa_r+0x2f4>
 800d7ea:	2b05      	cmp	r3, #5
 800d7ec:	bfc4      	itt	gt
 800d7ee:	3b04      	subgt	r3, #4
 800d7f0:	9306      	strgt	r3, [sp, #24]
 800d7f2:	9b06      	ldr	r3, [sp, #24]
 800d7f4:	f1a3 0302 	sub.w	r3, r3, #2
 800d7f8:	bfcc      	ite	gt
 800d7fa:	2500      	movgt	r5, #0
 800d7fc:	2501      	movle	r5, #1
 800d7fe:	2b03      	cmp	r3, #3
 800d800:	f200 8087 	bhi.w	800d912 <_dtoa_r+0x30a>
 800d804:	e8df f003 	tbb	[pc, r3]
 800d808:	59383a2d 	.word	0x59383a2d
 800d80c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d810:	441d      	add	r5, r3
 800d812:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d816:	2b20      	cmp	r3, #32
 800d818:	bfc1      	itttt	gt
 800d81a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d81e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d822:	fa0b f303 	lslgt.w	r3, fp, r3
 800d826:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d82a:	bfda      	itte	le
 800d82c:	f1c3 0320 	rsble	r3, r3, #32
 800d830:	fa06 f003 	lslle.w	r0, r6, r3
 800d834:	4318      	orrgt	r0, r3
 800d836:	f7f2 fe65 	bl	8000504 <__aeabi_ui2d>
 800d83a:	2301      	movs	r3, #1
 800d83c:	4606      	mov	r6, r0
 800d83e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d842:	3d01      	subs	r5, #1
 800d844:	930e      	str	r3, [sp, #56]	; 0x38
 800d846:	e76a      	b.n	800d71e <_dtoa_r+0x116>
 800d848:	2301      	movs	r3, #1
 800d84a:	e7b2      	b.n	800d7b2 <_dtoa_r+0x1aa>
 800d84c:	900b      	str	r0, [sp, #44]	; 0x2c
 800d84e:	e7b1      	b.n	800d7b4 <_dtoa_r+0x1ac>
 800d850:	9b04      	ldr	r3, [sp, #16]
 800d852:	9a00      	ldr	r2, [sp, #0]
 800d854:	1a9b      	subs	r3, r3, r2
 800d856:	9304      	str	r3, [sp, #16]
 800d858:	4253      	negs	r3, r2
 800d85a:	9307      	str	r3, [sp, #28]
 800d85c:	2300      	movs	r3, #0
 800d85e:	930a      	str	r3, [sp, #40]	; 0x28
 800d860:	e7bf      	b.n	800d7e2 <_dtoa_r+0x1da>
 800d862:	2300      	movs	r3, #0
 800d864:	9308      	str	r3, [sp, #32]
 800d866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d868:	2b00      	cmp	r3, #0
 800d86a:	dc55      	bgt.n	800d918 <_dtoa_r+0x310>
 800d86c:	2301      	movs	r3, #1
 800d86e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d872:	461a      	mov	r2, r3
 800d874:	9209      	str	r2, [sp, #36]	; 0x24
 800d876:	e00c      	b.n	800d892 <_dtoa_r+0x28a>
 800d878:	2301      	movs	r3, #1
 800d87a:	e7f3      	b.n	800d864 <_dtoa_r+0x25c>
 800d87c:	2300      	movs	r3, #0
 800d87e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d880:	9308      	str	r3, [sp, #32]
 800d882:	9b00      	ldr	r3, [sp, #0]
 800d884:	4413      	add	r3, r2
 800d886:	9302      	str	r3, [sp, #8]
 800d888:	3301      	adds	r3, #1
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	9303      	str	r3, [sp, #12]
 800d88e:	bfb8      	it	lt
 800d890:	2301      	movlt	r3, #1
 800d892:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d894:	2200      	movs	r2, #0
 800d896:	6042      	str	r2, [r0, #4]
 800d898:	2204      	movs	r2, #4
 800d89a:	f102 0614 	add.w	r6, r2, #20
 800d89e:	429e      	cmp	r6, r3
 800d8a0:	6841      	ldr	r1, [r0, #4]
 800d8a2:	d93d      	bls.n	800d920 <_dtoa_r+0x318>
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f001 f84f 	bl	800e948 <_Balloc>
 800d8aa:	9001      	str	r0, [sp, #4]
 800d8ac:	2800      	cmp	r0, #0
 800d8ae:	d13b      	bne.n	800d928 <_dtoa_r+0x320>
 800d8b0:	4b11      	ldr	r3, [pc, #68]	; (800d8f8 <_dtoa_r+0x2f0>)
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d8b8:	e6c0      	b.n	800d63c <_dtoa_r+0x34>
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	e7df      	b.n	800d87e <_dtoa_r+0x276>
 800d8be:	bf00      	nop
 800d8c0:	636f4361 	.word	0x636f4361
 800d8c4:	3fd287a7 	.word	0x3fd287a7
 800d8c8:	8b60c8b3 	.word	0x8b60c8b3
 800d8cc:	3fc68a28 	.word	0x3fc68a28
 800d8d0:	509f79fb 	.word	0x509f79fb
 800d8d4:	3fd34413 	.word	0x3fd34413
 800d8d8:	08010648 	.word	0x08010648
 800d8dc:	0801082b 	.word	0x0801082b
 800d8e0:	7ff00000 	.word	0x7ff00000
 800d8e4:	08010827 	.word	0x08010827
 800d8e8:	0801081e 	.word	0x0801081e
 800d8ec:	080105cd 	.word	0x080105cd
 800d8f0:	3ff80000 	.word	0x3ff80000
 800d8f4:	08010998 	.word	0x08010998
 800d8f8:	08010886 	.word	0x08010886
 800d8fc:	2501      	movs	r5, #1
 800d8fe:	2300      	movs	r3, #0
 800d900:	9306      	str	r3, [sp, #24]
 800d902:	9508      	str	r5, [sp, #32]
 800d904:	f04f 33ff 	mov.w	r3, #4294967295
 800d908:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d90c:	2200      	movs	r2, #0
 800d90e:	2312      	movs	r3, #18
 800d910:	e7b0      	b.n	800d874 <_dtoa_r+0x26c>
 800d912:	2301      	movs	r3, #1
 800d914:	9308      	str	r3, [sp, #32]
 800d916:	e7f5      	b.n	800d904 <_dtoa_r+0x2fc>
 800d918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d91a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d91e:	e7b8      	b.n	800d892 <_dtoa_r+0x28a>
 800d920:	3101      	adds	r1, #1
 800d922:	6041      	str	r1, [r0, #4]
 800d924:	0052      	lsls	r2, r2, #1
 800d926:	e7b8      	b.n	800d89a <_dtoa_r+0x292>
 800d928:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d92a:	9a01      	ldr	r2, [sp, #4]
 800d92c:	601a      	str	r2, [r3, #0]
 800d92e:	9b03      	ldr	r3, [sp, #12]
 800d930:	2b0e      	cmp	r3, #14
 800d932:	f200 809d 	bhi.w	800da70 <_dtoa_r+0x468>
 800d936:	2d00      	cmp	r5, #0
 800d938:	f000 809a 	beq.w	800da70 <_dtoa_r+0x468>
 800d93c:	9b00      	ldr	r3, [sp, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	dd32      	ble.n	800d9a8 <_dtoa_r+0x3a0>
 800d942:	4ab7      	ldr	r2, [pc, #732]	; (800dc20 <_dtoa_r+0x618>)
 800d944:	f003 030f 	and.w	r3, r3, #15
 800d948:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d94c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d950:	9b00      	ldr	r3, [sp, #0]
 800d952:	05d8      	lsls	r0, r3, #23
 800d954:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d958:	d516      	bpl.n	800d988 <_dtoa_r+0x380>
 800d95a:	4bb2      	ldr	r3, [pc, #712]	; (800dc24 <_dtoa_r+0x61c>)
 800d95c:	ec51 0b19 	vmov	r0, r1, d9
 800d960:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d964:	f7f2 ff72 	bl	800084c <__aeabi_ddiv>
 800d968:	f007 070f 	and.w	r7, r7, #15
 800d96c:	4682      	mov	sl, r0
 800d96e:	468b      	mov	fp, r1
 800d970:	2503      	movs	r5, #3
 800d972:	4eac      	ldr	r6, [pc, #688]	; (800dc24 <_dtoa_r+0x61c>)
 800d974:	b957      	cbnz	r7, 800d98c <_dtoa_r+0x384>
 800d976:	4642      	mov	r2, r8
 800d978:	464b      	mov	r3, r9
 800d97a:	4650      	mov	r0, sl
 800d97c:	4659      	mov	r1, fp
 800d97e:	f7f2 ff65 	bl	800084c <__aeabi_ddiv>
 800d982:	4682      	mov	sl, r0
 800d984:	468b      	mov	fp, r1
 800d986:	e028      	b.n	800d9da <_dtoa_r+0x3d2>
 800d988:	2502      	movs	r5, #2
 800d98a:	e7f2      	b.n	800d972 <_dtoa_r+0x36a>
 800d98c:	07f9      	lsls	r1, r7, #31
 800d98e:	d508      	bpl.n	800d9a2 <_dtoa_r+0x39a>
 800d990:	4640      	mov	r0, r8
 800d992:	4649      	mov	r1, r9
 800d994:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d998:	f7f2 fe2e 	bl	80005f8 <__aeabi_dmul>
 800d99c:	3501      	adds	r5, #1
 800d99e:	4680      	mov	r8, r0
 800d9a0:	4689      	mov	r9, r1
 800d9a2:	107f      	asrs	r7, r7, #1
 800d9a4:	3608      	adds	r6, #8
 800d9a6:	e7e5      	b.n	800d974 <_dtoa_r+0x36c>
 800d9a8:	f000 809b 	beq.w	800dae2 <_dtoa_r+0x4da>
 800d9ac:	9b00      	ldr	r3, [sp, #0]
 800d9ae:	4f9d      	ldr	r7, [pc, #628]	; (800dc24 <_dtoa_r+0x61c>)
 800d9b0:	425e      	negs	r6, r3
 800d9b2:	4b9b      	ldr	r3, [pc, #620]	; (800dc20 <_dtoa_r+0x618>)
 800d9b4:	f006 020f 	and.w	r2, r6, #15
 800d9b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c0:	ec51 0b19 	vmov	r0, r1, d9
 800d9c4:	f7f2 fe18 	bl	80005f8 <__aeabi_dmul>
 800d9c8:	1136      	asrs	r6, r6, #4
 800d9ca:	4682      	mov	sl, r0
 800d9cc:	468b      	mov	fp, r1
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	2502      	movs	r5, #2
 800d9d2:	2e00      	cmp	r6, #0
 800d9d4:	d17a      	bne.n	800dacc <_dtoa_r+0x4c4>
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d1d3      	bne.n	800d982 <_dtoa_r+0x37a>
 800d9da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	f000 8082 	beq.w	800dae6 <_dtoa_r+0x4de>
 800d9e2:	4b91      	ldr	r3, [pc, #580]	; (800dc28 <_dtoa_r+0x620>)
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	4650      	mov	r0, sl
 800d9e8:	4659      	mov	r1, fp
 800d9ea:	f7f3 f877 	bl	8000adc <__aeabi_dcmplt>
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	d079      	beq.n	800dae6 <_dtoa_r+0x4de>
 800d9f2:	9b03      	ldr	r3, [sp, #12]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d076      	beq.n	800dae6 <_dtoa_r+0x4de>
 800d9f8:	9b02      	ldr	r3, [sp, #8]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	dd36      	ble.n	800da6c <_dtoa_r+0x464>
 800d9fe:	9b00      	ldr	r3, [sp, #0]
 800da00:	4650      	mov	r0, sl
 800da02:	4659      	mov	r1, fp
 800da04:	1e5f      	subs	r7, r3, #1
 800da06:	2200      	movs	r2, #0
 800da08:	4b88      	ldr	r3, [pc, #544]	; (800dc2c <_dtoa_r+0x624>)
 800da0a:	f7f2 fdf5 	bl	80005f8 <__aeabi_dmul>
 800da0e:	9e02      	ldr	r6, [sp, #8]
 800da10:	4682      	mov	sl, r0
 800da12:	468b      	mov	fp, r1
 800da14:	3501      	adds	r5, #1
 800da16:	4628      	mov	r0, r5
 800da18:	f7f2 fd84 	bl	8000524 <__aeabi_i2d>
 800da1c:	4652      	mov	r2, sl
 800da1e:	465b      	mov	r3, fp
 800da20:	f7f2 fdea 	bl	80005f8 <__aeabi_dmul>
 800da24:	4b82      	ldr	r3, [pc, #520]	; (800dc30 <_dtoa_r+0x628>)
 800da26:	2200      	movs	r2, #0
 800da28:	f7f2 fc30 	bl	800028c <__adddf3>
 800da2c:	46d0      	mov	r8, sl
 800da2e:	46d9      	mov	r9, fp
 800da30:	4682      	mov	sl, r0
 800da32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800da36:	2e00      	cmp	r6, #0
 800da38:	d158      	bne.n	800daec <_dtoa_r+0x4e4>
 800da3a:	4b7e      	ldr	r3, [pc, #504]	; (800dc34 <_dtoa_r+0x62c>)
 800da3c:	2200      	movs	r2, #0
 800da3e:	4640      	mov	r0, r8
 800da40:	4649      	mov	r1, r9
 800da42:	f7f2 fc21 	bl	8000288 <__aeabi_dsub>
 800da46:	4652      	mov	r2, sl
 800da48:	465b      	mov	r3, fp
 800da4a:	4680      	mov	r8, r0
 800da4c:	4689      	mov	r9, r1
 800da4e:	f7f3 f863 	bl	8000b18 <__aeabi_dcmpgt>
 800da52:	2800      	cmp	r0, #0
 800da54:	f040 8295 	bne.w	800df82 <_dtoa_r+0x97a>
 800da58:	4652      	mov	r2, sl
 800da5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800da5e:	4640      	mov	r0, r8
 800da60:	4649      	mov	r1, r9
 800da62:	f7f3 f83b 	bl	8000adc <__aeabi_dcmplt>
 800da66:	2800      	cmp	r0, #0
 800da68:	f040 8289 	bne.w	800df7e <_dtoa_r+0x976>
 800da6c:	ec5b ab19 	vmov	sl, fp, d9
 800da70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da72:	2b00      	cmp	r3, #0
 800da74:	f2c0 8148 	blt.w	800dd08 <_dtoa_r+0x700>
 800da78:	9a00      	ldr	r2, [sp, #0]
 800da7a:	2a0e      	cmp	r2, #14
 800da7c:	f300 8144 	bgt.w	800dd08 <_dtoa_r+0x700>
 800da80:	4b67      	ldr	r3, [pc, #412]	; (800dc20 <_dtoa_r+0x618>)
 800da82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da86:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	f280 80d5 	bge.w	800dc3c <_dtoa_r+0x634>
 800da92:	9b03      	ldr	r3, [sp, #12]
 800da94:	2b00      	cmp	r3, #0
 800da96:	f300 80d1 	bgt.w	800dc3c <_dtoa_r+0x634>
 800da9a:	f040 826f 	bne.w	800df7c <_dtoa_r+0x974>
 800da9e:	4b65      	ldr	r3, [pc, #404]	; (800dc34 <_dtoa_r+0x62c>)
 800daa0:	2200      	movs	r2, #0
 800daa2:	4640      	mov	r0, r8
 800daa4:	4649      	mov	r1, r9
 800daa6:	f7f2 fda7 	bl	80005f8 <__aeabi_dmul>
 800daaa:	4652      	mov	r2, sl
 800daac:	465b      	mov	r3, fp
 800daae:	f7f3 f829 	bl	8000b04 <__aeabi_dcmpge>
 800dab2:	9e03      	ldr	r6, [sp, #12]
 800dab4:	4637      	mov	r7, r6
 800dab6:	2800      	cmp	r0, #0
 800dab8:	f040 8245 	bne.w	800df46 <_dtoa_r+0x93e>
 800dabc:	9d01      	ldr	r5, [sp, #4]
 800dabe:	2331      	movs	r3, #49	; 0x31
 800dac0:	f805 3b01 	strb.w	r3, [r5], #1
 800dac4:	9b00      	ldr	r3, [sp, #0]
 800dac6:	3301      	adds	r3, #1
 800dac8:	9300      	str	r3, [sp, #0]
 800daca:	e240      	b.n	800df4e <_dtoa_r+0x946>
 800dacc:	07f2      	lsls	r2, r6, #31
 800dace:	d505      	bpl.n	800dadc <_dtoa_r+0x4d4>
 800dad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dad4:	f7f2 fd90 	bl	80005f8 <__aeabi_dmul>
 800dad8:	3501      	adds	r5, #1
 800dada:	2301      	movs	r3, #1
 800dadc:	1076      	asrs	r6, r6, #1
 800dade:	3708      	adds	r7, #8
 800dae0:	e777      	b.n	800d9d2 <_dtoa_r+0x3ca>
 800dae2:	2502      	movs	r5, #2
 800dae4:	e779      	b.n	800d9da <_dtoa_r+0x3d2>
 800dae6:	9f00      	ldr	r7, [sp, #0]
 800dae8:	9e03      	ldr	r6, [sp, #12]
 800daea:	e794      	b.n	800da16 <_dtoa_r+0x40e>
 800daec:	9901      	ldr	r1, [sp, #4]
 800daee:	4b4c      	ldr	r3, [pc, #304]	; (800dc20 <_dtoa_r+0x618>)
 800daf0:	4431      	add	r1, r6
 800daf2:	910d      	str	r1, [sp, #52]	; 0x34
 800daf4:	9908      	ldr	r1, [sp, #32]
 800daf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dafa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dafe:	2900      	cmp	r1, #0
 800db00:	d043      	beq.n	800db8a <_dtoa_r+0x582>
 800db02:	494d      	ldr	r1, [pc, #308]	; (800dc38 <_dtoa_r+0x630>)
 800db04:	2000      	movs	r0, #0
 800db06:	f7f2 fea1 	bl	800084c <__aeabi_ddiv>
 800db0a:	4652      	mov	r2, sl
 800db0c:	465b      	mov	r3, fp
 800db0e:	f7f2 fbbb 	bl	8000288 <__aeabi_dsub>
 800db12:	9d01      	ldr	r5, [sp, #4]
 800db14:	4682      	mov	sl, r0
 800db16:	468b      	mov	fp, r1
 800db18:	4649      	mov	r1, r9
 800db1a:	4640      	mov	r0, r8
 800db1c:	f7f3 f81c 	bl	8000b58 <__aeabi_d2iz>
 800db20:	4606      	mov	r6, r0
 800db22:	f7f2 fcff 	bl	8000524 <__aeabi_i2d>
 800db26:	4602      	mov	r2, r0
 800db28:	460b      	mov	r3, r1
 800db2a:	4640      	mov	r0, r8
 800db2c:	4649      	mov	r1, r9
 800db2e:	f7f2 fbab 	bl	8000288 <__aeabi_dsub>
 800db32:	3630      	adds	r6, #48	; 0x30
 800db34:	f805 6b01 	strb.w	r6, [r5], #1
 800db38:	4652      	mov	r2, sl
 800db3a:	465b      	mov	r3, fp
 800db3c:	4680      	mov	r8, r0
 800db3e:	4689      	mov	r9, r1
 800db40:	f7f2 ffcc 	bl	8000adc <__aeabi_dcmplt>
 800db44:	2800      	cmp	r0, #0
 800db46:	d163      	bne.n	800dc10 <_dtoa_r+0x608>
 800db48:	4642      	mov	r2, r8
 800db4a:	464b      	mov	r3, r9
 800db4c:	4936      	ldr	r1, [pc, #216]	; (800dc28 <_dtoa_r+0x620>)
 800db4e:	2000      	movs	r0, #0
 800db50:	f7f2 fb9a 	bl	8000288 <__aeabi_dsub>
 800db54:	4652      	mov	r2, sl
 800db56:	465b      	mov	r3, fp
 800db58:	f7f2 ffc0 	bl	8000adc <__aeabi_dcmplt>
 800db5c:	2800      	cmp	r0, #0
 800db5e:	f040 80b5 	bne.w	800dccc <_dtoa_r+0x6c4>
 800db62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db64:	429d      	cmp	r5, r3
 800db66:	d081      	beq.n	800da6c <_dtoa_r+0x464>
 800db68:	4b30      	ldr	r3, [pc, #192]	; (800dc2c <_dtoa_r+0x624>)
 800db6a:	2200      	movs	r2, #0
 800db6c:	4650      	mov	r0, sl
 800db6e:	4659      	mov	r1, fp
 800db70:	f7f2 fd42 	bl	80005f8 <__aeabi_dmul>
 800db74:	4b2d      	ldr	r3, [pc, #180]	; (800dc2c <_dtoa_r+0x624>)
 800db76:	4682      	mov	sl, r0
 800db78:	468b      	mov	fp, r1
 800db7a:	4640      	mov	r0, r8
 800db7c:	4649      	mov	r1, r9
 800db7e:	2200      	movs	r2, #0
 800db80:	f7f2 fd3a 	bl	80005f8 <__aeabi_dmul>
 800db84:	4680      	mov	r8, r0
 800db86:	4689      	mov	r9, r1
 800db88:	e7c6      	b.n	800db18 <_dtoa_r+0x510>
 800db8a:	4650      	mov	r0, sl
 800db8c:	4659      	mov	r1, fp
 800db8e:	f7f2 fd33 	bl	80005f8 <__aeabi_dmul>
 800db92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db94:	9d01      	ldr	r5, [sp, #4]
 800db96:	930f      	str	r3, [sp, #60]	; 0x3c
 800db98:	4682      	mov	sl, r0
 800db9a:	468b      	mov	fp, r1
 800db9c:	4649      	mov	r1, r9
 800db9e:	4640      	mov	r0, r8
 800dba0:	f7f2 ffda 	bl	8000b58 <__aeabi_d2iz>
 800dba4:	4606      	mov	r6, r0
 800dba6:	f7f2 fcbd 	bl	8000524 <__aeabi_i2d>
 800dbaa:	3630      	adds	r6, #48	; 0x30
 800dbac:	4602      	mov	r2, r0
 800dbae:	460b      	mov	r3, r1
 800dbb0:	4640      	mov	r0, r8
 800dbb2:	4649      	mov	r1, r9
 800dbb4:	f7f2 fb68 	bl	8000288 <__aeabi_dsub>
 800dbb8:	f805 6b01 	strb.w	r6, [r5], #1
 800dbbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbbe:	429d      	cmp	r5, r3
 800dbc0:	4680      	mov	r8, r0
 800dbc2:	4689      	mov	r9, r1
 800dbc4:	f04f 0200 	mov.w	r2, #0
 800dbc8:	d124      	bne.n	800dc14 <_dtoa_r+0x60c>
 800dbca:	4b1b      	ldr	r3, [pc, #108]	; (800dc38 <_dtoa_r+0x630>)
 800dbcc:	4650      	mov	r0, sl
 800dbce:	4659      	mov	r1, fp
 800dbd0:	f7f2 fb5c 	bl	800028c <__adddf3>
 800dbd4:	4602      	mov	r2, r0
 800dbd6:	460b      	mov	r3, r1
 800dbd8:	4640      	mov	r0, r8
 800dbda:	4649      	mov	r1, r9
 800dbdc:	f7f2 ff9c 	bl	8000b18 <__aeabi_dcmpgt>
 800dbe0:	2800      	cmp	r0, #0
 800dbe2:	d173      	bne.n	800dccc <_dtoa_r+0x6c4>
 800dbe4:	4652      	mov	r2, sl
 800dbe6:	465b      	mov	r3, fp
 800dbe8:	4913      	ldr	r1, [pc, #76]	; (800dc38 <_dtoa_r+0x630>)
 800dbea:	2000      	movs	r0, #0
 800dbec:	f7f2 fb4c 	bl	8000288 <__aeabi_dsub>
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	460b      	mov	r3, r1
 800dbf4:	4640      	mov	r0, r8
 800dbf6:	4649      	mov	r1, r9
 800dbf8:	f7f2 ff70 	bl	8000adc <__aeabi_dcmplt>
 800dbfc:	2800      	cmp	r0, #0
 800dbfe:	f43f af35 	beq.w	800da6c <_dtoa_r+0x464>
 800dc02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dc04:	1e6b      	subs	r3, r5, #1
 800dc06:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc08:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dc0c:	2b30      	cmp	r3, #48	; 0x30
 800dc0e:	d0f8      	beq.n	800dc02 <_dtoa_r+0x5fa>
 800dc10:	9700      	str	r7, [sp, #0]
 800dc12:	e049      	b.n	800dca8 <_dtoa_r+0x6a0>
 800dc14:	4b05      	ldr	r3, [pc, #20]	; (800dc2c <_dtoa_r+0x624>)
 800dc16:	f7f2 fcef 	bl	80005f8 <__aeabi_dmul>
 800dc1a:	4680      	mov	r8, r0
 800dc1c:	4689      	mov	r9, r1
 800dc1e:	e7bd      	b.n	800db9c <_dtoa_r+0x594>
 800dc20:	08010998 	.word	0x08010998
 800dc24:	08010970 	.word	0x08010970
 800dc28:	3ff00000 	.word	0x3ff00000
 800dc2c:	40240000 	.word	0x40240000
 800dc30:	401c0000 	.word	0x401c0000
 800dc34:	40140000 	.word	0x40140000
 800dc38:	3fe00000 	.word	0x3fe00000
 800dc3c:	9d01      	ldr	r5, [sp, #4]
 800dc3e:	4656      	mov	r6, sl
 800dc40:	465f      	mov	r7, fp
 800dc42:	4642      	mov	r2, r8
 800dc44:	464b      	mov	r3, r9
 800dc46:	4630      	mov	r0, r6
 800dc48:	4639      	mov	r1, r7
 800dc4a:	f7f2 fdff 	bl	800084c <__aeabi_ddiv>
 800dc4e:	f7f2 ff83 	bl	8000b58 <__aeabi_d2iz>
 800dc52:	4682      	mov	sl, r0
 800dc54:	f7f2 fc66 	bl	8000524 <__aeabi_i2d>
 800dc58:	4642      	mov	r2, r8
 800dc5a:	464b      	mov	r3, r9
 800dc5c:	f7f2 fccc 	bl	80005f8 <__aeabi_dmul>
 800dc60:	4602      	mov	r2, r0
 800dc62:	460b      	mov	r3, r1
 800dc64:	4630      	mov	r0, r6
 800dc66:	4639      	mov	r1, r7
 800dc68:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dc6c:	f7f2 fb0c 	bl	8000288 <__aeabi_dsub>
 800dc70:	f805 6b01 	strb.w	r6, [r5], #1
 800dc74:	9e01      	ldr	r6, [sp, #4]
 800dc76:	9f03      	ldr	r7, [sp, #12]
 800dc78:	1bae      	subs	r6, r5, r6
 800dc7a:	42b7      	cmp	r7, r6
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	460b      	mov	r3, r1
 800dc80:	d135      	bne.n	800dcee <_dtoa_r+0x6e6>
 800dc82:	f7f2 fb03 	bl	800028c <__adddf3>
 800dc86:	4642      	mov	r2, r8
 800dc88:	464b      	mov	r3, r9
 800dc8a:	4606      	mov	r6, r0
 800dc8c:	460f      	mov	r7, r1
 800dc8e:	f7f2 ff43 	bl	8000b18 <__aeabi_dcmpgt>
 800dc92:	b9d0      	cbnz	r0, 800dcca <_dtoa_r+0x6c2>
 800dc94:	4642      	mov	r2, r8
 800dc96:	464b      	mov	r3, r9
 800dc98:	4630      	mov	r0, r6
 800dc9a:	4639      	mov	r1, r7
 800dc9c:	f7f2 ff14 	bl	8000ac8 <__aeabi_dcmpeq>
 800dca0:	b110      	cbz	r0, 800dca8 <_dtoa_r+0x6a0>
 800dca2:	f01a 0f01 	tst.w	sl, #1
 800dca6:	d110      	bne.n	800dcca <_dtoa_r+0x6c2>
 800dca8:	4620      	mov	r0, r4
 800dcaa:	ee18 1a10 	vmov	r1, s16
 800dcae:	f000 fe8b 	bl	800e9c8 <_Bfree>
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	9800      	ldr	r0, [sp, #0]
 800dcb6:	702b      	strb	r3, [r5, #0]
 800dcb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dcba:	3001      	adds	r0, #1
 800dcbc:	6018      	str	r0, [r3, #0]
 800dcbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	f43f acf1 	beq.w	800d6a8 <_dtoa_r+0xa0>
 800dcc6:	601d      	str	r5, [r3, #0]
 800dcc8:	e4ee      	b.n	800d6a8 <_dtoa_r+0xa0>
 800dcca:	9f00      	ldr	r7, [sp, #0]
 800dccc:	462b      	mov	r3, r5
 800dcce:	461d      	mov	r5, r3
 800dcd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dcd4:	2a39      	cmp	r2, #57	; 0x39
 800dcd6:	d106      	bne.n	800dce6 <_dtoa_r+0x6de>
 800dcd8:	9a01      	ldr	r2, [sp, #4]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d1f7      	bne.n	800dcce <_dtoa_r+0x6c6>
 800dcde:	9901      	ldr	r1, [sp, #4]
 800dce0:	2230      	movs	r2, #48	; 0x30
 800dce2:	3701      	adds	r7, #1
 800dce4:	700a      	strb	r2, [r1, #0]
 800dce6:	781a      	ldrb	r2, [r3, #0]
 800dce8:	3201      	adds	r2, #1
 800dcea:	701a      	strb	r2, [r3, #0]
 800dcec:	e790      	b.n	800dc10 <_dtoa_r+0x608>
 800dcee:	4ba6      	ldr	r3, [pc, #664]	; (800df88 <_dtoa_r+0x980>)
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	f7f2 fc81 	bl	80005f8 <__aeabi_dmul>
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	4606      	mov	r6, r0
 800dcfc:	460f      	mov	r7, r1
 800dcfe:	f7f2 fee3 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd02:	2800      	cmp	r0, #0
 800dd04:	d09d      	beq.n	800dc42 <_dtoa_r+0x63a>
 800dd06:	e7cf      	b.n	800dca8 <_dtoa_r+0x6a0>
 800dd08:	9a08      	ldr	r2, [sp, #32]
 800dd0a:	2a00      	cmp	r2, #0
 800dd0c:	f000 80d7 	beq.w	800debe <_dtoa_r+0x8b6>
 800dd10:	9a06      	ldr	r2, [sp, #24]
 800dd12:	2a01      	cmp	r2, #1
 800dd14:	f300 80ba 	bgt.w	800de8c <_dtoa_r+0x884>
 800dd18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd1a:	2a00      	cmp	r2, #0
 800dd1c:	f000 80b2 	beq.w	800de84 <_dtoa_r+0x87c>
 800dd20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dd24:	9e07      	ldr	r6, [sp, #28]
 800dd26:	9d04      	ldr	r5, [sp, #16]
 800dd28:	9a04      	ldr	r2, [sp, #16]
 800dd2a:	441a      	add	r2, r3
 800dd2c:	9204      	str	r2, [sp, #16]
 800dd2e:	9a05      	ldr	r2, [sp, #20]
 800dd30:	2101      	movs	r1, #1
 800dd32:	441a      	add	r2, r3
 800dd34:	4620      	mov	r0, r4
 800dd36:	9205      	str	r2, [sp, #20]
 800dd38:	f000 ff48 	bl	800ebcc <__i2b>
 800dd3c:	4607      	mov	r7, r0
 800dd3e:	2d00      	cmp	r5, #0
 800dd40:	dd0c      	ble.n	800dd5c <_dtoa_r+0x754>
 800dd42:	9b05      	ldr	r3, [sp, #20]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	dd09      	ble.n	800dd5c <_dtoa_r+0x754>
 800dd48:	42ab      	cmp	r3, r5
 800dd4a:	9a04      	ldr	r2, [sp, #16]
 800dd4c:	bfa8      	it	ge
 800dd4e:	462b      	movge	r3, r5
 800dd50:	1ad2      	subs	r2, r2, r3
 800dd52:	9204      	str	r2, [sp, #16]
 800dd54:	9a05      	ldr	r2, [sp, #20]
 800dd56:	1aed      	subs	r5, r5, r3
 800dd58:	1ad3      	subs	r3, r2, r3
 800dd5a:	9305      	str	r3, [sp, #20]
 800dd5c:	9b07      	ldr	r3, [sp, #28]
 800dd5e:	b31b      	cbz	r3, 800dda8 <_dtoa_r+0x7a0>
 800dd60:	9b08      	ldr	r3, [sp, #32]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f000 80af 	beq.w	800dec6 <_dtoa_r+0x8be>
 800dd68:	2e00      	cmp	r6, #0
 800dd6a:	dd13      	ble.n	800dd94 <_dtoa_r+0x78c>
 800dd6c:	4639      	mov	r1, r7
 800dd6e:	4632      	mov	r2, r6
 800dd70:	4620      	mov	r0, r4
 800dd72:	f000 ffeb 	bl	800ed4c <__pow5mult>
 800dd76:	ee18 2a10 	vmov	r2, s16
 800dd7a:	4601      	mov	r1, r0
 800dd7c:	4607      	mov	r7, r0
 800dd7e:	4620      	mov	r0, r4
 800dd80:	f000 ff3a 	bl	800ebf8 <__multiply>
 800dd84:	ee18 1a10 	vmov	r1, s16
 800dd88:	4680      	mov	r8, r0
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	f000 fe1c 	bl	800e9c8 <_Bfree>
 800dd90:	ee08 8a10 	vmov	s16, r8
 800dd94:	9b07      	ldr	r3, [sp, #28]
 800dd96:	1b9a      	subs	r2, r3, r6
 800dd98:	d006      	beq.n	800dda8 <_dtoa_r+0x7a0>
 800dd9a:	ee18 1a10 	vmov	r1, s16
 800dd9e:	4620      	mov	r0, r4
 800dda0:	f000 ffd4 	bl	800ed4c <__pow5mult>
 800dda4:	ee08 0a10 	vmov	s16, r0
 800dda8:	2101      	movs	r1, #1
 800ddaa:	4620      	mov	r0, r4
 800ddac:	f000 ff0e 	bl	800ebcc <__i2b>
 800ddb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	4606      	mov	r6, r0
 800ddb6:	f340 8088 	ble.w	800deca <_dtoa_r+0x8c2>
 800ddba:	461a      	mov	r2, r3
 800ddbc:	4601      	mov	r1, r0
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	f000 ffc4 	bl	800ed4c <__pow5mult>
 800ddc4:	9b06      	ldr	r3, [sp, #24]
 800ddc6:	2b01      	cmp	r3, #1
 800ddc8:	4606      	mov	r6, r0
 800ddca:	f340 8081 	ble.w	800ded0 <_dtoa_r+0x8c8>
 800ddce:	f04f 0800 	mov.w	r8, #0
 800ddd2:	6933      	ldr	r3, [r6, #16]
 800ddd4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ddd8:	6918      	ldr	r0, [r3, #16]
 800ddda:	f000 fea7 	bl	800eb2c <__hi0bits>
 800ddde:	f1c0 0020 	rsb	r0, r0, #32
 800dde2:	9b05      	ldr	r3, [sp, #20]
 800dde4:	4418      	add	r0, r3
 800dde6:	f010 001f 	ands.w	r0, r0, #31
 800ddea:	f000 8092 	beq.w	800df12 <_dtoa_r+0x90a>
 800ddee:	f1c0 0320 	rsb	r3, r0, #32
 800ddf2:	2b04      	cmp	r3, #4
 800ddf4:	f340 808a 	ble.w	800df0c <_dtoa_r+0x904>
 800ddf8:	f1c0 001c 	rsb	r0, r0, #28
 800ddfc:	9b04      	ldr	r3, [sp, #16]
 800ddfe:	4403      	add	r3, r0
 800de00:	9304      	str	r3, [sp, #16]
 800de02:	9b05      	ldr	r3, [sp, #20]
 800de04:	4403      	add	r3, r0
 800de06:	4405      	add	r5, r0
 800de08:	9305      	str	r3, [sp, #20]
 800de0a:	9b04      	ldr	r3, [sp, #16]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	dd07      	ble.n	800de20 <_dtoa_r+0x818>
 800de10:	ee18 1a10 	vmov	r1, s16
 800de14:	461a      	mov	r2, r3
 800de16:	4620      	mov	r0, r4
 800de18:	f000 fff2 	bl	800ee00 <__lshift>
 800de1c:	ee08 0a10 	vmov	s16, r0
 800de20:	9b05      	ldr	r3, [sp, #20]
 800de22:	2b00      	cmp	r3, #0
 800de24:	dd05      	ble.n	800de32 <_dtoa_r+0x82a>
 800de26:	4631      	mov	r1, r6
 800de28:	461a      	mov	r2, r3
 800de2a:	4620      	mov	r0, r4
 800de2c:	f000 ffe8 	bl	800ee00 <__lshift>
 800de30:	4606      	mov	r6, r0
 800de32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de34:	2b00      	cmp	r3, #0
 800de36:	d06e      	beq.n	800df16 <_dtoa_r+0x90e>
 800de38:	ee18 0a10 	vmov	r0, s16
 800de3c:	4631      	mov	r1, r6
 800de3e:	f001 f84f 	bl	800eee0 <__mcmp>
 800de42:	2800      	cmp	r0, #0
 800de44:	da67      	bge.n	800df16 <_dtoa_r+0x90e>
 800de46:	9b00      	ldr	r3, [sp, #0]
 800de48:	3b01      	subs	r3, #1
 800de4a:	ee18 1a10 	vmov	r1, s16
 800de4e:	9300      	str	r3, [sp, #0]
 800de50:	220a      	movs	r2, #10
 800de52:	2300      	movs	r3, #0
 800de54:	4620      	mov	r0, r4
 800de56:	f000 fdd9 	bl	800ea0c <__multadd>
 800de5a:	9b08      	ldr	r3, [sp, #32]
 800de5c:	ee08 0a10 	vmov	s16, r0
 800de60:	2b00      	cmp	r3, #0
 800de62:	f000 81b1 	beq.w	800e1c8 <_dtoa_r+0xbc0>
 800de66:	2300      	movs	r3, #0
 800de68:	4639      	mov	r1, r7
 800de6a:	220a      	movs	r2, #10
 800de6c:	4620      	mov	r0, r4
 800de6e:	f000 fdcd 	bl	800ea0c <__multadd>
 800de72:	9b02      	ldr	r3, [sp, #8]
 800de74:	2b00      	cmp	r3, #0
 800de76:	4607      	mov	r7, r0
 800de78:	f300 808e 	bgt.w	800df98 <_dtoa_r+0x990>
 800de7c:	9b06      	ldr	r3, [sp, #24]
 800de7e:	2b02      	cmp	r3, #2
 800de80:	dc51      	bgt.n	800df26 <_dtoa_r+0x91e>
 800de82:	e089      	b.n	800df98 <_dtoa_r+0x990>
 800de84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800de8a:	e74b      	b.n	800dd24 <_dtoa_r+0x71c>
 800de8c:	9b03      	ldr	r3, [sp, #12]
 800de8e:	1e5e      	subs	r6, r3, #1
 800de90:	9b07      	ldr	r3, [sp, #28]
 800de92:	42b3      	cmp	r3, r6
 800de94:	bfbf      	itttt	lt
 800de96:	9b07      	ldrlt	r3, [sp, #28]
 800de98:	9607      	strlt	r6, [sp, #28]
 800de9a:	1af2      	sublt	r2, r6, r3
 800de9c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800de9e:	bfb6      	itet	lt
 800dea0:	189b      	addlt	r3, r3, r2
 800dea2:	1b9e      	subge	r6, r3, r6
 800dea4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dea6:	9b03      	ldr	r3, [sp, #12]
 800dea8:	bfb8      	it	lt
 800deaa:	2600      	movlt	r6, #0
 800deac:	2b00      	cmp	r3, #0
 800deae:	bfb7      	itett	lt
 800deb0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800deb4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800deb8:	1a9d      	sublt	r5, r3, r2
 800deba:	2300      	movlt	r3, #0
 800debc:	e734      	b.n	800dd28 <_dtoa_r+0x720>
 800debe:	9e07      	ldr	r6, [sp, #28]
 800dec0:	9d04      	ldr	r5, [sp, #16]
 800dec2:	9f08      	ldr	r7, [sp, #32]
 800dec4:	e73b      	b.n	800dd3e <_dtoa_r+0x736>
 800dec6:	9a07      	ldr	r2, [sp, #28]
 800dec8:	e767      	b.n	800dd9a <_dtoa_r+0x792>
 800deca:	9b06      	ldr	r3, [sp, #24]
 800decc:	2b01      	cmp	r3, #1
 800dece:	dc18      	bgt.n	800df02 <_dtoa_r+0x8fa>
 800ded0:	f1ba 0f00 	cmp.w	sl, #0
 800ded4:	d115      	bne.n	800df02 <_dtoa_r+0x8fa>
 800ded6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800deda:	b993      	cbnz	r3, 800df02 <_dtoa_r+0x8fa>
 800dedc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dee0:	0d1b      	lsrs	r3, r3, #20
 800dee2:	051b      	lsls	r3, r3, #20
 800dee4:	b183      	cbz	r3, 800df08 <_dtoa_r+0x900>
 800dee6:	9b04      	ldr	r3, [sp, #16]
 800dee8:	3301      	adds	r3, #1
 800deea:	9304      	str	r3, [sp, #16]
 800deec:	9b05      	ldr	r3, [sp, #20]
 800deee:	3301      	adds	r3, #1
 800def0:	9305      	str	r3, [sp, #20]
 800def2:	f04f 0801 	mov.w	r8, #1
 800def6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800def8:	2b00      	cmp	r3, #0
 800defa:	f47f af6a 	bne.w	800ddd2 <_dtoa_r+0x7ca>
 800defe:	2001      	movs	r0, #1
 800df00:	e76f      	b.n	800dde2 <_dtoa_r+0x7da>
 800df02:	f04f 0800 	mov.w	r8, #0
 800df06:	e7f6      	b.n	800def6 <_dtoa_r+0x8ee>
 800df08:	4698      	mov	r8, r3
 800df0a:	e7f4      	b.n	800def6 <_dtoa_r+0x8ee>
 800df0c:	f43f af7d 	beq.w	800de0a <_dtoa_r+0x802>
 800df10:	4618      	mov	r0, r3
 800df12:	301c      	adds	r0, #28
 800df14:	e772      	b.n	800ddfc <_dtoa_r+0x7f4>
 800df16:	9b03      	ldr	r3, [sp, #12]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	dc37      	bgt.n	800df8c <_dtoa_r+0x984>
 800df1c:	9b06      	ldr	r3, [sp, #24]
 800df1e:	2b02      	cmp	r3, #2
 800df20:	dd34      	ble.n	800df8c <_dtoa_r+0x984>
 800df22:	9b03      	ldr	r3, [sp, #12]
 800df24:	9302      	str	r3, [sp, #8]
 800df26:	9b02      	ldr	r3, [sp, #8]
 800df28:	b96b      	cbnz	r3, 800df46 <_dtoa_r+0x93e>
 800df2a:	4631      	mov	r1, r6
 800df2c:	2205      	movs	r2, #5
 800df2e:	4620      	mov	r0, r4
 800df30:	f000 fd6c 	bl	800ea0c <__multadd>
 800df34:	4601      	mov	r1, r0
 800df36:	4606      	mov	r6, r0
 800df38:	ee18 0a10 	vmov	r0, s16
 800df3c:	f000 ffd0 	bl	800eee0 <__mcmp>
 800df40:	2800      	cmp	r0, #0
 800df42:	f73f adbb 	bgt.w	800dabc <_dtoa_r+0x4b4>
 800df46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df48:	9d01      	ldr	r5, [sp, #4]
 800df4a:	43db      	mvns	r3, r3
 800df4c:	9300      	str	r3, [sp, #0]
 800df4e:	f04f 0800 	mov.w	r8, #0
 800df52:	4631      	mov	r1, r6
 800df54:	4620      	mov	r0, r4
 800df56:	f000 fd37 	bl	800e9c8 <_Bfree>
 800df5a:	2f00      	cmp	r7, #0
 800df5c:	f43f aea4 	beq.w	800dca8 <_dtoa_r+0x6a0>
 800df60:	f1b8 0f00 	cmp.w	r8, #0
 800df64:	d005      	beq.n	800df72 <_dtoa_r+0x96a>
 800df66:	45b8      	cmp	r8, r7
 800df68:	d003      	beq.n	800df72 <_dtoa_r+0x96a>
 800df6a:	4641      	mov	r1, r8
 800df6c:	4620      	mov	r0, r4
 800df6e:	f000 fd2b 	bl	800e9c8 <_Bfree>
 800df72:	4639      	mov	r1, r7
 800df74:	4620      	mov	r0, r4
 800df76:	f000 fd27 	bl	800e9c8 <_Bfree>
 800df7a:	e695      	b.n	800dca8 <_dtoa_r+0x6a0>
 800df7c:	2600      	movs	r6, #0
 800df7e:	4637      	mov	r7, r6
 800df80:	e7e1      	b.n	800df46 <_dtoa_r+0x93e>
 800df82:	9700      	str	r7, [sp, #0]
 800df84:	4637      	mov	r7, r6
 800df86:	e599      	b.n	800dabc <_dtoa_r+0x4b4>
 800df88:	40240000 	.word	0x40240000
 800df8c:	9b08      	ldr	r3, [sp, #32]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	f000 80ca 	beq.w	800e128 <_dtoa_r+0xb20>
 800df94:	9b03      	ldr	r3, [sp, #12]
 800df96:	9302      	str	r3, [sp, #8]
 800df98:	2d00      	cmp	r5, #0
 800df9a:	dd05      	ble.n	800dfa8 <_dtoa_r+0x9a0>
 800df9c:	4639      	mov	r1, r7
 800df9e:	462a      	mov	r2, r5
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	f000 ff2d 	bl	800ee00 <__lshift>
 800dfa6:	4607      	mov	r7, r0
 800dfa8:	f1b8 0f00 	cmp.w	r8, #0
 800dfac:	d05b      	beq.n	800e066 <_dtoa_r+0xa5e>
 800dfae:	6879      	ldr	r1, [r7, #4]
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	f000 fcc9 	bl	800e948 <_Balloc>
 800dfb6:	4605      	mov	r5, r0
 800dfb8:	b928      	cbnz	r0, 800dfc6 <_dtoa_r+0x9be>
 800dfba:	4b87      	ldr	r3, [pc, #540]	; (800e1d8 <_dtoa_r+0xbd0>)
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dfc2:	f7ff bb3b 	b.w	800d63c <_dtoa_r+0x34>
 800dfc6:	693a      	ldr	r2, [r7, #16]
 800dfc8:	3202      	adds	r2, #2
 800dfca:	0092      	lsls	r2, r2, #2
 800dfcc:	f107 010c 	add.w	r1, r7, #12
 800dfd0:	300c      	adds	r0, #12
 800dfd2:	f000 fc9f 	bl	800e914 <memcpy>
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	4629      	mov	r1, r5
 800dfda:	4620      	mov	r0, r4
 800dfdc:	f000 ff10 	bl	800ee00 <__lshift>
 800dfe0:	9b01      	ldr	r3, [sp, #4]
 800dfe2:	f103 0901 	add.w	r9, r3, #1
 800dfe6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800dfea:	4413      	add	r3, r2
 800dfec:	9305      	str	r3, [sp, #20]
 800dfee:	f00a 0301 	and.w	r3, sl, #1
 800dff2:	46b8      	mov	r8, r7
 800dff4:	9304      	str	r3, [sp, #16]
 800dff6:	4607      	mov	r7, r0
 800dff8:	4631      	mov	r1, r6
 800dffa:	ee18 0a10 	vmov	r0, s16
 800dffe:	f7ff fa75 	bl	800d4ec <quorem>
 800e002:	4641      	mov	r1, r8
 800e004:	9002      	str	r0, [sp, #8]
 800e006:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e00a:	ee18 0a10 	vmov	r0, s16
 800e00e:	f000 ff67 	bl	800eee0 <__mcmp>
 800e012:	463a      	mov	r2, r7
 800e014:	9003      	str	r0, [sp, #12]
 800e016:	4631      	mov	r1, r6
 800e018:	4620      	mov	r0, r4
 800e01a:	f000 ff7d 	bl	800ef18 <__mdiff>
 800e01e:	68c2      	ldr	r2, [r0, #12]
 800e020:	f109 3bff 	add.w	fp, r9, #4294967295
 800e024:	4605      	mov	r5, r0
 800e026:	bb02      	cbnz	r2, 800e06a <_dtoa_r+0xa62>
 800e028:	4601      	mov	r1, r0
 800e02a:	ee18 0a10 	vmov	r0, s16
 800e02e:	f000 ff57 	bl	800eee0 <__mcmp>
 800e032:	4602      	mov	r2, r0
 800e034:	4629      	mov	r1, r5
 800e036:	4620      	mov	r0, r4
 800e038:	9207      	str	r2, [sp, #28]
 800e03a:	f000 fcc5 	bl	800e9c8 <_Bfree>
 800e03e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e042:	ea43 0102 	orr.w	r1, r3, r2
 800e046:	9b04      	ldr	r3, [sp, #16]
 800e048:	430b      	orrs	r3, r1
 800e04a:	464d      	mov	r5, r9
 800e04c:	d10f      	bne.n	800e06e <_dtoa_r+0xa66>
 800e04e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e052:	d02a      	beq.n	800e0aa <_dtoa_r+0xaa2>
 800e054:	9b03      	ldr	r3, [sp, #12]
 800e056:	2b00      	cmp	r3, #0
 800e058:	dd02      	ble.n	800e060 <_dtoa_r+0xa58>
 800e05a:	9b02      	ldr	r3, [sp, #8]
 800e05c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e060:	f88b a000 	strb.w	sl, [fp]
 800e064:	e775      	b.n	800df52 <_dtoa_r+0x94a>
 800e066:	4638      	mov	r0, r7
 800e068:	e7ba      	b.n	800dfe0 <_dtoa_r+0x9d8>
 800e06a:	2201      	movs	r2, #1
 800e06c:	e7e2      	b.n	800e034 <_dtoa_r+0xa2c>
 800e06e:	9b03      	ldr	r3, [sp, #12]
 800e070:	2b00      	cmp	r3, #0
 800e072:	db04      	blt.n	800e07e <_dtoa_r+0xa76>
 800e074:	9906      	ldr	r1, [sp, #24]
 800e076:	430b      	orrs	r3, r1
 800e078:	9904      	ldr	r1, [sp, #16]
 800e07a:	430b      	orrs	r3, r1
 800e07c:	d122      	bne.n	800e0c4 <_dtoa_r+0xabc>
 800e07e:	2a00      	cmp	r2, #0
 800e080:	ddee      	ble.n	800e060 <_dtoa_r+0xa58>
 800e082:	ee18 1a10 	vmov	r1, s16
 800e086:	2201      	movs	r2, #1
 800e088:	4620      	mov	r0, r4
 800e08a:	f000 feb9 	bl	800ee00 <__lshift>
 800e08e:	4631      	mov	r1, r6
 800e090:	ee08 0a10 	vmov	s16, r0
 800e094:	f000 ff24 	bl	800eee0 <__mcmp>
 800e098:	2800      	cmp	r0, #0
 800e09a:	dc03      	bgt.n	800e0a4 <_dtoa_r+0xa9c>
 800e09c:	d1e0      	bne.n	800e060 <_dtoa_r+0xa58>
 800e09e:	f01a 0f01 	tst.w	sl, #1
 800e0a2:	d0dd      	beq.n	800e060 <_dtoa_r+0xa58>
 800e0a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e0a8:	d1d7      	bne.n	800e05a <_dtoa_r+0xa52>
 800e0aa:	2339      	movs	r3, #57	; 0x39
 800e0ac:	f88b 3000 	strb.w	r3, [fp]
 800e0b0:	462b      	mov	r3, r5
 800e0b2:	461d      	mov	r5, r3
 800e0b4:	3b01      	subs	r3, #1
 800e0b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e0ba:	2a39      	cmp	r2, #57	; 0x39
 800e0bc:	d071      	beq.n	800e1a2 <_dtoa_r+0xb9a>
 800e0be:	3201      	adds	r2, #1
 800e0c0:	701a      	strb	r2, [r3, #0]
 800e0c2:	e746      	b.n	800df52 <_dtoa_r+0x94a>
 800e0c4:	2a00      	cmp	r2, #0
 800e0c6:	dd07      	ble.n	800e0d8 <_dtoa_r+0xad0>
 800e0c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e0cc:	d0ed      	beq.n	800e0aa <_dtoa_r+0xaa2>
 800e0ce:	f10a 0301 	add.w	r3, sl, #1
 800e0d2:	f88b 3000 	strb.w	r3, [fp]
 800e0d6:	e73c      	b.n	800df52 <_dtoa_r+0x94a>
 800e0d8:	9b05      	ldr	r3, [sp, #20]
 800e0da:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e0de:	4599      	cmp	r9, r3
 800e0e0:	d047      	beq.n	800e172 <_dtoa_r+0xb6a>
 800e0e2:	ee18 1a10 	vmov	r1, s16
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	220a      	movs	r2, #10
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	f000 fc8e 	bl	800ea0c <__multadd>
 800e0f0:	45b8      	cmp	r8, r7
 800e0f2:	ee08 0a10 	vmov	s16, r0
 800e0f6:	f04f 0300 	mov.w	r3, #0
 800e0fa:	f04f 020a 	mov.w	r2, #10
 800e0fe:	4641      	mov	r1, r8
 800e100:	4620      	mov	r0, r4
 800e102:	d106      	bne.n	800e112 <_dtoa_r+0xb0a>
 800e104:	f000 fc82 	bl	800ea0c <__multadd>
 800e108:	4680      	mov	r8, r0
 800e10a:	4607      	mov	r7, r0
 800e10c:	f109 0901 	add.w	r9, r9, #1
 800e110:	e772      	b.n	800dff8 <_dtoa_r+0x9f0>
 800e112:	f000 fc7b 	bl	800ea0c <__multadd>
 800e116:	4639      	mov	r1, r7
 800e118:	4680      	mov	r8, r0
 800e11a:	2300      	movs	r3, #0
 800e11c:	220a      	movs	r2, #10
 800e11e:	4620      	mov	r0, r4
 800e120:	f000 fc74 	bl	800ea0c <__multadd>
 800e124:	4607      	mov	r7, r0
 800e126:	e7f1      	b.n	800e10c <_dtoa_r+0xb04>
 800e128:	9b03      	ldr	r3, [sp, #12]
 800e12a:	9302      	str	r3, [sp, #8]
 800e12c:	9d01      	ldr	r5, [sp, #4]
 800e12e:	ee18 0a10 	vmov	r0, s16
 800e132:	4631      	mov	r1, r6
 800e134:	f7ff f9da 	bl	800d4ec <quorem>
 800e138:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e13c:	9b01      	ldr	r3, [sp, #4]
 800e13e:	f805 ab01 	strb.w	sl, [r5], #1
 800e142:	1aea      	subs	r2, r5, r3
 800e144:	9b02      	ldr	r3, [sp, #8]
 800e146:	4293      	cmp	r3, r2
 800e148:	dd09      	ble.n	800e15e <_dtoa_r+0xb56>
 800e14a:	ee18 1a10 	vmov	r1, s16
 800e14e:	2300      	movs	r3, #0
 800e150:	220a      	movs	r2, #10
 800e152:	4620      	mov	r0, r4
 800e154:	f000 fc5a 	bl	800ea0c <__multadd>
 800e158:	ee08 0a10 	vmov	s16, r0
 800e15c:	e7e7      	b.n	800e12e <_dtoa_r+0xb26>
 800e15e:	9b02      	ldr	r3, [sp, #8]
 800e160:	2b00      	cmp	r3, #0
 800e162:	bfc8      	it	gt
 800e164:	461d      	movgt	r5, r3
 800e166:	9b01      	ldr	r3, [sp, #4]
 800e168:	bfd8      	it	le
 800e16a:	2501      	movle	r5, #1
 800e16c:	441d      	add	r5, r3
 800e16e:	f04f 0800 	mov.w	r8, #0
 800e172:	ee18 1a10 	vmov	r1, s16
 800e176:	2201      	movs	r2, #1
 800e178:	4620      	mov	r0, r4
 800e17a:	f000 fe41 	bl	800ee00 <__lshift>
 800e17e:	4631      	mov	r1, r6
 800e180:	ee08 0a10 	vmov	s16, r0
 800e184:	f000 feac 	bl	800eee0 <__mcmp>
 800e188:	2800      	cmp	r0, #0
 800e18a:	dc91      	bgt.n	800e0b0 <_dtoa_r+0xaa8>
 800e18c:	d102      	bne.n	800e194 <_dtoa_r+0xb8c>
 800e18e:	f01a 0f01 	tst.w	sl, #1
 800e192:	d18d      	bne.n	800e0b0 <_dtoa_r+0xaa8>
 800e194:	462b      	mov	r3, r5
 800e196:	461d      	mov	r5, r3
 800e198:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e19c:	2a30      	cmp	r2, #48	; 0x30
 800e19e:	d0fa      	beq.n	800e196 <_dtoa_r+0xb8e>
 800e1a0:	e6d7      	b.n	800df52 <_dtoa_r+0x94a>
 800e1a2:	9a01      	ldr	r2, [sp, #4]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d184      	bne.n	800e0b2 <_dtoa_r+0xaaa>
 800e1a8:	9b00      	ldr	r3, [sp, #0]
 800e1aa:	3301      	adds	r3, #1
 800e1ac:	9300      	str	r3, [sp, #0]
 800e1ae:	2331      	movs	r3, #49	; 0x31
 800e1b0:	7013      	strb	r3, [r2, #0]
 800e1b2:	e6ce      	b.n	800df52 <_dtoa_r+0x94a>
 800e1b4:	4b09      	ldr	r3, [pc, #36]	; (800e1dc <_dtoa_r+0xbd4>)
 800e1b6:	f7ff ba95 	b.w	800d6e4 <_dtoa_r+0xdc>
 800e1ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	f47f aa6e 	bne.w	800d69e <_dtoa_r+0x96>
 800e1c2:	4b07      	ldr	r3, [pc, #28]	; (800e1e0 <_dtoa_r+0xbd8>)
 800e1c4:	f7ff ba8e 	b.w	800d6e4 <_dtoa_r+0xdc>
 800e1c8:	9b02      	ldr	r3, [sp, #8]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	dcae      	bgt.n	800e12c <_dtoa_r+0xb24>
 800e1ce:	9b06      	ldr	r3, [sp, #24]
 800e1d0:	2b02      	cmp	r3, #2
 800e1d2:	f73f aea8 	bgt.w	800df26 <_dtoa_r+0x91e>
 800e1d6:	e7a9      	b.n	800e12c <_dtoa_r+0xb24>
 800e1d8:	08010886 	.word	0x08010886
 800e1dc:	080105cc 	.word	0x080105cc
 800e1e0:	0801081e 	.word	0x0801081e

0800e1e4 <fiprintf>:
 800e1e4:	b40e      	push	{r1, r2, r3}
 800e1e6:	b503      	push	{r0, r1, lr}
 800e1e8:	4601      	mov	r1, r0
 800e1ea:	ab03      	add	r3, sp, #12
 800e1ec:	4805      	ldr	r0, [pc, #20]	; (800e204 <fiprintf+0x20>)
 800e1ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1f2:	6800      	ldr	r0, [r0, #0]
 800e1f4:	9301      	str	r3, [sp, #4]
 800e1f6:	f001 fa03 	bl	800f600 <_vfiprintf_r>
 800e1fa:	b002      	add	sp, #8
 800e1fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e200:	b003      	add	sp, #12
 800e202:	4770      	bx	lr
 800e204:	20000034 	.word	0x20000034

0800e208 <rshift>:
 800e208:	6903      	ldr	r3, [r0, #16]
 800e20a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e20e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e212:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e216:	f100 0414 	add.w	r4, r0, #20
 800e21a:	dd45      	ble.n	800e2a8 <rshift+0xa0>
 800e21c:	f011 011f 	ands.w	r1, r1, #31
 800e220:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e224:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e228:	d10c      	bne.n	800e244 <rshift+0x3c>
 800e22a:	f100 0710 	add.w	r7, r0, #16
 800e22e:	4629      	mov	r1, r5
 800e230:	42b1      	cmp	r1, r6
 800e232:	d334      	bcc.n	800e29e <rshift+0x96>
 800e234:	1a9b      	subs	r3, r3, r2
 800e236:	009b      	lsls	r3, r3, #2
 800e238:	1eea      	subs	r2, r5, #3
 800e23a:	4296      	cmp	r6, r2
 800e23c:	bf38      	it	cc
 800e23e:	2300      	movcc	r3, #0
 800e240:	4423      	add	r3, r4
 800e242:	e015      	b.n	800e270 <rshift+0x68>
 800e244:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e248:	f1c1 0820 	rsb	r8, r1, #32
 800e24c:	40cf      	lsrs	r7, r1
 800e24e:	f105 0e04 	add.w	lr, r5, #4
 800e252:	46a1      	mov	r9, r4
 800e254:	4576      	cmp	r6, lr
 800e256:	46f4      	mov	ip, lr
 800e258:	d815      	bhi.n	800e286 <rshift+0x7e>
 800e25a:	1a9a      	subs	r2, r3, r2
 800e25c:	0092      	lsls	r2, r2, #2
 800e25e:	3a04      	subs	r2, #4
 800e260:	3501      	adds	r5, #1
 800e262:	42ae      	cmp	r6, r5
 800e264:	bf38      	it	cc
 800e266:	2200      	movcc	r2, #0
 800e268:	18a3      	adds	r3, r4, r2
 800e26a:	50a7      	str	r7, [r4, r2]
 800e26c:	b107      	cbz	r7, 800e270 <rshift+0x68>
 800e26e:	3304      	adds	r3, #4
 800e270:	1b1a      	subs	r2, r3, r4
 800e272:	42a3      	cmp	r3, r4
 800e274:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e278:	bf08      	it	eq
 800e27a:	2300      	moveq	r3, #0
 800e27c:	6102      	str	r2, [r0, #16]
 800e27e:	bf08      	it	eq
 800e280:	6143      	streq	r3, [r0, #20]
 800e282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e286:	f8dc c000 	ldr.w	ip, [ip]
 800e28a:	fa0c fc08 	lsl.w	ip, ip, r8
 800e28e:	ea4c 0707 	orr.w	r7, ip, r7
 800e292:	f849 7b04 	str.w	r7, [r9], #4
 800e296:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e29a:	40cf      	lsrs	r7, r1
 800e29c:	e7da      	b.n	800e254 <rshift+0x4c>
 800e29e:	f851 cb04 	ldr.w	ip, [r1], #4
 800e2a2:	f847 cf04 	str.w	ip, [r7, #4]!
 800e2a6:	e7c3      	b.n	800e230 <rshift+0x28>
 800e2a8:	4623      	mov	r3, r4
 800e2aa:	e7e1      	b.n	800e270 <rshift+0x68>

0800e2ac <__hexdig_fun>:
 800e2ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e2b0:	2b09      	cmp	r3, #9
 800e2b2:	d802      	bhi.n	800e2ba <__hexdig_fun+0xe>
 800e2b4:	3820      	subs	r0, #32
 800e2b6:	b2c0      	uxtb	r0, r0
 800e2b8:	4770      	bx	lr
 800e2ba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e2be:	2b05      	cmp	r3, #5
 800e2c0:	d801      	bhi.n	800e2c6 <__hexdig_fun+0x1a>
 800e2c2:	3847      	subs	r0, #71	; 0x47
 800e2c4:	e7f7      	b.n	800e2b6 <__hexdig_fun+0xa>
 800e2c6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e2ca:	2b05      	cmp	r3, #5
 800e2cc:	d801      	bhi.n	800e2d2 <__hexdig_fun+0x26>
 800e2ce:	3827      	subs	r0, #39	; 0x27
 800e2d0:	e7f1      	b.n	800e2b6 <__hexdig_fun+0xa>
 800e2d2:	2000      	movs	r0, #0
 800e2d4:	4770      	bx	lr
	...

0800e2d8 <__gethex>:
 800e2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2dc:	ed2d 8b02 	vpush	{d8}
 800e2e0:	b089      	sub	sp, #36	; 0x24
 800e2e2:	ee08 0a10 	vmov	s16, r0
 800e2e6:	9304      	str	r3, [sp, #16]
 800e2e8:	4bb4      	ldr	r3, [pc, #720]	; (800e5bc <__gethex+0x2e4>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	9301      	str	r3, [sp, #4]
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	468b      	mov	fp, r1
 800e2f2:	4690      	mov	r8, r2
 800e2f4:	f7f1 ff6c 	bl	80001d0 <strlen>
 800e2f8:	9b01      	ldr	r3, [sp, #4]
 800e2fa:	f8db 2000 	ldr.w	r2, [fp]
 800e2fe:	4403      	add	r3, r0
 800e300:	4682      	mov	sl, r0
 800e302:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e306:	9305      	str	r3, [sp, #20]
 800e308:	1c93      	adds	r3, r2, #2
 800e30a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e30e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e312:	32fe      	adds	r2, #254	; 0xfe
 800e314:	18d1      	adds	r1, r2, r3
 800e316:	461f      	mov	r7, r3
 800e318:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e31c:	9100      	str	r1, [sp, #0]
 800e31e:	2830      	cmp	r0, #48	; 0x30
 800e320:	d0f8      	beq.n	800e314 <__gethex+0x3c>
 800e322:	f7ff ffc3 	bl	800e2ac <__hexdig_fun>
 800e326:	4604      	mov	r4, r0
 800e328:	2800      	cmp	r0, #0
 800e32a:	d13a      	bne.n	800e3a2 <__gethex+0xca>
 800e32c:	9901      	ldr	r1, [sp, #4]
 800e32e:	4652      	mov	r2, sl
 800e330:	4638      	mov	r0, r7
 800e332:	f001 fa9d 	bl	800f870 <strncmp>
 800e336:	4605      	mov	r5, r0
 800e338:	2800      	cmp	r0, #0
 800e33a:	d168      	bne.n	800e40e <__gethex+0x136>
 800e33c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e340:	eb07 060a 	add.w	r6, r7, sl
 800e344:	f7ff ffb2 	bl	800e2ac <__hexdig_fun>
 800e348:	2800      	cmp	r0, #0
 800e34a:	d062      	beq.n	800e412 <__gethex+0x13a>
 800e34c:	4633      	mov	r3, r6
 800e34e:	7818      	ldrb	r0, [r3, #0]
 800e350:	2830      	cmp	r0, #48	; 0x30
 800e352:	461f      	mov	r7, r3
 800e354:	f103 0301 	add.w	r3, r3, #1
 800e358:	d0f9      	beq.n	800e34e <__gethex+0x76>
 800e35a:	f7ff ffa7 	bl	800e2ac <__hexdig_fun>
 800e35e:	2301      	movs	r3, #1
 800e360:	fab0 f480 	clz	r4, r0
 800e364:	0964      	lsrs	r4, r4, #5
 800e366:	4635      	mov	r5, r6
 800e368:	9300      	str	r3, [sp, #0]
 800e36a:	463a      	mov	r2, r7
 800e36c:	4616      	mov	r6, r2
 800e36e:	3201      	adds	r2, #1
 800e370:	7830      	ldrb	r0, [r6, #0]
 800e372:	f7ff ff9b 	bl	800e2ac <__hexdig_fun>
 800e376:	2800      	cmp	r0, #0
 800e378:	d1f8      	bne.n	800e36c <__gethex+0x94>
 800e37a:	9901      	ldr	r1, [sp, #4]
 800e37c:	4652      	mov	r2, sl
 800e37e:	4630      	mov	r0, r6
 800e380:	f001 fa76 	bl	800f870 <strncmp>
 800e384:	b980      	cbnz	r0, 800e3a8 <__gethex+0xd0>
 800e386:	b94d      	cbnz	r5, 800e39c <__gethex+0xc4>
 800e388:	eb06 050a 	add.w	r5, r6, sl
 800e38c:	462a      	mov	r2, r5
 800e38e:	4616      	mov	r6, r2
 800e390:	3201      	adds	r2, #1
 800e392:	7830      	ldrb	r0, [r6, #0]
 800e394:	f7ff ff8a 	bl	800e2ac <__hexdig_fun>
 800e398:	2800      	cmp	r0, #0
 800e39a:	d1f8      	bne.n	800e38e <__gethex+0xb6>
 800e39c:	1bad      	subs	r5, r5, r6
 800e39e:	00ad      	lsls	r5, r5, #2
 800e3a0:	e004      	b.n	800e3ac <__gethex+0xd4>
 800e3a2:	2400      	movs	r4, #0
 800e3a4:	4625      	mov	r5, r4
 800e3a6:	e7e0      	b.n	800e36a <__gethex+0x92>
 800e3a8:	2d00      	cmp	r5, #0
 800e3aa:	d1f7      	bne.n	800e39c <__gethex+0xc4>
 800e3ac:	7833      	ldrb	r3, [r6, #0]
 800e3ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e3b2:	2b50      	cmp	r3, #80	; 0x50
 800e3b4:	d13b      	bne.n	800e42e <__gethex+0x156>
 800e3b6:	7873      	ldrb	r3, [r6, #1]
 800e3b8:	2b2b      	cmp	r3, #43	; 0x2b
 800e3ba:	d02c      	beq.n	800e416 <__gethex+0x13e>
 800e3bc:	2b2d      	cmp	r3, #45	; 0x2d
 800e3be:	d02e      	beq.n	800e41e <__gethex+0x146>
 800e3c0:	1c71      	adds	r1, r6, #1
 800e3c2:	f04f 0900 	mov.w	r9, #0
 800e3c6:	7808      	ldrb	r0, [r1, #0]
 800e3c8:	f7ff ff70 	bl	800e2ac <__hexdig_fun>
 800e3cc:	1e43      	subs	r3, r0, #1
 800e3ce:	b2db      	uxtb	r3, r3
 800e3d0:	2b18      	cmp	r3, #24
 800e3d2:	d82c      	bhi.n	800e42e <__gethex+0x156>
 800e3d4:	f1a0 0210 	sub.w	r2, r0, #16
 800e3d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e3dc:	f7ff ff66 	bl	800e2ac <__hexdig_fun>
 800e3e0:	1e43      	subs	r3, r0, #1
 800e3e2:	b2db      	uxtb	r3, r3
 800e3e4:	2b18      	cmp	r3, #24
 800e3e6:	d91d      	bls.n	800e424 <__gethex+0x14c>
 800e3e8:	f1b9 0f00 	cmp.w	r9, #0
 800e3ec:	d000      	beq.n	800e3f0 <__gethex+0x118>
 800e3ee:	4252      	negs	r2, r2
 800e3f0:	4415      	add	r5, r2
 800e3f2:	f8cb 1000 	str.w	r1, [fp]
 800e3f6:	b1e4      	cbz	r4, 800e432 <__gethex+0x15a>
 800e3f8:	9b00      	ldr	r3, [sp, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	bf14      	ite	ne
 800e3fe:	2700      	movne	r7, #0
 800e400:	2706      	moveq	r7, #6
 800e402:	4638      	mov	r0, r7
 800e404:	b009      	add	sp, #36	; 0x24
 800e406:	ecbd 8b02 	vpop	{d8}
 800e40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e40e:	463e      	mov	r6, r7
 800e410:	4625      	mov	r5, r4
 800e412:	2401      	movs	r4, #1
 800e414:	e7ca      	b.n	800e3ac <__gethex+0xd4>
 800e416:	f04f 0900 	mov.w	r9, #0
 800e41a:	1cb1      	adds	r1, r6, #2
 800e41c:	e7d3      	b.n	800e3c6 <__gethex+0xee>
 800e41e:	f04f 0901 	mov.w	r9, #1
 800e422:	e7fa      	b.n	800e41a <__gethex+0x142>
 800e424:	230a      	movs	r3, #10
 800e426:	fb03 0202 	mla	r2, r3, r2, r0
 800e42a:	3a10      	subs	r2, #16
 800e42c:	e7d4      	b.n	800e3d8 <__gethex+0x100>
 800e42e:	4631      	mov	r1, r6
 800e430:	e7df      	b.n	800e3f2 <__gethex+0x11a>
 800e432:	1bf3      	subs	r3, r6, r7
 800e434:	3b01      	subs	r3, #1
 800e436:	4621      	mov	r1, r4
 800e438:	2b07      	cmp	r3, #7
 800e43a:	dc0b      	bgt.n	800e454 <__gethex+0x17c>
 800e43c:	ee18 0a10 	vmov	r0, s16
 800e440:	f000 fa82 	bl	800e948 <_Balloc>
 800e444:	4604      	mov	r4, r0
 800e446:	b940      	cbnz	r0, 800e45a <__gethex+0x182>
 800e448:	4b5d      	ldr	r3, [pc, #372]	; (800e5c0 <__gethex+0x2e8>)
 800e44a:	4602      	mov	r2, r0
 800e44c:	21de      	movs	r1, #222	; 0xde
 800e44e:	485d      	ldr	r0, [pc, #372]	; (800e5c4 <__gethex+0x2ec>)
 800e450:	f7ff f82e 	bl	800d4b0 <__assert_func>
 800e454:	3101      	adds	r1, #1
 800e456:	105b      	asrs	r3, r3, #1
 800e458:	e7ee      	b.n	800e438 <__gethex+0x160>
 800e45a:	f100 0914 	add.w	r9, r0, #20
 800e45e:	f04f 0b00 	mov.w	fp, #0
 800e462:	f1ca 0301 	rsb	r3, sl, #1
 800e466:	f8cd 9008 	str.w	r9, [sp, #8]
 800e46a:	f8cd b000 	str.w	fp, [sp]
 800e46e:	9306      	str	r3, [sp, #24]
 800e470:	42b7      	cmp	r7, r6
 800e472:	d340      	bcc.n	800e4f6 <__gethex+0x21e>
 800e474:	9802      	ldr	r0, [sp, #8]
 800e476:	9b00      	ldr	r3, [sp, #0]
 800e478:	f840 3b04 	str.w	r3, [r0], #4
 800e47c:	eba0 0009 	sub.w	r0, r0, r9
 800e480:	1080      	asrs	r0, r0, #2
 800e482:	0146      	lsls	r6, r0, #5
 800e484:	6120      	str	r0, [r4, #16]
 800e486:	4618      	mov	r0, r3
 800e488:	f000 fb50 	bl	800eb2c <__hi0bits>
 800e48c:	1a30      	subs	r0, r6, r0
 800e48e:	f8d8 6000 	ldr.w	r6, [r8]
 800e492:	42b0      	cmp	r0, r6
 800e494:	dd63      	ble.n	800e55e <__gethex+0x286>
 800e496:	1b87      	subs	r7, r0, r6
 800e498:	4639      	mov	r1, r7
 800e49a:	4620      	mov	r0, r4
 800e49c:	f000 fef4 	bl	800f288 <__any_on>
 800e4a0:	4682      	mov	sl, r0
 800e4a2:	b1a8      	cbz	r0, 800e4d0 <__gethex+0x1f8>
 800e4a4:	1e7b      	subs	r3, r7, #1
 800e4a6:	1159      	asrs	r1, r3, #5
 800e4a8:	f003 021f 	and.w	r2, r3, #31
 800e4ac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e4b0:	f04f 0a01 	mov.w	sl, #1
 800e4b4:	fa0a f202 	lsl.w	r2, sl, r2
 800e4b8:	420a      	tst	r2, r1
 800e4ba:	d009      	beq.n	800e4d0 <__gethex+0x1f8>
 800e4bc:	4553      	cmp	r3, sl
 800e4be:	dd05      	ble.n	800e4cc <__gethex+0x1f4>
 800e4c0:	1eb9      	subs	r1, r7, #2
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	f000 fee0 	bl	800f288 <__any_on>
 800e4c8:	2800      	cmp	r0, #0
 800e4ca:	d145      	bne.n	800e558 <__gethex+0x280>
 800e4cc:	f04f 0a02 	mov.w	sl, #2
 800e4d0:	4639      	mov	r1, r7
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	f7ff fe98 	bl	800e208 <rshift>
 800e4d8:	443d      	add	r5, r7
 800e4da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e4de:	42ab      	cmp	r3, r5
 800e4e0:	da4c      	bge.n	800e57c <__gethex+0x2a4>
 800e4e2:	ee18 0a10 	vmov	r0, s16
 800e4e6:	4621      	mov	r1, r4
 800e4e8:	f000 fa6e 	bl	800e9c8 <_Bfree>
 800e4ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	6013      	str	r3, [r2, #0]
 800e4f2:	27a3      	movs	r7, #163	; 0xa3
 800e4f4:	e785      	b.n	800e402 <__gethex+0x12a>
 800e4f6:	1e73      	subs	r3, r6, #1
 800e4f8:	9a05      	ldr	r2, [sp, #20]
 800e4fa:	9303      	str	r3, [sp, #12]
 800e4fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e500:	4293      	cmp	r3, r2
 800e502:	d019      	beq.n	800e538 <__gethex+0x260>
 800e504:	f1bb 0f20 	cmp.w	fp, #32
 800e508:	d107      	bne.n	800e51a <__gethex+0x242>
 800e50a:	9b02      	ldr	r3, [sp, #8]
 800e50c:	9a00      	ldr	r2, [sp, #0]
 800e50e:	f843 2b04 	str.w	r2, [r3], #4
 800e512:	9302      	str	r3, [sp, #8]
 800e514:	2300      	movs	r3, #0
 800e516:	9300      	str	r3, [sp, #0]
 800e518:	469b      	mov	fp, r3
 800e51a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e51e:	f7ff fec5 	bl	800e2ac <__hexdig_fun>
 800e522:	9b00      	ldr	r3, [sp, #0]
 800e524:	f000 000f 	and.w	r0, r0, #15
 800e528:	fa00 f00b 	lsl.w	r0, r0, fp
 800e52c:	4303      	orrs	r3, r0
 800e52e:	9300      	str	r3, [sp, #0]
 800e530:	f10b 0b04 	add.w	fp, fp, #4
 800e534:	9b03      	ldr	r3, [sp, #12]
 800e536:	e00d      	b.n	800e554 <__gethex+0x27c>
 800e538:	9b03      	ldr	r3, [sp, #12]
 800e53a:	9a06      	ldr	r2, [sp, #24]
 800e53c:	4413      	add	r3, r2
 800e53e:	42bb      	cmp	r3, r7
 800e540:	d3e0      	bcc.n	800e504 <__gethex+0x22c>
 800e542:	4618      	mov	r0, r3
 800e544:	9901      	ldr	r1, [sp, #4]
 800e546:	9307      	str	r3, [sp, #28]
 800e548:	4652      	mov	r2, sl
 800e54a:	f001 f991 	bl	800f870 <strncmp>
 800e54e:	9b07      	ldr	r3, [sp, #28]
 800e550:	2800      	cmp	r0, #0
 800e552:	d1d7      	bne.n	800e504 <__gethex+0x22c>
 800e554:	461e      	mov	r6, r3
 800e556:	e78b      	b.n	800e470 <__gethex+0x198>
 800e558:	f04f 0a03 	mov.w	sl, #3
 800e55c:	e7b8      	b.n	800e4d0 <__gethex+0x1f8>
 800e55e:	da0a      	bge.n	800e576 <__gethex+0x29e>
 800e560:	1a37      	subs	r7, r6, r0
 800e562:	4621      	mov	r1, r4
 800e564:	ee18 0a10 	vmov	r0, s16
 800e568:	463a      	mov	r2, r7
 800e56a:	f000 fc49 	bl	800ee00 <__lshift>
 800e56e:	1bed      	subs	r5, r5, r7
 800e570:	4604      	mov	r4, r0
 800e572:	f100 0914 	add.w	r9, r0, #20
 800e576:	f04f 0a00 	mov.w	sl, #0
 800e57a:	e7ae      	b.n	800e4da <__gethex+0x202>
 800e57c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e580:	42a8      	cmp	r0, r5
 800e582:	dd72      	ble.n	800e66a <__gethex+0x392>
 800e584:	1b45      	subs	r5, r0, r5
 800e586:	42ae      	cmp	r6, r5
 800e588:	dc36      	bgt.n	800e5f8 <__gethex+0x320>
 800e58a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e58e:	2b02      	cmp	r3, #2
 800e590:	d02a      	beq.n	800e5e8 <__gethex+0x310>
 800e592:	2b03      	cmp	r3, #3
 800e594:	d02c      	beq.n	800e5f0 <__gethex+0x318>
 800e596:	2b01      	cmp	r3, #1
 800e598:	d11c      	bne.n	800e5d4 <__gethex+0x2fc>
 800e59a:	42ae      	cmp	r6, r5
 800e59c:	d11a      	bne.n	800e5d4 <__gethex+0x2fc>
 800e59e:	2e01      	cmp	r6, #1
 800e5a0:	d112      	bne.n	800e5c8 <__gethex+0x2f0>
 800e5a2:	9a04      	ldr	r2, [sp, #16]
 800e5a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e5a8:	6013      	str	r3, [r2, #0]
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	6123      	str	r3, [r4, #16]
 800e5ae:	f8c9 3000 	str.w	r3, [r9]
 800e5b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e5b4:	2762      	movs	r7, #98	; 0x62
 800e5b6:	601c      	str	r4, [r3, #0]
 800e5b8:	e723      	b.n	800e402 <__gethex+0x12a>
 800e5ba:	bf00      	nop
 800e5bc:	080108fc 	.word	0x080108fc
 800e5c0:	08010886 	.word	0x08010886
 800e5c4:	08010897 	.word	0x08010897
 800e5c8:	1e71      	subs	r1, r6, #1
 800e5ca:	4620      	mov	r0, r4
 800e5cc:	f000 fe5c 	bl	800f288 <__any_on>
 800e5d0:	2800      	cmp	r0, #0
 800e5d2:	d1e6      	bne.n	800e5a2 <__gethex+0x2ca>
 800e5d4:	ee18 0a10 	vmov	r0, s16
 800e5d8:	4621      	mov	r1, r4
 800e5da:	f000 f9f5 	bl	800e9c8 <_Bfree>
 800e5de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	6013      	str	r3, [r2, #0]
 800e5e4:	2750      	movs	r7, #80	; 0x50
 800e5e6:	e70c      	b.n	800e402 <__gethex+0x12a>
 800e5e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d1f2      	bne.n	800e5d4 <__gethex+0x2fc>
 800e5ee:	e7d8      	b.n	800e5a2 <__gethex+0x2ca>
 800e5f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d1d5      	bne.n	800e5a2 <__gethex+0x2ca>
 800e5f6:	e7ed      	b.n	800e5d4 <__gethex+0x2fc>
 800e5f8:	1e6f      	subs	r7, r5, #1
 800e5fa:	f1ba 0f00 	cmp.w	sl, #0
 800e5fe:	d131      	bne.n	800e664 <__gethex+0x38c>
 800e600:	b127      	cbz	r7, 800e60c <__gethex+0x334>
 800e602:	4639      	mov	r1, r7
 800e604:	4620      	mov	r0, r4
 800e606:	f000 fe3f 	bl	800f288 <__any_on>
 800e60a:	4682      	mov	sl, r0
 800e60c:	117b      	asrs	r3, r7, #5
 800e60e:	2101      	movs	r1, #1
 800e610:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e614:	f007 071f 	and.w	r7, r7, #31
 800e618:	fa01 f707 	lsl.w	r7, r1, r7
 800e61c:	421f      	tst	r7, r3
 800e61e:	4629      	mov	r1, r5
 800e620:	4620      	mov	r0, r4
 800e622:	bf18      	it	ne
 800e624:	f04a 0a02 	orrne.w	sl, sl, #2
 800e628:	1b76      	subs	r6, r6, r5
 800e62a:	f7ff fded 	bl	800e208 <rshift>
 800e62e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e632:	2702      	movs	r7, #2
 800e634:	f1ba 0f00 	cmp.w	sl, #0
 800e638:	d048      	beq.n	800e6cc <__gethex+0x3f4>
 800e63a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e63e:	2b02      	cmp	r3, #2
 800e640:	d015      	beq.n	800e66e <__gethex+0x396>
 800e642:	2b03      	cmp	r3, #3
 800e644:	d017      	beq.n	800e676 <__gethex+0x39e>
 800e646:	2b01      	cmp	r3, #1
 800e648:	d109      	bne.n	800e65e <__gethex+0x386>
 800e64a:	f01a 0f02 	tst.w	sl, #2
 800e64e:	d006      	beq.n	800e65e <__gethex+0x386>
 800e650:	f8d9 0000 	ldr.w	r0, [r9]
 800e654:	ea4a 0a00 	orr.w	sl, sl, r0
 800e658:	f01a 0f01 	tst.w	sl, #1
 800e65c:	d10e      	bne.n	800e67c <__gethex+0x3a4>
 800e65e:	f047 0710 	orr.w	r7, r7, #16
 800e662:	e033      	b.n	800e6cc <__gethex+0x3f4>
 800e664:	f04f 0a01 	mov.w	sl, #1
 800e668:	e7d0      	b.n	800e60c <__gethex+0x334>
 800e66a:	2701      	movs	r7, #1
 800e66c:	e7e2      	b.n	800e634 <__gethex+0x35c>
 800e66e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e670:	f1c3 0301 	rsb	r3, r3, #1
 800e674:	9315      	str	r3, [sp, #84]	; 0x54
 800e676:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d0f0      	beq.n	800e65e <__gethex+0x386>
 800e67c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e680:	f104 0314 	add.w	r3, r4, #20
 800e684:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e688:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e68c:	f04f 0c00 	mov.w	ip, #0
 800e690:	4618      	mov	r0, r3
 800e692:	f853 2b04 	ldr.w	r2, [r3], #4
 800e696:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e69a:	d01c      	beq.n	800e6d6 <__gethex+0x3fe>
 800e69c:	3201      	adds	r2, #1
 800e69e:	6002      	str	r2, [r0, #0]
 800e6a0:	2f02      	cmp	r7, #2
 800e6a2:	f104 0314 	add.w	r3, r4, #20
 800e6a6:	d13f      	bne.n	800e728 <__gethex+0x450>
 800e6a8:	f8d8 2000 	ldr.w	r2, [r8]
 800e6ac:	3a01      	subs	r2, #1
 800e6ae:	42b2      	cmp	r2, r6
 800e6b0:	d10a      	bne.n	800e6c8 <__gethex+0x3f0>
 800e6b2:	1171      	asrs	r1, r6, #5
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e6ba:	f006 061f 	and.w	r6, r6, #31
 800e6be:	fa02 f606 	lsl.w	r6, r2, r6
 800e6c2:	421e      	tst	r6, r3
 800e6c4:	bf18      	it	ne
 800e6c6:	4617      	movne	r7, r2
 800e6c8:	f047 0720 	orr.w	r7, r7, #32
 800e6cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e6ce:	601c      	str	r4, [r3, #0]
 800e6d0:	9b04      	ldr	r3, [sp, #16]
 800e6d2:	601d      	str	r5, [r3, #0]
 800e6d4:	e695      	b.n	800e402 <__gethex+0x12a>
 800e6d6:	4299      	cmp	r1, r3
 800e6d8:	f843 cc04 	str.w	ip, [r3, #-4]
 800e6dc:	d8d8      	bhi.n	800e690 <__gethex+0x3b8>
 800e6de:	68a3      	ldr	r3, [r4, #8]
 800e6e0:	459b      	cmp	fp, r3
 800e6e2:	db19      	blt.n	800e718 <__gethex+0x440>
 800e6e4:	6861      	ldr	r1, [r4, #4]
 800e6e6:	ee18 0a10 	vmov	r0, s16
 800e6ea:	3101      	adds	r1, #1
 800e6ec:	f000 f92c 	bl	800e948 <_Balloc>
 800e6f0:	4681      	mov	r9, r0
 800e6f2:	b918      	cbnz	r0, 800e6fc <__gethex+0x424>
 800e6f4:	4b1a      	ldr	r3, [pc, #104]	; (800e760 <__gethex+0x488>)
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	2184      	movs	r1, #132	; 0x84
 800e6fa:	e6a8      	b.n	800e44e <__gethex+0x176>
 800e6fc:	6922      	ldr	r2, [r4, #16]
 800e6fe:	3202      	adds	r2, #2
 800e700:	f104 010c 	add.w	r1, r4, #12
 800e704:	0092      	lsls	r2, r2, #2
 800e706:	300c      	adds	r0, #12
 800e708:	f000 f904 	bl	800e914 <memcpy>
 800e70c:	4621      	mov	r1, r4
 800e70e:	ee18 0a10 	vmov	r0, s16
 800e712:	f000 f959 	bl	800e9c8 <_Bfree>
 800e716:	464c      	mov	r4, r9
 800e718:	6923      	ldr	r3, [r4, #16]
 800e71a:	1c5a      	adds	r2, r3, #1
 800e71c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e720:	6122      	str	r2, [r4, #16]
 800e722:	2201      	movs	r2, #1
 800e724:	615a      	str	r2, [r3, #20]
 800e726:	e7bb      	b.n	800e6a0 <__gethex+0x3c8>
 800e728:	6922      	ldr	r2, [r4, #16]
 800e72a:	455a      	cmp	r2, fp
 800e72c:	dd0b      	ble.n	800e746 <__gethex+0x46e>
 800e72e:	2101      	movs	r1, #1
 800e730:	4620      	mov	r0, r4
 800e732:	f7ff fd69 	bl	800e208 <rshift>
 800e736:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e73a:	3501      	adds	r5, #1
 800e73c:	42ab      	cmp	r3, r5
 800e73e:	f6ff aed0 	blt.w	800e4e2 <__gethex+0x20a>
 800e742:	2701      	movs	r7, #1
 800e744:	e7c0      	b.n	800e6c8 <__gethex+0x3f0>
 800e746:	f016 061f 	ands.w	r6, r6, #31
 800e74a:	d0fa      	beq.n	800e742 <__gethex+0x46a>
 800e74c:	4453      	add	r3, sl
 800e74e:	f1c6 0620 	rsb	r6, r6, #32
 800e752:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e756:	f000 f9e9 	bl	800eb2c <__hi0bits>
 800e75a:	42b0      	cmp	r0, r6
 800e75c:	dbe7      	blt.n	800e72e <__gethex+0x456>
 800e75e:	e7f0      	b.n	800e742 <__gethex+0x46a>
 800e760:	08010886 	.word	0x08010886

0800e764 <L_shift>:
 800e764:	f1c2 0208 	rsb	r2, r2, #8
 800e768:	0092      	lsls	r2, r2, #2
 800e76a:	b570      	push	{r4, r5, r6, lr}
 800e76c:	f1c2 0620 	rsb	r6, r2, #32
 800e770:	6843      	ldr	r3, [r0, #4]
 800e772:	6804      	ldr	r4, [r0, #0]
 800e774:	fa03 f506 	lsl.w	r5, r3, r6
 800e778:	432c      	orrs	r4, r5
 800e77a:	40d3      	lsrs	r3, r2
 800e77c:	6004      	str	r4, [r0, #0]
 800e77e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e782:	4288      	cmp	r0, r1
 800e784:	d3f4      	bcc.n	800e770 <L_shift+0xc>
 800e786:	bd70      	pop	{r4, r5, r6, pc}

0800e788 <__match>:
 800e788:	b530      	push	{r4, r5, lr}
 800e78a:	6803      	ldr	r3, [r0, #0]
 800e78c:	3301      	adds	r3, #1
 800e78e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e792:	b914      	cbnz	r4, 800e79a <__match+0x12>
 800e794:	6003      	str	r3, [r0, #0]
 800e796:	2001      	movs	r0, #1
 800e798:	bd30      	pop	{r4, r5, pc}
 800e79a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e79e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e7a2:	2d19      	cmp	r5, #25
 800e7a4:	bf98      	it	ls
 800e7a6:	3220      	addls	r2, #32
 800e7a8:	42a2      	cmp	r2, r4
 800e7aa:	d0f0      	beq.n	800e78e <__match+0x6>
 800e7ac:	2000      	movs	r0, #0
 800e7ae:	e7f3      	b.n	800e798 <__match+0x10>

0800e7b0 <__hexnan>:
 800e7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7b4:	680b      	ldr	r3, [r1, #0]
 800e7b6:	115e      	asrs	r6, r3, #5
 800e7b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e7bc:	f013 031f 	ands.w	r3, r3, #31
 800e7c0:	b087      	sub	sp, #28
 800e7c2:	bf18      	it	ne
 800e7c4:	3604      	addne	r6, #4
 800e7c6:	2500      	movs	r5, #0
 800e7c8:	1f37      	subs	r7, r6, #4
 800e7ca:	4690      	mov	r8, r2
 800e7cc:	6802      	ldr	r2, [r0, #0]
 800e7ce:	9301      	str	r3, [sp, #4]
 800e7d0:	4682      	mov	sl, r0
 800e7d2:	f846 5c04 	str.w	r5, [r6, #-4]
 800e7d6:	46b9      	mov	r9, r7
 800e7d8:	463c      	mov	r4, r7
 800e7da:	9502      	str	r5, [sp, #8]
 800e7dc:	46ab      	mov	fp, r5
 800e7de:	7851      	ldrb	r1, [r2, #1]
 800e7e0:	1c53      	adds	r3, r2, #1
 800e7e2:	9303      	str	r3, [sp, #12]
 800e7e4:	b341      	cbz	r1, 800e838 <__hexnan+0x88>
 800e7e6:	4608      	mov	r0, r1
 800e7e8:	9205      	str	r2, [sp, #20]
 800e7ea:	9104      	str	r1, [sp, #16]
 800e7ec:	f7ff fd5e 	bl	800e2ac <__hexdig_fun>
 800e7f0:	2800      	cmp	r0, #0
 800e7f2:	d14f      	bne.n	800e894 <__hexnan+0xe4>
 800e7f4:	9904      	ldr	r1, [sp, #16]
 800e7f6:	9a05      	ldr	r2, [sp, #20]
 800e7f8:	2920      	cmp	r1, #32
 800e7fa:	d818      	bhi.n	800e82e <__hexnan+0x7e>
 800e7fc:	9b02      	ldr	r3, [sp, #8]
 800e7fe:	459b      	cmp	fp, r3
 800e800:	dd13      	ble.n	800e82a <__hexnan+0x7a>
 800e802:	454c      	cmp	r4, r9
 800e804:	d206      	bcs.n	800e814 <__hexnan+0x64>
 800e806:	2d07      	cmp	r5, #7
 800e808:	dc04      	bgt.n	800e814 <__hexnan+0x64>
 800e80a:	462a      	mov	r2, r5
 800e80c:	4649      	mov	r1, r9
 800e80e:	4620      	mov	r0, r4
 800e810:	f7ff ffa8 	bl	800e764 <L_shift>
 800e814:	4544      	cmp	r4, r8
 800e816:	d950      	bls.n	800e8ba <__hexnan+0x10a>
 800e818:	2300      	movs	r3, #0
 800e81a:	f1a4 0904 	sub.w	r9, r4, #4
 800e81e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e822:	f8cd b008 	str.w	fp, [sp, #8]
 800e826:	464c      	mov	r4, r9
 800e828:	461d      	mov	r5, r3
 800e82a:	9a03      	ldr	r2, [sp, #12]
 800e82c:	e7d7      	b.n	800e7de <__hexnan+0x2e>
 800e82e:	2929      	cmp	r1, #41	; 0x29
 800e830:	d156      	bne.n	800e8e0 <__hexnan+0x130>
 800e832:	3202      	adds	r2, #2
 800e834:	f8ca 2000 	str.w	r2, [sl]
 800e838:	f1bb 0f00 	cmp.w	fp, #0
 800e83c:	d050      	beq.n	800e8e0 <__hexnan+0x130>
 800e83e:	454c      	cmp	r4, r9
 800e840:	d206      	bcs.n	800e850 <__hexnan+0xa0>
 800e842:	2d07      	cmp	r5, #7
 800e844:	dc04      	bgt.n	800e850 <__hexnan+0xa0>
 800e846:	462a      	mov	r2, r5
 800e848:	4649      	mov	r1, r9
 800e84a:	4620      	mov	r0, r4
 800e84c:	f7ff ff8a 	bl	800e764 <L_shift>
 800e850:	4544      	cmp	r4, r8
 800e852:	d934      	bls.n	800e8be <__hexnan+0x10e>
 800e854:	f1a8 0204 	sub.w	r2, r8, #4
 800e858:	4623      	mov	r3, r4
 800e85a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e85e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e862:	429f      	cmp	r7, r3
 800e864:	d2f9      	bcs.n	800e85a <__hexnan+0xaa>
 800e866:	1b3b      	subs	r3, r7, r4
 800e868:	f023 0303 	bic.w	r3, r3, #3
 800e86c:	3304      	adds	r3, #4
 800e86e:	3401      	adds	r4, #1
 800e870:	3e03      	subs	r6, #3
 800e872:	42b4      	cmp	r4, r6
 800e874:	bf88      	it	hi
 800e876:	2304      	movhi	r3, #4
 800e878:	4443      	add	r3, r8
 800e87a:	2200      	movs	r2, #0
 800e87c:	f843 2b04 	str.w	r2, [r3], #4
 800e880:	429f      	cmp	r7, r3
 800e882:	d2fb      	bcs.n	800e87c <__hexnan+0xcc>
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	b91b      	cbnz	r3, 800e890 <__hexnan+0xe0>
 800e888:	4547      	cmp	r7, r8
 800e88a:	d127      	bne.n	800e8dc <__hexnan+0x12c>
 800e88c:	2301      	movs	r3, #1
 800e88e:	603b      	str	r3, [r7, #0]
 800e890:	2005      	movs	r0, #5
 800e892:	e026      	b.n	800e8e2 <__hexnan+0x132>
 800e894:	3501      	adds	r5, #1
 800e896:	2d08      	cmp	r5, #8
 800e898:	f10b 0b01 	add.w	fp, fp, #1
 800e89c:	dd06      	ble.n	800e8ac <__hexnan+0xfc>
 800e89e:	4544      	cmp	r4, r8
 800e8a0:	d9c3      	bls.n	800e82a <__hexnan+0x7a>
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	f844 3c04 	str.w	r3, [r4, #-4]
 800e8a8:	2501      	movs	r5, #1
 800e8aa:	3c04      	subs	r4, #4
 800e8ac:	6822      	ldr	r2, [r4, #0]
 800e8ae:	f000 000f 	and.w	r0, r0, #15
 800e8b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e8b6:	6022      	str	r2, [r4, #0]
 800e8b8:	e7b7      	b.n	800e82a <__hexnan+0x7a>
 800e8ba:	2508      	movs	r5, #8
 800e8bc:	e7b5      	b.n	800e82a <__hexnan+0x7a>
 800e8be:	9b01      	ldr	r3, [sp, #4]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d0df      	beq.n	800e884 <__hexnan+0xd4>
 800e8c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e8c8:	f1c3 0320 	rsb	r3, r3, #32
 800e8cc:	fa22 f303 	lsr.w	r3, r2, r3
 800e8d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e8d4:	401a      	ands	r2, r3
 800e8d6:	f846 2c04 	str.w	r2, [r6, #-4]
 800e8da:	e7d3      	b.n	800e884 <__hexnan+0xd4>
 800e8dc:	3f04      	subs	r7, #4
 800e8de:	e7d1      	b.n	800e884 <__hexnan+0xd4>
 800e8e0:	2004      	movs	r0, #4
 800e8e2:	b007      	add	sp, #28
 800e8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e8e8 <_localeconv_r>:
 800e8e8:	4800      	ldr	r0, [pc, #0]	; (800e8ec <_localeconv_r+0x4>)
 800e8ea:	4770      	bx	lr
 800e8ec:	2000018c 	.word	0x2000018c

0800e8f0 <__ascii_mbtowc>:
 800e8f0:	b082      	sub	sp, #8
 800e8f2:	b901      	cbnz	r1, 800e8f6 <__ascii_mbtowc+0x6>
 800e8f4:	a901      	add	r1, sp, #4
 800e8f6:	b142      	cbz	r2, 800e90a <__ascii_mbtowc+0x1a>
 800e8f8:	b14b      	cbz	r3, 800e90e <__ascii_mbtowc+0x1e>
 800e8fa:	7813      	ldrb	r3, [r2, #0]
 800e8fc:	600b      	str	r3, [r1, #0]
 800e8fe:	7812      	ldrb	r2, [r2, #0]
 800e900:	1e10      	subs	r0, r2, #0
 800e902:	bf18      	it	ne
 800e904:	2001      	movne	r0, #1
 800e906:	b002      	add	sp, #8
 800e908:	4770      	bx	lr
 800e90a:	4610      	mov	r0, r2
 800e90c:	e7fb      	b.n	800e906 <__ascii_mbtowc+0x16>
 800e90e:	f06f 0001 	mvn.w	r0, #1
 800e912:	e7f8      	b.n	800e906 <__ascii_mbtowc+0x16>

0800e914 <memcpy>:
 800e914:	440a      	add	r2, r1
 800e916:	4291      	cmp	r1, r2
 800e918:	f100 33ff 	add.w	r3, r0, #4294967295
 800e91c:	d100      	bne.n	800e920 <memcpy+0xc>
 800e91e:	4770      	bx	lr
 800e920:	b510      	push	{r4, lr}
 800e922:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e926:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e92a:	4291      	cmp	r1, r2
 800e92c:	d1f9      	bne.n	800e922 <memcpy+0xe>
 800e92e:	bd10      	pop	{r4, pc}

0800e930 <__malloc_lock>:
 800e930:	4801      	ldr	r0, [pc, #4]	; (800e938 <__malloc_lock+0x8>)
 800e932:	f001 ba3f 	b.w	800fdb4 <__retarget_lock_acquire_recursive>
 800e936:	bf00      	nop
 800e938:	20002aa8 	.word	0x20002aa8

0800e93c <__malloc_unlock>:
 800e93c:	4801      	ldr	r0, [pc, #4]	; (800e944 <__malloc_unlock+0x8>)
 800e93e:	f001 ba3a 	b.w	800fdb6 <__retarget_lock_release_recursive>
 800e942:	bf00      	nop
 800e944:	20002aa8 	.word	0x20002aa8

0800e948 <_Balloc>:
 800e948:	b570      	push	{r4, r5, r6, lr}
 800e94a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e94c:	4604      	mov	r4, r0
 800e94e:	460d      	mov	r5, r1
 800e950:	b976      	cbnz	r6, 800e970 <_Balloc+0x28>
 800e952:	2010      	movs	r0, #16
 800e954:	f7fc fe80 	bl	800b658 <malloc>
 800e958:	4602      	mov	r2, r0
 800e95a:	6260      	str	r0, [r4, #36]	; 0x24
 800e95c:	b920      	cbnz	r0, 800e968 <_Balloc+0x20>
 800e95e:	4b18      	ldr	r3, [pc, #96]	; (800e9c0 <_Balloc+0x78>)
 800e960:	4818      	ldr	r0, [pc, #96]	; (800e9c4 <_Balloc+0x7c>)
 800e962:	2166      	movs	r1, #102	; 0x66
 800e964:	f7fe fda4 	bl	800d4b0 <__assert_func>
 800e968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e96c:	6006      	str	r6, [r0, #0]
 800e96e:	60c6      	str	r6, [r0, #12]
 800e970:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e972:	68f3      	ldr	r3, [r6, #12]
 800e974:	b183      	cbz	r3, 800e998 <_Balloc+0x50>
 800e976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e978:	68db      	ldr	r3, [r3, #12]
 800e97a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e97e:	b9b8      	cbnz	r0, 800e9b0 <_Balloc+0x68>
 800e980:	2101      	movs	r1, #1
 800e982:	fa01 f605 	lsl.w	r6, r1, r5
 800e986:	1d72      	adds	r2, r6, #5
 800e988:	0092      	lsls	r2, r2, #2
 800e98a:	4620      	mov	r0, r4
 800e98c:	f000 fc9d 	bl	800f2ca <_calloc_r>
 800e990:	b160      	cbz	r0, 800e9ac <_Balloc+0x64>
 800e992:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e996:	e00e      	b.n	800e9b6 <_Balloc+0x6e>
 800e998:	2221      	movs	r2, #33	; 0x21
 800e99a:	2104      	movs	r1, #4
 800e99c:	4620      	mov	r0, r4
 800e99e:	f000 fc94 	bl	800f2ca <_calloc_r>
 800e9a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e9a4:	60f0      	str	r0, [r6, #12]
 800e9a6:	68db      	ldr	r3, [r3, #12]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d1e4      	bne.n	800e976 <_Balloc+0x2e>
 800e9ac:	2000      	movs	r0, #0
 800e9ae:	bd70      	pop	{r4, r5, r6, pc}
 800e9b0:	6802      	ldr	r2, [r0, #0]
 800e9b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e9bc:	e7f7      	b.n	800e9ae <_Balloc+0x66>
 800e9be:	bf00      	nop
 800e9c0:	08010648 	.word	0x08010648
 800e9c4:	08010910 	.word	0x08010910

0800e9c8 <_Bfree>:
 800e9c8:	b570      	push	{r4, r5, r6, lr}
 800e9ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e9cc:	4605      	mov	r5, r0
 800e9ce:	460c      	mov	r4, r1
 800e9d0:	b976      	cbnz	r6, 800e9f0 <_Bfree+0x28>
 800e9d2:	2010      	movs	r0, #16
 800e9d4:	f7fc fe40 	bl	800b658 <malloc>
 800e9d8:	4602      	mov	r2, r0
 800e9da:	6268      	str	r0, [r5, #36]	; 0x24
 800e9dc:	b920      	cbnz	r0, 800e9e8 <_Bfree+0x20>
 800e9de:	4b09      	ldr	r3, [pc, #36]	; (800ea04 <_Bfree+0x3c>)
 800e9e0:	4809      	ldr	r0, [pc, #36]	; (800ea08 <_Bfree+0x40>)
 800e9e2:	218a      	movs	r1, #138	; 0x8a
 800e9e4:	f7fe fd64 	bl	800d4b0 <__assert_func>
 800e9e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e9ec:	6006      	str	r6, [r0, #0]
 800e9ee:	60c6      	str	r6, [r0, #12]
 800e9f0:	b13c      	cbz	r4, 800ea02 <_Bfree+0x3a>
 800e9f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e9f4:	6862      	ldr	r2, [r4, #4]
 800e9f6:	68db      	ldr	r3, [r3, #12]
 800e9f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e9fc:	6021      	str	r1, [r4, #0]
 800e9fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ea02:	bd70      	pop	{r4, r5, r6, pc}
 800ea04:	08010648 	.word	0x08010648
 800ea08:	08010910 	.word	0x08010910

0800ea0c <__multadd>:
 800ea0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea10:	690d      	ldr	r5, [r1, #16]
 800ea12:	4607      	mov	r7, r0
 800ea14:	460c      	mov	r4, r1
 800ea16:	461e      	mov	r6, r3
 800ea18:	f101 0c14 	add.w	ip, r1, #20
 800ea1c:	2000      	movs	r0, #0
 800ea1e:	f8dc 3000 	ldr.w	r3, [ip]
 800ea22:	b299      	uxth	r1, r3
 800ea24:	fb02 6101 	mla	r1, r2, r1, r6
 800ea28:	0c1e      	lsrs	r6, r3, #16
 800ea2a:	0c0b      	lsrs	r3, r1, #16
 800ea2c:	fb02 3306 	mla	r3, r2, r6, r3
 800ea30:	b289      	uxth	r1, r1
 800ea32:	3001      	adds	r0, #1
 800ea34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ea38:	4285      	cmp	r5, r0
 800ea3a:	f84c 1b04 	str.w	r1, [ip], #4
 800ea3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ea42:	dcec      	bgt.n	800ea1e <__multadd+0x12>
 800ea44:	b30e      	cbz	r6, 800ea8a <__multadd+0x7e>
 800ea46:	68a3      	ldr	r3, [r4, #8]
 800ea48:	42ab      	cmp	r3, r5
 800ea4a:	dc19      	bgt.n	800ea80 <__multadd+0x74>
 800ea4c:	6861      	ldr	r1, [r4, #4]
 800ea4e:	4638      	mov	r0, r7
 800ea50:	3101      	adds	r1, #1
 800ea52:	f7ff ff79 	bl	800e948 <_Balloc>
 800ea56:	4680      	mov	r8, r0
 800ea58:	b928      	cbnz	r0, 800ea66 <__multadd+0x5a>
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	4b0c      	ldr	r3, [pc, #48]	; (800ea90 <__multadd+0x84>)
 800ea5e:	480d      	ldr	r0, [pc, #52]	; (800ea94 <__multadd+0x88>)
 800ea60:	21b5      	movs	r1, #181	; 0xb5
 800ea62:	f7fe fd25 	bl	800d4b0 <__assert_func>
 800ea66:	6922      	ldr	r2, [r4, #16]
 800ea68:	3202      	adds	r2, #2
 800ea6a:	f104 010c 	add.w	r1, r4, #12
 800ea6e:	0092      	lsls	r2, r2, #2
 800ea70:	300c      	adds	r0, #12
 800ea72:	f7ff ff4f 	bl	800e914 <memcpy>
 800ea76:	4621      	mov	r1, r4
 800ea78:	4638      	mov	r0, r7
 800ea7a:	f7ff ffa5 	bl	800e9c8 <_Bfree>
 800ea7e:	4644      	mov	r4, r8
 800ea80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ea84:	3501      	adds	r5, #1
 800ea86:	615e      	str	r6, [r3, #20]
 800ea88:	6125      	str	r5, [r4, #16]
 800ea8a:	4620      	mov	r0, r4
 800ea8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea90:	08010886 	.word	0x08010886
 800ea94:	08010910 	.word	0x08010910

0800ea98 <__s2b>:
 800ea98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea9c:	460c      	mov	r4, r1
 800ea9e:	4615      	mov	r5, r2
 800eaa0:	461f      	mov	r7, r3
 800eaa2:	2209      	movs	r2, #9
 800eaa4:	3308      	adds	r3, #8
 800eaa6:	4606      	mov	r6, r0
 800eaa8:	fb93 f3f2 	sdiv	r3, r3, r2
 800eaac:	2100      	movs	r1, #0
 800eaae:	2201      	movs	r2, #1
 800eab0:	429a      	cmp	r2, r3
 800eab2:	db09      	blt.n	800eac8 <__s2b+0x30>
 800eab4:	4630      	mov	r0, r6
 800eab6:	f7ff ff47 	bl	800e948 <_Balloc>
 800eaba:	b940      	cbnz	r0, 800eace <__s2b+0x36>
 800eabc:	4602      	mov	r2, r0
 800eabe:	4b19      	ldr	r3, [pc, #100]	; (800eb24 <__s2b+0x8c>)
 800eac0:	4819      	ldr	r0, [pc, #100]	; (800eb28 <__s2b+0x90>)
 800eac2:	21ce      	movs	r1, #206	; 0xce
 800eac4:	f7fe fcf4 	bl	800d4b0 <__assert_func>
 800eac8:	0052      	lsls	r2, r2, #1
 800eaca:	3101      	adds	r1, #1
 800eacc:	e7f0      	b.n	800eab0 <__s2b+0x18>
 800eace:	9b08      	ldr	r3, [sp, #32]
 800ead0:	6143      	str	r3, [r0, #20]
 800ead2:	2d09      	cmp	r5, #9
 800ead4:	f04f 0301 	mov.w	r3, #1
 800ead8:	6103      	str	r3, [r0, #16]
 800eada:	dd16      	ble.n	800eb0a <__s2b+0x72>
 800eadc:	f104 0909 	add.w	r9, r4, #9
 800eae0:	46c8      	mov	r8, r9
 800eae2:	442c      	add	r4, r5
 800eae4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800eae8:	4601      	mov	r1, r0
 800eaea:	3b30      	subs	r3, #48	; 0x30
 800eaec:	220a      	movs	r2, #10
 800eaee:	4630      	mov	r0, r6
 800eaf0:	f7ff ff8c 	bl	800ea0c <__multadd>
 800eaf4:	45a0      	cmp	r8, r4
 800eaf6:	d1f5      	bne.n	800eae4 <__s2b+0x4c>
 800eaf8:	f1a5 0408 	sub.w	r4, r5, #8
 800eafc:	444c      	add	r4, r9
 800eafe:	1b2d      	subs	r5, r5, r4
 800eb00:	1963      	adds	r3, r4, r5
 800eb02:	42bb      	cmp	r3, r7
 800eb04:	db04      	blt.n	800eb10 <__s2b+0x78>
 800eb06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb0a:	340a      	adds	r4, #10
 800eb0c:	2509      	movs	r5, #9
 800eb0e:	e7f6      	b.n	800eafe <__s2b+0x66>
 800eb10:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eb14:	4601      	mov	r1, r0
 800eb16:	3b30      	subs	r3, #48	; 0x30
 800eb18:	220a      	movs	r2, #10
 800eb1a:	4630      	mov	r0, r6
 800eb1c:	f7ff ff76 	bl	800ea0c <__multadd>
 800eb20:	e7ee      	b.n	800eb00 <__s2b+0x68>
 800eb22:	bf00      	nop
 800eb24:	08010886 	.word	0x08010886
 800eb28:	08010910 	.word	0x08010910

0800eb2c <__hi0bits>:
 800eb2c:	0c03      	lsrs	r3, r0, #16
 800eb2e:	041b      	lsls	r3, r3, #16
 800eb30:	b9d3      	cbnz	r3, 800eb68 <__hi0bits+0x3c>
 800eb32:	0400      	lsls	r0, r0, #16
 800eb34:	2310      	movs	r3, #16
 800eb36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800eb3a:	bf04      	itt	eq
 800eb3c:	0200      	lsleq	r0, r0, #8
 800eb3e:	3308      	addeq	r3, #8
 800eb40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800eb44:	bf04      	itt	eq
 800eb46:	0100      	lsleq	r0, r0, #4
 800eb48:	3304      	addeq	r3, #4
 800eb4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800eb4e:	bf04      	itt	eq
 800eb50:	0080      	lsleq	r0, r0, #2
 800eb52:	3302      	addeq	r3, #2
 800eb54:	2800      	cmp	r0, #0
 800eb56:	db05      	blt.n	800eb64 <__hi0bits+0x38>
 800eb58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800eb5c:	f103 0301 	add.w	r3, r3, #1
 800eb60:	bf08      	it	eq
 800eb62:	2320      	moveq	r3, #32
 800eb64:	4618      	mov	r0, r3
 800eb66:	4770      	bx	lr
 800eb68:	2300      	movs	r3, #0
 800eb6a:	e7e4      	b.n	800eb36 <__hi0bits+0xa>

0800eb6c <__lo0bits>:
 800eb6c:	6803      	ldr	r3, [r0, #0]
 800eb6e:	f013 0207 	ands.w	r2, r3, #7
 800eb72:	4601      	mov	r1, r0
 800eb74:	d00b      	beq.n	800eb8e <__lo0bits+0x22>
 800eb76:	07da      	lsls	r2, r3, #31
 800eb78:	d423      	bmi.n	800ebc2 <__lo0bits+0x56>
 800eb7a:	0798      	lsls	r0, r3, #30
 800eb7c:	bf49      	itett	mi
 800eb7e:	085b      	lsrmi	r3, r3, #1
 800eb80:	089b      	lsrpl	r3, r3, #2
 800eb82:	2001      	movmi	r0, #1
 800eb84:	600b      	strmi	r3, [r1, #0]
 800eb86:	bf5c      	itt	pl
 800eb88:	600b      	strpl	r3, [r1, #0]
 800eb8a:	2002      	movpl	r0, #2
 800eb8c:	4770      	bx	lr
 800eb8e:	b298      	uxth	r0, r3
 800eb90:	b9a8      	cbnz	r0, 800ebbe <__lo0bits+0x52>
 800eb92:	0c1b      	lsrs	r3, r3, #16
 800eb94:	2010      	movs	r0, #16
 800eb96:	b2da      	uxtb	r2, r3
 800eb98:	b90a      	cbnz	r2, 800eb9e <__lo0bits+0x32>
 800eb9a:	3008      	adds	r0, #8
 800eb9c:	0a1b      	lsrs	r3, r3, #8
 800eb9e:	071a      	lsls	r2, r3, #28
 800eba0:	bf04      	itt	eq
 800eba2:	091b      	lsreq	r3, r3, #4
 800eba4:	3004      	addeq	r0, #4
 800eba6:	079a      	lsls	r2, r3, #30
 800eba8:	bf04      	itt	eq
 800ebaa:	089b      	lsreq	r3, r3, #2
 800ebac:	3002      	addeq	r0, #2
 800ebae:	07da      	lsls	r2, r3, #31
 800ebb0:	d403      	bmi.n	800ebba <__lo0bits+0x4e>
 800ebb2:	085b      	lsrs	r3, r3, #1
 800ebb4:	f100 0001 	add.w	r0, r0, #1
 800ebb8:	d005      	beq.n	800ebc6 <__lo0bits+0x5a>
 800ebba:	600b      	str	r3, [r1, #0]
 800ebbc:	4770      	bx	lr
 800ebbe:	4610      	mov	r0, r2
 800ebc0:	e7e9      	b.n	800eb96 <__lo0bits+0x2a>
 800ebc2:	2000      	movs	r0, #0
 800ebc4:	4770      	bx	lr
 800ebc6:	2020      	movs	r0, #32
 800ebc8:	4770      	bx	lr
	...

0800ebcc <__i2b>:
 800ebcc:	b510      	push	{r4, lr}
 800ebce:	460c      	mov	r4, r1
 800ebd0:	2101      	movs	r1, #1
 800ebd2:	f7ff feb9 	bl	800e948 <_Balloc>
 800ebd6:	4602      	mov	r2, r0
 800ebd8:	b928      	cbnz	r0, 800ebe6 <__i2b+0x1a>
 800ebda:	4b05      	ldr	r3, [pc, #20]	; (800ebf0 <__i2b+0x24>)
 800ebdc:	4805      	ldr	r0, [pc, #20]	; (800ebf4 <__i2b+0x28>)
 800ebde:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ebe2:	f7fe fc65 	bl	800d4b0 <__assert_func>
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	6144      	str	r4, [r0, #20]
 800ebea:	6103      	str	r3, [r0, #16]
 800ebec:	bd10      	pop	{r4, pc}
 800ebee:	bf00      	nop
 800ebf0:	08010886 	.word	0x08010886
 800ebf4:	08010910 	.word	0x08010910

0800ebf8 <__multiply>:
 800ebf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebfc:	4691      	mov	r9, r2
 800ebfe:	690a      	ldr	r2, [r1, #16]
 800ec00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ec04:	429a      	cmp	r2, r3
 800ec06:	bfb8      	it	lt
 800ec08:	460b      	movlt	r3, r1
 800ec0a:	460c      	mov	r4, r1
 800ec0c:	bfbc      	itt	lt
 800ec0e:	464c      	movlt	r4, r9
 800ec10:	4699      	movlt	r9, r3
 800ec12:	6927      	ldr	r7, [r4, #16]
 800ec14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ec18:	68a3      	ldr	r3, [r4, #8]
 800ec1a:	6861      	ldr	r1, [r4, #4]
 800ec1c:	eb07 060a 	add.w	r6, r7, sl
 800ec20:	42b3      	cmp	r3, r6
 800ec22:	b085      	sub	sp, #20
 800ec24:	bfb8      	it	lt
 800ec26:	3101      	addlt	r1, #1
 800ec28:	f7ff fe8e 	bl	800e948 <_Balloc>
 800ec2c:	b930      	cbnz	r0, 800ec3c <__multiply+0x44>
 800ec2e:	4602      	mov	r2, r0
 800ec30:	4b44      	ldr	r3, [pc, #272]	; (800ed44 <__multiply+0x14c>)
 800ec32:	4845      	ldr	r0, [pc, #276]	; (800ed48 <__multiply+0x150>)
 800ec34:	f240 115d 	movw	r1, #349	; 0x15d
 800ec38:	f7fe fc3a 	bl	800d4b0 <__assert_func>
 800ec3c:	f100 0514 	add.w	r5, r0, #20
 800ec40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ec44:	462b      	mov	r3, r5
 800ec46:	2200      	movs	r2, #0
 800ec48:	4543      	cmp	r3, r8
 800ec4a:	d321      	bcc.n	800ec90 <__multiply+0x98>
 800ec4c:	f104 0314 	add.w	r3, r4, #20
 800ec50:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ec54:	f109 0314 	add.w	r3, r9, #20
 800ec58:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ec5c:	9202      	str	r2, [sp, #8]
 800ec5e:	1b3a      	subs	r2, r7, r4
 800ec60:	3a15      	subs	r2, #21
 800ec62:	f022 0203 	bic.w	r2, r2, #3
 800ec66:	3204      	adds	r2, #4
 800ec68:	f104 0115 	add.w	r1, r4, #21
 800ec6c:	428f      	cmp	r7, r1
 800ec6e:	bf38      	it	cc
 800ec70:	2204      	movcc	r2, #4
 800ec72:	9201      	str	r2, [sp, #4]
 800ec74:	9a02      	ldr	r2, [sp, #8]
 800ec76:	9303      	str	r3, [sp, #12]
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d80c      	bhi.n	800ec96 <__multiply+0x9e>
 800ec7c:	2e00      	cmp	r6, #0
 800ec7e:	dd03      	ble.n	800ec88 <__multiply+0x90>
 800ec80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d05a      	beq.n	800ed3e <__multiply+0x146>
 800ec88:	6106      	str	r6, [r0, #16]
 800ec8a:	b005      	add	sp, #20
 800ec8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec90:	f843 2b04 	str.w	r2, [r3], #4
 800ec94:	e7d8      	b.n	800ec48 <__multiply+0x50>
 800ec96:	f8b3 a000 	ldrh.w	sl, [r3]
 800ec9a:	f1ba 0f00 	cmp.w	sl, #0
 800ec9e:	d024      	beq.n	800ecea <__multiply+0xf2>
 800eca0:	f104 0e14 	add.w	lr, r4, #20
 800eca4:	46a9      	mov	r9, r5
 800eca6:	f04f 0c00 	mov.w	ip, #0
 800ecaa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ecae:	f8d9 1000 	ldr.w	r1, [r9]
 800ecb2:	fa1f fb82 	uxth.w	fp, r2
 800ecb6:	b289      	uxth	r1, r1
 800ecb8:	fb0a 110b 	mla	r1, sl, fp, r1
 800ecbc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ecc0:	f8d9 2000 	ldr.w	r2, [r9]
 800ecc4:	4461      	add	r1, ip
 800ecc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ecca:	fb0a c20b 	mla	r2, sl, fp, ip
 800ecce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ecd2:	b289      	uxth	r1, r1
 800ecd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ecd8:	4577      	cmp	r7, lr
 800ecda:	f849 1b04 	str.w	r1, [r9], #4
 800ecde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ece2:	d8e2      	bhi.n	800ecaa <__multiply+0xb2>
 800ece4:	9a01      	ldr	r2, [sp, #4]
 800ece6:	f845 c002 	str.w	ip, [r5, r2]
 800ecea:	9a03      	ldr	r2, [sp, #12]
 800ecec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ecf0:	3304      	adds	r3, #4
 800ecf2:	f1b9 0f00 	cmp.w	r9, #0
 800ecf6:	d020      	beq.n	800ed3a <__multiply+0x142>
 800ecf8:	6829      	ldr	r1, [r5, #0]
 800ecfa:	f104 0c14 	add.w	ip, r4, #20
 800ecfe:	46ae      	mov	lr, r5
 800ed00:	f04f 0a00 	mov.w	sl, #0
 800ed04:	f8bc b000 	ldrh.w	fp, [ip]
 800ed08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ed0c:	fb09 220b 	mla	r2, r9, fp, r2
 800ed10:	4492      	add	sl, r2
 800ed12:	b289      	uxth	r1, r1
 800ed14:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ed18:	f84e 1b04 	str.w	r1, [lr], #4
 800ed1c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ed20:	f8be 1000 	ldrh.w	r1, [lr]
 800ed24:	0c12      	lsrs	r2, r2, #16
 800ed26:	fb09 1102 	mla	r1, r9, r2, r1
 800ed2a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ed2e:	4567      	cmp	r7, ip
 800ed30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ed34:	d8e6      	bhi.n	800ed04 <__multiply+0x10c>
 800ed36:	9a01      	ldr	r2, [sp, #4]
 800ed38:	50a9      	str	r1, [r5, r2]
 800ed3a:	3504      	adds	r5, #4
 800ed3c:	e79a      	b.n	800ec74 <__multiply+0x7c>
 800ed3e:	3e01      	subs	r6, #1
 800ed40:	e79c      	b.n	800ec7c <__multiply+0x84>
 800ed42:	bf00      	nop
 800ed44:	08010886 	.word	0x08010886
 800ed48:	08010910 	.word	0x08010910

0800ed4c <__pow5mult>:
 800ed4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed50:	4615      	mov	r5, r2
 800ed52:	f012 0203 	ands.w	r2, r2, #3
 800ed56:	4606      	mov	r6, r0
 800ed58:	460f      	mov	r7, r1
 800ed5a:	d007      	beq.n	800ed6c <__pow5mult+0x20>
 800ed5c:	4c25      	ldr	r4, [pc, #148]	; (800edf4 <__pow5mult+0xa8>)
 800ed5e:	3a01      	subs	r2, #1
 800ed60:	2300      	movs	r3, #0
 800ed62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ed66:	f7ff fe51 	bl	800ea0c <__multadd>
 800ed6a:	4607      	mov	r7, r0
 800ed6c:	10ad      	asrs	r5, r5, #2
 800ed6e:	d03d      	beq.n	800edec <__pow5mult+0xa0>
 800ed70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ed72:	b97c      	cbnz	r4, 800ed94 <__pow5mult+0x48>
 800ed74:	2010      	movs	r0, #16
 800ed76:	f7fc fc6f 	bl	800b658 <malloc>
 800ed7a:	4602      	mov	r2, r0
 800ed7c:	6270      	str	r0, [r6, #36]	; 0x24
 800ed7e:	b928      	cbnz	r0, 800ed8c <__pow5mult+0x40>
 800ed80:	4b1d      	ldr	r3, [pc, #116]	; (800edf8 <__pow5mult+0xac>)
 800ed82:	481e      	ldr	r0, [pc, #120]	; (800edfc <__pow5mult+0xb0>)
 800ed84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ed88:	f7fe fb92 	bl	800d4b0 <__assert_func>
 800ed8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ed90:	6004      	str	r4, [r0, #0]
 800ed92:	60c4      	str	r4, [r0, #12]
 800ed94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ed98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ed9c:	b94c      	cbnz	r4, 800edb2 <__pow5mult+0x66>
 800ed9e:	f240 2171 	movw	r1, #625	; 0x271
 800eda2:	4630      	mov	r0, r6
 800eda4:	f7ff ff12 	bl	800ebcc <__i2b>
 800eda8:	2300      	movs	r3, #0
 800edaa:	f8c8 0008 	str.w	r0, [r8, #8]
 800edae:	4604      	mov	r4, r0
 800edb0:	6003      	str	r3, [r0, #0]
 800edb2:	f04f 0900 	mov.w	r9, #0
 800edb6:	07eb      	lsls	r3, r5, #31
 800edb8:	d50a      	bpl.n	800edd0 <__pow5mult+0x84>
 800edba:	4639      	mov	r1, r7
 800edbc:	4622      	mov	r2, r4
 800edbe:	4630      	mov	r0, r6
 800edc0:	f7ff ff1a 	bl	800ebf8 <__multiply>
 800edc4:	4639      	mov	r1, r7
 800edc6:	4680      	mov	r8, r0
 800edc8:	4630      	mov	r0, r6
 800edca:	f7ff fdfd 	bl	800e9c8 <_Bfree>
 800edce:	4647      	mov	r7, r8
 800edd0:	106d      	asrs	r5, r5, #1
 800edd2:	d00b      	beq.n	800edec <__pow5mult+0xa0>
 800edd4:	6820      	ldr	r0, [r4, #0]
 800edd6:	b938      	cbnz	r0, 800ede8 <__pow5mult+0x9c>
 800edd8:	4622      	mov	r2, r4
 800edda:	4621      	mov	r1, r4
 800eddc:	4630      	mov	r0, r6
 800edde:	f7ff ff0b 	bl	800ebf8 <__multiply>
 800ede2:	6020      	str	r0, [r4, #0]
 800ede4:	f8c0 9000 	str.w	r9, [r0]
 800ede8:	4604      	mov	r4, r0
 800edea:	e7e4      	b.n	800edb6 <__pow5mult+0x6a>
 800edec:	4638      	mov	r0, r7
 800edee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edf2:	bf00      	nop
 800edf4:	08010a60 	.word	0x08010a60
 800edf8:	08010648 	.word	0x08010648
 800edfc:	08010910 	.word	0x08010910

0800ee00 <__lshift>:
 800ee00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee04:	460c      	mov	r4, r1
 800ee06:	6849      	ldr	r1, [r1, #4]
 800ee08:	6923      	ldr	r3, [r4, #16]
 800ee0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ee0e:	68a3      	ldr	r3, [r4, #8]
 800ee10:	4607      	mov	r7, r0
 800ee12:	4691      	mov	r9, r2
 800ee14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ee18:	f108 0601 	add.w	r6, r8, #1
 800ee1c:	42b3      	cmp	r3, r6
 800ee1e:	db0b      	blt.n	800ee38 <__lshift+0x38>
 800ee20:	4638      	mov	r0, r7
 800ee22:	f7ff fd91 	bl	800e948 <_Balloc>
 800ee26:	4605      	mov	r5, r0
 800ee28:	b948      	cbnz	r0, 800ee3e <__lshift+0x3e>
 800ee2a:	4602      	mov	r2, r0
 800ee2c:	4b2a      	ldr	r3, [pc, #168]	; (800eed8 <__lshift+0xd8>)
 800ee2e:	482b      	ldr	r0, [pc, #172]	; (800eedc <__lshift+0xdc>)
 800ee30:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ee34:	f7fe fb3c 	bl	800d4b0 <__assert_func>
 800ee38:	3101      	adds	r1, #1
 800ee3a:	005b      	lsls	r3, r3, #1
 800ee3c:	e7ee      	b.n	800ee1c <__lshift+0x1c>
 800ee3e:	2300      	movs	r3, #0
 800ee40:	f100 0114 	add.w	r1, r0, #20
 800ee44:	f100 0210 	add.w	r2, r0, #16
 800ee48:	4618      	mov	r0, r3
 800ee4a:	4553      	cmp	r3, sl
 800ee4c:	db37      	blt.n	800eebe <__lshift+0xbe>
 800ee4e:	6920      	ldr	r0, [r4, #16]
 800ee50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ee54:	f104 0314 	add.w	r3, r4, #20
 800ee58:	f019 091f 	ands.w	r9, r9, #31
 800ee5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ee60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ee64:	d02f      	beq.n	800eec6 <__lshift+0xc6>
 800ee66:	f1c9 0e20 	rsb	lr, r9, #32
 800ee6a:	468a      	mov	sl, r1
 800ee6c:	f04f 0c00 	mov.w	ip, #0
 800ee70:	681a      	ldr	r2, [r3, #0]
 800ee72:	fa02 f209 	lsl.w	r2, r2, r9
 800ee76:	ea42 020c 	orr.w	r2, r2, ip
 800ee7a:	f84a 2b04 	str.w	r2, [sl], #4
 800ee7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee82:	4298      	cmp	r0, r3
 800ee84:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ee88:	d8f2      	bhi.n	800ee70 <__lshift+0x70>
 800ee8a:	1b03      	subs	r3, r0, r4
 800ee8c:	3b15      	subs	r3, #21
 800ee8e:	f023 0303 	bic.w	r3, r3, #3
 800ee92:	3304      	adds	r3, #4
 800ee94:	f104 0215 	add.w	r2, r4, #21
 800ee98:	4290      	cmp	r0, r2
 800ee9a:	bf38      	it	cc
 800ee9c:	2304      	movcc	r3, #4
 800ee9e:	f841 c003 	str.w	ip, [r1, r3]
 800eea2:	f1bc 0f00 	cmp.w	ip, #0
 800eea6:	d001      	beq.n	800eeac <__lshift+0xac>
 800eea8:	f108 0602 	add.w	r6, r8, #2
 800eeac:	3e01      	subs	r6, #1
 800eeae:	4638      	mov	r0, r7
 800eeb0:	612e      	str	r6, [r5, #16]
 800eeb2:	4621      	mov	r1, r4
 800eeb4:	f7ff fd88 	bl	800e9c8 <_Bfree>
 800eeb8:	4628      	mov	r0, r5
 800eeba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eebe:	f842 0f04 	str.w	r0, [r2, #4]!
 800eec2:	3301      	adds	r3, #1
 800eec4:	e7c1      	b.n	800ee4a <__lshift+0x4a>
 800eec6:	3904      	subs	r1, #4
 800eec8:	f853 2b04 	ldr.w	r2, [r3], #4
 800eecc:	f841 2f04 	str.w	r2, [r1, #4]!
 800eed0:	4298      	cmp	r0, r3
 800eed2:	d8f9      	bhi.n	800eec8 <__lshift+0xc8>
 800eed4:	e7ea      	b.n	800eeac <__lshift+0xac>
 800eed6:	bf00      	nop
 800eed8:	08010886 	.word	0x08010886
 800eedc:	08010910 	.word	0x08010910

0800eee0 <__mcmp>:
 800eee0:	b530      	push	{r4, r5, lr}
 800eee2:	6902      	ldr	r2, [r0, #16]
 800eee4:	690c      	ldr	r4, [r1, #16]
 800eee6:	1b12      	subs	r2, r2, r4
 800eee8:	d10e      	bne.n	800ef08 <__mcmp+0x28>
 800eeea:	f100 0314 	add.w	r3, r0, #20
 800eeee:	3114      	adds	r1, #20
 800eef0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eef4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eef8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eefc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ef00:	42a5      	cmp	r5, r4
 800ef02:	d003      	beq.n	800ef0c <__mcmp+0x2c>
 800ef04:	d305      	bcc.n	800ef12 <__mcmp+0x32>
 800ef06:	2201      	movs	r2, #1
 800ef08:	4610      	mov	r0, r2
 800ef0a:	bd30      	pop	{r4, r5, pc}
 800ef0c:	4283      	cmp	r3, r0
 800ef0e:	d3f3      	bcc.n	800eef8 <__mcmp+0x18>
 800ef10:	e7fa      	b.n	800ef08 <__mcmp+0x28>
 800ef12:	f04f 32ff 	mov.w	r2, #4294967295
 800ef16:	e7f7      	b.n	800ef08 <__mcmp+0x28>

0800ef18 <__mdiff>:
 800ef18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef1c:	460c      	mov	r4, r1
 800ef1e:	4606      	mov	r6, r0
 800ef20:	4611      	mov	r1, r2
 800ef22:	4620      	mov	r0, r4
 800ef24:	4690      	mov	r8, r2
 800ef26:	f7ff ffdb 	bl	800eee0 <__mcmp>
 800ef2a:	1e05      	subs	r5, r0, #0
 800ef2c:	d110      	bne.n	800ef50 <__mdiff+0x38>
 800ef2e:	4629      	mov	r1, r5
 800ef30:	4630      	mov	r0, r6
 800ef32:	f7ff fd09 	bl	800e948 <_Balloc>
 800ef36:	b930      	cbnz	r0, 800ef46 <__mdiff+0x2e>
 800ef38:	4b3a      	ldr	r3, [pc, #232]	; (800f024 <__mdiff+0x10c>)
 800ef3a:	4602      	mov	r2, r0
 800ef3c:	f240 2132 	movw	r1, #562	; 0x232
 800ef40:	4839      	ldr	r0, [pc, #228]	; (800f028 <__mdiff+0x110>)
 800ef42:	f7fe fab5 	bl	800d4b0 <__assert_func>
 800ef46:	2301      	movs	r3, #1
 800ef48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ef4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef50:	bfa4      	itt	ge
 800ef52:	4643      	movge	r3, r8
 800ef54:	46a0      	movge	r8, r4
 800ef56:	4630      	mov	r0, r6
 800ef58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ef5c:	bfa6      	itte	ge
 800ef5e:	461c      	movge	r4, r3
 800ef60:	2500      	movge	r5, #0
 800ef62:	2501      	movlt	r5, #1
 800ef64:	f7ff fcf0 	bl	800e948 <_Balloc>
 800ef68:	b920      	cbnz	r0, 800ef74 <__mdiff+0x5c>
 800ef6a:	4b2e      	ldr	r3, [pc, #184]	; (800f024 <__mdiff+0x10c>)
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ef72:	e7e5      	b.n	800ef40 <__mdiff+0x28>
 800ef74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ef78:	6926      	ldr	r6, [r4, #16]
 800ef7a:	60c5      	str	r5, [r0, #12]
 800ef7c:	f104 0914 	add.w	r9, r4, #20
 800ef80:	f108 0514 	add.w	r5, r8, #20
 800ef84:	f100 0e14 	add.w	lr, r0, #20
 800ef88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ef8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ef90:	f108 0210 	add.w	r2, r8, #16
 800ef94:	46f2      	mov	sl, lr
 800ef96:	2100      	movs	r1, #0
 800ef98:	f859 3b04 	ldr.w	r3, [r9], #4
 800ef9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800efa0:	fa1f f883 	uxth.w	r8, r3
 800efa4:	fa11 f18b 	uxtah	r1, r1, fp
 800efa8:	0c1b      	lsrs	r3, r3, #16
 800efaa:	eba1 0808 	sub.w	r8, r1, r8
 800efae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800efb2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800efb6:	fa1f f888 	uxth.w	r8, r8
 800efba:	1419      	asrs	r1, r3, #16
 800efbc:	454e      	cmp	r6, r9
 800efbe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800efc2:	f84a 3b04 	str.w	r3, [sl], #4
 800efc6:	d8e7      	bhi.n	800ef98 <__mdiff+0x80>
 800efc8:	1b33      	subs	r3, r6, r4
 800efca:	3b15      	subs	r3, #21
 800efcc:	f023 0303 	bic.w	r3, r3, #3
 800efd0:	3304      	adds	r3, #4
 800efd2:	3415      	adds	r4, #21
 800efd4:	42a6      	cmp	r6, r4
 800efd6:	bf38      	it	cc
 800efd8:	2304      	movcc	r3, #4
 800efda:	441d      	add	r5, r3
 800efdc:	4473      	add	r3, lr
 800efde:	469e      	mov	lr, r3
 800efe0:	462e      	mov	r6, r5
 800efe2:	4566      	cmp	r6, ip
 800efe4:	d30e      	bcc.n	800f004 <__mdiff+0xec>
 800efe6:	f10c 0203 	add.w	r2, ip, #3
 800efea:	1b52      	subs	r2, r2, r5
 800efec:	f022 0203 	bic.w	r2, r2, #3
 800eff0:	3d03      	subs	r5, #3
 800eff2:	45ac      	cmp	ip, r5
 800eff4:	bf38      	it	cc
 800eff6:	2200      	movcc	r2, #0
 800eff8:	441a      	add	r2, r3
 800effa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800effe:	b17b      	cbz	r3, 800f020 <__mdiff+0x108>
 800f000:	6107      	str	r7, [r0, #16]
 800f002:	e7a3      	b.n	800ef4c <__mdiff+0x34>
 800f004:	f856 8b04 	ldr.w	r8, [r6], #4
 800f008:	fa11 f288 	uxtah	r2, r1, r8
 800f00c:	1414      	asrs	r4, r2, #16
 800f00e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f012:	b292      	uxth	r2, r2
 800f014:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f018:	f84e 2b04 	str.w	r2, [lr], #4
 800f01c:	1421      	asrs	r1, r4, #16
 800f01e:	e7e0      	b.n	800efe2 <__mdiff+0xca>
 800f020:	3f01      	subs	r7, #1
 800f022:	e7ea      	b.n	800effa <__mdiff+0xe2>
 800f024:	08010886 	.word	0x08010886
 800f028:	08010910 	.word	0x08010910

0800f02c <__ulp>:
 800f02c:	b082      	sub	sp, #8
 800f02e:	ed8d 0b00 	vstr	d0, [sp]
 800f032:	9b01      	ldr	r3, [sp, #4]
 800f034:	4912      	ldr	r1, [pc, #72]	; (800f080 <__ulp+0x54>)
 800f036:	4019      	ands	r1, r3
 800f038:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f03c:	2900      	cmp	r1, #0
 800f03e:	dd05      	ble.n	800f04c <__ulp+0x20>
 800f040:	2200      	movs	r2, #0
 800f042:	460b      	mov	r3, r1
 800f044:	ec43 2b10 	vmov	d0, r2, r3
 800f048:	b002      	add	sp, #8
 800f04a:	4770      	bx	lr
 800f04c:	4249      	negs	r1, r1
 800f04e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f052:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f056:	f04f 0200 	mov.w	r2, #0
 800f05a:	f04f 0300 	mov.w	r3, #0
 800f05e:	da04      	bge.n	800f06a <__ulp+0x3e>
 800f060:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f064:	fa41 f300 	asr.w	r3, r1, r0
 800f068:	e7ec      	b.n	800f044 <__ulp+0x18>
 800f06a:	f1a0 0114 	sub.w	r1, r0, #20
 800f06e:	291e      	cmp	r1, #30
 800f070:	bfda      	itte	le
 800f072:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f076:	fa20 f101 	lsrle.w	r1, r0, r1
 800f07a:	2101      	movgt	r1, #1
 800f07c:	460a      	mov	r2, r1
 800f07e:	e7e1      	b.n	800f044 <__ulp+0x18>
 800f080:	7ff00000 	.word	0x7ff00000

0800f084 <__b2d>:
 800f084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f086:	6905      	ldr	r5, [r0, #16]
 800f088:	f100 0714 	add.w	r7, r0, #20
 800f08c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f090:	1f2e      	subs	r6, r5, #4
 800f092:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f096:	4620      	mov	r0, r4
 800f098:	f7ff fd48 	bl	800eb2c <__hi0bits>
 800f09c:	f1c0 0320 	rsb	r3, r0, #32
 800f0a0:	280a      	cmp	r0, #10
 800f0a2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f120 <__b2d+0x9c>
 800f0a6:	600b      	str	r3, [r1, #0]
 800f0a8:	dc14      	bgt.n	800f0d4 <__b2d+0x50>
 800f0aa:	f1c0 0e0b 	rsb	lr, r0, #11
 800f0ae:	fa24 f10e 	lsr.w	r1, r4, lr
 800f0b2:	42b7      	cmp	r7, r6
 800f0b4:	ea41 030c 	orr.w	r3, r1, ip
 800f0b8:	bf34      	ite	cc
 800f0ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f0be:	2100      	movcs	r1, #0
 800f0c0:	3015      	adds	r0, #21
 800f0c2:	fa04 f000 	lsl.w	r0, r4, r0
 800f0c6:	fa21 f10e 	lsr.w	r1, r1, lr
 800f0ca:	ea40 0201 	orr.w	r2, r0, r1
 800f0ce:	ec43 2b10 	vmov	d0, r2, r3
 800f0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0d4:	42b7      	cmp	r7, r6
 800f0d6:	bf3a      	itte	cc
 800f0d8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f0dc:	f1a5 0608 	subcc.w	r6, r5, #8
 800f0e0:	2100      	movcs	r1, #0
 800f0e2:	380b      	subs	r0, #11
 800f0e4:	d017      	beq.n	800f116 <__b2d+0x92>
 800f0e6:	f1c0 0c20 	rsb	ip, r0, #32
 800f0ea:	fa04 f500 	lsl.w	r5, r4, r0
 800f0ee:	42be      	cmp	r6, r7
 800f0f0:	fa21 f40c 	lsr.w	r4, r1, ip
 800f0f4:	ea45 0504 	orr.w	r5, r5, r4
 800f0f8:	bf8c      	ite	hi
 800f0fa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f0fe:	2400      	movls	r4, #0
 800f100:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f104:	fa01 f000 	lsl.w	r0, r1, r0
 800f108:	fa24 f40c 	lsr.w	r4, r4, ip
 800f10c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f110:	ea40 0204 	orr.w	r2, r0, r4
 800f114:	e7db      	b.n	800f0ce <__b2d+0x4a>
 800f116:	ea44 030c 	orr.w	r3, r4, ip
 800f11a:	460a      	mov	r2, r1
 800f11c:	e7d7      	b.n	800f0ce <__b2d+0x4a>
 800f11e:	bf00      	nop
 800f120:	3ff00000 	.word	0x3ff00000

0800f124 <__d2b>:
 800f124:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f128:	4689      	mov	r9, r1
 800f12a:	2101      	movs	r1, #1
 800f12c:	ec57 6b10 	vmov	r6, r7, d0
 800f130:	4690      	mov	r8, r2
 800f132:	f7ff fc09 	bl	800e948 <_Balloc>
 800f136:	4604      	mov	r4, r0
 800f138:	b930      	cbnz	r0, 800f148 <__d2b+0x24>
 800f13a:	4602      	mov	r2, r0
 800f13c:	4b25      	ldr	r3, [pc, #148]	; (800f1d4 <__d2b+0xb0>)
 800f13e:	4826      	ldr	r0, [pc, #152]	; (800f1d8 <__d2b+0xb4>)
 800f140:	f240 310a 	movw	r1, #778	; 0x30a
 800f144:	f7fe f9b4 	bl	800d4b0 <__assert_func>
 800f148:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f14c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f150:	bb35      	cbnz	r5, 800f1a0 <__d2b+0x7c>
 800f152:	2e00      	cmp	r6, #0
 800f154:	9301      	str	r3, [sp, #4]
 800f156:	d028      	beq.n	800f1aa <__d2b+0x86>
 800f158:	4668      	mov	r0, sp
 800f15a:	9600      	str	r6, [sp, #0]
 800f15c:	f7ff fd06 	bl	800eb6c <__lo0bits>
 800f160:	9900      	ldr	r1, [sp, #0]
 800f162:	b300      	cbz	r0, 800f1a6 <__d2b+0x82>
 800f164:	9a01      	ldr	r2, [sp, #4]
 800f166:	f1c0 0320 	rsb	r3, r0, #32
 800f16a:	fa02 f303 	lsl.w	r3, r2, r3
 800f16e:	430b      	orrs	r3, r1
 800f170:	40c2      	lsrs	r2, r0
 800f172:	6163      	str	r3, [r4, #20]
 800f174:	9201      	str	r2, [sp, #4]
 800f176:	9b01      	ldr	r3, [sp, #4]
 800f178:	61a3      	str	r3, [r4, #24]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	bf14      	ite	ne
 800f17e:	2202      	movne	r2, #2
 800f180:	2201      	moveq	r2, #1
 800f182:	6122      	str	r2, [r4, #16]
 800f184:	b1d5      	cbz	r5, 800f1bc <__d2b+0x98>
 800f186:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f18a:	4405      	add	r5, r0
 800f18c:	f8c9 5000 	str.w	r5, [r9]
 800f190:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f194:	f8c8 0000 	str.w	r0, [r8]
 800f198:	4620      	mov	r0, r4
 800f19a:	b003      	add	sp, #12
 800f19c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f1a4:	e7d5      	b.n	800f152 <__d2b+0x2e>
 800f1a6:	6161      	str	r1, [r4, #20]
 800f1a8:	e7e5      	b.n	800f176 <__d2b+0x52>
 800f1aa:	a801      	add	r0, sp, #4
 800f1ac:	f7ff fcde 	bl	800eb6c <__lo0bits>
 800f1b0:	9b01      	ldr	r3, [sp, #4]
 800f1b2:	6163      	str	r3, [r4, #20]
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	6122      	str	r2, [r4, #16]
 800f1b8:	3020      	adds	r0, #32
 800f1ba:	e7e3      	b.n	800f184 <__d2b+0x60>
 800f1bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f1c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f1c4:	f8c9 0000 	str.w	r0, [r9]
 800f1c8:	6918      	ldr	r0, [r3, #16]
 800f1ca:	f7ff fcaf 	bl	800eb2c <__hi0bits>
 800f1ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f1d2:	e7df      	b.n	800f194 <__d2b+0x70>
 800f1d4:	08010886 	.word	0x08010886
 800f1d8:	08010910 	.word	0x08010910

0800f1dc <__ratio>:
 800f1dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1e0:	4688      	mov	r8, r1
 800f1e2:	4669      	mov	r1, sp
 800f1e4:	4681      	mov	r9, r0
 800f1e6:	f7ff ff4d 	bl	800f084 <__b2d>
 800f1ea:	a901      	add	r1, sp, #4
 800f1ec:	4640      	mov	r0, r8
 800f1ee:	ec55 4b10 	vmov	r4, r5, d0
 800f1f2:	f7ff ff47 	bl	800f084 <__b2d>
 800f1f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f1fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f1fe:	eba3 0c02 	sub.w	ip, r3, r2
 800f202:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f206:	1a9b      	subs	r3, r3, r2
 800f208:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f20c:	ec51 0b10 	vmov	r0, r1, d0
 800f210:	2b00      	cmp	r3, #0
 800f212:	bfd6      	itet	le
 800f214:	460a      	movle	r2, r1
 800f216:	462a      	movgt	r2, r5
 800f218:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f21c:	468b      	mov	fp, r1
 800f21e:	462f      	mov	r7, r5
 800f220:	bfd4      	ite	le
 800f222:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f226:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f22a:	4620      	mov	r0, r4
 800f22c:	ee10 2a10 	vmov	r2, s0
 800f230:	465b      	mov	r3, fp
 800f232:	4639      	mov	r1, r7
 800f234:	f7f1 fb0a 	bl	800084c <__aeabi_ddiv>
 800f238:	ec41 0b10 	vmov	d0, r0, r1
 800f23c:	b003      	add	sp, #12
 800f23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f242 <__copybits>:
 800f242:	3901      	subs	r1, #1
 800f244:	b570      	push	{r4, r5, r6, lr}
 800f246:	1149      	asrs	r1, r1, #5
 800f248:	6914      	ldr	r4, [r2, #16]
 800f24a:	3101      	adds	r1, #1
 800f24c:	f102 0314 	add.w	r3, r2, #20
 800f250:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f254:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f258:	1f05      	subs	r5, r0, #4
 800f25a:	42a3      	cmp	r3, r4
 800f25c:	d30c      	bcc.n	800f278 <__copybits+0x36>
 800f25e:	1aa3      	subs	r3, r4, r2
 800f260:	3b11      	subs	r3, #17
 800f262:	f023 0303 	bic.w	r3, r3, #3
 800f266:	3211      	adds	r2, #17
 800f268:	42a2      	cmp	r2, r4
 800f26a:	bf88      	it	hi
 800f26c:	2300      	movhi	r3, #0
 800f26e:	4418      	add	r0, r3
 800f270:	2300      	movs	r3, #0
 800f272:	4288      	cmp	r0, r1
 800f274:	d305      	bcc.n	800f282 <__copybits+0x40>
 800f276:	bd70      	pop	{r4, r5, r6, pc}
 800f278:	f853 6b04 	ldr.w	r6, [r3], #4
 800f27c:	f845 6f04 	str.w	r6, [r5, #4]!
 800f280:	e7eb      	b.n	800f25a <__copybits+0x18>
 800f282:	f840 3b04 	str.w	r3, [r0], #4
 800f286:	e7f4      	b.n	800f272 <__copybits+0x30>

0800f288 <__any_on>:
 800f288:	f100 0214 	add.w	r2, r0, #20
 800f28c:	6900      	ldr	r0, [r0, #16]
 800f28e:	114b      	asrs	r3, r1, #5
 800f290:	4298      	cmp	r0, r3
 800f292:	b510      	push	{r4, lr}
 800f294:	db11      	blt.n	800f2ba <__any_on+0x32>
 800f296:	dd0a      	ble.n	800f2ae <__any_on+0x26>
 800f298:	f011 011f 	ands.w	r1, r1, #31
 800f29c:	d007      	beq.n	800f2ae <__any_on+0x26>
 800f29e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f2a2:	fa24 f001 	lsr.w	r0, r4, r1
 800f2a6:	fa00 f101 	lsl.w	r1, r0, r1
 800f2aa:	428c      	cmp	r4, r1
 800f2ac:	d10b      	bne.n	800f2c6 <__any_on+0x3e>
 800f2ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f2b2:	4293      	cmp	r3, r2
 800f2b4:	d803      	bhi.n	800f2be <__any_on+0x36>
 800f2b6:	2000      	movs	r0, #0
 800f2b8:	bd10      	pop	{r4, pc}
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	e7f7      	b.n	800f2ae <__any_on+0x26>
 800f2be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f2c2:	2900      	cmp	r1, #0
 800f2c4:	d0f5      	beq.n	800f2b2 <__any_on+0x2a>
 800f2c6:	2001      	movs	r0, #1
 800f2c8:	e7f6      	b.n	800f2b8 <__any_on+0x30>

0800f2ca <_calloc_r>:
 800f2ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f2cc:	fba1 2402 	umull	r2, r4, r1, r2
 800f2d0:	b94c      	cbnz	r4, 800f2e6 <_calloc_r+0x1c>
 800f2d2:	4611      	mov	r1, r2
 800f2d4:	9201      	str	r2, [sp, #4]
 800f2d6:	f7fc fa3b 	bl	800b750 <_malloc_r>
 800f2da:	9a01      	ldr	r2, [sp, #4]
 800f2dc:	4605      	mov	r5, r0
 800f2de:	b930      	cbnz	r0, 800f2ee <_calloc_r+0x24>
 800f2e0:	4628      	mov	r0, r5
 800f2e2:	b003      	add	sp, #12
 800f2e4:	bd30      	pop	{r4, r5, pc}
 800f2e6:	220c      	movs	r2, #12
 800f2e8:	6002      	str	r2, [r0, #0]
 800f2ea:	2500      	movs	r5, #0
 800f2ec:	e7f8      	b.n	800f2e0 <_calloc_r+0x16>
 800f2ee:	4621      	mov	r1, r4
 800f2f0:	f7fc f9ba 	bl	800b668 <memset>
 800f2f4:	e7f4      	b.n	800f2e0 <_calloc_r+0x16>

0800f2f6 <__ssputs_r>:
 800f2f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2fa:	688e      	ldr	r6, [r1, #8]
 800f2fc:	429e      	cmp	r6, r3
 800f2fe:	4682      	mov	sl, r0
 800f300:	460c      	mov	r4, r1
 800f302:	4690      	mov	r8, r2
 800f304:	461f      	mov	r7, r3
 800f306:	d838      	bhi.n	800f37a <__ssputs_r+0x84>
 800f308:	898a      	ldrh	r2, [r1, #12]
 800f30a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f30e:	d032      	beq.n	800f376 <__ssputs_r+0x80>
 800f310:	6825      	ldr	r5, [r4, #0]
 800f312:	6909      	ldr	r1, [r1, #16]
 800f314:	eba5 0901 	sub.w	r9, r5, r1
 800f318:	6965      	ldr	r5, [r4, #20]
 800f31a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f31e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f322:	3301      	adds	r3, #1
 800f324:	444b      	add	r3, r9
 800f326:	106d      	asrs	r5, r5, #1
 800f328:	429d      	cmp	r5, r3
 800f32a:	bf38      	it	cc
 800f32c:	461d      	movcc	r5, r3
 800f32e:	0553      	lsls	r3, r2, #21
 800f330:	d531      	bpl.n	800f396 <__ssputs_r+0xa0>
 800f332:	4629      	mov	r1, r5
 800f334:	f7fc fa0c 	bl	800b750 <_malloc_r>
 800f338:	4606      	mov	r6, r0
 800f33a:	b950      	cbnz	r0, 800f352 <__ssputs_r+0x5c>
 800f33c:	230c      	movs	r3, #12
 800f33e:	f8ca 3000 	str.w	r3, [sl]
 800f342:	89a3      	ldrh	r3, [r4, #12]
 800f344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f348:	81a3      	strh	r3, [r4, #12]
 800f34a:	f04f 30ff 	mov.w	r0, #4294967295
 800f34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f352:	6921      	ldr	r1, [r4, #16]
 800f354:	464a      	mov	r2, r9
 800f356:	f7ff fadd 	bl	800e914 <memcpy>
 800f35a:	89a3      	ldrh	r3, [r4, #12]
 800f35c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f364:	81a3      	strh	r3, [r4, #12]
 800f366:	6126      	str	r6, [r4, #16]
 800f368:	6165      	str	r5, [r4, #20]
 800f36a:	444e      	add	r6, r9
 800f36c:	eba5 0509 	sub.w	r5, r5, r9
 800f370:	6026      	str	r6, [r4, #0]
 800f372:	60a5      	str	r5, [r4, #8]
 800f374:	463e      	mov	r6, r7
 800f376:	42be      	cmp	r6, r7
 800f378:	d900      	bls.n	800f37c <__ssputs_r+0x86>
 800f37a:	463e      	mov	r6, r7
 800f37c:	6820      	ldr	r0, [r4, #0]
 800f37e:	4632      	mov	r2, r6
 800f380:	4641      	mov	r1, r8
 800f382:	f000 fd7f 	bl	800fe84 <memmove>
 800f386:	68a3      	ldr	r3, [r4, #8]
 800f388:	1b9b      	subs	r3, r3, r6
 800f38a:	60a3      	str	r3, [r4, #8]
 800f38c:	6823      	ldr	r3, [r4, #0]
 800f38e:	4433      	add	r3, r6
 800f390:	6023      	str	r3, [r4, #0]
 800f392:	2000      	movs	r0, #0
 800f394:	e7db      	b.n	800f34e <__ssputs_r+0x58>
 800f396:	462a      	mov	r2, r5
 800f398:	f000 fd8e 	bl	800feb8 <_realloc_r>
 800f39c:	4606      	mov	r6, r0
 800f39e:	2800      	cmp	r0, #0
 800f3a0:	d1e1      	bne.n	800f366 <__ssputs_r+0x70>
 800f3a2:	6921      	ldr	r1, [r4, #16]
 800f3a4:	4650      	mov	r0, sl
 800f3a6:	f7fc f967 	bl	800b678 <_free_r>
 800f3aa:	e7c7      	b.n	800f33c <__ssputs_r+0x46>

0800f3ac <_svfiprintf_r>:
 800f3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3b0:	4698      	mov	r8, r3
 800f3b2:	898b      	ldrh	r3, [r1, #12]
 800f3b4:	061b      	lsls	r3, r3, #24
 800f3b6:	b09d      	sub	sp, #116	; 0x74
 800f3b8:	4607      	mov	r7, r0
 800f3ba:	460d      	mov	r5, r1
 800f3bc:	4614      	mov	r4, r2
 800f3be:	d50e      	bpl.n	800f3de <_svfiprintf_r+0x32>
 800f3c0:	690b      	ldr	r3, [r1, #16]
 800f3c2:	b963      	cbnz	r3, 800f3de <_svfiprintf_r+0x32>
 800f3c4:	2140      	movs	r1, #64	; 0x40
 800f3c6:	f7fc f9c3 	bl	800b750 <_malloc_r>
 800f3ca:	6028      	str	r0, [r5, #0]
 800f3cc:	6128      	str	r0, [r5, #16]
 800f3ce:	b920      	cbnz	r0, 800f3da <_svfiprintf_r+0x2e>
 800f3d0:	230c      	movs	r3, #12
 800f3d2:	603b      	str	r3, [r7, #0]
 800f3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f3d8:	e0d1      	b.n	800f57e <_svfiprintf_r+0x1d2>
 800f3da:	2340      	movs	r3, #64	; 0x40
 800f3dc:	616b      	str	r3, [r5, #20]
 800f3de:	2300      	movs	r3, #0
 800f3e0:	9309      	str	r3, [sp, #36]	; 0x24
 800f3e2:	2320      	movs	r3, #32
 800f3e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3ec:	2330      	movs	r3, #48	; 0x30
 800f3ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f598 <_svfiprintf_r+0x1ec>
 800f3f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3f6:	f04f 0901 	mov.w	r9, #1
 800f3fa:	4623      	mov	r3, r4
 800f3fc:	469a      	mov	sl, r3
 800f3fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f402:	b10a      	cbz	r2, 800f408 <_svfiprintf_r+0x5c>
 800f404:	2a25      	cmp	r2, #37	; 0x25
 800f406:	d1f9      	bne.n	800f3fc <_svfiprintf_r+0x50>
 800f408:	ebba 0b04 	subs.w	fp, sl, r4
 800f40c:	d00b      	beq.n	800f426 <_svfiprintf_r+0x7a>
 800f40e:	465b      	mov	r3, fp
 800f410:	4622      	mov	r2, r4
 800f412:	4629      	mov	r1, r5
 800f414:	4638      	mov	r0, r7
 800f416:	f7ff ff6e 	bl	800f2f6 <__ssputs_r>
 800f41a:	3001      	adds	r0, #1
 800f41c:	f000 80aa 	beq.w	800f574 <_svfiprintf_r+0x1c8>
 800f420:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f422:	445a      	add	r2, fp
 800f424:	9209      	str	r2, [sp, #36]	; 0x24
 800f426:	f89a 3000 	ldrb.w	r3, [sl]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	f000 80a2 	beq.w	800f574 <_svfiprintf_r+0x1c8>
 800f430:	2300      	movs	r3, #0
 800f432:	f04f 32ff 	mov.w	r2, #4294967295
 800f436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f43a:	f10a 0a01 	add.w	sl, sl, #1
 800f43e:	9304      	str	r3, [sp, #16]
 800f440:	9307      	str	r3, [sp, #28]
 800f442:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f446:	931a      	str	r3, [sp, #104]	; 0x68
 800f448:	4654      	mov	r4, sl
 800f44a:	2205      	movs	r2, #5
 800f44c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f450:	4851      	ldr	r0, [pc, #324]	; (800f598 <_svfiprintf_r+0x1ec>)
 800f452:	f7f0 fec5 	bl	80001e0 <memchr>
 800f456:	9a04      	ldr	r2, [sp, #16]
 800f458:	b9d8      	cbnz	r0, 800f492 <_svfiprintf_r+0xe6>
 800f45a:	06d0      	lsls	r0, r2, #27
 800f45c:	bf44      	itt	mi
 800f45e:	2320      	movmi	r3, #32
 800f460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f464:	0711      	lsls	r1, r2, #28
 800f466:	bf44      	itt	mi
 800f468:	232b      	movmi	r3, #43	; 0x2b
 800f46a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f46e:	f89a 3000 	ldrb.w	r3, [sl]
 800f472:	2b2a      	cmp	r3, #42	; 0x2a
 800f474:	d015      	beq.n	800f4a2 <_svfiprintf_r+0xf6>
 800f476:	9a07      	ldr	r2, [sp, #28]
 800f478:	4654      	mov	r4, sl
 800f47a:	2000      	movs	r0, #0
 800f47c:	f04f 0c0a 	mov.w	ip, #10
 800f480:	4621      	mov	r1, r4
 800f482:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f486:	3b30      	subs	r3, #48	; 0x30
 800f488:	2b09      	cmp	r3, #9
 800f48a:	d94e      	bls.n	800f52a <_svfiprintf_r+0x17e>
 800f48c:	b1b0      	cbz	r0, 800f4bc <_svfiprintf_r+0x110>
 800f48e:	9207      	str	r2, [sp, #28]
 800f490:	e014      	b.n	800f4bc <_svfiprintf_r+0x110>
 800f492:	eba0 0308 	sub.w	r3, r0, r8
 800f496:	fa09 f303 	lsl.w	r3, r9, r3
 800f49a:	4313      	orrs	r3, r2
 800f49c:	9304      	str	r3, [sp, #16]
 800f49e:	46a2      	mov	sl, r4
 800f4a0:	e7d2      	b.n	800f448 <_svfiprintf_r+0x9c>
 800f4a2:	9b03      	ldr	r3, [sp, #12]
 800f4a4:	1d19      	adds	r1, r3, #4
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	9103      	str	r1, [sp, #12]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	bfbb      	ittet	lt
 800f4ae:	425b      	neglt	r3, r3
 800f4b0:	f042 0202 	orrlt.w	r2, r2, #2
 800f4b4:	9307      	strge	r3, [sp, #28]
 800f4b6:	9307      	strlt	r3, [sp, #28]
 800f4b8:	bfb8      	it	lt
 800f4ba:	9204      	strlt	r2, [sp, #16]
 800f4bc:	7823      	ldrb	r3, [r4, #0]
 800f4be:	2b2e      	cmp	r3, #46	; 0x2e
 800f4c0:	d10c      	bne.n	800f4dc <_svfiprintf_r+0x130>
 800f4c2:	7863      	ldrb	r3, [r4, #1]
 800f4c4:	2b2a      	cmp	r3, #42	; 0x2a
 800f4c6:	d135      	bne.n	800f534 <_svfiprintf_r+0x188>
 800f4c8:	9b03      	ldr	r3, [sp, #12]
 800f4ca:	1d1a      	adds	r2, r3, #4
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	9203      	str	r2, [sp, #12]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	bfb8      	it	lt
 800f4d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4d8:	3402      	adds	r4, #2
 800f4da:	9305      	str	r3, [sp, #20]
 800f4dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f5a8 <_svfiprintf_r+0x1fc>
 800f4e0:	7821      	ldrb	r1, [r4, #0]
 800f4e2:	2203      	movs	r2, #3
 800f4e4:	4650      	mov	r0, sl
 800f4e6:	f7f0 fe7b 	bl	80001e0 <memchr>
 800f4ea:	b140      	cbz	r0, 800f4fe <_svfiprintf_r+0x152>
 800f4ec:	2340      	movs	r3, #64	; 0x40
 800f4ee:	eba0 000a 	sub.w	r0, r0, sl
 800f4f2:	fa03 f000 	lsl.w	r0, r3, r0
 800f4f6:	9b04      	ldr	r3, [sp, #16]
 800f4f8:	4303      	orrs	r3, r0
 800f4fa:	3401      	adds	r4, #1
 800f4fc:	9304      	str	r3, [sp, #16]
 800f4fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f502:	4826      	ldr	r0, [pc, #152]	; (800f59c <_svfiprintf_r+0x1f0>)
 800f504:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f508:	2206      	movs	r2, #6
 800f50a:	f7f0 fe69 	bl	80001e0 <memchr>
 800f50e:	2800      	cmp	r0, #0
 800f510:	d038      	beq.n	800f584 <_svfiprintf_r+0x1d8>
 800f512:	4b23      	ldr	r3, [pc, #140]	; (800f5a0 <_svfiprintf_r+0x1f4>)
 800f514:	bb1b      	cbnz	r3, 800f55e <_svfiprintf_r+0x1b2>
 800f516:	9b03      	ldr	r3, [sp, #12]
 800f518:	3307      	adds	r3, #7
 800f51a:	f023 0307 	bic.w	r3, r3, #7
 800f51e:	3308      	adds	r3, #8
 800f520:	9303      	str	r3, [sp, #12]
 800f522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f524:	4433      	add	r3, r6
 800f526:	9309      	str	r3, [sp, #36]	; 0x24
 800f528:	e767      	b.n	800f3fa <_svfiprintf_r+0x4e>
 800f52a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f52e:	460c      	mov	r4, r1
 800f530:	2001      	movs	r0, #1
 800f532:	e7a5      	b.n	800f480 <_svfiprintf_r+0xd4>
 800f534:	2300      	movs	r3, #0
 800f536:	3401      	adds	r4, #1
 800f538:	9305      	str	r3, [sp, #20]
 800f53a:	4619      	mov	r1, r3
 800f53c:	f04f 0c0a 	mov.w	ip, #10
 800f540:	4620      	mov	r0, r4
 800f542:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f546:	3a30      	subs	r2, #48	; 0x30
 800f548:	2a09      	cmp	r2, #9
 800f54a:	d903      	bls.n	800f554 <_svfiprintf_r+0x1a8>
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d0c5      	beq.n	800f4dc <_svfiprintf_r+0x130>
 800f550:	9105      	str	r1, [sp, #20]
 800f552:	e7c3      	b.n	800f4dc <_svfiprintf_r+0x130>
 800f554:	fb0c 2101 	mla	r1, ip, r1, r2
 800f558:	4604      	mov	r4, r0
 800f55a:	2301      	movs	r3, #1
 800f55c:	e7f0      	b.n	800f540 <_svfiprintf_r+0x194>
 800f55e:	ab03      	add	r3, sp, #12
 800f560:	9300      	str	r3, [sp, #0]
 800f562:	462a      	mov	r2, r5
 800f564:	4b0f      	ldr	r3, [pc, #60]	; (800f5a4 <_svfiprintf_r+0x1f8>)
 800f566:	a904      	add	r1, sp, #16
 800f568:	4638      	mov	r0, r7
 800f56a:	f7fc fa05 	bl	800b978 <_printf_float>
 800f56e:	1c42      	adds	r2, r0, #1
 800f570:	4606      	mov	r6, r0
 800f572:	d1d6      	bne.n	800f522 <_svfiprintf_r+0x176>
 800f574:	89ab      	ldrh	r3, [r5, #12]
 800f576:	065b      	lsls	r3, r3, #25
 800f578:	f53f af2c 	bmi.w	800f3d4 <_svfiprintf_r+0x28>
 800f57c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f57e:	b01d      	add	sp, #116	; 0x74
 800f580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f584:	ab03      	add	r3, sp, #12
 800f586:	9300      	str	r3, [sp, #0]
 800f588:	462a      	mov	r2, r5
 800f58a:	4b06      	ldr	r3, [pc, #24]	; (800f5a4 <_svfiprintf_r+0x1f8>)
 800f58c:	a904      	add	r1, sp, #16
 800f58e:	4638      	mov	r0, r7
 800f590:	f7fc fc96 	bl	800bec0 <_printf_i>
 800f594:	e7eb      	b.n	800f56e <_svfiprintf_r+0x1c2>
 800f596:	bf00      	nop
 800f598:	08010a6c 	.word	0x08010a6c
 800f59c:	08010a76 	.word	0x08010a76
 800f5a0:	0800b979 	.word	0x0800b979
 800f5a4:	0800f2f7 	.word	0x0800f2f7
 800f5a8:	08010a72 	.word	0x08010a72

0800f5ac <__sfputc_r>:
 800f5ac:	6893      	ldr	r3, [r2, #8]
 800f5ae:	3b01      	subs	r3, #1
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	b410      	push	{r4}
 800f5b4:	6093      	str	r3, [r2, #8]
 800f5b6:	da08      	bge.n	800f5ca <__sfputc_r+0x1e>
 800f5b8:	6994      	ldr	r4, [r2, #24]
 800f5ba:	42a3      	cmp	r3, r4
 800f5bc:	db01      	blt.n	800f5c2 <__sfputc_r+0x16>
 800f5be:	290a      	cmp	r1, #10
 800f5c0:	d103      	bne.n	800f5ca <__sfputc_r+0x1e>
 800f5c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5c6:	f000 b967 	b.w	800f898 <__swbuf_r>
 800f5ca:	6813      	ldr	r3, [r2, #0]
 800f5cc:	1c58      	adds	r0, r3, #1
 800f5ce:	6010      	str	r0, [r2, #0]
 800f5d0:	7019      	strb	r1, [r3, #0]
 800f5d2:	4608      	mov	r0, r1
 800f5d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5d8:	4770      	bx	lr

0800f5da <__sfputs_r>:
 800f5da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5dc:	4606      	mov	r6, r0
 800f5de:	460f      	mov	r7, r1
 800f5e0:	4614      	mov	r4, r2
 800f5e2:	18d5      	adds	r5, r2, r3
 800f5e4:	42ac      	cmp	r4, r5
 800f5e6:	d101      	bne.n	800f5ec <__sfputs_r+0x12>
 800f5e8:	2000      	movs	r0, #0
 800f5ea:	e007      	b.n	800f5fc <__sfputs_r+0x22>
 800f5ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5f0:	463a      	mov	r2, r7
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	f7ff ffda 	bl	800f5ac <__sfputc_r>
 800f5f8:	1c43      	adds	r3, r0, #1
 800f5fa:	d1f3      	bne.n	800f5e4 <__sfputs_r+0xa>
 800f5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f600 <_vfiprintf_r>:
 800f600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f604:	460d      	mov	r5, r1
 800f606:	b09d      	sub	sp, #116	; 0x74
 800f608:	4614      	mov	r4, r2
 800f60a:	4698      	mov	r8, r3
 800f60c:	4606      	mov	r6, r0
 800f60e:	b118      	cbz	r0, 800f618 <_vfiprintf_r+0x18>
 800f610:	6983      	ldr	r3, [r0, #24]
 800f612:	b90b      	cbnz	r3, 800f618 <_vfiprintf_r+0x18>
 800f614:	f000 fb30 	bl	800fc78 <__sinit>
 800f618:	4b89      	ldr	r3, [pc, #548]	; (800f840 <_vfiprintf_r+0x240>)
 800f61a:	429d      	cmp	r5, r3
 800f61c:	d11b      	bne.n	800f656 <_vfiprintf_r+0x56>
 800f61e:	6875      	ldr	r5, [r6, #4]
 800f620:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f622:	07d9      	lsls	r1, r3, #31
 800f624:	d405      	bmi.n	800f632 <_vfiprintf_r+0x32>
 800f626:	89ab      	ldrh	r3, [r5, #12]
 800f628:	059a      	lsls	r2, r3, #22
 800f62a:	d402      	bmi.n	800f632 <_vfiprintf_r+0x32>
 800f62c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f62e:	f000 fbc1 	bl	800fdb4 <__retarget_lock_acquire_recursive>
 800f632:	89ab      	ldrh	r3, [r5, #12]
 800f634:	071b      	lsls	r3, r3, #28
 800f636:	d501      	bpl.n	800f63c <_vfiprintf_r+0x3c>
 800f638:	692b      	ldr	r3, [r5, #16]
 800f63a:	b9eb      	cbnz	r3, 800f678 <_vfiprintf_r+0x78>
 800f63c:	4629      	mov	r1, r5
 800f63e:	4630      	mov	r0, r6
 800f640:	f000 f98a 	bl	800f958 <__swsetup_r>
 800f644:	b1c0      	cbz	r0, 800f678 <_vfiprintf_r+0x78>
 800f646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f648:	07dc      	lsls	r4, r3, #31
 800f64a:	d50e      	bpl.n	800f66a <_vfiprintf_r+0x6a>
 800f64c:	f04f 30ff 	mov.w	r0, #4294967295
 800f650:	b01d      	add	sp, #116	; 0x74
 800f652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f656:	4b7b      	ldr	r3, [pc, #492]	; (800f844 <_vfiprintf_r+0x244>)
 800f658:	429d      	cmp	r5, r3
 800f65a:	d101      	bne.n	800f660 <_vfiprintf_r+0x60>
 800f65c:	68b5      	ldr	r5, [r6, #8]
 800f65e:	e7df      	b.n	800f620 <_vfiprintf_r+0x20>
 800f660:	4b79      	ldr	r3, [pc, #484]	; (800f848 <_vfiprintf_r+0x248>)
 800f662:	429d      	cmp	r5, r3
 800f664:	bf08      	it	eq
 800f666:	68f5      	ldreq	r5, [r6, #12]
 800f668:	e7da      	b.n	800f620 <_vfiprintf_r+0x20>
 800f66a:	89ab      	ldrh	r3, [r5, #12]
 800f66c:	0598      	lsls	r0, r3, #22
 800f66e:	d4ed      	bmi.n	800f64c <_vfiprintf_r+0x4c>
 800f670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f672:	f000 fba0 	bl	800fdb6 <__retarget_lock_release_recursive>
 800f676:	e7e9      	b.n	800f64c <_vfiprintf_r+0x4c>
 800f678:	2300      	movs	r3, #0
 800f67a:	9309      	str	r3, [sp, #36]	; 0x24
 800f67c:	2320      	movs	r3, #32
 800f67e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f682:	f8cd 800c 	str.w	r8, [sp, #12]
 800f686:	2330      	movs	r3, #48	; 0x30
 800f688:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f84c <_vfiprintf_r+0x24c>
 800f68c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f690:	f04f 0901 	mov.w	r9, #1
 800f694:	4623      	mov	r3, r4
 800f696:	469a      	mov	sl, r3
 800f698:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f69c:	b10a      	cbz	r2, 800f6a2 <_vfiprintf_r+0xa2>
 800f69e:	2a25      	cmp	r2, #37	; 0x25
 800f6a0:	d1f9      	bne.n	800f696 <_vfiprintf_r+0x96>
 800f6a2:	ebba 0b04 	subs.w	fp, sl, r4
 800f6a6:	d00b      	beq.n	800f6c0 <_vfiprintf_r+0xc0>
 800f6a8:	465b      	mov	r3, fp
 800f6aa:	4622      	mov	r2, r4
 800f6ac:	4629      	mov	r1, r5
 800f6ae:	4630      	mov	r0, r6
 800f6b0:	f7ff ff93 	bl	800f5da <__sfputs_r>
 800f6b4:	3001      	adds	r0, #1
 800f6b6:	f000 80aa 	beq.w	800f80e <_vfiprintf_r+0x20e>
 800f6ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6bc:	445a      	add	r2, fp
 800f6be:	9209      	str	r2, [sp, #36]	; 0x24
 800f6c0:	f89a 3000 	ldrb.w	r3, [sl]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	f000 80a2 	beq.w	800f80e <_vfiprintf_r+0x20e>
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	f04f 32ff 	mov.w	r2, #4294967295
 800f6d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6d4:	f10a 0a01 	add.w	sl, sl, #1
 800f6d8:	9304      	str	r3, [sp, #16]
 800f6da:	9307      	str	r3, [sp, #28]
 800f6dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f6e0:	931a      	str	r3, [sp, #104]	; 0x68
 800f6e2:	4654      	mov	r4, sl
 800f6e4:	2205      	movs	r2, #5
 800f6e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6ea:	4858      	ldr	r0, [pc, #352]	; (800f84c <_vfiprintf_r+0x24c>)
 800f6ec:	f7f0 fd78 	bl	80001e0 <memchr>
 800f6f0:	9a04      	ldr	r2, [sp, #16]
 800f6f2:	b9d8      	cbnz	r0, 800f72c <_vfiprintf_r+0x12c>
 800f6f4:	06d1      	lsls	r1, r2, #27
 800f6f6:	bf44      	itt	mi
 800f6f8:	2320      	movmi	r3, #32
 800f6fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6fe:	0713      	lsls	r3, r2, #28
 800f700:	bf44      	itt	mi
 800f702:	232b      	movmi	r3, #43	; 0x2b
 800f704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f708:	f89a 3000 	ldrb.w	r3, [sl]
 800f70c:	2b2a      	cmp	r3, #42	; 0x2a
 800f70e:	d015      	beq.n	800f73c <_vfiprintf_r+0x13c>
 800f710:	9a07      	ldr	r2, [sp, #28]
 800f712:	4654      	mov	r4, sl
 800f714:	2000      	movs	r0, #0
 800f716:	f04f 0c0a 	mov.w	ip, #10
 800f71a:	4621      	mov	r1, r4
 800f71c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f720:	3b30      	subs	r3, #48	; 0x30
 800f722:	2b09      	cmp	r3, #9
 800f724:	d94e      	bls.n	800f7c4 <_vfiprintf_r+0x1c4>
 800f726:	b1b0      	cbz	r0, 800f756 <_vfiprintf_r+0x156>
 800f728:	9207      	str	r2, [sp, #28]
 800f72a:	e014      	b.n	800f756 <_vfiprintf_r+0x156>
 800f72c:	eba0 0308 	sub.w	r3, r0, r8
 800f730:	fa09 f303 	lsl.w	r3, r9, r3
 800f734:	4313      	orrs	r3, r2
 800f736:	9304      	str	r3, [sp, #16]
 800f738:	46a2      	mov	sl, r4
 800f73a:	e7d2      	b.n	800f6e2 <_vfiprintf_r+0xe2>
 800f73c:	9b03      	ldr	r3, [sp, #12]
 800f73e:	1d19      	adds	r1, r3, #4
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	9103      	str	r1, [sp, #12]
 800f744:	2b00      	cmp	r3, #0
 800f746:	bfbb      	ittet	lt
 800f748:	425b      	neglt	r3, r3
 800f74a:	f042 0202 	orrlt.w	r2, r2, #2
 800f74e:	9307      	strge	r3, [sp, #28]
 800f750:	9307      	strlt	r3, [sp, #28]
 800f752:	bfb8      	it	lt
 800f754:	9204      	strlt	r2, [sp, #16]
 800f756:	7823      	ldrb	r3, [r4, #0]
 800f758:	2b2e      	cmp	r3, #46	; 0x2e
 800f75a:	d10c      	bne.n	800f776 <_vfiprintf_r+0x176>
 800f75c:	7863      	ldrb	r3, [r4, #1]
 800f75e:	2b2a      	cmp	r3, #42	; 0x2a
 800f760:	d135      	bne.n	800f7ce <_vfiprintf_r+0x1ce>
 800f762:	9b03      	ldr	r3, [sp, #12]
 800f764:	1d1a      	adds	r2, r3, #4
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	9203      	str	r2, [sp, #12]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	bfb8      	it	lt
 800f76e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f772:	3402      	adds	r4, #2
 800f774:	9305      	str	r3, [sp, #20]
 800f776:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f85c <_vfiprintf_r+0x25c>
 800f77a:	7821      	ldrb	r1, [r4, #0]
 800f77c:	2203      	movs	r2, #3
 800f77e:	4650      	mov	r0, sl
 800f780:	f7f0 fd2e 	bl	80001e0 <memchr>
 800f784:	b140      	cbz	r0, 800f798 <_vfiprintf_r+0x198>
 800f786:	2340      	movs	r3, #64	; 0x40
 800f788:	eba0 000a 	sub.w	r0, r0, sl
 800f78c:	fa03 f000 	lsl.w	r0, r3, r0
 800f790:	9b04      	ldr	r3, [sp, #16]
 800f792:	4303      	orrs	r3, r0
 800f794:	3401      	adds	r4, #1
 800f796:	9304      	str	r3, [sp, #16]
 800f798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f79c:	482c      	ldr	r0, [pc, #176]	; (800f850 <_vfiprintf_r+0x250>)
 800f79e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7a2:	2206      	movs	r2, #6
 800f7a4:	f7f0 fd1c 	bl	80001e0 <memchr>
 800f7a8:	2800      	cmp	r0, #0
 800f7aa:	d03f      	beq.n	800f82c <_vfiprintf_r+0x22c>
 800f7ac:	4b29      	ldr	r3, [pc, #164]	; (800f854 <_vfiprintf_r+0x254>)
 800f7ae:	bb1b      	cbnz	r3, 800f7f8 <_vfiprintf_r+0x1f8>
 800f7b0:	9b03      	ldr	r3, [sp, #12]
 800f7b2:	3307      	adds	r3, #7
 800f7b4:	f023 0307 	bic.w	r3, r3, #7
 800f7b8:	3308      	adds	r3, #8
 800f7ba:	9303      	str	r3, [sp, #12]
 800f7bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7be:	443b      	add	r3, r7
 800f7c0:	9309      	str	r3, [sp, #36]	; 0x24
 800f7c2:	e767      	b.n	800f694 <_vfiprintf_r+0x94>
 800f7c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7c8:	460c      	mov	r4, r1
 800f7ca:	2001      	movs	r0, #1
 800f7cc:	e7a5      	b.n	800f71a <_vfiprintf_r+0x11a>
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	3401      	adds	r4, #1
 800f7d2:	9305      	str	r3, [sp, #20]
 800f7d4:	4619      	mov	r1, r3
 800f7d6:	f04f 0c0a 	mov.w	ip, #10
 800f7da:	4620      	mov	r0, r4
 800f7dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7e0:	3a30      	subs	r2, #48	; 0x30
 800f7e2:	2a09      	cmp	r2, #9
 800f7e4:	d903      	bls.n	800f7ee <_vfiprintf_r+0x1ee>
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d0c5      	beq.n	800f776 <_vfiprintf_r+0x176>
 800f7ea:	9105      	str	r1, [sp, #20]
 800f7ec:	e7c3      	b.n	800f776 <_vfiprintf_r+0x176>
 800f7ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800f7f2:	4604      	mov	r4, r0
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	e7f0      	b.n	800f7da <_vfiprintf_r+0x1da>
 800f7f8:	ab03      	add	r3, sp, #12
 800f7fa:	9300      	str	r3, [sp, #0]
 800f7fc:	462a      	mov	r2, r5
 800f7fe:	4b16      	ldr	r3, [pc, #88]	; (800f858 <_vfiprintf_r+0x258>)
 800f800:	a904      	add	r1, sp, #16
 800f802:	4630      	mov	r0, r6
 800f804:	f7fc f8b8 	bl	800b978 <_printf_float>
 800f808:	4607      	mov	r7, r0
 800f80a:	1c78      	adds	r0, r7, #1
 800f80c:	d1d6      	bne.n	800f7bc <_vfiprintf_r+0x1bc>
 800f80e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f810:	07d9      	lsls	r1, r3, #31
 800f812:	d405      	bmi.n	800f820 <_vfiprintf_r+0x220>
 800f814:	89ab      	ldrh	r3, [r5, #12]
 800f816:	059a      	lsls	r2, r3, #22
 800f818:	d402      	bmi.n	800f820 <_vfiprintf_r+0x220>
 800f81a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f81c:	f000 facb 	bl	800fdb6 <__retarget_lock_release_recursive>
 800f820:	89ab      	ldrh	r3, [r5, #12]
 800f822:	065b      	lsls	r3, r3, #25
 800f824:	f53f af12 	bmi.w	800f64c <_vfiprintf_r+0x4c>
 800f828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f82a:	e711      	b.n	800f650 <_vfiprintf_r+0x50>
 800f82c:	ab03      	add	r3, sp, #12
 800f82e:	9300      	str	r3, [sp, #0]
 800f830:	462a      	mov	r2, r5
 800f832:	4b09      	ldr	r3, [pc, #36]	; (800f858 <_vfiprintf_r+0x258>)
 800f834:	a904      	add	r1, sp, #16
 800f836:	4630      	mov	r0, r6
 800f838:	f7fc fb42 	bl	800bec0 <_printf_i>
 800f83c:	e7e4      	b.n	800f808 <_vfiprintf_r+0x208>
 800f83e:	bf00      	nop
 800f840:	08010aa0 	.word	0x08010aa0
 800f844:	08010ac0 	.word	0x08010ac0
 800f848:	08010a80 	.word	0x08010a80
 800f84c:	08010a6c 	.word	0x08010a6c
 800f850:	08010a76 	.word	0x08010a76
 800f854:	0800b979 	.word	0x0800b979
 800f858:	0800f5db 	.word	0x0800f5db
 800f85c:	08010a72 	.word	0x08010a72

0800f860 <nan>:
 800f860:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f868 <nan+0x8>
 800f864:	4770      	bx	lr
 800f866:	bf00      	nop
 800f868:	00000000 	.word	0x00000000
 800f86c:	7ff80000 	.word	0x7ff80000

0800f870 <strncmp>:
 800f870:	b510      	push	{r4, lr}
 800f872:	b17a      	cbz	r2, 800f894 <strncmp+0x24>
 800f874:	4603      	mov	r3, r0
 800f876:	3901      	subs	r1, #1
 800f878:	1884      	adds	r4, r0, r2
 800f87a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f87e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f882:	4290      	cmp	r0, r2
 800f884:	d101      	bne.n	800f88a <strncmp+0x1a>
 800f886:	42a3      	cmp	r3, r4
 800f888:	d101      	bne.n	800f88e <strncmp+0x1e>
 800f88a:	1a80      	subs	r0, r0, r2
 800f88c:	bd10      	pop	{r4, pc}
 800f88e:	2800      	cmp	r0, #0
 800f890:	d1f3      	bne.n	800f87a <strncmp+0xa>
 800f892:	e7fa      	b.n	800f88a <strncmp+0x1a>
 800f894:	4610      	mov	r0, r2
 800f896:	e7f9      	b.n	800f88c <strncmp+0x1c>

0800f898 <__swbuf_r>:
 800f898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f89a:	460e      	mov	r6, r1
 800f89c:	4614      	mov	r4, r2
 800f89e:	4605      	mov	r5, r0
 800f8a0:	b118      	cbz	r0, 800f8aa <__swbuf_r+0x12>
 800f8a2:	6983      	ldr	r3, [r0, #24]
 800f8a4:	b90b      	cbnz	r3, 800f8aa <__swbuf_r+0x12>
 800f8a6:	f000 f9e7 	bl	800fc78 <__sinit>
 800f8aa:	4b21      	ldr	r3, [pc, #132]	; (800f930 <__swbuf_r+0x98>)
 800f8ac:	429c      	cmp	r4, r3
 800f8ae:	d12b      	bne.n	800f908 <__swbuf_r+0x70>
 800f8b0:	686c      	ldr	r4, [r5, #4]
 800f8b2:	69a3      	ldr	r3, [r4, #24]
 800f8b4:	60a3      	str	r3, [r4, #8]
 800f8b6:	89a3      	ldrh	r3, [r4, #12]
 800f8b8:	071a      	lsls	r2, r3, #28
 800f8ba:	d52f      	bpl.n	800f91c <__swbuf_r+0x84>
 800f8bc:	6923      	ldr	r3, [r4, #16]
 800f8be:	b36b      	cbz	r3, 800f91c <__swbuf_r+0x84>
 800f8c0:	6923      	ldr	r3, [r4, #16]
 800f8c2:	6820      	ldr	r0, [r4, #0]
 800f8c4:	1ac0      	subs	r0, r0, r3
 800f8c6:	6963      	ldr	r3, [r4, #20]
 800f8c8:	b2f6      	uxtb	r6, r6
 800f8ca:	4283      	cmp	r3, r0
 800f8cc:	4637      	mov	r7, r6
 800f8ce:	dc04      	bgt.n	800f8da <__swbuf_r+0x42>
 800f8d0:	4621      	mov	r1, r4
 800f8d2:	4628      	mov	r0, r5
 800f8d4:	f000 f93c 	bl	800fb50 <_fflush_r>
 800f8d8:	bb30      	cbnz	r0, 800f928 <__swbuf_r+0x90>
 800f8da:	68a3      	ldr	r3, [r4, #8]
 800f8dc:	3b01      	subs	r3, #1
 800f8de:	60a3      	str	r3, [r4, #8]
 800f8e0:	6823      	ldr	r3, [r4, #0]
 800f8e2:	1c5a      	adds	r2, r3, #1
 800f8e4:	6022      	str	r2, [r4, #0]
 800f8e6:	701e      	strb	r6, [r3, #0]
 800f8e8:	6963      	ldr	r3, [r4, #20]
 800f8ea:	3001      	adds	r0, #1
 800f8ec:	4283      	cmp	r3, r0
 800f8ee:	d004      	beq.n	800f8fa <__swbuf_r+0x62>
 800f8f0:	89a3      	ldrh	r3, [r4, #12]
 800f8f2:	07db      	lsls	r3, r3, #31
 800f8f4:	d506      	bpl.n	800f904 <__swbuf_r+0x6c>
 800f8f6:	2e0a      	cmp	r6, #10
 800f8f8:	d104      	bne.n	800f904 <__swbuf_r+0x6c>
 800f8fa:	4621      	mov	r1, r4
 800f8fc:	4628      	mov	r0, r5
 800f8fe:	f000 f927 	bl	800fb50 <_fflush_r>
 800f902:	b988      	cbnz	r0, 800f928 <__swbuf_r+0x90>
 800f904:	4638      	mov	r0, r7
 800f906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f908:	4b0a      	ldr	r3, [pc, #40]	; (800f934 <__swbuf_r+0x9c>)
 800f90a:	429c      	cmp	r4, r3
 800f90c:	d101      	bne.n	800f912 <__swbuf_r+0x7a>
 800f90e:	68ac      	ldr	r4, [r5, #8]
 800f910:	e7cf      	b.n	800f8b2 <__swbuf_r+0x1a>
 800f912:	4b09      	ldr	r3, [pc, #36]	; (800f938 <__swbuf_r+0xa0>)
 800f914:	429c      	cmp	r4, r3
 800f916:	bf08      	it	eq
 800f918:	68ec      	ldreq	r4, [r5, #12]
 800f91a:	e7ca      	b.n	800f8b2 <__swbuf_r+0x1a>
 800f91c:	4621      	mov	r1, r4
 800f91e:	4628      	mov	r0, r5
 800f920:	f000 f81a 	bl	800f958 <__swsetup_r>
 800f924:	2800      	cmp	r0, #0
 800f926:	d0cb      	beq.n	800f8c0 <__swbuf_r+0x28>
 800f928:	f04f 37ff 	mov.w	r7, #4294967295
 800f92c:	e7ea      	b.n	800f904 <__swbuf_r+0x6c>
 800f92e:	bf00      	nop
 800f930:	08010aa0 	.word	0x08010aa0
 800f934:	08010ac0 	.word	0x08010ac0
 800f938:	08010a80 	.word	0x08010a80

0800f93c <__ascii_wctomb>:
 800f93c:	b149      	cbz	r1, 800f952 <__ascii_wctomb+0x16>
 800f93e:	2aff      	cmp	r2, #255	; 0xff
 800f940:	bf85      	ittet	hi
 800f942:	238a      	movhi	r3, #138	; 0x8a
 800f944:	6003      	strhi	r3, [r0, #0]
 800f946:	700a      	strbls	r2, [r1, #0]
 800f948:	f04f 30ff 	movhi.w	r0, #4294967295
 800f94c:	bf98      	it	ls
 800f94e:	2001      	movls	r0, #1
 800f950:	4770      	bx	lr
 800f952:	4608      	mov	r0, r1
 800f954:	4770      	bx	lr
	...

0800f958 <__swsetup_r>:
 800f958:	4b32      	ldr	r3, [pc, #200]	; (800fa24 <__swsetup_r+0xcc>)
 800f95a:	b570      	push	{r4, r5, r6, lr}
 800f95c:	681d      	ldr	r5, [r3, #0]
 800f95e:	4606      	mov	r6, r0
 800f960:	460c      	mov	r4, r1
 800f962:	b125      	cbz	r5, 800f96e <__swsetup_r+0x16>
 800f964:	69ab      	ldr	r3, [r5, #24]
 800f966:	b913      	cbnz	r3, 800f96e <__swsetup_r+0x16>
 800f968:	4628      	mov	r0, r5
 800f96a:	f000 f985 	bl	800fc78 <__sinit>
 800f96e:	4b2e      	ldr	r3, [pc, #184]	; (800fa28 <__swsetup_r+0xd0>)
 800f970:	429c      	cmp	r4, r3
 800f972:	d10f      	bne.n	800f994 <__swsetup_r+0x3c>
 800f974:	686c      	ldr	r4, [r5, #4]
 800f976:	89a3      	ldrh	r3, [r4, #12]
 800f978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f97c:	0719      	lsls	r1, r3, #28
 800f97e:	d42c      	bmi.n	800f9da <__swsetup_r+0x82>
 800f980:	06dd      	lsls	r5, r3, #27
 800f982:	d411      	bmi.n	800f9a8 <__swsetup_r+0x50>
 800f984:	2309      	movs	r3, #9
 800f986:	6033      	str	r3, [r6, #0]
 800f988:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f98c:	81a3      	strh	r3, [r4, #12]
 800f98e:	f04f 30ff 	mov.w	r0, #4294967295
 800f992:	e03e      	b.n	800fa12 <__swsetup_r+0xba>
 800f994:	4b25      	ldr	r3, [pc, #148]	; (800fa2c <__swsetup_r+0xd4>)
 800f996:	429c      	cmp	r4, r3
 800f998:	d101      	bne.n	800f99e <__swsetup_r+0x46>
 800f99a:	68ac      	ldr	r4, [r5, #8]
 800f99c:	e7eb      	b.n	800f976 <__swsetup_r+0x1e>
 800f99e:	4b24      	ldr	r3, [pc, #144]	; (800fa30 <__swsetup_r+0xd8>)
 800f9a0:	429c      	cmp	r4, r3
 800f9a2:	bf08      	it	eq
 800f9a4:	68ec      	ldreq	r4, [r5, #12]
 800f9a6:	e7e6      	b.n	800f976 <__swsetup_r+0x1e>
 800f9a8:	0758      	lsls	r0, r3, #29
 800f9aa:	d512      	bpl.n	800f9d2 <__swsetup_r+0x7a>
 800f9ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f9ae:	b141      	cbz	r1, 800f9c2 <__swsetup_r+0x6a>
 800f9b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f9b4:	4299      	cmp	r1, r3
 800f9b6:	d002      	beq.n	800f9be <__swsetup_r+0x66>
 800f9b8:	4630      	mov	r0, r6
 800f9ba:	f7fb fe5d 	bl	800b678 <_free_r>
 800f9be:	2300      	movs	r3, #0
 800f9c0:	6363      	str	r3, [r4, #52]	; 0x34
 800f9c2:	89a3      	ldrh	r3, [r4, #12]
 800f9c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f9c8:	81a3      	strh	r3, [r4, #12]
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	6063      	str	r3, [r4, #4]
 800f9ce:	6923      	ldr	r3, [r4, #16]
 800f9d0:	6023      	str	r3, [r4, #0]
 800f9d2:	89a3      	ldrh	r3, [r4, #12]
 800f9d4:	f043 0308 	orr.w	r3, r3, #8
 800f9d8:	81a3      	strh	r3, [r4, #12]
 800f9da:	6923      	ldr	r3, [r4, #16]
 800f9dc:	b94b      	cbnz	r3, 800f9f2 <__swsetup_r+0x9a>
 800f9de:	89a3      	ldrh	r3, [r4, #12]
 800f9e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f9e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f9e8:	d003      	beq.n	800f9f2 <__swsetup_r+0x9a>
 800f9ea:	4621      	mov	r1, r4
 800f9ec:	4630      	mov	r0, r6
 800f9ee:	f000 fa09 	bl	800fe04 <__smakebuf_r>
 800f9f2:	89a0      	ldrh	r0, [r4, #12]
 800f9f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f9f8:	f010 0301 	ands.w	r3, r0, #1
 800f9fc:	d00a      	beq.n	800fa14 <__swsetup_r+0xbc>
 800f9fe:	2300      	movs	r3, #0
 800fa00:	60a3      	str	r3, [r4, #8]
 800fa02:	6963      	ldr	r3, [r4, #20]
 800fa04:	425b      	negs	r3, r3
 800fa06:	61a3      	str	r3, [r4, #24]
 800fa08:	6923      	ldr	r3, [r4, #16]
 800fa0a:	b943      	cbnz	r3, 800fa1e <__swsetup_r+0xc6>
 800fa0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fa10:	d1ba      	bne.n	800f988 <__swsetup_r+0x30>
 800fa12:	bd70      	pop	{r4, r5, r6, pc}
 800fa14:	0781      	lsls	r1, r0, #30
 800fa16:	bf58      	it	pl
 800fa18:	6963      	ldrpl	r3, [r4, #20]
 800fa1a:	60a3      	str	r3, [r4, #8]
 800fa1c:	e7f4      	b.n	800fa08 <__swsetup_r+0xb0>
 800fa1e:	2000      	movs	r0, #0
 800fa20:	e7f7      	b.n	800fa12 <__swsetup_r+0xba>
 800fa22:	bf00      	nop
 800fa24:	20000034 	.word	0x20000034
 800fa28:	08010aa0 	.word	0x08010aa0
 800fa2c:	08010ac0 	.word	0x08010ac0
 800fa30:	08010a80 	.word	0x08010a80

0800fa34 <abort>:
 800fa34:	b508      	push	{r3, lr}
 800fa36:	2006      	movs	r0, #6
 800fa38:	f000 fa96 	bl	800ff68 <raise>
 800fa3c:	2001      	movs	r0, #1
 800fa3e:	f7f3 fdaf 	bl	80035a0 <_exit>
	...

0800fa44 <__sflush_r>:
 800fa44:	898a      	ldrh	r2, [r1, #12]
 800fa46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa4a:	4605      	mov	r5, r0
 800fa4c:	0710      	lsls	r0, r2, #28
 800fa4e:	460c      	mov	r4, r1
 800fa50:	d458      	bmi.n	800fb04 <__sflush_r+0xc0>
 800fa52:	684b      	ldr	r3, [r1, #4]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	dc05      	bgt.n	800fa64 <__sflush_r+0x20>
 800fa58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	dc02      	bgt.n	800fa64 <__sflush_r+0x20>
 800fa5e:	2000      	movs	r0, #0
 800fa60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fa66:	2e00      	cmp	r6, #0
 800fa68:	d0f9      	beq.n	800fa5e <__sflush_r+0x1a>
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fa70:	682f      	ldr	r7, [r5, #0]
 800fa72:	602b      	str	r3, [r5, #0]
 800fa74:	d032      	beq.n	800fadc <__sflush_r+0x98>
 800fa76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fa78:	89a3      	ldrh	r3, [r4, #12]
 800fa7a:	075a      	lsls	r2, r3, #29
 800fa7c:	d505      	bpl.n	800fa8a <__sflush_r+0x46>
 800fa7e:	6863      	ldr	r3, [r4, #4]
 800fa80:	1ac0      	subs	r0, r0, r3
 800fa82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fa84:	b10b      	cbz	r3, 800fa8a <__sflush_r+0x46>
 800fa86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fa88:	1ac0      	subs	r0, r0, r3
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	4602      	mov	r2, r0
 800fa8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fa90:	6a21      	ldr	r1, [r4, #32]
 800fa92:	4628      	mov	r0, r5
 800fa94:	47b0      	blx	r6
 800fa96:	1c43      	adds	r3, r0, #1
 800fa98:	89a3      	ldrh	r3, [r4, #12]
 800fa9a:	d106      	bne.n	800faaa <__sflush_r+0x66>
 800fa9c:	6829      	ldr	r1, [r5, #0]
 800fa9e:	291d      	cmp	r1, #29
 800faa0:	d82c      	bhi.n	800fafc <__sflush_r+0xb8>
 800faa2:	4a2a      	ldr	r2, [pc, #168]	; (800fb4c <__sflush_r+0x108>)
 800faa4:	40ca      	lsrs	r2, r1
 800faa6:	07d6      	lsls	r6, r2, #31
 800faa8:	d528      	bpl.n	800fafc <__sflush_r+0xb8>
 800faaa:	2200      	movs	r2, #0
 800faac:	6062      	str	r2, [r4, #4]
 800faae:	04d9      	lsls	r1, r3, #19
 800fab0:	6922      	ldr	r2, [r4, #16]
 800fab2:	6022      	str	r2, [r4, #0]
 800fab4:	d504      	bpl.n	800fac0 <__sflush_r+0x7c>
 800fab6:	1c42      	adds	r2, r0, #1
 800fab8:	d101      	bne.n	800fabe <__sflush_r+0x7a>
 800faba:	682b      	ldr	r3, [r5, #0]
 800fabc:	b903      	cbnz	r3, 800fac0 <__sflush_r+0x7c>
 800fabe:	6560      	str	r0, [r4, #84]	; 0x54
 800fac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fac2:	602f      	str	r7, [r5, #0]
 800fac4:	2900      	cmp	r1, #0
 800fac6:	d0ca      	beq.n	800fa5e <__sflush_r+0x1a>
 800fac8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800facc:	4299      	cmp	r1, r3
 800face:	d002      	beq.n	800fad6 <__sflush_r+0x92>
 800fad0:	4628      	mov	r0, r5
 800fad2:	f7fb fdd1 	bl	800b678 <_free_r>
 800fad6:	2000      	movs	r0, #0
 800fad8:	6360      	str	r0, [r4, #52]	; 0x34
 800fada:	e7c1      	b.n	800fa60 <__sflush_r+0x1c>
 800fadc:	6a21      	ldr	r1, [r4, #32]
 800fade:	2301      	movs	r3, #1
 800fae0:	4628      	mov	r0, r5
 800fae2:	47b0      	blx	r6
 800fae4:	1c41      	adds	r1, r0, #1
 800fae6:	d1c7      	bne.n	800fa78 <__sflush_r+0x34>
 800fae8:	682b      	ldr	r3, [r5, #0]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d0c4      	beq.n	800fa78 <__sflush_r+0x34>
 800faee:	2b1d      	cmp	r3, #29
 800faf0:	d001      	beq.n	800faf6 <__sflush_r+0xb2>
 800faf2:	2b16      	cmp	r3, #22
 800faf4:	d101      	bne.n	800fafa <__sflush_r+0xb6>
 800faf6:	602f      	str	r7, [r5, #0]
 800faf8:	e7b1      	b.n	800fa5e <__sflush_r+0x1a>
 800fafa:	89a3      	ldrh	r3, [r4, #12]
 800fafc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb00:	81a3      	strh	r3, [r4, #12]
 800fb02:	e7ad      	b.n	800fa60 <__sflush_r+0x1c>
 800fb04:	690f      	ldr	r7, [r1, #16]
 800fb06:	2f00      	cmp	r7, #0
 800fb08:	d0a9      	beq.n	800fa5e <__sflush_r+0x1a>
 800fb0a:	0793      	lsls	r3, r2, #30
 800fb0c:	680e      	ldr	r6, [r1, #0]
 800fb0e:	bf08      	it	eq
 800fb10:	694b      	ldreq	r3, [r1, #20]
 800fb12:	600f      	str	r7, [r1, #0]
 800fb14:	bf18      	it	ne
 800fb16:	2300      	movne	r3, #0
 800fb18:	eba6 0807 	sub.w	r8, r6, r7
 800fb1c:	608b      	str	r3, [r1, #8]
 800fb1e:	f1b8 0f00 	cmp.w	r8, #0
 800fb22:	dd9c      	ble.n	800fa5e <__sflush_r+0x1a>
 800fb24:	6a21      	ldr	r1, [r4, #32]
 800fb26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fb28:	4643      	mov	r3, r8
 800fb2a:	463a      	mov	r2, r7
 800fb2c:	4628      	mov	r0, r5
 800fb2e:	47b0      	blx	r6
 800fb30:	2800      	cmp	r0, #0
 800fb32:	dc06      	bgt.n	800fb42 <__sflush_r+0xfe>
 800fb34:	89a3      	ldrh	r3, [r4, #12]
 800fb36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb3a:	81a3      	strh	r3, [r4, #12]
 800fb3c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb40:	e78e      	b.n	800fa60 <__sflush_r+0x1c>
 800fb42:	4407      	add	r7, r0
 800fb44:	eba8 0800 	sub.w	r8, r8, r0
 800fb48:	e7e9      	b.n	800fb1e <__sflush_r+0xda>
 800fb4a:	bf00      	nop
 800fb4c:	20400001 	.word	0x20400001

0800fb50 <_fflush_r>:
 800fb50:	b538      	push	{r3, r4, r5, lr}
 800fb52:	690b      	ldr	r3, [r1, #16]
 800fb54:	4605      	mov	r5, r0
 800fb56:	460c      	mov	r4, r1
 800fb58:	b913      	cbnz	r3, 800fb60 <_fflush_r+0x10>
 800fb5a:	2500      	movs	r5, #0
 800fb5c:	4628      	mov	r0, r5
 800fb5e:	bd38      	pop	{r3, r4, r5, pc}
 800fb60:	b118      	cbz	r0, 800fb6a <_fflush_r+0x1a>
 800fb62:	6983      	ldr	r3, [r0, #24]
 800fb64:	b90b      	cbnz	r3, 800fb6a <_fflush_r+0x1a>
 800fb66:	f000 f887 	bl	800fc78 <__sinit>
 800fb6a:	4b14      	ldr	r3, [pc, #80]	; (800fbbc <_fflush_r+0x6c>)
 800fb6c:	429c      	cmp	r4, r3
 800fb6e:	d11b      	bne.n	800fba8 <_fflush_r+0x58>
 800fb70:	686c      	ldr	r4, [r5, #4]
 800fb72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d0ef      	beq.n	800fb5a <_fflush_r+0xa>
 800fb7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fb7c:	07d0      	lsls	r0, r2, #31
 800fb7e:	d404      	bmi.n	800fb8a <_fflush_r+0x3a>
 800fb80:	0599      	lsls	r1, r3, #22
 800fb82:	d402      	bmi.n	800fb8a <_fflush_r+0x3a>
 800fb84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb86:	f000 f915 	bl	800fdb4 <__retarget_lock_acquire_recursive>
 800fb8a:	4628      	mov	r0, r5
 800fb8c:	4621      	mov	r1, r4
 800fb8e:	f7ff ff59 	bl	800fa44 <__sflush_r>
 800fb92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fb94:	07da      	lsls	r2, r3, #31
 800fb96:	4605      	mov	r5, r0
 800fb98:	d4e0      	bmi.n	800fb5c <_fflush_r+0xc>
 800fb9a:	89a3      	ldrh	r3, [r4, #12]
 800fb9c:	059b      	lsls	r3, r3, #22
 800fb9e:	d4dd      	bmi.n	800fb5c <_fflush_r+0xc>
 800fba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fba2:	f000 f908 	bl	800fdb6 <__retarget_lock_release_recursive>
 800fba6:	e7d9      	b.n	800fb5c <_fflush_r+0xc>
 800fba8:	4b05      	ldr	r3, [pc, #20]	; (800fbc0 <_fflush_r+0x70>)
 800fbaa:	429c      	cmp	r4, r3
 800fbac:	d101      	bne.n	800fbb2 <_fflush_r+0x62>
 800fbae:	68ac      	ldr	r4, [r5, #8]
 800fbb0:	e7df      	b.n	800fb72 <_fflush_r+0x22>
 800fbb2:	4b04      	ldr	r3, [pc, #16]	; (800fbc4 <_fflush_r+0x74>)
 800fbb4:	429c      	cmp	r4, r3
 800fbb6:	bf08      	it	eq
 800fbb8:	68ec      	ldreq	r4, [r5, #12]
 800fbba:	e7da      	b.n	800fb72 <_fflush_r+0x22>
 800fbbc:	08010aa0 	.word	0x08010aa0
 800fbc0:	08010ac0 	.word	0x08010ac0
 800fbc4:	08010a80 	.word	0x08010a80

0800fbc8 <std>:
 800fbc8:	2300      	movs	r3, #0
 800fbca:	b510      	push	{r4, lr}
 800fbcc:	4604      	mov	r4, r0
 800fbce:	e9c0 3300 	strd	r3, r3, [r0]
 800fbd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fbd6:	6083      	str	r3, [r0, #8]
 800fbd8:	8181      	strh	r1, [r0, #12]
 800fbda:	6643      	str	r3, [r0, #100]	; 0x64
 800fbdc:	81c2      	strh	r2, [r0, #14]
 800fbde:	6183      	str	r3, [r0, #24]
 800fbe0:	4619      	mov	r1, r3
 800fbe2:	2208      	movs	r2, #8
 800fbe4:	305c      	adds	r0, #92	; 0x5c
 800fbe6:	f7fb fd3f 	bl	800b668 <memset>
 800fbea:	4b05      	ldr	r3, [pc, #20]	; (800fc00 <std+0x38>)
 800fbec:	6263      	str	r3, [r4, #36]	; 0x24
 800fbee:	4b05      	ldr	r3, [pc, #20]	; (800fc04 <std+0x3c>)
 800fbf0:	62a3      	str	r3, [r4, #40]	; 0x28
 800fbf2:	4b05      	ldr	r3, [pc, #20]	; (800fc08 <std+0x40>)
 800fbf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fbf6:	4b05      	ldr	r3, [pc, #20]	; (800fc0c <std+0x44>)
 800fbf8:	6224      	str	r4, [r4, #32]
 800fbfa:	6323      	str	r3, [r4, #48]	; 0x30
 800fbfc:	bd10      	pop	{r4, pc}
 800fbfe:	bf00      	nop
 800fc00:	0800ffa1 	.word	0x0800ffa1
 800fc04:	0800ffc3 	.word	0x0800ffc3
 800fc08:	0800fffb 	.word	0x0800fffb
 800fc0c:	0801001f 	.word	0x0801001f

0800fc10 <_cleanup_r>:
 800fc10:	4901      	ldr	r1, [pc, #4]	; (800fc18 <_cleanup_r+0x8>)
 800fc12:	f000 b8af 	b.w	800fd74 <_fwalk_reent>
 800fc16:	bf00      	nop
 800fc18:	0800fb51 	.word	0x0800fb51

0800fc1c <__sfmoreglue>:
 800fc1c:	b570      	push	{r4, r5, r6, lr}
 800fc1e:	2268      	movs	r2, #104	; 0x68
 800fc20:	1e4d      	subs	r5, r1, #1
 800fc22:	4355      	muls	r5, r2
 800fc24:	460e      	mov	r6, r1
 800fc26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fc2a:	f7fb fd91 	bl	800b750 <_malloc_r>
 800fc2e:	4604      	mov	r4, r0
 800fc30:	b140      	cbz	r0, 800fc44 <__sfmoreglue+0x28>
 800fc32:	2100      	movs	r1, #0
 800fc34:	e9c0 1600 	strd	r1, r6, [r0]
 800fc38:	300c      	adds	r0, #12
 800fc3a:	60a0      	str	r0, [r4, #8]
 800fc3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fc40:	f7fb fd12 	bl	800b668 <memset>
 800fc44:	4620      	mov	r0, r4
 800fc46:	bd70      	pop	{r4, r5, r6, pc}

0800fc48 <__sfp_lock_acquire>:
 800fc48:	4801      	ldr	r0, [pc, #4]	; (800fc50 <__sfp_lock_acquire+0x8>)
 800fc4a:	f000 b8b3 	b.w	800fdb4 <__retarget_lock_acquire_recursive>
 800fc4e:	bf00      	nop
 800fc50:	20002aa9 	.word	0x20002aa9

0800fc54 <__sfp_lock_release>:
 800fc54:	4801      	ldr	r0, [pc, #4]	; (800fc5c <__sfp_lock_release+0x8>)
 800fc56:	f000 b8ae 	b.w	800fdb6 <__retarget_lock_release_recursive>
 800fc5a:	bf00      	nop
 800fc5c:	20002aa9 	.word	0x20002aa9

0800fc60 <__sinit_lock_acquire>:
 800fc60:	4801      	ldr	r0, [pc, #4]	; (800fc68 <__sinit_lock_acquire+0x8>)
 800fc62:	f000 b8a7 	b.w	800fdb4 <__retarget_lock_acquire_recursive>
 800fc66:	bf00      	nop
 800fc68:	20002aaa 	.word	0x20002aaa

0800fc6c <__sinit_lock_release>:
 800fc6c:	4801      	ldr	r0, [pc, #4]	; (800fc74 <__sinit_lock_release+0x8>)
 800fc6e:	f000 b8a2 	b.w	800fdb6 <__retarget_lock_release_recursive>
 800fc72:	bf00      	nop
 800fc74:	20002aaa 	.word	0x20002aaa

0800fc78 <__sinit>:
 800fc78:	b510      	push	{r4, lr}
 800fc7a:	4604      	mov	r4, r0
 800fc7c:	f7ff fff0 	bl	800fc60 <__sinit_lock_acquire>
 800fc80:	69a3      	ldr	r3, [r4, #24]
 800fc82:	b11b      	cbz	r3, 800fc8c <__sinit+0x14>
 800fc84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc88:	f7ff bff0 	b.w	800fc6c <__sinit_lock_release>
 800fc8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fc90:	6523      	str	r3, [r4, #80]	; 0x50
 800fc92:	4b13      	ldr	r3, [pc, #76]	; (800fce0 <__sinit+0x68>)
 800fc94:	4a13      	ldr	r2, [pc, #76]	; (800fce4 <__sinit+0x6c>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	62a2      	str	r2, [r4, #40]	; 0x28
 800fc9a:	42a3      	cmp	r3, r4
 800fc9c:	bf04      	itt	eq
 800fc9e:	2301      	moveq	r3, #1
 800fca0:	61a3      	streq	r3, [r4, #24]
 800fca2:	4620      	mov	r0, r4
 800fca4:	f000 f820 	bl	800fce8 <__sfp>
 800fca8:	6060      	str	r0, [r4, #4]
 800fcaa:	4620      	mov	r0, r4
 800fcac:	f000 f81c 	bl	800fce8 <__sfp>
 800fcb0:	60a0      	str	r0, [r4, #8]
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	f000 f818 	bl	800fce8 <__sfp>
 800fcb8:	2200      	movs	r2, #0
 800fcba:	60e0      	str	r0, [r4, #12]
 800fcbc:	2104      	movs	r1, #4
 800fcbe:	6860      	ldr	r0, [r4, #4]
 800fcc0:	f7ff ff82 	bl	800fbc8 <std>
 800fcc4:	68a0      	ldr	r0, [r4, #8]
 800fcc6:	2201      	movs	r2, #1
 800fcc8:	2109      	movs	r1, #9
 800fcca:	f7ff ff7d 	bl	800fbc8 <std>
 800fcce:	68e0      	ldr	r0, [r4, #12]
 800fcd0:	2202      	movs	r2, #2
 800fcd2:	2112      	movs	r1, #18
 800fcd4:	f7ff ff78 	bl	800fbc8 <std>
 800fcd8:	2301      	movs	r3, #1
 800fcda:	61a3      	str	r3, [r4, #24]
 800fcdc:	e7d2      	b.n	800fc84 <__sinit+0xc>
 800fcde:	bf00      	nop
 800fce0:	080105b8 	.word	0x080105b8
 800fce4:	0800fc11 	.word	0x0800fc11

0800fce8 <__sfp>:
 800fce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcea:	4607      	mov	r7, r0
 800fcec:	f7ff ffac 	bl	800fc48 <__sfp_lock_acquire>
 800fcf0:	4b1e      	ldr	r3, [pc, #120]	; (800fd6c <__sfp+0x84>)
 800fcf2:	681e      	ldr	r6, [r3, #0]
 800fcf4:	69b3      	ldr	r3, [r6, #24]
 800fcf6:	b913      	cbnz	r3, 800fcfe <__sfp+0x16>
 800fcf8:	4630      	mov	r0, r6
 800fcfa:	f7ff ffbd 	bl	800fc78 <__sinit>
 800fcfe:	3648      	adds	r6, #72	; 0x48
 800fd00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fd04:	3b01      	subs	r3, #1
 800fd06:	d503      	bpl.n	800fd10 <__sfp+0x28>
 800fd08:	6833      	ldr	r3, [r6, #0]
 800fd0a:	b30b      	cbz	r3, 800fd50 <__sfp+0x68>
 800fd0c:	6836      	ldr	r6, [r6, #0]
 800fd0e:	e7f7      	b.n	800fd00 <__sfp+0x18>
 800fd10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fd14:	b9d5      	cbnz	r5, 800fd4c <__sfp+0x64>
 800fd16:	4b16      	ldr	r3, [pc, #88]	; (800fd70 <__sfp+0x88>)
 800fd18:	60e3      	str	r3, [r4, #12]
 800fd1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fd1e:	6665      	str	r5, [r4, #100]	; 0x64
 800fd20:	f000 f847 	bl	800fdb2 <__retarget_lock_init_recursive>
 800fd24:	f7ff ff96 	bl	800fc54 <__sfp_lock_release>
 800fd28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fd2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fd30:	6025      	str	r5, [r4, #0]
 800fd32:	61a5      	str	r5, [r4, #24]
 800fd34:	2208      	movs	r2, #8
 800fd36:	4629      	mov	r1, r5
 800fd38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fd3c:	f7fb fc94 	bl	800b668 <memset>
 800fd40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fd44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fd48:	4620      	mov	r0, r4
 800fd4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd4c:	3468      	adds	r4, #104	; 0x68
 800fd4e:	e7d9      	b.n	800fd04 <__sfp+0x1c>
 800fd50:	2104      	movs	r1, #4
 800fd52:	4638      	mov	r0, r7
 800fd54:	f7ff ff62 	bl	800fc1c <__sfmoreglue>
 800fd58:	4604      	mov	r4, r0
 800fd5a:	6030      	str	r0, [r6, #0]
 800fd5c:	2800      	cmp	r0, #0
 800fd5e:	d1d5      	bne.n	800fd0c <__sfp+0x24>
 800fd60:	f7ff ff78 	bl	800fc54 <__sfp_lock_release>
 800fd64:	230c      	movs	r3, #12
 800fd66:	603b      	str	r3, [r7, #0]
 800fd68:	e7ee      	b.n	800fd48 <__sfp+0x60>
 800fd6a:	bf00      	nop
 800fd6c:	080105b8 	.word	0x080105b8
 800fd70:	ffff0001 	.word	0xffff0001

0800fd74 <_fwalk_reent>:
 800fd74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd78:	4606      	mov	r6, r0
 800fd7a:	4688      	mov	r8, r1
 800fd7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fd80:	2700      	movs	r7, #0
 800fd82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fd86:	f1b9 0901 	subs.w	r9, r9, #1
 800fd8a:	d505      	bpl.n	800fd98 <_fwalk_reent+0x24>
 800fd8c:	6824      	ldr	r4, [r4, #0]
 800fd8e:	2c00      	cmp	r4, #0
 800fd90:	d1f7      	bne.n	800fd82 <_fwalk_reent+0xe>
 800fd92:	4638      	mov	r0, r7
 800fd94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd98:	89ab      	ldrh	r3, [r5, #12]
 800fd9a:	2b01      	cmp	r3, #1
 800fd9c:	d907      	bls.n	800fdae <_fwalk_reent+0x3a>
 800fd9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fda2:	3301      	adds	r3, #1
 800fda4:	d003      	beq.n	800fdae <_fwalk_reent+0x3a>
 800fda6:	4629      	mov	r1, r5
 800fda8:	4630      	mov	r0, r6
 800fdaa:	47c0      	blx	r8
 800fdac:	4307      	orrs	r7, r0
 800fdae:	3568      	adds	r5, #104	; 0x68
 800fdb0:	e7e9      	b.n	800fd86 <_fwalk_reent+0x12>

0800fdb2 <__retarget_lock_init_recursive>:
 800fdb2:	4770      	bx	lr

0800fdb4 <__retarget_lock_acquire_recursive>:
 800fdb4:	4770      	bx	lr

0800fdb6 <__retarget_lock_release_recursive>:
 800fdb6:	4770      	bx	lr

0800fdb8 <__swhatbuf_r>:
 800fdb8:	b570      	push	{r4, r5, r6, lr}
 800fdba:	460e      	mov	r6, r1
 800fdbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdc0:	2900      	cmp	r1, #0
 800fdc2:	b096      	sub	sp, #88	; 0x58
 800fdc4:	4614      	mov	r4, r2
 800fdc6:	461d      	mov	r5, r3
 800fdc8:	da08      	bge.n	800fddc <__swhatbuf_r+0x24>
 800fdca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	602a      	str	r2, [r5, #0]
 800fdd2:	061a      	lsls	r2, r3, #24
 800fdd4:	d410      	bmi.n	800fdf8 <__swhatbuf_r+0x40>
 800fdd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fdda:	e00e      	b.n	800fdfa <__swhatbuf_r+0x42>
 800fddc:	466a      	mov	r2, sp
 800fdde:	f000 f945 	bl	801006c <_fstat_r>
 800fde2:	2800      	cmp	r0, #0
 800fde4:	dbf1      	blt.n	800fdca <__swhatbuf_r+0x12>
 800fde6:	9a01      	ldr	r2, [sp, #4]
 800fde8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fdec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fdf0:	425a      	negs	r2, r3
 800fdf2:	415a      	adcs	r2, r3
 800fdf4:	602a      	str	r2, [r5, #0]
 800fdf6:	e7ee      	b.n	800fdd6 <__swhatbuf_r+0x1e>
 800fdf8:	2340      	movs	r3, #64	; 0x40
 800fdfa:	2000      	movs	r0, #0
 800fdfc:	6023      	str	r3, [r4, #0]
 800fdfe:	b016      	add	sp, #88	; 0x58
 800fe00:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fe04 <__smakebuf_r>:
 800fe04:	898b      	ldrh	r3, [r1, #12]
 800fe06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe08:	079d      	lsls	r5, r3, #30
 800fe0a:	4606      	mov	r6, r0
 800fe0c:	460c      	mov	r4, r1
 800fe0e:	d507      	bpl.n	800fe20 <__smakebuf_r+0x1c>
 800fe10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fe14:	6023      	str	r3, [r4, #0]
 800fe16:	6123      	str	r3, [r4, #16]
 800fe18:	2301      	movs	r3, #1
 800fe1a:	6163      	str	r3, [r4, #20]
 800fe1c:	b002      	add	sp, #8
 800fe1e:	bd70      	pop	{r4, r5, r6, pc}
 800fe20:	ab01      	add	r3, sp, #4
 800fe22:	466a      	mov	r2, sp
 800fe24:	f7ff ffc8 	bl	800fdb8 <__swhatbuf_r>
 800fe28:	9900      	ldr	r1, [sp, #0]
 800fe2a:	4605      	mov	r5, r0
 800fe2c:	4630      	mov	r0, r6
 800fe2e:	f7fb fc8f 	bl	800b750 <_malloc_r>
 800fe32:	b948      	cbnz	r0, 800fe48 <__smakebuf_r+0x44>
 800fe34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe38:	059a      	lsls	r2, r3, #22
 800fe3a:	d4ef      	bmi.n	800fe1c <__smakebuf_r+0x18>
 800fe3c:	f023 0303 	bic.w	r3, r3, #3
 800fe40:	f043 0302 	orr.w	r3, r3, #2
 800fe44:	81a3      	strh	r3, [r4, #12]
 800fe46:	e7e3      	b.n	800fe10 <__smakebuf_r+0xc>
 800fe48:	4b0d      	ldr	r3, [pc, #52]	; (800fe80 <__smakebuf_r+0x7c>)
 800fe4a:	62b3      	str	r3, [r6, #40]	; 0x28
 800fe4c:	89a3      	ldrh	r3, [r4, #12]
 800fe4e:	6020      	str	r0, [r4, #0]
 800fe50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe54:	81a3      	strh	r3, [r4, #12]
 800fe56:	9b00      	ldr	r3, [sp, #0]
 800fe58:	6163      	str	r3, [r4, #20]
 800fe5a:	9b01      	ldr	r3, [sp, #4]
 800fe5c:	6120      	str	r0, [r4, #16]
 800fe5e:	b15b      	cbz	r3, 800fe78 <__smakebuf_r+0x74>
 800fe60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe64:	4630      	mov	r0, r6
 800fe66:	f000 f913 	bl	8010090 <_isatty_r>
 800fe6a:	b128      	cbz	r0, 800fe78 <__smakebuf_r+0x74>
 800fe6c:	89a3      	ldrh	r3, [r4, #12]
 800fe6e:	f023 0303 	bic.w	r3, r3, #3
 800fe72:	f043 0301 	orr.w	r3, r3, #1
 800fe76:	81a3      	strh	r3, [r4, #12]
 800fe78:	89a0      	ldrh	r0, [r4, #12]
 800fe7a:	4305      	orrs	r5, r0
 800fe7c:	81a5      	strh	r5, [r4, #12]
 800fe7e:	e7cd      	b.n	800fe1c <__smakebuf_r+0x18>
 800fe80:	0800fc11 	.word	0x0800fc11

0800fe84 <memmove>:
 800fe84:	4288      	cmp	r0, r1
 800fe86:	b510      	push	{r4, lr}
 800fe88:	eb01 0402 	add.w	r4, r1, r2
 800fe8c:	d902      	bls.n	800fe94 <memmove+0x10>
 800fe8e:	4284      	cmp	r4, r0
 800fe90:	4623      	mov	r3, r4
 800fe92:	d807      	bhi.n	800fea4 <memmove+0x20>
 800fe94:	1e43      	subs	r3, r0, #1
 800fe96:	42a1      	cmp	r1, r4
 800fe98:	d008      	beq.n	800feac <memmove+0x28>
 800fe9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fea2:	e7f8      	b.n	800fe96 <memmove+0x12>
 800fea4:	4402      	add	r2, r0
 800fea6:	4601      	mov	r1, r0
 800fea8:	428a      	cmp	r2, r1
 800feaa:	d100      	bne.n	800feae <memmove+0x2a>
 800feac:	bd10      	pop	{r4, pc}
 800feae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800feb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800feb6:	e7f7      	b.n	800fea8 <memmove+0x24>

0800feb8 <_realloc_r>:
 800feb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800febc:	4680      	mov	r8, r0
 800febe:	4614      	mov	r4, r2
 800fec0:	460e      	mov	r6, r1
 800fec2:	b921      	cbnz	r1, 800fece <_realloc_r+0x16>
 800fec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fec8:	4611      	mov	r1, r2
 800feca:	f7fb bc41 	b.w	800b750 <_malloc_r>
 800fece:	b92a      	cbnz	r2, 800fedc <_realloc_r+0x24>
 800fed0:	f7fb fbd2 	bl	800b678 <_free_r>
 800fed4:	4625      	mov	r5, r4
 800fed6:	4628      	mov	r0, r5
 800fed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fedc:	f000 f8fa 	bl	80100d4 <_malloc_usable_size_r>
 800fee0:	4284      	cmp	r4, r0
 800fee2:	4607      	mov	r7, r0
 800fee4:	d802      	bhi.n	800feec <_realloc_r+0x34>
 800fee6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800feea:	d812      	bhi.n	800ff12 <_realloc_r+0x5a>
 800feec:	4621      	mov	r1, r4
 800feee:	4640      	mov	r0, r8
 800fef0:	f7fb fc2e 	bl	800b750 <_malloc_r>
 800fef4:	4605      	mov	r5, r0
 800fef6:	2800      	cmp	r0, #0
 800fef8:	d0ed      	beq.n	800fed6 <_realloc_r+0x1e>
 800fefa:	42bc      	cmp	r4, r7
 800fefc:	4622      	mov	r2, r4
 800fefe:	4631      	mov	r1, r6
 800ff00:	bf28      	it	cs
 800ff02:	463a      	movcs	r2, r7
 800ff04:	f7fe fd06 	bl	800e914 <memcpy>
 800ff08:	4631      	mov	r1, r6
 800ff0a:	4640      	mov	r0, r8
 800ff0c:	f7fb fbb4 	bl	800b678 <_free_r>
 800ff10:	e7e1      	b.n	800fed6 <_realloc_r+0x1e>
 800ff12:	4635      	mov	r5, r6
 800ff14:	e7df      	b.n	800fed6 <_realloc_r+0x1e>

0800ff16 <_raise_r>:
 800ff16:	291f      	cmp	r1, #31
 800ff18:	b538      	push	{r3, r4, r5, lr}
 800ff1a:	4604      	mov	r4, r0
 800ff1c:	460d      	mov	r5, r1
 800ff1e:	d904      	bls.n	800ff2a <_raise_r+0x14>
 800ff20:	2316      	movs	r3, #22
 800ff22:	6003      	str	r3, [r0, #0]
 800ff24:	f04f 30ff 	mov.w	r0, #4294967295
 800ff28:	bd38      	pop	{r3, r4, r5, pc}
 800ff2a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ff2c:	b112      	cbz	r2, 800ff34 <_raise_r+0x1e>
 800ff2e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ff32:	b94b      	cbnz	r3, 800ff48 <_raise_r+0x32>
 800ff34:	4620      	mov	r0, r4
 800ff36:	f000 f831 	bl	800ff9c <_getpid_r>
 800ff3a:	462a      	mov	r2, r5
 800ff3c:	4601      	mov	r1, r0
 800ff3e:	4620      	mov	r0, r4
 800ff40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff44:	f000 b818 	b.w	800ff78 <_kill_r>
 800ff48:	2b01      	cmp	r3, #1
 800ff4a:	d00a      	beq.n	800ff62 <_raise_r+0x4c>
 800ff4c:	1c59      	adds	r1, r3, #1
 800ff4e:	d103      	bne.n	800ff58 <_raise_r+0x42>
 800ff50:	2316      	movs	r3, #22
 800ff52:	6003      	str	r3, [r0, #0]
 800ff54:	2001      	movs	r0, #1
 800ff56:	e7e7      	b.n	800ff28 <_raise_r+0x12>
 800ff58:	2400      	movs	r4, #0
 800ff5a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ff5e:	4628      	mov	r0, r5
 800ff60:	4798      	blx	r3
 800ff62:	2000      	movs	r0, #0
 800ff64:	e7e0      	b.n	800ff28 <_raise_r+0x12>
	...

0800ff68 <raise>:
 800ff68:	4b02      	ldr	r3, [pc, #8]	; (800ff74 <raise+0xc>)
 800ff6a:	4601      	mov	r1, r0
 800ff6c:	6818      	ldr	r0, [r3, #0]
 800ff6e:	f7ff bfd2 	b.w	800ff16 <_raise_r>
 800ff72:	bf00      	nop
 800ff74:	20000034 	.word	0x20000034

0800ff78 <_kill_r>:
 800ff78:	b538      	push	{r3, r4, r5, lr}
 800ff7a:	4d07      	ldr	r5, [pc, #28]	; (800ff98 <_kill_r+0x20>)
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	4604      	mov	r4, r0
 800ff80:	4608      	mov	r0, r1
 800ff82:	4611      	mov	r1, r2
 800ff84:	602b      	str	r3, [r5, #0]
 800ff86:	f7f3 fafb 	bl	8003580 <_kill>
 800ff8a:	1c43      	adds	r3, r0, #1
 800ff8c:	d102      	bne.n	800ff94 <_kill_r+0x1c>
 800ff8e:	682b      	ldr	r3, [r5, #0]
 800ff90:	b103      	cbz	r3, 800ff94 <_kill_r+0x1c>
 800ff92:	6023      	str	r3, [r4, #0]
 800ff94:	bd38      	pop	{r3, r4, r5, pc}
 800ff96:	bf00      	nop
 800ff98:	20002aa4 	.word	0x20002aa4

0800ff9c <_getpid_r>:
 800ff9c:	f7f3 bae8 	b.w	8003570 <_getpid>

0800ffa0 <__sread>:
 800ffa0:	b510      	push	{r4, lr}
 800ffa2:	460c      	mov	r4, r1
 800ffa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffa8:	f000 f89c 	bl	80100e4 <_read_r>
 800ffac:	2800      	cmp	r0, #0
 800ffae:	bfab      	itete	ge
 800ffb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ffb2:	89a3      	ldrhlt	r3, [r4, #12]
 800ffb4:	181b      	addge	r3, r3, r0
 800ffb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ffba:	bfac      	ite	ge
 800ffbc:	6563      	strge	r3, [r4, #84]	; 0x54
 800ffbe:	81a3      	strhlt	r3, [r4, #12]
 800ffc0:	bd10      	pop	{r4, pc}

0800ffc2 <__swrite>:
 800ffc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffc6:	461f      	mov	r7, r3
 800ffc8:	898b      	ldrh	r3, [r1, #12]
 800ffca:	05db      	lsls	r3, r3, #23
 800ffcc:	4605      	mov	r5, r0
 800ffce:	460c      	mov	r4, r1
 800ffd0:	4616      	mov	r6, r2
 800ffd2:	d505      	bpl.n	800ffe0 <__swrite+0x1e>
 800ffd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffd8:	2302      	movs	r3, #2
 800ffda:	2200      	movs	r2, #0
 800ffdc:	f000 f868 	bl	80100b0 <_lseek_r>
 800ffe0:	89a3      	ldrh	r3, [r4, #12]
 800ffe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ffea:	81a3      	strh	r3, [r4, #12]
 800ffec:	4632      	mov	r2, r6
 800ffee:	463b      	mov	r3, r7
 800fff0:	4628      	mov	r0, r5
 800fff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fff6:	f000 b817 	b.w	8010028 <_write_r>

0800fffa <__sseek>:
 800fffa:	b510      	push	{r4, lr}
 800fffc:	460c      	mov	r4, r1
 800fffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010002:	f000 f855 	bl	80100b0 <_lseek_r>
 8010006:	1c43      	adds	r3, r0, #1
 8010008:	89a3      	ldrh	r3, [r4, #12]
 801000a:	bf15      	itete	ne
 801000c:	6560      	strne	r0, [r4, #84]	; 0x54
 801000e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010016:	81a3      	strheq	r3, [r4, #12]
 8010018:	bf18      	it	ne
 801001a:	81a3      	strhne	r3, [r4, #12]
 801001c:	bd10      	pop	{r4, pc}

0801001e <__sclose>:
 801001e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010022:	f000 b813 	b.w	801004c <_close_r>
	...

08010028 <_write_r>:
 8010028:	b538      	push	{r3, r4, r5, lr}
 801002a:	4d07      	ldr	r5, [pc, #28]	; (8010048 <_write_r+0x20>)
 801002c:	4604      	mov	r4, r0
 801002e:	4608      	mov	r0, r1
 8010030:	4611      	mov	r1, r2
 8010032:	2200      	movs	r2, #0
 8010034:	602a      	str	r2, [r5, #0]
 8010036:	461a      	mov	r2, r3
 8010038:	f7f3 fad9 	bl	80035ee <_write>
 801003c:	1c43      	adds	r3, r0, #1
 801003e:	d102      	bne.n	8010046 <_write_r+0x1e>
 8010040:	682b      	ldr	r3, [r5, #0]
 8010042:	b103      	cbz	r3, 8010046 <_write_r+0x1e>
 8010044:	6023      	str	r3, [r4, #0]
 8010046:	bd38      	pop	{r3, r4, r5, pc}
 8010048:	20002aa4 	.word	0x20002aa4

0801004c <_close_r>:
 801004c:	b538      	push	{r3, r4, r5, lr}
 801004e:	4d06      	ldr	r5, [pc, #24]	; (8010068 <_close_r+0x1c>)
 8010050:	2300      	movs	r3, #0
 8010052:	4604      	mov	r4, r0
 8010054:	4608      	mov	r0, r1
 8010056:	602b      	str	r3, [r5, #0]
 8010058:	f7f3 fae5 	bl	8003626 <_close>
 801005c:	1c43      	adds	r3, r0, #1
 801005e:	d102      	bne.n	8010066 <_close_r+0x1a>
 8010060:	682b      	ldr	r3, [r5, #0]
 8010062:	b103      	cbz	r3, 8010066 <_close_r+0x1a>
 8010064:	6023      	str	r3, [r4, #0]
 8010066:	bd38      	pop	{r3, r4, r5, pc}
 8010068:	20002aa4 	.word	0x20002aa4

0801006c <_fstat_r>:
 801006c:	b538      	push	{r3, r4, r5, lr}
 801006e:	4d07      	ldr	r5, [pc, #28]	; (801008c <_fstat_r+0x20>)
 8010070:	2300      	movs	r3, #0
 8010072:	4604      	mov	r4, r0
 8010074:	4608      	mov	r0, r1
 8010076:	4611      	mov	r1, r2
 8010078:	602b      	str	r3, [r5, #0]
 801007a:	f7f3 fae0 	bl	800363e <_fstat>
 801007e:	1c43      	adds	r3, r0, #1
 8010080:	d102      	bne.n	8010088 <_fstat_r+0x1c>
 8010082:	682b      	ldr	r3, [r5, #0]
 8010084:	b103      	cbz	r3, 8010088 <_fstat_r+0x1c>
 8010086:	6023      	str	r3, [r4, #0]
 8010088:	bd38      	pop	{r3, r4, r5, pc}
 801008a:	bf00      	nop
 801008c:	20002aa4 	.word	0x20002aa4

08010090 <_isatty_r>:
 8010090:	b538      	push	{r3, r4, r5, lr}
 8010092:	4d06      	ldr	r5, [pc, #24]	; (80100ac <_isatty_r+0x1c>)
 8010094:	2300      	movs	r3, #0
 8010096:	4604      	mov	r4, r0
 8010098:	4608      	mov	r0, r1
 801009a:	602b      	str	r3, [r5, #0]
 801009c:	f7f3 fadf 	bl	800365e <_isatty>
 80100a0:	1c43      	adds	r3, r0, #1
 80100a2:	d102      	bne.n	80100aa <_isatty_r+0x1a>
 80100a4:	682b      	ldr	r3, [r5, #0]
 80100a6:	b103      	cbz	r3, 80100aa <_isatty_r+0x1a>
 80100a8:	6023      	str	r3, [r4, #0]
 80100aa:	bd38      	pop	{r3, r4, r5, pc}
 80100ac:	20002aa4 	.word	0x20002aa4

080100b0 <_lseek_r>:
 80100b0:	b538      	push	{r3, r4, r5, lr}
 80100b2:	4d07      	ldr	r5, [pc, #28]	; (80100d0 <_lseek_r+0x20>)
 80100b4:	4604      	mov	r4, r0
 80100b6:	4608      	mov	r0, r1
 80100b8:	4611      	mov	r1, r2
 80100ba:	2200      	movs	r2, #0
 80100bc:	602a      	str	r2, [r5, #0]
 80100be:	461a      	mov	r2, r3
 80100c0:	f7f3 fad8 	bl	8003674 <_lseek>
 80100c4:	1c43      	adds	r3, r0, #1
 80100c6:	d102      	bne.n	80100ce <_lseek_r+0x1e>
 80100c8:	682b      	ldr	r3, [r5, #0]
 80100ca:	b103      	cbz	r3, 80100ce <_lseek_r+0x1e>
 80100cc:	6023      	str	r3, [r4, #0]
 80100ce:	bd38      	pop	{r3, r4, r5, pc}
 80100d0:	20002aa4 	.word	0x20002aa4

080100d4 <_malloc_usable_size_r>:
 80100d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100d8:	1f18      	subs	r0, r3, #4
 80100da:	2b00      	cmp	r3, #0
 80100dc:	bfbc      	itt	lt
 80100de:	580b      	ldrlt	r3, [r1, r0]
 80100e0:	18c0      	addlt	r0, r0, r3
 80100e2:	4770      	bx	lr

080100e4 <_read_r>:
 80100e4:	b538      	push	{r3, r4, r5, lr}
 80100e6:	4d07      	ldr	r5, [pc, #28]	; (8010104 <_read_r+0x20>)
 80100e8:	4604      	mov	r4, r0
 80100ea:	4608      	mov	r0, r1
 80100ec:	4611      	mov	r1, r2
 80100ee:	2200      	movs	r2, #0
 80100f0:	602a      	str	r2, [r5, #0]
 80100f2:	461a      	mov	r2, r3
 80100f4:	f7f3 fa5e 	bl	80035b4 <_read>
 80100f8:	1c43      	adds	r3, r0, #1
 80100fa:	d102      	bne.n	8010102 <_read_r+0x1e>
 80100fc:	682b      	ldr	r3, [r5, #0]
 80100fe:	b103      	cbz	r3, 8010102 <_read_r+0x1e>
 8010100:	6023      	str	r3, [r4, #0]
 8010102:	bd38      	pop	{r3, r4, r5, pc}
 8010104:	20002aa4 	.word	0x20002aa4

08010108 <_init>:
 8010108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801010a:	bf00      	nop
 801010c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801010e:	bc08      	pop	{r3}
 8010110:	469e      	mov	lr, r3
 8010112:	4770      	bx	lr

08010114 <_fini>:
 8010114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010116:	bf00      	nop
 8010118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801011a:	bc08      	pop	{r3}
 801011c:	469e      	mov	lr, r3
 801011e:	4770      	bx	lr
